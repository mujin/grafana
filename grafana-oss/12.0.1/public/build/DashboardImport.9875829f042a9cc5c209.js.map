{"version":3,"file":"DashboardImport.9875829f042a9cc5c209.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/Form/Form.tsx","webpack://grafana/./public/app/features/manage-dashboards/utils/validation.ts","webpack://grafana/./public/app/features/dashboard-scene/v2schema/ImportDashboardFormV2.tsx","webpack://grafana/./public/app/features/dashboard-scene/v2schema/ImportDashboardOverviewV2.tsx","webpack://grafana/./public/app/features/manage-dashboards/components/ImportDashboardLibraryPanelsList.tsx","webpack://grafana/./public/app/features/manage-dashboards/components/ImportDashboardForm.tsx","webpack://grafana/./public/app/features/manage-dashboards/components/ImportDashboardOverview.tsx","webpack://grafana/./public/app/features/manage-dashboards/DashboardImportPage.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { HTMLProps, useEffect } from 'react';\nimport * as React from 'react';\nimport {\n  useForm,\n  Mode,\n  DefaultValues,\n  SubmitHandler,\n  FieldValues,\n  UseFormReturn,\n  FieldErrors,\n  FieldPath,\n} from 'react-hook-form';\n\nexport type FormAPI<T extends FieldValues> = Omit<UseFormReturn<T>, 'handleSubmit'> & {\n  errors: FieldErrors<T>;\n};\n\ninterface FormProps<T extends FieldValues> extends Omit<HTMLProps<HTMLFormElement>, 'onSubmit' | 'children'> {\n  validateOn?: Mode;\n  validateOnMount?: boolean;\n  validateFieldsOnMount?: FieldPath<T> | Array<FieldPath<T>>;\n  defaultValues?: DefaultValues<T>;\n  onSubmit: SubmitHandler<T>;\n  children: (api: FormAPI<T>) => React.ReactNode;\n  /** Sets max-width for container. Use it instead of setting individual widths on inputs.*/\n  maxWidth?: number | 'none';\n}\n\nexport function Form<T extends FieldValues>({\n  defaultValues,\n  onSubmit,\n  validateOnMount = false,\n  validateFieldsOnMount,\n  children,\n  validateOn = 'onSubmit',\n  maxWidth = 600,\n  ...htmlProps\n}: FormProps<T>) {\n  const { handleSubmit, trigger, formState, ...rest } = useForm<T>({\n    mode: validateOn,\n    defaultValues,\n  });\n\n  useEffect(() => {\n    if (validateOnMount) {\n      trigger(validateFieldsOnMount);\n    }\n  }, [trigger, validateFieldsOnMount, validateOnMount]);\n\n  return (\n    <form\n      className={css({\n        maxWidth: maxWidth !== 'none' ? maxWidth + 'px' : maxWidth,\n        width: '100%',\n      })}\n      onSubmit={handleSubmit(onSubmit)}\n      {...htmlProps}\n    >\n      {children({ errors: formState.errors, formState, trigger, ...rest })}\n    </form>\n  );\n}\n","import { t } from 'app/core/internationalization';\nimport { AnnoKeyFolderTitle } from 'app/features/apiserver/types';\nimport { getDashboardAPI } from 'app/features/dashboard/api/dashboard_api';\nimport { isDashboardV2Resource } from 'app/features/dashboard/api/utils';\n\nimport { validationSrv } from '../services/ValidationSrv';\n\nexport const validateDashboardJson = (json: string) => {\n  let dashboard;\n  try {\n    dashboard = JSON.parse(json);\n  } catch (error) {\n    return t('dashboard.validation.invalid-json', 'Not valid JSON');\n  }\n  if (dashboard && dashboard.hasOwnProperty('tags')) {\n    if (Array.isArray(dashboard.tags)) {\n      const hasInvalidTag = dashboard.tags.some((tag: string) => typeof tag !== 'string');\n      if (hasInvalidTag) {\n        return t('dashboard.validation.tags-expected-strings', 'tags expected array of strings');\n      }\n    } else {\n      return t('dashboard.validation.tags-expected-array', 'tags expected array');\n    }\n  }\n  return true;\n};\n\nexport const validateGcomDashboard = (gcomDashboard: string) => {\n  // From DashboardImportCtrl\n  const match = /(^\\d+$)|dashboards\\/(\\d+)/.exec(gcomDashboard);\n\n  return match && (match[1] || match[2])\n    ? true\n    : t('dashboard.validation.invalid-dashboard-id', 'Could not find a valid Grafana.com ID');\n};\n\nexport const validateTitle = (newTitle: string, folderUid: string) => {\n  return validationSrv\n    .validateNewDashboardName(folderUid, newTitle)\n    .then(() => {\n      return true;\n    })\n    .catch((error) => {\n      if (error.type === 'EXISTING') {\n        return error.message;\n      }\n    });\n};\n\nexport const validateUid = (value: string) => {\n  return getDashboardAPI()\n    .getDashboardDTO(value)\n    .then((existingDashboard) => {\n      const isV2 = isDashboardV2Resource(existingDashboard);\n      const dashboard = isV2 ? existingDashboard.spec : existingDashboard.dashboard;\n      const folderTitle = isV2\n        ? existingDashboard.metadata.annotations?.[AnnoKeyFolderTitle]\n        : existingDashboard.meta.folderTitle;\n      return `Dashboard named '${dashboard.title}' in folder '${folderTitle}' has the same UID`;\n    })\n    .catch((error) => {\n      error.isHandled = true;\n\n      // when Editor user tries to import admin only dashboard (with same uid) he gets an unhelpful 403 error\n      //  therefore handling this use case to return some indication of whats wrong\n      if (error.status === 403) {\n        return 'Dashboard with the same UID already exists';\n      }\n      return true;\n    });\n};\n","import { useEffect, useState } from 'react';\nimport { Controller, FieldErrors, UseFormReturn } from 'react-hook-form';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { ExpressionDatasourceRef } from '@grafana/runtime/internal';\nimport { DashboardV2Spec } from '@grafana/schema/dist/esm/schema/dashboard/v2alpha0';\nimport { Button, Field, FormFieldErrors, FormsOnSubmit, Stack, Input } from '@grafana/ui';\nimport { FolderPicker } from 'app/core/components/Select/FolderPicker';\nimport { t, Trans } from 'app/core/internationalization';\nimport { SaveDashboardCommand } from 'app/features/dashboard/components/SaveDashboard/types';\nimport { DataSourcePicker } from 'app/features/datasources/components/picker/DataSourcePicker';\nimport { DashboardInputs, DataSourceInput } from 'app/features/manage-dashboards/state/reducers';\nimport { validateTitle } from 'app/features/manage-dashboards/utils/validation';\ninterface Props\n  extends Pick<\n    UseFormReturn<SaveDashboardCommand<DashboardV2Spec> & { [key: `datasource-${string}`]: string }>,\n    'register' | 'control' | 'getValues' | 'watch'\n  > {\n  inputs: DashboardInputs;\n  uidReset: boolean;\n  errors: FieldErrors<SaveDashboardCommand<DashboardV2Spec> & { [key: `datasource-${string}`]: string }>;\n  onCancel: () => void;\n  onUidReset: () => void;\n  onSubmit: FormsOnSubmit<SaveDashboardCommand<DashboardV2Spec> & { [key: `datasource-${string}`]: string }>;\n}\n\nexport const ImportDashboardFormV2 = ({\n  register,\n  errors,\n  control,\n  inputs,\n  getValues,\n  uidReset,\n  onUidReset,\n  onCancel,\n  onSubmit,\n  watch,\n}: Props) => {\n  const [isSubmitted, setSubmitted] = useState(false);\n  const [selectedDataSources, setSelectedDataSources] = useState<Record<string, { uid: string; type: string }>>({});\n  /*\n    This useEffect is needed for overwriting a dashboard. It\n    submits the form even if there's validation errors on title or uid.\n  */\n  useEffect(() => {\n    if (isSubmitted && (errors.dashboard?.title || errors.k8s?.name)) {\n      const formValues = getValues();\n      onSubmit({\n        ...formValues,\n        dashboard: {\n          ...formValues.dashboard,\n          title: formValues.dashboard.title,\n        },\n      });\n    }\n  }, [errors, getValues, isSubmitted, onSubmit]);\n\n  return (\n    <>\n      <Trans i18nKey=\"manage-dashboards.import-dashboard-form.options\">Options</Trans>\n      <Field\n        label={t('manage-dashboards.import-dashboard-form.label-name', 'Name')}\n        invalid={!!errors.dashboard?.title}\n        error={errors.dashboard?.title && errors.dashboard?.title.message}\n      >\n        <Input\n          {...(register as any)('dashboard.title', {\n            required: 'Name is required',\n            validate: async (v: string) => await validateTitle(v, getValues().folderUid ?? ''),\n          })}\n          type=\"text\"\n          data-testid={selectors.components.ImportDashboardForm.name}\n        />\n      </Field>\n      <Field label=\"Folder\">\n        <Controller<any>\n          render={({ field: { ref, value, onChange, ...field } }) => (\n            <FolderPicker\n              {...field}\n              onChange={(uid, title) => {\n                onChange(uid, title);\n              }}\n              value={value}\n            />\n          )}\n          name=\"folderUid\"\n          control={control}\n        />\n      </Field>\n      {inputs.dataSources &&\n        inputs.dataSources.map((input: DataSourceInput) => {\n          if (input.pluginId === ExpressionDatasourceRef.type) {\n            return null;\n          }\n\n          const dataSourceOption = `datasource-${input.pluginId}` as const;\n\n          return (\n            <Field\n              label={input.label}\n              description={input.description}\n              key={input.pluginId}\n              invalid={!!errors[dataSourceOption]}\n              error={errors[dataSourceOption] ? 'Please select a data source' : undefined}\n            >\n              <Controller<any>\n                name={dataSourceOption}\n                render={({ field: { ref, ...field } }) => (\n                  <DataSourcePicker\n                    {...field}\n                    noDefault={true}\n                    placeholder={input.info}\n                    pluginId={input.pluginId}\n                    current={selectedDataSources[input.pluginId]}\n                    onChange={(ds) => {\n                      field.onChange(ds);\n                      // Update our selected datasources map\n                      setSelectedDataSources((prev) => ({\n                        ...prev,\n                        [input.pluginId]: {\n                          uid: ds.uid,\n                          type: ds.type,\n                        },\n                      }));\n                    }}\n                  />\n                )}\n                control={control}\n                rules={{ required: true }}\n              />\n            </Field>\n          );\n        })}\n\n      <Stack>\n        <Button\n          type=\"submit\"\n          data-testid={selectors.components.ImportDashboardForm.submit}\n          variant={getButtonVariant(errors)}\n          onClick={() => {\n            setSubmitted(true);\n          }}\n        >\n          {getButtonText(errors)}\n        </Button>\n        <Button type=\"reset\" variant=\"secondary\" onClick={onCancel}>\n          Cancel\n        </Button>\n      </Stack>\n    </>\n  );\n};\n\nfunction getButtonVariant(\n  errors: FormFieldErrors<SaveDashboardCommand<DashboardV2Spec> & { [key: `datasource-${string}`]: string }>\n) {\n  return errors && (errors.dashboard?.title || errors.k8s?.name) ? 'destructive' : 'primary';\n}\n\nfunction getButtonText(\n  errors: FormFieldErrors<SaveDashboardCommand<DashboardV2Spec> & { [key: `datasource-${string}`]: string }>\n) {\n  return errors && (errors.dashboard?.title || errors.k8s?.name) ? 'Import (Overwrite)' : 'Import';\n}\n","import { useState } from 'react';\n\nimport { locationUtil } from '@grafana/data';\nimport { locationService, reportInteraction } from '@grafana/runtime';\nimport { DashboardV2Spec } from '@grafana/schema/dist/esm/schema/dashboard/v2alpha0';\nimport { AnnotationQueryKind } from '@grafana/schema/dist/esm/schema/dashboard/v2alpha1/types.spec.gen';\nimport { Form } from 'app/core/components/Form/Form';\nimport { getDashboardAPI } from 'app/features/dashboard/api/dashboard_api';\nimport { SaveDashboardCommand } from 'app/features/dashboard/components/SaveDashboard/types';\nimport { clearLoadedDashboard } from 'app/features/manage-dashboards/state/actions';\nimport { useDispatch, useSelector, StoreState } from 'app/types';\n\nimport { ImportDashboardFormV2 } from './ImportDashboardFormV2';\n\nconst IMPORT_FINISHED_EVENT_NAME = 'dashboard_import_imported';\n\nexport function ImportDashboardOverviewV2() {\n  const [uidReset, setUidReset] = useState(false);\n  const dispatch = useDispatch();\n\n  // Get state from Redux store\n  const searchObj = locationService.getSearchObject();\n  const dashboard = useSelector((state: StoreState) => state.importDashboard.dashboard as DashboardV2Spec);\n  const inputs = useSelector((state: StoreState) => state.importDashboard.inputs);\n  const folder = searchObj.folderUid ? { uid: String(searchObj.folderUid) } : { uid: '' };\n\n  function onUidReset() {\n    setUidReset(true);\n  }\n\n  function onCancel() {\n    dispatch(clearLoadedDashboard());\n  }\n\n  async function onSubmit(form: SaveDashboardCommand<DashboardV2Spec>) {\n    reportInteraction(IMPORT_FINISHED_EVENT_NAME);\n\n    const dashboardWithDataSources: DashboardV2Spec = {\n      ...dashboard,\n      title: form.dashboard.title,\n      annotations: dashboard.annotations?.map((annotation: AnnotationQueryKind) => {\n        if (annotation.spec.query?.kind) {\n          const dsType = annotation.spec.query.kind;\n          if (form[`datasource-${dsType}` as keyof typeof form]) {\n            const ds = form[`datasource-${dsType}` as keyof typeof form] as { uid: string; type: string };\n            return {\n              ...annotation,\n              spec: {\n                ...annotation.spec,\n                datasource: {\n                  uid: ds.uid,\n                  type: ds.type,\n                },\n              },\n            };\n          }\n        }\n        return annotation;\n      }),\n      variables: dashboard.variables?.map((variable) => {\n        if (variable.kind === 'QueryVariable') {\n          if (variable.spec.query?.kind) {\n            const dsType = variable.spec.query.kind;\n            if (form[`datasource-${dsType}` as keyof typeof form]) {\n              const ds = form[`datasource-${dsType}` as keyof typeof form] as { uid: string; type: string };\n              return {\n                ...variable,\n                spec: {\n                  ...variable.spec,\n                  datasource: {\n                    ...variable.spec.datasource,\n                    uid: ds.uid,\n                    type: ds.type,\n                  },\n                  options: [],\n                  current: {\n                    text: '',\n                    value: '',\n                  },\n                  refresh: 'onDashboardLoad',\n                },\n              };\n            }\n          }\n        } else if (variable.kind === 'DatasourceVariable') {\n          return {\n            ...variable,\n            spec: {\n              ...variable.spec,\n              current: {\n                text: '',\n                value: '',\n              },\n            },\n          };\n        }\n        return variable;\n      }),\n      elements: Object.fromEntries(\n        Object.entries(dashboard.elements).map(([key, element]) => {\n          if (element.kind === 'Panel') {\n            const panel = { ...element.spec };\n            if (panel.data?.kind === 'QueryGroup') {\n              const newQueries = panel.data.spec.queries.map((query: any) => {\n                if (query.kind === 'PanelQuery') {\n                  const queryType = query.spec.query?.kind;\n                  // Match datasource by query kind\n                  if (queryType && form[`datasource-${queryType}` as keyof typeof form]) {\n                    const ds = form[`datasource-${queryType}` as keyof typeof form] as { uid: string; type: string };\n                    return {\n                      ...query,\n                      spec: {\n                        ...query.spec,\n                        datasource: {\n                          uid: ds.uid,\n                          type: ds.type,\n                        },\n                      },\n                    };\n                  }\n                }\n                return query;\n              });\n              panel.data = {\n                ...panel.data,\n                spec: {\n                  ...panel.data.spec,\n                  queries: newQueries,\n                },\n              };\n            }\n            return [\n              key,\n              {\n                kind: element.kind,\n                spec: panel,\n              },\n            ];\n          }\n          return [key, element];\n        })\n      ),\n    };\n\n    const result = await getDashboardAPI('v2').saveDashboard({\n      ...form,\n      dashboard: dashboardWithDataSources,\n    });\n\n    if (result.url) {\n      const dashboardUrl = locationUtil.stripBaseFromUrl(result.url);\n      locationService.push(dashboardUrl);\n    }\n  }\n\n  return (\n    <>\n      <Form<SaveDashboardCommand<DashboardV2Spec> & { [key: `datasource-${string}`]: string }>\n        onSubmit={onSubmit}\n        defaultValues={{ dashboard, k8s: { annotations: { 'grafana.app/folder': folder.uid } } }}\n        validateOnMount\n        validateOn=\"onChange\"\n      >\n        {({ register, errors, control, watch, getValues }) => (\n          <ImportDashboardFormV2\n            register={register}\n            inputs={inputs}\n            errors={errors}\n            control={control}\n            getValues={getValues}\n            uidReset={uidReset}\n            onCancel={onCancel}\n            onUidReset={onUidReset}\n            onSubmit={onSubmit}\n            watch={watch}\n          />\n        )}\n      </Form>\n    </>\n  );\n}\n","import { css } from '@emotion/css';\nimport { ReactElement } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { LibraryPanel } from '@grafana/schema';\nimport { Field, useStyles2 } from '@grafana/ui';\n\nimport { LibraryPanelCard } from '../../library-panels/components/LibraryPanelCard/LibraryPanelCard';\nimport { LibraryPanelInput, LibraryPanelInputState } from '../state/reducers';\n\ninterface ImportDashboardLibraryPanelsListProps {\n  inputs: LibraryPanelInput[];\n  label: string;\n  description: string;\n  folderName?: string;\n}\n\nexport function ImportDashboardLibraryPanelsList({\n  inputs,\n  label,\n  description,\n  folderName,\n}: ImportDashboardLibraryPanelsListProps): ReactElement | null {\n  const styles = useStyles2(getStyles);\n\n  if (!Boolean(inputs?.length)) {\n    return null;\n  }\n\n  return (\n    <div className={styles.spacer}>\n      <Field label={label} description={description}>\n        <>\n          {inputs.map((input, index) => {\n            const libraryPanelIndex = `elements[${index}]`;\n            const libraryPanel =\n              input.state === LibraryPanelInputState.New\n                ? { ...input.model, meta: { ...input.model.meta, folderName: folderName ?? 'Dashboards' } }\n                : { ...input.model };\n\n            return (\n              <div className={styles.item} key={libraryPanelIndex}>\n                <LibraryPanelCard libraryPanel={libraryPanel as LibraryPanel} onClick={() => undefined} />\n              </div>\n            );\n          })}\n        </>\n      </Field>\n    </div>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    spacer: css({\n      marginBottom: theme.spacing(2),\n    }),\n    item: css({\n      marginBottom: theme.spacing(1),\n    }),\n  };\n}\n","import { useEffect, useState } from 'react';\nimport { Controller, FieldErrors, UseFormReturn } from 'react-hook-form';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { ExpressionDatasourceRef } from '@grafana/runtime/internal';\nimport { Button, Field, FormFieldErrors, FormsOnSubmit, Stack, Input, Legend } from '@grafana/ui';\nimport { FolderPicker } from 'app/core/components/Select/FolderPicker';\nimport { Trans, t } from 'app/core/internationalization';\nimport { DataSourcePicker } from 'app/features/datasources/components/picker/DataSourcePicker';\n\nimport {\n  DashboardInput,\n  DashboardInputs,\n  DataSourceInput,\n  ImportDashboardDTO,\n  LibraryPanelInputState,\n} from '../state/reducers';\nimport { validateTitle, validateUid } from '../utils/validation';\n\nimport { ImportDashboardLibraryPanelsList } from './ImportDashboardLibraryPanelsList';\n\ninterface Props extends Pick<UseFormReturn<ImportDashboardDTO>, 'register' | 'control' | 'getValues' | 'watch'> {\n  uidReset: boolean;\n  inputs: DashboardInputs;\n  errors: FieldErrors<ImportDashboardDTO>;\n  onCancel: () => void;\n  onUidReset: () => void;\n  onSubmit: FormsOnSubmit<ImportDashboardDTO>;\n}\n\nexport const ImportDashboardForm = ({\n  register,\n  errors,\n  control,\n  getValues,\n  uidReset,\n  inputs,\n  onUidReset,\n  onCancel,\n  onSubmit,\n  watch,\n}: Props) => {\n  const [isSubmitted, setSubmitted] = useState(false);\n  const watchDataSources = watch('dataSources');\n  const watchFolder = watch('folder');\n\n  /*\n    This useEffect is needed for overwriting a dashboard. It\n    submits the form even if there's validation errors on title or uid.\n  */\n  useEffect(() => {\n    if (isSubmitted && (errors.title || errors.uid)) {\n      onSubmit(getValues());\n    }\n  }, [errors, getValues, isSubmitted, onSubmit]);\n  const newLibraryPanels = inputs?.libraryPanels?.filter((i) => i.state === LibraryPanelInputState.New) ?? [];\n  const existingLibraryPanels = inputs?.libraryPanels?.filter((i) => i.state === LibraryPanelInputState.Exists) ?? [];\n\n  return (\n    <>\n      <Legend>\n        <Trans i18nKey=\"manage-dashboards.import-dashboard-form.options\">Options</Trans>\n      </Legend>\n      <Field\n        label={t('manage-dashboards.import-dashboard-form.label-name', 'Name')}\n        invalid={!!errors.title}\n        error={errors.title && errors.title.message}\n      >\n        <Input\n          {...register('title', {\n            required: 'Name is required',\n            validate: async (v: string) => await validateTitle(v, getValues().folder.uid),\n          })}\n          type=\"text\"\n          data-testid={selectors.components.ImportDashboardForm.name}\n        />\n      </Field>\n      <Field label={t('manage-dashboards.import-dashboard-form.label-folder', 'Folder')}>\n        <Controller\n          render={({ field: { ref, value, onChange, ...field } }) => (\n            <FolderPicker {...field} onChange={(uid, title) => onChange({ uid, title })} value={value.uid} />\n          )}\n          name=\"folder\"\n          control={control}\n        />\n      </Field>\n      <Field\n        label={t('manage-dashboards.import-dashboard-form.label-unique-identifier-uid', 'Unique identifier (UID)')}\n        description=\"The unique identifier (UID) of a dashboard can be used for uniquely identify a dashboard between multiple Grafana installs.\n                The UID allows having consistent URLs for accessing dashboards so changing the title of a dashboard will not break any\n                bookmarked links to that dashboard.\"\n        invalid={!!errors.uid}\n        error={errors.uid && errors.uid.message}\n      >\n        <>\n          {!uidReset ? (\n            <Input\n              disabled\n              {...register('uid', { validate: async (v: string) => await validateUid(v) })}\n              addonAfter={\n                !uidReset && (\n                  <Button onClick={onUidReset}>\n                    <Trans i18nKey=\"manage-dashboards.import-dashboard-form.change-uid\">Change uid</Trans>\n                  </Button>\n                )\n              }\n            />\n          ) : (\n            <Input {...register('uid', { required: true, validate: async (v: string) => await validateUid(v) })} />\n          )}\n        </>\n      </Field>\n      {inputs.dataSources &&\n        inputs.dataSources.map((input: DataSourceInput, index: number) => {\n          if (input.pluginId === ExpressionDatasourceRef.type) {\n            return null;\n          }\n          const dataSourceOption = `dataSources.${index}` as const;\n          const current = watchDataSources ?? [];\n          return (\n            <Field\n              label={input.label}\n              description={input.description}\n              key={dataSourceOption}\n              invalid={errors.dataSources && !!errors.dataSources[index]}\n              error={errors.dataSources && errors.dataSources[index] && 'A data source is required'}\n            >\n              <Controller\n                name={dataSourceOption}\n                render={({ field: { ref, ...field } }) => (\n                  <DataSourcePicker\n                    {...field}\n                    noDefault={true}\n                    placeholder={input.info}\n                    pluginId={input.pluginId}\n                    current={current[index]?.uid}\n                  />\n                )}\n                control={control}\n                rules={{ required: true }}\n              />\n            </Field>\n          );\n        })}\n      {inputs.constants &&\n        inputs.constants.map((input: DashboardInput, index) => {\n          const constantIndex = `constants.${index}` as const;\n          return (\n            <Field\n              label={input.label}\n              error={errors.constants && errors.constants[index] && `${input.label} needs a value`}\n              invalid={errors.constants && !!errors.constants[index]}\n              key={constantIndex}\n            >\n              <Input {...register(constantIndex, { required: true })} defaultValue={input.value} />\n            </Field>\n          );\n        })}\n      <ImportDashboardLibraryPanelsList\n        inputs={newLibraryPanels}\n        label={t('manage-dashboards.import-dashboard-form.label-new-library-panels', 'New library panels')}\n        description={t(\n          'manage-dashboards.import-dashboard-form.description-library-panels-imported',\n          'List of new library panels that will get imported.'\n        )}\n        folderName={watchFolder.title}\n      />\n      <ImportDashboardLibraryPanelsList\n        inputs={existingLibraryPanels}\n        label={t('manage-dashboards.import-dashboard-form.label-existing-library-panels', 'Existing library panels')}\n        description=\"List of existing library panels. These panels are not affected by the import.\"\n        folderName={watchFolder.title}\n      />\n      <Stack>\n        <Button\n          type=\"submit\"\n          data-testid={selectors.components.ImportDashboardForm.submit}\n          variant={getButtonVariant(errors)}\n          onClick={() => {\n            setSubmitted(true);\n          }}\n        >\n          {getButtonText(errors)}\n        </Button>\n        <Button type=\"reset\" variant=\"secondary\" onClick={onCancel}>\n          <Trans i18nKey=\"manage-dashboards.import-dashboard-form.cancel\">Cancel</Trans>\n        </Button>\n      </Stack>\n    </>\n  );\n};\n\nfunction getButtonVariant(errors: FormFieldErrors<ImportDashboardDTO>) {\n  return errors && (errors.title || errors.uid) ? 'destructive' : 'primary';\n}\n\nfunction getButtonText(errors: FormFieldErrors<ImportDashboardDTO>) {\n  return errors && (errors.title || errors.uid) ? 'Import (Overwrite)' : 'Import';\n}\n","import { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { dateTimeFormat } from '@grafana/data';\nimport { locationService, reportInteraction } from '@grafana/runtime';\nimport { Box, Legend } from '@grafana/ui';\nimport { Form } from 'app/core/components/Form/Form';\nimport { Trans } from 'app/core/internationalization';\nimport { StoreState } from 'app/types';\n\nimport { clearLoadedDashboard, importDashboard } from '../state/actions';\nimport { DashboardSource, ImportDashboardDTO } from '../state/reducers';\n\nimport { ImportDashboardForm } from './ImportDashboardForm';\n\nconst IMPORT_FINISHED_EVENT_NAME = 'dashboard_import_imported';\n\nconst mapStateToProps = (state: StoreState) => {\n  const searchObj = locationService.getSearchObject();\n\n  return {\n    dashboard: state.importDashboard.dashboard,\n    meta: state.importDashboard.meta,\n    source: state.importDashboard.source,\n    inputs: state.importDashboard.inputs,\n    folder: searchObj.folderUid ? { uid: String(searchObj.folderUid) } : { uid: '' },\n  };\n};\n\nconst mapDispatchToProps = {\n  clearLoadedDashboard,\n  importDashboard,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype Props = ConnectedProps<typeof connector>;\n\ninterface State {\n  uidReset: boolean;\n}\n\nclass ImportDashboardOverviewUnConnected extends PureComponent<Props, State> {\n  state: State = {\n    uidReset: false,\n  };\n\n  onSubmit = (form: ImportDashboardDTO) => {\n    reportInteraction(IMPORT_FINISHED_EVENT_NAME);\n\n    this.props.importDashboard(form);\n  };\n\n  onCancel = () => {\n    this.props.clearLoadedDashboard();\n  };\n\n  onUidReset = () => {\n    this.setState({ uidReset: true });\n  };\n\n  render() {\n    const { dashboard, inputs, meta, source, folder } = this.props;\n    const { uidReset } = this.state;\n\n    return (\n      <>\n        {source === DashboardSource.Gcom && (\n          <Box marginBottom={3}>\n            <div>\n              <Legend>\n                Importing dashboard from{' '}\n                <a\n                  href={`https://grafana.com/dashboards/${dashboard.gnetId}`}\n                  className=\"external-link\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  Grafana.com\n                </a>\n              </Legend>\n            </div>\n            <table className=\"filter-table form-inline\">\n              <tbody>\n                <tr>\n                  <td>\n                    <Trans i18nKey=\"manage-dashboards.import-dashboard-overview-un-connected.published-by\">\n                      Published by\n                    </Trans>\n                  </td>\n                  <td>{meta.orgName}</td>\n                </tr>\n                <tr>\n                  <td>\n                    <Trans i18nKey=\"manage-dashboards.import-dashboard-overview-un-connected.updated-on\">\n                      Updated on\n                    </Trans>\n                  </td>\n                  <td>{dateTimeFormat(meta.updatedAt)}</td>\n                </tr>\n              </tbody>\n            </table>\n          </Box>\n        )}\n        <Form\n          onSubmit={this.onSubmit}\n          defaultValues={{ ...dashboard, constants: [], dataSources: [], elements: [], folder: folder }}\n          validateOnMount\n          validateFieldsOnMount={['title', 'uid']}\n          validateOn=\"onChange\"\n        >\n          {({ register, errors, control, watch, getValues }) => (\n            <ImportDashboardForm\n              register={register}\n              errors={errors}\n              control={control}\n              getValues={getValues}\n              uidReset={uidReset}\n              inputs={inputs}\n              onCancel={this.onCancel}\n              onUidReset={this.onUidReset}\n              onSubmit={this.onSubmit}\n              watch={watch}\n            />\n          )}\n        </Form>\n      </>\n    );\n  }\n}\n\nexport const ImportDashboardOverview = connector(ImportDashboardOverviewUnConnected);\nImportDashboardOverview.displayName = 'ImportDashboardOverview';\n","import { css } from '@emotion/css';\nimport { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { AppEvents, GrafanaTheme2, LoadingState, NavModelItem } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config, reportInteraction } from '@grafana/runtime';\nimport {\n  Button,\n  Field,\n  Input,\n  Spinner,\n  stylesFactory,\n  TextArea,\n  Themeable2,\n  FileDropzone,\n  withTheme2,\n  DropzoneFile,\n  FileDropzoneDefaultChildren,\n  LinkButton,\n  TextLink,\n  Label,\n  Stack,\n} from '@grafana/ui';\nimport appEvents from 'app/core/app_events';\nimport { Form } from 'app/core/components/Form/Form';\nimport { Page } from 'app/core/components/Page/Page';\nimport { t, Trans } from 'app/core/internationalization';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { dispatch } from 'app/store/store';\nimport { StoreState } from 'app/types';\n\nimport { cleanUpAction } from '../../core/actions/cleanUp';\nimport { ImportDashboardOverviewV2 } from '../dashboard-scene/v2schema/ImportDashboardOverviewV2';\n\nimport { ImportDashboardOverview } from './components/ImportDashboardOverview';\nimport { fetchGcomDashboard, importDashboardJson, importDashboardV2Json } from './state/actions';\nimport { initialImportDashboardState } from './state/reducers';\nimport { validateDashboardJson, validateGcomDashboard } from './utils/validation';\n\ntype DashboardImportPageRouteSearchParams = {\n  gcomDashboardId?: string;\n};\n\ntype OwnProps = Themeable2 & GrafanaRouteComponentProps<{}, DashboardImportPageRouteSearchParams>;\n\nconst IMPORT_STARTED_EVENT_NAME = 'dashboard_import_loaded';\nconst JSON_PLACEHOLDER = `{\n    \"title\": \"Example - Repeating Dictionary variables\",\n    \"uid\": \"_0HnEoN4z\",\n    \"panels\": [...]\n    ...\n}\n`;\n\nconst mapStateToProps = (state: StoreState) => ({\n  loadingState: state.importDashboard.state,\n  dashboard: state.importDashboard.dashboard,\n});\n\nconst mapDispatchToProps = {\n  fetchGcomDashboard,\n  importDashboardJson,\n  cleanUpAction,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype Props = OwnProps & ConnectedProps<typeof connector>;\n\nclass UnthemedDashboardImport extends PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n    const { gcomDashboardId } = this.props.queryParams;\n    if (gcomDashboardId) {\n      this.getGcomDashboard({ gcomDashboard: gcomDashboardId });\n      return;\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.cleanUpAction({ cleanupAction: (state) => (state.importDashboard = initialImportDashboardState) });\n  }\n\n  // Do not display upload file list\n  fileListRenderer = (file: DropzoneFile, removeFile: (file: DropzoneFile) => void) => null;\n\n  onFileUpload = (result: string | ArrayBuffer | null) => {\n    reportInteraction(IMPORT_STARTED_EVENT_NAME, {\n      import_source: 'json_uploaded',\n    });\n\n    try {\n      const json = JSON.parse(String(result));\n\n      if (json.elements) {\n        dispatch(importDashboardV2Json(json));\n        return;\n      }\n      this.props.importDashboardJson(json);\n    } catch (error) {\n      if (error instanceof Error) {\n        appEvents.emit(AppEvents.alertError, ['Import failed', 'JSON -> JS Serialization failed: ' + error.message]);\n      }\n      return;\n    }\n  };\n\n  getDashboardFromJson = (formData: { dashboardJson: string }) => {\n    reportInteraction(IMPORT_STARTED_EVENT_NAME, {\n      import_source: 'json_pasted',\n    });\n\n    const dashboard = JSON.parse(formData.dashboardJson);\n\n    if (dashboard.elements) {\n      dispatch(importDashboardV2Json(dashboard));\n      return;\n    }\n\n    this.props.importDashboardJson(dashboard);\n  };\n\n  getGcomDashboard = (formData: { gcomDashboard: string }) => {\n    reportInteraction(IMPORT_STARTED_EVENT_NAME, {\n      import_source: 'gcom',\n    });\n\n    let dashboardId;\n    const match = /(^\\d+$)|dashboards\\/(\\d+)/.exec(formData.gcomDashboard);\n    if (match && match[1]) {\n      dashboardId = match[1];\n    } else if (match && match[2]) {\n      dashboardId = match[2];\n    }\n\n    if (dashboardId) {\n      this.props.fetchGcomDashboard(dashboardId);\n    }\n  };\n\n  renderImportForm() {\n    const styles = importStyles(this.props.theme);\n\n    const GcomDashboardsLink = () => (\n      // eslint-disable-next-line @grafana/no-untranslated-strings\n      <TextLink variant=\"bodySmall\" href=\"https://grafana.com/grafana/dashboards/\" external>\n        grafana.com/dashboards\n      </TextLink>\n    );\n\n    return (\n      <>\n        <div className={styles.option}>\n          <FileDropzone\n            options={{ multiple: false, accept: ['.json', '.txt'] }}\n            readAs=\"readAsText\"\n            fileListRenderer={this.fileListRenderer}\n            onLoad={this.onFileUpload}\n          >\n            <FileDropzoneDefaultChildren\n              primaryText={t('dashboard-import.file-dropzone.primary-text', 'Upload dashboard JSON file')}\n              secondaryText={t(\n                'dashboard-import.file-dropzone.secondary-text',\n                'Drag and drop here or click to browse'\n              )}\n            />\n          </FileDropzone>\n        </div>\n        <div className={styles.option}>\n          <Form onSubmit={this.getGcomDashboard} defaultValues={{ gcomDashboard: '' }}>\n            {({ register, errors }) => (\n              <Field\n                label={\n                  <Label className={styles.labelWithLink} htmlFor=\"url-input\">\n                    <span>\n                      <Trans i18nKey=\"dashboard-import.gcom-field.label\">\n                        Find and import dashboards for common applications at <GcomDashboardsLink />\n                      </Trans>\n                    </span>\n                  </Label>\n                }\n                invalid={!!errors.gcomDashboard}\n                error={errors.gcomDashboard && errors.gcomDashboard.message}\n              >\n                <Input\n                  id=\"url-input\"\n                  placeholder={t('dashboard-import.gcom-field.placeholder', 'Grafana.com dashboard URL or ID')}\n                  type=\"text\"\n                  {...register('gcomDashboard', {\n                    required: t(\n                      'dashboard-import.gcom-field.validation-required',\n                      'A Grafana dashboard URL or ID is required'\n                    ),\n                    validate: validateGcomDashboard,\n                  })}\n                  addonAfter={\n                    <Button type=\"submit\">\n                      <Trans i18nKey=\"dashboard-import.gcom-field.load-button\">Load</Trans>\n                    </Button>\n                  }\n                />\n              </Field>\n            )}\n          </Form>\n        </div>\n        <div className={styles.option}>\n          <Form onSubmit={this.getDashboardFromJson} defaultValues={{ dashboardJson: '' }}>\n            {({ register, errors }) => (\n              <>\n                <Field\n                  label={t('dashboard-import.json-field.label', 'Import via dashboard JSON model')}\n                  invalid={!!errors.dashboardJson}\n                  error={errors.dashboardJson && errors.dashboardJson.message}\n                >\n                  <TextArea\n                    {...register('dashboardJson', {\n                      required: t('dashboard-import.json-field.validation-required', 'Need a dashboard JSON model'),\n                      validate: validateDashboardJson,\n                    })}\n                    data-testid={selectors.components.DashboardImportPage.textarea}\n                    id=\"dashboard-json-textarea\"\n                    rows={10}\n                    placeholder={JSON_PLACEHOLDER}\n                  />\n                </Field>\n                <Stack>\n                  <Button type=\"submit\" data-testid={selectors.components.DashboardImportPage.submit}>\n                    <Trans i18nKey=\"dashboard-import.form-actions.load\">Load</Trans>\n                  </Button>\n                  <LinkButton variant=\"secondary\" href={`${config.appSubUrl}/dashboards`}>\n                    <Trans i18nKey=\"dashboard-import.form-actions.cancel\">Cancel</Trans>\n                  </LinkButton>\n                </Stack>\n              </>\n            )}\n          </Form>\n        </div>\n      </>\n    );\n  }\n\n  pageNav: NavModelItem = {\n    text: 'Import dashboard',\n    subTitle: 'Import dashboard from file or Grafana.com',\n  };\n\n  getDashboardOverview() {\n    const { loadingState, dashboard } = this.props;\n\n    if (loadingState === LoadingState.Done) {\n      if (dashboard.elements) {\n        return <ImportDashboardOverviewV2 />;\n      }\n      return <ImportDashboardOverview />;\n    }\n\n    return null;\n  }\n\n  render() {\n    const { loadingState } = this.props;\n\n    return (\n      <Page navId=\"dashboards/browse\" pageNav={this.pageNav}>\n        <Page.Contents>\n          {loadingState === LoadingState.Loading && (\n            <Stack direction={'column'} justifyContent=\"center\">\n              <Stack justifyContent=\"center\">\n                <Spinner size=\"xxl\" />\n              </Stack>\n            </Stack>\n          )}\n          {[LoadingState.Error, LoadingState.NotStarted].includes(loadingState) && this.renderImportForm()}\n          {this.getDashboardOverview()}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nconst DashboardImportUnConnected = withTheme2(UnthemedDashboardImport);\nconst DashboardImport = connector(DashboardImportUnConnected);\nDashboardImport.displayName = 'DashboardImport';\nexport default DashboardImport;\n\nconst importStyles = stylesFactory((theme: GrafanaTheme2) => {\n  return {\n    option: css({\n      marginBottom: theme.spacing(4),\n      maxWidth: '600px',\n    }),\n    labelWithLink: css({\n      maxWidth: '100%',\n    }),\n    linkWithinLabel: css({\n      fontSize: 'inherit',\n    }),\n  };\n});\n"],"names":["Form","defaultValues","onSubmit","validateOnMount","validateFieldsOnMount","children","validateOn","maxWidth","htmlProps","handleSubmit","trigger","formState","rest","validateDashboardJson","json","dashboard","tag","validateGcomDashboard","gcomDashboard","match","validateTitle","newTitle","folderUid","error","validateUid","value","existingDashboard","isV2","folderTitle","ImportDashboardFormV2","register","errors","control","inputs","getValues","uidReset","onUidReset","onCancel","watch","isSubmitted","setSubmitted","selectedDataSources","setSelectedDataSources","formValues","Field","Input","v","selectors","ref","onChange","field","FolderPicker","uid","title","input","dataSourceOption","DataSourcePicker","ds","prev","Stack","Button","getButtonVariant","getButtonText","IMPORT_FINISHED_EVENT_NAME","ImportDashboardOverviewV2","setUidReset","dispatch","searchObj","state","folder","form","dashboardWithDataSources","annotation","dsType","variable","key","element","panel","newQueries","query","queryType","result","dashboardUrl","ImportDashboardLibraryPanelsList","label","description","folderName","styles","getStyles","index","libraryPanelIndex","libraryPanel","LibraryPanelCard","theme","ImportDashboardForm","watchDataSources","watchFolder","newLibraryPanels","i","existingLibraryPanels","Legend","current","constantIndex","mapStateToProps","mapDispatchToProps","connector","ImportDashboardOverviewUnConnected","meta","source","Box","ImportDashboardOverview","IMPORT_STARTED_EVENT_NAME","JSON_PLACEHOLDER","UnthemedDashboardImport","props","file","removeFile","formData","dashboardId","gcomDashboardId","importStyles","GcomDashboardsLink","TextLink","FileDropzone","Label","TextArea","config","loadingState","Page","Spinner","DashboardImportUnConnected","DashboardImport","stylesFactory"],"sourceRoot":""}