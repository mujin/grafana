{"version":3,"file":"DashboardScenePage.a0b54f5c4e6403efb61d.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/FormPrompt/Prompt.tsx","webpack://grafana/./public/app/features/dashboard-scene/saving/DashboardPrompt.tsx","webpack://grafana/./public/app/features/dashboard-scene/saving/provisioned/DashboardPreviewBanner.tsx","webpack://grafana/./public/app/features/dashboard-scene/pages/DashboardScenePage.tsx","webpack://grafana/./public/app/features/dashboard/containers/DashboardPageError.tsx","webpack://grafana/./public/app/features/provisioning/hooks/usePullRequestParam.ts"],"sourcesContent":["import * as H from 'history';\nimport { useEffect } from 'react';\n\nimport { locationService } from '@grafana/runtime';\n\ninterface PromptProps {\n  when?: boolean;\n  message: string | ((location: H.Location) => string | boolean);\n}\n\nexport const Prompt = ({ message, when = true }: PromptProps) => {\n  const history = locationService.getHistory();\n\n  useEffect(() => {\n    if (!when) {\n      return undefined;\n    }\n    //@ts-expect-error TODO Update the history package to fix types\n    const unblock = history.block(message);\n\n    return () => {\n      unblock();\n    };\n  }, [when, message, history]);\n\n  return null;\n};\n","import { css } from '@emotion/css';\nimport * as H from 'history';\nimport { memo, useContext, useEffect, useMemo } from 'react';\n\nimport { locationService } from '@grafana/runtime';\nimport { ModalsContext, Modal, Button, useStyles2 } from '@grafana/ui';\nimport { Prompt } from 'app/core/components/FormPrompt/Prompt';\nimport { t, Trans } from 'app/core/internationalization';\nimport { contextSrv } from 'app/core/services/context_srv';\n\nimport { SaveLibraryVizPanelModal } from '../panel-edit/SaveLibraryVizPanelModal';\nimport { DashboardScene } from '../scene/DashboardScene';\nimport { getLibraryPanelBehavior, isLibraryPanel } from '../utils/utils';\n\ninterface DashboardPromptProps {\n  dashboard: DashboardScene;\n}\n\nexport const DashboardPrompt = memo(({ dashboard }: DashboardPromptProps) => {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const originalPath = useMemo(() => locationService.getLocation().pathname, [dashboard]);\n  const { showModal, hideModal } = useContext(ModalsContext);\n\n  useEffect(() => {\n    const handleUnload = (event: BeforeUnloadEvent) => {\n      if (ignoreChanges(dashboard)) {\n        return;\n      }\n\n      if (dashboard.state.isDirty) {\n        event.preventDefault();\n        // No browser actually displays this message anymore.\n        // But Chrome requires it to be defined else the popup won't show.\n        event.returnValue = '';\n      }\n    };\n\n    window.addEventListener('beforeunload', handleUnload);\n    return () => window.removeEventListener('beforeunload', handleUnload);\n  }, [dashboard]);\n\n  const onHistoryBlock = (location: H.Location) => {\n    const panelEditor = dashboard.state.editPanel;\n    const vizPanel = panelEditor?.getPanel();\n    const search = new URLSearchParams(location.search);\n\n    // Are we leaving panel edit & library panel?\n    if (panelEditor && vizPanel && isLibraryPanel(vizPanel) && panelEditor.state.isDirty && !search.has('editPanel')) {\n      const libPanelBehavior = getLibraryPanelBehavior(vizPanel);\n\n      showModal(SaveLibraryVizPanelModal, {\n        dashboard,\n        isUnsavedPrompt: true,\n        libraryPanel: libPanelBehavior!,\n        onConfirm: () => {\n          panelEditor.onConfirmSaveLibraryPanel();\n          hideModal();\n          moveToBlockedLocationAfterReactStateUpdate(location);\n        },\n        onDiscard: () => {\n          panelEditor.onDiscard();\n          hideModal();\n          moveToBlockedLocationAfterReactStateUpdate(location);\n        },\n        onDismiss: hideModal,\n      });\n      return false;\n    }\n\n    // Are we still on the same dashboard?\n    if (originalPath === location.pathname) {\n      return true;\n    }\n\n    if (ignoreChanges(dashboard)) {\n      return true;\n    }\n\n    if (!dashboard.state.isDirty) {\n      return true;\n    }\n\n    showModal(UnsavedChangesModal, {\n      dashboard,\n      onSaveDashboardClick: () => {\n        hideModal();\n        dashboard.openSaveDrawer({\n          onSaveSuccess: () => {\n            moveToBlockedLocationAfterReactStateUpdate(location);\n          },\n        });\n      },\n\n      onDiscard: () => {\n        dashboard.exitEditMode({ skipConfirm: true });\n        hideModal();\n        moveToBlockedLocationAfterReactStateUpdate(location);\n      },\n      onDismiss: hideModal,\n    });\n\n    return false;\n  };\n\n  return <Prompt when={true} message={onHistoryBlock} />;\n});\n\nDashboardPrompt.displayName = 'DashboardPrompt';\n\nfunction moveToBlockedLocationAfterReactStateUpdate(location?: H.Location | null) {\n  if (location) {\n    setTimeout(() => locationService.push(location), 10);\n  }\n}\n\ninterface UnsavedChangesModalProps {\n  onDiscard: () => void;\n  onDismiss: () => void;\n  onSaveDashboardClick?: () => void;\n}\n\nexport const UnsavedChangesModal = ({ onDiscard, onDismiss, onSaveDashboardClick }: UnsavedChangesModalProps) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Modal\n      isOpen={true}\n      title={t('dashboard-scene.unsaved-changes-modal.title-unsaved-changes', 'Unsaved changes')}\n      onDismiss={onDismiss}\n      icon=\"exclamation-triangle\"\n      className={styles.modal}\n    >\n      <h5>\n        <Trans i18nKey=\"dashboard-scene.unsaved-changes-modal.changes\">Do you want to save your changes?</Trans>\n      </h5>\n      <Modal.ButtonRow>\n        <Button variant=\"secondary\" onClick={onDismiss} fill=\"outline\">\n          <Trans i18nKey=\"dashboard-scene.unsaved-changes-modal.cancel\">Cancel</Trans>\n        </Button>\n        <Button variant=\"destructive\" onClick={onDiscard}>\n          <Trans i18nKey=\"dashboard-scene.unsaved-changes-modal.discard\">Discard</Trans>\n        </Button>\n        <Button onClick={onSaveDashboardClick}>\n          <Trans i18nKey=\"dashboard-scene.unsaved-changes-modal.save-dashboard\">Save dashboard</Trans>\n        </Button>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n\nconst getStyles = () => ({\n  modal: css({\n    width: '500px',\n  }),\n});\n\n/**\n * For some dashboards and users changes should be ignored *\n */\nexport function ignoreChanges(scene: DashboardScene | null) {\n  const original = scene?.getInitialSaveModel();\n\n  if (!original) {\n    return true;\n  }\n\n  // Ignore changes if original is unsaved\n  if (scene?.state.meta.version === 0) {\n    return true;\n  }\n\n  // Ignore changes if the user has been signed out\n  if (!contextSrv.isSignedIn) {\n    return true;\n  }\n\n  if (!scene) {\n    return true;\n  }\n\n  const { canSave, fromScript, fromFile } = scene.state.meta;\n  if (!contextSrv.isEditor && !canSave) {\n    return true;\n  }\n\n  return !canSave || fromScript || fromFile;\n}\n","import { textUtil } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Alert, Icon, Stack } from '@grafana/ui';\nimport { useGetRepositoryFilesWithPathQuery } from 'app/api/clients/provisioning';\nimport { t, Trans } from 'app/core/internationalization';\nimport { DashboardPageRouteSearchParams } from 'app/features/dashboard/containers/types';\nimport { usePullRequestParam } from 'app/features/provisioning/hooks/usePullRequestParam';\nimport { DashboardRoutes } from 'app/types';\n\ninterface CommonBannerProps {\n  queryParams: DashboardPageRouteSearchParams;\n  path?: string;\n  slug?: string;\n}\n\ninterface DashboardPreviewBannerProps extends CommonBannerProps {\n  route?: string;\n}\n\ninterface DashboardPreviewBannerContentProps extends Required<Omit<CommonBannerProps, 'route'>> {}\n\nconst commonAlertProps = {\n  severity: 'info' as const,\n  style: { flex: 0 } as const,\n};\n\nfunction DashboardPreviewBannerContent({ queryParams, slug, path }: DashboardPreviewBannerContentProps) {\n  const prParam = usePullRequestParam();\n  const file = useGetRepositoryFilesWithPathQuery({ name: slug, path, ref: queryParams.ref });\n\n  if (file.data?.errors) {\n    return (\n      <Alert\n        title={t('dashboard-scene.dashboard-preview-banner.title-error-loading-dashboard', 'Error loading dashboard')}\n        severity=\"error\"\n        style={{ flex: 0 }}\n      >\n        {file.data.errors.map((error, index) => (\n          <div key={index}>{error}</div>\n        ))}\n      </Alert>\n    );\n  }\n\n  // This page was loaded with a `pull_request_url` in the URL\n  if (prParam?.length) {\n    return (\n      <Alert\n        {...commonAlertProps}\n        title={t(\n          'dashboard-scene.dashboard-preview-banner.title-dashboard-loaded-request-git-hub',\n          'This dashboard is loaded from a pull request in GitHub.'\n        )}\n        buttonContent={\n          <Stack alignItems=\"center\">\n            <Trans i18nKey=\"dashboard-scene.dashboard-preview-banner.view-pull-request-in-git-hub\">\n              View pull request in GitHub\n            </Trans>\n            <Icon name=\"external-link-alt\" />\n          </Stack>\n        }\n        onRemove={() => window.open(textUtil.sanitizeUrl(prParam), '_blank')}\n      >\n        <Trans i18nKey=\"dashboard-scene.dashboard-preview-banner.value-not-saved\">\n          The value is not yet saved in the Grafana database\n        </Trans>\n      </Alert>\n    );\n  }\n\n  // Check if this is a GitHub link\n  const githubURL = file.data?.urls?.newPullRequestURL ?? file.data?.urls?.compareURL;\n  if (githubURL) {\n    return (\n      <Alert\n        {...commonAlertProps}\n        title={t(\n          'dashboard-scene.dashboard-preview-banner.title-dashboard-loaded-branch-git-hub',\n          'This dashboard is loaded from a branch in GitHub.'\n        )}\n        buttonContent={\n          <Stack alignItems=\"center\">\n            <Trans i18nKey=\"dashboard-scene.dashboard-preview-banner.open-pull-request-in-git-hub\">\n              Open pull request in GitHub\n            </Trans>\n            <Icon name=\"external-link-alt\" />\n          </Stack>\n        }\n        onRemove={() => window.open(textUtil.sanitizeUrl(githubURL), '_blank')}\n      >\n        <Trans i18nKey=\"dashboard-scene.dashboard-preview-banner.not-saved\">\n          The value is not yet saved in the Grafana database\n        </Trans>\n      </Alert>\n    );\n  }\n\n  return (\n    <Alert\n      {...commonAlertProps}\n      title={t(\n        'dashboard-scene.dashboard-preview-banner.title-dashboard-loaded-external-repository',\n        'This dashboard is loaded from an external repository'\n      )}\n    >\n      <Trans i18nKey=\"dashboard-scene.dashboard-preview-banner.not-yet-saved\">\n        The value is not saved in the Grafana database\n      </Trans>\n    </Alert>\n  );\n}\n\nexport function DashboardPreviewBanner({ queryParams, route, slug, path }: DashboardPreviewBannerProps) {\n  const provisioningEnabled = config.featureToggles.provisioning;\n  if (!provisioningEnabled || 'kiosk' in queryParams || !path || route !== DashboardRoutes.Provisioning || !slug) {\n    return null;\n  }\n\n  return <DashboardPreviewBannerContent queryParams={queryParams} slug={slug} path={path} />;\n}\n","import { useEffect, useRef } from 'react';\nimport { Params, useParams } from 'react-router-dom-v5-compat';\nimport { usePrevious } from 'react-use';\n\nimport { PageLayoutType } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { UrlSyncContextProvider } from '@grafana/scenes';\nimport { Box } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { DashboardPageError } from 'app/features/dashboard/containers/DashboardPageError';\nimport { DashboardPageRouteParams, DashboardPageRouteSearchParams } from 'app/features/dashboard/containers/types';\nimport { DashboardRoutes } from 'app/types';\n\nimport { DashboardPrompt } from '../saving/DashboardPrompt';\nimport { DashboardPreviewBanner } from '../saving/provisioned/DashboardPreviewBanner';\n\nimport { getDashboardScenePageStateManager } from './DashboardScenePageStateManager';\n\nexport interface Props\n  extends Omit<GrafanaRouteComponentProps<DashboardPageRouteParams, DashboardPageRouteSearchParams>, 'match'> {}\n\nexport function DashboardScenePage({ route, queryParams, location }: Props) {\n  const params = useParams();\n  const { type, slug, uid } = params;\n  // User by /admin/provisioning/:slug/dashboard/preview/* to load dashboards based on their file path in a remote repository\n  const path = params['*'];\n  const prevMatch = usePrevious({ params });\n  const stateManager = getDashboardScenePageStateManager();\n  const { dashboard, isLoading, loadError } = stateManager.useState();\n  // After scene migration is complete and we get rid of old dashboard we should refactor dashboardWatcher so this route reload is not need\n  const routeReloadCounter = (location.state as any)?.routeReloadCounter;\n  const prevParams = useRef<Params<string>>(params);\n\n  useEffect(() => {\n    if (route.routeName === DashboardRoutes.Normal && type === 'snapshot') {\n      stateManager.loadSnapshot(slug!);\n    } else {\n      stateManager.loadDashboard({\n        uid: (route.routeName === DashboardRoutes.Provisioning ? path : uid) ?? '',\n        type,\n        slug,\n        route: route.routeName as DashboardRoutes,\n        urlFolderUid: queryParams.folderUid,\n      });\n    }\n\n    return () => {\n      stateManager.clearState();\n    };\n\n    // removing slug and path (which has slug in it) from dependencies to prevent unmount when data links reference\n    //  the same dashboard with no slug in url\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [stateManager, uid, route.routeName, queryParams.folderUid, routeReloadCounter, type]);\n\n  useEffect(() => {\n    // This use effect corrects URL without refresh when navigating to the same dashboard\n    //  using data link that has no slug in url\n    if (route.routeName === DashboardRoutes.Normal) {\n      // correct URL only when there are no new slug\n      // if slug is defined and incorrect it will be corrected in stateManager\n      if (uid === prevParams.current.uid && prevParams.current.slug && !slug) {\n        const correctedUrl = `/d/${uid}/${prevParams.current.slug}`;\n        locationService.replace({\n          ...locationService.getLocation(),\n          pathname: correctedUrl,\n        });\n      }\n    }\n\n    return () => {\n      prevParams.current = { uid, slug: !slug ? prevParams.current.slug : slug };\n    };\n  }, [route, slug, type, uid]);\n\n  if (!dashboard) {\n    let errorElement;\n    if (loadError) {\n      errorElement = <DashboardPageError error={loadError} type={type} />;\n    }\n\n    return (\n      errorElement || (\n        <Page navId=\"dashboards/browse\" layout={PageLayoutType.Canvas} data-testid={'dashboard-scene-page'}>\n          <Box paddingY={4} display=\"flex\" direction=\"column\" alignItems=\"center\">\n            {isLoading && <PageLoader />}\n          </Box>\n        </Page>\n      )\n    );\n  }\n\n  // Do not render anything when transitioning from one dashboard to another\n  // A bit tricky for transition to or from Home dashboard that does not have a uid in the url (but could have it in the dashboard model)\n  // if prevMatch is undefined we are going from normal route to home route or vice versa\n  if (type !== 'snapshot' && (!prevMatch || uid !== prevMatch?.params.uid)) {\n    console.log('skipping rendering');\n    return null;\n  }\n\n  return (\n    <UrlSyncContextProvider scene={dashboard} updateUrlOnInit={true} createBrowserHistorySteps={true}>\n      <DashboardPreviewBanner queryParams={queryParams} route={route.routeName} slug={slug} path={path} />\n      <dashboard.Component model={dashboard} key={dashboard.state.key} />\n      <DashboardPrompt dashboard={dashboard} />\n    </UrlSyncContextProvider>\n  );\n}\n\nexport default DashboardScenePage;\n","import { PageLayoutType } from '@grafana/data';\nimport { Alert, Box } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { EntityNotFound } from 'app/core/components/PageNotFound/EntityNotFound';\nimport { t } from 'app/core/internationalization';\nimport { getMessageFromError, getStatusFromError } from 'app/core/utils/errors';\n\nexport function DashboardPageError({ error, type }: { error: unknown; type?: string }) {\n  const status = getStatusFromError(error);\n  const message = getMessageFromError(error);\n  const entity = type === 'snapshot' ? 'Snapshot' : 'Dashboard';\n\n  return (\n    <Page navId=\"dashboards/browse\" layout={PageLayoutType.Canvas} pageNav={{ text: 'Not found' }}>\n      <Box paddingY={4} display=\"flex\" direction=\"column\" alignItems=\"center\">\n        {status === 404 ? (\n          <EntityNotFound entity={entity} />\n        ) : (\n          <Alert\n            title={t('dashboard.errors.failed-to-load', 'Failed to load dashboard')}\n            severity=\"error\"\n            data-testid=\"dashboard-page-error\"\n          >\n            {message}\n          </Alert>\n        )}\n      </Box>\n    </Page>\n  );\n}\n","import { textUtil } from '@grafana/data';\nimport { useUrlParams } from 'app/core/navigation/hooks';\n\nexport const usePullRequestParam = () => {\n  const [params] = useUrlParams();\n  const prParam = params.get('pull_request_url');\n\n  if (!prParam) {\n    return undefined;\n  }\n\n  return textUtil.sanitizeUrl(decodeURIComponent(prParam));\n};\n"],"names":["Prompt","message","when","history","unblock","DashboardPrompt","dashboard","originalPath","showModal","hideModal","ModalsContext","handleUnload","event","ignoreChanges","onHistoryBlock","location","panelEditor","vizPanel","search","libPanelBehavior","SaveLibraryVizPanelModal","moveToBlockedLocationAfterReactStateUpdate","UnsavedChangesModal","onDiscard","onDismiss","onSaveDashboardClick","styles","getStyles","Modal","Button","scene","canSave","fromScript","fromFile","commonAlertProps","DashboardPreviewBannerContent","queryParams","slug","path","prParam","usePullRequestParam","file","Alert","error","index","Stack","Icon","githubURL","DashboardPreviewBanner","route","config","DashboardScenePage","params","type","uid","prevMatch","usePrevious","stateManager","isLoading","loadError","routeReloadCounter","prevParams","correctedUrl","errorElement","DashboardPageError","Page","Box","PageLoader","status","entity"],"sourceRoot":""}