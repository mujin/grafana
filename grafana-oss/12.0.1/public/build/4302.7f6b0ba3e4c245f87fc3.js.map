{"version":3,"file":"4302.7f6b0ba3e4c245f87fc3.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/GraphNG/GraphNG.tsx","webpack://grafana/./packages/grafana-data/src/transformations/transformers/nulls/nullToUndefThreshold.ts","webpack://grafana/./public/app/core/components/GraphNG/utils.ts","webpack://grafana/./public/app/core/components/TimelineChart/TimelineChart.tsx","webpack://grafana/./public/app/features/alerting/unified/api/stateHistoryApi.ts","webpack://grafana/./public/app/features/alerting/unified/components/rules/state-history/LogTimelineViewer.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/state-history/LogRecordViewer.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/state-history/LokiStateHistory.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/state-history/common.ts","webpack://grafana/./public/app/features/alerting/unified/components/rules/state-history/useRuleHistoryRecords.tsx"],"sourcesContent":["import { Component } from 'react';\nimport * as React from 'react';\nimport uPlot, { AlignedData } from 'uplot';\n\nimport {\n  DataFrame,\n  DataLinkPostProcessor,\n  Field,\n  FieldMatcherID,\n  fieldMatchers,\n  FieldType,\n  getLinksSupplier,\n  InterpolateFunction,\n  TimeRange,\n  TimeZone,\n} from '@grafana/data';\nimport { DashboardCursorSync, VizLegendOptions } from '@grafana/schema';\nimport { Themeable2, VizLayout } from '@grafana/ui';\nimport { UPlotChart, AxisProps, Renderers, UPlotConfigBuilder, ScaleProps, pluginLog } from '@grafana/ui/internal';\n\nimport { GraphNGLegendEvent, XYFieldMatchers } from './types';\nimport { preparePlotFrame as defaultPreparePlotFrame } from './utils';\n\n/**\n * @internal -- not a public API\n */\nexport type PropDiffFn<T extends Record<string, unknown> = {}> = (prev: T, next: T) => boolean;\n\nexport interface GraphNGProps extends Themeable2 {\n  frames: DataFrame[];\n  structureRev?: number; // a number that will change when the frames[] structure changes\n  width: number;\n  height: number;\n  timeRange: TimeRange;\n  timeZone: TimeZone[] | TimeZone;\n  legend: VizLegendOptions;\n  fields?: XYFieldMatchers; // default will assume timeseries data\n  renderers?: Renderers;\n  tweakScale?: (opts: ScaleProps, forField: Field) => ScaleProps;\n  tweakAxis?: (opts: AxisProps, forField: Field) => AxisProps;\n  onLegendClick?: (event: GraphNGLegendEvent) => void;\n  children?: (builder: UPlotConfigBuilder, alignedFrame: DataFrame) => React.ReactNode;\n  prepConfig: (alignedFrame: DataFrame, allFrames: DataFrame[], getTimeRange: () => TimeRange) => UPlotConfigBuilder;\n  propsToDiff?: Array<string | PropDiffFn>;\n  preparePlotFrame?: (frames: DataFrame[], dimFields: XYFieldMatchers) => DataFrame | null;\n  renderLegend: (config: UPlotConfigBuilder) => React.ReactElement | null;\n  replaceVariables: InterpolateFunction;\n  dataLinkPostProcessor?: DataLinkPostProcessor;\n  cursorSync?: DashboardCursorSync;\n\n  // Remove fields that are hidden from the visualization before rendering\n  // The fields will still be available for other things like data links\n  // this is a temporary hack that only works when:\n  // 1. renderLegend (above) does not render <PlotLegend>\n  // 2. does not have legend series toggle\n  // 3. passes through all fields required for link/action gen (including those with hideFrom.viz)\n  omitHideFromViz?: boolean;\n\n  /**\n   * needed for propsToDiff to re-init the plot & config\n   * this is a generic approach to plot re-init, without having to specify which panel-level options\n   * should cause invalidation. we can drop this in favor of something like panelOptionsRev that gets passed in\n   * similar to structureRev. then we can drop propsToDiff entirely.\n   */\n  options?: Record<string, any>;\n}\n\nfunction sameProps<T extends Record<string, unknown>>(\n  prevProps: T,\n  nextProps: T,\n  propsToDiff: Array<string | PropDiffFn> = []\n) {\n  for (const propName of propsToDiff) {\n    if (typeof propName === 'function') {\n      if (!propName(prevProps, nextProps)) {\n        return false;\n      }\n    } else if (nextProps[propName] !== prevProps[propName]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @internal -- not a public API\n */\nexport interface GraphNGState {\n  alignedFrame: DataFrame;\n  alignedData?: AlignedData;\n  config?: UPlotConfigBuilder;\n}\n\nconst defaultMatchers = {\n  x: fieldMatchers.get(FieldMatcherID.firstTimeField).get({}),\n  y: fieldMatchers.get(FieldMatcherID.byTypes).get(new Set([FieldType.number, FieldType.enum])),\n};\n\n/**\n * \"Time as X\" core component, expects ascending x\n */\nexport class GraphNG extends Component<GraphNGProps, GraphNGState> {\n  private plotInstance: React.RefObject<uPlot>;\n\n  constructor(props: GraphNGProps) {\n    super(props);\n    let state = this.prepState(props);\n    state.alignedData = state.config!.prepData!([state.alignedFrame]) as AlignedData;\n    this.state = state;\n    this.plotInstance = React.createRef();\n  }\n\n  getTimeRange = () => this.props.timeRange;\n\n  prepState(props: GraphNGProps, withConfig = true) {\n    let state: GraphNGState = null as any;\n\n    const { frames, fields = defaultMatchers, preparePlotFrame, replaceVariables, dataLinkPostProcessor } = props;\n\n    const preparePlotFrameFn = preparePlotFrame ?? defaultPreparePlotFrame;\n\n    const withLinks = frames.some((frame) => frame.fields.some((field) => (field.config.links?.length ?? 0) > 0));\n\n    const alignedFrame = preparePlotFrameFn(\n      frames,\n      {\n        ...fields,\n        // if there are data links, keep all fields during join so they're index-matched\n        y: withLinks ? () => true : fields.y,\n      },\n      props.timeRange\n    );\n\n    pluginLog('GraphNG', false, 'data aligned', alignedFrame);\n\n    if (alignedFrame) {\n      let alignedFrameFinal = alignedFrame;\n\n      if (withLinks) {\n        const timeZone = Array.isArray(this.props.timeZone) ? this.props.timeZone[0] : this.props.timeZone;\n\n        // for links gen we need to use original frames but with the aligned/joined data values\n        let linkFrames = frames.map((frame, frameIdx) => ({\n          ...frame,\n          fields: alignedFrame.fields.filter(\n            (field, fieldIdx) => fieldIdx === 0 || field.state?.origin?.frameIndex === frameIdx\n          ),\n          length: alignedFrame.length,\n        }));\n\n        linkFrames.forEach((linkFrame, frameIndex) => {\n          linkFrame.fields.forEach((field) => {\n            field.getLinks = getLinksSupplier(\n              linkFrame,\n              field,\n              {\n                ...field.state?.scopedVars,\n                __dataContext: {\n                  value: {\n                    data: linkFrames,\n                    field: field,\n                    frame: linkFrame,\n                    frameIndex,\n                  },\n                },\n              },\n              replaceVariables,\n              timeZone,\n              dataLinkPostProcessor\n            );\n          });\n        });\n\n        // filter join field and fields.y\n        alignedFrameFinal = {\n          ...alignedFrame,\n          fields: alignedFrame.fields.filter((field, i) => i === 0 || fields.y(field, alignedFrame, [alignedFrame])),\n        };\n      }\n\n      if (props.omitHideFromViz) {\n        const nonHiddenFields = alignedFrameFinal.fields.filter((field) => field.config.custom?.hideFrom?.viz !== true);\n        alignedFrameFinal = {\n          ...alignedFrameFinal,\n          fields: nonHiddenFields,\n          length: nonHiddenFields.length,\n        };\n      }\n\n      let config = this.state?.config;\n\n      if (withConfig) {\n        config = props.prepConfig(alignedFrameFinal, this.props.frames, this.getTimeRange);\n        pluginLog('GraphNG', false, 'config prepared', config);\n      }\n\n      state = {\n        alignedFrame: alignedFrameFinal,\n        config,\n      };\n\n      pluginLog('GraphNG', false, 'data prepared', state.alignedData);\n    }\n\n    return state;\n  }\n\n  componentDidUpdate(prevProps: GraphNGProps) {\n    const { frames, structureRev, timeZone, cursorSync, propsToDiff } = this.props;\n\n    const propsChanged = !sameProps(prevProps, this.props, propsToDiff);\n\n    if (\n      frames !== prevProps.frames ||\n      propsChanged ||\n      timeZone !== prevProps.timeZone ||\n      cursorSync !== prevProps.cursorSync\n    ) {\n      let newState = this.prepState(this.props, false);\n\n      if (newState) {\n        const shouldReconfig =\n          this.state.config === undefined ||\n          timeZone !== prevProps.timeZone ||\n          cursorSync !== prevProps.cursorSync ||\n          structureRev !== prevProps.structureRev ||\n          !structureRev ||\n          propsChanged;\n\n        if (shouldReconfig) {\n          newState.config = this.props.prepConfig(newState.alignedFrame, this.props.frames, this.getTimeRange);\n          pluginLog('GraphNG', false, 'config recreated', newState.config);\n        }\n\n        newState.alignedData = newState.config!.prepData!([newState.alignedFrame]) as AlignedData;\n\n        this.setState(newState);\n      }\n    }\n  }\n\n  render() {\n    const { width, height, children, renderLegend } = this.props;\n    const { config, alignedFrame, alignedData } = this.state;\n\n    if (!config) {\n      return null;\n    }\n\n    return (\n      <VizLayout width={width} height={height} legend={renderLegend(config)}>\n        {(vizWidth: number, vizHeight: number) => (\n          <UPlotChart\n            config={config}\n            data={alignedData!}\n            width={vizWidth}\n            height={vizHeight}\n            plotRef={(u) => ((this.plotInstance as React.MutableRefObject<uPlot>).current = u)}\n          >\n            {children ? children(config, alignedFrame) : null}\n          </UPlotChart>\n        )}\n      </VizLayout>\n    );\n  }\n}\n","// mutates all nulls -> undefineds in the fieldValues array for value-less refValues ranges below maxThreshold\n// refValues is typically a time array and maxThreshold is the allowable distance between in time\nexport function nullToUndefThreshold(refValues: number[], fieldValues: unknown[], maxThreshold: number) {\n  let prevRef;\n  let nullIdx;\n\n  for (let i = 0; i < fieldValues.length; i++) {\n    let fieldVal = fieldValues[i];\n\n    if (fieldVal == null) {\n      if (nullIdx == null && prevRef != null) {\n        nullIdx = i;\n      }\n    } else {\n      if (nullIdx != null && prevRef != null) {\n        if (refValues[i] - prevRef < maxThreshold) {\n          while (nullIdx < i) {\n            fieldValues[nullIdx++] = undefined;\n          }\n        }\n\n        nullIdx = null;\n      }\n\n      prevRef = refValues[i];\n    }\n  }\n\n  return fieldValues;\n}\n","import { DataFrame, Field, FieldType, outerJoinDataFrames, TimeRange, applyNullInsertThreshold } from '@grafana/data';\nimport { NULL_EXPAND, NULL_REMOVE, NULL_RETAIN, nullToUndefThreshold } from '@grafana/data/internal';\nimport { GraphDrawStyle } from '@grafana/schema';\n\nimport { XYFieldMatchers } from './types';\n\nfunction isVisibleBarField(f: Field) {\n  return (\n    f.type === FieldType.number && f.config.custom?.drawStyle === GraphDrawStyle.Bars && !f.config.custom?.hideFrom?.viz\n  );\n}\n\nexport function getRefField(frame: DataFrame, refFieldName?: string | null) {\n  return frame.fields.find((field) => {\n    // note: getFieldDisplayName() would require full DF[]\n    return refFieldName != null ? field.name === refFieldName : field.type === FieldType.time;\n  });\n}\n\n// will mutate the DataFrame's fields' values\nfunction applySpanNullsThresholds(frame: DataFrame, refFieldName?: string | null) {\n  const refField = getRefField(frame, refFieldName);\n\n  let refValues = refField?.values;\n\n  for (let i = 0; i < frame.fields.length; i++) {\n    let field = frame.fields[i];\n\n    if (field === refField || isVisibleBarField(field)) {\n      continue;\n    }\n\n    let spanNulls = field.config.custom?.spanNulls;\n\n    if (typeof spanNulls === 'number') {\n      if (spanNulls !== -1 && refValues) {\n        field.values = nullToUndefThreshold(refValues, field.values, spanNulls);\n      }\n    }\n  }\n\n  return frame;\n}\n\nexport function preparePlotFrame(frames: DataFrame[], dimFields: XYFieldMatchers, timeRange?: TimeRange | null) {\n  let xField: Field;\n  loop: for (let frame of frames) {\n    for (let field of frame.fields) {\n      if (dimFields.x(field, frame, frames)) {\n        xField = field;\n        break loop;\n      }\n    }\n  }\n\n  // apply null insertions at interval\n  frames = frames.map((frame) => {\n    if (!xField?.state?.nullThresholdApplied) {\n      return applyNullInsertThreshold({\n        frame,\n        refFieldName: xField.name,\n        refFieldPseudoMin: timeRange?.from.valueOf(),\n        refFieldPseudoMax: timeRange?.to.valueOf(),\n      });\n    } else {\n      return frame;\n    }\n  });\n\n  let numBarSeries = frames.reduce(\n    (acc, frame) => acc + frame.fields.reduce((acc, field) => acc + (isVisibleBarField(field) ? 1 : 0), 0),\n    0\n  );\n\n  // to make bar widths of all series uniform (equal to narrowest bar series), find smallest distance between x points\n  let minXDelta = Infinity;\n\n  if (numBarSeries > 1) {\n    frames.forEach((frame) => {\n      if (!frame.fields.some(isVisibleBarField)) {\n        return;\n      }\n\n      const xVals = xField.values;\n\n      for (let i = 0; i < xVals.length; i++) {\n        if (i > 0) {\n          minXDelta = Math.min(minXDelta, xVals[i] - xVals[i - 1]);\n        }\n      }\n    });\n  }\n\n  let alignedFrame = outerJoinDataFrames({\n    frames,\n    joinBy: dimFields.x,\n    keep: dimFields.y,\n    keepOriginIndices: true,\n\n    // the join transformer force-deletes our state.displayName cache unless keepDisplayNames: true\n    // https://github.com/grafana/grafana/pull/31121\n    // https://github.com/grafana/grafana/pull/71806\n    keepDisplayNames: true,\n\n    // prevent minesweeper-expansion of nulls (gaps) when joining bars\n    // since bar width is determined from the minimum distance between non-undefined values\n    // (this strategy will still retain any original pre-join nulls, though)\n    nullMode: (field) => {\n      if (isVisibleBarField(field)) {\n        return NULL_RETAIN;\n      }\n\n      let spanNulls = field.config.custom?.spanNulls;\n      return spanNulls === true ? NULL_REMOVE : spanNulls === -1 ? NULL_RETAIN : NULL_EXPAND;\n    },\n  });\n\n  if (alignedFrame) {\n    alignedFrame = applySpanNullsThresholds(alignedFrame, xField!.name);\n\n    // append 2 null vals at minXDelta to bar series\n    if (minXDelta !== Infinity) {\n      alignedFrame.fields.forEach((f, fi) => {\n        let vals = f.values;\n\n        if (fi === 0) {\n          let lastVal = vals[vals.length - 1];\n          vals.push(lastVal + minXDelta, lastVal + 2 * minXDelta);\n        } else if (isVisibleBarField(f)) {\n          vals.push(null, null);\n        } else {\n          vals.push(undefined, undefined);\n        }\n      });\n\n      alignedFrame.length += 2;\n    }\n\n    return alignedFrame;\n  }\n\n  return null;\n}\n","import { Component } from 'react';\n\nimport { DataFrame, FALLBACK_COLOR, FieldType, TimeRange } from '@grafana/data';\nimport { VisibilityMode, TimelineValueAlignment, TooltipDisplayMode, VizTooltipOptions } from '@grafana/schema';\nimport { UPlotConfigBuilder, VizLayout, VizLegend, VizLegendItem } from '@grafana/ui';\n\nimport { GraphNG, GraphNGProps } from '../GraphNG/GraphNG';\n\nimport { preparePlotConfigBuilder, TimelineMode } from './utils';\n\n/**\n * @alpha\n */\nexport interface TimelineProps extends Omit<GraphNGProps, 'prepConfig' | 'propsToDiff' | 'renderLegend'> {\n  mode: TimelineMode;\n  rowHeight?: number;\n  showValue: VisibilityMode;\n  alignValue?: TimelineValueAlignment;\n  colWidth?: number;\n  legendItems?: VizLegendItem[];\n  tooltip?: VizTooltipOptions;\n  // Whenever `paginationRev` changes, the graph will be fully re-configured/rendered.\n  paginationRev?: string;\n}\n\nconst propsToDiff = ['rowHeight', 'colWidth', 'showValue', 'mergeValues', 'alignValue', 'tooltip', 'paginationRev'];\n\nexport class TimelineChart extends Component<TimelineProps> {\n  getValueColor = (frameIdx: number, fieldIdx: number, value: unknown) => {\n    const field = this.props.frames[frameIdx]?.fields[fieldIdx];\n\n    if (field?.display) {\n      const disp = field.display(value); // will apply color modes\n      if (disp.color) {\n        return disp.color;\n      }\n    }\n\n    return FALLBACK_COLOR;\n  };\n\n  prepConfig = (alignedFrame: DataFrame, allFrames: DataFrame[], getTimeRange: () => TimeRange) => {\n    return preparePlotConfigBuilder({\n      frame: alignedFrame,\n      getTimeRange,\n      allFrames: this.props.frames,\n      ...this.props,\n\n      // Ensure timezones is passed as an array\n      timeZones: Array.isArray(this.props.timeZone) ? this.props.timeZone : [this.props.timeZone],\n\n      // When there is only one row, use the full space\n      rowHeight: alignedFrame.fields.length > 2 ? this.props.rowHeight : 1,\n      getValueColor: this.getValueColor,\n\n      hoverMulti: this.props.tooltip?.mode === TooltipDisplayMode.Multi,\n    });\n  };\n\n  renderLegend = (config: UPlotConfigBuilder) => {\n    const { legend, legendItems } = this.props;\n\n    if (!config || !legendItems || !legend || legend.showLegend === false) {\n      return null;\n    }\n\n    return (\n      <VizLayout.Legend placement={legend.placement}>\n        <VizLegend placement={legend.placement} items={legendItems} displayMode={legend.displayMode} readonly />\n      </VizLayout.Legend>\n    );\n  };\n\n  render() {\n    return (\n      <GraphNG\n        {...this.props}\n        fields={{\n          x: (f) => f.type === FieldType.time,\n          y: (f) =>\n            f.type === FieldType.number ||\n            f.type === FieldType.boolean ||\n            f.type === FieldType.string ||\n            f.type === FieldType.enum,\n        }}\n        prepConfig={this.prepConfig}\n        propsToDiff={propsToDiff}\n        renderLegend={this.renderLegend}\n        omitHideFromViz={true}\n      />\n    );\n  }\n}\n","import { DataFrameJSON } from '@grafana/data';\n\nimport { alertingApi } from './alertingApi';\n\nexport const stateHistoryApi = alertingApi.injectEndpoints({\n  endpoints: (build) => ({\n    getRuleHistory: build.query<DataFrameJSON, { ruleUid?: string; from?: number; to?: number; limit?: number }>({\n      query: ({ ruleUid, from, to, limit = 100 }) => ({\n        url: '/api/v1/rules/history',\n        params: { ruleUID: ruleUid, from, to, limit },\n      }),\n    }),\n  }),\n});\n","import { memo } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { DataFrame, InterpolateFunction, TimeRange } from '@grafana/data';\nimport { VisibilityMode } from '@grafana/schema';\nimport { LegendDisplayMode, useTheme2 } from '@grafana/ui';\nimport { TimelineChart } from 'app/core/components/TimelineChart/TimelineChart';\nimport { TimelineMode } from 'app/core/components/TimelineChart/utils';\n\ninterface LogTimelineViewerProps {\n  frames: DataFrame[];\n  timeRange: TimeRange;\n}\n\n// noop\nconst replaceVariables: InterpolateFunction = (v) => v;\n\nexport const LogTimelineViewer = memo(({ frames, timeRange }: LogTimelineViewerProps) => {\n  const theme = useTheme2();\n\n  return (\n    <AutoSizer disableHeight>\n      {({ width }) => (\n        <TimelineChart\n          frames={frames}\n          timeRange={timeRange}\n          timeZone={'browser'}\n          mode={TimelineMode.Changes}\n          height={18 * frames.length + 50}\n          width={width}\n          showValue={VisibilityMode.Never}\n          theme={theme}\n          rowHeight={0.8}\n          legend={{\n            calcs: [],\n            displayMode: LegendDisplayMode.List,\n            placement: 'bottom',\n            showLegend: true,\n          }}\n          legendItems={[\n            { label: 'Normal', color: theme.colors.success.main, yAxis: 1 },\n            { label: 'Pending', color: theme.colors.warning.main, yAxis: 1 },\n            { label: 'Recovering', color: theme.colors.warning.main, yAxis: 1 },\n            { label: 'Firing', color: theme.colors.error.main, yAxis: 1 },\n            { label: 'No Data', color: theme.colors.info.main, yAxis: 1 },\n            { label: 'Mixed', color: theme.colors.text.secondary, yAxis: 1 },\n          ]}\n          replaceVariables={replaceVariables}\n        />\n      )}\n    </AutoSizer>\n  );\n});\n\nLogTimelineViewer.displayName = 'LogTimelineViewer';\n","import { css } from '@emotion/css';\nimport { formatDistanceToNowStrict } from 'date-fns';\nimport { groupBy, uniqueId } from 'lodash';\nimport { Fragment, memo, useEffect } from 'react';\n\nimport { GrafanaTheme2, dateTimeFormat } from '@grafana/data';\nimport { Icon, Stack, TagList, useStyles2 } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { Label } from '../../Label';\nimport { AlertStateTag } from '../AlertStateTag';\n\nimport { LogRecord, omitLabels } from './common';\n\ntype LogRecordViewerProps = {\n  records: LogRecord[];\n  commonLabels: Array<[string, string]>;\n};\n\ntype AdditionalLogRecordViewerProps = {\n  onRecordsRendered?: (timestampRefs: Map<number, HTMLElement>) => void;\n  onLabelClick?: (label: string) => void;\n};\n\nfunction groupRecordsByTimestamp(records: LogRecord[]) {\n  // groupBy has been replaced by the reduce to avoid back and forth conversion of timestamp from number to string\n  const groupedLines = records.reduce((acc, current) => {\n    const tsGroup = acc.get(current.timestamp);\n    if (tsGroup) {\n      tsGroup.push(current);\n    } else {\n      acc.set(current.timestamp, [current]);\n    }\n\n    return acc;\n  }, new Map<number, LogRecord[]>());\n\n  return new Map([...groupedLines].sort((a, b) => b[0] - a[0]));\n}\n\nexport const LogRecordViewerByTimestamp = memo(\n  ({\n    records,\n    commonLabels,\n    onLabelClick,\n    onRecordsRendered,\n  }: LogRecordViewerProps & AdditionalLogRecordViewerProps) => {\n    const styles = useStyles2(getStyles);\n\n    const groupedLines = groupRecordsByTimestamp(records);\n\n    const timestampRefs = new Map<number, HTMLElement>();\n    useEffect(() => {\n      onRecordsRendered && onRecordsRendered(timestampRefs);\n    });\n\n    return (\n      <ul\n        className={styles.logsScrollable}\n        aria-label={t(\n          'alerting.log-record-viewer-by-timestamp.aria-label-state-history-by-timestamp',\n          'State history by timestamp'\n        )}\n      >\n        {Array.from(groupedLines.entries()).map(([key, records]) => {\n          return (\n            <li\n              id={key.toString(10)}\n              key={key}\n              data-testid={key}\n              ref={(element) => element && timestampRefs.set(key, element)}\n              className={styles.listItemWrapper}\n            >\n              <Timestamp time={key} />\n              <div className={styles.logsContainer}>\n                {records.map(({ line }) => (\n                  <Fragment key={uniqueId()}>\n                    <AlertStateTag state={line.previous} size=\"sm\" muted />\n                    <Icon name=\"arrow-right\" size=\"sm\" />\n                    <AlertStateTag state={line.current} />\n                    <Stack>{line.values && <AlertInstanceValues record={line.values} />}</Stack>\n                    <div>\n                      {line.labels && (\n                        <TagList\n                          tags={omitLabels(Object.entries(line.labels), commonLabels).map(\n                            ([key, value]) => `${key}=${value}`\n                          )}\n                          onClick={onLabelClick}\n                        />\n                      )}\n                    </div>\n                  </Fragment>\n                ))}\n              </div>\n            </li>\n          );\n        })}\n      </ul>\n    );\n  }\n);\nLogRecordViewerByTimestamp.displayName = 'LogRecordViewerByTimestamp';\n\nexport function LogRecordViewerByInstance({ records, commonLabels }: LogRecordViewerProps) {\n  const styles = useStyles2(getStyles);\n\n  const groupedLines = groupBy(records, (record: LogRecord) => {\n    return JSON.stringify(record.line.labels);\n  });\n\n  return (\n    <>\n      {Object.entries(groupedLines).map(([key, records]) => {\n        return (\n          <Stack direction=\"column\" key={key}>\n            <h4>\n              <TagList\n                tags={omitLabels(Object.entries(records[0].line.labels ?? {}), commonLabels).map(\n                  ([key, value]) => `${key}=${value}`\n                )}\n              />\n            </h4>\n            <div className={styles.logsContainer}>\n              {records.map(({ line, timestamp }) => (\n                <div key={uniqueId()}>\n                  <AlertStateTag state={line.previous} size=\"sm\" muted />\n                  <Icon name=\"arrow-right\" size=\"sm\" />\n                  <AlertStateTag state={line.current} />\n                  <Stack>{line.values && <AlertInstanceValues record={line.values} />}</Stack>\n                  <div>{dateTimeFormat(timestamp)}</div>\n                </div>\n              ))}\n            </div>\n          </Stack>\n        );\n      })}\n    </>\n  );\n}\n\ninterface TimestampProps {\n  time: number; // epoch timestamp\n}\n\nconst Timestamp = ({ time }: TimestampProps) => {\n  const dateTime = new Date(time);\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.timestampWrapper}>\n      <Stack alignItems=\"center\" gap={1}>\n        <Icon name=\"clock-nine\" size=\"sm\" />\n        <span className={styles.timestampText}>{dateTimeFormat(dateTime)}</span>\n        <small>({formatDistanceToNowStrict(dateTime)} ago)</small>\n      </Stack>\n    </div>\n  );\n};\n\nconst AlertInstanceValues = memo(({ record }: { record: Record<string, number> }) => {\n  const values = Object.entries(record);\n\n  return (\n    <>\n      {values.map(([key, value]) => (\n        <Label key={key} label={key} value={value} />\n      ))}\n    </>\n  );\n});\nAlertInstanceValues.displayName = 'AlertInstanceValues';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  logsContainer: css({\n    display: 'grid',\n    gridTemplateColumns: 'max-content max-content max-content auto max-content',\n    gap: theme.spacing(2, 1),\n    alignItems: 'center',\n  }),\n  logsScrollable: css({\n    height: '500px',\n    overflow: 'scroll',\n\n    flex: 1,\n  }),\n  timestampWrapper: css({\n    color: theme.colors.text.secondary,\n  }),\n  timestampText: css({\n    color: theme.colors.text.primary,\n    fontSize: theme.typography.bodySmall.fontSize,\n    fontWeight: theme.typography.fontWeightBold,\n  }),\n  listItemWrapper: css({\n    background: 'transparent',\n    outline: '1px solid transparent',\n    padding: `${theme.spacing(1)} ${theme.spacing(1.5)}`,\n    [theme.transitions.handleMotion('no-preference', 'reduce')]: {\n      transition: 'background 150ms, outline 150ms',\n    },\n  }),\n});\n","import { css } from '@emotion/css';\nimport { fromPairs, isEmpty, sortBy, take, uniq } from 'lodash';\nimport * as React from 'react';\nimport { useCallback, useMemo, useRef, useState } from 'react';\nimport { useForm } from 'react-hook-form';\n\nimport { DataFrame, GrafanaTheme2, TimeRange, dateTime } from '@grafana/data';\nimport { Alert, Button, Field, Icon, Input, Label, Stack, Text, Tooltip, useStyles2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { stateHistoryApi } from '../../../api/stateHistoryApi';\nimport { combineMatcherStrings } from '../../../utils/alertmanager';\nimport { AlertLabels } from '../../AlertLabels';\nimport { PopupCard } from '../../HoverCard';\n\nimport { LogRecordViewerByTimestamp } from './LogRecordViewer';\nimport { LogTimelineViewer } from './LogTimelineViewer';\nimport { useRuleHistoryRecords } from './useRuleHistoryRecords';\n\ninterface Props {\n  ruleUID: string;\n}\n\nconst STATE_HISTORY_POLLING_INTERVAL = 10 * 1000; // 10 seconds\nconst MAX_TIMELINE_SERIES = 12;\n\nconst LokiStateHistory = ({ ruleUID }: Props) => {\n  const styles = useStyles2(getStyles);\n  const [instancesFilter, setInstancesFilter] = useState('');\n  const logsRef = useRef<Map<number, HTMLElement>>(new Map<number, HTMLElement>());\n\n  const { getValues, setValue, register, handleSubmit } = useForm({ defaultValues: { query: '' } });\n\n  const { useGetRuleHistoryQuery } = stateHistoryApi;\n\n  // We prefer log count-based limit rather than time-based, but the API doesn't support it yet\n  const queryTimeRange = useMemo(() => getDefaultTimeRange(), []);\n\n  const {\n    currentData: stateHistory,\n    isLoading,\n    isError,\n    error,\n  } = useGetRuleHistoryQuery(\n    {\n      ruleUid: ruleUID,\n      from: queryTimeRange.from.unix(),\n      to: queryTimeRange.to.unix(),\n      limit: 250,\n    },\n    {\n      refetchOnFocus: true,\n      refetchOnReconnect: true,\n      pollingInterval: STATE_HISTORY_POLLING_INTERVAL,\n    }\n  );\n\n  const { dataFrames, historyRecords, commonLabels, totalRecordsCount } = useRuleHistoryRecords(\n    stateHistory,\n    instancesFilter\n  );\n\n  const { frameSubset, frameTimeRange } = useFrameSubset(dataFrames);\n\n  const onLogRecordLabelClick = useCallback(\n    (label: string) => {\n      const matcherString = combineMatcherStrings(getValues('query'), label);\n      setInstancesFilter(matcherString);\n      setValue('query', matcherString);\n    },\n    [setInstancesFilter, setValue, getValues]\n  );\n\n  const onFilterCleared = useCallback(() => {\n    setInstancesFilter('');\n    setValue('query', '');\n  }, [setInstancesFilter, setValue]);\n\n  if (isLoading) {\n    return (\n      <div>\n        <Trans i18nKey=\"alerting.loki-state-history.loading\">Loading...</Trans>\n      </div>\n    );\n  }\n  if (isError) {\n    return (\n      <Alert\n        title={t(\n          'alerting.loki-state-history.title-error-fetching-the-state-history',\n          'Error fetching the state history'\n        )}\n        severity=\"error\"\n      >\n        {error instanceof Error ? error.message : 'Unable to fetch alert state history'}\n      </Alert>\n    );\n  }\n\n  const hasMoreInstances = frameSubset.length < dataFrames.length;\n  const emptyStateMessage =\n    totalRecordsCount > 0\n      ? `No matches were found for the given filters among the ${totalRecordsCount} instances`\n      : 'No state transitions have occurred in the last 30 days';\n\n  return (\n    <div className={styles.fullSize}>\n      <form onSubmit={handleSubmit((data) => setInstancesFilter(data.query))}>\n        <SearchFieldInput\n          {...register('query')}\n          showClearFilterSuffix={!!instancesFilter}\n          onClearFilterClick={onFilterCleared}\n        />\n        <input type=\"submit\" hidden />\n      </form>\n      {!isEmpty(commonLabels) && (\n        <Stack gap={1} alignItems=\"center\" wrap=\"wrap\">\n          <Stack gap={0.5} alignItems=\"center\" minWidth=\"fit-content\">\n            <Text variant=\"bodySmall\">\n              <Trans i18nKey=\"alerting.loki-state-history.common-labels\">Common labels</Trans>\n            </Text>\n            <Tooltip content=\"Common labels are the ones attached to all of the alert instances\">\n              <Icon name=\"info-circle\" size=\"sm\" />\n            </Tooltip>\n          </Stack>\n          <AlertLabels labels={fromPairs(commonLabels)} size=\"sm\" />\n        </Stack>\n      )}\n      {isEmpty(frameSubset) ? (\n        <div className={styles.emptyState}>\n          {emptyStateMessage}\n          {totalRecordsCount > 0 && (\n            <Button variant=\"secondary\" type=\"button\" onClick={onFilterCleared}>\n              <Trans i18nKey=\"alerting.loki-state-history.clear-filters\">Clear filters</Trans>\n            </Button>\n          )}\n        </div>\n      ) : (\n        <>\n          <div className={styles.graphWrapper}>\n            <LogTimelineViewer frames={frameSubset} timeRange={frameTimeRange} />\n          </div>\n          {hasMoreInstances && (\n            <div className={styles.moreInstancesWarning}>\n              <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n                <Icon name=\"exclamation-triangle\" size=\"sm\" />\n                <small>{`Only showing ${frameSubset.length} out of ${dataFrames.length} instances. Click on the labels to narrow down the results`}</small>\n              </Stack>\n            </div>\n          )}\n          <LogRecordViewerByTimestamp\n            records={historyRecords}\n            commonLabels={commonLabels}\n            onRecordsRendered={(recordRefs) => (logsRef.current = recordRefs)}\n            onLabelClick={onLogRecordLabelClick}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport function useFrameSubset(frames: DataFrame[]) {\n  return useMemo(() => {\n    const frameSubset = take(frames, MAX_TIMELINE_SERIES);\n    const frameSubsetTimestamps = sortBy(uniq(frameSubset.flatMap((frame) => frame.fields[0].values)));\n\n    const minTs = Math.min(...frameSubsetTimestamps);\n    const maxTs = Math.max(...frameSubsetTimestamps);\n\n    const rangeStart = dateTime(minTs);\n    const rangeStop = dateTime(maxTs);\n\n    const frameTimeRange: TimeRange = {\n      from: rangeStart,\n      to: rangeStop,\n      raw: {\n        from: rangeStart,\n        to: rangeStop,\n      },\n    };\n\n    return { frameSubset, frameSubsetTimestamps, frameTimeRange };\n  }, [frames]);\n}\n\ninterface SearchFieldInputProps extends Omit<React.ComponentProps<typeof Input>, 'prefix' | 'suffix' | 'placeholder'> {\n  showClearFilterSuffix: boolean;\n  onClearFilterClick: () => void;\n}\n\nconst SearchFieldInput = React.forwardRef<HTMLInputElement, SearchFieldInputProps>(\n  ({ showClearFilterSuffix, onClearFilterClick, ...rest }: SearchFieldInputProps, ref) => {\n    return (\n      <Field\n        label={\n          <Label htmlFor=\"instancesSearchInput\">\n            <Stack gap={0.5}>\n              <span>\n                <Trans i18nKey=\"alerting.search-field-input.filter-instances\">Filter instances</Trans>\n              </span>\n              <PopupCard\n                content={\n                  <>\n                    Use label matcher expression (like <code>{'{foo=bar}'}</code>) or click on an instance label to\n                    filter instances\n                  </>\n                }\n              >\n                <Icon name=\"info-circle\" size=\"sm\" />\n              </PopupCard>\n            </Stack>\n          </Label>\n        }\n      >\n        <Input\n          id=\"instancesSearchInput\"\n          prefix={<Icon name=\"search\" />}\n          suffix={\n            showClearFilterSuffix && (\n              <Button fill=\"text\" icon=\"times\" size=\"sm\" onClick={onClearFilterClick}>\n                <Trans i18nKey=\"alerting.search-field-input.clear\">Clear</Trans>\n              </Button>\n            )\n          }\n          placeholder={t(\n            'alerting.search-field-input.instancesSearchInput-placeholder-filter-instances',\n            'Filter instances'\n          )}\n          ref={ref}\n          {...rest}\n        />\n      </Field>\n    );\n  }\n);\nSearchFieldInput.displayName = 'SearchFieldInput';\n\nfunction getDefaultTimeRange(): TimeRange {\n  const fromDateTime = dateTime().subtract(30, 'days');\n  const toDateTime = dateTime();\n  return {\n    from: fromDateTime,\n    to: toDateTime,\n    raw: { from: fromDateTime, to: toDateTime },\n  };\n}\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  fullSize: css({\n    minWidth: '100%',\n    height: '100%',\n\n    display: 'flex',\n    flexDirection: 'column',\n  }),\n  graphWrapper: css({\n    padding: `${theme.spacing()} 0`,\n  }),\n  emptyState: css({\n    color: theme.colors.text.secondary,\n\n    display: 'flex',\n    flexDirection: 'column',\n    gap: theme.spacing(2),\n    alignItems: 'center',\n    margin: 'auto auto',\n  }),\n  moreInstancesWarning: css({\n    color: theme.colors.warning.text,\n    padding: theme.spacing(),\n  }),\n  // we need !important here to override the list item default styles\n  highlightedLogRecord: css({\n    background: `${theme.colors.primary.transparent} !important`,\n    outline: `1px solid ${theme.colors.primary.shade} !important`,\n  }),\n});\n\nexport default LokiStateHistory;\n","import { isEqual, uniqBy } from 'lodash';\n\nimport { GrafanaAlertStateWithReason } from 'app/types/unified-alerting-dto';\n\nexport interface Line {\n  previous: GrafanaAlertStateWithReason;\n  current: GrafanaAlertStateWithReason;\n  values?: Record<string, number>;\n  labels?: Record<string, string>;\n  fingerprint?: string;\n  ruleUID?: string;\n}\n\nexport interface LogRecord {\n  timestamp: number;\n  line: Line;\n}\n\nexport type Label = [string, string];\n\n// omit \"common\" labels from \"labels\"\nexport function omitLabels(labels: Label[], common: Label[]): Label[] {\n  return labels.filter((label) => {\n    return !common.find((commonLabel) => JSON.stringify(commonLabel) === JSON.stringify(label));\n  });\n}\n\n// find all common labels by looking at which ones occur in every record, then create a unique array of items for those\nexport function extractCommonLabels(labels: Label[][]): Label[] {\n  const flatLabels = labels.flatMap((label) => label);\n\n  const commonLabels = uniqBy(\n    flatLabels.filter((label) => {\n      const count = flatLabels.filter((l) => isEqual(label, l)).length;\n      return count === Object.keys(labels).length;\n    }),\n    (label) => JSON.stringify(label)\n  );\n\n  return commonLabels;\n}\n","import { groupBy } from 'lodash';\nimport { useMemo } from 'react';\n\nimport {\n  DataFrame,\n  Field as DataFrameField,\n  DataFrameJSON,\n  FieldType,\n  GrafanaTheme2,\n  getDisplayProcessor,\n} from '@grafana/data';\nimport { fieldIndexComparer } from '@grafana/data/internal';\nimport { MappingType, ThresholdsMode } from '@grafana/schema';\nimport { useTheme2 } from '@grafana/ui';\n\nimport { labelsMatchMatchers } from '../../../utils/alertmanager';\nimport { parsePromQLStyleMatcherLooseSafe } from '../../../utils/matchers';\n\nimport { Line, LogRecord, extractCommonLabels, omitLabels } from './common';\n\nexport function useRuleHistoryRecords(stateHistory?: DataFrameJSON, filter?: string) {\n  const theme = useTheme2();\n\n  return useMemo(() => {\n    // merge timestamp with \"line\"\n    const tsValues = stateHistory?.data?.values[0] ?? [];\n    const timestamps: number[] = isNumbers(tsValues) ? tsValues : [];\n    const lines = stateHistory?.data?.values[1] ?? [];\n\n    const logRecords = timestamps.reduce((acc: LogRecord[], timestamp: number, index: number) => {\n      const line = lines[index];\n      // values property can be undefined for some instance states (e.g. NoData)\n      if (isLine(line)) {\n        acc.push({ timestamp, line });\n      }\n\n      return acc;\n    }, []);\n\n    // group all records by alert instance (unique set of labels)\n    const logRecordsByInstance = groupBy(logRecords, (record: LogRecord) => {\n      return JSON.stringify(record.line.labels);\n    });\n\n    // CommonLabels should not be affected by the filter\n    // find common labels so we can extract those from the instances\n    const groupLabels = Object.keys(logRecordsByInstance);\n    const groupLabelsArray: Array<Array<[string, string]>> = groupLabels.map((label) => {\n      return Object.entries(JSON.parse(label));\n    });\n\n    const commonLabels = extractCommonLabels(groupLabelsArray);\n\n    const filterMatchers = filter ? parsePromQLStyleMatcherLooseSafe(filter) : [];\n    const filteredGroupedLines = Object.entries(logRecordsByInstance).filter(([key]) => {\n      const labels = JSON.parse(key);\n      return labelsMatchMatchers(labels, filterMatchers);\n    });\n\n    const dataFrames: DataFrame[] = filteredGroupedLines.map<DataFrame>(([key, records]) => {\n      return logRecordsToDataFrame(key, records, commonLabels, theme);\n    });\n\n    return {\n      historyRecords: logRecords.filter(({ line }) => line.labels && labelsMatchMatchers(line.labels, filterMatchers)),\n      dataFrames,\n      commonLabels,\n      totalRecordsCount: logRecords.length,\n    };\n  }, [stateHistory, filter, theme]);\n}\n\nexport function isNumbers(value: unknown[]): value is number[] {\n  return value.every((v) => typeof v === 'number');\n}\n\nexport function isLine(value: unknown): value is Line {\n  return typeof value === 'object' && value !== null && 'current' in value && 'previous' in value;\n}\n\n// Each alert instance is represented by a data frame\n// Each frame consists of two fields: timestamp and state change\nexport function logRecordsToDataFrame(\n  instanceLabels: string,\n  records: LogRecord[],\n  commonLabels: Array<[string, string]>,\n  theme: GrafanaTheme2\n): DataFrame {\n  const parsedInstanceLabels = Object.entries<string>(JSON.parse(instanceLabels));\n\n  // There is an artificial element at the end meaning Date.now()\n  // It exist to draw the state change from when it happened to the current time\n  const timeField: DataFrameField = {\n    name: 'time',\n    type: FieldType.time,\n    values: [...records.map((record) => record.timestamp), Date.now()],\n    config: { displayName: 'Time', custom: { fillOpacity: 100 } },\n  };\n\n  const timeIndex = timeField.values.map((_, index) => index);\n  timeIndex.sort(fieldIndexComparer(timeField));\n\n  const stateValues = [...records.map((record) => record.line.current), records.at(-1)?.line.current];\n\n  const frame: DataFrame = {\n    fields: [\n      {\n        ...timeField,\n        values: timeField.values.map((_, i) => timeField.values[timeIndex[i]]),\n      },\n      {\n        name: 'State',\n        type: FieldType.string,\n        values: stateValues.map((_, i) => stateValues[timeIndex[i]]),\n        config: {\n          displayName: omitLabels(parsedInstanceLabels, commonLabels)\n            .map(([key, label]) => `${key}=${label}`)\n            .join(', '),\n          color: { mode: 'thresholds' },\n          custom: { fillOpacity: 100 },\n          mappings: [\n            {\n              type: MappingType.RegexToText,\n              options: {\n                //  Map as a regex so we capture `Normal`, and `Normal (Updated)`\n                pattern: '/^normal/i',\n                result: { color: theme.colors.success.main },\n              },\n            },\n            {\n              type: MappingType.RegexToText,\n              options: {\n                pattern: '/Alerting/',\n                result: { color: theme.colors.error.main },\n              },\n            },\n            {\n              type: MappingType.ValueToText,\n              options: {\n                Pending: {\n                  color: theme.colors.warning.main,\n                },\n                Recovering: {\n                  color: theme.colors.warning.main,\n                },\n                NoData: {\n                  color: theme.colors.info.main,\n                },\n              },\n            },\n          ],\n          thresholds: {\n            mode: ThresholdsMode.Absolute,\n            steps: [],\n          },\n        },\n      },\n    ],\n    length: timeField.values.length,\n    name: instanceLabels,\n  };\n\n  frame.fields.forEach((field) => {\n    field.display = getDisplayProcessor({ field, theme });\n  });\n\n  return frame;\n}\n"],"names":["sameProps","prevProps","nextProps","propsToDiff","propName","defaultMatchers","GraphNG","props","state","withConfig","frames","fields","preparePlotFrame","replaceVariables","dataLinkPostProcessor","preparePlotFrameFn","withLinks","frame","field","alignedFrame","alignedFrameFinal","timeZone","linkFrames","frameIdx","fieldIdx","linkFrame","frameIndex","i","nonHiddenFields","config","structureRev","cursorSync","propsChanged","newState","width","height","children","renderLegend","alignedData","vizWidth","vizHeight","u","nullToUndefThreshold","refValues","fieldValues","maxThreshold","prevRef","nullIdx","isVisibleBarField","f","getRefField","refFieldName","applySpanNullsThresholds","refField","spanNulls","dimFields","timeRange","xField","loop","numBarSeries","acc","minXDelta","xVals","fi","vals","lastVal","TimelineChart","value","disp","allFrames","getTimeRange","legend","legendItems","stateHistoryApi","build","ruleUid","from","to","limit","v","LogTimelineViewer","theme","groupRecordsByTimestamp","records","groupedLines","current","tsGroup","a","b","LogRecordViewerByTimestamp","commonLabels","onLabelClick","onRecordsRendered","styles","getStyles","timestampRefs","key","element","Timestamp","line","Fragment","AlertInstanceValues","LogRecordViewerByInstance","record","timestamp","time","dateTime","formatDistanceToNowStrict","values","STATE_HISTORY_POLLING_INTERVAL","MAX_TIMELINE_SERIES","LokiStateHistory","ruleUID","instancesFilter","setInstancesFilter","logsRef","getValues","setValue","register","handleSubmit","useGetRuleHistoryQuery","queryTimeRange","getDefaultTimeRange","stateHistory","isLoading","isError","error","dataFrames","historyRecords","totalRecordsCount","useRuleHistoryRecords","frameSubset","frameTimeRange","useFrameSubset","onLogRecordLabelClick","label","matcherString","onFilterCleared","Alert","hasMoreInstances","emptyStateMessage","data","SearchFieldInput","Text","Tooltip","AlertLabels","Button","recordRefs","frameSubsetTimestamps","minTs","maxTs","rangeStart","rangeStop","showClearFilterSuffix","onClearFilterClick","rest","ref","Field","Label","Input","fromDateTime","toDateTime","omitLabels","labels","common","commonLabel","extractCommonLabels","flatLabels","l","filter","tsValues","timestamps","isNumbers","lines","logRecords","index","isLine","logRecordsByInstance","groupLabelsArray","filterMatchers","logRecordsToDataFrame","instanceLabels","parsedInstanceLabels","timeField","timeIndex","_","stateValues"],"sourceRoot":""}