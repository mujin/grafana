{"version":3,"file":"NotificationPoliciesPage.2038c548d70b3e6a23cd.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/api/grafana.ts","webpack://grafana/./public/app/features/alerting/unified/api/receiversApi.ts","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/Filters.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/AlertGroupsSummary.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/utils.ts","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/EditDefaultPolicyForm.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/EditNotificationPolicyForm.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/PolicyUpdateErrorAlert.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/Modals.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaPoliciesExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/Policy.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/NotificationPoliciesList.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaMuteTimingsExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/mute-timings/useExportMuteTimingsDrawer.tsx","webpack://grafana/./public/app/features/alerting/unified/components/mute-timings/MuteTimingActionsButtons.tsx","webpack://grafana/./public/app/features/alerting/unified/components/EmptyAreaWithCTA.tsx","webpack://grafana/./public/app/features/alerting/unified/components/mute-timings/MuteTimingsTable.tsx","webpack://grafana/./public/app/features/alerting/unified/NotificationPoliciesPage.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Authorize.tsx","webpack://grafana/./public/app/features/alerting/unified/components/EmptyArea.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertDetails.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroupAlertsTable.tsx","webpack://grafana/./public/app/features/alerting/unified/styles/notifications.ts","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroupHeader.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroup.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/Matchers.tsx","webpack://grafana/./node_modules/comlink/dist/esm/comlink.mjs","webpack://grafana/./public/app/features/alerting/unified/createRouteGroupsMatcherWorker.ts","webpack://grafana/./public/app/features/alerting/unified/useRouteGroupsMatcher.ts","webpack://grafana/./public/app/features/alerting/unified/utils/mute-timings.ts"],"sourcesContent":["import { lastValueFrom } from 'rxjs';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { ContactPointsState, ReceiverState, ReceiversStateDTO } from 'app/types';\n\nimport { getDatasourceAPIUid } from '../utils/datasource';\n\ninterface IntegrationNameObject {\n  type: string;\n  index?: string;\n}\nexport const parseIntegrationName = (integrationName: string): IntegrationNameObject => {\n  const matches = integrationName.match(/^(\\w+)(\\[\\d+\\])?$/);\n  if (!matches) {\n    return { type: integrationName, index: undefined };\n  }\n\n  return {\n    type: matches[1],\n    index: matches[2],\n  };\n};\n\nexport const contactPointsStateDtoToModel = (receiversStateDto: ReceiversStateDTO[]): ContactPointsState => {\n  // init object to return\n  const contactPointsState: ContactPointsState = { receivers: {}, errorCount: 0 };\n  // for each receiver from response\n  receiversStateDto.forEach((cpState) => {\n    //init receiver state\n    contactPointsState.receivers[cpState.name] = { active: cpState.active, notifiers: {}, errorCount: 0 };\n    const receiverState = contactPointsState.receivers[cpState.name];\n    //update integrations in response\n    cpState.integrations.forEach((integrationStatusDTO) => {\n      //update errorcount\n      const hasError = Boolean(integrationStatusDTO?.lastNotifyAttemptError);\n      if (hasError) {\n        receiverState.errorCount += 1;\n      }\n      //add integration for this type\n      const integrationType = getIntegrationType(integrationStatusDTO.name);\n      if (integrationType) {\n        //if type still does not exist in IntegrationsTypeState we initialize it with an empty array\n        if (!receiverState.notifiers[integrationType]) {\n          receiverState.notifiers[integrationType] = [];\n        }\n        // add error status for this type\n        receiverState.notifiers[integrationType].push(integrationStatusDTO);\n      }\n    });\n  });\n  const errorsCount = Object.values(contactPointsState.receivers).reduce(\n    (prevCount: number, receiverState: ReceiverState) => prevCount + receiverState.errorCount,\n    0\n  );\n  return { ...contactPointsState, errorCount: errorsCount };\n};\n\nexport const getIntegrationType = (integrationName: string): string | undefined =>\n  parseIntegrationName(integrationName)?.type;\n\nexport async function fetchContactPointsState(alertManagerSourceName: string): Promise<ContactPointsState> {\n  try {\n    const response = await lastValueFrom(\n      getBackendSrv().fetch<ReceiversStateDTO[]>({\n        url: `/api/alertmanager/${getDatasourceAPIUid(alertManagerSourceName)}/config/api/v1/receivers`,\n        showErrorAlert: false,\n        showSuccessAlert: false,\n      })\n    );\n    return contactPointsStateDtoToModel(response.data);\n  } catch (error) {\n    return contactPointsStateDtoToModel([]);\n  }\n}\n","/** @deprecated To be deleted - use alertingApiServer API instead */\n\nimport { ContactPointsState } from 'app/types';\n\nimport { CONTACT_POINTS_STATE_INTERVAL_MS } from '../utils/constants';\n\nimport { alertingApi } from './alertingApi';\nimport { fetchContactPointsState } from './grafana';\n\nexport const receiversApi = alertingApi.injectEndpoints({\n  endpoints: (build) => ({\n    contactPointsState: build.query<ContactPointsState, { amSourceName: string }>({\n      queryFn: async ({ amSourceName }) => {\n        try {\n          const contactPointsState = await fetchContactPointsState(amSourceName);\n          return { data: contactPointsState };\n        } catch (error) {\n          return { error: error };\n        }\n      },\n    }),\n  }),\n});\n\nexport const useGetContactPointsState = (alertManagerSourceName: string) => {\n  const contactPointsStateEmpty: ContactPointsState = { receivers: {}, errorCount: 0 };\n  const { currentData: contactPointsState } = receiversApi.useContactPointsStateQuery(\n    { amSourceName: alertManagerSourceName ?? '' },\n    {\n      skip: !alertManagerSourceName,\n      pollingInterval: CONTACT_POINTS_STATE_INTERVAL_MS,\n    }\n  );\n  return contactPointsState ?? contactPointsStateEmpty;\n};\n","import { css } from '@emotion/css';\nimport { debounce, isEqual } from 'lodash';\nimport { useCallback, useEffect, useRef } from 'react';\n\nimport { Button, Field, Icon, Input, Label, Stack, Text, Tooltip, useStyles2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { ContactPointSelector } from 'app/features/alerting/unified/components/notification-policies/ContactPointSelector';\nimport { AlertmanagerAction, useAlertmanagerAbility } from 'app/features/alerting/unified/hooks/useAbilities';\nimport { ObjectMatcher, RouteWithID } from 'app/plugins/datasource/alertmanager/types';\n\nimport { useURLSearchParams } from '../../hooks/useURLSearchParams';\nimport { matcherToObjectMatcher } from '../../utils/alertmanager';\nimport {\n  normalizeMatchers,\n  parsePromQLStyleMatcherLoose,\n  parsePromQLStyleMatcherLooseSafe,\n  unquoteIfRequired,\n} from '../../utils/matchers';\n\ninterface NotificationPoliciesFilterProps {\n  onChangeMatchers: (labels: ObjectMatcher[]) => void;\n  onChangeReceiver: (receiver: string | undefined) => void;\n  matchingCount: number;\n}\n\nconst NotificationPoliciesFilter = ({\n  onChangeReceiver,\n  onChangeMatchers,\n  matchingCount,\n}: NotificationPoliciesFilterProps) => {\n  const [contactPointsSupported, canSeeContactPoints] = useAlertmanagerAbility(AlertmanagerAction.ViewContactPoint);\n  const [searchParams, setSearchParams] = useURLSearchParams();\n  const searchInputRef = useRef<HTMLInputElement | null>(null);\n  const { queryString, contactPoint } = getNotificationPoliciesFilters(searchParams);\n  const styles = useStyles2(getStyles);\n\n  const handleChangeLabels = useCallback(() => debounce(onChangeMatchers, 500), [onChangeMatchers]);\n\n  useEffect(() => {\n    onChangeReceiver(contactPoint);\n  }, [contactPoint, onChangeReceiver]);\n\n  useEffect(() => {\n    const matchers = parsePromQLStyleMatcherLooseSafe(queryString ?? '').map(matcherToObjectMatcher);\n    handleChangeLabels()(matchers);\n  }, [handleChangeLabels, queryString]);\n\n  const clearFilters = useCallback(() => {\n    if (searchInputRef.current) {\n      searchInputRef.current.value = '';\n    }\n    setSearchParams({ contactPoint: '', queryString: undefined });\n  }, [setSearchParams]);\n\n  const hasFilters = queryString || contactPoint;\n\n  let inputValid = Boolean(queryString && queryString.length > 3);\n  try {\n    if (!queryString) {\n      inputValid = true;\n    } else {\n      parsePromQLStyleMatcherLoose(queryString);\n    }\n  } catch (err) {\n    inputValid = false;\n  }\n\n  return (\n    <Stack direction=\"row\" alignItems=\"flex-end\" gap={1}>\n      <Field\n        className={styles.noBottom}\n        label={\n          <Label>\n            <Stack gap={0.5}>\n              <Trans i18nKey=\"alerting.common.search-by-matchers\">Search by matchers</Trans>\n              <Tooltip\n                content={\n                  <Trans i18nKey=\"alerting.policies.filter-description\">\n                    Filter notification policies by using a comma separated list of matchers, e.g.:\n                    <pre>severity=critical, region=EMEA</pre>\n                  </Trans>\n                }\n              >\n                <Icon name=\"info-circle\" size=\"sm\" />\n              </Tooltip>\n            </Stack>\n          </Label>\n        }\n        invalid={!inputValid}\n        error={!inputValid ? 'Query must use valid matcher syntax' : null}\n      >\n        <Input\n          ref={searchInputRef}\n          data-testid=\"search-query-input\"\n          placeholder={t('alerting.notification-policies-filter.search-query-input-placeholder-search', 'Search')}\n          width={46}\n          prefix={<Icon name=\"search\" />}\n          onChange={(event) => {\n            setSearchParams({ queryString: event.currentTarget.value });\n          }}\n          defaultValue={queryString}\n        />\n      </Field>\n      {contactPointsSupported && canSeeContactPoints && (\n        <Field\n          label={t('alerting.notification-policies-filter.label-search-by-contact-point', 'Search by contact point')}\n          style={{ marginBottom: 0 }}\n        >\n          <ContactPointSelector\n            selectProps={{\n              id: 'receiver',\n              'aria-label': 'Search by contact point',\n              onChange: (option) => {\n                setSearchParams({ contactPoint: option?.value?.name });\n              },\n              width: 28,\n              isClearable: true,\n            }}\n            selectedContactPointName={searchParams.get('contactPoint') ?? undefined}\n          />\n        </Field>\n      )}\n      {hasFilters && (\n        <Stack alignItems=\"center\">\n          <Button variant=\"secondary\" icon=\"times\" onClick={clearFilters}>\n            <Trans i18nKey=\"alerting.common.clear-filters\">Clear filters</Trans>\n          </Button>\n          <Text variant=\"bodySmall\" color=\"secondary\">\n            {matchingCount === 0 && 'No policies matching filters.'}\n            {matchingCount === 1 && `${matchingCount} policy matches the filters.`}\n            {matchingCount > 1 && `${matchingCount} policies match the filters.`}\n          </Text>\n        </Stack>\n      )}\n    </Stack>\n  );\n};\n\n/**\n * Find a list of route IDs that match given input filters\n */\ntype FilterPredicate = (route: RouteWithID) => boolean;\n\n/**\n * Find routes int the tree that match the given predicate function\n * @param routeTree the route tree to search\n * @param predicateFn the predicate function to match routes\n * @returns\n * - matches: list of routes that match the predicate\n * - matchingRouteIdsWithPath: map with routeids that are part of the path of a matching route\n *  key is the route id, value is an array of route ids that are part of its path\n */\nexport function findRoutesMatchingPredicate(\n  routeTree: RouteWithID,\n  predicateFn: FilterPredicate\n): Map<RouteWithID, RouteWithID[]> {\n  // map with routids that are part of the path of a matching route\n  // key is the route id, value is an array of route ids that are part of the path\n  const matchingRouteIdsWithPath = new Map<RouteWithID, RouteWithID[]>();\n\n  function findMatch(route: RouteWithID, path: RouteWithID[]) {\n    const newPath = [...path, route];\n\n    if (predicateFn(route)) {\n      // if the route matches the predicate, we need to add the path to the map of matching routes\n      const previousPath = matchingRouteIdsWithPath.get(route) ?? [];\n      // add the current route id to the map with its path\n      matchingRouteIdsWithPath.set(route, [...previousPath, ...newPath]);\n    }\n\n    // if the route has subroutes, call findMatch recursively\n    route.routes?.forEach((route) => findMatch(route, newPath));\n  }\n\n  findMatch(routeTree, []);\n\n  return matchingRouteIdsWithPath;\n}\n\nexport function findRoutesByMatchers(route: RouteWithID, labelMatchersFilter: ObjectMatcher[]): boolean {\n  const filters = labelMatchersFilter.map(unquoteMatchersIfRequired);\n  const routeMatchers = normalizeMatchers(route).map(unquoteMatchersIfRequired);\n  return filters.every((filter) => routeMatchers.some((matcher) => isEqual(filter, matcher)));\n}\n\n/**\n * This function is mostly used for decoding matchers like \"test\"=\"test\" into test=test to remove quotes when they're not needed.\n * This mimicks the behaviour in Alertmanager where it decodes the label matchers in the same way and makes searching for policies\n * easier in case the label keys or values are quoted when they shouldn't really be.\n */\nconst unquoteMatchersIfRequired = ([key, operator, value]: ObjectMatcher): ObjectMatcher => {\n  return [unquoteIfRequired(key), operator, unquoteIfRequired(value)];\n};\n\nconst getNotificationPoliciesFilters = (searchParams: URLSearchParams) => ({\n  queryString: searchParams.get('queryString') ?? undefined,\n  contactPoint: searchParams.get('contactPoint') ?? undefined,\n});\n\nconst getStyles = () => ({\n  noBottom: css({\n    marginBottom: 0,\n  }),\n});\n\nexport { NotificationPoliciesFilter };\n","import pluralize from 'pluralize';\nimport { Fragment } from 'react';\nimport * as React from 'react';\n\nimport { Badge, Stack } from '@grafana/ui';\n\ninterface Props {\n  active?: number;\n  suppressed?: number;\n  unprocessed?: number;\n}\n\nexport const AlertGroupsSummary = ({ active = 0, suppressed = 0, unprocessed = 0 }: Props) => {\n  const statsComponents: React.ReactNode[] = [];\n  const total = active + suppressed + unprocessed;\n\n  if (active) {\n    statsComponents.push(<Badge color=\"red\" key=\"firing\" text={`${active} firing`} />);\n  }\n\n  if (suppressed) {\n    statsComponents.push(<Badge color=\"blue\" key=\"suppressed\" text={`${suppressed} suppressed`} />);\n  }\n\n  if (unprocessed) {\n    statsComponents.push(<Badge color=\"orange\" key=\"unprocessed\" text={`${unprocessed} unprocessed`} />);\n  }\n\n  // if we only have one category it's not really necessary to repeat the total\n  if (statsComponents.length > 1) {\n    statsComponents.unshift(\n      <Fragment key=\"total\">\n        {total} {pluralize('instance', total)}\n      </Fragment>\n    );\n  }\n\n  const hasStats = Boolean(statsComponents.length);\n\n  return hasStats ? <Stack gap={0.5}>{statsComponents}</Stack> : null;\n};\n","import { ControllerRenderProps } from 'react-hook-form';\n\nimport { SelectableValue } from '@grafana/data';\nimport { ContactPointWithMetadata } from 'app/features/alerting/unified/components/contact-points/utils';\n\nexport const handleContactPointSelect = (\n  value: SelectableValue<ContactPointWithMetadata>,\n  onChange: ControllerRenderProps['onChange']\n) => {\n  if (value === null) {\n    return onChange(null);\n  }\n\n  if (!value) {\n    return onChange('');\n  }\n\n  return onChange(value.value?.name);\n};\n","import { ReactNode, useState } from 'react';\nimport { Controller, useForm } from 'react-hook-form';\n\nimport { Collapse, Field, Link, MultiSelect, useStyles2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { ContactPointSelector } from 'app/features/alerting/unified/components/notification-policies/ContactPointSelector';\nimport { handleContactPointSelect } from 'app/features/alerting/unified/components/notification-policies/utils';\nimport { RouteWithID } from 'app/plugins/datasource/alertmanager/types';\n\nimport { FormAmRoute } from '../../types/amroutes';\nimport {\n  amRouteToFormAmRoute,\n  commonGroupByOptions,\n  mapMultiSelectValueToStrings,\n  promDurationValidator,\n  repeatIntervalValidator,\n  stringToSelectableValue,\n  stringsToSelectableValues,\n} from '../../utils/amroutes';\nimport { makeAMLink } from '../../utils/misc';\n\nimport { PromDurationInput } from './PromDurationInput';\nimport { getFormStyles } from './formStyles';\nimport { TIMING_OPTIONS_DEFAULTS } from './timingOptions';\n\nexport interface AmRootRouteFormProps {\n  alertManagerSourceName: string;\n  actionButtons: ReactNode;\n  onSubmit: (route: Partial<FormAmRoute>) => void;\n  route: RouteWithID;\n}\n\nexport const AmRootRouteForm = ({ actionButtons, alertManagerSourceName, onSubmit, route }: AmRootRouteFormProps) => {\n  const styles = useStyles2(getFormStyles);\n  const [isTimingOptionsExpanded, setIsTimingOptionsExpanded] = useState(false);\n  const [groupByOptions, setGroupByOptions] = useState(stringsToSelectableValues(route.group_by));\n\n  const defaultValues = amRouteToFormAmRoute(route);\n  const {\n    handleSubmit,\n    register,\n    control,\n    formState: { errors },\n    setValue,\n    getValues,\n  } = useForm<FormAmRoute>({\n    defaultValues: {\n      ...defaultValues,\n      overrideTimings: true,\n      overrideGrouping: true,\n    },\n  });\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Field\n        label={t('alerting.am-root-route-form.label-default-contact-point', 'Default contact point')}\n        invalid={Boolean(errors.receiver) ? true : undefined}\n        error={errors.receiver?.message}\n      >\n        <div className={styles.container} data-testid=\"am-receiver-select\">\n          <Controller\n            render={({ field: { onChange, ref, value, ...field } }) => (\n              <ContactPointSelector\n                selectProps={{\n                  ...field,\n                  onChange: (changeValue) => handleContactPointSelect(changeValue, onChange),\n                }}\n                selectedContactPointName={value}\n              />\n            )}\n            control={control}\n            name=\"receiver\"\n            rules={{ required: { value: true, message: 'Required.' } }}\n          />\n          <span>\n            <Trans i18nKey=\"alerting.am-root-route-form.or\">or</Trans>\n          </span>\n          <Link\n            className={styles.linkText}\n            href={makeAMLink('/alerting/notifications/receivers/new', alertManagerSourceName)}\n          >\n            <Trans i18nKey=\"alerting.am-root-route-form.create-a-contact-point\">Create a contact point</Trans>\n          </Link>\n        </div>\n      </Field>\n      <Field\n        label={t('alerting.am-root-route-form.am-group-select-label-group-by', 'Group by')}\n        description=\"Combine multiple alerts into a single notification by grouping them by the same label values.\"\n        data-testid=\"am-group-select\"\n      >\n        <Controller\n          render={({ field: { onChange, ref, ...field } }) => (\n            <MultiSelect\n              aria-label={t('alerting.am-root-route-form.aria-label-group-by', 'Group by')}\n              {...field}\n              allowCustomValue\n              className={styles.input}\n              onCreateOption={(opt: string) => {\n                setGroupByOptions((opts) => [...opts, stringToSelectableValue(opt)]);\n                setValue('groupBy', [...(field.value || []), opt]);\n              }}\n              onChange={(value) => onChange(mapMultiSelectValueToStrings(value))}\n              options={[...commonGroupByOptions, ...groupByOptions]}\n            />\n          )}\n          control={control}\n          name=\"groupBy\"\n        />\n      </Field>\n      <Collapse\n        collapsible\n        className={styles.collapse}\n        isOpen={isTimingOptionsExpanded}\n        label={t('alerting.am-root-route-form.label-timing-options', 'Timing options')}\n        onToggle={setIsTimingOptionsExpanded}\n      >\n        <div className={styles.timingFormContainer}>\n          <Field\n            label={t('alerting.am-root-route-form.am-group-wait-label-group-wait', 'Group wait')}\n            description=\"The waiting time before sending the first notification for a new group of alerts. Default 30 seconds.\"\n            invalid={!!errors.groupWaitValue}\n            error={errors.groupWaitValue?.message}\n            data-testid=\"am-group-wait\"\n          >\n            <PromDurationInput\n              {...register('groupWaitValue', { validate: promDurationValidator })}\n              placeholder={TIMING_OPTIONS_DEFAULTS.group_wait}\n              className={styles.promDurationInput}\n              aria-label={t('alerting.am-root-route-form.aria-label-group-wait', 'Group wait')}\n            />\n          </Field>\n          <Field\n            label={t('alerting.am-root-route-form.am-group-interval-label-group-interval', 'Group interval')}\n            description=\"The wait time before sending a notification about changes in the alert group after the first notification has been sent. Default is 5 minutes.\"\n            invalid={!!errors.groupIntervalValue}\n            error={errors.groupIntervalValue?.message}\n            data-testid=\"am-group-interval\"\n          >\n            <PromDurationInput\n              {...register('groupIntervalValue', { validate: promDurationValidator })}\n              placeholder={TIMING_OPTIONS_DEFAULTS.group_interval}\n              className={styles.promDurationInput}\n              aria-label={t('alerting.am-root-route-form.aria-label-group-interval', 'Group interval')}\n            />\n          </Field>\n          <Field\n            label={t('alerting.am-root-route-form.am-repeat-interval-label-repeat-interval', 'Repeat interval')}\n            description=\"The wait time before resending a notification that has already been sent successfully. Default is 4 hours. Should be a multiple of Group interval.\"\n            invalid={!!errors.repeatIntervalValue}\n            error={errors.repeatIntervalValue?.message}\n            data-testid=\"am-repeat-interval\"\n          >\n            <PromDurationInput\n              {...register('repeatIntervalValue', {\n                validate: (value: string) => {\n                  const groupInterval = getValues('groupIntervalValue');\n                  return repeatIntervalValidator(value, groupInterval);\n                },\n              })}\n              placeholder={TIMING_OPTIONS_DEFAULTS.repeat_interval}\n              className={styles.promDurationInput}\n              aria-label={t('alerting.am-root-route-form.aria-label-repeat-interval', 'Repeat interval')}\n            />\n          </Field>\n        </div>\n      </Collapse>\n      <div className={styles.container}>{actionButtons}</div>\n    </form>\n  );\n};\n","import { css } from '@emotion/css';\nimport { ReactNode, useState } from 'react';\nimport { Controller, useFieldArray, useForm } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport {\n  Badge,\n  Button,\n  Field,\n  FieldValidationMessage,\n  IconButton,\n  Input,\n  MultiSelect,\n  Select,\n  Stack,\n  Switch,\n  useStyles2,\n} from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport MuteTimingsSelector from 'app/features/alerting/unified/components/alertmanager-entities/MuteTimingsSelector';\nimport { ContactPointSelector } from 'app/features/alerting/unified/components/notification-policies/ContactPointSelector';\nimport { handleContactPointSelect } from 'app/features/alerting/unified/components/notification-policies/utils';\nimport { AlertmanagerAction, useAlertmanagerAbility } from 'app/features/alerting/unified/hooks/useAbilities';\nimport { MatcherOperator, RouteWithID } from 'app/plugins/datasource/alertmanager/types';\n\nimport { useAlertmanager } from '../../state/AlertmanagerContext';\nimport { FormAmRoute } from '../../types/amroutes';\nimport { matcherFieldOptions } from '../../utils/alertmanager';\nimport {\n  amRouteToFormAmRoute,\n  commonGroupByOptions,\n  emptyArrayFieldMatcher,\n  mapMultiSelectValueToStrings,\n  promDurationValidator,\n  repeatIntervalValidator,\n  stringToSelectableValue,\n  stringsToSelectableValues,\n} from '../../utils/amroutes';\n\nimport { PromDurationInput } from './PromDurationInput';\nimport { getFormStyles } from './formStyles';\nimport { routeTimingsFields } from './routeTimingsFields';\n\nexport interface AmRoutesExpandedFormProps {\n  route?: RouteWithID;\n  onSubmit: (route: Partial<FormAmRoute>) => void;\n  actionButtons: ReactNode;\n  defaults?: Partial<FormAmRoute>;\n}\n\nexport const AmRoutesExpandedForm = ({ actionButtons, route, onSubmit, defaults }: AmRoutesExpandedFormProps) => {\n  const styles = useStyles2(getStyles);\n  const formStyles = useStyles2(getFormStyles);\n  const { selectedAlertmanager } = useAlertmanager();\n  const [, canSeeMuteTimings] = useAlertmanagerAbility(AlertmanagerAction.ViewMuteTiming);\n  const [groupByOptions, setGroupByOptions] = useState(stringsToSelectableValues(route?.group_by));\n  const emptyMatcher = [{ name: '', operator: MatcherOperator.equal, value: '' }];\n\n  const formAmRoute = {\n    ...amRouteToFormAmRoute(route),\n    ...defaults,\n  };\n\n  const defaultValues: Omit<FormAmRoute, 'routes'> = {\n    ...formAmRoute,\n    // if we're adding a new route, show at least one empty matcher\n    object_matchers: route ? formAmRoute.object_matchers : emptyMatcher,\n  };\n\n  const {\n    handleSubmit,\n    control,\n    register,\n    formState: { errors },\n    setValue,\n    watch,\n    getValues,\n  } = useForm<FormAmRoute>({\n    defaultValues,\n  });\n  const { fields, append, remove } = useFieldArray({\n    control,\n    name: 'object_matchers',\n  });\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input type=\"hidden\" {...register('id')} />\n      <Stack direction=\"column\" alignItems=\"flex-start\">\n        <div>\n          <Trans i18nKey=\"alerting.am-routes-expanded-form.matching-labels\">Matching labels</Trans>\n        </div>\n        {fields.length === 0 && (\n          <Badge\n            color=\"orange\"\n            className={styles.noMatchersWarning}\n            icon=\"exclamation-triangle\"\n            text=\"If no matchers are specified, this notification policy will handle all alert instances.\"\n          />\n        )}\n        {fields.length > 0 && (\n          <div className={styles.matchersContainer}>\n            {fields.map((field, index) => {\n              return (\n                <Stack direction=\"row\" key={field.id} alignItems=\"center\">\n                  <Field\n                    label={t('alerting.am-routes-expanded-form.label-label', 'Label')}\n                    invalid={!!errors.object_matchers?.[index]?.name}\n                    error={errors.object_matchers?.[index]?.name?.message}\n                  >\n                    <Input\n                      {...register(`object_matchers.${index}.name`, { required: 'Field is required' })}\n                      defaultValue={field.name}\n                      placeholder={t('alerting.am-routes-expanded-form.placeholder-label', 'label')}\n                      autoFocus\n                    />\n                  </Field>\n                  <Field label={t('alerting.am-routes-expanded-form.label-operator', 'Operator')}>\n                    <Controller\n                      render={({ field: { onChange, ref, ...field } }) => (\n                        <Select\n                          {...field}\n                          className={styles.matchersOperator}\n                          onChange={(value) => onChange(value?.value)}\n                          options={matcherFieldOptions}\n                          aria-label={t('alerting.am-routes-expanded-form.aria-label-operator', 'Operator')}\n                        />\n                      )}\n                      defaultValue={field.operator}\n                      control={control}\n                      name={`object_matchers.${index}.operator`}\n                      rules={{ required: { value: true, message: 'Required.' } }}\n                    />\n                  </Field>\n                  <Field\n                    label={t('alerting.am-routes-expanded-form.label-value', 'Value')}\n                    invalid={!!errors.object_matchers?.[index]?.value}\n                    error={errors.object_matchers?.[index]?.value?.message}\n                  >\n                    <Input\n                      {...register(`object_matchers.${index}.value`)}\n                      defaultValue={field.value}\n                      placeholder={t('alerting.am-routes-expanded-form.placeholder-value', 'value')}\n                    />\n                  </Field>\n                  <IconButton\n                    tooltip={t('alerting.am-routes-expanded-form.tooltip-remove-matcher', 'Remove matcher')}\n                    name={'trash-alt'}\n                    onClick={() => remove(index)}\n                  >\n                    <Trans i18nKey=\"alerting.am-routes-expanded-form.remove\">Remove</Trans>\n                  </IconButton>\n                </Stack>\n              );\n            })}\n          </div>\n        )}\n        <Button\n          className={styles.addMatcherBtn}\n          icon=\"plus\"\n          onClick={() => append(emptyArrayFieldMatcher)}\n          variant=\"secondary\"\n          type=\"button\"\n        >\n          <Trans i18nKey=\"alerting.am-routes-expanded-form.add-matcher\">Add matcher</Trans>\n        </Button>\n      </Stack>\n\n      <Field label={t('alerting.am-routes-expanded-form.label-contact-point', 'Contact point')}>\n        <Controller\n          render={({ field: { onChange, ref, value, ...field } }) => (\n            <ContactPointSelector\n              selectProps={{\n                ...field,\n                className: formStyles.input,\n                onChange: (value) => handleContactPointSelect(value, onChange),\n                isClearable: true,\n              }}\n              selectedContactPointName={value}\n            />\n          )}\n          control={control}\n          name=\"receiver\"\n        />\n      </Field>\n      <Field\n        label={t(\n          'alerting.am-routes-expanded-form.label-continue-matching-subsequent-sibling-nodes',\n          'Continue matching subsequent sibling nodes'\n        )}\n      >\n        <Switch id=\"continue-toggle\" {...register('continue')} />\n      </Field>\n      <Field label={t('alerting.am-routes-expanded-form.label-override-grouping', 'Override grouping')}>\n        <Switch id=\"override-grouping-toggle\" {...register('overrideGrouping')} />\n      </Field>\n      {watch().overrideGrouping && (\n        <Field\n          label={t('alerting.am-routes-expanded-form.label-group-by', 'Group by')}\n          description=\"Combine multiple alerts into a single notification by grouping them by the same label values. If empty, it is inherited from the parent policy.\"\n        >\n          <Controller\n            rules={{\n              validate: (value) => {\n                if (!value || value.length === 0) {\n                  return 'At least one group by option is required.';\n                }\n                return true;\n              },\n            }}\n            render={({ field: { onChange, ref, ...field }, fieldState: { error } }) => (\n              <>\n                <MultiSelect\n                  aria-label={t('alerting.am-routes-expanded-form.aria-label-group-by', 'Group by')}\n                  {...field}\n                  invalid={Boolean(error)}\n                  allowCustomValue\n                  className={formStyles.input}\n                  onCreateOption={(opt: string) => {\n                    setGroupByOptions((opts) => [...opts, stringToSelectableValue(opt)]);\n                    setValue('groupBy', [...(field.value || []), opt]);\n                  }}\n                  onChange={(value) => onChange(mapMultiSelectValueToStrings(value))}\n                  options={[...commonGroupByOptions, ...groupByOptions]}\n                />\n                {error && <FieldValidationMessage>{error.message}</FieldValidationMessage>}\n              </>\n            )}\n            control={control}\n            name=\"groupBy\"\n          />\n        </Field>\n      )}\n      <Field label={t('alerting.am-routes-expanded-form.label-override-general-timings', 'Override general timings')}>\n        <Switch id=\"override-timings-toggle\" {...register('overrideTimings')} />\n      </Field>\n      {watch().overrideTimings && (\n        <>\n          <Field\n            label={routeTimingsFields.groupWait.label}\n            description={routeTimingsFields.groupWait.description}\n            invalid={!!errors.groupWaitValue}\n            error={errors.groupWaitValue?.message}\n          >\n            <PromDurationInput\n              {...register('groupWaitValue', { validate: promDurationValidator })}\n              aria-label={routeTimingsFields.groupWait.ariaLabel}\n              className={formStyles.promDurationInput}\n            />\n          </Field>\n          <Field\n            label={routeTimingsFields.groupInterval.label}\n            description={routeTimingsFields.groupInterval.description}\n            invalid={!!errors.groupIntervalValue}\n            error={errors.groupIntervalValue?.message}\n          >\n            <PromDurationInput\n              {...register('groupIntervalValue', { validate: promDurationValidator })}\n              aria-label={routeTimingsFields.groupInterval.ariaLabel}\n              className={formStyles.promDurationInput}\n            />\n          </Field>\n          <Field\n            label={routeTimingsFields.repeatInterval.label}\n            description={routeTimingsFields.repeatInterval.description}\n            invalid={!!errors.repeatIntervalValue}\n            error={errors.repeatIntervalValue?.message}\n          >\n            <PromDurationInput\n              {...register('repeatIntervalValue', {\n                validate: (value = '') => {\n                  const groupInterval = getValues('groupIntervalValue');\n                  return repeatIntervalValidator(value, groupInterval);\n                },\n              })}\n              aria-label={routeTimingsFields.repeatInterval.ariaLabel}\n              className={formStyles.promDurationInput}\n            />\n          </Field>\n        </>\n      )}\n      <Field\n        label={t('alerting.am-routes-expanded-form.am-mute-timing-select-label-mute-timings', 'Mute timings')}\n        data-testid=\"am-mute-timing-select\"\n        description={t(\n          'alerting.am-routes-expanded-form.am-mute-timing-select-description-add-mute-timing-to-policy',\n          'Add mute timing to policy'\n        )}\n        invalid={!!errors.muteTimeIntervals}\n      >\n        <Controller\n          render={({ field: { onChange, ref, ...field } }) => (\n            <MuteTimingsSelector\n              alertmanager={selectedAlertmanager!}\n              selectProps={{\n                ...field,\n                disabled: !canSeeMuteTimings,\n                onChange: (value) => onChange(mapMultiSelectValueToStrings(value)),\n              }}\n            />\n          )}\n          control={control}\n          name=\"muteTimeIntervals\"\n        />\n      </Field>\n      {actionButtons}\n    </form>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const commonSpacing = theme.spacing(3.5);\n\n  return {\n    addMatcherBtn: css({\n      marginBottom: commonSpacing,\n    }),\n    matchersContainer: css({\n      backgroundColor: theme.colors.background.secondary,\n      padding: `${theme.spacing(1.5)} ${theme.spacing(2)}`,\n      paddingBottom: 0,\n      width: 'fit-content',\n    }),\n    matchersOperator: css({\n      minWidth: '120px',\n    }),\n    noMatchersWarning: css({\n      padding: `${theme.spacing(1)} ${theme.spacing(2)}`,\n      marginBottom: theme.spacing(1),\n    }),\n  };\n};\n","import { Alert } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { stringifyErrorLike } from '../../utils/misc';\n\nexport const NotificationPoliciesErrorAlert = ({ error }: { error: unknown }) => {\n  const title = t('alerting.policies.update-errors.title', 'Error saving notification policy');\n\n  const errMessage = stringifyErrorLike(error);\n  return (\n    <Alert title={title} severity=\"error\">\n      <div>\n        <Trans i18nKey=\"alerting.policies.update-errors.fallback\">\n          Something went wrong when updating your notification policies.\n        </Trans>\n      </div>\n      <div>\n        {errMessage || (\n          <Trans i18nKey=\"alerting.policies.update-errors.error-code\" values={{ error }}>\n            Error message: \"{{ error }}\"\n          </Trans>\n        )}\n      </div>\n\n      <Trans i18nKey=\"alerting.policies.update-errors.suffix\">Please refresh the page and try again.</Trans>\n    </Alert>\n  );\n};\n","import { groupBy } from 'lodash';\nimport { FC, useCallback, useMemo, useState } from 'react';\n\nimport { Button, Icon, Modal, ModalProps, Spinner, Stack } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { AlertState, AlertmanagerGroup, ObjectMatcher, RouteWithID } from 'app/plugins/datasource/alertmanager/types';\n\nimport { FormAmRoute } from '../../types/amroutes';\nimport { MatcherFormatter } from '../../utils/matchers';\nimport { InsertPosition } from '../../utils/routeTree';\nimport { AlertGroup } from '../alert-groups/AlertGroup';\n\nimport { AlertGroupsSummary } from './AlertGroupsSummary';\nimport { AmRootRouteForm } from './EditDefaultPolicyForm';\nimport { AmRoutesExpandedForm } from './EditNotificationPolicyForm';\nimport { Matchers } from './Matchers';\nimport { NotificationPoliciesErrorAlert } from './PolicyUpdateErrorAlert';\n\ntype ModalHook<T = undefined> = [JSX.Element, (item: T) => void, () => void];\ntype AddModalHook<T = undefined> = [JSX.Element, (item: T, position: InsertPosition) => void, () => void];\ntype EditModalHook = [JSX.Element, (item: RouteWithID, isDefaultRoute?: boolean) => void, () => void];\nconst useAddPolicyModal = (\n  handleAdd: (route: Partial<FormAmRoute>, referenceRoute: RouteWithID, position: InsertPosition) => Promise<void>,\n  loading: boolean\n): AddModalHook<RouteWithID> => {\n  const [showModal, setShowModal] = useState(false);\n  const [insertPosition, setInsertPosition] = useState<InsertPosition | undefined>(undefined);\n  const [referenceRoute, setReferenceRoute] = useState<RouteWithID>();\n\n  const handleDismiss = useCallback(() => {\n    setReferenceRoute(undefined);\n    setInsertPosition(undefined);\n    setError(undefined);\n    setShowModal(false);\n  }, []);\n\n  const handleShow = useCallback((referenceRoute: RouteWithID, position: InsertPosition) => {\n    setReferenceRoute(referenceRoute);\n    setInsertPosition(position);\n    setShowModal(true);\n  }, []);\n\n  const [error, setError] = useState<Error | undefined>(undefined);\n\n  const modalElement = useMemo(\n    () =>\n      loading ? (\n        <UpdatingModal isOpen={showModal} />\n      ) : (\n        <Modal\n          isOpen={showModal}\n          onDismiss={handleDismiss}\n          closeOnBackdropClick={true}\n          closeOnEscape={true}\n          title={t(\n            'alerting.use-add-policy-modal.modal-element.title-add-notification-policy',\n            'Add notification policy'\n          )}\n        >\n          {error && <NotificationPoliciesErrorAlert error={error} />}\n          <AmRoutesExpandedForm\n            defaults={{\n              groupBy: referenceRoute?.group_by,\n            }}\n            onSubmit={(newRoute) => {\n              if (referenceRoute && insertPosition) {\n                handleAdd(newRoute, referenceRoute, insertPosition).catch(setError);\n              }\n            }}\n            actionButtons={\n              <Modal.ButtonRow>\n                <Button type=\"button\" variant=\"secondary\" onClick={handleDismiss} fill=\"outline\">\n                  <Trans i18nKey=\"alerting.common.cancel\">Cancel</Trans>\n                </Button>\n                <Button type=\"submit\">\n                  <Trans i18nKey=\"alerting.policies.save-policy\">Save policy</Trans>\n                </Button>\n              </Modal.ButtonRow>\n            }\n          />\n        </Modal>\n      ),\n    [error, handleAdd, handleDismiss, insertPosition, loading, referenceRoute, showModal, setError]\n  );\n\n  return [modalElement, handleShow, handleDismiss];\n};\n\nconst useEditPolicyModal = (\n  alertManagerSourceName: string,\n  handleUpdate: (route: Partial<FormAmRoute>) => Promise<void>,\n  loading: boolean\n): EditModalHook => {\n  const [showModal, setShowModal] = useState(false);\n  const [isDefaultPolicy, setIsDefaultPolicy] = useState(false);\n  const [route, setRoute] = useState<RouteWithID>();\n\n  const [error, setError] = useState<Error | undefined>(undefined);\n\n  const handleDismiss = useCallback(() => {\n    setRoute(undefined);\n    setShowModal(false);\n    setError(undefined);\n  }, []);\n\n  const handleShow = useCallback((route: RouteWithID, isDefaultPolicy?: boolean) => {\n    setIsDefaultPolicy(isDefaultPolicy ?? false);\n    setRoute(route);\n    setShowModal(true);\n  }, []);\n\n  const modalElement = useMemo(\n    () =>\n      loading ? (\n        <UpdatingModal isOpen={showModal} />\n      ) : (\n        <Modal\n          isOpen={showModal}\n          onDismiss={handleDismiss}\n          closeOnBackdropClick={true}\n          closeOnEscape={true}\n          title={t(\n            'alerting.use-edit-policy-modal.modal-element.title-edit-notification-policy',\n            'Edit notification policy'\n          )}\n        >\n          {error && <NotificationPoliciesErrorAlert error={error} />}\n          {isDefaultPolicy && route && (\n            <AmRootRouteForm\n              // TODO *sigh* this alertmanagersourcename should come from context or something\n              // passing it down all the way here is a code smell\n              alertManagerSourceName={alertManagerSourceName}\n              onSubmit={(values) => handleUpdate(values).catch(setError)}\n              route={route}\n              actionButtons={\n                <Modal.ButtonRow>\n                  <Button type=\"button\" variant=\"secondary\" onClick={handleDismiss} fill=\"outline\">\n                    <Trans i18nKey=\"alerting.common.cancel\">Cancel</Trans>\n                  </Button>\n                  <Button type=\"submit\">\n                    <Trans i18nKey=\"alerting.policies.default-policy.update\">Update default policy</Trans>\n                  </Button>\n                </Modal.ButtonRow>\n              }\n            />\n          )}\n          {!isDefaultPolicy && (\n            <AmRoutesExpandedForm\n              route={route}\n              onSubmit={(values) => handleUpdate(values).catch(setError)}\n              actionButtons={\n                <Modal.ButtonRow>\n                  <Button type=\"button\" variant=\"secondary\" onClick={handleDismiss} fill=\"outline\">\n                    <Trans i18nKey=\"alerting.common.cancel\">Cancel</Trans>\n                  </Button>\n                  <Button type=\"submit\">\n                    <Trans i18nKey=\"alerting.policies.update.update-policy\">Update policy</Trans>\n                  </Button>\n                </Modal.ButtonRow>\n              }\n            />\n          )}\n        </Modal>\n      ),\n    [loading, showModal, handleDismiss, error, isDefaultPolicy, route, alertManagerSourceName, handleUpdate, setError]\n  );\n\n  return [modalElement, handleShow, handleDismiss];\n};\n\nconst useDeletePolicyModal = (\n  handleDelete: (route: RouteWithID) => Promise<void>,\n  loading: boolean\n): ModalHook<RouteWithID> => {\n  const [showModal, setShowModal] = useState(false);\n  const [route, setRoute] = useState<RouteWithID>();\n  const [error, setError] = useState<Error | undefined>(undefined);\n\n  const handleDismiss = useCallback(() => {\n    setRoute(undefined);\n    setShowModal(false);\n    setError(undefined);\n  }, [setRoute]);\n\n  const handleShow = useCallback((route: RouteWithID) => {\n    setRoute(route);\n    setShowModal(true);\n  }, []);\n\n  const modalElement = useMemo(\n    () =>\n      loading ? (\n        <UpdatingModal isOpen={showModal} />\n      ) : (\n        <Modal\n          isOpen={showModal}\n          onDismiss={handleDismiss}\n          closeOnBackdropClick={true}\n          closeOnEscape={true}\n          title={t(\n            'alerting.use-delete-policy-modal.modal-element.title-delete-notification-policy',\n            'Delete notification policy'\n          )}\n        >\n          {error && <NotificationPoliciesErrorAlert error={error} />}\n          <Trans i18nKey=\"alerting.policies.delete.warning-1\">\n            Deleting this notification policy will permanently remove it.\n          </Trans>{' '}\n          <Trans i18nKey=\"alerting.policies.delete.warning-2\">Are you sure you want to delete this policy?</Trans>\n          <Modal.ButtonRow>\n            <Button type=\"button\" variant=\"destructive\" onClick={() => route && handleDelete(route).catch(setError)}>\n              <Trans i18nKey=\"alerting.policies.delete.confirm\">Yes, delete policy</Trans>\n            </Button>\n            <Button type=\"button\" variant=\"secondary\" onClick={handleDismiss}>\n              <Trans i18nKey=\"alerting.common.cancel\">Cancel</Trans>\n            </Button>\n          </Modal.ButtonRow>\n        </Modal>\n      ),\n    [handleDismiss, loading, showModal, error, route, handleDelete]\n  );\n\n  return [modalElement, handleShow, handleDismiss];\n};\n\nconst useAlertGroupsModal = (\n  alertManagerSourceName: string\n): [JSX.Element, (alertGroups: AlertmanagerGroup[], matchers?: ObjectMatcher[]) => void, () => void] => {\n  const [showModal, setShowModal] = useState(false);\n  const [alertGroups, setAlertGroups] = useState<AlertmanagerGroup[]>([]);\n  const [matchers, setMatchers] = useState<ObjectMatcher[]>([]);\n  const [formatter, setFormatter] = useState<MatcherFormatter>('default');\n\n  const handleDismiss = useCallback(() => {\n    setShowModal(false);\n    setAlertGroups([]);\n    setMatchers([]);\n  }, []);\n\n  const handleShow = useCallback(\n    (alertGroups: AlertmanagerGroup[], matchers?: ObjectMatcher[], formatter?: MatcherFormatter) => {\n      setAlertGroups(alertGroups);\n      if (matchers) {\n        setMatchers(matchers);\n      }\n      if (formatter) {\n        setFormatter(formatter);\n      }\n      setShowModal(true);\n    },\n    []\n  );\n\n  const instancesByState = useMemo(() => {\n    const instances = alertGroups.flatMap((group) => group.alerts);\n    return groupBy(instances, (instance) => instance.status.state);\n  }, [alertGroups]);\n\n  const modalElement = useMemo(\n    () => (\n      <Modal\n        isOpen={showModal}\n        onDismiss={handleDismiss}\n        closeOnBackdropClick={true}\n        closeOnEscape={true}\n        title={\n          <Stack direction=\"row\" alignItems=\"center\" gap={1} wrap={'wrap'}>\n            <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n              <Icon name=\"x\" /> <Trans i18nKey=\"alerting.policies.matchers\">Matchers</Trans>\n            </Stack>\n            <Matchers matchers={matchers} formatter={formatter} />\n          </Stack>\n        }\n      >\n        <Stack direction=\"column\">\n          <AlertGroupsSummary\n            active={instancesByState[AlertState.Active]?.length}\n            suppressed={instancesByState[AlertState.Suppressed]?.length}\n            unprocessed={instancesByState[AlertState.Unprocessed]?.length}\n          />\n          <div>\n            {alertGroups.map((group, index) => (\n              <AlertGroup key={index} alertManagerSourceName={alertManagerSourceName} group={group} />\n            ))}\n          </div>\n        </Stack>\n        <Modal.ButtonRow>\n          <Button type=\"button\" variant=\"secondary\" onClick={handleDismiss}>\n            <Trans i18nKey=\"alerting.common.cancel\">Cancel</Trans>\n          </Button>\n        </Modal.ButtonRow>\n      </Modal>\n    ),\n    [alertGroups, handleDismiss, instancesByState, matchers, formatter, showModal, alertManagerSourceName]\n  );\n\n  return [modalElement, handleShow, handleDismiss];\n};\n\nconst UpdatingModal: FC<Pick<ModalProps, 'isOpen'>> = ({ isOpen }) => (\n  <Modal\n    isOpen={isOpen}\n    onDismiss={() => {}}\n    closeOnBackdropClick={false}\n    closeOnEscape={false}\n    title={\n      <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n        <Trans i18nKey=\"alerting.policies.update.updating\">Updating...</Trans> <Spinner inline />\n      </Stack>\n    }\n  >\n    <Trans i18nKey=\"alerting.policies.update.please-wait\">\n      Please wait while we update your notification policies.\n    </Trans>\n  </Modal>\n);\n\nexport { useAddPolicyModal, useAlertGroupsModal, useDeletePolicyModal, useEditPolicyModal };\n","import { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { ExportFormats, allGrafanaExportProviders } from './providers';\ninterface GrafanaPoliciesPreviewProps {\n  exportFormat: ExportFormats;\n  onClose: () => void;\n}\n\nconst GrafanaPoliciesExporterPreview = ({ exportFormat, onClose }: GrafanaPoliciesPreviewProps) => {\n  const { currentData: policiesDefinition = '', isFetching } = alertRuleApi.useExportPoliciesQuery({\n    format: exportFormat,\n  });\n\n  const downloadFileName = `policies-${new Date().getTime()}`;\n\n  if (isFetching) {\n    return <LoadingPlaceholder text={t('alerting.grafana-policies-exporter-preview.text-loading', 'Loading....')} />;\n  }\n\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={policiesDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n};\n\ninterface GrafanaPoliciesExporterProps {\n  onClose: () => void;\n}\n\nexport const GrafanaPoliciesExporter = ({ onClose }: GrafanaPoliciesExporterProps) => {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n\n  return (\n    <GrafanaExportDrawer\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      <GrafanaPoliciesExporterPreview exportFormat={activeTab} onClose={onClose} />\n    </GrafanaExportDrawer>\n  );\n};\n","import { css } from '@emotion/css';\nimport { isArray, sumBy, uniqueId } from 'lodash';\nimport pluralize from 'pluralize';\nimport * as React from 'react';\nimport { FC, Fragment, ReactNode, useState } from 'react';\nimport { useToggle } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport {\n  Badge,\n  Button,\n  Dropdown,\n  Icon,\n  IconButton,\n  Menu,\n  Stack,\n  Text,\n  TextLink,\n  Tooltip,\n  getTagColorsFromName,\n  useStyles2,\n} from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport ConditionalWrap from 'app/features/alerting/unified/components/ConditionalWrap';\nimport MoreButton from 'app/features/alerting/unified/components/MoreButton';\nimport { PrimaryText } from 'app/features/alerting/unified/components/common/TextVariants';\nimport { ContactPointReceiverSummary } from 'app/features/alerting/unified/components/contact-points/ContactPoint';\nimport {\n  AlertmanagerGroup,\n  MatcherOperator,\n  ObjectMatcher,\n  Receiver,\n  RouteWithID,\n} from 'app/plugins/datasource/alertmanager/types';\nimport { ReceiversState } from 'app/types';\n\nimport { AlertmanagerAction, useAlertmanagerAbilities, useAlertmanagerAbility } from '../../hooks/useAbilities';\nimport { getAmMatcherFormatter } from '../../utils/alertmanager';\nimport { MatcherFormatter, normalizeMatchers } from '../../utils/matchers';\nimport { createContactPointLink, createContactPointSearchLink, createMuteTimingLink } from '../../utils/misc';\nimport { InheritableProperties, getInheritedProperties } from '../../utils/notification-policies';\nimport { InsertPosition } from '../../utils/routeTree';\nimport { Authorize } from '../Authorize';\nimport { PopupCard } from '../HoverCard';\nimport { Label } from '../Label';\nimport { MetaText } from '../MetaText';\nimport { ProvisioningBadge } from '../Provisioning';\nimport { Spacer } from '../Spacer';\nimport { GrafanaPoliciesExporter } from '../export/GrafanaPoliciesExporter';\n\nimport { Matchers } from './Matchers';\nimport { RoutesMatchingFilters } from './NotificationPoliciesList';\nimport { TimingOptions } from './timingOptions';\n\nconst POLICIES_PER_PAGE = 20;\n\ninterface PolicyComponentProps {\n  receivers?: Receiver[];\n  contactPointsState?: ReceiversState;\n  readOnly?: boolean;\n  provisioned?: boolean;\n  inheritedProperties?: Partial<InheritableProperties>;\n  routesMatchingFilters?: RoutesMatchingFilters;\n\n  matchingInstancesPreview?: {\n    groupsMap?: Map<string, AlertmanagerGroup[]>;\n    enabled: boolean;\n  };\n\n  currentRoute: RouteWithID;\n  alertManagerSourceName: string;\n  onEditPolicy: (route: RouteWithID, isDefault?: boolean, isAutogenerated?: boolean) => void;\n  onAddPolicy: (route: RouteWithID, position: InsertPosition) => void;\n  onDeletePolicy: (route: RouteWithID) => void;\n  onShowAlertInstances: (\n    alertGroups: AlertmanagerGroup[],\n    matchers?: ObjectMatcher[],\n    formatter?: MatcherFormatter\n  ) => void;\n  isAutoGenerated?: boolean;\n  isDefaultPolicy?: boolean;\n}\n\nconst Policy = (props: PolicyComponentProps) => {\n  const {\n    receivers = [],\n    contactPointsState,\n    readOnly = false,\n    provisioned = false,\n    alertManagerSourceName,\n    currentRoute,\n    inheritedProperties,\n    routesMatchingFilters = {\n      filtersApplied: false,\n      matchedRoutesWithPath: new Map<RouteWithID, RouteWithID[]>(),\n    },\n    matchingInstancesPreview = { enabled: false },\n    onEditPolicy,\n    onAddPolicy,\n    onDeletePolicy,\n    onShowAlertInstances,\n    isAutoGenerated = false,\n    isDefaultPolicy = false,\n  } = props;\n\n  const styles = useStyles2(getStyles);\n\n  const contactPoint = currentRoute.receiver;\n  const continueMatching = currentRoute.continue ?? false;\n\n  const matchers = normalizeMatchers(currentRoute);\n  const hasMatchers = Boolean(matchers && matchers.length);\n\n  const { filtersApplied, matchedRoutesWithPath } = routesMatchingFilters;\n  const matchedRoutes = Array.from(matchedRoutesWithPath.keys());\n\n  // check if this route matches the filters\n  const hasFocus = filtersApplied && matchedRoutes.some((route) => route.id === currentRoute.id);\n\n  // check if this route belongs to a path that matches the filters\n  const routesPath = Array.from(matchedRoutesWithPath.values()).flat();\n  const belongsToMatchPath = routesPath.some((route: RouteWithID) => route.id === currentRoute.id);\n\n  // gather errors here\n  const errors: ReactNode[] = [];\n\n  // if the route has no matchers, is not the default policy (that one has none) and it does not continue\n  // then we should warn the user that it's a suspicious setup\n  const showMatchesAllLabelsWarning = !hasMatchers && !isDefaultPolicy && !continueMatching;\n\n  // if the receiver / contact point has any errors show it on the policy\n  const actualContactPoint = contactPoint ?? inheritedProperties?.receiver ?? '';\n  const contactPointErrors = contactPointsState ? getContactPointErrors(actualContactPoint, contactPointsState) : [];\n\n  const allChildPolicies = currentRoute.routes ?? [];\n\n  // filter child policies that match\n  const childPolicies = filtersApplied\n    ? // filter by the ones that belong to the path that matches the filters\n      allChildPolicies.filter((policy) => routesPath.some((route: RouteWithID) => route.id === policy.id))\n    : allChildPolicies;\n\n  const hasChildPolicies = childPolicies.length > 0;\n\n  const [showExportDrawer, toggleShowExportDrawer] = useToggle(false);\n  const matchingAlertGroups = matchingInstancesPreview?.groupsMap?.get(currentRoute.id);\n\n  // sum all alert instances for all groups we're handling\n  const numberOfAlertInstances = matchingAlertGroups\n    ? sumBy(matchingAlertGroups, (group) => group.alerts.length)\n    : undefined;\n\n  // simplified routing permissions\n  const [isSupportedToSeeAutogeneratedChunk, isAllowedToSeeAutogeneratedChunk] = useAlertmanagerAbility(\n    AlertmanagerAction.ViewAutogeneratedPolicyTree\n  );\n\n  // we collapse the auto-generated policies by default\n  const isAutogeneratedPolicyRoot = isAutoGeneratedRootAndSimplifiedEnabled(currentRoute);\n  const [showPolicyChildren, togglePolicyChildren] = useToggle(isAutogeneratedPolicyRoot ? false : true);\n\n  const groupBy = currentRoute.group_by;\n  const muteTimings = currentRoute.mute_time_intervals ?? [];\n  const activeTimings = currentRoute.active_time_intervals ?? [];\n\n  const timingOptions: TimingOptions = {\n    group_wait: currentRoute.group_wait,\n    group_interval: currentRoute.group_interval,\n    repeat_interval: currentRoute.repeat_interval,\n  };\n\n  contactPointErrors.forEach((error) => {\n    errors.push(error);\n  });\n\n  const [visibleChildPolicies, setVisibleChildPolicies] = useState(POLICIES_PER_PAGE);\n\n  // build the menu actions for our policy\n  const dropdownMenuActions: JSX.Element[] = useCreateDropdownMenuActions(\n    isAutoGenerated,\n    isDefaultPolicy,\n    provisioned,\n    onEditPolicy,\n    currentRoute,\n    toggleShowExportDrawer,\n    onDeletePolicy\n  );\n\n  // check if this policy should be visible. If it's autogenerated and the user is not allowed to see autogenerated\n  // policies then we should not show it. Same if the user is not supported to see autogenerated policies.\n  const hideCurrentPolicy =\n    isAutoGenerated && (!isAllowedToSeeAutogeneratedChunk || !isSupportedToSeeAutogeneratedChunk);\n  const hideCurrentPolicyForFilters = filtersApplied && !belongsToMatchPath;\n\n  if (hideCurrentPolicy || hideCurrentPolicyForFilters) {\n    return null;\n  }\n\n  const isImmutablePolicy = isDefaultPolicy || isAutogeneratedPolicyRoot;\n  // TODO dead branch detection, warnings for all sort of configs that won't work or will never be activated\n\n  const childPoliciesBelongingToMatchPath = childPolicies.filter((child) =>\n    routesPath.some((route: RouteWithID) => route.id === child.id)\n  );\n\n  // child policies to render are the ones that belong to the path that matches the filters\n  const childPoliciesToRender = filtersApplied ? childPoliciesBelongingToMatchPath : childPolicies;\n  const pageOfChildren = childPoliciesToRender.slice(0, visibleChildPolicies);\n\n  const moreCount = childPoliciesToRender.length - pageOfChildren.length;\n  const showMore = moreCount > 0;\n\n  return (\n    <Stack direction=\"column\" gap={1.5}>\n      <div\n        className={styles.policyWrapper(hasFocus)}\n        data-testid={isDefaultPolicy ? 'am-root-route-container' : 'am-route-container'}\n      >\n        {/* continueMatching and showMatchesAllLabelsWarning are mutually exclusive so the icons can't overlap */}\n        {continueMatching && <ContinueMatchingIndicator />}\n        {showMatchesAllLabelsWarning && <AllMatchesIndicator />}\n\n        <div className={styles.policyItemWrapper}>\n          <Stack direction=\"column\" gap={1}>\n            {/* Matchers and actions */}\n            <div>\n              <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n                {hasChildPolicies ? (\n                  <IconButton\n                    name={showPolicyChildren ? 'angle-down' : 'angle-right'}\n                    onClick={togglePolicyChildren}\n                    aria-label={showPolicyChildren ? 'Collapse' : 'Expand'}\n                  />\n                ) : null}\n                {isImmutablePolicy ? (\n                  isAutogeneratedPolicyRoot ? (\n                    <AutogeneratedRootIndicator />\n                  ) : (\n                    <DefaultPolicyIndicator />\n                  )\n                ) : hasMatchers ? (\n                  <Matchers matchers={matchers ?? []} formatter={getAmMatcherFormatter(alertManagerSourceName)} />\n                ) : (\n                  <span className={styles.metadata}>\n                    <Trans i18nKey=\"alerting.policies.no-matchers\">No matchers</Trans>\n                  </span>\n                )}\n                <Spacer />\n                {/* TODO maybe we should move errors to the gutter instead? */}\n                {errors.length > 0 && <Errors errors={errors} />}\n                {provisioned && <ProvisioningBadge />}\n                <Stack direction=\"row\" gap={0.5}>\n                  {!isAutoGenerated && !readOnly && (\n                    <Authorize actions={[AlertmanagerAction.CreateNotificationPolicy]}>\n                      <ConditionalWrap shouldWrap={provisioned} wrap={ProvisionedTooltip}>\n                        {isDefaultPolicy ? (\n                          <Button\n                            variant=\"secondary\"\n                            icon=\"plus\"\n                            size=\"sm\"\n                            disabled={provisioned}\n                            type=\"button\"\n                            onClick={() => onAddPolicy(currentRoute, 'child')}\n                          >\n                            <Trans i18nKey=\"alerting.policies.new-child\">New child policy</Trans>\n                          </Button>\n                        ) : (\n                          <Dropdown\n                            overlay={\n                              <Menu>\n                                <Menu.Item\n                                  label={t('alerting.policy.label-new-sibling-above', 'New sibling above')}\n                                  icon=\"arrow-up\"\n                                  onClick={() => onAddPolicy(currentRoute, 'above')}\n                                />\n                                <Menu.Item\n                                  label={t('alerting.policy.label-new-sibling-below', 'New sibling below')}\n                                  icon=\"arrow-down\"\n                                  onClick={() => onAddPolicy(currentRoute, 'below')}\n                                />\n                                <Menu.Divider />\n                                <Menu.Item\n                                  label={t('alerting.policy.label-new-child-policy', 'New child policy')}\n                                  icon=\"plus\"\n                                  onClick={() => onAddPolicy(currentRoute, 'child')}\n                                />\n                              </Menu>\n                            }\n                          >\n                            <Button\n                              size=\"sm\"\n                              variant=\"secondary\"\n                              disabled={provisioned}\n                              icon=\"angle-down\"\n                              type=\"button\"\n                            >\n                              <Trans i18nKey=\"alerting.policies.new-policy\">Add new policy</Trans>\n                            </Button>\n                          </Dropdown>\n                        )}\n                      </ConditionalWrap>\n                    </Authorize>\n                  )}\n                  {dropdownMenuActions.length > 0 && (\n                    <Dropdown overlay={<Menu>{dropdownMenuActions}</Menu>}>\n                      <MoreButton\n                        aria-label={isDefaultPolicy ? 'more actions for default policy' : 'more actions for policy'}\n                        data-testid=\"more-actions\"\n                      />\n                    </Dropdown>\n                  )}\n                </Stack>\n              </Stack>\n            </div>\n\n            {/* Metadata row */}\n            <MetadataRow\n              matchingInstancesPreview={matchingInstancesPreview}\n              numberOfAlertInstances={numberOfAlertInstances}\n              contactPoint={contactPoint ?? undefined}\n              groupBy={groupBy}\n              muteTimings={muteTimings}\n              activeTimings={activeTimings}\n              timingOptions={timingOptions}\n              inheritedProperties={inheritedProperties}\n              alertManagerSourceName={alertManagerSourceName}\n              receivers={receivers}\n              matchingAlertGroups={matchingAlertGroups}\n              matchers={matchers}\n              isDefaultPolicy={isDefaultPolicy}\n              onShowAlertInstances={onShowAlertInstances}\n            />\n          </Stack>\n        </div>\n      </div>\n      <div className={styles.childPolicies}>\n        {showPolicyChildren && (\n          <>\n            {pageOfChildren.map((child) => {\n              const childInheritedProperties = getInheritedProperties(currentRoute, child, inheritedProperties);\n              // This child is autogenerated if it's the autogenerated root or if it's a child of an autogenerated policy.\n              const isThisChildAutoGenerated = isAutoGeneratedRootAndSimplifiedEnabled(child) || isAutoGenerated;\n              /* pass the \"readOnly\" prop from the parent, because for any child policy , if its parent it's not editable,\n                then the child policy should not be editable either */\n              const isThisChildReadOnly = readOnly || provisioned || isAutoGenerated;\n\n              return (\n                <Policy\n                  key={child.id}\n                  currentRoute={child}\n                  receivers={receivers}\n                  contactPointsState={contactPointsState}\n                  readOnly={isThisChildReadOnly}\n                  inheritedProperties={childInheritedProperties}\n                  onAddPolicy={onAddPolicy}\n                  onEditPolicy={onEditPolicy}\n                  onDeletePolicy={onDeletePolicy}\n                  onShowAlertInstances={onShowAlertInstances}\n                  alertManagerSourceName={alertManagerSourceName}\n                  routesMatchingFilters={routesMatchingFilters}\n                  matchingInstancesPreview={matchingInstancesPreview}\n                  isAutoGenerated={isThisChildAutoGenerated}\n                  provisioned={provisioned}\n                />\n              );\n            })}\n            {showMore && (\n              <Button\n                size=\"sm\"\n                icon=\"angle-down\"\n                variant=\"secondary\"\n                className={styles.moreButtons}\n                onClick={() => setVisibleChildPolicies(visibleChildPolicies + POLICIES_PER_PAGE)}\n              >\n                <Trans i18nKey=\"alerting.policies.n-more-policies\" count={moreCount}>\n                  {{ count: moreCount }} additional policies\n                </Trans>\n              </Button>\n            )}\n          </>\n        )}\n      </div>\n      {showExportDrawer && <GrafanaPoliciesExporter onClose={toggleShowExportDrawer} />}\n    </Stack>\n  );\n};\n\ninterface MetadataRowProps {\n  matchingInstancesPreview: { groupsMap?: Map<string, AlertmanagerGroup[]>; enabled: boolean };\n  numberOfAlertInstances?: number;\n  contactPoint?: string;\n  groupBy?: string[];\n  muteTimings?: string[];\n  activeTimings?: string[];\n  timingOptions?: TimingOptions;\n  inheritedProperties?: Partial<InheritableProperties>;\n  alertManagerSourceName: string;\n  receivers: Receiver[];\n  matchingAlertGroups?: AlertmanagerGroup[];\n  matchers?: ObjectMatcher[];\n  isDefaultPolicy: boolean;\n  onShowAlertInstances: (\n    alertGroups: AlertmanagerGroup[],\n    matchers?: ObjectMatcher[],\n    formatter?: MatcherFormatter\n  ) => void;\n}\n\nfunction MetadataRow({\n  numberOfAlertInstances,\n  isDefaultPolicy,\n  timingOptions,\n  groupBy,\n  muteTimings = [],\n  activeTimings = [],\n  matchingInstancesPreview,\n  inheritedProperties,\n  matchingAlertGroups,\n  onShowAlertInstances,\n  matchers,\n  contactPoint,\n  alertManagerSourceName,\n  receivers,\n}: MetadataRowProps) {\n  const styles = useStyles2(getStyles);\n\n  const inheritedGrouping = inheritedProperties && inheritedProperties.group_by;\n  const hasInheritedProperties = inheritedProperties && Object.keys(inheritedProperties).length > 0;\n\n  const noGrouping = isArray(groupBy) && groupBy[0] === '...';\n  const customGrouping = !noGrouping && isArray(groupBy) && groupBy.length > 0;\n  const singleGroup = isDefaultPolicy && isArray(groupBy) && groupBy.length === 0;\n\n  const hasMuteTimings = Boolean(muteTimings.length);\n  const hasActiveTimings = Boolean(activeTimings.length);\n\n  return (\n    <div className={styles.metadataRow}>\n      <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n        {matchingInstancesPreview.enabled && (\n          <MetaText\n            icon=\"layers-alt\"\n            onClick={() => {\n              matchingAlertGroups &&\n                onShowAlertInstances(matchingAlertGroups, matchers, getAmMatcherFormatter(alertManagerSourceName));\n            }}\n            data-testid=\"matching-instances\"\n          >\n            <Text color=\"primary\">{numberOfAlertInstances ?? '-'}</Text>\n            <span>\n              <Trans i18nKey=\"alerting.policies.metadata.n-instances\" count={numberOfAlertInstances ?? 0}>\n                instance\n              </Trans>\n            </span>\n          </MetaText>\n        )}\n        {contactPoint && (\n          <MetaText icon=\"at\" data-testid=\"contact-point\">\n            <span>\n              <Trans i18nKey=\"alerting.policies.metadata.delivered-to\">Delivered to</Trans>{' '}\n            </span>\n            <ContactPointsHoverDetails\n              alertManagerSourceName={alertManagerSourceName}\n              receivers={receivers}\n              contactPoint={contactPoint}\n            />\n          </MetaText>\n        )}\n        {!inheritedGrouping && (\n          <>\n            {customGrouping && (\n              <MetaText icon=\"layer-group\" data-testid=\"grouping\">\n                <span>\n                  <Trans i18nKey=\"alerting.policies.metadata.grouped-by\">Grouped by</Trans>{' '}\n                </span>\n                <Text color=\"primary\">{groupBy.join(', ')}</Text>\n              </MetaText>\n            )}\n            {singleGroup && (\n              <MetaText icon=\"layer-group\">\n                <span>\n                  <Trans i18nKey=\"alerting.policies.metadata.grouping.single-group\">Single group</Trans>\n                </span>\n              </MetaText>\n            )}\n            {noGrouping && (\n              <MetaText icon=\"layer-group\">\n                <span>\n                  <Trans i18nKey=\"alerting.policies.metadata.grouping.none\">Not grouping</Trans>\n                </span>\n              </MetaText>\n            )}\n          </>\n        )}\n        {hasMuteTimings && (\n          <MetaText icon=\"calendar-slash\" data-testid=\"mute-timings\">\n            <span>\n              <Trans i18nKey=\"alerting.policies.metadata.mute-time\">Muted when</Trans>{' '}\n            </span>\n            <TimeIntervals timings={muteTimings} alertManagerSourceName={alertManagerSourceName} />\n          </MetaText>\n        )}\n        {hasActiveTimings && (\n          <MetaText icon=\"calendar-alt\" data-testid=\"active-timings\">\n            <span>\n              <Trans i18nKey=\"alerting.policies.metadata.active-time\">Active when</Trans>{' '}\n            </span>\n            <TimeIntervals timings={activeTimings} alertManagerSourceName={alertManagerSourceName} />\n          </MetaText>\n        )}\n        {timingOptions && <TimingOptionsMeta timingOptions={timingOptions} />}\n        {hasInheritedProperties && (\n          <MetaText icon=\"corner-down-right-alt\" data-testid=\"inherited-properties\">\n            <span>\n              <Trans i18nKey=\"alerting.policies.metadata.inherited\">Inherited</Trans>\n            </span>\n            <InheritedProperties properties={inheritedProperties} />\n          </MetaText>\n        )}\n      </Stack>\n    </div>\n  );\n}\n\nexport const useCreateDropdownMenuActions = (\n  isAutoGenerated: boolean,\n  isDefaultPolicy: boolean,\n  provisioned: boolean,\n  onEditPolicy: (route: RouteWithID, isDefault?: boolean, readOnly?: boolean) => void,\n  currentRoute: RouteWithID,\n  toggleShowExportDrawer: () => void,\n  onDeletePolicy: (route: RouteWithID) => void\n) => {\n  const [\n    [updatePoliciesSupported, updatePoliciesAllowed],\n    [deletePolicySupported, deletePolicyAllowed],\n    [exportPoliciesSupported, exportPoliciesAllowed],\n  ] = useAlertmanagerAbilities([\n    AlertmanagerAction.UpdateNotificationPolicyTree,\n    AlertmanagerAction.DeleteNotificationPolicy,\n    AlertmanagerAction.ExportNotificationPolicies,\n  ]);\n  const dropdownMenuActions = [];\n  const showExportAction = exportPoliciesAllowed && exportPoliciesSupported && isDefaultPolicy && !isAutoGenerated;\n  const showEditAction = updatePoliciesSupported && updatePoliciesAllowed;\n  const showDeleteAction = deletePolicySupported && deletePolicyAllowed && !isDefaultPolicy && !isAutoGenerated;\n\n  if (showEditAction) {\n    dropdownMenuActions.push(\n      <Fragment key=\"edit-policy\">\n        <ConditionalWrap shouldWrap={provisioned} wrap={ProvisionedTooltip}>\n          <Menu.Item\n            icon=\"edit\"\n            disabled={provisioned || isAutoGenerated}\n            label={t('alerting.use-create-dropdown-menu-actions.label-edit', 'Edit')}\n            onClick={() => onEditPolicy(currentRoute, isDefaultPolicy)}\n          />\n        </ConditionalWrap>\n      </Fragment>\n    );\n  }\n\n  if (showExportAction) {\n    dropdownMenuActions.push(\n      <Menu.Item\n        key=\"export-policy\"\n        icon=\"download-alt\"\n        label={t('alerting.use-create-dropdown-menu-actions.label-export', 'Export')}\n        onClick={toggleShowExportDrawer}\n      />\n    );\n  }\n\n  if (showDeleteAction) {\n    dropdownMenuActions.push(\n      <Fragment key=\"delete-policy\">\n        <Menu.Divider />\n        <ConditionalWrap shouldWrap={provisioned} wrap={ProvisionedTooltip}>\n          <Menu.Item\n            destructive\n            icon=\"trash-alt\"\n            disabled={provisioned || isAutoGenerated}\n            label={t('alerting.use-create-dropdown-menu-actions.label-delete', 'Delete')}\n            onClick={() => onDeletePolicy(currentRoute)}\n          />\n        </ConditionalWrap>\n      </Fragment>\n    );\n  }\n  return dropdownMenuActions;\n};\n\nexport const AUTOGENERATED_ROOT_LABEL_NAME = '__grafana_autogenerated__';\n\nexport function isAutoGeneratedRootAndSimplifiedEnabled(route: RouteWithID) {\n  const simplifiedRoutingToggleEnabled = config.featureToggles.alertingSimplifiedRouting ?? false;\n  if (!simplifiedRoutingToggleEnabled) {\n    return false;\n  }\n  if (!route.object_matchers) {\n    return false;\n  }\n  return (\n    route.object_matchers.some((objectMatcher) => {\n      return (\n        objectMatcher[0] === AUTOGENERATED_ROOT_LABEL_NAME &&\n        objectMatcher[1] === MatcherOperator.equal &&\n        objectMatcher[2] === 'true'\n      );\n    }) ?? false\n  );\n  // return simplifiedRoutingToggleEnabled && route.receiver === 'contact_point_5';\n}\n\nconst ProvisionedTooltip = (children: ReactNode) => (\n  <Tooltip content=\"Provisioned items cannot be edited in the UI\" placement=\"top\">\n    <span>{children}</span>\n  </Tooltip>\n);\n\nconst Errors: FC<{ errors: React.ReactNode[] }> = ({ errors }) => (\n  <PopupCard\n    arrow\n    placement=\"top\"\n    content={\n      <Stack direction=\"column\" gap={0.5}>\n        {errors.map((error) => (\n          <Fragment key={uniqueId()}>{error}</Fragment>\n        ))}\n      </Stack>\n    }\n  >\n    <span>\n      <Badge icon=\"exclamation-circle\" color=\"red\" text={pluralize('error', errors.length, true)} />\n    </span>\n  </PopupCard>\n);\n\nconst ContinueMatchingIndicator: FC = () => {\n  const styles = useStyles2(getStyles);\n  return (\n    <Tooltip placement=\"top\" content=\"This route will continue matching other policies\">\n      <div className={styles.gutterIcon} data-testid=\"continue-matching\">\n        <Icon name=\"arrow-down\" />\n      </div>\n    </Tooltip>\n  );\n};\n\nconst AllMatchesIndicator: FC = () => {\n  const styles = useStyles2(getStyles);\n  return (\n    <Tooltip placement=\"top\" content=\"This policy matches all labels\">\n      <div className={styles.gutterIcon} data-testid=\"matches-all\">\n        <Icon name=\"exclamation-triangle\" />\n      </div>\n    </Tooltip>\n  );\n};\n\nfunction DefaultPolicyIndicator() {\n  const styles = useStyles2(getStyles);\n  return (\n    <>\n      <Text element=\"h2\" variant=\"body\" weight=\"medium\">\n        <Trans i18nKey=\"alerting.policies.default-policy.title\">Default policy</Trans>\n      </Text>\n      <span className={styles.metadata}>\n        <Trans i18nKey=\"alerting.policies.default-policy.description\">\n          All alert instances will be handled by the default policy if no other matching policies are found.\n        </Trans>\n      </span>\n    </>\n  );\n}\n\nfunction AutogeneratedRootIndicator() {\n  return (\n    <Text element=\"h3\" variant=\"body\" weight=\"medium\">\n      <Trans i18nKey=\"alerting.policies.generated-policies\">Auto-generated policies</Trans>\n    </Text>\n  );\n}\n\nconst InheritedProperties: FC<{ properties: InheritableProperties }> = ({ properties }) => (\n  <PopupCard\n    arrow\n    placement=\"top\"\n    content={\n      <Stack direction=\"row\" gap={0.5}>\n        {Object.entries(properties).map(([key, value]) => {\n          if (!value) {\n            return null;\n          }\n\n          return <Label key={key} label={routePropertyToLabel(key)} value={routePropertyToValue(key, value)} />;\n        })}\n      </Stack>\n    }\n  >\n    <div>\n      <Text color=\"primary\">{pluralize('property', Object.keys(properties).length, true)}</Text>\n    </div>\n  </PopupCard>\n);\n\nconst TimeIntervals: FC<{ timings: string[]; alertManagerSourceName: string }> = ({\n  timings,\n  alertManagerSourceName,\n}) => {\n  const [, canSeeMuteTimings] = useAlertmanagerAbility(AlertmanagerAction.ViewMuteTiming);\n  /* TODO make a better mute timing overview, allow combining multiple in to one overview */\n  /*\n    <HoverCard\n      arrow\n      placement=\"top\"\n      header={<MetaText icon=\"calendar-slash\">Mute Timings</MetaText>}\n      content={\n        // TODO show a combined view of all mute timings here, combining the weekdays, years, months, etc\n        <Stack direction=\"row\" gap={0.5}>\n          <Label label=\"Weekdays\" value=\"Saturday and Sunday\" />\n        </Stack>\n      }\n    >\n      <div>\n        <Strong>{muteTimings.join(', ')}</Strong>\n      </div>\n    </HoverCard>\n  */\n  return (\n    <div>\n      {timings.map((timing, index) => {\n        const Wrapper = canSeeMuteTimings ? TextLink : Text;\n        return (\n          <Fragment key={timing}>\n            <Wrapper\n              href={createMuteTimingLink(timing, alertManagerSourceName)}\n              color={canSeeMuteTimings ? 'primary' : 'secondary'}\n              variant=\"bodySmall\"\n              inline={canSeeMuteTimings ? false : undefined}\n            >\n              {timing}\n            </Wrapper>\n            {index < timings.length - 1 && ', '}\n          </Fragment>\n        );\n      })}\n    </div>\n  );\n};\n\ninterface TimingOptionsMetaProps {\n  timingOptions: TimingOptions;\n}\nexport const TimingOptionsMeta = ({ timingOptions }: TimingOptionsMetaProps) => {\n  const groupWait = timingOptions.group_wait;\n  const groupInterval = timingOptions.group_interval;\n  const repeatInterval = timingOptions.repeat_interval;\n\n  // we don't have any timing options to show – we're inheriting everything from the parent\n  // and those show up in a separate \"inherited properties\" component\n  if (!groupWait && !groupInterval && !repeatInterval) {\n    return null;\n  }\n\n  const metaOptions: ReactNode[] = [];\n\n  if (groupWait) {\n    metaOptions.push(\n      <Tooltip\n        placement=\"top\"\n        content={t(\n          'alerting.policies.metadata.timingOptions.groupWait.description',\n          'How long to initially wait to send a notification for a group of alert instances.'\n        )}\n      >\n        <span>\n          <Trans i18nKey=\"alerting.policies.metadata.timingOptions.groupWait.label\">\n            Wait <PrimaryText content={groupWait} /> to group instances\n          </Trans>\n        </span>\n      </Tooltip>\n    );\n  }\n\n  if (groupInterval) {\n    metaOptions.push(\n      <Tooltip\n        placement=\"top\"\n        content={t(\n          'alerting.policies.metadata.timingOptions.groupInterval.description',\n          'How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent.'\n        )}\n      >\n        <span>\n          <Trans i18nKey=\"alerting.policies.metadata.timingOptions.groupInterval.label\">\n            Wait <PrimaryText content={groupInterval} /> before sending updates\n          </Trans>\n        </span>\n      </Tooltip>\n    );\n  }\n\n  if (repeatInterval) {\n    metaOptions.push(\n      <Tooltip\n        placement=\"top\"\n        content={t(\n          'alerting.policies.metadata.timingOptions.repeatInterval.description',\n          'How often notifications are sent if the group of alerts has not changed since the last notification.'\n        )}\n      >\n        <span>\n          <Trans i18nKey=\"alerting.policies.metadata.timingOptions.repeatInterval.label\">\n            Repeated every <PrimaryText content={repeatInterval} />\n          </Trans>\n        </span>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <MetaText icon=\"hourglass\" data-testid=\"timing-options\">\n      {metaOptions.map((meta, index) => (\n        <span key={uniqueId()}>\n          {meta}\n          {index < metaOptions.length - 1 && ' · '}\n        </span>\n      ))}\n    </MetaText>\n  );\n};\n\ninterface ContactPointDetailsProps {\n  alertManagerSourceName: string;\n  contactPoint: string;\n  receivers: Receiver[];\n}\n\nconst ContactPointsHoverDetails: FC<ContactPointDetailsProps> = ({\n  alertManagerSourceName,\n  contactPoint,\n  receivers,\n}) => {\n  const details = receivers.find((receiver) => receiver.name === contactPoint);\n  if (!details) {\n    // If we can't find details, then it's possible (likely) that the user doesn't have access to this\n    // contact point, so we don't try and link to it\n    return (\n      <Text color=\"secondary\" variant=\"bodySmall\">\n        {contactPoint}\n      </Text>\n    );\n  }\n\n  const integrations = details.grafana_managed_receiver_configs;\n\n  const contactPointLink =\n    'id' in details && details.id\n      ? createContactPointLink(details.id, alertManagerSourceName)\n      : createContactPointSearchLink(details.name, alertManagerSourceName);\n\n  return (\n    <PopupCard\n      disabled={!integrations}\n      arrow\n      placement=\"top\"\n      header={\n        <MetaText icon=\"at\">\n          <Text color=\"primary\">{contactPoint}</Text>\n        </MetaText>\n      }\n      key={uniqueId()}\n      content={\n        <Text variant=\"bodySmall\" color=\"secondary\">\n          <ContactPointReceiverSummary receivers={details.grafana_managed_receiver_configs || []} limit={3} />\n        </Text>\n      }\n    >\n      <TextLink href={contactPointLink} color=\"primary\" variant=\"bodySmall\" inline={false}>\n        {contactPoint}\n      </TextLink>\n    </PopupCard>\n  );\n};\n\nfunction getContactPointErrors(contactPoint: string, contactPointsState: ReceiversState): JSX.Element[] {\n  const notifierStates = Object.entries(contactPointsState[contactPoint]?.notifiers ?? []);\n  const contactPointErrors = notifierStates.reduce((acc: JSX.Element[] = [], [_, notifierStatuses]) => {\n    const notifierErrors = notifierStatuses\n      .filter((status) => status.lastNotifyAttemptError)\n      .map((status) => (\n        <Label\n          icon=\"at\"\n          key={uniqueId()}\n          label={`Contact Point › ${status.name}`}\n          value={status.lastNotifyAttemptError}\n        />\n      ));\n\n    return acc.concat(notifierErrors);\n  }, []);\n\n  return contactPointErrors;\n}\n\nconst routePropertyToLabel = (key: keyof InheritableProperties | string): string => {\n  switch (key) {\n    case 'receiver':\n      return 'Contact Point';\n    case 'group_by':\n      return 'Group by';\n    case 'group_interval':\n      return 'Group interval';\n    case 'group_wait':\n      return 'Group wait';\n    case 'repeat_interval':\n      return 'Repeat interval';\n    default:\n      return key;\n  }\n};\n\nconst routePropertyToValue = (\n  key: keyof InheritableProperties | string,\n  value: string | string[]\n): NonNullable<ReactNode> => {\n  const isNotGrouping = key === 'group_by' && Array.isArray(value) && value[0] === '...';\n  const isSingleGroup = key === 'group_by' && Array.isArray(value) && value.length === 0;\n\n  if (isNotGrouping) {\n    return (\n      <Text variant=\"bodySmall\" color=\"secondary\">\n        <Trans i18nKey=\"alerting.policies.metadata.grouping.none\">Not grouping</Trans>\n      </Text>\n    );\n  }\n\n  if (isSingleGroup) {\n    return (\n      <Text variant=\"bodySmall\" color=\"secondary\">\n        <Trans i18nKey=\"alerting.policies.metadata.grouping.single-group\">Single group</Trans>\n      </Text>\n    );\n  }\n\n  return Array.isArray(value) ? value.join(', ') : value;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  matcher: (label: string) => {\n    const { color, borderColor } = getTagColorsFromName(label);\n\n    return {\n      wrapper: css({\n        color: '#fff',\n        background: color,\n        padding: `${theme.spacing(0.33)} ${theme.spacing(0.66)}`,\n        fontSize: theme.typography.bodySmall.fontSize,\n        border: `solid 1px ${borderColor}`,\n        borderRadius: theme.shape.radius.default,\n      }),\n    };\n  },\n  childPolicies: css({\n    marginLeft: theme.spacing(4),\n    position: 'relative',\n    '&:before': {\n      content: '\"\"',\n      position: 'absolute',\n      height: 'calc(100% - 10px)',\n      borderLeft: `solid 1px ${theme.colors.border.weak}`,\n      marginTop: 0,\n      marginLeft: '-20px',\n    },\n  }),\n  policyItemWrapper: css({\n    padding: theme.spacing(1.5),\n  }),\n  metadataRow: css({\n    borderBottomLeftRadius: theme.shape.borderRadius(2),\n    borderBottomRightRadius: theme.shape.borderRadius(2),\n  }),\n  policyWrapper: (hasFocus = false) =>\n    css({\n      flex: 1,\n      position: 'relative',\n      background: theme.colors.background.secondary,\n      borderRadius: theme.shape.radius.default,\n      border: `solid 1px ${theme.colors.border.weak}`,\n      ...(hasFocus && {\n        borderColor: theme.colors.primary.border,\n        background: theme.colors.primary.transparent,\n      }),\n    }),\n  metadata: css({\n    color: theme.colors.text.secondary,\n    fontSize: theme.typography.bodySmall.fontSize,\n    fontWeight: theme.typography.bodySmall.fontWeight,\n  }),\n  break: css({\n    width: '100%',\n    height: 0,\n    marginBottom: theme.spacing(2),\n  }),\n  gutterIcon: css({\n    position: 'absolute',\n    top: 0,\n    transform: 'translateY(50%)',\n    left: `-${theme.spacing(4)}`,\n    color: theme.colors.text.secondary,\n    background: theme.colors.background.primary,\n    width: '25px',\n    height: '25px',\n    textAlign: 'center',\n    border: `solid 1px ${theme.colors.border.weak}`,\n    borderRadius: theme.shape.radius.default,\n    padding: 0,\n  }),\n  moreButtons: css({\n    marginTop: theme.spacing(0.5),\n    marginBottom: theme.spacing(1.5),\n  }),\n});\n\nexport { Policy };\n","import { defaults } from 'lodash';\nimport { useEffect, useMemo, useState } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { Alert, Button, Stack } from '@grafana/ui';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { Trans, t } from 'app/core/internationalization';\nimport { useContactPointsWithStatus } from 'app/features/alerting/unified/components/contact-points/useContactPoints';\nimport { AlertmanagerAction, useAlertmanagerAbility } from 'app/features/alerting/unified/hooks/useAbilities';\nimport { FormAmRoute } from 'app/features/alerting/unified/types/amroutes';\nimport { addUniqueIdentifierToRoute } from 'app/features/alerting/unified/utils/amroutes';\nimport { getErrorCode, stringifyErrorLike } from 'app/features/alerting/unified/utils/misc';\nimport { computeInheritedTree } from 'app/features/alerting/unified/utils/notification-policies';\nimport { ObjectMatcher, ROUTES_META_SYMBOL, RouteWithID } from 'app/plugins/datasource/alertmanager/types';\n\nimport { anyOfRequestState, isError } from '../../hooks/useAsync';\nimport { useAlertmanager } from '../../state/AlertmanagerContext';\nimport { ERROR_NEWER_CONFIGURATION } from '../../utils/k8s/errors';\n\nimport { alertmanagerApi } from './../../api/alertmanagerApi';\nimport { useGetContactPointsState } from './../../api/receiversApi';\nimport { useRouteGroupsMatcher } from './../../useRouteGroupsMatcher';\nimport { InsertPosition } from './../../utils/routeTree';\nimport { NotificationPoliciesFilter, findRoutesByMatchers, findRoutesMatchingPredicate } from './Filters';\nimport { useAddPolicyModal, useAlertGroupsModal, useDeletePolicyModal, useEditPolicyModal } from './Modals';\nimport { Policy } from './Policy';\nimport { TIMING_OPTIONS_DEFAULTS } from './timingOptions';\nimport {\n  useAddNotificationPolicy,\n  useDeleteNotificationPolicy,\n  useNotificationPolicyRoute,\n  useUpdateExistingNotificationPolicy,\n} from './useNotificationPolicyRoute';\n\nexport const NotificationPoliciesList = () => {\n  const appNotification = useAppNotification();\n  const [contactPointsSupported, canSeeContactPoints] = useAlertmanagerAbility(AlertmanagerAction.ViewContactPoint);\n\n  const [_, canSeeAlertGroups] = useAlertmanagerAbility(AlertmanagerAction.ViewAlertGroups);\n  const { useGetAlertmanagerAlertGroupsQuery } = alertmanagerApi;\n\n  const [contactPointFilter, setContactPointFilter] = useState<string | undefined>();\n  const [labelMatchersFilter, setLabelMatchersFilter] = useState<ObjectMatcher[]>([]);\n\n  const { selectedAlertmanager, hasConfigurationAPI, isGrafanaAlertmanager } = useAlertmanager();\n  const { getRouteGroupsMap } = useRouteGroupsMatcher();\n\n  const shouldFetchContactPoints = contactPointsSupported && canSeeContactPoints;\n  const contactPointsState = useGetContactPointsState(\n    // Workaround to not try and call this API when we don't have access to the policies tab\n    shouldFetchContactPoints ? (selectedAlertmanager ?? '') : ''\n  );\n\n  const {\n    currentData,\n    isLoading,\n    error: fetchPoliciesError,\n    refetch: refetchNotificationPolicyRoute,\n  } = useNotificationPolicyRoute({ alertmanager: selectedAlertmanager ?? '' });\n\n  // We make the assumption that the first policy is the default one\n  // At the time of writing, this will be always the case for the AM config response, and the K8S API\n  // TODO in the future: Generalise the component to support any number of \"root\" policies\n  const [defaultPolicy] = currentData ?? [];\n\n  // deleting policies\n  const [deleteNotificationPolicy, deleteNotificationPolicyState] = useDeleteNotificationPolicy({\n    alertmanager: selectedAlertmanager ?? '',\n  });\n\n  // updating policies\n  const [updateExistingNotificationPolicy, updateExistingNotificationPolicyState] = useUpdateExistingNotificationPolicy(\n    {\n      alertmanager: selectedAlertmanager ?? '',\n    }\n  );\n\n  // adding new policies\n  const [addNotificationPolicy, addNotificationPolicyState] = useAddNotificationPolicy({\n    alertmanager: selectedAlertmanager ?? '',\n  });\n\n  const { currentData: alertGroups, refetch: refetchAlertGroups } = useGetAlertmanagerAlertGroupsQuery(\n    { amSourceName: selectedAlertmanager ?? '' },\n    { skip: !canSeeAlertGroups || !selectedAlertmanager }\n  );\n\n  const { contactPoints: receivers } = useContactPointsWithStatus({\n    alertmanager: selectedAlertmanager ?? '',\n    fetchPolicies: false,\n    fetchStatuses: true,\n    skip: !shouldFetchContactPoints,\n  });\n\n  const rootRoute = useMemo(() => {\n    if (defaultPolicy) {\n      return addUniqueIdentifierToRoute(defaultPolicy);\n    }\n    return;\n  }, [defaultPolicy]);\n\n  // useAsync could also work but it's hard to wait until it's done in the tests\n  // Combining with useEffect gives more predictable results because the condition is in useEffect\n  const [{ value: routeAlertGroupsMap, error: instancesPreviewError }, triggerGetRouteGroupsMap] = useAsyncFn(\n    getRouteGroupsMap,\n    [getRouteGroupsMap]\n  );\n\n  useEffect(() => {\n    if (rootRoute && alertGroups) {\n      triggerGetRouteGroupsMap(rootRoute, alertGroups, { unquoteMatchers: !isGrafanaAlertmanager });\n    }\n  }, [rootRoute, alertGroups, triggerGetRouteGroupsMap, isGrafanaAlertmanager]);\n\n  // these are computed from the contactPoint and labels matchers filter\n  const routesMatchingFilters = useMemo(() => {\n    if (!rootRoute) {\n      const emptyResult: RoutesMatchingFilters = {\n        filtersApplied: false,\n        matchedRoutesWithPath: new Map(),\n      };\n\n      return emptyResult;\n    }\n\n    return findRoutesMatchingFilters(rootRoute, { contactPointFilter, labelMatchersFilter });\n  }, [contactPointFilter, labelMatchersFilter, rootRoute]);\n\n  const refetchPolicies = () => {\n    refetchNotificationPolicyRoute();\n    updateExistingNotificationPolicy.reset();\n    deleteNotificationPolicy.reset();\n    addNotificationPolicy.reset();\n  };\n\n  async function handleUpdate(partialRoute: Partial<FormAmRoute>) {\n    await updateExistingNotificationPolicy.execute(partialRoute);\n    handleActionResult({ error: updateExistingNotificationPolicyState.error });\n  }\n\n  async function handleDelete(route: RouteWithID) {\n    await deleteNotificationPolicy.execute(route.id);\n    handleActionResult({ error: deleteNotificationPolicyState.error });\n  }\n\n  async function handleAdd(\n    partialRoute: Partial<FormAmRoute>,\n    referenceRoute: RouteWithID,\n    insertPosition: InsertPosition\n  ) {\n    await addNotificationPolicy.execute({\n      partialRoute,\n      referenceRouteIdentifier: referenceRoute.id,\n      insertPosition,\n    });\n    handleActionResult({ error: addNotificationPolicyState.error });\n  }\n\n  function handleActionResult({ error }: { error?: Error }) {\n    if (!error) {\n      appNotification.success('Updated notification policies');\n    }\n    if (selectedAlertmanager) {\n      refetchAlertGroups();\n    }\n\n    // close all modals\n    closeEditModal();\n    closeAddModal();\n    closeDeleteModal();\n  }\n\n  const updatingTree = anyOfRequestState(\n    updateExistingNotificationPolicyState,\n    deleteNotificationPolicyState,\n    addNotificationPolicyState\n  ).loading;\n\n  // edit, add, delete modals\n  const [addModal, openAddModal, closeAddModal] = useAddPolicyModal(handleAdd, updatingTree);\n  const [editModal, openEditModal, closeEditModal] = useEditPolicyModal(\n    selectedAlertmanager ?? '',\n    handleUpdate,\n    updatingTree\n  );\n  const [deleteModal, openDeleteModal, closeDeleteModal] = useDeletePolicyModal(handleDelete, updatingTree);\n  const [alertInstancesModal, showAlertGroupsModal] = useAlertGroupsModal(selectedAlertmanager ?? '');\n\n  if (!selectedAlertmanager) {\n    return null;\n  }\n\n  const hasPoliciesData = rootRoute && !fetchPoliciesError && !isLoading;\n  const hasPoliciesError = Boolean(fetchPoliciesError) && !isLoading;\n  const hasConflictError = [\n    addNotificationPolicyState,\n    updateExistingNotificationPolicyState,\n    deleteNotificationPolicyState,\n  ].some((state) => isError(state) && getErrorCode(state.error) === ERROR_NEWER_CONFIGURATION);\n\n  return (\n    <>\n      {hasPoliciesError && (\n        <Alert\n          severity=\"error\"\n          title={t(\n            'alerting.notification-policies-list.title-error-loading-alertmanager-config',\n            'Error loading Alertmanager config'\n          )}\n        >\n          {stringifyErrorLike(fetchPoliciesError) || 'Unknown error.'}\n        </Alert>\n      )}\n      {/* show when there is an update error */}\n      {hasConflictError && (\n        <Alert\n          severity=\"info\"\n          title={t(\n            'alerting.notification-policies-list.title-notification-policies-have-changed',\n            'Notification policies have changed'\n          )}\n        >\n          <Stack direction=\"row\" justifyContent=\"space-between\" alignItems=\"center\">\n            <Trans i18nKey=\"alerting.policies.update-errors.conflict\">\n              The notification policy tree has been updated by another user.\n            </Trans>\n            <Button onClick={refetchPolicies}>\n              <Trans i18nKey=\"alerting.policies.reload-policies\">Reload policies</Trans>\n            </Button>\n          </Stack>\n        </Alert>\n      )}\n      {hasPoliciesData && (\n        <Stack direction=\"column\" gap={1}>\n          <NotificationPoliciesFilter\n            onChangeMatchers={setLabelMatchersFilter}\n            onChangeReceiver={setContactPointFilter}\n            matchingCount={routesMatchingFilters.matchedRoutesWithPath.size}\n          />\n          <Policy\n            receivers={receivers}\n            // add the timing defaults to the default policy to make sure child policies inherit properly\n            currentRoute={defaults(rootRoute, TIMING_OPTIONS_DEFAULTS)}\n            contactPointsState={contactPointsState.receivers}\n            readOnly={!hasConfigurationAPI}\n            provisioned={rootRoute[ROUTES_META_SYMBOL]?.provisioned}\n            alertManagerSourceName={selectedAlertmanager}\n            onAddPolicy={openAddModal}\n            onEditPolicy={openEditModal}\n            onDeletePolicy={openDeleteModal}\n            onShowAlertInstances={showAlertGroupsModal}\n            routesMatchingFilters={routesMatchingFilters}\n            matchingInstancesPreview={{\n              groupsMap: routeAlertGroupsMap,\n              enabled: Boolean(canSeeAlertGroups && !instancesPreviewError),\n            }}\n            isAutoGenerated={false}\n            isDefaultPolicy\n          />\n        </Stack>\n      )}\n      {addModal}\n      {editModal}\n      {deleteModal}\n      {alertInstancesModal}\n    </>\n  );\n};\n\ntype RouteFilters = {\n  contactPointFilter?: string;\n  labelMatchersFilter?: ObjectMatcher[];\n};\n\ntype FilterResult = Map<RouteWithID, RouteWithID[]>;\n\nexport interface RoutesMatchingFilters {\n  filtersApplied: boolean;\n  matchedRoutesWithPath: FilterResult;\n}\n\nexport const findRoutesMatchingFilters = (rootRoute: RouteWithID, filters: RouteFilters): RoutesMatchingFilters => {\n  const { contactPointFilter, labelMatchersFilter = [] } = filters;\n  const hasFilter = contactPointFilter || labelMatchersFilter.length > 0;\n  const havebothFilters = Boolean(contactPointFilter) && labelMatchersFilter.length > 0;\n\n  // if filters are empty we short-circuit this function\n  if (!hasFilter) {\n    return { filtersApplied: false, matchedRoutesWithPath: new Map() };\n  }\n\n  // we'll collect all of the routes matching the filters\n  // we track an array of matching routes, each item in the array is for 1 type of filter\n  //\n  // [contactPointMatches, labelMatcherMatches] -> [[{ a: [], b: [] }], [{ a: [], c: [] }]]\n  // later we'll use intersection to find results in all sets of filter matchers\n  const matchedRoutes: RouteWithID[][] = [];\n\n  // compute fully inherited tree so all policies have their inherited receiver\n  const fullRoute = computeInheritedTree(rootRoute);\n\n  // find all routes for our contact point filter\n  const matchingRoutesForContactPoint = contactPointFilter\n    ? findRoutesMatchingPredicate(fullRoute, (route) => route.receiver === contactPointFilter)\n    : new Map();\n\n  const routesMatchingContactPoint = Array.from(matchingRoutesForContactPoint.keys());\n  if (routesMatchingContactPoint) {\n    matchedRoutes.push(routesMatchingContactPoint);\n  }\n\n  // find all routes matching our label matchers\n  const matchingRoutesForLabelMatchers = labelMatchersFilter.length\n    ? findRoutesMatchingPredicate(fullRoute, (route) => findRoutesByMatchers(route, labelMatchersFilter))\n    : new Map();\n\n  const routesMatchingLabelFilters = Array.from(matchingRoutesForLabelMatchers.keys());\n  if (matchingRoutesForLabelMatchers.size > 0) {\n    matchedRoutes.push(routesMatchingLabelFilters);\n  }\n\n  // now that we have our maps for all filters, we just need to find the intersection of all maps by route if we have both filters\n  const routesForAllFilterResults = havebothFilters\n    ? findMapIntersection(matchingRoutesForLabelMatchers, matchingRoutesForContactPoint)\n    : new Map([...matchingRoutesForLabelMatchers, ...matchingRoutesForContactPoint]);\n\n  return {\n    filtersApplied: true,\n    matchedRoutesWithPath: routesForAllFilterResults,\n  };\n};\n\n// this function takes multiple maps and creates a new map with routes that exist in all maps\n//\n// map 1: { a: [], b: [] }\n// map 2: { a: [], c: [] }\n// return: { a: [] }\nfunction findMapIntersection(...matchingRoutes: FilterResult[]): FilterResult {\n  const result = new Map<RouteWithID, RouteWithID[]>();\n\n  // Iterate through the keys of the first map'\n  for (const key of matchingRoutes[0].keys()) {\n    // Check if the key exists in all other maps\n    if (matchingRoutes.every((map) => map.has(key))) {\n      // If yes, add the key to the result map\n      // @ts-ignore\n      result.set(key, matchingRoutes[0].get(key));\n    }\n  }\n\n  return result;\n}\n","import { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { ExportFormats, allGrafanaExportProviders } from './providers';\ninterface MuteTimingsExporterPreviewProps {\n  exportFormat: ExportFormats;\n  onClose: () => void;\n}\n\nconst GrafanaMuteTimingsExporterPreview = ({ exportFormat, onClose }: MuteTimingsExporterPreviewProps) => {\n  const { currentData: muteTimingsDefinition = '', isFetching } = alertRuleApi.useExportMuteTimingsQuery({\n    format: exportFormat,\n  });\n  const downloadFileName = `mute-timings-${new Date().getTime()}`;\n\n  if (isFetching) {\n    return (\n      <LoadingPlaceholder text={t('alerting.grafana-mute-timings-exporter-preview.text-loading', 'Loading....')} />\n    );\n  }\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={muteTimingsDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n};\n\ninterface GrafanaMuteTimingExporterPreviewProps extends MuteTimingsExporterPreviewProps {\n  muteTimingName: string;\n}\nconst GrafanaMuteTimingExporterPreview = ({\n  exportFormat,\n  onClose,\n  muteTimingName,\n}: GrafanaMuteTimingExporterPreviewProps) => {\n  const { currentData: muteTimingsDefinition = '', isFetching } = alertRuleApi.useExportMuteTimingQuery({\n    format: exportFormat,\n    muteTiming: muteTimingName,\n  });\n  const downloadFileName = `mute-timing-${muteTimingName}-${new Date().getTime()}`;\n\n  if (isFetching) {\n    return <LoadingPlaceholder text={t('alerting.grafana-mute-timing-exporter-preview.text-loading', 'Loading....')} />;\n  }\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={muteTimingsDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n};\ninterface GrafanaMuteTimingsExporterProps {\n  onClose: () => void;\n  muteTimingName?: string;\n}\n\nexport const GrafanaMuteTimingsExporter = ({ onClose, muteTimingName }: GrafanaMuteTimingsExporterProps) => {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n  return (\n    <GrafanaExportDrawer\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      {muteTimingName ? (\n        <GrafanaMuteTimingExporterPreview exportFormat={activeTab} onClose={onClose} muteTimingName={muteTimingName} />\n      ) : (\n        <GrafanaMuteTimingsExporterPreview exportFormat={activeTab} onClose={onClose} />\n      )}\n    </GrafanaExportDrawer>\n  );\n};\n","import { useCallback, useMemo, useState } from 'react';\nimport { useToggle } from 'react-use';\n\nimport { GrafanaMuteTimingsExporter } from '../export/GrafanaMuteTimingsExporter';\n\nexport const ALL_MUTE_TIMINGS = Symbol('all mute timings');\n\ntype ExportProps = [JSX.Element | null, (muteTiming: string | typeof ALL_MUTE_TIMINGS) => void];\n\nexport const useExportMuteTimingsDrawer = (): ExportProps => {\n  const [muteTimingName, setMuteTimingName] = useState<string | typeof ALL_MUTE_TIMINGS | null>(null);\n  const [isExportDrawerOpen, toggleShowExportDrawer] = useToggle(false);\n\n  const handleClose = useCallback(() => {\n    setMuteTimingName(null);\n    toggleShowExportDrawer(false);\n  }, [toggleShowExportDrawer]);\n\n  const handleOpen = (muteTimingName: string | typeof ALL_MUTE_TIMINGS) => {\n    setMuteTimingName(muteTimingName);\n    toggleShowExportDrawer(true);\n  };\n\n  const drawer = useMemo(() => {\n    if (!muteTimingName || !isExportDrawerOpen) {\n      return null;\n    }\n\n    if (muteTimingName === ALL_MUTE_TIMINGS) {\n      // use this drawer when we want to export all mute timings\n      return <GrafanaMuteTimingsExporter onClose={handleClose} />;\n    } else {\n      // use this one for exporting a single mute timing\n      return <GrafanaMuteTimingsExporter muteTimingName={muteTimingName} onClose={handleClose} />;\n    }\n  }, [isExportDrawerOpen, handleClose, muteTimingName]);\n\n  return [drawer, handleOpen];\n};\n","import { useState } from 'react';\n\nimport { Badge, ConfirmModal, LinkButton, Stack } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { useExportMuteTimingsDrawer } from 'app/features/alerting/unified/components/mute-timings/useExportMuteTimingsDrawer';\n\nimport { Authorize } from '../../components/Authorize';\nimport { AlertmanagerAction, useAlertmanagerAbility } from '../../hooks/useAbilities';\nimport { isLoading } from '../../hooks/useAsync';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { makeAMLink } from '../../utils/misc';\nimport { isDisabled } from '../../utils/mute-timings';\n\nimport { MuteTiming, useDeleteMuteTiming } from './useMuteTimings';\n\ninterface MuteTimingActionsButtonsProps {\n  muteTiming: MuteTiming;\n  alertManagerSourceName: string;\n}\n\nexport const MuteTimingActionsButtons = ({ muteTiming, alertManagerSourceName }: MuteTimingActionsButtonsProps) => {\n  const [deleteMuteTiming, deleteMuteTimingRequestState] = useDeleteMuteTiming({\n    alertmanager: alertManagerSourceName!,\n  });\n  const [showDeleteDrawer, setShowDeleteDrawer] = useState(false);\n  const [ExportDrawer, showExportDrawer] = useExportMuteTimingsDrawer();\n  const [exportSupported, exportAllowed] = useAlertmanagerAbility(AlertmanagerAction.ExportMuteTimings);\n\n  const closeDeleteModal = () => setShowDeleteDrawer(false);\n\n  const isGrafanaDataSource = alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME;\n  const viewOrEditHref = makeAMLink(`/alerting/routes/mute-timing/edit`, alertManagerSourceName, {\n    muteName: muteTiming.id,\n  });\n\n  const viewOrEditButton = (\n    <LinkButton\n      href={viewOrEditHref}\n      variant=\"secondary\"\n      size=\"sm\"\n      icon={muteTiming.provisioned ? 'eye' : 'pen'}\n      disabled={isLoading(deleteMuteTimingRequestState)}\n    >\n      {muteTiming.provisioned ? (\n        <Trans i18nKey=\"alerting.common.view\">View</Trans>\n      ) : (\n        <Trans i18nKey=\"alerting.common.edit\">Edit</Trans>\n      )}\n    </LinkButton>\n  );\n\n  return (\n    <>\n      <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"flex-end\" wrap=\"wrap\">\n        {!isGrafanaDataSource && isDisabled(muteTiming) && (\n          <Badge text={t('alerting.mute-timing-actions-buttons.text-disabled', 'Disabled')} color=\"orange\" />\n        )}\n        <Authorize actions={[AlertmanagerAction.UpdateMuteTiming]}>{viewOrEditButton}</Authorize>\n\n        {exportSupported && (\n          <LinkButton\n            icon=\"download-alt\"\n            variant=\"secondary\"\n            size=\"sm\"\n            data-testid=\"export\"\n            disabled={!exportAllowed || isLoading(deleteMuteTimingRequestState)}\n            onClick={() => showExportDrawer(muteTiming.name)}\n          >\n            <Trans i18nKey=\"alerting.common.export\">Export</Trans>\n          </LinkButton>\n        )}\n\n        {!muteTiming.provisioned && (\n          <Authorize actions={[AlertmanagerAction.DeleteMuteTiming]}>\n            <LinkButton\n              icon=\"trash-alt\"\n              variant=\"secondary\"\n              size=\"sm\"\n              onClick={() => setShowDeleteDrawer(true)}\n              disabled={isLoading(deleteMuteTimingRequestState)}\n            >\n              <Trans i18nKey=\"alerting.common.delete\">Delete</Trans>\n            </LinkButton>\n          </Authorize>\n        )}\n      </Stack>\n      <ConfirmModal\n        isOpen={showDeleteDrawer}\n        title={t('alerting.mute-timing-actions-buttons.title-delete-mute-timing', 'Delete mute timing')}\n        body={`Are you sure you would like to delete \"${muteTiming.name}\"?`}\n        confirmText={t('alerting.common.delete', 'Delete')}\n        onConfirm={async () => {\n          await deleteMuteTiming.execute({\n            name: muteTiming?.metadata?.name ?? muteTiming.name,\n          });\n\n          closeDeleteModal();\n        }}\n        onDismiss={closeDeleteModal}\n      />\n      {ExportDrawer}\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport { ButtonHTMLAttributes } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, ButtonVariant, IconName, LinkButton, useStyles2 } from '@grafana/ui';\n\nimport { EmptyArea } from './EmptyArea';\n\nexport interface EmptyAreaWithCTAProps {\n  buttonLabel: string;\n  href?: string;\n  onButtonClick?: ButtonHTMLAttributes<HTMLButtonElement>['onClick'];\n  text: string;\n\n  buttonIcon?: IconName;\n  buttonSize?: 'xs' | 'sm' | 'md' | 'lg';\n  buttonVariant?: ButtonVariant;\n  showButton?: boolean;\n}\n\nexport const EmptyAreaWithCTA = ({\n  buttonIcon,\n  buttonLabel,\n  buttonSize = 'lg',\n  buttonVariant = 'primary',\n  onButtonClick,\n  text,\n  href,\n  showButton = true,\n}: EmptyAreaWithCTAProps) => {\n  const styles = useStyles2(getStyles);\n\n  const commonProps = {\n    className: styles.button,\n    icon: buttonIcon,\n    size: buttonSize,\n    variant: buttonVariant,\n  };\n\n  return (\n    <EmptyArea>\n      <>\n        <p className={styles.text}>{text}</p>\n        {showButton &&\n          (href ? (\n            <LinkButton href={href} type=\"button\" {...commonProps}>\n              {buttonLabel}\n            </LinkButton>\n          ) : (\n            <Button onClick={onButtonClick} type=\"button\" {...commonProps}>\n              {buttonLabel}\n            </Button>\n          ))}\n      </>\n    </EmptyArea>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      backgroundColor: theme.colors.background.secondary,\n      color: theme.colors.text.secondary,\n      padding: theme.spacing(4),\n      textAlign: 'center',\n    }),\n    text: css({\n      marginBottom: theme.spacing(2),\n    }),\n    button: css({\n      margin: theme.spacing(2, 0, 1),\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport { useMemo } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, LinkButton, LoadingPlaceholder, Stack, useStyles2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { MuteTimingActionsButtons } from 'app/features/alerting/unified/components/mute-timings/MuteTimingActionsButtons';\nimport {\n  ALL_MUTE_TIMINGS,\n  useExportMuteTimingsDrawer,\n} from 'app/features/alerting/unified/components/mute-timings/useExportMuteTimingsDrawer';\nimport { useAlertmanager } from 'app/features/alerting/unified/state/AlertmanagerContext';\nimport { PROVENANCE_ANNOTATION } from 'app/features/alerting/unified/utils/k8s/constants';\n\nimport { Authorize } from '../../components/Authorize';\nimport { AlertmanagerAction, useAlertmanagerAbilities, useAlertmanagerAbility } from '../../hooks/useAbilities';\nimport { makeAMLink } from '../../utils/misc';\nimport { DynamicTable, DynamicTableColumnProps } from '../DynamicTable';\nimport { EmptyAreaWithCTA } from '../EmptyAreaWithCTA';\nimport { ProvisioningBadge } from '../Provisioning';\nimport { Spacer } from '../Spacer';\n\nimport { MuteTiming, useMuteTimings } from './useMuteTimings';\nimport { renderTimeIntervals } from './util';\n\ntype TableItem = {\n  id: string;\n  data: MuteTiming;\n};\n\nexport const MuteTimingsTable = () => {\n  const { selectedAlertmanager: alertManagerSourceName = '', hasConfigurationAPI } = useAlertmanager();\n  const hideActions = !hasConfigurationAPI;\n  const styles = useStyles2(getStyles);\n  const [ExportAllDrawer, showExportAllDrawer] = useExportMuteTimingsDrawer();\n\n  const { data, isLoading, error } = useMuteTimings({ alertmanager: alertManagerSourceName ?? '' });\n\n  const items = useMemo((): TableItem[] => {\n    const muteTimings = data || [];\n\n    return muteTimings.map((mute) => {\n      return {\n        id: mute.id,\n        data: mute,\n      };\n    });\n  }, [data]);\n\n  const [_, allowedToCreateMuteTiming] = useAlertmanagerAbility(AlertmanagerAction.CreateMuteTiming);\n\n  const [exportMuteTimingsSupported, exportMuteTimingsAllowed] = useAlertmanagerAbility(\n    AlertmanagerAction.ExportMuteTimings\n  );\n  const columns = useColumns(alertManagerSourceName, hideActions);\n\n  if (isLoading) {\n    return (\n      <LoadingPlaceholder\n        text={t('alerting.mute-timings-table.text-loading-mute-timings', 'Loading mute timings...')}\n      />\n    );\n  }\n\n  if (error) {\n    return (\n      <Alert severity=\"error\" title={t('alerting.mute_timings.error-loading.title', 'Error loading mute timings')}>\n        <Trans i18nKey=\"alerting.mute_timings.error-loading.description\">\n          Could not load mute timings. Please try again later.\n        </Trans>\n      </Alert>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <Stack direction=\"row\" alignItems=\"center\">\n        <Trans i18nKey=\"alerting.mute-timings.description\">\n          Enter specific time intervals when not to send notifications or freeze notifications for recurring periods of\n          time.\n        </Trans>\n        <Spacer />\n        {!hideActions && items.length > 0 && (\n          <Authorize actions={[AlertmanagerAction.CreateMuteTiming]}>\n            <LinkButton\n              className={styles.muteTimingsButtons}\n              icon=\"plus\"\n              variant=\"primary\"\n              href={makeAMLink('alerting/routes/mute-timing/new', alertManagerSourceName)}\n            >\n              <Trans i18nKey=\"alerting.mute-timings.add-mute-timing\">Add mute timing</Trans>\n            </LinkButton>\n          </Authorize>\n        )}\n        {exportMuteTimingsSupported && (\n          <>\n            <Button\n              icon=\"download-alt\"\n              className={styles.muteTimingsButtons}\n              variant=\"secondary\"\n              disabled={!exportMuteTimingsAllowed}\n              onClick={() => showExportAllDrawer(ALL_MUTE_TIMINGS)}\n            >\n              <Trans i18nKey=\"alerting.common.export-all\">Export all</Trans>\n            </Button>\n            {ExportAllDrawer}\n          </>\n        )}\n      </Stack>\n      {items.length > 0 ? (\n        <DynamicTable items={items} cols={columns} pagination={{ itemsPerPage: 25 }} />\n      ) : !hideActions ? (\n        <EmptyAreaWithCTA\n          text={t(\n            'alerting.mute-timings-table.text-havent-created-timings',\n            \"You haven't created any mute timings yet\"\n          )}\n          buttonLabel=\"Add mute timing\"\n          buttonIcon=\"plus\"\n          buttonSize=\"lg\"\n          href={makeAMLink('alerting/routes/mute-timing/new', alertManagerSourceName)}\n          showButton={allowedToCreateMuteTiming}\n        />\n      ) : (\n        <EmptyAreaWithCTA\n          text={t('alerting.mute-timings-table.text-no-mute-timings-configured', 'No mute timings configured')}\n          buttonLabel={''}\n          showButton={false}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction useColumns(alertManagerSourceName: string, hideActions = false) {\n  const [[_editSupported, allowedToEdit], [_deleteSupported, allowedToDelete]] = useAlertmanagerAbilities([\n    AlertmanagerAction.UpdateMuteTiming,\n    AlertmanagerAction.DeleteMuteTiming,\n  ]);\n  const showActions = !hideActions && (allowedToEdit || allowedToDelete);\n\n  return useMemo((): Array<DynamicTableColumnProps<MuteTiming>> => {\n    const columns: Array<DynamicTableColumnProps<MuteTiming>> = [\n      {\n        id: 'name',\n        label: 'Name',\n        renderCell: function renderName({ data }) {\n          return (\n            <div>\n              {data.name}{' '}\n              {data.provisioned && (\n                <ProvisioningBadge tooltip provenance={data.metadata?.annotations?.[PROVENANCE_ANNOTATION]} />\n              )}\n            </div>\n          );\n        },\n        size: 1,\n      },\n      {\n        id: 'timeRange',\n        label: 'Time range',\n        renderCell: ({ data }) => {\n          return renderTimeIntervals(data);\n        },\n        size: 5,\n      },\n    ];\n    if (showActions) {\n      columns.push({\n        id: 'actions',\n        label: 'Actions',\n        alignColumn: 'end',\n        renderCell: ({ data }) => (\n          <MuteTimingActionsButtons muteTiming={data} alertManagerSourceName={alertManagerSourceName} />\n        ),\n        size: 2,\n      });\n    }\n    return columns;\n  }, [showActions, alertManagerSourceName]);\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    display: 'flex',\n    flexFlow: 'column nowrap',\n  }),\n  muteTimingsButtons: css({\n    marginBottom: theme.spacing(2),\n  }),\n});\n","import { css } from '@emotion/css';\nimport { useState } from 'react';\n\nimport { GrafanaTheme2, UrlQueryMap } from '@grafana/data';\nimport { Tab, TabContent, TabsBar, useStyles2 } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { t } from 'app/core/internationalization';\nimport { useMuteTimings } from 'app/features/alerting/unified/components/mute-timings/useMuteTimings';\nimport { NotificationPoliciesList } from 'app/features/alerting/unified/components/notification-policies/NotificationPoliciesList';\nimport { AlertmanagerAction, useAlertmanagerAbility } from 'app/features/alerting/unified/hooks/useAbilities';\n\nimport { AlertmanagerPageWrapper } from './components/AlertingPageWrapper';\nimport { GrafanaAlertmanagerDeliveryWarning } from './components/GrafanaAlertmanagerDeliveryWarning';\nimport { MuteTimingsTable } from './components/mute-timings/MuteTimingsTable';\nimport { useAlertmanager } from './state/AlertmanagerContext';\nimport { withPageErrorBoundary } from './withPageErrorBoundary';\n\nenum ActiveTab {\n  NotificationPolicies = 'notification_policies',\n  MuteTimings = 'mute_timings',\n}\n\nconst NotificationPoliciesTabs = () => {\n  const styles = useStyles2(getStyles);\n\n  // Alertmanager logic and data hooks\n  const { selectedAlertmanager = '' } = useAlertmanager();\n  const [policiesSupported, canSeePoliciesTab] = useAlertmanagerAbility(AlertmanagerAction.ViewNotificationPolicyTree);\n  const [timingsSupported, canSeeTimingsTab] = useAlertmanagerAbility(AlertmanagerAction.ViewMuteTiming);\n  const availableTabs = [\n    canSeePoliciesTab && ActiveTab.NotificationPolicies,\n    canSeeTimingsTab && ActiveTab.MuteTimings,\n  ].filter((tab) => !!tab);\n  const { data: muteTimings = [] } = useMuteTimings({\n    alertmanager: selectedAlertmanager,\n    skip: !canSeeTimingsTab,\n  });\n\n  // Tab state management\n  const [queryParams, setQueryParams] = useQueryParams();\n  const { tab } = getActiveTabFromUrl(queryParams, availableTabs[0]);\n  const [activeTab, setActiveTab] = useState<ActiveTab>(tab);\n\n  const muteTimingsTabActive = activeTab === ActiveTab.MuteTimings;\n  const policyTreeTabActive = activeTab === ActiveTab.NotificationPolicies;\n\n  const numberOfMuteTimings = muteTimings.length;\n\n  return (\n    <>\n      <GrafanaAlertmanagerDeliveryWarning currentAlertmanager={selectedAlertmanager} />\n      <TabsBar>\n        {policiesSupported && canSeePoliciesTab && (\n          <Tab\n            label={t('alerting.notification-policies-tabs.label-notification-policies', 'Notification Policies')}\n            active={policyTreeTabActive}\n            onChangeTab={() => {\n              setActiveTab(ActiveTab.NotificationPolicies);\n              setQueryParams({ tab: ActiveTab.NotificationPolicies });\n            }}\n          />\n        )}\n        {timingsSupported && canSeeTimingsTab && (\n          <Tab\n            label={t('alerting.notification-policies-tabs.label-mute-timings', 'Mute Timings')}\n            active={muteTimingsTabActive}\n            counter={numberOfMuteTimings}\n            onChangeTab={() => {\n              setActiveTab(ActiveTab.MuteTimings);\n              setQueryParams({ tab: ActiveTab.MuteTimings });\n            }}\n          />\n        )}\n      </TabsBar>\n      <TabContent className={styles.tabContent}>\n        {policyTreeTabActive && <NotificationPoliciesList />}\n        {muteTimingsTabActive && <MuteTimingsTable />}\n      </TabContent>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tabContent: css({\n    marginTop: theme.spacing(2),\n  }),\n});\n\ninterface QueryParamValues {\n  tab: ActiveTab;\n}\n\nfunction getActiveTabFromUrl(queryParams: UrlQueryMap, defaultTab: ActiveTab): QueryParamValues {\n  let tab = defaultTab;\n\n  if (queryParams.tab === ActiveTab.NotificationPolicies) {\n    tab = ActiveTab.NotificationPolicies;\n  }\n\n  if (queryParams.tab === ActiveTab.MuteTimings) {\n    tab = ActiveTab.MuteTimings;\n  }\n\n  return {\n    tab,\n  };\n}\n\nfunction NotificationPoliciesPage() {\n  return (\n    <AlertmanagerPageWrapper navId=\"am-routes\" accessType=\"notification\">\n      <NotificationPoliciesTabs />\n    </AlertmanagerPageWrapper>\n  );\n}\n\nexport default withPageErrorBoundary(NotificationPoliciesPage);\n","import { chain, filter } from 'lodash';\nimport { PropsWithChildren } from 'react';\n\nimport {\n  Abilities,\n  Action,\n  AlertingAction,\n  AlertmanagerAction,\n  useAlertingAbilities,\n  useAllAlertmanagerAbilities,\n} from '../hooks/useAbilities';\n\ninterface AuthorizeProps extends PropsWithChildren {\n  actions: AlertmanagerAction[] | AlertingAction[];\n}\n\nexport const Authorize = ({ actions, children }: AuthorizeProps) => {\n  const alertmanagerActions = filter(actions, isAlertmanagerAction) as AlertmanagerAction[];\n  const alertSourceActions = filter(actions, isAlertingAction) as AlertingAction[];\n\n  if (alertmanagerActions.length) {\n    return <AuthorizeAlertmanager actions={alertmanagerActions}>{children}</AuthorizeAlertmanager>;\n  }\n\n  if (alertSourceActions.length) {\n    return <AuthorizeAlertsource actions={alertSourceActions}>{children}</AuthorizeAlertsource>;\n  }\n\n  return null;\n};\n\ninterface ActionsProps<T extends Action> extends PropsWithChildren {\n  actions: T[];\n}\n\nconst AuthorizeAlertmanager = ({ actions, children }: ActionsProps<AlertmanagerAction>) => {\n  const alertmanagerAbilties = useAllAlertmanagerAbilities();\n  const allowed = actionsAllowed(alertmanagerAbilties, actions);\n\n  if (allowed) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n\nconst AuthorizeAlertsource = ({ actions, children }: ActionsProps<AlertingAction>) => {\n  const alertSourceAbilities = useAlertingAbilities();\n  const allowed = actionsAllowed(alertSourceAbilities, actions);\n\n  if (allowed) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n\n// TODO add some authorize helper components for alert source and individual alert rules\n\n// check if some action is allowed from the abilities\nfunction actionsAllowed<T extends Action>(abilities: Abilities<T>, actions: T[]) {\n  return chain(abilities)\n    .pick(actions)\n    .values()\n    .value()\n    .some(([_supported, allowed]) => allowed === true);\n}\n\nfunction isAlertmanagerAction(action: AlertmanagerAction) {\n  return Object.values(AlertmanagerAction).includes(action);\n}\n\nfunction isAlertingAction(action: AlertingAction) {\n  return Object.values(AlertingAction).includes(action);\n}\n","import { css } from '@emotion/css';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nexport const EmptyArea = ({ children }: React.PropsWithChildren<{}>) => {\n  const styles = useStyles2(getStyles);\n\n  return <div className={styles.container}>{children}</div>;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      backgroundColor: theme.colors.background.secondary,\n      color: theme.colors.text.secondary,\n      padding: theme.spacing(4),\n      textAlign: 'center',\n    }),\n  };\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { LinkButton, useStyles2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AlertState, AlertmanagerAlert } from 'app/plugins/datasource/alertmanager/types';\nimport { AccessControlAction } from 'app/types';\n\nimport { AlertmanagerAction } from '../../hooks/useAbilities';\nimport { isGrafanaRulesSource } from '../../utils/datasource';\nimport { makeAMLink, makeLabelBasedSilenceLink } from '../../utils/misc';\nimport { AnnotationDetailsField } from '../AnnotationDetailsField';\nimport { Authorize } from '../Authorize';\n\ninterface AmNotificationsAlertDetailsProps {\n  alertManagerSourceName: string;\n  alert: AlertmanagerAlert;\n}\n\nexport const AlertDetails = ({ alert, alertManagerSourceName }: AmNotificationsAlertDetailsProps) => {\n  const styles = useStyles2(getStyles);\n\n  // For Grafana Managed alerts the Generator URL redirects to the alert rule edit page, so update permission is required\n  // For external alert manager the Generator URL redirects to an external service which we don't control\n  const isGrafanaSource = isGrafanaRulesSource(alertManagerSourceName);\n  const isSeeSourceButtonEnabled = isGrafanaSource\n    ? contextSrv.hasPermission(AccessControlAction.AlertingRuleRead)\n    : true;\n\n  return (\n    <>\n      <div className={styles.actionsRow}>\n        {alert.status.state === AlertState.Suppressed && (\n          <Authorize actions={[AlertmanagerAction.CreateSilence, AlertmanagerAction.UpdateSilence]}>\n            <LinkButton\n              href={`${makeAMLink(\n                '/alerting/silences',\n                alertManagerSourceName\n              )}&silenceIds=${alert.status.silencedBy.join(',')}`}\n              className={styles.button}\n              icon={'bell'}\n              size={'sm'}\n            >\n              <Trans i18nKey=\"alerting.alert-details.manage-silences\">Manage silences</Trans>\n            </LinkButton>\n          </Authorize>\n        )}\n        {alert.status.state === AlertState.Active && (\n          <Authorize actions={[AlertmanagerAction.CreateSilence]}>\n            <LinkButton\n              href={makeLabelBasedSilenceLink(alertManagerSourceName, alert.labels)}\n              className={styles.button}\n              icon={'bell-slash'}\n              size={'sm'}\n            >\n              <Trans i18nKey=\"alerting.alert-details.silence\">Silence</Trans>\n            </LinkButton>\n          </Authorize>\n        )}\n        {isSeeSourceButtonEnabled && alert.generatorURL && (\n          <LinkButton className={styles.button} href={alert.generatorURL} icon={'chart-line'} size={'sm'}>\n            {isGrafanaSource ? 'See alert rule' : 'See source'}\n          </LinkButton>\n        )}\n      </div>\n      {Object.entries(alert.annotations).map(([annotationKey, annotationValue]) => (\n        <AnnotationDetailsField key={annotationKey} annotationKey={annotationKey} value={annotationValue} />\n      ))}\n      <div className={styles.receivers}>\n        Receivers:{' '}\n        {alert.receivers\n          .map(({ name }) => name)\n          .filter((name) => !!name)\n          .join(', ')}\n      </div>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  button: css({\n    '& + &': {\n      marginLeft: theme.spacing(1),\n    },\n  }),\n  actionsRow: css({\n    padding: `${theme.spacing(2, 0)} !important`,\n    borderBottom: `1px solid ${theme.colors.border.medium}`,\n  }),\n  receivers: css({\n    padding: theme.spacing(1, 0),\n  }),\n});\n","import { css } from '@emotion/css';\nimport { useMemo } from 'react';\n\nimport { GrafanaTheme2, intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { AlertmanagerAlert } from 'app/plugins/datasource/alertmanager/types';\n\nimport { AlertLabels } from '../AlertLabels';\nimport { DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { DynamicTableWithGuidelines } from '../DynamicTableWithGuidelines';\nimport { AmAlertStateTag } from '../silences/AmAlertStateTag';\n\nimport { AlertDetails } from './AlertDetails';\n\ninterface Props {\n  alerts: AlertmanagerAlert[];\n  alertManagerSourceName: string;\n}\n\ntype AlertGroupAlertsTableColumnProps = DynamicTableColumnProps<AlertmanagerAlert>;\ntype AlertGroupAlertsTableItemProps = DynamicTableItemProps<AlertmanagerAlert>;\n\nexport const AlertGroupAlertsTable = ({ alerts, alertManagerSourceName }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const columns = useMemo(\n    (): AlertGroupAlertsTableColumnProps[] => [\n      {\n        id: 'state',\n        label: 'Notification state',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: alert }) => (\n          <>\n            <AmAlertStateTag state={alert.status.state} />\n            <span className={styles.duration}>\n              for{' '}\n              {intervalToAbbreviatedDurationString({\n                start: new Date(alert.startsAt),\n                end: new Date(alert.endsAt),\n              })}\n            </span>\n          </>\n        ),\n        size: '220px',\n      },\n      {\n        id: 'labels',\n        label: 'Instance labels',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: { labels } }) => <AlertLabels labels={labels} size=\"sm\" />,\n        size: 1,\n      },\n    ],\n    [styles]\n  );\n\n  const items = useMemo(\n    (): AlertGroupAlertsTableItemProps[] =>\n      alerts.map((alert) => ({\n        id: alert.fingerprint,\n        data: alert,\n      })),\n    [alerts]\n  );\n\n  return (\n    <div className={styles.tableWrapper} data-testid=\"alert-group-table\">\n      <DynamicTableWithGuidelines\n        cols={columns}\n        items={items}\n        isExpandable={true}\n        renderExpandedContent={({ data: alert }) => (\n          <AlertDetails alert={alert} alertManagerSourceName={alertManagerSourceName} />\n        )}\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tableWrapper: css({\n    marginTop: theme.spacing(3),\n    [theme.breakpoints.up('md')]: {\n      marginLeft: theme.spacing(4.5),\n    },\n  }),\n  duration: css({\n    marginLeft: theme.spacing(1),\n    fontSize: theme.typography.bodySmall.fontSize,\n  }),\n});\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { AlertState } from 'app/plugins/datasource/alertmanager/types';\n\nexport const getNotificationsTextColors = (theme: GrafanaTheme2) => ({\n  [AlertState.Active]: css({\n    color: theme.colors.error.text,\n  }),\n  [AlertState.Suppressed]: css({\n    color: theme.colors.primary.text,\n  }),\n  [AlertState.Unprocessed]: css({\n    color: theme.colors.secondary.text,\n  }),\n});\n","import pluralize from 'pluralize';\n\nimport { useStyles2 } from '@grafana/ui';\nimport { AlertState, AlertmanagerGroup } from 'app/plugins/datasource/alertmanager/types';\n\nimport { getNotificationsTextColors } from '../../styles/notifications';\n\ninterface Props {\n  group: AlertmanagerGroup;\n}\n\nexport const AlertGroupHeader = ({ group }: Props) => {\n  const textStyles = useStyles2(getNotificationsTextColors);\n  const total = group.alerts.length;\n  const countByStatus = group.alerts.reduce(\n    (statusObj, alert) => {\n      if (statusObj[alert.status.state]) {\n        statusObj[alert.status.state] += 1;\n      } else {\n        statusObj[alert.status.state] = 1;\n      }\n      return statusObj;\n    },\n    {} as Record<AlertState, number>\n  );\n\n  return (\n    <div>\n      {`${total} ${pluralize('alert', total)}: `}\n      {Object.entries(countByStatus).map(([state, count], index) => {\n        return (\n          <span\n            key={`${JSON.stringify(group.labels)}-notifications-${index}`}\n            className={textStyles[state as AlertState]}\n          >\n            {index > 0 && ', '}\n            {`${count} ${state}`}\n          </span>\n        );\n      })}\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack, TextLink, useStyles2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\nimport { AlertmanagerGroup } from 'app/plugins/datasource/alertmanager/types';\n\nimport { createContactPointSearchLink } from '../../utils/misc';\nimport { AlertLabels } from '../AlertLabels';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { MetaText } from '../MetaText';\n\nimport { AlertGroupAlertsTable } from './AlertGroupAlertsTable';\nimport { AlertGroupHeader } from './AlertGroupHeader';\n\ninterface Props {\n  group: AlertmanagerGroup;\n  alertManagerSourceName: string;\n}\n\nexport const AlertGroup = ({ alertManagerSourceName, group }: Props) => {\n  const [isCollapsed, setIsCollapsed] = useState<boolean>(true);\n  const styles = useStyles2(getStyles);\n\n  // When group is grouped, receiver.name is 'NONE' as it can contain multiple receivers\n  const receiverInGroup = group.receiver.name !== 'NONE';\n  const contactPoint = group.receiver.name;\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.header}>\n        <div className={styles.group} data-testid=\"alert-group\">\n          <CollapseToggle\n            size=\"sm\"\n            isCollapsed={isCollapsed}\n            onToggle={() => setIsCollapsed(!isCollapsed)}\n            data-testid=\"alert-group-collapse-toggle\"\n          />\n          {Object.keys(group.labels).length ? (\n            <Stack direction=\"row\" alignItems=\"center\">\n              <AlertLabels labels={group.labels} size=\"sm\" />\n\n              {receiverInGroup && (\n                <MetaText icon=\"at\">\n                  Delivered to{' '}\n                  <TextLink\n                    href={createContactPointSearchLink(contactPoint, alertManagerSourceName)}\n                    variant=\"bodySmall\"\n                    color=\"primary\"\n                    inline={false}\n                  >\n                    {group.receiver.name}\n                  </TextLink>\n                </MetaText>\n              )}\n            </Stack>\n          ) : (\n            <span>\n              <Trans i18nKey=\"alerting.alert-group.no-grouping\">No grouping</Trans>\n            </span>\n          )}\n        </div>\n        <AlertGroupHeader group={group} />\n      </div>\n      {!isCollapsed && <AlertGroupAlertsTable alertManagerSourceName={alertManagerSourceName} alerts={group.alerts} />}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    '& + &': {\n      marginTop: theme.spacing(2),\n    },\n  }),\n  header: css({\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: theme.spacing(1),\n    backgroundColor: theme.colors.background.secondary,\n    width: '100%',\n  }),\n  group: css({\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n  }),\n});\n","import { css } from '@emotion/css';\nimport { take, takeRight, uniqueId } from 'lodash';\nimport { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack, getTagColorsFromName, useStyles2 } from '@grafana/ui';\nimport { ObjectMatcher } from 'app/plugins/datasource/alertmanager/types';\n\nimport { MatcherFormatter, matcherFormatter } from '../../utils/matchers';\nimport { PopupCard } from '../HoverCard';\n\ntype MatchersProps = { matchers: ObjectMatcher[]; formatter?: MatcherFormatter };\n\n// renders the first N number of matchers\nconst Matchers: FC<MatchersProps> = ({ matchers, formatter = 'default' }) => {\n  const styles = useStyles2(getStyles);\n\n  const NUM_MATCHERS = 5;\n\n  const firstFew = take(matchers, NUM_MATCHERS);\n  const rest = takeRight(matchers, matchers.length - NUM_MATCHERS);\n  const hasMoreMatchers = rest.length > 0;\n\n  return (\n    <span data-testid=\"label-matchers\">\n      <Stack direction=\"row\" gap={1} alignItems=\"center\" wrap={'wrap'}>\n        {firstFew.map((matcher) => (\n          <MatcherBadge key={uniqueId()} matcher={matcher} formatter={formatter} />\n        ))}\n        {/* TODO hover state to show all matchers we're not showing */}\n        {hasMoreMatchers && (\n          <PopupCard\n            arrow\n            placement=\"top\"\n            content={\n              <>\n                {rest.map((matcher) => (\n                  <MatcherBadge key={uniqueId()} matcher={matcher} />\n                ))}\n              </>\n            }\n          >\n            <span>\n              <div className={styles.metadata}>{`and ${rest.length} more`}</div>\n            </span>\n          </PopupCard>\n        )}\n      </Stack>\n    </span>\n  );\n};\n\ninterface MatcherBadgeProps {\n  matcher: ObjectMatcher;\n  formatter?: MatcherFormatter;\n}\n\nconst MatcherBadge: FC<MatcherBadgeProps> = ({ matcher, formatter = 'default' }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.matcher(matcher[0]).wrapper}>\n      <Stack direction=\"row\" gap={0} alignItems=\"baseline\">\n        {matcherFormatter[formatter](matcher)}\n      </Stack>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  matcher: (label: string) => {\n    const { color, borderColor } = getTagColorsFromName(label);\n\n    return {\n      wrapper: css({\n        color: '#fff',\n        background: color,\n        padding: `${theme.spacing(0.33)} ${theme.spacing(0.66)}`,\n        fontSize: theme.typography.bodySmall.fontSize,\n\n        border: `solid 1px ${borderColor}`,\n        borderRadius: theme.shape.borderRadius(2),\n\n        // Ensure we preserve whitespace, as otherwise it's not noticeable _at all_\n        // when rendering the matcher, and is only noticeable when editing\n        whiteSpace: 'pre',\n      }),\n    };\n  },\n  metadata: css({\n    color: theme.colors.text.secondary,\n\n    fontSize: theme.typography.bodySmall.fontSize,\n    fontWeight: theme.typography.bodySmall.fontWeight,\n  }),\n});\n\nexport { Matchers };\n","/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nconst proxyMarker = Symbol(\"Comlink.proxy\");\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\nconst finalizer = Symbol(\"Comlink.finalizer\");\nconst throwMarker = Symbol(\"Comlink.thrown\");\nconst isObject = (val) => (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler = {\n    canHandle: (val) => isObject(val) && val[proxyMarker],\n    serialize(obj) {\n        const { port1, port2 } = new MessageChannel();\n        expose(obj, port1);\n        return [port2, [port2]];\n    },\n    deserialize(port) {\n        port.start();\n        return wrap(port);\n    },\n};\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler = {\n    canHandle: (value) => isObject(value) && throwMarker in value,\n    serialize({ value }) {\n        let serialized;\n        if (value instanceof Error) {\n            serialized = {\n                isError: true,\n                value: {\n                    message: value.message,\n                    name: value.name,\n                    stack: value.stack,\n                },\n            };\n        }\n        else {\n            serialized = { isError: false, value };\n        }\n        return [serialized, []];\n    },\n    deserialize(serialized) {\n        if (serialized.isError) {\n            throw Object.assign(new Error(serialized.value.message), serialized.value);\n        }\n        throw serialized.value;\n    },\n};\n/**\n * Allows customizing the serialization of certain values.\n */\nconst transferHandlers = new Map([\n    [\"proxy\", proxyTransferHandler],\n    [\"throw\", throwTransferHandler],\n]);\nfunction isAllowedOrigin(allowedOrigins, origin) {\n    for (const allowedOrigin of allowedOrigins) {\n        if (origin === allowedOrigin || allowedOrigin === \"*\") {\n            return true;\n        }\n        if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction expose(obj, ep = globalThis, allowedOrigins = [\"*\"]) {\n    ep.addEventListener(\"message\", function callback(ev) {\n        if (!ev || !ev.data) {\n            return;\n        }\n        if (!isAllowedOrigin(allowedOrigins, ev.origin)) {\n            console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);\n            return;\n        }\n        const { id, type, path } = Object.assign({ path: [] }, ev.data);\n        const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n        let returnValue;\n        try {\n            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n            const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n            switch (type) {\n                case \"GET\" /* MessageType.GET */:\n                    {\n                        returnValue = rawValue;\n                    }\n                    break;\n                case \"SET\" /* MessageType.SET */:\n                    {\n                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n                        returnValue = true;\n                    }\n                    break;\n                case \"APPLY\" /* MessageType.APPLY */:\n                    {\n                        returnValue = rawValue.apply(parent, argumentList);\n                    }\n                    break;\n                case \"CONSTRUCT\" /* MessageType.CONSTRUCT */:\n                    {\n                        const value = new rawValue(...argumentList);\n                        returnValue = proxy(value);\n                    }\n                    break;\n                case \"ENDPOINT\" /* MessageType.ENDPOINT */:\n                    {\n                        const { port1, port2 } = new MessageChannel();\n                        expose(obj, port2);\n                        returnValue = transfer(port1, [port1]);\n                    }\n                    break;\n                case \"RELEASE\" /* MessageType.RELEASE */:\n                    {\n                        returnValue = undefined;\n                    }\n                    break;\n                default:\n                    return;\n            }\n        }\n        catch (value) {\n            returnValue = { value, [throwMarker]: 0 };\n        }\n        Promise.resolve(returnValue)\n            .catch((value) => {\n            return { value, [throwMarker]: 0 };\n        })\n            .then((returnValue) => {\n            const [wireValue, transferables] = toWireValue(returnValue);\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n            if (type === \"RELEASE\" /* MessageType.RELEASE */) {\n                // detach and deactive after sending release response above.\n                ep.removeEventListener(\"message\", callback);\n                closeEndPoint(ep);\n                if (finalizer in obj && typeof obj[finalizer] === \"function\") {\n                    obj[finalizer]();\n                }\n            }\n        })\n            .catch((error) => {\n            // Send Serialization Error To Caller\n            const [wireValue, transferables] = toWireValue({\n                value: new TypeError(\"Unserializable return value\"),\n                [throwMarker]: 0,\n            });\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n        });\n    });\n    if (ep.start) {\n        ep.start();\n    }\n}\nfunction isMessagePort(endpoint) {\n    return endpoint.constructor.name === \"MessagePort\";\n}\nfunction closeEndPoint(endpoint) {\n    if (isMessagePort(endpoint))\n        endpoint.close();\n}\nfunction wrap(ep, target) {\n    const pendingListeners = new Map();\n    ep.addEventListener(\"message\", function handleMessage(ev) {\n        const { data } = ev;\n        if (!data || !data.id) {\n            return;\n        }\n        const resolver = pendingListeners.get(data.id);\n        if (!resolver) {\n            return;\n        }\n        try {\n            resolver(data);\n        }\n        finally {\n            pendingListeners.delete(data.id);\n        }\n    });\n    return createProxy(ep, pendingListeners, [], target);\n}\nfunction throwIfProxyReleased(isReleased) {\n    if (isReleased) {\n        throw new Error(\"Proxy has been released and is not useable\");\n    }\n}\nfunction releaseEndpoint(ep) {\n    return requestResponseMessage(ep, new Map(), {\n        type: \"RELEASE\" /* MessageType.RELEASE */,\n    }).then(() => {\n        closeEndPoint(ep);\n    });\n}\nconst proxyCounter = new WeakMap();\nconst proxyFinalizers = \"FinalizationRegistry\" in globalThis &&\n    new FinalizationRegistry((ep) => {\n        const newCount = (proxyCounter.get(ep) || 0) - 1;\n        proxyCounter.set(ep, newCount);\n        if (newCount === 0) {\n            releaseEndpoint(ep);\n        }\n    });\nfunction registerProxy(proxy, ep) {\n    const newCount = (proxyCounter.get(ep) || 0) + 1;\n    proxyCounter.set(ep, newCount);\n    if (proxyFinalizers) {\n        proxyFinalizers.register(proxy, ep, proxy);\n    }\n}\nfunction unregisterProxy(proxy) {\n    if (proxyFinalizers) {\n        proxyFinalizers.unregister(proxy);\n    }\n}\nfunction createProxy(ep, pendingListeners, path = [], target = function () { }) {\n    let isProxyReleased = false;\n    const proxy = new Proxy(target, {\n        get(_target, prop) {\n            throwIfProxyReleased(isProxyReleased);\n            if (prop === releaseProxy) {\n                return () => {\n                    unregisterProxy(proxy);\n                    releaseEndpoint(ep);\n                    pendingListeners.clear();\n                    isProxyReleased = true;\n                };\n            }\n            if (prop === \"then\") {\n                if (path.length === 0) {\n                    return { then: () => proxy };\n                }\n                const r = requestResponseMessage(ep, pendingListeners, {\n                    type: \"GET\" /* MessageType.GET */,\n                    path: path.map((p) => p.toString()),\n                }).then(fromWireValue);\n                return r.then.bind(r);\n            }\n            return createProxy(ep, pendingListeners, [...path, prop]);\n        },\n        set(_target, prop, rawValue) {\n            throwIfProxyReleased(isProxyReleased);\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n            // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n            const [value, transferables] = toWireValue(rawValue);\n            return requestResponseMessage(ep, pendingListeners, {\n                type: \"SET\" /* MessageType.SET */,\n                path: [...path, prop].map((p) => p.toString()),\n                value,\n            }, transferables).then(fromWireValue);\n        },\n        apply(_target, _thisArg, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const last = path[path.length - 1];\n            if (last === createEndpoint) {\n                return requestResponseMessage(ep, pendingListeners, {\n                    type: \"ENDPOINT\" /* MessageType.ENDPOINT */,\n                }).then(fromWireValue);\n            }\n            // We just pretend that `bind()` didn’t happen.\n            if (last === \"bind\") {\n                return createProxy(ep, pendingListeners, path.slice(0, -1));\n            }\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, pendingListeners, {\n                type: \"APPLY\" /* MessageType.APPLY */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n        construct(_target, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, pendingListeners, {\n                type: \"CONSTRUCT\" /* MessageType.CONSTRUCT */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n    });\n    registerProxy(proxy, ep);\n    return proxy;\n}\nfunction myFlat(arr) {\n    return Array.prototype.concat.apply([], arr);\n}\nfunction processArguments(argumentList) {\n    const processed = argumentList.map(toWireValue);\n    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\nconst transferCache = new WeakMap();\nfunction transfer(obj, transfers) {\n    transferCache.set(obj, transfers);\n    return obj;\n}\nfunction proxy(obj) {\n    return Object.assign(obj, { [proxyMarker]: true });\n}\nfunction windowEndpoint(w, context = globalThis, targetOrigin = \"*\") {\n    return {\n        postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\n        addEventListener: context.addEventListener.bind(context),\n        removeEventListener: context.removeEventListener.bind(context),\n    };\n}\nfunction toWireValue(value) {\n    for (const [name, handler] of transferHandlers) {\n        if (handler.canHandle(value)) {\n            const [serializedValue, transferables] = handler.serialize(value);\n            return [\n                {\n                    type: \"HANDLER\" /* WireValueType.HANDLER */,\n                    name,\n                    value: serializedValue,\n                },\n                transferables,\n            ];\n        }\n    }\n    return [\n        {\n            type: \"RAW\" /* WireValueType.RAW */,\n            value,\n        },\n        transferCache.get(value) || [],\n    ];\n}\nfunction fromWireValue(value) {\n    switch (value.type) {\n        case \"HANDLER\" /* WireValueType.HANDLER */:\n            return transferHandlers.get(value.name).deserialize(value.value);\n        case \"RAW\" /* WireValueType.RAW */:\n            return value.value;\n    }\n}\nfunction requestResponseMessage(ep, pendingListeners, msg, transfers) {\n    return new Promise((resolve) => {\n        const id = generateUUID();\n        pendingListeners.set(id, resolve);\n        if (ep.start) {\n            ep.start();\n        }\n        ep.postMessage(Object.assign({ id }, msg), transfers);\n    });\n}\nfunction generateUUID() {\n    return new Array(4)\n        .fill(0)\n        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n        .join(\"-\");\n}\n\nexport { createEndpoint, expose, finalizer, proxy, proxyMarker, releaseProxy, transfer, transferHandlers, windowEndpoint, wrap };\n//# sourceMappingURL=comlink.mjs.map\n","import { CorsWorker as Worker } from 'app/core/utils/CorsWorker';\n\n// CorsWorker is needed as a workaround for CORS issue caused\n// by static assets served from an url different from origin\nexport const createWorker = () => new Worker(new URL('./routeGroupsMatcher.worker.ts', import.meta.url));\n","import * as comlink from 'comlink';\nimport { useCallback, useEffect } from 'react';\n\nimport { AlertmanagerGroup, RouteWithID } from '../../../plugins/datasource/alertmanager/types';\nimport { Labels } from '../../../types/unified-alerting-dto';\n\nimport { logError, logInfo } from './Analytics';\nimport { createWorker } from './createRouteGroupsMatcherWorker';\nimport type { MatchOptions, RouteGroupsMatcher } from './routeGroupsMatcher';\n\nlet routeMatcher: comlink.Remote<RouteGroupsMatcher> | undefined;\n\n// Load worker loads the worker if it's not loaded yet\n// and returns a function to dispose of the worker\n// We do it to enable feature toggling. If the feature is disabled we don't wont to load the worker code at all\n// An alternative way would be to move all this code to the hook below, but it will create and terminate the worker much more often\nfunction loadWorker() {\n  let worker: Worker | undefined;\n\n  if (routeMatcher === undefined) {\n    try {\n      worker = createWorker();\n      routeMatcher = comlink.wrap<RouteGroupsMatcher>(worker);\n    } catch (e: unknown) {\n      if (e instanceof Error) {\n        logError(e);\n      }\n    }\n  }\n\n  const disposeWorker = () => {\n    if (worker && routeMatcher) {\n      routeMatcher[comlink.releaseProxy]();\n      worker.terminate();\n\n      routeMatcher = undefined;\n      worker = undefined;\n    }\n  };\n\n  return { disposeWorker };\n}\n\nfunction validateWorker(matcher: typeof routeMatcher): asserts matcher is comlink.Remote<RouteGroupsMatcher> {\n  if (!routeMatcher) {\n    throw new Error('Route Matcher has not been initialized');\n  }\n}\n\nexport function useRouteGroupsMatcher() {\n  useEffect(() => {\n    const { disposeWorker } = loadWorker();\n    return disposeWorker;\n  }, []);\n\n  const getRouteGroupsMap = useCallback(\n    async (rootRoute: RouteWithID, alertGroups: AlertmanagerGroup[], options?: MatchOptions) => {\n      validateWorker(routeMatcher);\n\n      const startTime = performance.now();\n\n      const result = await routeMatcher.getRouteGroupsMap(rootRoute, alertGroups, options);\n\n      const timeSpent = performance.now() - startTime;\n\n      logInfo(`Route Groups Matched in  ${timeSpent} ms`, {\n        matchingTime: timeSpent.toString(),\n        alertGroupsCount: alertGroups.length.toString(),\n        // Counting all nested routes might be too time-consuming, so we only count the first level\n        topLevelRoutesCount: rootRoute.routes?.length.toString() ?? '0',\n      });\n\n      return result;\n    },\n    []\n  );\n\n  const matchInstancesToRoute = useCallback(\n    async (rootRoute: RouteWithID, instancesToMatch: Labels[], options?: MatchOptions) => {\n      validateWorker(routeMatcher);\n\n      const startTime = performance.now();\n\n      const result = await routeMatcher.matchInstancesToRoute(rootRoute, instancesToMatch, options);\n\n      const timeSpent = performance.now() - startTime;\n\n      logInfo(`Instances Matched in  ${timeSpent} ms`, {\n        matchingTime: timeSpent.toString(),\n        instancesToMatchCount: instancesToMatch.length.toString(),\n        // Counting all nested routes might be too time-consuming, so we only count the first level\n        topLevelRoutesCount: rootRoute.routes?.length.toString() ?? '0',\n      });\n\n      return result;\n    },\n    []\n  );\n\n  return { getRouteGroupsMap, matchInstancesToRoute };\n}\n","import { isUndefined, omitBy } from 'lodash';\n\nimport { MuteTimeInterval, TimeInterval, TimeRange } from 'app/plugins/datasource/alertmanager/types';\n\nimport { MuteTimingFields, MuteTimingIntervalFields } from '../types/mute-timing-form';\n\nexport const DAYS_OF_THE_WEEK = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];\n\nexport const MONTHS = [\n  'january',\n  'february',\n  'march',\n  'april',\n  'may',\n  'june',\n  'july',\n  'august',\n  'september',\n  'october',\n  'november',\n  'december',\n];\n\nexport const defaultTimeInterval: MuteTimingIntervalFields = {\n  times: [{ start_time: '', end_time: '' }],\n  weekdays: '',\n  days_of_month: '',\n  months: '',\n  years: '',\n  location: '',\n  disable: false,\n};\n\nexport const validateArrayField = (\n  value: string | undefined,\n  validateValue: (input: string) => boolean,\n  invalidText: string\n) => {\n  if (value) {\n    return (\n      value\n        .split(',')\n        .map((x) => x.trim())\n        .every((entry) => entry.split(':').every(validateValue)) || invalidText\n    );\n  } else {\n    return true;\n  }\n};\n\nconst convertStringToArray = (str?: string) => {\n  return str ? str.split(',').map((s) => s.trim()) : undefined;\n};\n\nexport const createMuteTiming = (fields: MuteTimingFields): MuteTimeInterval => {\n  const timeIntervals: TimeInterval[] = fields.time_intervals.map(\n    ({ times, weekdays, days_of_month, months, years, location, disable }) => {\n      const interval = {\n        times: convertTimesToDto(times, disable),\n        weekdays: convertStringToArray(weekdays)?.map((v) => v.toLowerCase()),\n        days_of_month: convertStringToArray(days_of_month),\n        months: convertStringToArray(months),\n        years: convertStringToArray(years),\n        location: location ? location : undefined,\n      };\n\n      return omitBy(interval, isUndefined);\n    }\n  );\n\n  return {\n    name: fields.name,\n    time_intervals: timeIntervals,\n  };\n};\n\n/*\n * Convert times from form to dto, if disable is true, then return an empty array as times\n If the times array is empty and disable is false, then return undefined\n * @param muteTimeInterval\n * @returns MuteTimingFields\n *\n */\nfunction convertTimesToDto(times: TimeRange[] | undefined, disable: boolean) {\n  if (disable) {\n    return [];\n  }\n  const timesToReturn = times?.filter(({ start_time, end_time }) => !!start_time && !!end_time);\n  return timesToReturn?.length ? timesToReturn : undefined;\n}\n\n/*\n * Get disable field from dto, if any of the lists is an empty array, then the disable field is true\n * @param muteTimeInterval\n * @returns MuteTimingFields\n *\n */\n\nexport function isTimeIntervalDisabled(intervals: TimeInterval): boolean {\n  if (\n    intervals.times?.length === 0 ||\n    intervals.weekdays?.length === 0 ||\n    intervals.days_of_month?.length === 0 ||\n    intervals.months?.length === 0 ||\n    intervals.years?.length === 0\n  ) {\n    return true;\n  }\n  return false;\n}\n\n/*\n   Return true if all the time intervals are disabled\n  * @param muteTimeInterval\n  * @returns MuteTimingFields\n  * */\nexport function isDisabled(muteTiming: MuteTimeInterval) {\n  return muteTiming.time_intervals.every((timeInterval) => isTimeIntervalDisabled(timeInterval));\n}\n"],"names":["parseIntegrationName","integrationName","matches","contactPointsStateDtoToModel","receiversStateDto","contactPointsState","cpState","receiverState","integrationStatusDTO","integrationType","getIntegrationType","errorsCount","prevCount","fetchContactPointsState","alertManagerSourceName","response","lastValueFrom","receiversApi","alertingApi","build","amSourceName","error","useGetContactPointsState","contactPointsStateEmpty","NotificationPoliciesFilter","onChangeReceiver","onChangeMatchers","matchingCount","contactPointsSupported","canSeeContactPoints","searchParams","setSearchParams","useURLSearchParams","searchInputRef","queryString","contactPoint","getNotificationPoliciesFilters","styles","getStyles","handleChangeLabels","matchers","clearFilters","hasFilters","inputValid","Stack","Field","Label","Tooltip","Icon","Input","event","ContactPointSelector","option","Button","Text","findRoutesMatchingPredicate","routeTree","predicateFn","matchingRouteIdsWithPath","findMatch","route","path","newPath","previousPath","findRoutesByMatchers","labelMatchersFilter","filters","unquoteMatchersIfRequired","routeMatchers","filter","matcher","key","operator","value","AlertGroupsSummary","active","suppressed","unprocessed","statsComponents","total","Badge","handleContactPointSelect","onChange","AmRootRouteForm","actionButtons","onSubmit","isTimingOptionsExpanded","setIsTimingOptionsExpanded","groupByOptions","setGroupByOptions","defaultValues","handleSubmit","register","control","errors","setValue","getValues","ref","field","changeValue","Link","opt","opts","Collapse","PromDurationInput","groupInterval","AmRoutesExpandedForm","defaults","formStyles","selectedAlertmanager","canSeeMuteTimings","emptyMatcher","formAmRoute","watch","fields","append","remove","index","Select","IconButton","Switch","FieldValidationMessage","routeTimingsFields","MuteTimingsSelector","theme","commonSpacing","NotificationPoliciesErrorAlert","title","errMessage","Alert","useAddPolicyModal","handleAdd","loading","showModal","setShowModal","insertPosition","setInsertPosition","referenceRoute","setReferenceRoute","handleDismiss","setError","handleShow","position","UpdatingModal","Modal","newRoute","useEditPolicyModal","handleUpdate","isDefaultPolicy","setIsDefaultPolicy","setRoute","values","useDeletePolicyModal","handleDelete","useAlertGroupsModal","alertGroups","setAlertGroups","setMatchers","formatter","setFormatter","instancesByState","instances","group","instance","Matchers","AlertGroup","isOpen","Spinner","GrafanaPoliciesExporterPreview","exportFormat","onClose","policiesDefinition","isFetching","alertRuleApi","downloadFileName","LoadingPlaceholder","FileExportPreview","GrafanaPoliciesExporter","activeTab","setActiveTab","GrafanaExportDrawer","POLICIES_PER_PAGE","Policy","props","receivers","readOnly","provisioned","currentRoute","inheritedProperties","routesMatchingFilters","matchingInstancesPreview","onEditPolicy","onAddPolicy","onDeletePolicy","onShowAlertInstances","isAutoGenerated","continueMatching","hasMatchers","filtersApplied","matchedRoutesWithPath","matchedRoutes","hasFocus","routesPath","belongsToMatchPath","showMatchesAllLabelsWarning","actualContactPoint","contactPointErrors","getContactPointErrors","allChildPolicies","childPolicies","policy","hasChildPolicies","showExportDrawer","toggleShowExportDrawer","useToggle","matchingAlertGroups","numberOfAlertInstances","isSupportedToSeeAutogeneratedChunk","isAllowedToSeeAutogeneratedChunk","isAutogeneratedPolicyRoot","isAutoGeneratedRootAndSimplifiedEnabled","showPolicyChildren","togglePolicyChildren","groupBy","muteTimings","activeTimings","timingOptions","visibleChildPolicies","setVisibleChildPolicies","dropdownMenuActions","useCreateDropdownMenuActions","isImmutablePolicy","childPoliciesBelongingToMatchPath","child","childPoliciesToRender","pageOfChildren","moreCount","showMore","ContinueMatchingIndicator","AllMatchesIndicator","AutogeneratedRootIndicator","DefaultPolicyIndicator","Spacer","Errors","Provisioning","Authorize","ConditionalWrap","ProvisionedTooltip","Dropdown","Menu","MoreButton","MetadataRow","childInheritedProperties","isThisChildAutoGenerated","isThisChildReadOnly","inheritedGrouping","hasInheritedProperties","noGrouping","customGrouping","singleGroup","hasMuteTimings","hasActiveTimings","MetaText","ContactPointsHoverDetails","TimeIntervals","TimingOptionsMeta","InheritedProperties","updatePoliciesSupported","updatePoliciesAllowed","deletePolicySupported","deletePolicyAllowed","exportPoliciesSupported","exportPoliciesAllowed","showExportAction","showEditAction","showDeleteAction","Fragment","AUTOGENERATED_ROOT_LABEL_NAME","config","objectMatcher","children","properties","routePropertyToLabel","routePropertyToValue","timings","timing","Wrapper","TextLink","groupWait","repeatInterval","metaOptions","meta","details","receiver","integrations","contactPointLink","ContactPoint","acc","_","notifierStatuses","notifierErrors","status","isNotGrouping","isSingleGroup","label","color","borderColor","NotificationPoliciesList","appNotification","canSeeAlertGroups","useGetAlertmanagerAlertGroupsQuery","alertmanagerApi","contactPointFilter","setContactPointFilter","setLabelMatchersFilter","hasConfigurationAPI","isGrafanaAlertmanager","getRouteGroupsMap","useRouteGroupsMatcher","shouldFetchContactPoints","currentData","isLoading","fetchPoliciesError","refetchNotificationPolicyRoute","useNotificationPolicyRoute","defaultPolicy","deleteNotificationPolicy","deleteNotificationPolicyState","updateExistingNotificationPolicy","updateExistingNotificationPolicyState","addNotificationPolicy","addNotificationPolicyState","refetchAlertGroups","useContactPoints","rootRoute","routeAlertGroupsMap","instancesPreviewError","triggerGetRouteGroupsMap","useAsyncFn","findRoutesMatchingFilters","refetchPolicies","partialRoute","handleActionResult","closeEditModal","closeAddModal","closeDeleteModal","updatingTree","addModal","openAddModal","editModal","openEditModal","deleteModal","openDeleteModal","alertInstancesModal","showAlertGroupsModal","hasPoliciesData","hasPoliciesError","hasConflictError","state","hasFilter","havebothFilters","fullRoute","matchingRoutesForContactPoint","routesMatchingContactPoint","matchingRoutesForLabelMatchers","routesMatchingLabelFilters","findMapIntersection","matchingRoutes","result","map","GrafanaMuteTimingsExporterPreview","muteTimingsDefinition","GrafanaMuteTimingExporterPreview","muteTimingName","GrafanaMuteTimingsExporter","ALL_MUTE_TIMINGS","useExportMuteTimingsDrawer","setMuteTimingName","isExportDrawerOpen","handleClose","handleOpen","MuteTimingActionsButtons","muteTiming","deleteMuteTiming","deleteMuteTimingRequestState","showDeleteDrawer","setShowDeleteDrawer","ExportDrawer","exportSupported","exportAllowed","isGrafanaDataSource","viewOrEditHref","viewOrEditButton","ConfirmModal","EmptyAreaWithCTA","buttonIcon","buttonLabel","buttonSize","buttonVariant","onButtonClick","text","href","showButton","commonProps","EmptyArea","MuteTimingsTable","hideActions","ExportAllDrawer","showExportAllDrawer","data","useMuteTimings","items","mute","allowedToCreateMuteTiming","exportMuteTimingsSupported","exportMuteTimingsAllowed","columns","useColumns","DynamicTable","_editSupported","allowedToEdit","_deleteSupported","allowedToDelete","showActions","ActiveTab","NotificationPoliciesTabs","policiesSupported","canSeePoliciesTab","timingsSupported","canSeeTimingsTab","availableTabs","tab","queryParams","setQueryParams","useQueryParams","getActiveTabFromUrl","muteTimingsTabActive","policyTreeTabActive","numberOfMuteTimings","GrafanaAlertmanagerDeliveryWarning","TabsBar","Tab","TabContent","defaultTab","NotificationPoliciesPage","withPageErrorBoundary","actions","alertmanagerActions","isAlertmanagerAction","alertSourceActions","isAlertingAction","AuthorizeAlertmanager","AuthorizeAlertsource","alertmanagerAbilties","actionsAllowed","alertSourceAbilities","abilities","_supported","allowed","action","AlertDetails","alert","isGrafanaSource","isSeeSourceButtonEnabled","annotationKey","annotationValue","AnnotationDetailsField","name","AlertGroupAlertsTable","alerts","AmAlertStateTag","labels","AlertLabels","DynamicTableWithGuidelines","getNotificationsTextColors","AlertGroupHeader","textStyles","countByStatus","statusObj","count","isCollapsed","setIsCollapsed","receiverInGroup","CollapseToggle","NUM_MATCHERS","firstFew","rest","hasMoreMatchers","MatcherBadge","proxyMarker","createEndpoint","releaseProxy","finalizer","throwMarker","isObject","val","proxyTransferHandler","obj","port1","port2","expose","port","wrap","throwTransferHandler","serialized","transferHandlers","isAllowedOrigin","allowedOrigins","origin","allowedOrigin","ep","callback","ev","id","type","argumentList","fromWireValue","returnValue","parent","prop","rawValue","proxy","transfer","wireValue","transferables","toWireValue","closeEndPoint","isMessagePort","endpoint","target","pendingListeners","resolver","createProxy","throwIfProxyReleased","isReleased","releaseEndpoint","requestResponseMessage","proxyCounter","proxyFinalizers","newCount","registerProxy","unregisterProxy","isProxyReleased","_target","r","p","_thisArg","rawArgumentList","last","processArguments","myFlat","arr","processed","v","transferCache","transfers","windowEndpoint","w","context","targetOrigin","msg","handler","serializedValue","resolve","generateUUID","createWorker","routeMatcher","loadWorker","worker","e","validateWorker","disposeWorker","options","startTime","timeSpent","matchInstancesToRoute","instancesToMatch","DAYS_OF_THE_WEEK","MONTHS","defaultTimeInterval","validateArrayField","validateValue","invalidText","x","entry","convertStringToArray","str","s","createMuteTiming","timeIntervals","times","weekdays","days_of_month","months","years","location","disable","interval","convertTimesToDto","timesToReturn","start_time","end_time","isTimeIntervalDisabled","intervals","isDisabled","timeInterval"],"sourceRoot":""}