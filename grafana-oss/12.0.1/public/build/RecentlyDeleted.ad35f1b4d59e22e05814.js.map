{"version":3,"file":"RecentlyDeleted.ad35f1b4d59e22e05814.js","mappings":"8WAcO,MAAMA,EAAiC,CAAC,CAAE,OAAAC,EAAQ,UAAAC,EAAW,KAAAC,CAAK,IAAkB,CACzF,KAAM,CAACC,CAAM,EAAIC,EAAA,GAAa,UAAU,sBAAsB,YAAY,EACpEC,KAAQ,KAAE,4CAA6C,+BAA+B,EACtFC,KAAc,KAAE,8CAA+C,yBAAyB,EACxFC,KAAkB,MAAmB,EAErCC,KAAS,MAAWC,CAAS,EAEnC,eAAeC,GAAkB,CAC/B,GAAKR,EAGL,OAAOC,EAAO,CAAE,KAAAD,CAAK,CAAC,EACnB,KAAK,IAAM,CACVD,EAAU,EACVM,EAAgB,WAAQ,KAAE,8CAA+C,gCAAgC,CAAC,CAC5G,CAAC,EACA,MAAOI,GAAQ,CACdJ,EAAgB,SACd,KAAE,4CAA6C,yCAAyC,CAC1F,CACF,CAAC,CACL,CAEA,SACE,OAACK,EAAA,GACC,OAAAZ,EACA,MAAAK,EACA,YAAAC,EACA,WAAYE,EAAO,MACnB,qBAAqB,cACrB,QACE,OAACK,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,EAC7B,mBAAC,KAAK,CAAC,QAAQ,2CAA2C,sGAE1D,EACF,EAEF,UAAWH,EACX,UAAAT,CAAA,CACF,CAEJ,EAEMQ,EAAY,KAAO,CACvB,SAAO,OAAI,CACT,MAAO,OACT,CAAC,CACH,G,kHCpCO,MAAMK,GAAiC,CAAC,CAC7C,OAAAd,EACA,cAAAe,EACA,UAAAd,EACA,gBAAAe,EACA,eAAAC,CACF,IAAkB,CAChB,KAAM,CAACC,EAAe,CAAE,MAAAC,CAAM,CAAC,EAAIC,GAAsB,EACnDf,KAAQ,KAAE,6CAA8C,4BAA4B,EACpFgB,KAAa,KAAE,6CAA8C,sCAAsC,EACnGf,EAAea,EAEjB,+BADA,KAAE,+CAAgD,2BAA2B,EAG3EX,KAAS,MAAW,CAAS,EAEnC,eAAec,GAAmB,CAChC,GAAKP,EAGL,OAAOG,EACJ,QAAQH,CAAa,EACrB,KAAK,IAAM,CACVd,EAAU,EACVe,EAAgB,CAClB,CAAC,EACA,MAAOL,GAAQ,CACdM,EAAeN,CAAG,CACpB,CAAC,CACL,CAEA,eAAeY,GAAkB,CAC1BR,GAGL,MAAMS,GAAsBT,CAAa,CAC3C,CAEA,SACE,OAACH,EAAA,GACC,OAAAZ,EACA,MAAAK,EACA,YAAAC,EACA,WAAYE,EAAO,MACnB,qBAAuBW,EAAwB,UAAhB,cAC/B,QACE,QAACN,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,EAC7B,oBAAC,KAAK,CAAC,QAAQ,4CAA4C,gFAE3D,KAEA,OAAC,OAAK,SAAAE,MAAiB,OAACU,GAAA,CAAY,KAAMV,CAAA,CAAe,EAAG,EAC3DI,MACC,QAACO,EAAA,EAAK,CAAC,SAAS,UAAU,MAAOL,EAC/B,oBAAC,KAAK,CAAC,QAAQ,kDAAkD,qNAGjE,KACA,OAAC,OAAI,MAAO,CAAE,aAAc,CAAE,EAC5B,mBAAC,QAAM,kBAAmBF,CAAK,EAAE,EACnC,GACF,GAEJ,EAEF,UAAYA,EAA2BI,EAAnBD,EACpB,UAAArB,CAAA,CACF,CAEJ,EAEA,SAASwB,GAAY,CAAE,KAAAE,CAAK,EAA2B,CACrD,MAAMnB,KAAS,MAAW,CAAS,EACnC,SACE,OAAC,OAAI,UAAWA,EAAO,QACrB,mBAACoB,EAAA,GACC,MAAM,OACN,OAAQ,IACR,SAAU,OACV,MAAO,KAAK,UAAUD,EAAM,KAAM,CAAC,EACnC,cAAe,CACb,QAAS,CACP,QAAS,EACX,EACA,qBAAsB,GACtB,YAAa,KACb,SAAU,EACZ,EACF,EACF,CAEJ,CAEA,MAAM,EAAY,KAAO,CACvB,WAAS,OAAI,CACX,KAAM,UACR,CAAC,EACD,SAAO,OAAI,CACT,MAAO,OACT,CAAC,CACH,GAEO,SAASP,IAAwB,CACtC,KAAM,CAACS,CAAkB,KAAI,KAAsB,EAEnD,SAAOC,EAAA,IAAS,MAAOC,GAA4D,CACjF,MAAMC,EAAsB,CAC1B,eAAgB,KAChB,cAAeD,EAAY,cAAc,cACzC,UAAWA,EAAY,cAAc,UACvC,EAEA,OAAOF,EAAmB,QAAQG,EAAqBD,CAAW,CACpE,CAAC,CACH,CAEA,MAAMP,GAAwB,MAAOS,GAAuC,CAC1E,IAAIC,EACJ,MAAMC,EAAgB,MAAM,KACzB,eAAeF,EAAc,cAAc,aAAa,EACxD,KAAMG,GAAWA,EAAO,KAAK,EAEhC,GAAI,CACFF,KAAa,MAA2BD,EAAeE,CAAa,CACtE,OAASxB,EAAK,CACZ,MAAM0B,EAAU,uDAAoD,MAAoB1B,CAAG,CAAC,GAC5F,MAAM,IAAI,MAAM0B,CAAO,CACzB,CAEA,MAAMC,EAAU,IAAc,QAAQ,cAAcL,CAAa,EAC7D,kCACA,gBAEEM,KAAc,KAAkBD,EAAS,CAC7C,gBAAiB,OACjB,SAAU,KAAK,UAAUJ,CAAU,EACnC,SAAU,SAAS,SAAW,SAAS,MACzC,CAAC,EAED,KAAgB,KAAKK,CAAW,CAClC,ECxJMC,GAA0B,GAKzB,SAASC,GAAa,CAAE,aAAAC,CAAa,EAAsB,CAChE,KAAM,CAACC,EAAgBC,CAAiB,KAAI,YAAS,EAAK,EACpD,CAACC,EAAaC,CAAc,KAAI,YAA0C,EAC1E,CAACC,EAAcC,CAAe,KAAI,YAA6B,EAC/DC,EAA2BF,IAAiB,OAC5CG,KAAU,KAAE,iCAAkC,SAAS,EAE7D,GAAIR,EAAa,SAAW,EAC1B,SACE,OAACS,EAAA,GACC,WAAS,KAAE,2CAA4C,iCAAiC,EACxF,QAAQ,YACV,EAIJ,MAAMC,EAAoBC,GAAe,CACvC,MAAMC,EAAgBZ,EAAa,KAAMf,GAAS4B,EAAS5B,EAAK,aAAa,IAAM0B,CAAE,EAChFC,IAILV,EAAkB,EAAI,EACtBE,EAAeQ,CAAa,EAC9B,EAEME,EAA6B,IAAM,CACvCZ,EAAkB,EAAK,CACzB,EACMa,EAA4B,IAAM,CACtCT,EAAgB,MAAS,CAC3B,EAEMU,EAA0BL,GAAe,CAC7C,MAAMC,EAAgBZ,EAAa,KAAMf,GAAS4B,EAAS5B,EAAK,aAAa,IAAM0B,CAAE,EAChFC,GAILN,EAAgBM,EAAc,cAAc,IAAI,CAClD,EAEMK,KAA+B,MAAoC,EAEnEC,GAAmD,CACvD,CACE,GAAI,YACJ,UAAQ,KAAE,yCAA0C,YAAY,EAChE,YAAa,GACb,KAAM,CAAC,CAAE,IAAAC,CAAI,OACJ,OAACC,EAAA,EAAa,CAAC,KAAMD,EAAI,SAAS,cAAc,WAAY,CAEvE,EACA,CACE,GAAI,QACJ,UAAQ,KAAE,qCAAsC,OAAO,EACvD,YAAa,GACb,KAAM,CAAC,CAAE,IAAAA,CAAI,IACJA,EAAI,SAAS,cAAc,KAEtC,EACA,CACE,GAAI,SACJ,UAAQ,KAAE,sCAAuC,QAAQ,EACzD,YAAa,GACb,KAAM,CAAC,CAAE,IAAAA,CAAI,IACJA,EAAI,SAAS,cAAc,aAEtC,EACA,CACE,GAAI,QACJ,UAAQ,KAAE,qCAAsC,OAAO,EACvD,YAAa,GACb,KAAM,CAAC,CAAE,IAAAA,CAAI,IACJA,EAAI,SAAS,cAAc,UAEtC,EACA,CACE,GAAI,UACJ,UAAQ,KAAE,uCAAwC,eAAe,EACjE,YAAa,GACb,KAAM,CAAC,CAAE,IAAAA,CAAI,IAAM,CACjB,MAAME,EAAQF,EAAI,SAAS,cAAc,QACzC,OAAKE,KAGE,MAAeA,CAAK,EAAI,QAAO,MAAsBA,CAAK,EAAI,IAF5Db,CAGX,CACF,EACA,CACE,GAAI,UACJ,YAAa,GACb,KAAM,CAAC,CAAE,IAAAW,CAAI,OAET,QAAChD,EAAA,EAAK,CAAC,UAAU,MAAM,WAAW,SAAS,eAAe,WACxD,oBAACmD,EAAA,IACC,QAAQ,YACR,KAAK,KACL,KAAK,UACL,QAAS,IAAM,CACbZ,EAAiBG,EAASM,EAAI,SAAS,aAAa,CAAC,CACvD,EAEA,mBAAC,KAAK,CAAC,QAAQ,iCAAiC,mBAAO,EACzD,EACCF,MACC,OAACK,EAAA,IACC,QAAQ,cACR,KAAK,KACL,KAAK,YACL,QAAS,IAAM,CACbN,EAAuBH,EAASM,EAAI,SAAS,aAAa,CAAC,CAC7D,EAEA,mBAAC,KAAK,CAAC,QAAQ,4CAA4C,8BAAkB,EAC/E,GAEJ,CAGN,CACF,EAEA,SACE,oBACE,oBAACI,EAAA,GACC,SAAUzB,GACV,QAAAoB,GACA,KAAMlB,EACN,SAAWmB,GACFN,EAASM,EAAI,aAAa,CACnC,CACF,KACA,OAAC/C,GAAA,CACC,cAAe+B,EACf,OAAQF,EACR,UAAWa,EACX,gBAAiB,KACjB,eAAgB,KAClB,KACA,OAACzD,EAAA,CACC,KAAMgD,EACN,OAAQE,EACR,UAAWQ,CAAA,CACb,GACF,CAEJ,CAEA,SAASF,EAASM,EAA4B,CAC5C,OAAOA,EAAI,MAAQA,EAAI,GACzB,CC/JA,SAASK,IAAmB,CAC1B,KAAM,CACJ,YAAAC,EAAc,CAAC,EACf,UAAAC,EACA,MAAAjD,CACF,EAAIf,EAAA,GAAa,UAAU,gBAAgB,SAAS,CAClD,YAAa,IACb,OAAQ,CAAC,CACX,CAAC,EAED,SACE,OAACiE,EAAA,EAAmB,CAAC,MAAM,0BAA0B,UAAAD,EACnD,gCACG,UAAAjD,MACC,OAACO,EAAA,EAAK,CAAC,SAAO,KAAE,sCAAuC,oCAAoC,EACxF,kBAAmBP,CAAK,EAC3B,KAEF,OAACsB,GAAY,CAAC,aAAc0B,CAAA,CAAa,GAC3C,EACF,CAEJ,CAEA,YAAeG,EAAA,GAAsBJ,EAAgB,C","sources":["webpack://grafana/./public/app/features/alerting/unified/components/rules/deleted-rules/ConfirmDeletePermanantlyModal.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/deleted-rules/ConfirmRestoreDeletedRuleModal.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/deleted-rules/DeletedRules.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/deleted-rules/DeletedRulesPage.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { ComponentProps } from 'react';\n\nimport { ConfirmModal, Stack, useStyles2 } from '@grafana/ui';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { alertRuleApi } from '../../../api/alertRuleApi';\n\ntype ModalProps = Pick<ComponentProps<typeof ConfirmModal>, 'isOpen' | 'onDismiss'> & {\n  isOpen: boolean;\n  guid?: string;\n};\n\nexport const ConfirmDeletedPermanentlyModal = ({ isOpen, onDismiss, guid }: ModalProps) => {\n  const [remove] = alertRuleApi.endpoints.permanentlyDeleteRule.useMutation();\n  const title = t('alerting.deleted-rules.delete-modal.title', 'Permanently delete alert rule');\n  const confirmText = t('alerting.deleted-rules.delete-modal.confirm', 'Yes, permanently delete');\n  const appNotification = useAppNotification();\n\n  const styles = useStyles2(getStyles);\n\n  async function onDeleteConfirm() {\n    if (!guid) {\n      return;\n    }\n    return remove({ guid })\n      .then(() => {\n        onDismiss();\n        appNotification.success(t('alerting.deleted-rules.delete-modal.success', 'Alert rule permanently deleted'));\n      })\n      .catch((err) => {\n        appNotification.error(\n          t('alerting.deleted-rules.delete-modal.error', 'Could not permanently delete alert rule')\n        );\n      });\n  }\n\n  return (\n    <ConfirmModal\n      isOpen={isOpen}\n      title={title}\n      confirmText={confirmText}\n      modalClass={styles.modal}\n      confirmButtonVariant=\"destructive\"\n      body={\n        <Stack direction=\"column\" gap={2}>\n          <Trans i18nKey=\"alerting.deleted-rules.delete-modal.body\">\n            Are you sure you want to permanently delete this alert rule? This action cannot be undone.\n          </Trans>\n        </Stack>\n      }\n      onConfirm={onDeleteConfirm}\n      onDismiss={onDismiss}\n    />\n  );\n};\n\nconst getStyles = () => ({\n  modal: css({\n    width: '700px',\n  }),\n});\n","import { css } from '@emotion/css';\nimport { ComponentProps } from 'react';\n\nimport { locationService } from '@grafana/runtime';\nimport { Alert, CodeEditor, ConfirmModal, Stack, useStyles2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { getMessageFromError } from 'app/core/utils/errors';\nimport { useAsync } from 'app/features/alerting/unified/hooks/useAsync';\nimport { GrafanaRuleDefinition, RulerGrafanaRuleDTO, RulerRuleDTO } from 'app/types/unified-alerting-dto';\n\nimport { useAddRuleToRuleGroup } from '../../../hooks/ruleGroup/useUpsertRuleFromRuleGroup';\nimport { RuleFormValues } from '../../../types/rule-form';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../../utils/datasource';\nimport { stringifyErrorLike } from '../../../utils/misc';\nimport { grafanaRuleDtoToFormValues } from '../../../utils/rule-form';\nimport { rulerRuleType } from '../../../utils/rules';\nimport { createRelativeUrl } from '../../../utils/url';\n\ntype ModalProps = Pick<ComponentProps<typeof ConfirmModal>, 'isOpen' | 'onDismiss'> & {\n  isOpen: boolean;\n  ruleToRestore?: RulerGrafanaRuleDTO | undefined;\n  onRestoreSucess: () => void;\n  onRestoreError: (error: Error) => void;\n};\n\nexport const ConfirmRestoreDeletedRuleModal = ({\n  isOpen,\n  ruleToRestore,\n  onDismiss,\n  onRestoreSucess,\n  onRestoreError,\n}: ModalProps) => {\n  const [restoreMethod, { error }] = useRestoreDeletedRule();\n  const title = t('alerting.deleted-rules.restore-modal.title', 'Restore deleted alert rule');\n  const errorTitle = t('alerting.deleted-rules.restore-modal.error', 'Could not restore deleted alert rule');\n  const confirmText = !error\n    ? t('alerting.deleted-rules.restore-modal.confirm', 'Yes, restore deleted rule')\n    : 'Manually restore the rule';\n\n  const styles = useStyles2(getStyles);\n\n  async function onRestoreConfirm() {\n    if (!ruleToRestore) {\n      return;\n    }\n    return restoreMethod\n      .execute(ruleToRestore)\n      .then(() => {\n        onDismiss();\n        onRestoreSucess();\n      })\n      .catch((err) => {\n        onRestoreError(err);\n      });\n  }\n\n  async function onManualRestore() {\n    if (!ruleToRestore) {\n      return;\n    }\n    await redirectToRestoreForm(ruleToRestore);\n  }\n\n  return (\n    <ConfirmModal\n      isOpen={isOpen}\n      title={title}\n      confirmText={confirmText}\n      modalClass={styles.modal}\n      confirmButtonVariant={!error ? 'destructive' : 'primary'}\n      body={\n        <Stack direction=\"column\" gap={2}>\n          <Trans i18nKey=\"alerting.deleted-rules.restore-modal.body\">\n            Are you sure you want to restore this deleted alert rule definition?\n          </Trans>\n\n          <div>{ruleToRestore && <RulePreview rule={ruleToRestore} />}</div>\n          {error && (\n            <Alert severity=\"warning\" title={errorTitle}>\n              <Trans i18nKey=\"alerting.deleted-rules.restore-deleted-manually\">\n                Your alert rule could not be restored. This may be due to changes to other entities such as contact\n                points, data sources etc. Please manually restore the deleted rule by editing the rule and saving it.\n              </Trans>\n              <pre style={{ marginBottom: 0 }}>\n                <code>{stringifyErrorLike(error)}</code>\n              </pre>\n            </Alert>\n          )}\n        </Stack>\n      }\n      onConfirm={!error ? onRestoreConfirm : onManualRestore}\n      onDismiss={onDismiss}\n    />\n  );\n};\n\nfunction RulePreview({ rule }: { rule: RulerRuleDTO }) {\n  const styles = useStyles2(getStyles);\n  return (\n    <div className={styles.content}>\n      <CodeEditor\n        width=\"100%\"\n        height={600}\n        language={'json'}\n        value={JSON.stringify(rule, null, 4)}\n        monacoOptions={{\n          minimap: {\n            enabled: false,\n          },\n          scrollBeyondLastLine: false,\n          lineNumbers: 'on',\n          readOnly: true,\n        }}\n      />\n    </div>\n  );\n}\n\nconst getStyles = () => ({\n  content: css({\n    flex: '1 1 100%',\n  }),\n  modal: css({\n    width: '700px',\n  }),\n});\n\nexport function useRestoreDeletedRule() {\n  const [addRuleToRuleGroup] = useAddRuleToRuleGroup();\n\n  return useAsync(async (deletedRule: RulerGrafanaRuleDTO<GrafanaRuleDefinition>) => {\n    const ruleGroupIdentifier = {\n      dataSourceName: GRAFANA_RULES_SOURCE_NAME,\n      namespaceName: deletedRule.grafana_alert.namespace_uid,\n      groupName: deletedRule.grafana_alert.rule_group,\n    };\n    // save the new rule to the rule group\n    return addRuleToRuleGroup.execute(ruleGroupIdentifier, deletedRule);\n  });\n}\n\nconst redirectToRestoreForm = async (ruleToRecover: RulerGrafanaRuleDTO) => {\n  let formValues: Partial<RuleFormValues> | undefined;\n  const namespaceName = await backendSrv\n    .getFolderByUid(ruleToRecover.grafana_alert.namespace_uid)\n    .then((folder) => folder.title);\n\n  try {\n    formValues = grafanaRuleDtoToFormValues(ruleToRecover, namespaceName);\n  } catch (err) {\n    const message = `Error getting rule values from the deleted rule: ${getMessageFromError(err)}`;\n    throw new Error(message);\n  }\n\n  const urlPath = rulerRuleType.grafana.recordingRule(ruleToRecover)\n    ? '/alerting/new/grafana-recording'\n    : '/alerting/new';\n\n  const ruleFormUrl = createRelativeUrl(urlPath, {\n    isManualRestore: 'true',\n    defaults: JSON.stringify(formValues),\n    returnTo: location.pathname + location.search,\n  });\n\n  locationService.push(ruleFormUrl);\n};\n","import { useState } from 'react';\n\nimport { dateTimeFormat, dateTimeFormatTimeAgo } from '@grafana/data';\nimport { Button, Column, EmptyState, InteractiveTable, Stack } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { GrafanaRuleDefinition, RulerGrafanaRuleDTO } from 'app/types/unified-alerting-dto';\n\nimport { trackDeletedRuleRestoreFail, trackDeletedRuleRestoreSuccess } from '../../../Analytics';\nimport { shouldAllowPermanentlyDeletingRules } from '../../../featureToggles';\nimport { UpdatedByUser } from '../../rule-viewer/tabs/version-history/UpdatedBy';\n\nimport { ConfirmDeletedPermanentlyModal } from './ConfirmDeletePermanantlyModal';\nimport { ConfirmRestoreDeletedRuleModal } from './ConfirmRestoreDeletedRuleModal';\n\nconst DELETED_RULES_PAGE_SIZE = 30;\n\ninterface DeletedRulesProps {\n  deletedRules: Array<RulerGrafanaRuleDTO<GrafanaRuleDefinition>>;\n}\nexport function DeletedRules({ deletedRules }: DeletedRulesProps) {\n  const [confirmRestore, setConfirmRestore] = useState(false);\n  const [restoreRule, setRestoreRule] = useState<RulerGrafanaRuleDTO | undefined>();\n  const [guidToDelete, setGuidToDelete] = useState<string | undefined>();\n  const confirmDeletePermanently = guidToDelete !== undefined;\n  const unknown = t('alerting.deleted-rules.unknown', 'Unknown');\n\n  if (deletedRules.length === 0) {\n    return (\n      <EmptyState\n        message={t('alerting.deleted-rules.empty-state-title', 'No recently deleted rules found')}\n        variant=\"not-found\"\n      />\n    );\n  }\n\n  const showConfirmation = (id: string) => {\n    const ruleTorestore = deletedRules.find((rule) => getRowId(rule.grafana_alert) === id);\n    if (!ruleTorestore) {\n      return;\n    }\n\n    setConfirmRestore(true);\n    setRestoreRule(ruleTorestore);\n  };\n\n  const hideConfirmationForRestore = () => {\n    setConfirmRestore(false);\n  };\n  const hideConfirmationForDelete = () => {\n    setGuidToDelete(undefined);\n  };\n\n  const showDeleteConfirmation = (id: string) => {\n    const ruleTorestore = deletedRules.find((rule) => getRowId(rule.grafana_alert) === id);\n    if (!ruleTorestore) {\n      return;\n    }\n\n    setGuidToDelete(ruleTorestore.grafana_alert.guid);\n  };\n\n  const shouldAllowRemovePermanently = shouldAllowPermanentlyDeletingRules();\n\n  const columns: Array<Column<(typeof deletedRules)[0]>> = [\n    {\n      id: 'createdBy',\n      header: t('alerting.deleted-rules.table.updatedBy', 'Deleted By'),\n      disableGrow: true,\n      cell: ({ row }) => {\n        return <UpdatedByUser user={row.original.grafana_alert.updated_by} />;\n      },\n    },\n    {\n      id: 'title',\n      header: t('alerting.deleted-rules.table.title', 'Title'),\n      disableGrow: true,\n      cell: ({ row }) => {\n        return row.original.grafana_alert.title;\n      },\n    },\n    {\n      id: 'folder',\n      header: t('alerting.deleted-rules.table.folder', 'Folder'),\n      disableGrow: true,\n      cell: ({ row }) => {\n        return row.original.grafana_alert.namespace_uid;\n      },\n    },\n    {\n      id: 'group',\n      header: t('alerting.deleted-rules.table.group', 'Group'),\n      disableGrow: true,\n      cell: ({ row }) => {\n        return row.original.grafana_alert.rule_group;\n      },\n    },\n    {\n      id: 'created',\n      header: t('alerting.deleted-rules.table.updated', 'Deletion Date'),\n      disableGrow: true,\n      cell: ({ row }) => {\n        const value = row.original.grafana_alert.updated;\n        if (!value) {\n          return unknown;\n        }\n        return dateTimeFormat(value) + ' (' + dateTimeFormatTimeAgo(value) + ')';\n      },\n    },\n    {\n      id: 'actions',\n      disableGrow: true,\n      cell: ({ row }) => {\n        return (\n          <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"flex-end\">\n            <Button\n              variant=\"secondary\"\n              size=\"sm\"\n              icon=\"history\"\n              onClick={() => {\n                showConfirmation(getRowId(row.original.grafana_alert));\n              }}\n            >\n              <Trans i18nKey=\"alerting.deleted-rules.restore\">Restore</Trans>\n            </Button>\n            {shouldAllowRemovePermanently && (\n              <Button\n                variant=\"destructive\"\n                size=\"sm\"\n                icon=\"trash-alt\"\n                onClick={() => {\n                  showDeleteConfirmation(getRowId(row.original.grafana_alert));\n                }}\n              >\n                <Trans i18nKey=\"alerting.deleted-rules.permanently-delete\">Permanently delete</Trans>\n              </Button>\n            )}\n          </Stack>\n        );\n      },\n    },\n  ];\n\n  return (\n    <>\n      <InteractiveTable\n        pageSize={DELETED_RULES_PAGE_SIZE}\n        columns={columns}\n        data={deletedRules}\n        getRowId={(row) => {\n          return getRowId(row.grafana_alert);\n        }}\n      />\n      <ConfirmRestoreDeletedRuleModal\n        ruleToRestore={restoreRule}\n        isOpen={confirmRestore}\n        onDismiss={hideConfirmationForRestore}\n        onRestoreSucess={trackDeletedRuleRestoreSuccess}\n        onRestoreError={trackDeletedRuleRestoreFail}\n      />\n      <ConfirmDeletedPermanentlyModal\n        guid={guidToDelete}\n        isOpen={confirmDeletePermanently}\n        onDismiss={hideConfirmationForDelete}\n      />\n    </>\n  );\n}\n\nfunction getRowId(row: GrafanaRuleDefinition) {\n  return row.guid || row.uid;\n}\n","import { Alert } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { alertRuleApi } from '../../../api/alertRuleApi';\nimport { GRAFANA_RULER_CONFIG } from '../../../api/featureDiscoveryApi';\nimport { stringifyErrorLike } from '../../../utils/misc';\nimport { withPageErrorBoundary } from '../../../withPageErrorBoundary';\nimport { AlertingPageWrapper } from '../../AlertingPageWrapper';\n\nimport { DeletedRules } from './DeletedRules';\n\nfunction DeletedrulesPage() {\n  const {\n    currentData = [],\n    isLoading,\n    error,\n  } = alertRuleApi.endpoints.getDeletedRules.useQuery({\n    rulerConfig: GRAFANA_RULER_CONFIG,\n    filter: {}, // todo: add filters, and limit?????\n  });\n\n  return (\n    <AlertingPageWrapper navId=\"alerts/recently-deleted\" isLoading={isLoading}>\n      <>\n        {error && (\n          <Alert title={t('alerting.deleted-rules.errorloading', 'Failed to load alert deleted rules')}>\n            {stringifyErrorLike(error)}\n          </Alert>\n        )}\n        <DeletedRules deletedRules={currentData} />\n      </>\n    </AlertingPageWrapper>\n  );\n}\n\nexport default withPageErrorBoundary(DeletedrulesPage);\n"],"names":["ConfirmDeletedPermanentlyModal","isOpen","onDismiss","guid","remove","alertRuleApi","title","confirmText","appNotification","styles","getStyles","onDeleteConfirm","err","ConfirmModal","Stack","ConfirmRestoreDeletedRuleModal","ruleToRestore","onRestoreSucess","onRestoreError","restoreMethod","error","useRestoreDeletedRule","errorTitle","onRestoreConfirm","onManualRestore","redirectToRestoreForm","RulePreview","Alert","rule","CodeEditor","addRuleToRuleGroup","useAsync","deletedRule","ruleGroupIdentifier","ruleToRecover","formValues","namespaceName","folder","message","urlPath","ruleFormUrl","DELETED_RULES_PAGE_SIZE","DeletedRules","deletedRules","confirmRestore","setConfirmRestore","restoreRule","setRestoreRule","guidToDelete","setGuidToDelete","confirmDeletePermanently","unknown","EmptyState","showConfirmation","id","ruleTorestore","getRowId","hideConfirmationForRestore","hideConfirmationForDelete","showDeleteConfirmation","shouldAllowRemovePermanently","columns","row","UpdatedBy","value","Button","InteractiveTable","DeletedrulesPage","currentData","isLoading","AlertingPageWrapper","withPageErrorBoundary"],"sourceRoot":""}