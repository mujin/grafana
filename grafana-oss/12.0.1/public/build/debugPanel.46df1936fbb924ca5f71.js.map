{"version":3,"file":"debugPanel.46df1936fbb924ca5f71.js","mappings":"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","sources":["webpack://grafana/./packages/grafana-ui/src/components/VizTooltip/VizTooltipColorIndicator.tsx","webpack://grafana/./packages/grafana-ui/src/components/VizTooltip/VizTooltipRow.tsx","webpack://grafana/./public/app/features/visualization/data-hover/DataHoverView.tsx","webpack://grafana/./public/app/plugins/panel/debug/CursorView.tsx","webpack://grafana/./public/app/plugins/panel/debug/EventBusLogger.tsx","webpack://grafana/./public/app/plugins/panel/debug/RenderInfoViewer.tsx","webpack://grafana/./public/app/plugins/panel/debug/StateView.tsx","webpack://grafana/./public/app/plugins/panel/debug/panelcfg.gen.ts","webpack://grafana/./public/app/plugins/panel/debug/DebugPanel.tsx","webpack://grafana/./public/app/plugins/panel/debug/module.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\n\nimport { FALLBACK_COLOR, GrafanaTheme2 } from '@grafana/data';\nimport { LineStyle } from '@grafana/schema';\n\nimport { useStyles2 } from '../../themes';\nimport { SeriesIcon } from '../VizLegend/SeriesIcon';\n\nimport { ColorIndicator, DEFAULT_COLOR_INDICATOR } from './types';\nimport { getColorIndicatorClass } from './utils';\n\nexport enum ColorIndicatorPosition {\n  Leading,\n  Trailing,\n}\n\ninterface Props {\n  color?: string;\n  colorIndicator?: ColorIndicator;\n  position?: ColorIndicatorPosition;\n  lineStyle?: LineStyle;\n}\n\nexport type ColorIndicatorStyles = ReturnType<typeof getStyles>;\n\nexport const VizTooltipColorIndicator = ({\n  color = FALLBACK_COLOR,\n  colorIndicator = DEFAULT_COLOR_INDICATOR,\n  position = ColorIndicatorPosition.Leading,\n  lineStyle,\n}: Props) => {\n  const styles = useStyles2(getStyles);\n\n  if (colorIndicator === ColorIndicator.series) {\n    return (\n      <SeriesIcon\n        color={color}\n        lineStyle={lineStyle}\n        className={position === ColorIndicatorPosition.Leading ? styles.leading : styles.trailing}\n      />\n    );\n  }\n\n  return (\n    <span\n      style={{ backgroundColor: color }}\n      className={cx(\n        position === ColorIndicatorPosition.Leading ? styles.leading : styles.trailing,\n        getColorIndicatorClass(colorIndicator, styles)\n      )}\n    />\n  );\n};\n\n// @TODO Update classes/add svgs\nconst getStyles = (theme: GrafanaTheme2) => ({\n  leading: css({\n    marginRight: theme.spacing(0.5),\n  }),\n  trailing: css({\n    marginLeft: theme.spacing(0.5),\n  }),\n  value: css({\n    width: '12px',\n    height: '12px',\n    borderRadius: theme.shape.radius.default,\n    fontWeight: 500,\n    minWidth: '12px',\n  }),\n  hexagon: css({}),\n  pie_1_4: css({}),\n  pie_2_4: css({}),\n  pie_3_4: css({}),\n  marker_sm: css({\n    width: '4px',\n    height: '4px',\n    borderRadius: theme.shape.radius.circle,\n    minWidth: '4px',\n  }),\n  marker_md: css({\n    width: '8px',\n    height: '8px',\n    borderRadius: theme.shape.radius.circle,\n    minWidth: '8px',\n  }),\n  marker_lg: css({\n    width: '12px',\n    height: '12px',\n    borderRadius: theme.shape.radius.circle,\n    minWidth: '12px',\n  }),\n});\n","import { css, cx } from '@emotion/css';\nimport { CSSProperties, ReactNode, useEffect, useRef, useState } from 'react';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { useStyles2 } from '../../themes';\nimport { InlineToast } from '../InlineToast/InlineToast';\nimport { Tooltip } from '../Tooltip';\n\nimport { ColorIndicatorPosition, VizTooltipColorIndicator } from './VizTooltipColorIndicator';\nimport { ColorPlacement, VizTooltipItem } from './types';\n\ninterface VizTooltipRowProps extends Omit<VizTooltipItem, 'value'> {\n  value: string | number | null | ReactNode;\n  justify?: string;\n  isActive?: boolean; // for series list\n  marginRight?: string;\n  isPinned: boolean;\n  showValueScroll?: boolean;\n}\n\nenum LabelValueTypes {\n  label = 'label',\n  value = 'value',\n}\n\nconst SUCCESSFULLY_COPIED_TEXT = 'Copied to clipboard';\nconst SHOW_SUCCESS_DURATION = 2 * 1000;\nconst HORIZONTAL_PX_PER_CHAR = 7;\n\nexport const VizTooltipRow = ({\n  label,\n  value,\n  color,\n  colorIndicator,\n  colorPlacement = ColorPlacement.first,\n  justify = 'flex-start',\n  isActive = false,\n  marginRight = '0px',\n  isPinned,\n  lineStyle,\n  showValueScroll,\n}: VizTooltipRowProps) => {\n  const styles = useStyles2(getStyles, justify, marginRight);\n\n  const innerValueScrollStyle: CSSProperties = showValueScroll\n    ? {\n        maxHeight: 55,\n        whiteSpace: 'wrap',\n        wordBreak: 'break-word',\n        overflowY: 'auto',\n      }\n    : {\n        whiteSpace: 'wrap',\n        wordBreak: 'break-word',\n      };\n\n  const [showLabelTooltip, setShowLabelTooltip] = useState(false);\n\n  const [copiedText, setCopiedText] = useState<Record<string, string> | null>(null);\n  const [showCopySuccess, setShowCopySuccess] = useState(false);\n\n  const labelRef = useRef<null | HTMLDivElement>(null);\n  const valueRef = useRef<null | HTMLDivElement>(null);\n\n  useEffect(() => {\n    let timeoutId: ReturnType<typeof setTimeout>;\n\n    if (showCopySuccess) {\n      timeoutId = setTimeout(() => {\n        setShowCopySuccess(false);\n      }, SHOW_SUCCESS_DURATION);\n    }\n\n    return () => {\n      window.clearTimeout(timeoutId);\n    };\n  }, [showCopySuccess]);\n\n  const copyToClipboard = async (text: string, type: LabelValueTypes) => {\n    if (!(navigator?.clipboard && window.isSecureContext)) {\n      fallbackCopyToClipboard(text, type);\n      return;\n    }\n\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopiedText({ [`${type}`]: text });\n      setShowCopySuccess(true);\n    } catch (error) {\n      setCopiedText(null);\n    }\n  };\n\n  const fallbackCopyToClipboard = (text: string, type: LabelValueTypes) => {\n    // Use a fallback method for browsers/contexts that don't support the Clipboard API.\n    const textarea = document.createElement('textarea');\n    labelRef.current?.appendChild(textarea);\n    textarea.value = text;\n    textarea.focus();\n    textarea.select();\n    try {\n      const successful = document.execCommand('copy');\n      if (successful) {\n        setCopiedText({ [`${type}`]: text });\n        setShowCopySuccess(true);\n      }\n    } catch (err) {\n      console.error('Unable to copy to clipboard', err);\n    }\n\n    textarea.remove();\n  };\n\n  const onMouseEnterLabel = (event: React.MouseEvent<HTMLDivElement>) => {\n    if (event.currentTarget.offsetWidth < event.currentTarget.scrollWidth) {\n      setShowLabelTooltip(true);\n    }\n  };\n\n  const onMouseLeaveLabel = () => setShowLabelTooltip(false);\n\n  // if label is > 50% window width, try to put label/value pairs on new lines\n  if (label.length * HORIZONTAL_PX_PER_CHAR > window.innerWidth / 2) {\n    label = label.replaceAll('{', '{\\n  ').replaceAll('}', '\\n}').replaceAll(', ', ',\\n  ');\n  }\n\n  return (\n    <div className={styles.contentWrapper}>\n      {(color || label) && (\n        <div className={styles.valueWrapper}>\n          {color && colorPlacement === ColorPlacement.first && (\n            <VizTooltipColorIndicator color={color} colorIndicator={colorIndicator} lineStyle={lineStyle} />\n          )}\n          {!isPinned ? (\n            <div className={cx(styles.label, isActive && styles.activeSeries)}>{label}</div>\n          ) : (\n            <>\n              <Tooltip content={label} interactive={false} show={showLabelTooltip}>\n                <>\n                  {showCopySuccess && copiedText?.label && (\n                    <InlineToast placement=\"top\" referenceElement={labelRef.current}>\n                      {SUCCESSFULLY_COPIED_TEXT}\n                    </InlineToast>\n                  )}\n                  {/* eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions */}\n                  <div\n                    className={cx(styles.label, isActive && styles.activeSeries, navigator?.clipboard && styles.copy)}\n                    onMouseEnter={onMouseEnterLabel}\n                    onMouseLeave={onMouseLeaveLabel}\n                    onClick={() => copyToClipboard(label, LabelValueTypes.label)}\n                    ref={labelRef}\n                  >\n                    {label}\n                  </div>\n                </>\n              </Tooltip>\n            </>\n          )}\n        </div>\n      )}\n\n      <div className={styles.valueWrapper}>\n        {color && colorPlacement === ColorPlacement.leading && (\n          <VizTooltipColorIndicator\n            color={color}\n            colorIndicator={colorIndicator}\n            position={ColorIndicatorPosition.Leading}\n            lineStyle={lineStyle}\n          />\n        )}\n\n        {!isPinned ? (\n          <div className={cx(styles.value, isActive)} style={innerValueScrollStyle}>\n            {value}\n          </div>\n        ) : (\n          <>\n            {showCopySuccess && copiedText?.value && (\n              <InlineToast placement=\"top\" referenceElement={valueRef.current}>\n                {SUCCESSFULLY_COPIED_TEXT}\n              </InlineToast>\n            )}\n            {/* eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions */}\n            <div\n              className={cx(styles.value, isActive, navigator?.clipboard && styles.copy)}\n              style={innerValueScrollStyle}\n              onClick={() => copyToClipboard(value ? value.toString() : '', LabelValueTypes.value)}\n              ref={valueRef}\n            >\n              {value}\n            </div>\n          </>\n        )}\n\n        {color && colorPlacement === ColorPlacement.trailing && (\n          <VizTooltipColorIndicator\n            color={color}\n            colorIndicator={colorIndicator}\n            position={ColorIndicatorPosition.Trailing}\n            lineStyle={lineStyle}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2, justify: string, marginRight: string) => ({\n  contentWrapper: css({\n    display: 'flex',\n    alignItems: 'start',\n    justifyContent: justify,\n    marginRight: marginRight,\n  }),\n  label: css({\n    color: theme.colors.text.secondary,\n    fontWeight: 400,\n    textOverflow: 'ellipsis',\n    overflow: 'hidden',\n    marginRight: theme.spacing(2),\n  }),\n  value: css({\n    fontWeight: 500,\n    textOverflow: 'ellipsis',\n    overflow: 'hidden',\n  }),\n  valueWrapper: css({\n    display: 'flex',\n    alignItems: 'center',\n  }),\n  activeSeries: css({\n    fontWeight: theme.typography.fontWeightBold,\n    color: theme.colors.text.maxContrast,\n  }),\n  copy: css({\n    cursor: 'pointer',\n  }),\n});\n","import { css } from '@emotion/css';\n\nimport {\n  arrayUtils,\n  DataFrame,\n  Field,\n  formattedValueToString,\n  getFieldDisplayName,\n  GrafanaTheme2,\n  LinkModel,\n} from '@grafana/data';\nimport { SortOrder, TooltipDisplayMode } from '@grafana/schema';\nimport { TextLink, useStyles2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\nimport { renderValue } from 'app/plugins/panel/geomap/utils/uiUtils';\n\nimport { ExemplarHoverView } from './ExemplarHoverView';\n\nexport interface Props {\n  data?: DataFrame; // source data\n  rowIndex?: number | null; // the hover row\n  columnIndex?: number | null; // the hover column\n  sortOrder?: SortOrder;\n  mode?: TooltipDisplayMode | null;\n  header?: string;\n  padding?: number;\n  maxHeight?: number;\n}\n\nexport interface DisplayValue {\n  name: string;\n  value: unknown;\n  valueString: string;\n  highlight: boolean;\n}\n\nexport function getDisplayValuesAndLinks(\n  data: DataFrame,\n  rowIndex: number,\n  columnIndex?: number | null,\n  sortOrder?: SortOrder,\n  mode?: TooltipDisplayMode | null\n) {\n  const fields = data.fields;\n  const hoveredField = columnIndex != null ? fields[columnIndex] : null;\n\n  const visibleFields = fields.filter((f) => !Boolean(f.config.custom?.hideFrom?.tooltip));\n  const traceIDField = visibleFields.find((field) => field.name === 'traceID') || fields[0];\n  const orderedVisibleFields = [];\n  // Only include traceID if it's visible and put it in front.\n  if (visibleFields.filter((field) => traceIDField === field).length > 0) {\n    orderedVisibleFields.push(traceIDField);\n  }\n  orderedVisibleFields.push(...visibleFields.filter((field) => traceIDField !== field));\n\n  if (orderedVisibleFields.length === 0) {\n    return null;\n  }\n\n  const displayValues: DisplayValue[] = [];\n  const links: Array<LinkModel<Field>> = [];\n  const linkLookup = new Set<string>();\n\n  for (const field of orderedVisibleFields) {\n    if (mode === TooltipDisplayMode.Single && field !== hoveredField) {\n      continue;\n    }\n\n    const value = field.values[rowIndex];\n    const fieldDisplay = field.display ? field.display(value) : { text: `${value}`, numeric: +value };\n\n    if (field.getLinks) {\n      field.getLinks({ calculatedValue: fieldDisplay, valueRowIndex: rowIndex }).forEach((link) => {\n        const key = `${link.title}/${link.href}`;\n        if (!linkLookup.has(key)) {\n          links.push(link);\n          linkLookup.add(key);\n        }\n      });\n    }\n\n    displayValues.push({\n      name: getFieldDisplayName(field, data),\n      value,\n      valueString: formattedValueToString(fieldDisplay),\n      highlight: field === hoveredField,\n    });\n  }\n\n  if (sortOrder && sortOrder !== SortOrder.None) {\n    displayValues.sort((a, b) => arrayUtils.sortValues(sortOrder)(a.value, b.value));\n  }\n\n  return { displayValues, links };\n}\n\nexport const DataHoverView = ({\n  data,\n  rowIndex,\n  columnIndex,\n  sortOrder,\n  mode,\n  header,\n  padding = 0,\n  maxHeight,\n}: Props) => {\n  const styles = useStyles2(getStyles, padding);\n\n  if (!data || rowIndex == null) {\n    return null;\n  }\n\n  const dispValuesAndLinks = getDisplayValuesAndLinks(data, rowIndex, columnIndex, sortOrder, mode);\n\n  if (dispValuesAndLinks == null) {\n    return null;\n  }\n\n  const { displayValues, links } = dispValuesAndLinks;\n\n  if (header === 'Exemplar') {\n    return <ExemplarHoverView displayValues={displayValues} links={links} header={header} maxHeight={maxHeight} />;\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      {header && (\n        <div className={styles.header}>\n          <span className={styles.title}>{header}</span>\n        </div>\n      )}\n      <table className={styles.infoWrap}>\n        <tbody>\n          {displayValues.map((displayValue, i) => (\n            <tr key={`${i}/${rowIndex}`}>\n              <th>{displayValue.name}</th>\n              <td>{renderValue(displayValue.valueString)}</td>\n            </tr>\n          ))}\n          {links.map((link, i) => (\n            <tr key={i}>\n              <th>\n                <Trans i18nKey=\"visualization.data-hover-view.link\">Link</Trans>\n              </th>\n              <td colSpan={2}>\n                <TextLink href={link.href} external={link.target === '_blank'} weight={'medium'} inline={false}>\n                  {link.title}\n                </TextLink>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\nconst getStyles = (theme: GrafanaTheme2, padding = 0) => {\n  return {\n    wrapper: css({\n      padding: `${padding}px`,\n      background: theme.components.tooltip.background,\n      borderRadius: theme.shape.borderRadius(2),\n    }),\n    header: css({\n      background: theme.colors.background.secondary,\n      alignItems: 'center',\n      alignContent: 'center',\n      display: 'flex',\n      paddingBottom: theme.spacing(1),\n    }),\n    title: css({\n      fontWeight: theme.typography.fontWeightMedium,\n      overflow: 'hidden',\n      display: 'inline-block',\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      flexGrow: 1,\n    }),\n    infoWrap: css({\n      padding: theme.spacing(1),\n      background: 'transparent',\n      border: 'none',\n      th: {\n        fontWeight: theme.typography.fontWeightMedium,\n        padding: theme.spacing(0.25, 2, 0.25, 0),\n      },\n\n      tr: {\n        borderBottom: `1px solid ${theme.colors.border.weak}`,\n        '&:last-child': {\n          borderBottom: 'none',\n        },\n      },\n    }),\n    link: css({\n      color: theme.colors.text.link,\n    }),\n  };\n};\n","import { Component } from 'react';\nimport { Subscription } from 'rxjs';\n\nimport {\n  EventBus,\n  LegacyGraphHoverEvent,\n  LegacyGraphHoverClearEvent,\n  DataHoverEvent,\n  DataHoverClearEvent,\n  BusEventBase,\n} from '@grafana/data';\nimport { CustomScrollbar } from '@grafana/ui';\nimport { DataHoverView } from 'app/features/visualization/data-hover/DataHoverView';\n\ninterface Props {\n  eventBus: EventBus;\n}\n\ninterface State {\n  event?: BusEventBase;\n}\nexport class CursorView extends Component<Props, State> {\n  subscription = new Subscription();\n  state: State = {};\n\n  componentDidMount() {\n    const { eventBus } = this.props;\n\n    this.subscription.add(\n      eventBus.subscribe(DataHoverEvent, (event) => {\n        this.setState({ event });\n      })\n    );\n\n    this.subscription.add(\n      eventBus.subscribe(DataHoverClearEvent, (event) => {\n        this.setState({ event });\n      })\n    );\n\n    this.subscription.add(\n      eventBus.subscribe(LegacyGraphHoverEvent, (event) => {\n        this.setState({ event });\n      })\n    );\n\n    this.subscription.add(\n      eventBus.subscribe(LegacyGraphHoverClearEvent, (event) => {\n        this.setState({ event });\n      })\n    );\n  }\n\n  componentWillUnmount() {\n    this.subscription.unsubscribe();\n  }\n\n  render() {\n    const { event } = this.state;\n    if (!event) {\n      return <div>no events yet</div>;\n    }\n    const { type, payload, origin } = event;\n    return (\n      <CustomScrollbar autoHeightMin=\"100%\" autoHeightMax=\"100%\">\n        <h3>Origin: {(origin as any)?.path}</h3>\n        <span>Type: {type}</span>\n        {Boolean(payload) && (\n          <>\n            <pre>{JSON.stringify(payload.point, null, '  ')}</pre>\n            {payload.data && (\n              <DataHoverView data={payload.data} rowIndex={payload.rowIndex} columnIndex={payload.columnIndex} />\n            )}\n          </>\n        )}\n      </CustomScrollbar>\n    );\n  }\n}\n","import { PureComponent } from 'react';\nimport { PartialObserver, Unsubscribable } from 'rxjs';\n\nimport {\n  BusEvent,\n  CircularVector,\n  DataHoverEvent,\n  DataHoverClearEvent,\n  DataSelectEvent,\n  EventBus,\n} from '@grafana/data';\nimport { CustomScrollbar } from '@grafana/ui';\n\ninterface Props {\n  eventBus: EventBus;\n}\n\ninterface State {\n  isError?: boolean;\n  counter: number;\n}\n\ninterface BusEventEx {\n  key: number;\n  type: string;\n  path: string;\n  payload: any;\n}\nlet counter = 100;\n\nexport class EventBusLoggerPanel extends PureComponent<Props, State> {\n  history = new CircularVector<BusEventEx>({ capacity: 40, append: 'head' });\n  subs: Unsubscribable[];\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = { counter };\n\n    const subs: Unsubscribable[] = [];\n    subs.push(props.eventBus.getStream(DataHoverEvent).subscribe(this.eventObserver));\n    subs.push(props.eventBus.getStream(DataHoverClearEvent).subscribe(this.eventObserver));\n    subs.push(props.eventBus.getStream(DataSelectEvent).subscribe(this.eventObserver));\n    this.subs = subs;\n  }\n\n  componentWillUnmount() {\n    for (const sub of this.subs) {\n      sub.unsubscribe();\n    }\n  }\n\n  eventObserver: PartialObserver<BusEvent> = {\n    next: (event: BusEvent) => {\n      const origin: any = event.origin;\n      this.history.add({\n        key: counter++,\n        type: event.type,\n        path: origin?.path,\n        payload: event.payload,\n      });\n      this.setState({ counter });\n    },\n  };\n\n  render() {\n    return (\n      <CustomScrollbar autoHeightMin=\"100%\" autoHeightMax=\"100%\">\n        {this.history.map((v, idx) => (\n          <div key={v.key}>\n            {JSON.stringify(v.path)} {v.type} / X:{JSON.stringify(v.payload.x)} / Y:{JSON.stringify(v.payload.y)}\n          </div>\n        ))}\n      </CustomScrollbar>\n    );\n  }\n}\n","import { Component } from 'react';\n\nimport {\n  compareArrayValues,\n  compareDataFrameStructures,\n  fieldReducers,\n  getFieldDisplayName,\n  getFrameDisplayName,\n  PanelProps,\n  ReducerID,\n} from '@grafana/data';\nimport { IconButton } from '@grafana/ui';\n\nimport { Options, UpdateConfig } from './panelcfg.gen';\n\ntype Props = PanelProps<Options>;\n\ntype UpdateCounters = {\n  [K in keyof UpdateConfig]: number;\n};\n\nexport class RenderInfoViewer extends Component<Props> {\n  // Intentionally not state to avoid overhead -- yes, things will be 1 tick behind\n  lastRender = Date.now();\n  counters: UpdateCounters = {\n    render: 0,\n    dataChanged: 0,\n    schemaChanged: 0,\n  };\n\n  shouldComponentUpdate(prevProps: Props) {\n    const { data, options } = this.props;\n\n    if (prevProps.data !== data) {\n      this.counters.dataChanged++;\n\n      if (options.counters?.schemaChanged) {\n        const oldSeries = prevProps.data?.series;\n        const series = data.series;\n        if (series && oldSeries) {\n          const sameStructure = compareArrayValues(series, oldSeries, compareDataFrameStructures);\n          if (!sameStructure) {\n            this.counters.schemaChanged++;\n          }\n        }\n      }\n    }\n    return true; // always render?\n  }\n\n  resetCounters = () => {\n    this.counters = {\n      render: 0,\n      dataChanged: 0,\n      schemaChanged: 0,\n    };\n    this.forceUpdate();\n  };\n\n  render() {\n    const { data, options } = this.props;\n    const showCounters = options.counters ?? {\n      render: false,\n      dataChanged: false,\n      schemaChanged: false,\n    };\n    this.counters.render++;\n    const now = Date.now();\n    const elapsed = now - this.lastRender;\n    this.lastRender = now;\n\n    const reducer = fieldReducers.get(ReducerID.lastNotNull);\n\n    return (\n      <div>\n        <div>\n          <IconButton name=\"step-backward\" title=\"reset counters\" onClick={this.resetCounters} tooltip=\"Step back\" />\n          <span>\n            {showCounters.render && <span>Render: {this.counters.render}&nbsp;</span>}\n            {showCounters.dataChanged && <span>Data: {this.counters.dataChanged}&nbsp;</span>}\n            {showCounters.schemaChanged && <span>Schema: {this.counters.schemaChanged}&nbsp;</span>}\n            <span>TIME: {elapsed}ms</span>\n          </span>\n        </div>\n\n        {data.series &&\n          data.series.map((frame, idx) => (\n            <div key={`${idx}/${frame.refId}`}>\n              <h4>\n                {getFrameDisplayName(frame, idx)} ({frame.length})\n              </h4>\n              <table className=\"filter-table\">\n                <thead>\n                  <tr>\n                    <td>Field</td>\n                    <td>Type</td>\n                    <td>Last</td>\n                  </tr>\n                </thead>\n                <tbody>\n                  {frame.fields.map((field, idx) => {\n                    const v = reducer.reduce!(field, false, false)[reducer.id];\n                    return (\n                      <tr key={`${idx}/${field.name}`}>\n                        <td>{getFieldDisplayName(field, frame, data.series)}</td>\n                        <td>{field.type}</td>\n                        <td>{`${v}`}</td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n          ))}\n      </div>\n    );\n  }\n}\n","import { FormEvent } from 'react';\n\nimport { PanelOptionsEditorProps, PanelProps } from '@grafana/data';\nimport { Field, Input, usePanelContext } from '@grafana/ui';\n\nimport { Options } from './panelcfg.gen';\n\nexport function StateView(props: PanelProps<Options>) {\n  const context = usePanelContext();\n\n  const onChangeName = (e: FormEvent<HTMLInputElement>) => {\n    context.onInstanceStateChange!({\n      name: e.currentTarget.value,\n    });\n  };\n\n  return (\n    <>\n      <Field label=\"State name\">\n        <Input value={context.instanceState?.name ?? ''} onChange={onChangeName} />\n      </Field>\n    </>\n  );\n}\n\nexport function StateViewEditor({ value, context, onChange, item }: PanelOptionsEditorProps<string>) {\n  return <div>Current value: {context.instanceState?.name} </div>;\n}\n","// Code generated - EDITING IS FUTILE. DO NOT EDIT.\n//\n// Generated by:\n//     public/app/plugins/gen.go\n// Using jennies:\n//     TSTypesJenny\n//     PluginTsTypesJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\nexport type UpdateConfig = {\n  render: boolean,\n  dataChanged: boolean,\n  schemaChanged: boolean,\n};\n\nexport enum DebugMode {\n  Cursor = 'cursor',\n  Events = 'events',\n  Render = 'render',\n  State = 'State',\n  ThrowError = 'ThrowError',\n}\n\nexport interface Options {\n  counters?: UpdateConfig;\n  mode: DebugMode;\n}\n","import { Component } from 'react';\n\nimport { PanelProps } from '@grafana/data';\n\nimport { CursorView } from './CursorView';\nimport { EventBusLoggerPanel } from './EventBusLogger';\nimport { RenderInfoViewer } from './RenderInfoViewer';\nimport { StateView } from './StateView';\nimport { Options, DebugMode } from './panelcfg.gen';\n\ntype Props = PanelProps<Options>;\n\nexport class DebugPanel extends Component<Props> {\n  render() {\n    const { options } = this.props;\n\n    switch (options.mode) {\n      case DebugMode.Events:\n        return <EventBusLoggerPanel eventBus={this.props.eventBus} />;\n      case DebugMode.Cursor:\n        return <CursorView eventBus={this.props.eventBus} />;\n      case DebugMode.State:\n        return <StateView {...this.props} />;\n      case DebugMode.ThrowError:\n        throw new Error('I failed you and for that i am deeply sorry');\n      default:\n        return <RenderInfoViewer {...this.props} />;\n    }\n  }\n}\n","import { PanelPlugin } from '@grafana/data';\n\nimport { DebugPanel } from './DebugPanel';\nimport { StateViewEditor } from './StateView';\nimport { DebugMode, Options } from './panelcfg.gen';\n\nexport const plugin = new PanelPlugin<Options>(DebugPanel).useFieldConfig().setPanelOptions((builder) => {\n  builder\n    .addSelect({\n      path: 'mode',\n      name: 'Mode',\n      defaultValue: DebugMode.Render,\n      settings: {\n        options: [\n          { label: 'Render', value: DebugMode.Render },\n          { label: 'Events', value: DebugMode.Events },\n          { label: 'Cursor', value: DebugMode.Cursor },\n          { label: 'Cursor', value: DebugMode.Cursor },\n          { label: 'Share state', value: DebugMode.State },\n          { label: 'Throw error', value: DebugMode.ThrowError },\n        ],\n      },\n    })\n    .addCustomEditor({\n      id: 'stateView',\n      path: 'stateView',\n      name: 'State view',\n      defaultValue: '',\n      showIf: ({ mode }) => mode === DebugMode.State,\n      editor: StateViewEditor,\n    })\n    .addBooleanSwitch({\n      path: 'counters.render',\n      name: 'Render count',\n      defaultValue: true,\n      showIf: ({ mode }) => mode === DebugMode.Render,\n    })\n    .addBooleanSwitch({\n      path: 'counters.dataChanged',\n      name: 'Data changed count',\n      defaultValue: true,\n      showIf: ({ mode }) => mode === DebugMode.Render,\n    })\n    .addBooleanSwitch({\n      path: 'counters.schemaChanged',\n      name: 'Schema changed count',\n      defaultValue: true,\n      showIf: ({ mode }) => mode === DebugMode.Render,\n    })\n    .addDashboardPicker({\n      path: 'dashboardUID',\n      name: 'Dashboard',\n      settings: {\n        placeholder: 'Select dashboard',\n        isClearable: true,\n      },\n    });\n});\n"],"names":["ColorIndicatorPosition","VizTooltipColorIndicator","color","colorIndicator","position","lineStyle","styles","getStyles","SeriesIcon","theme","LabelValueTypes","SUCCESSFULLY_COPIED_TEXT","SHOW_SUCCESS_DURATION","HORIZONTAL_PX_PER_CHAR","VizTooltipRow","label","value","colorPlacement","justify","isActive","marginRight","isPinned","showValueScroll","innerValueScrollStyle","showLabelTooltip","setShowLabelTooltip","copiedText","setCopiedText","showCopySuccess","setShowCopySuccess","labelRef","valueRef","timeoutId","copyToClipboard","text","type","fallbackCopyToClipboard","textarea","err","onMouseEnterLabel","event","onMouseLeaveLabel","Tooltip","InlineToast","getDisplayValuesAndLinks","data","rowIndex","columnIndex","sortOrder","mode","fields","hoveredField","visibleFields","f","traceIDField","field","orderedVisibleFields","displayValues","links","linkLookup","fieldDisplay","link","key","a","b","DataHoverView","header","padding","maxHeight","dispValuesAndLinks","displayValue","i","CursorView","Subscription","eventBus","payload","origin","CustomScrollbar","counter","EventBusLoggerPanel","props","CircularVector","subs","sub","v","idx","RenderInfoViewer","prevProps","options","oldSeries","series","showCounters","now","elapsed","reducer","fieldReducer","IconButton","frame","StateView","context","onChangeName","e","Field","Input","StateViewEditor","onChange","item","DebugMode","DebugPanel","PanelPlugin","builder"],"sourceRoot":""}