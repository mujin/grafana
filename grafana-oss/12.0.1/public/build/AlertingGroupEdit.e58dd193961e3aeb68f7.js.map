{"version":3,"file":"AlertingGroupEdit.e58dd193961e3aeb68f7.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/CollapseToggle.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/NeedHelpInfo.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/RuleEditorSection.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/ruleGroup/useDeleteRuleGroup.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/ruleGroup/useUpdateRuleGroup.ts","webpack://grafana/./public/app/features/alerting/unified/group-details/components/DraggableRulesTable.tsx","webpack://grafana/./public/app/features/alerting/unified/group-details/GroupEditPage.tsx"],"sourcesContent":["import { HTMLAttributes } from 'react';\n\nimport { Button, IconSize } from '@grafana/ui';\n\ninterface Props extends HTMLAttributes<HTMLButtonElement> {\n  isCollapsed: boolean;\n  onToggle: (isCollapsed: boolean) => void;\n  // Todo: this should be made compulsory for a11y purposes\n  idControlled?: string;\n  size?: IconSize;\n  className?: string;\n  text?: string;\n}\n\nexport const CollapseToggle = ({\n  isCollapsed,\n  onToggle,\n  idControlled,\n  className,\n  text,\n  size = 'xl',\n  ...restOfProps\n}: Props) => {\n  return (\n    <Button\n      type=\"button\"\n      fill=\"text\"\n      variant=\"secondary\"\n      aria-expanded={!isCollapsed}\n      aria-controls={idControlled}\n      className={className}\n      icon={isCollapsed ? 'angle-right' : 'angle-down'}\n      onClick={() => onToggle(!isCollapsed)}\n      {...restOfProps}\n    >\n      {text}\n    </Button>\n  );\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, Stack, Text, Toggletip, useStyles2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\ninterface NeedHelpInfoProps {\n  contentText: string | JSX.Element;\n  externalLink?: string;\n  linkText?: string;\n  title?: string;\n}\nexport function NeedHelpInfo({ contentText, externalLink, linkText, title = 'Need help?' }: NeedHelpInfoProps) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Toggletip\n      content={<div className={styles.mutedText}>{contentText}</div>}\n      title={\n        <Stack gap={0.5} direction=\"row\" alignItems=\"center\">\n          <Icon name=\"question-circle\" />\n          {title}\n        </Stack>\n      }\n      footer={\n        externalLink ? (\n          <a href={externalLink} target=\"_blank\" rel=\"noreferrer\">\n            <Stack direction=\"row\" gap={0.5} alignItems=\"center\">\n              <Text color=\"link\">\n                {linkText} <Icon size=\"sm\" name=\"external-link-alt\" />\n              </Text>\n            </Stack>\n          </a>\n        ) : undefined\n      }\n      closeButton={true}\n      placement=\"bottom-start\"\n    >\n      <div className={styles.helpInfo}>\n        <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n          <Icon name=\"question-circle\" size=\"sm\" />\n          <Text variant=\"bodySmall\" color=\"primary\">\n            <Trans i18nKey=\"alerting.need-help-info.need-help\">Need help?</Trans>\n          </Text>\n        </Stack>\n      </div>\n    </Toggletip>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  mutedText: css({\n    color: theme.colors.text.secondary,\n    fontSize: theme.typography.size.sm,\n  }),\n  helpInfo: css({\n    cursor: 'pointer',\n    textDecoration: 'underline',\n  }),\n});\n","import { css, cx } from '@emotion/css';\nimport * as React from 'react';\nimport { ReactElement } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { FieldSet, InlineSwitch, Stack, Text, useStyles2 } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nexport interface RuleEditorSectionProps {\n  title: string;\n  stepNo: number;\n  description?: string | ReactElement;\n  fullWidth?: boolean;\n  switchMode?: {\n    isAdvancedMode: boolean;\n    setAdvancedMode: (isAdvanced: boolean) => void;\n  };\n}\n\nexport const RuleEditorSection = ({\n  title,\n  stepNo,\n  children,\n  fullWidth = false,\n  description,\n  switchMode,\n}: React.PropsWithChildren<RuleEditorSectionProps>) => {\n  const styles = useStyles2(getStyles);\n  const AlertRuleSelectors = selectors.components.AlertRules;\n  return (\n    <div className={styles.parent} data-testid={AlertRuleSelectors.step(stepNo.toString())}>\n      <FieldSet\n        className={cx(fullWidth && styles.fullWidth)}\n        label={\n          <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\">\n            <Text variant=\"h3\">\n              {stepNo}. {title}\n            </Text>\n            {switchMode && (\n              <Text variant=\"bodySmall\">\n                <InlineSwitch\n                  data-testid={AlertRuleSelectors.stepAdvancedModeSwitch(stepNo.toString())}\n                  value={switchMode.isAdvancedMode}\n                  onChange={(event) => {\n                    switchMode.setAdvancedMode(event.currentTarget.checked);\n                  }}\n                  label={t('alerting.rule-editor-section.label-advanced-options', 'Advanced options')}\n                  showLabel\n                  transparent\n                  className={styles.reverse}\n                />\n              </Text>\n            )}\n          </Stack>\n        }\n      >\n        <Stack direction=\"column\">\n          {description && <div className={styles.description}>{description}</div>}\n          {children}\n        </Stack>\n      </FieldSet>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  parent: css({\n    display: 'flex',\n    flexDirection: 'row',\n    border: `solid 1px ${theme.colors.border.weak}`,\n    borderRadius: theme.shape.radius.default,\n    padding: `${theme.spacing(2)} ${theme.spacing(3)}`,\n  }),\n  description: css({\n    marginTop: `-${theme.spacing(2)}`,\n  }),\n  fullWidth: css({\n    width: '100%',\n  }),\n  reverse: css({\n    flexDirection: 'row-reverse',\n    gap: theme.spacing(1),\n  }),\n});\n","import { dispatch } from 'app/store/store';\nimport { RuleGroupIdentifier } from 'app/types/unified-alerting';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\nimport { featureDiscoveryApi } from '../../api/featureDiscoveryApi';\nimport { fetchPromAndRulerRulesAction } from '../../state/actions';\nimport { useAsync } from '../useAsync';\n\nimport { RulerNotSupportedError } from './useProduceNewRuleGroup';\n\nconst { useDeleteRuleGroupFromNamespaceMutation } = alertRuleApi;\nconst { useLazyDiscoverDsFeaturesQuery } = featureDiscoveryApi;\n\nexport function useDeleteRuleGroup() {\n  const [deleteRuleGroup] = useDeleteRuleGroupFromNamespaceMutation();\n  const [discoverDataSourceFeature] = useLazyDiscoverDsFeaturesQuery();\n\n  return useAsync(async (ruleGroupIdentifier: RuleGroupIdentifier) => {\n    const { dataSourceName, namespaceName, groupName } = ruleGroupIdentifier;\n\n    const { rulerConfig } = await discoverDataSourceFeature({ rulesSourceName: dataSourceName }).unwrap();\n    if (!rulerConfig) {\n      throw RulerNotSupportedError(dataSourceName);\n    }\n\n    const result = await deleteRuleGroup({ rulerConfig, namespace: namespaceName, group: groupName }).unwrap();\n\n    // @TODO remove this once we can use tags to invalidate\n    await dispatch(fetchPromAndRulerRulesAction({ rulesSourceName: dataSourceName }));\n\n    return result;\n  });\n}\n","import { Action } from '@reduxjs/toolkit';\n\nimport { t } from 'app/core/internationalization';\nimport {\n  DataSourceRuleGroupIdentifier,\n  GrafanaRuleGroupIdentifier,\n  RuleGroupIdentifier,\n  RuleGroupIdentifierV2,\n} from 'app/types/unified-alerting';\n\nimport { logError } from '../../Analytics';\nimport { alertRuleApi } from '../../api/alertRuleApi';\nimport { notFoundToNullOrThrow } from '../../api/util';\nimport {\n  SwapOperation,\n  moveRuleGroupAction,\n  renameRuleGroupAction,\n  reorderRulesInRuleGroupAction,\n  updateRuleGroupAction,\n} from '../../reducers/ruler/ruleGroups';\nimport { isGrafanaRulesSource } from '../../utils/datasource';\nimport { useAsync } from '../useAsync';\n\nimport { useProduceNewRuleGroup } from './useProduceNewRuleGroup';\n\nconst ruleUpdateSuccessMessage = () => t('alerting.rule-groups.update.success', 'Successfully updated rule group');\n\nexport interface UpdateGroupDelta {\n  namespaceName?: string;\n  groupName?: string;\n  interval?: string;\n  ruleSwaps?: SwapOperation[];\n}\n\n/**\n * Update or move an existing rule group. Supports renaming a group and moving to a different namespace\n */\nexport function useUpdateRuleGroup() {\n  const [produceNewRuleGroup] = useProduceNewRuleGroup();\n  const [fetchRuleGroup] = alertRuleApi.endpoints.getRuleGroupForNamespace.useLazyQuery();\n  const [upsertRuleGroup] = alertRuleApi.endpoints.upsertRuleGroupForNamespace.useMutation();\n  const [deleteRuleGroup] = alertRuleApi.endpoints.deleteRuleGroupFromNamespace.useMutation();\n\n  return useAsync(async (ruleGroup: RuleGroupIdentifier, delta: UpdateGroupDelta) => {\n    const updateActions: Action[] = [];\n\n    const isGrafanaSource = isGrafanaRulesSource(ruleGroup.dataSourceName);\n\n    if (delta.namespaceName) {\n      // we could technically support moving rule groups to another folder, though we don't have a \"move\" wizard yet.\n      if (isGrafanaSource) {\n        throw new Error('Moving a Grafana-managed rule group to another folder is currently not supported.');\n      }\n      updateActions.push(moveRuleGroupAction({ newNamespaceName: delta.namespaceName }));\n    }\n\n    if (delta.groupName) {\n      updateActions.push(renameRuleGroupAction({ groupName: delta.groupName }));\n    }\n\n    if (delta.interval) {\n      updateActions.push(updateRuleGroupAction({ interval: delta.interval }));\n    }\n\n    if (delta.ruleSwaps) {\n      updateActions.push(reorderRulesInRuleGroupAction({ swaps: delta.ruleSwaps }));\n    }\n\n    const { newRuleGroupDefinition, rulerConfig } = await produceNewRuleGroup(ruleGroup, updateActions);\n\n    const oldNamespace = ruleGroup.namespaceName;\n    const targetNamespace = delta.namespaceName ?? oldNamespace;\n\n    const oldGroupName = ruleGroup.groupName;\n    const targetGroupName = newRuleGroupDefinition.name;\n\n    const isNamespaceChanged = oldNamespace !== targetNamespace;\n    const isGroupRenamed = oldGroupName !== targetGroupName;\n\n    // if we're also renaming the group, check if the target does not already exist\n    if (targetGroupName && isGroupRenamed) {\n      const targetGroup = await fetchRuleGroup({\n        rulerConfig,\n        namespace: targetNamespace,\n        group: targetGroupName,\n        // since this could throw 404\n        notificationOptions: { showErrorAlert: false },\n      })\n        .unwrap()\n        .catch(notFoundToNullOrThrow);\n\n      if (targetGroup?.rules?.length) {\n        throw new Error('Target group already has rules, merging rule groups is currently not supported.');\n      }\n    }\n\n    // create the new group in the target namespace or update the existing one\n    // ⚠️ it's important to do this before we remove the old group – better to have two groups than none if one of these requests fails\n    await upsertRuleGroup({\n      rulerConfig,\n      namespace: targetNamespace,\n      payload: newRuleGroupDefinition,\n      notificationOptions: { showSuccessAlert: false },\n    }).unwrap();\n\n    const newGroupIdentifier: RuleGroupIdentifierV2 =\n      rulerConfig.dataSourceName === 'grafana'\n        ? ({\n            groupName: targetGroupName,\n            namespace: { uid: targetNamespace },\n            groupOrigin: 'grafana',\n          } satisfies GrafanaRuleGroupIdentifier)\n        : ({\n            groupName: targetGroupName,\n            namespace: { name: targetNamespace },\n            groupOrigin: 'datasource',\n            rulesSource: {\n              uid: rulerConfig.dataSourceUid,\n              name: rulerConfig.dataSourceName,\n              ruleSourceType: 'datasource',\n            },\n          } satisfies DataSourceRuleGroupIdentifier);\n\n    // Removing groups is only necessary for Datasource-managed groups\n    const shouldRemoveOldGroup = (isNamespaceChanged || isGroupRenamed) && !isGrafanaSource;\n    // TODO How to make this safer?\n    if (shouldRemoveOldGroup) {\n      // now remove the old one\n      await deleteRuleGroup({\n        rulerConfig,\n        namespace: oldNamespace,\n        group: oldGroupName,\n        notificationOptions: { showSuccessAlert: false },\n      })\n        .unwrap()\n        .catch((e) => {\n          logError(e);\n        });\n    }\n\n    return newGroupIdentifier;\n  });\n}\n\n/**\n * Update an existing rule group, currently only supports updating the interval.\n * Use \"useRenameRuleGroup\" or \"useMoveRuleGroup\" for updating the namespace or group name.\n */\nexport function useUpdateRuleGroupConfiguration() {\n  const [produceNewRuleGroup] = useProduceNewRuleGroup();\n  const [upsertRuleGroup] = alertRuleApi.endpoints.upsertRuleGroupForNamespace.useMutation();\n\n  return useAsync(async (ruleGroup: RuleGroupIdentifier, interval: string) => {\n    const { namespaceName } = ruleGroup;\n\n    const action = updateRuleGroupAction({ interval });\n    const { newRuleGroupDefinition, rulerConfig } = await produceNewRuleGroup(ruleGroup, [action]);\n\n    return upsertRuleGroup({\n      rulerConfig,\n      namespace: namespaceName,\n      payload: newRuleGroupDefinition,\n      notificationOptions: { successMessage: ruleUpdateSuccessMessage() },\n    }).unwrap();\n  });\n}\n\n/**\n * Move a rule group to either another namespace with (optionally) a different name, throws if the action\n * targets an existing rule group.\n * Optionally, update the rule group evaluation interval.\n */\nexport function useMoveRuleGroup() {\n  const [produceNewRuleGroup] = useProduceNewRuleGroup();\n  const [fetchRuleGroup] = alertRuleApi.endpoints.getRuleGroupForNamespace.useLazyQuery();\n  const [upsertRuleGroup] = alertRuleApi.endpoints.upsertRuleGroupForNamespace.useMutation();\n  const [deleteRuleGroup] = alertRuleApi.endpoints.deleteRuleGroupFromNamespace.useMutation();\n\n  // @TODO maybe add where we moved it from and to for additional peace of mind\n  const successMessage = t('alerting.rule-groups.move.success', 'Successfully moved rule group');\n\n  return useAsync(\n    async (ruleGroup: RuleGroupIdentifier, namespaceName: string, groupName?: string, interval?: string) => {\n      // we could technically support moving rule groups to another folder, though we don't have a \"move\" wizard yet.\n      if (isGrafanaRulesSource(ruleGroup.dataSourceName)) {\n        throw new Error('Moving a Grafana-managed rule group to another folder is currently not supported.');\n      }\n\n      const action = moveRuleGroupAction({ newNamespaceName: namespaceName, groupName, interval });\n      const { newRuleGroupDefinition, rulerConfig } = await produceNewRuleGroup(ruleGroup, [action]);\n\n      const oldNamespace = ruleGroup.namespaceName;\n      const targetNamespace = action.payload.newNamespaceName;\n\n      const oldGroupName = ruleGroup.groupName;\n      const targetGroupName = action.payload.groupName;\n\n      const isGroupRenamed = Boolean(targetGroupName) && oldGroupName !== targetGroupName;\n\n      // if we're also renaming the group, check if the target does not already exist\n      if (targetGroupName && isGroupRenamed) {\n        const targetGroup = await fetchRuleGroup({\n          rulerConfig,\n          namespace: targetNamespace,\n          group: targetGroupName,\n          // since this could throw 404\n          notificationOptions: { showErrorAlert: false },\n        })\n          .unwrap()\n          .catch(notFoundToNullOrThrow);\n\n        if (targetGroup?.rules?.length) {\n          throw new Error('Target group already has rules, merging rule groups is currently not supported.');\n        }\n      }\n\n      // create the new group in the target namespace\n      // ⚠️ it's important to do this before we remove the old group – better to have two groups than none if one of these requests fails\n      await upsertRuleGroup({\n        rulerConfig,\n        namespace: targetNamespace,\n        payload: newRuleGroupDefinition,\n        notificationOptions: { successMessage },\n      }).unwrap();\n\n      // now remove the old one\n      const result = await deleteRuleGroup({\n        rulerConfig,\n        namespace: oldNamespace,\n        group: oldGroupName,\n        notificationOptions: { showSuccessAlert: false },\n      }).unwrap();\n\n      return result;\n    }\n  );\n}\n\n/**\n * Rename a rule group but keep it within the same namespace, throws if the action targets an existing rule group.\n * Optionally, update the rule group evaluation interval.\n */\nexport function useRenameRuleGroup() {\n  const [produceNewRuleGroup] = useProduceNewRuleGroup();\n  const [fetchRuleGroup] = alertRuleApi.endpoints.getRuleGroupForNamespace.useLazyQuery();\n  const [upsertRuleGroup] = alertRuleApi.endpoints.upsertRuleGroupForNamespace.useMutation();\n  const [deleteRuleGroup] = alertRuleApi.endpoints.deleteRuleGroupFromNamespace.useMutation();\n\n  return useAsync(async (ruleGroup: RuleGroupIdentifier, groupName: string, interval?: string) => {\n    const action = renameRuleGroupAction({ groupName, interval });\n    const { newRuleGroupDefinition, rulerConfig } = await produceNewRuleGroup(ruleGroup, [action]);\n\n    const oldGroupName = ruleGroup.groupName;\n    const newGroupName = action.payload.groupName;\n    const namespaceName = ruleGroup.namespaceName;\n\n    const successMessage = t('alerting.rule-groups.rename.success', 'Successfully renamed rule group');\n\n    // check if the target group exists\n    const targetGroup = await fetchRuleGroup({\n      rulerConfig,\n      namespace: namespaceName,\n      group: newGroupName,\n      // since this could throw 404\n      notificationOptions: { showErrorAlert: false },\n    })\n      .unwrap()\n      .catch(notFoundToNullOrThrow);\n\n    if (targetGroup?.rules?.length) {\n      throw new Error('Target group has existing rules, merging rule groups is currently not supported.');\n    }\n\n    // if the target group does not exist, create the new group\n    // ⚠️ it's important to do this before we remove the old group – better to have two groups than none if one of these requests fails\n    const result = await upsertRuleGroup({\n      rulerConfig,\n      namespace: namespaceName,\n      payload: newRuleGroupDefinition,\n      notificationOptions: { successMessage },\n    }).unwrap();\n\n    // now delete the group we renamed\n    await deleteRuleGroup({\n      rulerConfig,\n      namespace: namespaceName,\n      group: oldGroupName,\n      notificationOptions: { showSuccessAlert: false },\n    }).unwrap();\n\n    return result;\n  });\n}\n\n/**\n * Reorder rules within an existing rule group. Pass in an array of swap operations Array<[oldIndex, newIndex]>.\n * This prevents rules from accidentally being updated and only allows indices to be moved around.\n */\nexport function useReorderRuleForRuleGroup() {\n  const [produceNewRuleGroup] = useProduceNewRuleGroup();\n  const [upsertRuleGroup] = alertRuleApi.endpoints.upsertRuleGroupForNamespace.useMutation();\n\n  return useAsync(async (ruleGroup: RuleGroupIdentifier, swaps: Array<[number, number]>) => {\n    const { namespaceName } = ruleGroup;\n\n    const action = reorderRulesInRuleGroupAction({ swaps });\n    const { newRuleGroupDefinition, rulerConfig } = await produceNewRuleGroup(ruleGroup, [action]);\n\n    return upsertRuleGroup({\n      rulerConfig,\n      namespace: namespaceName,\n      payload: newRuleGroupDefinition,\n      notificationOptions: { successMessage: ruleUpdateSuccessMessage() },\n    }).unwrap();\n  });\n}\n","import { css, cx } from '@emotion/css';\nimport {\n  DragDropContext,\n  Draggable,\n  DraggableProvided,\n  DropResult,\n  Droppable,\n  DroppableProvided,\n} from '@hello-pangea/dnd';\nimport { produce } from 'immer';\nimport { forwardRef, useCallback, useMemo, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Badge, Icon, Stack, useStyles2 } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\nimport { RulerRuleDTO } from 'app/types/unified-alerting-dto';\n\nimport { SwapOperation, swapItems } from '../../reducers/ruler/ruleGroups';\nimport { hashRulerRule } from '../../utils/rule-id';\nimport { getNumberEvaluationsToStartAlerting, getRuleName, rulerRuleType } from '../../utils/rules';\n\ninterface DraggableRulesTableProps {\n  rules: RulerRuleDTO[];\n  groupInterval: string;\n  onSwap: (swapOperation: SwapOperation) => void;\n}\n\nexport function DraggableRulesTable({ rules, groupInterval, onSwap }: DraggableRulesTableProps) {\n  const styles = useStyles2(getStyles);\n  const [rulesList, setRulesList] = useState<RulerRuleDTO[]>(rules);\n\n  const onDragEnd = useCallback(\n    (result: DropResult) => {\n      // check for no-ops so we don't update the group unless we have changes\n      if (!result.destination) {\n        return;\n      }\n\n      const swapOperation: SwapOperation = [result.source.index, result.destination.index];\n\n      onSwap(swapOperation);\n\n      // re-order the rules list for the UI rendering\n      const newOrderedRules = produce(rulesList, (draft) => {\n        swapItems(draft, swapOperation);\n      });\n      setRulesList(newOrderedRules);\n    },\n    [rulesList, onSwap]\n  );\n\n  const rulesWithUID = useMemo(() => {\n    return rulesList.map((rulerRule) => ({ ...rulerRule, uid: hashRulerRule(rulerRule) }));\n  }, [rulesList]);\n\n  return (\n    <div>\n      <ListItem\n        ruleName={t('alerting.draggable-rules-table.rule-name', 'Rule name')}\n        pendingPeriod={t('alerting.draggable-rules-table.pending-period', 'Pending period')}\n        evalsToStartAlerting={t(\n          'alerting.draggable-rules-table.evals-to-start-alerting',\n          'Evaluations to start alerting'\n        )}\n        className={styles.listHeader}\n      />\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable\n          droppableId=\"alert-list\"\n          mode=\"standard\"\n          renderClone={(provided, _snapshot, rubric) => (\n            <DraggableListItem\n              provided={provided}\n              rule={rulesWithUID[rubric.source.index]}\n              isClone\n              groupInterval={groupInterval}\n            />\n          )}\n        >\n          {(droppableProvided: DroppableProvided) => (\n            <Stack direction=\"column\" gap={0} ref={droppableProvided.innerRef} {...droppableProvided.droppableProps}>\n              {rulesWithUID.map((rule, index) => (\n                <Draggable key={rule.uid} draggableId={rule.uid} index={index} isDragDisabled={false}>\n                  {(provided: DraggableProvided) => (\n                    <DraggableListItem key={rule.uid} provided={provided} rule={rule} groupInterval={groupInterval} />\n                  )}\n                </Draggable>\n              ))}\n              {droppableProvided.placeholder}\n            </Stack>\n          )}\n        </Droppable>\n      </DragDropContext>\n    </div>\n  );\n}\n\ninterface DraggableListItemProps extends React.HTMLAttributes<HTMLDivElement> {\n  provided: DraggableProvided;\n  rule: RulerRuleDTO;\n  groupInterval: string;\n  isClone?: boolean;\n}\n\nconst DraggableListItem = ({ provided, rule, groupInterval, isClone = false }: DraggableListItemProps) => {\n  const styles = useStyles2(getStyles);\n  const ruleName = getRuleName(rule);\n  const pendingPeriod = rulerRuleType.any.alertingRule(rule) ? rule.for : null;\n  const numberEvaluationsToStartAlerting = getNumberEvaluationsToStartAlerting(pendingPeriod ?? '0s', groupInterval);\n  const isRecordingRule = rulerRuleType.any.recordingRule(rule);\n\n  return (\n    <ListItem\n      dragHandle={<Icon name=\"draggabledots\" />}\n      ruleName={ruleName}\n      pendingPeriod={pendingPeriod}\n      evalsToStartAlerting={\n        isRecordingRule ? (\n          <Badge text={t('alerting.draggable-rules-table.recording', 'Recording')} color=\"purple\" />\n        ) : (\n          numberEvaluationsToStartAlerting\n        )\n      }\n      data-testid=\"reorder-alert-rule\"\n      className={cx(styles.listItem, { [styles.listItemClone]: isClone })}\n      ref={provided.innerRef}\n      {...provided.draggableProps}\n      {...provided.dragHandleProps}\n    />\n  );\n};\n\ninterface ListItemProps extends React.HTMLAttributes<HTMLDivElement> {\n  dragHandle?: React.ReactNode;\n  ruleName: React.ReactNode;\n  pendingPeriod: React.ReactNode;\n  evalsToStartAlerting: React.ReactNode;\n}\n\nconst ListItem = forwardRef<HTMLDivElement, ListItemProps>(\n  ({ dragHandle, ruleName, pendingPeriod, evalsToStartAlerting, className, ...props }, ref) => {\n    const styles = useStyles2(getStyles);\n\n    return (\n      <div className={cx(styles.listItem, className)} ref={ref} {...props}>\n        <Stack flex=\"0 0 24px\">{dragHandle}</Stack>\n        <Stack flex={1}>{ruleName}</Stack>\n        <Stack basis=\"30%\">{pendingPeriod}</Stack>\n        <Stack basis=\"30%\">{evalsToStartAlerting}</Stack>\n      </div>\n    );\n  }\n);\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  listItem: css({\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n\n    gap: theme.spacing(1),\n    padding: `${theme.spacing(1)} ${theme.spacing(2)}`,\n\n    '&:nth-child(even)': {\n      background: theme.colors.background.secondary,\n    },\n  }),\n  listItemClone: css({\n    border: `solid 1px ${theme.colors.primary.shade}`,\n  }),\n  listHeader: css({\n    fontWeight: theme.typography.fontWeightBold,\n    borderBottom: `1px solid ${theme.colors.border.weak}`,\n  }),\n});\n","import { css } from '@emotion/css';\nimport { produce } from 'immer';\nimport { useCallback, useEffect, useState } from 'react';\nimport { SubmitHandler, useForm } from 'react-hook-form';\nimport { useParams } from 'react-router-dom-v5-compat';\n\nimport { GrafanaTheme2, NavModelItem } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport {\n  Alert,\n  Button,\n  ConfirmModal,\n  Field,\n  Input,\n  LinkButton,\n  Stack,\n  useStyles2,\n  withErrorBoundary,\n} from '@grafana/ui';\nimport { EntityNotFound } from 'app/core/components/PageNotFound/EntityNotFound';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { Trans, t } from 'app/core/internationalization';\nimport { useDispatch } from 'app/types';\nimport { GrafanaRulesSourceSymbol, RuleGroupIdentifierV2, RulerDataSourceConfig } from 'app/types/unified-alerting';\nimport { RulerRuleGroupDTO } from 'app/types/unified-alerting-dto';\n\nimport { logError } from '../Analytics';\nimport { alertRuleApi } from '../api/alertRuleApi';\nimport { featureDiscoveryApi } from '../api/featureDiscoveryApi';\nimport { AlertingPageWrapper } from '../components/AlertingPageWrapper';\nimport { EvaluationGroupQuickPick } from '../components/rule-editor/EvaluationGroupQuickPick';\nimport { useDeleteRuleGroup } from '../hooks/ruleGroup/useDeleteRuleGroup';\nimport { UpdateGroupDelta, useUpdateRuleGroup } from '../hooks/ruleGroup/useUpdateRuleGroup';\nimport { isLoading, useAsync } from '../hooks/useAsync';\nimport { useFolder } from '../hooks/useFolder';\nimport { useRuleGroupConsistencyCheck } from '../hooks/usePrometheusConsistencyCheck';\nimport { useReturnTo } from '../hooks/useReturnTo';\nimport { SwapOperation } from '../reducers/ruler/ruleGroups';\nimport { DEFAULT_GROUP_EVALUATION_INTERVAL } from '../rule-editor/formDefaults';\nimport { ruleGroupIdentifierV2toV1 } from '../utils/groupIdentifier';\nimport { stringifyErrorLike } from '../utils/misc';\nimport { alertListPageLink, createListFilterLink, groups } from '../utils/navigation';\n\nimport { DraggableRulesTable } from './components/DraggableRulesTable';\nimport { evaluateEveryValidationOptions } from './validation';\n\ntype GroupEditPageRouteParams = {\n  dataSourceUid?: string;\n  namespaceId?: string;\n  groupName?: string;\n};\n\nconst { useDiscoverDsFeaturesQuery } = featureDiscoveryApi;\n\nfunction GroupEditPage() {\n  const dispatch = useDispatch();\n  const { dataSourceUid = '', namespaceId = '', groupName = '' } = useParams<GroupEditPageRouteParams>();\n\n  const { folder, loading: isFolderLoading } = useFolder(dataSourceUid === 'grafana' ? namespaceId : '');\n\n  const ruleSourceUid = dataSourceUid === 'grafana' ? GrafanaRulesSourceSymbol : dataSourceUid;\n  const {\n    data: dsFeatures,\n    isLoading: isDsFeaturesLoading,\n    error: dsFeaturesError,\n  } = useDiscoverDsFeaturesQuery({ uid: ruleSourceUid });\n\n  // We use useAsync instead of RTKQ query to avoid cache invalidation issues when the group is being deleted\n  // RTKQ query would refetch the group after it's deleted and we'd end up with a blinking group not found error\n  const [getGroupAction, groupRequestState] = useAsync(async (rulerConfig: RulerDataSourceConfig) => {\n    return dispatch(\n      alertRuleApi.endpoints.getRuleGroupForNamespace.initiate({\n        rulerConfig: rulerConfig,\n        namespace: namespaceId,\n        group: groupName,\n      })\n    ).unwrap();\n  });\n\n  useEffect(() => {\n    if (namespaceId && groupName && dsFeatures?.rulerConfig) {\n      getGroupAction.execute(dsFeatures.rulerConfig);\n    }\n  }, [namespaceId, groupName, dsFeatures?.rulerConfig, getGroupAction]);\n\n  const isLoadingGroup = isFolderLoading || isDsFeaturesLoading || isLoading(groupRequestState);\n  const { result: rulerGroup, error: ruleGroupError } = groupRequestState;\n\n  const pageNav: NavModelItem = {\n    text: t('alerting.group-edit.page-title', 'Edit rule group'),\n    parentItem: {\n      text: folder?.title ?? namespaceId,\n      url: createListFilterLink([\n        ['namespace', folder?.title ?? namespaceId],\n        ['group', groupName],\n      ]),\n    },\n  };\n\n  if (!!dsFeatures && !dsFeatures.rulerConfig) {\n    return (\n      <AlertingPageWrapper pageNav={pageNav} title={groupName} navId=\"alert-list\" isLoading={isLoadingGroup}>\n        <Alert title={t('alerting.group-edit.group-not-editable', 'Selected group cannot be edited')}>\n          <Trans i18nKey=\"alerting.group-edit.group-not-editable-description\">\n            This group belongs to a data source that does not support editing.\n          </Trans>\n        </Alert>\n      </AlertingPageWrapper>\n    );\n  }\n\n  const groupIdentifier: RuleGroupIdentifierV2 =\n    dataSourceUid === 'grafana'\n      ? {\n          namespace: { uid: namespaceId },\n          groupName: groupName,\n          groupOrigin: 'grafana',\n        }\n      : {\n          rulesSource: { uid: dataSourceUid, name: dsFeatures?.name ?? '', ruleSourceType: 'datasource' },\n          namespace: { name: namespaceId },\n          groupName: groupName,\n          groupOrigin: 'datasource',\n        };\n\n  return (\n    <AlertingPageWrapper\n      pageNav={pageNav}\n      title={t('alerting.group-edit.title', 'Edit evaluation group')}\n      navId=\"alert-list\"\n      isLoading={isLoadingGroup}\n    >\n      <>\n        {Boolean(dsFeaturesError) && (\n          <Alert\n            title={t('alerting.group-edit.ds-error', 'Error loading data source details')}\n            bottomSpacing={0}\n            topSpacing={2}\n          >\n            <div>{stringifyErrorLike(dsFeaturesError)}</div>\n          </Alert>\n        )}\n        {/* If the rule group is being deleted, RTKQ will try to referch it due to cache invalidation */}\n        {/* For a few miliseconds before redirecting, the rule group will be missing and 404 error would blink */}\n        {Boolean(ruleGroupError) && (\n          <Alert\n            title={t('alerting.group-edit.rule-group-error', 'Error loading rule group')}\n            bottomSpacing={0}\n            topSpacing={2}\n          >\n            {stringifyErrorLike(ruleGroupError)}\n          </Alert>\n        )}\n      </>\n      {rulerGroup && <GroupEditForm rulerGroup={rulerGroup} groupIdentifier={groupIdentifier} />}\n      {!rulerGroup && <EntityNotFound entity={`${namespaceId}/${groupName}`} />}\n    </AlertingPageWrapper>\n  );\n}\n\nexport default withErrorBoundary(GroupEditPage, { style: 'page' });\n\ninterface GroupEditFormProps {\n  rulerGroup: RulerRuleGroupDTO;\n  groupIdentifier: RuleGroupIdentifierV2;\n}\n\ninterface GroupEditFormData {\n  name: string;\n  interval: string;\n  namespace?: string;\n}\n\nfunction GroupEditForm({ rulerGroup, groupIdentifier }: GroupEditFormProps) {\n  const styles = useStyles2(getStyles);\n  const appInfo = useAppNotification();\n  const { returnTo } = useReturnTo(groups.detailsPageLinkFromGroupIdentifier(groupIdentifier));\n  const { folder } = useFolder(groupIdentifier.groupOrigin === 'grafana' ? groupIdentifier.namespace.uid : '');\n\n  const { waitForGroupConsistency } = useRuleGroupConsistencyCheck();\n  const [updateRuleGroup] = useUpdateRuleGroup();\n  const [deleteRuleGroup] = useDeleteRuleGroup();\n  const [operations, setOperations] = useState<SwapOperation[]>([]);\n  const [confirmDeleteOpened, setConfirmDeleteOpened] = useState(false);\n\n  const groupIntervalOrDefault = rulerGroup?.interval ?? DEFAULT_GROUP_EVALUATION_INTERVAL;\n\n  const {\n    register,\n    handleSubmit,\n    getValues,\n    setValue,\n    formState: { errors, dirtyFields, isSubmitting },\n  } = useForm<GroupEditFormData>({\n    mode: 'onBlur',\n    shouldFocusError: true,\n    defaultValues: {\n      name: rulerGroup.name,\n      interval: rulerGroup.interval,\n      namespace: groupIdentifier.groupOrigin === 'datasource' ? groupIdentifier.namespace.name : undefined,\n    },\n  });\n\n  const onSwap = useCallback((swapOperation: SwapOperation) => {\n    setOperations((prevOperations) => {\n      return produce(prevOperations, (draft) => {\n        draft.push(swapOperation);\n      });\n    });\n  }, []);\n\n  const onSubmit: SubmitHandler<GroupEditFormData> = async (data) => {\n    try {\n      const changeDelta: UpdateGroupDelta = {\n        namespaceName: dirtyFields.namespace ? data.namespace : undefined,\n        groupName: dirtyFields.name ? data.name : undefined,\n        interval: dirtyFields.interval ? data.interval : undefined,\n        ruleSwaps: operations.length ? operations : undefined,\n      };\n\n      const updatedGroupIdentifier = await updateRuleGroup.execute(\n        ruleGroupIdentifierV2toV1(groupIdentifier),\n        changeDelta\n      );\n\n      const shouldWaitForPromConsistency = !!changeDelta.namespaceName || !!changeDelta.groupName;\n      if (shouldWaitForPromConsistency) {\n        await waitForGroupConsistency(updatedGroupIdentifier);\n      }\n\n      const successMessage = t('alerting.group-edit.form.update-success', 'Successfully updated the rule group');\n      appInfo.success(successMessage);\n\n      setMatchingGroupPageUrl(updatedGroupIdentifier);\n    } catch (error) {\n      logError(error instanceof Error ? error : new Error('Failed to update rule group'));\n      appInfo.error(\n        t('alerting.group-edit.form.update-error', 'Failed to update rule group'),\n        stringifyErrorLike(error)\n      );\n    }\n  };\n\n  const onDelete = async () => {\n    await deleteRuleGroup.execute(ruleGroupIdentifierV2toV1(groupIdentifier));\n    await waitForGroupConsistency(groupIdentifier);\n    redirectToListPage();\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        {groupIdentifier.groupOrigin === 'datasource' && (\n          <Field\n            label={t('alerting.group-edit.form.namespace-label', 'Namespace')}\n            required\n            invalid={!!errors.namespace}\n            error={errors.namespace?.message}\n            className={styles.input}\n          >\n            <Input\n              id=\"namespace\"\n              {...register('namespace', {\n                required: t('alerting.group-edit.form.namespace-required', 'Namespace is required'),\n              })}\n            />\n          </Field>\n        )}\n        {groupIdentifier.groupOrigin === 'grafana' && (\n          <Field label={t('alerting.group-edit.form.folder-label', 'Folder')} required>\n            <Input id=\"folder\" value={folder?.title ?? ''} readOnly />\n          </Field>\n        )}\n        <Field\n          label={t('alerting.group-edit.form.group-name-label', 'Evaluation group name')}\n          required\n          invalid={!!errors.name}\n          error={errors.name?.message}\n          className={styles.input}\n        >\n          <Input\n            id=\"group-name\"\n            {...register('name', {\n              required: t('alerting.group-edit.form.group-name-required', 'Group name is required'),\n            })}\n          />\n        </Field>\n        <Field\n          label={t('alerting.group-edit.form.interval-label', 'Evaluation interval')}\n          description={t('alerting.group-edit.form.interval-description', 'How often is the group evaluated')}\n          invalid={!!errors.interval}\n          error={errors.interval?.message}\n          className={styles.input}\n          htmlFor=\"interval\"\n        >\n          <>\n            <Input\n              id=\"interval\"\n              {...register('interval', evaluateEveryValidationOptions(rulerGroup.rules))}\n              className={styles.intervalInput}\n            />\n            <EvaluationGroupQuickPick\n              currentInterval={getValues('interval')}\n              onSelect={(value) => setValue('interval', value, { shouldValidate: true, shouldDirty: true })}\n            />\n          </>\n        </Field>\n        <Field\n          label={t('alerting.group-edit.form.rules-label', 'Alerting and recording rules')}\n          description={t('alerting.group-edit.form.rules-description', 'Drag rules to reorder')}\n        >\n          <DraggableRulesTable rules={rulerGroup.rules} groupInterval={groupIntervalOrDefault} onSwap={onSwap} />\n        </Field>\n\n        <Stack>\n          <Button type=\"submit\" disabled={isSubmitting} icon={isSubmitting ? 'spinner' : undefined}>\n            <Trans i18nKey=\"alerting.group-edit.form.save\">Save</Trans>\n          </Button>\n          <LinkButton variant=\"secondary\" disabled={isSubmitting} href={returnTo}>\n            <Trans i18nKey=\"alerting.common.cancel\">Cancel</Trans>\n          </LinkButton>\n        </Stack>\n      </form>\n      {groupIdentifier.groupOrigin === 'datasource' && (\n        <Stack direction=\"row\" justifyContent=\"flex-end\">\n          <Button\n            type=\"button\"\n            variant=\"destructive\"\n            onClick={() => setConfirmDeleteOpened(true)}\n            disabled={isSubmitting}\n          >\n            <Trans i18nKey=\"alerting.group-edit.form.delete\">Delete</Trans>\n          </Button>\n          <ConfirmModal\n            isOpen={confirmDeleteOpened}\n            title={t('alerting.group-edit.form.delete-title', 'Delete rule group')}\n            body={t('alerting.group-edit.form.delete-body', 'Are you sure you want to delete this rule group?')}\n            confirmText={t('alerting.group-edit.form.delete-confirm', 'Delete')}\n            onConfirm={onDelete}\n            onDismiss={() => setConfirmDeleteOpened(false)}\n          />\n        </Stack>\n      )}\n    </>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  intervalInput: css({\n    marginBottom: theme.spacing(0.5),\n  }),\n  input: css({\n    maxWidth: '600px',\n  }),\n});\n\nfunction setMatchingGroupPageUrl(groupIdentifier: RuleGroupIdentifierV2) {\n  if (groupIdentifier.groupOrigin === 'datasource') {\n    const { rulesSource, namespace, groupName } = groupIdentifier;\n    locationService.replace(groups.editPageLink(rulesSource.uid, namespace.name, groupName, { skipSubPath: true }));\n  } else {\n    const { namespace, groupName } = groupIdentifier;\n    locationService.replace(groups.editPageLink('grafana', namespace.uid, groupName, { skipSubPath: true }));\n  }\n}\n\nfunction redirectToListPage() {\n  locationService.replace(alertListPageLink(undefined, { skipSubPath: true }));\n}\n"],"names":["CollapseToggle","isCollapsed","onToggle","idControlled","className","text","size","restOfProps","NeedHelpInfo","contentText","externalLink","linkText","title","styles","getStyles","theme","RuleEditorSection","stepNo","children","fullWidth","description","switchMode","AlertRuleSelectors","event","useDeleteRuleGroupFromNamespaceMutation","useLazyDiscoverDsFeaturesQuery","featureDiscoveryApi","useDeleteRuleGroup","deleteRuleGroup","discoverDataSourceFeature","ruleGroupIdentifier","dataSourceName","namespaceName","groupName","rulerConfig","result","ruleUpdateSuccessMessage","useUpdateRuleGroup","produceNewRuleGroup","fetchRuleGroup","upsertRuleGroup","ruleGroup","delta","updateActions","isGrafanaSource","newRuleGroupDefinition","oldNamespace","targetNamespace","oldGroupName","targetGroupName","isNamespaceChanged","isGroupRenamed","newGroupIdentifier","e","useUpdateRuleGroupConfiguration","interval","action","useMoveRuleGroup","successMessage","useRenameRuleGroup","newGroupName","useReorderRuleForRuleGroup","swaps","DraggableRulesTable","rules","groupInterval","onSwap","rulesList","setRulesList","onDragEnd","swapOperation","newOrderedRules","draft","rulesWithUID","rulerRule","ListItem","provided","_snapshot","rubric","DraggableListItem","droppableProvided","Stack","rule","index","isClone","ruleName","pendingPeriod","numberEvaluationsToStartAlerting","isRecordingRule","Icon","Badge","dragHandle","evalsToStartAlerting","props","ref","useDiscoverDsFeaturesQuery","GroupEditPage","dispatch","dataSourceUid","namespaceId","folder","isFolderLoading","useFolder","ruleSourceUid","dsFeatures","isDsFeaturesLoading","dsFeaturesError","getGroupAction","groupRequestState","isLoadingGroup","rulerGroup","ruleGroupError","pageNav","AlertingPageWrapper","Alert","groupIdentifier","GroupEditForm","EntityNotFound","appInfo","returnTo","useReturnTo","waitForGroupConsistency","updateRuleGroup","operations","setOperations","confirmDeleteOpened","setConfirmDeleteOpened","groupIntervalOrDefault","register","handleSubmit","getValues","setValue","errors","dirtyFields","isSubmitting","prevOperations","onSubmit","data","changeDelta","updatedGroupIdentifier","setMatchingGroupPageUrl","error","onDelete","redirectToListPage","Field","Input","EvaluationGroupQuickPick","value","Button","ConfirmModal","rulesSource","namespace"],"sourceRoot":""}