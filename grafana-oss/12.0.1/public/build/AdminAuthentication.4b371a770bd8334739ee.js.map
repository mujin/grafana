{"version":3,"file":"AdminAuthentication.4b371a770bd8334739ee.js","mappings":"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2B,iBAAiB,CACjH,EACA,CACE,KAAM,0BACN,GAAI,QACJ,OAAQ,CACN,iBACA,gBACA,UACA,kBACA,wBACA,gBACA,eACA,aACF,CACF,CACF,EACA,KAAM,CACJ,CACE,KAAM,mBACN,GAAI,UACJ,OAAQ,CACN,OACA,WACA,eACA,SACA,UACA,WACA,SACA,cACA,YACA,oBACF,CACF,EACA,CACE,KAAM,eACN,GAAI,OACJ,OAAQ,CACN,oBACA,sBACA,aACA,mBACA,0BACA,iBACF,CACF,EACA,CACE,KAAM,0BACN,GAAI,QACJ,OAAQ,CACN,iBACA,gBACA,UACA,kBACA,wBACA,gBACA,eACA,aACF,CACF,CACF,CACF,EAKO,SAASC,EAASzB,EAA6C,CACpE,MAAO,CACL,qBAAsB,CACpB,MAAO,wBACP,KAAM,SACN,YAAa,+EACb,MAAO,GACP,QAAS0B,EAA4B1B,CAAQ,EAC7C,aAAc,CAAE,MAAO,OAAQ,MAAO,MAAO,EAC7C,WAAY,CACV,SAAU,GACV,QAAS,wBACX,CACF,EACA,SAAU,CACR,MAAO,YACP,KAAM,OACN,YAAa,oCACb,WAAY,CACV,SAAU,GACV,QAAS,wBACX,CACF,EACA,aAAc,CACZ,MAAO,gBACP,KAAM,SACN,YAAa,uCACf,EACA,wBAAyB,CACvB,MAAO,iCACP,KAAM,OACN,YAAa,yFACf,EACA,4BAA6B,CAC3B,MAAO,eACP,KAAM,OACN,YAAa,uEACf,EACA,qBAAsB,CACpB,MAAO,wBACP,KAAM,SACN,YACE;AAAA,yCAEF,MAAO,GACP,iBAAkB,GAClB,QAAS,CAAC,EACV,YAAa,iEACf,EACA,eAAgB,CACd,MAAO,kBACP,KAAM,SACN,YACE;AAAA,uBACF,MAAO,GACP,iBAAkB,GAClB,QAAS,CAAC,CACZ,EACA,QAAS,CACP,MAAO,WACP,KAAM,OACN,YAAa,sDACb,WAAY,CACV,SAAU,GACV,SAAWS,MACF,MAAWA,CAAK,EAEzB,QAAS,iDACX,CACF,EACA,UAAW,CACT,MAAO,aACP,KAAM,SACN,YAAa,oGACb,MAAO,GACP,QAAS,CACP,CAAE,MAA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","sources":["webpack://grafana/./public/app/core/components/FormPrompt/FormPrompt.tsx","webpack://grafana/./public/app/core/components/FormPrompt/Prompt.tsx","webpack://grafana/./public/app/features/auth-config/AuthDrawer.tsx","webpack://grafana/./public/app/features/auth-config/components/ConfigureAuthCTA.tsx","webpack://grafana/./public/app/features/auth-config/components/ProviderCard.tsx","webpack://grafana/./public/app/features/auth-config/AuthProvidersListPage.tsx","webpack://grafana/./public/app/features/auth-config/components/ServerDiscoveryModal.tsx","webpack://grafana/./public/app/features/auth-config/components/ServerDiscoveryField.tsx","webpack://grafana/./public/app/features/auth-config/utils/guards.ts","webpack://grafana/./public/app/features/auth-config/fields.tsx","webpack://grafana/./public/app/features/auth-config/FieldRenderer.tsx","webpack://grafana/./public/app/features/auth-config/utils/data.ts","webpack://grafana/./public/app/features/auth-config/ProviderConfigForm.tsx","webpack://grafana/./public/app/features/auth-config/ProviderConfigPage.tsx","webpack://grafana/./public/app/features/auth-config/constants.ts","webpack://grafana/./public/app/features/auth-config/state/actions.ts","webpack://grafana/./public/app/features/auth-config/utils/url.ts","webpack://grafana/./node_modules/uuid/dist/esm-browser/regex.js","webpack://grafana/./node_modules/uuid/dist/esm-browser/validate.js"],"sourcesContent":["import { css } from '@emotion/css';\nimport history from 'history';\nimport { useEffect, useState } from 'react';\nimport { Navigate } from 'react-router-dom-v5-compat';\n\nimport { Button, Modal } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { Prompt } from './Prompt';\n\nexport interface Props {\n  confirmRedirect?: boolean;\n  onDiscard: () => void;\n  /** Extra check to invoke when location changes.\n   * Could be useful in multistep forms where each step has a separate URL\n   */\n  onLocationChange?: (location: history.Location) => void;\n}\n\n/**\n * Component handling redirects when a form has unsaved changes.\n * Page reloads are handled in useEffect via beforeunload event.\n * URL navigation is handled by react-router's components since it does not trigger beforeunload event.\n */\nexport const FormPrompt = ({ confirmRedirect, onDiscard, onLocationChange }: Props) => {\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [blockedLocation, setBlockedLocation] = useState<history.Location | null>(null);\n  const [changesDiscarded, setChangesDiscarded] = useState(false);\n\n  useEffect(() => {\n    const onBeforeUnload = (e: BeforeUnloadEvent) => {\n      if (confirmRedirect) {\n        e.preventDefault();\n        e.returnValue = '';\n      }\n    };\n    window.addEventListener('beforeunload', onBeforeUnload);\n    return () => {\n      window.removeEventListener('beforeunload', onBeforeUnload);\n    };\n  }, [confirmRedirect]);\n\n  // Returning 'false' from this function will prevent navigation to the next URL\n  const handleRedirect = (location: history.Location) => {\n    // Do not show the unsaved changes modal if only the URL params have changed\n    const currentPath = window.location.pathname;\n    const nextPath = location.pathname;\n    if (currentPath === nextPath) {\n      return true;\n    }\n\n    const locationChangeCheck = onLocationChange?.(location);\n\n    let blockRedirect = confirmRedirect && !changesDiscarded;\n    if (locationChangeCheck !== undefined) {\n      blockRedirect = blockRedirect && locationChangeCheck;\n    }\n\n    if (blockRedirect) {\n      setModalIsOpen(true);\n      setBlockedLocation(location);\n      return false;\n    }\n\n    if (locationChangeCheck) {\n      onDiscard();\n    }\n\n    return true;\n  };\n\n  const onBackToForm = () => {\n    setModalIsOpen(false);\n    setBlockedLocation(null);\n  };\n\n  const onDiscardChanges = () => {\n    setModalIsOpen(false);\n    setChangesDiscarded(true);\n    onDiscard();\n  };\n\n  return (\n    <>\n      <Prompt when={true} message={handleRedirect} />\n      {blockedLocation && changesDiscarded && <Navigate replace to={blockedLocation} />}\n      <UnsavedChangesModal isOpen={modalIsOpen} onDiscard={onDiscardChanges} onBackToForm={onBackToForm} />\n    </>\n  );\n};\n\ninterface UnsavedChangesModalProps {\n  onDiscard: () => void;\n  onBackToForm: () => void;\n  isOpen: boolean;\n}\n\nconst UnsavedChangesModal = ({ onDiscard, onBackToForm, isOpen }: UnsavedChangesModalProps) => {\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={t('form-prompt.title', 'Leave page?')}\n      onDismiss={onBackToForm}\n      icon=\"exclamation-triangle\"\n      className={css({ width: '500px' })}\n    >\n      <h5>\n        <Trans i18nKey=\"form-prompt.description\">Changes that you made may not be saved.</Trans>\n      </h5>\n      <Modal.ButtonRow>\n        <Button variant=\"secondary\" onClick={onBackToForm} fill=\"outline\">\n          <Trans i18nKey=\"form-prompt.continue-button\">Continue editing</Trans>\n        </Button>\n        <Button variant=\"destructive\" onClick={onDiscard}>\n          <Trans i18nKey=\"form-prompt.discard-button\">Discard unsaved changes</Trans>\n        </Button>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n","import * as H from 'history';\nimport { useEffect } from 'react';\n\nimport { locationService } from '@grafana/runtime';\n\ninterface PromptProps {\n  when?: boolean;\n  message: string | ((location: H.Location) => string | boolean);\n}\n\nexport const Prompt = ({ message, when = true }: PromptProps) => {\n  const history = locationService.getHistory();\n\n  useEffect(() => {\n    if (!when) {\n      return undefined;\n    }\n    //@ts-expect-error TODO Update the history package to fix types\n    const unblock = history.block(message);\n\n    return () => {\n      unblock();\n    };\n  }, [when, message, history]);\n\n  return null;\n};\n","import { css } from '@emotion/css';\nimport { JSX } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Drawer, Text, TextLink, Switch, useStyles2 } from '@grafana/ui';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { t, Trans } from 'app/core/internationalization';\nimport { StoreState } from 'app/types';\n\nimport { loadSettings, saveSettings } from './state/actions';\n\ninterface OwnProps {\n  onClose: () => void;\n}\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nconst mapStateToProps = (state: StoreState) => {\n  const allowInsecureEmail =\n    state.authConfig.settings?.auth?.oauth_allow_insecure_email_lookup.toLowerCase() === 'true';\n  return {\n    allowInsecureEmail,\n  };\n};\n\nconst mapActionsToProps = {\n  loadSettings,\n  saveSettings,\n};\n\nconst connector = connect(mapStateToProps, mapActionsToProps);\n\nexport const AuthDrawerUnconnected = ({\n  allowInsecureEmail,\n  loadSettings,\n  onClose,\n  saveSettings,\n}: Props): JSX.Element => {\n  const notifyApp = useAppNotification();\n\n  const oauthAllowInsecureEmailLookupOnChange = async () => {\n    try {\n      await saveSettings({\n        updates: {\n          auth: {\n            oauth_allow_insecure_email_lookup: '' + !allowInsecureEmail,\n          },\n        },\n      });\n      await loadSettings(false);\n      notifyApp.success('Settings saved');\n    } catch (error) {\n      notifyApp.error('Failed to save settings');\n    }\n  };\n\n  const resetButtonOnClick = async () => {\n    try {\n      await saveSettings({\n        removals: {\n          auth: ['oauth_allow_insecure_email_lookup'],\n        },\n      });\n      await loadSettings(false);\n      notifyApp.success('Settings saved');\n    } catch (error) {\n      notifyApp.error('Failed to save settings');\n    }\n  };\n\n  const subtitle = (\n    <Trans i18nKey=\"auth-config.auth-drawer-unconneced.subtitle\">\n      Configure auth settings. Find out more in our{' '}\n      <TextLink\n        external={true}\n        href=\"https://grafana.com/docs/grafana/next/setup-grafana/configure-security/configure-authentication/#settings\"\n      >\n        documentation\n      </TextLink>\n      .\n    </Trans>\n  );\n\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Drawer\n      title={t('auth-config.auth-drawer-unconnected.title-auth-settings', 'Auth settings')}\n      subtitle={subtitle}\n      size=\"md\"\n      onClose={onClose}\n    >\n      <div className={styles.advancedAuth}>\n        <Text variant=\"h4\">\n          <Trans i18nKey=\"auth-config.auth-drawer-unconnected.advanced-auth\">Advanced Auth</Trans>\n        </Text>\n        <Text variant=\"h5\">\n          <Trans i18nKey=\"auth-config.auth-drawer-unconnected.enable-insecure-email-lookup\">\n            Enable insecure email lookup\n          </Trans>\n        </Text>\n        <Text variant=\"body\" color=\"secondary\">\n          <Trans i18nKey=\"auth-config.auth-drawer-unconnected.enable-insecure-email-lookup-description\">\n            Allow users to use the same email address to log into Grafana with different identity providers.\n          </Trans>\n        </Text>\n        <Switch value={allowInsecureEmail} onChange={oauthAllowInsecureEmailLookupOnChange} />\n      </div>\n      <Button\n        size=\"md\"\n        variant=\"secondary\"\n        className={styles.button}\n        onClick={resetButtonOnClick}\n        tooltip={t(\n          'auth-config.auth-drawer-unconnected.reset-tooltip',\n          'This action will disregard any saved changes and load the configuration from the configuration file.'\n        )}\n      >\n        <Trans i18nKey=\"auth-config.auth-drawer-unconnected.reset\">Reset</Trans>\n      </Button>\n    </Drawer>\n  );\n};\n\nexport default connector(AuthDrawerUnconnected);\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    advancedAuth: css({\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(1),\n    }),\n    button: css({\n      marginTop: theme.spacing(2),\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, Stack, Text, TextLink, useStyles2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nexport interface Props {}\n\nconst ConfigureAuthCTA: React.FunctionComponent<Props> = () => {\n  const styles = useStyles2(getStyles);\n  return (\n    <div className={styles.container}>\n      <Stack gap={1} alignItems={'center'}>\n        <Icon name={'cog'} />\n        <Text>\n          <Trans i18nKey=\"auth-config.configure-auth-cta.configuration-required\">Configuration required</Trans>\n        </Text>\n      </Stack>\n      <Text variant={'bodySmall'} color={'secondary'}>\n        <Trans i18nKey=\"auth-config.configure-auth-cta.authentication-configuration-created-moment\">\n          You have no authentication configuration created at the moment.\n        </Trans>\n      </Text>\n      <TextLink href={'https://grafana.com/docs/grafana/latest/auth/overview/'} external>\n        <Trans i18nKey=\"auth-config.configure-auth-cta.refer-documentation-configure-authentication\">\n          Refer to the documentation on how to configure authentication\n        </Trans>\n      </TextLink>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(2),\n      backgroundColor: theme.colors.background.secondary,\n      borderRadius: theme.shape.radius.default,\n      padding: theme.spacing(3),\n      width: 'max-content',\n      margin: theme.spacing(3, 'auto'),\n    }),\n  };\n};\n\nexport default ConfigureAuthCTA;\n","import { isIconName } from '@grafana/data';\nimport { Badge, Card, Icon } from '@grafana/ui';\n\nimport { UIMap } from '../constants';\nimport { getProviderUrl } from '../utils/url';\n\ntype Props = {\n  providerId: string;\n  enabled: boolean;\n  configPath?: string;\n  authType?: string;\n  onClick?: () => void;\n};\n\nexport function ProviderCard({ providerId, enabled, configPath, authType, onClick }: Props) {\n  //@ts-expect-error\n  const url = getProviderUrl({ configPath, id: providerId });\n  const [iconName, displayName] = UIMap[providerId] || ['lock', providerId.toUpperCase()];\n  return (\n    <Card href={url} onClick={onClick}>\n      <Card.Heading>{displayName}</Card.Heading>\n      <Card.Meta>{authType}</Card.Meta>\n      {isIconName(iconName) && (\n        <Card.Figure>\n          <Icon name={iconName} size={'xxxl'} />\n        </Card.Figure>\n      )}\n      <Card.Actions>\n        <Badge text={enabled ? 'Enabled' : 'Not enabled'} color={enabled ? 'green' : 'blue'} />\n      </Card.Actions>\n    </Card>\n  );\n}\n","import { JSX, useEffect, useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { GrafanaEdition } from '@grafana/data/internal';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Grid, TextLink, ToolbarButton } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { config } from 'app/core/config';\nimport { Trans } from 'app/core/internationalization';\nimport { StoreState } from 'app/types';\n\nimport AuthDrawer from './AuthDrawer';\nimport ConfigureAuthCTA from './components/ConfigureAuthCTA';\nimport { ProviderCard } from './components/ProviderCard';\nimport { loadSettings } from './state/actions';\n\nimport { getRegisteredAuthProviders } from './index';\n\ninterface OwnProps {}\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nfunction mapStateToProps(state: StoreState) {\n  const { isLoading, providerStatuses, providers } = state.authConfig;\n  return {\n    isLoading,\n    providerStatuses,\n    providers,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadSettings,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport const AuthConfigPageUnconnected = ({\n  providerStatuses,\n  isLoading,\n  loadSettings,\n  providers,\n}: Props): JSX.Element => {\n  useEffect(() => {\n    loadSettings();\n  }, [loadSettings]);\n\n  const [showDrawer, setShowDrawer] = useState(false);\n\n  const authProviders = getRegisteredAuthProviders();\n  const availableProviders = authProviders.filter((p) => !providerStatuses[p.id]?.hide);\n  const onProviderCardClick = (providerType: string, enabled: boolean) => {\n    reportInteraction('authentication_ui_provider_clicked', { provider: providerType, enabled });\n  };\n\n  // filter out saml from sso providers because it is already included in availableProviders\n  providers = providers.filter((p) => p.provider !== 'saml');\n\n  providers = providers.map((p) => {\n    if (p.provider === 'ldap') {\n      return {\n        ...p,\n        settings: {\n          ...p.settings,\n          type: 'LDAP',\n        },\n      };\n    }\n    return p;\n  });\n\n  const providerList = availableProviders.length\n    ? [\n        ...availableProviders.map((p) => ({\n          provider: p.id,\n          settings: { ...providerStatuses[p.id], configPath: p.configPath, type: p.type },\n        })),\n        ...providers,\n      ]\n    : providers;\n  return (\n    <Page\n      navId=\"authentication\"\n      subTitle={\n        <Trans i18nKey=\"auth-config-auth-config-page-unconnected.subtitle\">\n          Manage your auth settings and configure single sign-on. Find out more in our{' '}\n          <TextLink\n            external={true}\n            href=\"https://grafana.com/docs/grafana/next/setup-grafana/configure-security/configure-authentication\"\n          >\n            documentation\n          </TextLink>\n          .\n        </Trans>\n      }\n      actions={\n        config.buildInfo.edition !== GrafanaEdition.OpenSource && (\n          <ToolbarButton icon=\"cog\" variant=\"canvas\" onClick={() => setShowDrawer(true)}>\n            <Trans i18nKey=\"auth-config.auth-config-page-unconnected.auth-settings\">Auth settings</Trans>\n          </ToolbarButton>\n        )\n      }\n    >\n      <Page.Contents isLoading={isLoading}>\n        {!providerList.length ? (\n          <ConfigureAuthCTA />\n        ) : (\n          <Grid gap={3} minColumnWidth={34}>\n            {providerList\n              // Temporarily filter out providers that don't have the UI implemented\n              .filter(({ provider }) => !['grafana_com'].includes(provider))\n              .map(({ provider, settings }) => (\n                <ProviderCard\n                  key={provider}\n                  authType={settings.type || 'OAuth'}\n                  providerId={provider}\n                  enabled={settings.enabled}\n                  onClick={() => onProviderCardClick(provider, settings.enabled)}\n                  //@ts-expect-error Remove legacy types\n                  configPath={settings.configPath}\n                />\n              ))}\n            {showDrawer && <AuthDrawer onClose={() => setShowDrawer(false)}></AuthDrawer>}\n          </Grid>\n        )}\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default connector(AuthConfigPageUnconnected);\n","import { useForm } from 'react-hook-form';\n\nimport { Button, Input, Field, Modal } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { Trans } from '../../../core/internationalization';\nimport { ServerDiscoveryFormData } from '../types';\nimport { isUrlValid } from '../utils/url';\n\ninterface Props {\n  isOpen: boolean | undefined;\n  onClose: () => void;\n  onSuccess: (data: ServerDiscoveryFormData) => void;\n  isLoading: boolean;\n}\n\nexport const ServerDiscoveryModal = ({ isOpen, onClose, onSuccess, isLoading }: Props) => {\n  const {\n    handleSubmit,\n    register,\n    formState: { errors },\n  } = useForm({\n    mode: 'onBlur',\n    defaultValues: {\n      url: '',\n    },\n  });\n\n  const validateUrl = (value?: string) => {\n    if (value === '') {\n      return 'Please enter the .well-known/openid-configuration endpoint for your IdP';\n    }\n\n    if (!isUrlValid(value)) {\n      return 'Please enter a valid URL';\n    }\n\n    return true;\n  };\n\n  return (\n    <Modal\n      title={t(\n        'auth-config.server-discovery-modal.title-open-id-connect-discovery-url',\n        'OpenID Connect Discovery URL'\n      )}\n      onDismiss={onClose}\n      onClickBackdrop={onClose}\n      isOpen={isOpen}\n    >\n      <form\n        onSubmit={(e) => {\n          e.stopPropagation();\n          return handleSubmit(onSuccess)(e);\n        }}\n      >\n        <Field\n          label={t(\n            'auth-config.server-discovery-modal.label-the-wellknownopenidconfiguration-endpoint-for-your-id-p',\n            'The .well-known/openid-configuration endpoint for your IdP'\n          )}\n          invalid={!!errors.url}\n          error={errors.url?.message}\n          htmlFor=\"url\"\n        >\n          <Input {...register('url', { validate: validateUrl })} width={80} id=\"url\" />\n        </Field>\n        <Modal.ButtonRow>\n          <Button type=\"submit\" variant=\"primary\" disabled={isLoading}>\n            {isLoading ? (\n              <Trans i18nKey={'oauth.form.server-discovery-modal-loading'}>Loading...</Trans>\n            ) : (\n              <Trans i18nKey={'oauth.form.server-discovery-modal-submit'}>Submit</Trans>\n            )}\n          </Button>\n          <Button type=\"button\" variant=\"secondary\" onClick={onClose}>\n            <Trans i18nKey={'oauth.form.server-discovery-modal-close'}>Close</Trans>\n          </Button>\n        </Modal.ButtonRow>\n      </form>\n    </Modal>\n  );\n};\n","import { useState } from 'react';\nimport { UseFormSetValue } from 'react-hook-form';\n\nimport { AppEvents } from '@grafana/data';\nimport { getAppEvents, getBackendSrv } from '@grafana/runtime';\nimport { Button } from '@grafana/ui';\n\nimport { Trans } from '../../../core/internationalization';\nimport { ServerDiscoveryFormData, SSOProviderDTO } from '../types';\n\nimport { ServerDiscoveryModal } from './ServerDiscoveryModal';\n\ninterface Props {\n  setValue: UseFormSetValue<SSOProviderDTO>;\n}\n\nexport const ServerDiscoveryField = ({ setValue }: Props) => {\n  const appEvents = getAppEvents();\n  const [isModalOpen, setModalVisibility] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n\n  const onClose = () => setModalVisibility(false);\n  const onSuccess = async (data: ServerDiscoveryFormData) => {\n    setLoading(true);\n    try {\n      const wellKnownSuffix = '/.well-known/openid-configuration';\n      const url = new URL(data.url);\n      if (!url.pathname.includes(wellKnownSuffix)) {\n        data.url = url.origin + wellKnownSuffix;\n      }\n\n      const res = await getBackendSrv().get(data.url);\n\n      if (!res['token_endpoint'] || !res['authorization_endpoint']) {\n        appEvents.publish({\n          type: AppEvents.alertWarning.name,\n          payload: ['The URL provided is not a valid .well-known/openid-configuration endpoint'],\n        });\n        return;\n      }\n\n      setValue('tokenUrl', res['token_endpoint']);\n      setValue('authUrl', res['authorization_endpoint']);\n      if (res['userinfo_endpoint']) {\n        setValue('apiUrl', res['userinfo_endpoint']);\n      }\n\n      appEvents.publish({\n        type: AppEvents.alertSuccess.name,\n        payload: ['OpenID Connect Discovery URL has been successfully fetched.'],\n      });\n    } catch (error) {\n      appEvents.publish({\n        type: AppEvents.alertWarning.name,\n        payload: ['Failed to fetch URL or invalid content'],\n      });\n    } finally {\n      onClose();\n      setLoading(false);\n    }\n  };\n  return (\n    <>\n      <Button\n        type=\"button\"\n        variant=\"secondary\"\n        onClick={() => {\n          setModalVisibility(true);\n        }}\n      >\n        <Trans i18nKey={'oauth.form.server-discovery-action-button'}>Enter OpenID Connect Discovery URL</Trans>\n      </Button>\n      <ServerDiscoveryModal isOpen={isModalOpen} onClose={onClose} onSuccess={onSuccess} isLoading={isLoading} />\n    </>\n  );\n};\n","import { SelectableValue } from '@grafana/data';\n\nexport function isSelectableValue(value: unknown): value is SelectableValue[] {\n  return Array.isArray(value) && value.every((v) => typeof v === 'object' && v !== null && 'value' in v);\n}\n","import { validate as uuidValidate } from 'uuid';\n\nimport { SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { TextLink } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\n\nimport { ServerDiscoveryField } from './components/ServerDiscoveryField';\nimport { FieldData, SSOProvider, SSOSettingsField } from './types';\nimport { isSelectableValue } from './utils/guards';\nimport { isUrlValid } from './utils/url';\n\ntype Section = Record<\n  SSOProvider['provider'],\n  Array<{\n    name: string;\n    id: string;\n    hidden?: boolean;\n    fields: SSOSettingsField[];\n  }>\n>;\n\nexport const sectionFields: Section = {\n  azuread: [\n    {\n      name: 'General settings',\n      id: 'general',\n      fields: [\n        'name',\n        'clientAuthentication',\n        'clientId',\n        'clientSecret',\n        'managedIdentityClientId',\n        'federatedCredentialAudience',\n        'scopes',\n        'authUrl',\n        'tokenUrl',\n        'allowSignUp',\n        'autoLogin',\n        'signoutRedirectUrl',\n      ],\n    },\n    {\n      name: 'User mapping',\n      id: 'user',\n      fields: ['roleAttributeStrict', 'orgMapping', 'allowAssignGrafanaAdmin', 'skipOrgRoleSync'],\n    },\n    {\n      name: 'Extra security measures',\n      id: 'extra',\n      fields: [\n        'allowedOrganizations',\n        'allowedDomains',\n        'allowedGroups',\n        'forceUseGraphApi',\n        'usePkce',\n        'useRefreshToken',\n        'tlsSkipVerifyInsecure',\n        'tlsClientCert',\n        'tlsClientKey',\n        'tlsClientCa',\n      ],\n    },\n  ],\n  generic_oauth: [\n    {\n      name: 'General settings',\n      id: 'general',\n      fields: [\n        'name',\n        'clientId',\n        'clientSecret',\n        'authStyle',\n        'scopes',\n        'serverDiscoveryUrl',\n        'authUrl',\n        'tokenUrl',\n        'apiUrl',\n        'allowSignUp',\n        'autoLogin',\n        'signoutRedirectUrl',\n      ],\n    },\n    {\n      name: 'User mapping',\n      id: 'user',\n      fields: [\n        'nameAttributePath',\n        'loginAttributePath',\n        'emailAttributeName',\n        'emailAttributePath',\n        'idTokenAttributeName',\n        'roleAttributePath',\n        'roleAttributeStrict',\n        'orgMapping',\n        'orgAttributePath',\n        'allowAssignGrafanaAdmin',\n        'skipOrgRoleSync',\n      ],\n    },\n    {\n      name: 'Extra security measures',\n      id: 'extra',\n      fields: [\n        'allowedOrganizations',\n        'allowedDomains',\n        'defineAllowedGroups',\n        { name: 'allowedGroups', dependsOn: 'defineAllowedGroups' },\n        { name: 'groupsAttributePath', dependsOn: 'defineAllowedGroups' },\n        'defineAllowedTeamsIds',\n        { name: 'teamIds', dependsOn: 'defineAllowedTeamsIds' },\n        { name: 'teamsUrl', dependsOn: 'defineAllowedTeamsIds' },\n        { name: 'teamIdsAttributePath', dependsOn: 'defineAllowedTeamsIds' },\n        'usePkce',\n        'useRefreshToken',\n        'tlsSkipVerifyInsecure',\n        'tlsClientCert',\n        'tlsClientKey',\n        'tlsClientCa',\n      ],\n    },\n  ],\n  google: [\n    {\n      name: 'General settings',\n      id: 'general',\n      fields: ['name', 'clientId', 'clientSecret', 'scopes', 'allowSignUp', 'autoLogin', 'signoutRedirectUrl'],\n    },\n    {\n      name: 'User mapping',\n      id: 'user',\n      fields: ['roleAttributePath', 'roleAttributeStrict', 'orgMapping', 'allowAssignGrafanaAdmin', 'skipOrgRoleSync'],\n    },\n    {\n      name: 'Extra security measures',\n      id: 'extra',\n      fields: [\n        'validateHd',\n        'hostedDomain',\n        'allowedDomains',\n        'allowedGroups',\n        'usePkce',\n        'useRefreshToken',\n        'tlsSkipVerifyInsecure',\n        'tlsClientCert',\n        'tlsClientKey',\n        'tlsClientCa',\n      ],\n    },\n  ],\n  github: [\n    {\n      name: 'General settings',\n      id: 'general',\n      fields: ['name', 'clientId', 'clientSecret', 'scopes', 'allowSignUp', 'autoLogin', 'signoutRedirectUrl'],\n    },\n    {\n      name: 'User mapping',\n      id: 'user',\n      fields: ['roleAttributePath', 'roleAttributeStrict', 'orgMapping', 'allowAssignGrafanaAdmin', 'skipOrgRoleSync'],\n    },\n    {\n      name: 'Extra security measures',\n      id: 'extra',\n      fields: [\n        'allowedOrganizations',\n        'allowedDomains',\n        'teamIds',\n        'usePkce',\n        'useRefreshToken',\n        'tlsSkipVerifyInsecure',\n        'tlsClientCert',\n        'tlsClientKey',\n        'tlsClientCa',\n      ],\n    },\n  ],\n  gitlab: [\n    {\n      name: 'General settings',\n      id: 'general',\n      fields: ['name', 'clientId', 'clientSecret', 'scopes', 'allowSignUp', 'autoLogin', 'signoutRedirectUrl'],\n    },\n    {\n      name: 'User mapping',\n      id: 'user',\n      fields: ['roleAttributePath', 'roleAttributeStrict', 'orgMapping', 'allowAssignGrafanaAdmin', 'skipOrgRoleSync'],\n    },\n    {\n      name: 'Extra security measures',\n      id: 'extra',\n      fields: [\n        'allowedDomains',\n        'allowedGroups',\n        'usePkce',\n        'useRefreshToken',\n        'tlsSkipVerifyInsecure',\n        'tlsClientCert',\n        'tlsClientKey',\n        'tlsClientCa',\n      ],\n    },\n  ],\n  okta: [\n    {\n      name: 'General settings',\n      id: 'general',\n      fields: [\n        'name',\n        'clientId',\n        'clientSecret',\n        'scopes',\n        'authUrl',\n        'tokenUrl',\n        'apiUrl',\n        'allowSignUp',\n        'autoLogin',\n        'signoutRedirectUrl',\n      ],\n    },\n    {\n      name: 'User mapping',\n      id: 'user',\n      fields: [\n        'roleAttributePath',\n        'roleAttributeStrict',\n        'orgMapping',\n        'orgAttributePath',\n        'allowAssignGrafanaAdmin',\n        'skipOrgRoleSync',\n      ],\n    },\n    {\n      name: 'Extra security measures',\n      id: 'extra',\n      fields: [\n        'allowedDomains',\n        'allowedGroups',\n        'usePkce',\n        'useRefreshToken',\n        'tlsSkipVerifyInsecure',\n        'tlsClientCert',\n        'tlsClientKey',\n        'tlsClientCa',\n      ],\n    },\n  ],\n};\n\n/**\n * List all the fields that can be used in the form\n */\nexport function fieldMap(provider: string): Record<string, FieldData> {\n  return {\n    clientAuthentication: {\n      label: 'Client authentication',\n      type: 'select',\n      description: 'The client authentication method used to authenticate to the token endpoint.',\n      multi: false,\n      options: clientAuthenticationOptions(provider),\n      defaultValue: { value: 'none', label: 'None' },\n      validation: {\n        required: true,\n        message: 'This field is required',\n      },\n    },\n    clientId: {\n      label: 'Client Id',\n      type: 'text',\n      description: 'The client Id of your OAuth2 app.',\n      validation: {\n        required: true,\n        message: 'This field is required',\n      },\n    },\n    clientSecret: {\n      label: 'Client secret',\n      type: 'secret',\n      description: 'The client secret of your OAuth2 app.',\n    },\n    managedIdentityClientId: {\n      label: 'FIC managed identity client Id',\n      type: 'text',\n      description: 'The managed identity client Id of the federated identity credential of your OAuth2 app.',\n    },\n    federatedCredentialAudience: {\n      label: 'FIC audience',\n      type: 'text',\n      description: 'The audience of the federated identity credential of your OAuth2 app.',\n    },\n    allowedOrganizations: {\n      label: 'Allowed organizations',\n      type: 'select',\n      description:\n        'List of comma- or space-separated organizations. The user should be a member \\n' +\n        'of at least one organization to log in.',\n      multi: true,\n      allowCustomValue: true,\n      options: [],\n      placeholder: 'Enter organizations (my-team, myteam...) and press Enter to add',\n    },\n    allowedDomains: {\n      label: 'Allowed domains',\n      type: 'select',\n      description:\n        'List of comma- or space-separated domains. The user should belong to at least \\n' + 'one domain to log in.',\n      multi: true,\n      allowCustomValue: true,\n      options: [],\n    },\n    authUrl: {\n      label: 'Auth URL',\n      type: 'text',\n      description: 'The authorization endpoint of your OAuth2 provider.',\n      validation: {\n        required: true,\n        validate: (value) => {\n          return isUrlValid(value);\n        },\n        message: 'This field is required and must be a valid URL.',\n      },\n    },\n    authStyle: {\n      label: 'Auth style',\n      type: 'select',\n      description: 'It determines how client_id and client_secret are sent to Oauth2 provider. Default is AutoDetect.',\n      multi: false,\n      options: [\n        { value: 'AutoDetect', label: 'AutoDetect' },\n        { value: 'InParams', label: 'InParams' },\n        { value: 'InHeader', label: 'InHeader' },\n      ],\n      defaultValue: { value: 'AutoDetect', label: 'AutoDetect' },\n    },\n    tokenUrl: {\n      label: 'Token URL',\n      type: 'text',\n      description: 'The token endpoint of your OAuth2 provider.',\n      validation: {\n        required: true,\n        validate: (value) => {\n          return isUrlValid(value);\n        },\n        message: 'This field is required and must be a valid URL.',\n      },\n    },\n    scopes: {\n      label: 'Scopes',\n      type: 'select',\n      description: 'List of comma- or space-separated OAuth2 scopes.',\n      multi: true,\n      allowCustomValue: true,\n      options: [],\n    },\n    allowedGroups: {\n      label: 'Allowed groups',\n      type: 'select',\n      description: (\n        <>\n          List of comma- or space-separated groups. The user should be a member of at least one group to log in.{' '}\n          {provider === 'generic_oauth' &&\n            'If you configure allowed_groups, you must also configure groups_attribute_path.'}\n        </>\n      ),\n      multi: true,\n      allowCustomValue: true,\n      options: [],\n      validation:\n        provider === 'azuread'\n          ? {\n              validate: (value) => {\n                if (typeof value === 'string') {\n                  return uuidValidate(value);\n                }\n                if (isSelectableValue(value)) {\n                  return value.every((v) => v?.value && uuidValidate(v.value));\n                }\n                return true;\n              },\n              message: 'Allowed groups must be Object Ids.',\n            }\n          : undefined,\n    },\n    apiUrl: {\n      label: 'API URL',\n      type: 'text',\n      description: (\n        <>\n          The user information endpoint of your OAuth2 provider. Information returned by this endpoint must be\n          compatible with{' '}\n          <TextLink href={'https://connect2id.com/products/server/docs/api/userinfo'} external variant={'bodySmall'}>\n            OpenID UserInfo\n          </TextLink>\n          .\n        </>\n      ),\n      validation: {\n        required: false,\n        validate: (value) => {\n          if (typeof value !== 'string') {\n            return false;\n          }\n\n          if (value.length) {\n            return isUrlValid(value);\n          }\n\n          return true;\n        },\n        message: 'This field must be a valid URL if set.',\n      },\n    },\n    roleAttributePath: {\n      label: 'Role attribute path',\n      description: 'JMESPath expression to use for Grafana role lookup.',\n      type: 'text',\n      validation: {\n        required: false,\n      },\n    },\n    name: {\n      label: 'Display name',\n      description:\n        'Will be displayed on the login page as \"Sign in with ...\". Helpful if you use more than one identity providers or SSO protocols.',\n      type: 'text',\n    },\n    allowSignUp: {\n      label: 'Allow sign up',\n      description: 'If not enabled, only existing Grafana users can log in using OAuth.',\n      type: 'switch',\n    },\n    autoLogin: {\n      label: 'Auto login',\n      description: 'Log in automatically, skipping the login screen.',\n      type: 'switch',\n    },\n    signoutRedirectUrl: {\n      label: 'Sign out redirect URL',\n      description: 'The URL to redirect the user to after signing out from Grafana.',\n      type: 'text',\n      validation: {\n        required: false,\n      },\n    },\n    emailAttributeName: {\n      label: 'Email attribute name',\n      description: 'Name of the key to use for user email lookup within the attributes map of OAuth2 ID token.',\n      type: 'text',\n    },\n    emailAttributePath: {\n      label: 'Email attribute path',\n      description: 'JMESPath expression to use for user email lookup from the user information.',\n      type: 'text',\n    },\n    nameAttributePath: {\n      label: 'Name attribute path',\n      description:\n        'JMESPath expression to use for user name lookup from the user ID token. \\n' +\n        'This name will be used as the user’s display name.',\n      type: 'text',\n    },\n    loginAttributePath: {\n      label: 'Login attribute path',\n      description: 'JMESPath expression to use for user login lookup from the user ID token.',\n      type: 'text',\n    },\n    idTokenAttributeName: {\n      label: 'ID token attribute name',\n      description: 'The name of the key used to extract the ID token from the returned OAuth2 token.',\n      type: 'text',\n    },\n    roleAttributeStrict: {\n      label: 'Role attribute strict mode',\n      description: 'If enabled, denies user login if the Grafana role cannot be extracted using Role attribute path.',\n      type: 'switch',\n    },\n    allowAssignGrafanaAdmin: {\n      label: 'Allow assign Grafana admin',\n      description: 'If enabled, it will automatically sync the Grafana server administrator role.',\n      type: 'switch',\n      hidden: !contextSrv.isGrafanaAdmin,\n    },\n    skipOrgRoleSync: {\n      label: 'Skip organization role sync',\n      description: 'Prevent synchronizing users’ organization roles from your IdP.',\n      type: 'switch',\n    },\n    orgMapping: {\n      label: 'Organization mapping',\n      description: orgMappingDescription(provider),\n      type: 'select',\n      hidden: !contextSrv.isGrafanaAdmin,\n      multi: true,\n      allowCustomValue: true,\n      options: [],\n      placeholder: 'Enter mappings (my-team:1:Viewer...) and press Enter to add',\n    },\n    orgAttributePath: {\n      label: 'Organization attribute path',\n      description: 'JMESPath expression to use for organization lookup.',\n      type: 'text',\n      hidden: !(['generic_oauth', 'okta'].includes(provider) && contextSrv.isGrafanaAdmin),\n    },\n    defineAllowedGroups: {\n      label: 'Define allowed groups',\n      type: 'switch',\n    },\n    defineAllowedTeamsIds: {\n      label: 'Define allowed teams ids',\n      type: 'switch',\n    },\n    forceUseGraphApi: {\n      label: 'Force use Graph API',\n      description: \"If enabled, Grafana will fetch the users' groups using the Microsoft Graph API.\",\n      type: 'checkbox',\n    },\n    usePkce: {\n      label: 'Use PKCE',\n      description: (\n        <>\n          If enabled, Grafana will use{' '}\n          <TextLink external variant={'bodySmall'} href={'https://datatracker.ietf.org/doc/html/rfc7636'}>\n            Proof Key for Code Exchange (PKCE)\n          </TextLink>{' '}\n          with the OAuth2 Authorization Code Grant.\n        </>\n      ),\n      type: 'checkbox',\n    },\n    useRefreshToken: {\n      label: 'Use refresh token',\n      description:\n        'If enabled, Grafana will fetch a new access token using the refresh token provided by the OAuth2 provider.',\n      type: 'checkbox',\n    },\n    tlsClientCa: {\n      label: 'TLS client ca',\n      description: 'The file path to the trusted certificate authority list. Is not applicable on Grafana Cloud.',\n      type: 'text',\n      hidden: !config.localFileSystemAvailable,\n    },\n    tlsClientCert: {\n      label: 'TLS client cert',\n      description: 'The file path to the certificate. Is not applicable on Grafana Cloud.',\n      type: 'text',\n      hidden: !config.localFileSystemAvailable,\n    },\n    tlsClientKey: {\n      label: 'TLS client key',\n      description: 'The file path to the key. Is not applicable on Grafana Cloud.',\n      type: 'text',\n      hidden: !config.localFileSystemAvailable,\n    },\n    tlsSkipVerifyInsecure: {\n      label: 'TLS skip verify',\n      description:\n        'If enabled, the client accepts any certificate presented by the server and any host \\n' +\n        'name in that certificate. You should only use this for testing, because this mode leaves \\n' +\n        'SSL/TLS susceptible to man-in-the-middle attacks.',\n      type: 'switch',\n    },\n    groupsAttributePath: {\n      label: 'Groups attribute path',\n      description:\n        'JMESPath expression to use for user group lookup. If you configure allowed_groups, \\n' +\n        'you must also configure groups_attribute_path.',\n      type: 'text',\n    },\n    teamsUrl: {\n      label: 'Teams URL',\n      description: (\n        <>\n          The URL used to query for Team Ids. If not set, the default value is /teams.{' '}\n          {provider === 'generic_oauth' &&\n            'If you configure teams_url, you must also configure team_ids_attribute_path.'}\n        </>\n      ),\n      type: 'text',\n      validation: {\n        validate: (value, formValues) => {\n          let result = true;\n          if (formValues.teamIds.length) {\n            result = !!value;\n          }\n\n          if (typeof value === 'string' && value.length) {\n            result = isUrlValid(value);\n          }\n          return result;\n        },\n        message: 'This field must be set if Team Ids are configured and must be a valid URL.',\n      },\n    },\n    teamIdsAttributePath: {\n      label: 'Team Ids attribute path',\n      description:\n        'The JMESPath expression to use for Grafana Team Id lookup within the results returned by the teams_url endpoint.',\n      type: 'text',\n      validation: {\n        validate: (value, formValues) => {\n          if (formValues.teamIds.length) {\n            return !!value;\n          }\n          return true;\n        },\n        message: 'This field must be set if Team Ids are configured.',\n      },\n    },\n    teamIds: {\n      label: 'Team Ids',\n      type: 'select',\n      description: (\n        <>\n          {provider === 'github' ? 'Integer' : 'String'} list of Team Ids. If set, the user must be a member of one of\n          the given teams to log in.{' '}\n          {provider === 'generic_oauth' &&\n            'If you configure team_ids, you must also configure teams_url and team_ids_attribute_path.'}\n        </>\n      ),\n      multi: true,\n      allowCustomValue: true,\n      options: [],\n      placeholder: 'Enter Team Ids and press Enter to add',\n      validation:\n        provider === 'github'\n          ? {\n              validate: (value) => {\n                if (typeof value === 'string') {\n                  return isNumeric(value);\n                }\n                if (isSelectableValue(value)) {\n                  return value.every((v) => v?.value && isNumeric(v.value));\n                }\n                return true;\n              },\n              message: 'Team Ids must be numbers.',\n            }\n          : undefined,\n    },\n    hostedDomain: {\n      label: 'Hosted domain',\n      description: 'The domain under which Grafana is hosted and accessible.',\n      type: 'text',\n    },\n    validateHd: {\n      label: 'Validate hosted domain',\n      description:\n        'If enabled, Grafana will match the Hosted Domain retrieved from the Google ID Token against the Allowed Domains list specified by the user.',\n      type: 'checkbox',\n    },\n    serverDiscoveryUrl: {\n      label: 'OpenID Connect Discovery URL',\n      description:\n        'The .well-known/openid-configuration endpoint for your IdP. The info extracted from this URL will be used to populate the Auth URL, Token URL and API URL fields.',\n      type: 'custom',\n      content: (setValue) => <ServerDiscoveryField setValue={setValue} />,\n    },\n  };\n}\n\n// Check if a string contains only numeric values\nfunction isNumeric(value: string) {\n  return /^-?\\d+$/.test(value);\n}\n\nfunction orgMappingDescription(provider: string): string {\n  switch (provider) {\n    case 'azuread':\n      return 'List of \"<GroupID>:<OrgIdOrName>:<Role>\" mappings.';\n    case 'github':\n      return 'List of \"<GitHubTeamName>:<OrgIdOrName>:<Role>\" mappings.';\n    case 'gitlab':\n      return 'List of \"<GitlabGroupName>:<OrgIdOrName>:<Role>';\n    case 'google':\n      return 'List of \"<GoogleGroupName>:<OrgIdOrName>:<Role>';\n    default:\n      // Generic OAuth, Okta\n      return 'List of \"<ExternalName>:<OrgIdOrName>:<Role>\" mappings.';\n  }\n}\n\nfunction clientAuthenticationOptions(provider: string): Array<SelectableValue<string>> {\n  switch (provider) {\n    case 'azuread':\n      return [\n        { value: 'none', label: 'None' },\n        { value: 'client_secret_post', label: 'Client secret' },\n        { value: 'managed_identity', label: 'Managed identity' },\n      ];\n    // Other providers ...\n    default:\n      return [\n        { value: 'none', label: 'None' },\n        { value: 'client_secret_post', label: 'Client secret' },\n      ];\n  }\n}\n","import { css } from '@emotion/css';\nimport { useEffect, useState } from 'react';\nimport { UseFormReturn, Controller } from 'react-hook-form';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Checkbox, Field, Input, SecretInput, Select, Switch, useTheme2 } from '@grafana/ui';\n\nimport { fieldMap } from './fields';\nimport { SSOProviderDTO, SSOSettingsField } from './types';\nimport { isSelectableValue } from './utils/guards';\n\ninterface FieldRendererProps\n  extends Pick<\n    UseFormReturn<SSOProviderDTO>,\n    'register' | 'control' | 'watch' | 'setValue' | 'getValues' | 'unregister'\n  > {\n  field: SSOSettingsField;\n  errors: UseFormReturn['formState']['errors'];\n  secretConfigured: boolean;\n  provider: string;\n}\n\nexport const FieldRenderer = ({\n  field,\n  register,\n  errors,\n  watch,\n  setValue,\n  getValues,\n  control,\n  unregister,\n  secretConfigured,\n  provider,\n}: FieldRendererProps) => {\n  const [isSecretConfigured, setIsSecretConfigured] = useState(secretConfigured);\n  const isDependantField = typeof field !== 'string';\n  const name = isDependantField ? field.name : field;\n  const parentValue = isDependantField ? watch(field.dependsOn) : null;\n  const fieldData = fieldMap(provider)[name];\n  const theme = useTheme2();\n  // Unregister a field that depends on a toggle to clear its data\n  useEffect(() => {\n    if (isDependantField) {\n      if (!parentValue) {\n        unregister(name);\n      }\n    }\n  }, [unregister, name, parentValue, isDependantField]);\n\n  const isNotEmptySelectableValueArray = (\n    current: string | boolean | Record<string, string> | Array<SelectableValue<string>> | undefined\n  ): current is Array<SelectableValue<string>> => {\n    return Array.isArray(current) && current.length > 0 && 'value' in current[0];\n  };\n\n  useEffect(() => {\n    if (fieldData.defaultValue) {\n      const current = getValues(name);\n      const obj = fieldData.options?.find(\n        (option) => option.value === (isNotEmptySelectableValueArray(current) ? current[0].value : undefined)\n      );\n      setValue(name, obj?.value || fieldData.defaultValue.value);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (!field) {\n    console.log('missing field:', name);\n    return null;\n  }\n\n  if (!!fieldData.hidden) {\n    return null;\n  }\n\n  // Dependant field means the field depends on another field's value and shouldn't be rendered if the parent field is false\n  if (isDependantField) {\n    const parentValue = watch(field.dependsOn);\n    if (!parentValue) {\n      return null;\n    }\n  }\n  const fieldProps = {\n    label: fieldData.label,\n    required: !!fieldData.validation?.required,\n    invalid: !!errors[name],\n    error: fieldData.validation?.message,\n    description: fieldData.description,\n    defaultValue: fieldData.defaultValue?.value,\n  };\n\n  switch (fieldData.type) {\n    case 'text':\n      return (\n        <Field key={name} {...fieldProps}>\n          <Input {...register(name, fieldData.validation)} type={fieldData.type} id={name} autoComplete={'off'} />\n        </Field>\n      );\n    case 'secret':\n      return (\n        <Field key={name} {...fieldProps} htmlFor={name}>\n          <Controller\n            name={name}\n            control={control}\n            rules={fieldData.validation}\n            render={({ field: { ref, value, ...field } }) => (\n              <SecretInput\n                {...field}\n                autoComplete={'off'}\n                id={name}\n                value={typeof value === 'string' ? value : ''}\n                isConfigured={isSecretConfigured}\n                onReset={() => {\n                  setIsSecretConfigured(false);\n                  setValue(name, '');\n                }}\n              />\n            )}\n          />\n        </Field>\n      );\n    case 'select':\n      const watchOptions = watch(name);\n      let options = fieldData.options;\n      if (!fieldData.options?.length) {\n        options = isSelectableValue(watchOptions) ? watchOptions : [];\n      }\n      return (\n        <Field key={name} {...fieldProps} htmlFor={name}>\n          <Controller\n            rules={fieldData.validation}\n            name={name}\n            control={control}\n            render={({ field: { ref, onChange, ...fieldProps }, fieldState: { invalid } }) => {\n              return (\n                <Select\n                  {...fieldProps}\n                  placeholder={fieldData.placeholder}\n                  isMulti={fieldData.multi}\n                  invalid={invalid}\n                  inputId={name}\n                  options={options}\n                  allowCustomValue={!!fieldData.allowCustomValue}\n                  defaultValue={fieldData.defaultValue}\n                  onChange={onChange}\n                  onCreateOption={(v) => {\n                    const customValue = { value: v, label: v };\n                    onChange([...(options || []), customValue]);\n                  }}\n                />\n              );\n            }}\n          />\n        </Field>\n      );\n    case 'switch':\n      return (\n        <Field key={name} {...fieldProps}>\n          <Switch {...register(name)} id={name} />\n        </Field>\n      );\n    case 'checkbox':\n      return (\n        <Checkbox\n          key={name}\n          {...register(name)}\n          id={name}\n          {...fieldProps}\n          className={css({ marginBottom: theme.spacing(2) })}\n        />\n      );\n    case 'custom':\n      return (\n        <Field key={name} {...fieldProps}>\n          {fieldData.content ? fieldData.content(setValue) : <></>}\n        </Field>\n      );\n    default:\n      console.error(`Unknown field type: ${fieldData.type}`);\n      return null;\n  }\n};\n","import { SelectableValue } from '@grafana/data';\n\nimport { fieldMap, sectionFields } from '../fields';\nimport { FieldData, SSOProvider, SSOProviderDTO } from '../types';\n\nimport { isSelectableValue } from './guards';\n\nexport const emptySettings: SSOProviderDTO = {\n  allowAssignGrafanaAdmin: false,\n  allowSignUp: false,\n  allowedDomains: [],\n  allowedGroups: [],\n  allowedOrganizations: [],\n  apiUrl: '',\n  authStyle: '',\n  authUrl: '',\n  autoLogin: false,\n  clientAuthentication: '',\n  clientId: '',\n  clientSecret: '',\n  managedIdentityClientId: '',\n  federatedCredentialAudience: '',\n  emailAttributeName: '',\n  emailAttributePath: '',\n  emptyScopes: false,\n  enabled: false,\n  extra: {},\n  groupsAttributePath: '',\n  hostedDomain: '',\n  icon: 'shield',\n  name: '',\n  roleAttributePath: '',\n  roleAttributeStrict: false,\n  scopes: [],\n  signoutRedirectUrl: '',\n  skipOrgRoleSync: false,\n  teamIds: [],\n  teamIdsAttributePath: '',\n  teamsUrl: '',\n  tlsClientCa: '',\n  tlsClientCert: '',\n  tlsClientKey: '',\n  tlsSkipVerify: false,\n  tokenUrl: '',\n  type: '',\n  usePkce: false,\n  useRefreshToken: false,\n};\n\nconst strToValue = (val: string | string[]): SelectableValue[] => {\n  if (!val?.length) {\n    return [];\n  }\n  if (Array.isArray(val)) {\n    return val.map((v) => ({ label: v, value: v }));\n  }\n  // Stored as JSON Array\n  if (val.startsWith('[') && val.endsWith(']')) {\n    // Fallback to parsing it like a non-json string if it is not valid json, instead of crashing.\n    try {\n      return JSON.parse(val).map((v: string) => ({ label: v, value: v }));\n    } catch {}\n  }\n\n  return val.split(/[\\s,]/).map((s) => ({ label: s, value: s }));\n};\n\nexport function dataToDTO(data?: SSOProvider): SSOProviderDTO {\n  if (!data) {\n    return emptySettings;\n  }\n  const providerFields = getFieldsForProvider(data.provider);\n  const arrayFields = getArrayFields(fieldMap(data.provider), providerFields);\n  const settings = { ...data.settings };\n  for (const field of arrayFields) {\n    //@ts-expect-error\n    settings[field] = strToValue(settings[field]);\n  }\n  //@ts-expect-error\n  return settings;\n}\n\nconst valuesToString = (values: Array<SelectableValue<string>>) => {\n  // Store arrays as JSON array\n  return JSON.stringify(values.map(({ value }) => value));\n};\n\nconst getFieldsForProvider = (provider: string) => {\n  const sections = sectionFields[provider];\n\n  // include the enabled field because it is not part of the fields defined for providers\n  const fields = ['enabled'];\n\n  return Object.values(sections).reduce(\n    (result, section) => [\n      ...result,\n      ...section.fields.map((field) => (typeof field === 'string' ? field : field.name)),\n    ],\n    fields\n  );\n};\n\n// Convert the DTO to the data format used by the API\nexport function dtoToData(dto: SSOProviderDTO, provider: string) {\n  let current: Partial<SSOProviderDTO> = dto;\n\n  const providerFields = getFieldsForProvider(provider);\n  const arrayFields = getArrayFields(fieldMap(provider), providerFields);\n\n  // filter out the fields that are not defined on the provider\n  const settings: Partial<SSOProviderDTO> = Object.keys(current)\n    .filter((key) => providerFields.includes(key))\n    .reduce((obj, key) => {\n      //@ts-expect-error\n      return { ...obj, [key]: current[key] };\n    }, {});\n\n  for (const field of arrayFields) {\n    const value = current[field];\n    if (value) {\n      if (isSelectableValue(value)) {\n        //@ts-expect-error\n        settings[field] = valuesToString(value);\n      } else if (isSelectableValue([value])) {\n        //@ts-expect-error\n        settings[field] = value.value;\n      }\n    }\n  }\n  return settings;\n}\n\nexport function getArrayFields(obj: Record<string, FieldData>, providerFields: string[]): Array<keyof SSOProviderDTO> {\n  return Object.entries(obj)\n    .filter(([key, value]) => providerFields.includes(key) && value.type === 'select')\n    .map(([key]) => key as keyof SSOProviderDTO);\n}\n","import { useState } from 'react';\nimport { useForm } from 'react-hook-form';\n\nimport { AppEvents } from '@grafana/data';\nimport { getAppEvents, getBackendSrv, isFetchError, locationService, reportInteraction } from '@grafana/runtime';\nimport {\n  Box,\n  Button,\n  CollapsableSection,\n  ConfirmModal,\n  Dropdown,\n  Field,\n  IconButton,\n  LinkButton,\n  Menu,\n  Stack,\n  Switch,\n} from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { FormPrompt } from '../../core/components/FormPrompt/FormPrompt';\nimport { Page } from '../../core/components/Page/Page';\n\nimport { FieldRenderer } from './FieldRenderer';\nimport { sectionFields } from './fields';\nimport { SSOProvider, SSOProviderDTO } from './types';\nimport { dataToDTO, dtoToData } from './utils/data';\n\nconst appEvents = getAppEvents();\n\ninterface ProviderConfigProps {\n  config?: SSOProvider;\n  isLoading?: boolean;\n  provider: string;\n}\n\nexport const ProviderConfigForm = ({ config, provider, isLoading }: ProviderConfigProps) => {\n  const {\n    register,\n    handleSubmit,\n    control,\n    reset,\n    watch,\n    setValue,\n    getValues,\n    unregister,\n    formState: { errors, dirtyFields, isSubmitted },\n  } = useForm({ defaultValues: dataToDTO(config), mode: 'onSubmit', reValidateMode: 'onChange' });\n  const [isSaving, setIsSaving] = useState(false);\n  const [submitError, setSubmitError] = useState(false);\n  const dataSubmitted = isSubmitted && !submitError;\n  const sections = sectionFields[provider];\n  const [resetConfig, setResetConfig] = useState(false);\n\n  const additionalActionsMenu = (\n    <Menu>\n      <Menu.Item\n        label={t(\n          'auth-config.provider-config-form.additional-actions-menu.label-reset-to-default-values',\n          'Reset to default values'\n        )}\n        icon=\"history-alt\"\n        onClick={() => {\n          setResetConfig(true);\n        }}\n      />\n    </Menu>\n  );\n\n  const onSubmit = async (data: SSOProviderDTO) => {\n    setIsSaving(true);\n    setSubmitError(false);\n    const requestData = dtoToData(data, provider);\n    try {\n      await getBackendSrv().put(\n        `/api/v1/sso-settings/${provider}`,\n        {\n          id: config?.id,\n          provider: config?.provider,\n          settings: { ...requestData },\n        },\n        {\n          showErrorAlert: false,\n        }\n      );\n\n      reportInteraction('grafana_authentication_ssosettings_saved', {\n        provider,\n        enabled: requestData.enabled,\n      });\n\n      appEvents.publish({\n        type: AppEvents.alertSuccess.name,\n        payload: ['Settings saved'],\n      });\n      reset(data);\n      // Delay redirect so the form state can update\n      setTimeout(() => {\n        locationService.push(`/admin/authentication`);\n      }, 300);\n    } catch (error) {\n      let message = '';\n      if (isFetchError(error)) {\n        message = error.data.message;\n      } else if (error instanceof Error) {\n        message = error.message;\n      }\n      appEvents.publish({\n        type: AppEvents.alertError.name,\n        payload: [message],\n      });\n      setSubmitError(true);\n      setIsSaving(false);\n    }\n  };\n\n  const onResetConfig = async () => {\n    try {\n      await getBackendSrv().delete(`/api/v1/sso-settings/${provider}`, undefined, { showSuccessAlert: false });\n      reportInteraction('grafana_authentication_ssosettings_removed', {\n        provider,\n      });\n\n      appEvents.publish({\n        type: AppEvents.alertSuccess.name,\n        payload: ['Settings reset to defaults'],\n      });\n      setTimeout(() => {\n        locationService.push(`/admin/authentication`);\n      });\n    } catch (error) {\n      let message = '';\n      if (isFetchError(error)) {\n        message = error.data.message;\n      } else if (error instanceof Error) {\n        message = error.message;\n      }\n      appEvents.publish({\n        type: AppEvents.alertError.name,\n        payload: [message],\n      });\n    }\n  };\n\n  const isEnabled = config?.settings.enabled;\n\n  const onSaveAttempt = (toggleEnabled: boolean) => {\n    reportInteraction('grafana_authentication_ssosettings_save_attempt', {\n      provider,\n      enabled: toggleEnabled ? !isEnabled : isEnabled,\n    });\n\n    if (toggleEnabled) {\n      setValue('enabled', !isEnabled);\n    }\n  };\n\n  return (\n    <Page.Contents isLoading={isLoading}>\n      <form onSubmit={handleSubmit(onSubmit)} style={{ maxWidth: '600px' }}>\n        <FormPrompt\n          confirmRedirect={!!Object.keys(dirtyFields).length && !dataSubmitted}\n          onDiscard={() => {\n            reportInteraction('grafana_authentication_ssosettings_abandoned', {\n              provider,\n            });\n            reset();\n          }}\n        />\n        <Field label={t('auth-config.provider-config-form.label-enabled', 'Enabled')} hidden={true}>\n          <Switch\n            {...register('enabled')}\n            id=\"enabled\"\n            label={t('auth-config.provider-config-form.enabled-label-enabled', 'Enabled')}\n          />\n        </Field>\n        <Stack gap={2} direction={'column'}>\n          {sections\n            .filter((section) => !section.hidden)\n            .map((section, index) => {\n              return (\n                <CollapsableSection label={section.name} isOpen={index === 0} key={section.name}>\n                  {section.fields\n                    .filter((field) => (typeof field !== 'string' ? !field.hidden : true))\n                    .map((field) => {\n                      return (\n                        <FieldRenderer\n                          key={typeof field === 'string' ? field : field.name}\n                          field={field}\n                          control={control}\n                          errors={errors}\n                          setValue={setValue}\n                          getValues={getValues}\n                          register={register}\n                          watch={watch}\n                          unregister={unregister}\n                          provider={provider}\n                          secretConfigured={!!config?.settings.clientSecret}\n                        />\n                      );\n                    })}\n                </CollapsableSection>\n              );\n            })}\n        </Stack>\n        <Box display={'flex'} gap={2} marginTop={5}>\n          <Stack alignItems={'center'} gap={2}>\n            <Button\n              type={'submit'}\n              disabled={isSaving}\n              onClick={() => onSaveAttempt(true)}\n              variant={isEnabled ? 'secondary' : undefined}\n            >\n              {isSaving ? (isEnabled ? 'Disabling...' : 'Saving...') : isEnabled ? 'Disable' : 'Save and enable'}\n            </Button>\n\n            <Button type={'submit'} disabled={isSaving} variant={'secondary'} onClick={() => onSaveAttempt(false)}>\n              {isSaving ? 'Saving...' : 'Save'}\n            </Button>\n            <LinkButton href={'/admin/authentication'} variant={'secondary'}>\n              <Trans i18nKey=\"auth-config.provider-config-form.discard\">Discard</Trans>\n            </LinkButton>\n\n            <Dropdown overlay={additionalActionsMenu} placement=\"bottom-start\">\n              <IconButton\n                tooltip={t('auth-config.provider-config-form.tooltip-more-actions', 'More actions')}\n                title={t('auth-config.provider-config-form.title-more-actions', 'More actions')}\n                tooltipPlacement=\"top\"\n                size=\"md\"\n                variant=\"secondary\"\n                name=\"ellipsis-v\"\n                hidden={config?.source === 'system'}\n              />\n            </Dropdown>\n          </Stack>\n        </Box>\n      </form>\n      {resetConfig && (\n        <ConfirmModal\n          isOpen\n          icon=\"trash-alt\"\n          title={t('auth-config.provider-config-form.title-reset', 'Reset')}\n          body={\n            <Stack direction={'column'} gap={3}>\n              <span>\n                <Trans i18nKey=\"auth-config.provider-config-form.reset-configuration\">\n                  Are you sure you want to reset this configuration?\n                </Trans>\n              </span>\n              <small>\n                <Trans i18nKey=\"auth-config.provider-config-form.reset-configuration-description\">\n                  After resetting these settings Grafana will use the provider configuration from the system (config\n                  file/environment variables) if any.\n                </Trans>\n              </small>\n            </Stack>\n          }\n          confirmText=\"Reset\"\n          onDismiss={() => setResetConfig(false)}\n          onConfirm={async () => {\n            await onResetConfig();\n            setResetConfig(false);\n          }}\n        />\n      )}\n    </Page.Contents>\n  );\n};\n","import { useEffect } from 'react';\nimport { useParams } from 'react-router-dom-v5-compat';\n\nimport { NavModelItem } from '@grafana/data';\nimport { Badge, Stack, Text } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { PageNotFound } from 'app/core/components/PageNotFound/PageNotFound';\nimport { useDispatch, useSelector } from 'app/types';\n\nimport { ProviderConfigForm } from './ProviderConfigForm';\nimport { UIMap } from './constants';\nimport { loadProviders } from './state/actions';\nimport { SSOProvider } from './types';\n\nconst getPageNav = (config?: SSOProvider): NavModelItem => {\n  if (!config) {\n    return {\n      text: 'Authentication',\n      subTitle: 'Configure authentication providers',\n      icon: 'shield',\n      id: 'authentication',\n    };\n  }\n\n  const providerDisplayName = UIMap[config.provider][1] || config.provider.toUpperCase();\n\n  return {\n    text: providerDisplayName || '',\n    subTitle: `To configure ${providerDisplayName} OAuth2 you must register your application with ${providerDisplayName}. The provider will generate a Client ID and Client Secret for you to use.`,\n    icon: config.settings.icon || 'shield',\n    id: config.provider,\n  };\n};\n\n/**\n * Separate the Page logic from the Content logic for easier testing.\n */\nexport const ProviderConfigPage = () => {\n  const dispatch = useDispatch();\n  const { isLoading, providers } = useSelector((store) => store.authConfig);\n  const { provider = '' } = useParams();\n  const config = providers.find((config) => config.provider === provider);\n\n  useEffect(() => {\n    dispatch(loadProviders(provider));\n  }, [dispatch, provider]);\n\n  if (!config || !config.provider || !UIMap[config.provider]) {\n    return <PageNotFound />;\n  }\n\n  const pageNav = getPageNav(config);\n\n  return (\n    <Page\n      navId=\"authentication\"\n      pageNav={pageNav}\n      renderTitle={(title) => (\n        <Stack gap={2} alignItems=\"center\">\n          <Text variant={'h1'}>{title}</Text>\n          <Badge\n            text={config.settings.enabled ? 'Enabled' : 'Not enabled'}\n            color={config.settings.enabled ? 'green' : 'blue'}\n            icon={config.settings.enabled ? 'check' : undefined}\n          />\n        </Stack>\n      )}\n    >\n      <ProviderConfigForm config={config} isLoading={isLoading} provider={provider} />\n    </Page>\n  );\n};\n\nexport default ProviderConfigPage;\n","import { IconName } from '@grafana/data';\n\nexport const BASE_PATH = 'admin/authentication/';\n\n// TODO Remove when this is available from API\nexport const UIMap: Record<string, [IconName, string]> = {\n  github: ['github', 'GitHub'],\n  gitlab: ['gitlab', 'GitLab'],\n  google: ['google', 'Google'],\n  generic_oauth: ['lock', 'Generic OAuth'],\n  grafana_com: ['grafana', 'Grafana.com'],\n  azuread: ['microsoft', 'Azure AD'],\n  okta: ['okta', 'Okta'],\n};\n","import { lastValueFrom } from 'rxjs';\n\nimport { config, getBackendSrv, isFetchError } from '@grafana/runtime';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, Settings, ThunkResult, UpdateSettingsQuery } from 'app/types';\n\nimport { getAuthProviderStatus, getRegisteredAuthProviders, SSOProvider } from '..';\nimport { AuthProviderStatus, SettingsError } from '../types';\n\nimport {\n  loadingBegin,\n  loadingEnd,\n  providersLoaded,\n  providerStatusesLoaded,\n  resetError,\n  setError,\n  settingsUpdated,\n} from './reducers';\n\nexport function loadSettings(showSpinner = true): ThunkResult<Promise<Settings>> {\n  return async (dispatch) => {\n    if (contextSrv.hasPermission(AccessControlAction.SettingsRead)) {\n      if (showSpinner) {\n        dispatch(loadingBegin());\n      }\n      dispatch(loadProviders());\n      const result = await getBackendSrv().get('/api/admin/settings');\n      dispatch(settingsUpdated(result));\n      await dispatch(loadProviderStatuses());\n      if (showSpinner) {\n        dispatch(loadingEnd());\n      }\n      return result;\n    }\n  };\n}\n\nexport function loadProviders(provider = ''): ThunkResult<Promise<SSOProvider[]>> {\n  return async (dispatch) => {\n    if (!config.featureToggles.ssoSettingsApi) {\n      return [];\n    }\n    const result = await getBackendSrv().get(`/api/v1/sso-settings${provider ? `/${provider}` : ''}`);\n    dispatch(providersLoaded(provider ? [result] : result));\n    return result;\n  };\n}\n\nexport function loadProviderStatuses(): ThunkResult<void> {\n  return async (dispatch) => {\n    const registeredProviders = getRegisteredAuthProviders();\n    const providerStatuses: Record<string, AuthProviderStatus> = {};\n    const getStatusPromises: Array<Promise<AuthProviderStatus>> = [];\n    for (const provider of registeredProviders) {\n      getStatusPromises.push(getAuthProviderStatus(provider.id));\n    }\n    const statuses = await Promise.all(getStatusPromises);\n    for (let i = 0; i < registeredProviders.length; i++) {\n      const provider = registeredProviders[i];\n      providerStatuses[provider.id] = statuses[i];\n    }\n    dispatch(providerStatusesLoaded(providerStatuses));\n  };\n}\n\nexport function saveSettings(data: UpdateSettingsQuery): ThunkResult<Promise<boolean>> {\n  return async (dispatch) => {\n    if (contextSrv.hasPermission(AccessControlAction.SettingsWrite)) {\n      try {\n        await lastValueFrom(\n          getBackendSrv().fetch({\n            url: '/api/admin/settings',\n            method: 'PUT',\n            data,\n            showSuccessAlert: false,\n            showErrorAlert: false,\n          })\n        );\n        dispatch(resetError());\n        return true;\n      } catch (error) {\n        console.log(error);\n        if (isFetchError(error)) {\n          error.isHandled = true;\n          const updateErr: SettingsError = {\n            message: error.data?.message,\n            errors: error.data?.errors,\n          };\n          dispatch(setError(updateErr));\n          return false;\n        }\n      }\n    }\n    return false;\n  };\n}\n","import { BASE_PATH } from '../constants';\nimport { AuthProviderInfo } from '../types';\n\nexport function getProviderUrl(provider: AuthProviderInfo) {\n  return BASE_PATH + (provider.configPath || provider.id);\n}\n\nexport const isUrlValid = (url: unknown): boolean => {\n  if (typeof url !== 'string') {\n    return false;\n  }\n  try {\n    const parsedUrl = new URL(url);\n    return parsedUrl.protocol.includes('http');\n  } catch (_) {\n    return false;\n  }\n};\n","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i;\n","import REGEX from './regex.js';\nfunction validate(uuid) {\n    return typeof uuid === 'string' && REGEX.test(uuid);\n}\nexport default validate;\n"],"names":["FormPrompt","confirmRedirect","onDiscard","onLocationChange","modalIsOpen","setModalIsOpen","blockedLocation","setBlockedLocation","changesDiscarded","setChangesDiscarded","onBeforeUnload","e","handleRedirect","location","currentPath","nextPath","locationChangeCheck","blockRedirect","onBackToForm","onDiscardChanges","UnsavedChangesModal","isOpen","Prompt","message","when","history","unblock","mapStateToProps","state","mapActionsToProps","allowInsecureEmail","loadSettings","onClose","saveSettings","notifyApp","oauthAllowInsecureEmailLookupOnChange","resetButtonOnClick","subtitle","TextLink","styles","getStyles","Drawer","Text","Switch","Button","theme","ConfigureAuthCTA","Stack","Icon","ProviderCard","providerId","enabled","configPath","authType","onClick","url","iconName","displayName","Card","Badge","isLoading","providerStatuses","providers","mapDispatchToProps","AuthConfigPageUnconnected","showDrawer","setShowDrawer","availableProviders","p","onProviderCardClick","providerType","providerList","Page","ToolbarButton","Grid","provider","settings","AuthDrawer","ServerDiscoveryModal","onSuccess","handleSubmit","register","errors","validateUrl","value","Modal","Field","Input","ServerDiscoveryField","setValue","appEvents","isModalOpen","setModalVisibility","setLoading","data","wellKnownSuffix","res","isSelectableValue","v","sectionFields","fieldMap","clientAuthenticationOptions","orgMappingDescription","config","formValues","result","isNumeric","FieldRenderer","field","watch","getValues","control","unregister","secretConfigured","isSecretConfigured","setIsSecretConfigured","isDependantField","name","parentValue","fieldData","isNotEmptySelectableValueArray","current","obj","option","fieldProps","ref","SecretInput","watchOptions","options","onChange","invalid","Select","customValue","Checkbox","emptySettings","strToValue","val","s","dataToDTO","providerFields","getFieldsForProvider","arrayFields","getArrayFields","valuesToString","values","sections","fields","section","dtoToData","dto","key","ProviderConfigForm","reset","dirtyFields","isSubmitted","isSaving","setIsSaving","submitError","setSubmitError","dataSubmitted","resetConfig","setResetConfig","additionalActionsMenu","Menu","onSubmit","requestData","error","onResetConfig","isEnabled","onSaveAttempt","toggleEnabled","index","CollapsableSection","Box","Dropdown","IconButton","ConfirmModal","getPageNav","providerDisplayName","ProviderConfigPage","dispatch","store","PageNotFound","pageNav","title","BASE_PATH","UIMap","showSpinner","loadProviders","loadProviderStatuses","registeredProviders","getStatusPromises","statuses","i","updateErr","getProviderUrl","isUrlValid","validate","uuid"],"sourceRoot":""}