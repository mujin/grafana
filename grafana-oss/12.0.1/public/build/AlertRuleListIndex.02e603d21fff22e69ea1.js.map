{"version":3,"file":"AlertRuleListIndex.02e603d21fff22e69ea1.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/rules/NoRulesCTA.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListErrors.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaRuleFolderExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RulesGroup.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/useCombinedGroupNamespace.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/CloudRules.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaRulesExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/GrafanaRules.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListGroupView.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListStateView.tsx","webpack://grafana/./public/app/features/alerting/unified/rule-list/RuleList.v1.tsx","webpack://grafana/./public/app/features/alerting/unified/RuleList.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Authorize.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/ContactPointSelector.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/ActionIcon.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/MultipleDataSourcePicker.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/Filter/RulesViewModeSelector.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/Filter/RulesFilter.v1.tsx","webpack://grafana/./public/app/features/alerting/unified/plugins/useAlertingHomePageExtensions.ts","webpack://grafana/./public/app/features/alerting/unified/rule-list/components/AlertRuleListItem.tsx","webpack://grafana/./public/app/features/alerting/unified/rule-list/components/ListItem.tsx","webpack://grafana/./public/app/features/alerting/unified/rule-list/components/ListSection.tsx","webpack://grafana/./public/app/features/alerting/unified/rule-list/components/Namespace.tsx","webpack://grafana/./public/app/features/alerting/unified/rule-list/components/RuleListIcon.tsx","webpack://grafana/./public/app/features/alerting/unified/utils/accessControlHooks.ts","webpack://grafana/./node_modules/react-use/esm/useInterval.js"],"sourcesContent":["import { Dropdown, EmptyState, LinkButton, Menu, MenuItem, Stack, TextLink } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { useGrafanaManagedRecordingRulesSupport } from '../../featureToggles';\nimport { useRulesAccess } from '../../utils/accessControlHooks';\n\nconst RecordingRulesButtons = () => {\n  const { canCreateGrafanaRules, canCreateCloudRules } = useRulesAccess();\n  const grafanaRecordingRulesEnabled = useGrafanaManagedRecordingRulesSupport();\n  const canCreateAll = canCreateGrafanaRules && canCreateCloudRules && grafanaRecordingRulesEnabled;\n\n  // User can create Grafana and DS-managed recording rules, show a dropdown\n  if (canCreateAll) {\n    return (\n      <Dropdown\n        overlay={\n          <Menu>\n            <MenuItem\n              url=\"alerting/new/grafana-recording\"\n              icon=\"plus\"\n              label={t('alerting.list-view.empty.new-grafana-recording-rule', 'New Grafana-managed recording rule')}\n            />\n            <MenuItem\n              url=\"alerting/new/recording\"\n              icon=\"plus\"\n              label={t(\n                'alerting.list-view.empty.new-ds-managed-recording-rule',\n                'New data source-managed recording rule'\n              )}\n            />\n          </Menu>\n        }\n      >\n        <LinkButton variant=\"primary\" icon=\"plus\" size=\"lg\">\n          <Trans i18nKey=\"alerting.list-view.empty.new-recording-rule\">New recording rule</Trans>\n        </LinkButton>\n      </Dropdown>\n    );\n  }\n\n  // ...Otherwise, just show the buttons for each type of recording rule\n  // (this will just be one or the other)\n  return (\n    <>\n      {canCreateGrafanaRules && grafanaRecordingRulesEnabled && (\n        <LinkButton variant=\"primary\" icon=\"plus\" size=\"lg\" href=\"alerting/new/grafana-recording\">\n          <Trans i18nKey=\"alerting.list-view.empty.new-grafana-recording-rule\">\n            New Grafana-managed recording rule\n          </Trans>\n        </LinkButton>\n      )}\n      {canCreateCloudRules && (\n        <LinkButton variant=\"primary\" icon=\"plus\" size=\"lg\" href=\"alerting/new/recording\">\n          <Trans i18nKey=\"alerting.list-view.empty.new-ds-managed-recording-rule\">\n            New data source-managed recording rule\n          </Trans>\n        </LinkButton>\n      )}\n    </>\n  );\n};\n\nexport const NoRulesSplash = () => {\n  const { canCreateGrafanaRules, canCreateCloudRules } = useRulesAccess();\n  const canCreateAnything = canCreateGrafanaRules || canCreateCloudRules;\n\n  return (\n    <div>\n      <EmptyState\n        message=\"You haven't created any rules yet\"\n        variant=\"call-to-action\"\n        button={\n          canCreateAnything ? (\n            <Stack direction=\"column\" alignItems=\"center\" justifyContent=\"center\">\n              {canCreateAnything && (\n                <LinkButton variant=\"primary\" icon=\"plus\" size=\"lg\" href=\"alerting/new/alerting\">\n                  <Trans i18nKey=\"alerting.list-view.empty.new-alert-rule\">New alert rule</Trans>\n                </LinkButton>\n              )}\n              <RecordingRulesButtons />\n            </Stack>\n          ) : null\n        }\n      >\n        <Trans i18nKey=\"alerting.list-view.empty.provisioning\">\n          You can also define rules through file provisioning or Terraform.{' '}\n          <TextLink\n            href=\"https://grafana.com/docs/grafana/latest/alerting/set-up/provision-alerting-resources/\"\n            external\n          >\n            Learn more\n          </TextLink>\n        </Trans>\n      </EmptyState>\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport { SerializedError } from '@reduxjs/toolkit';\nimport pluralize from 'pluralize';\nimport { FC, ReactElement, useMemo, useState } from 'react';\nimport { useLocalStorage } from 'react-use';\n\nimport { DataSourceInstanceSettings, GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, Tooltip, useStyles2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { GRAFANA_RULES_SOURCE_NAME, getRulesDataSources } from '../../utils/datasource';\nimport { makeDataSourceLink } from '../../utils/misc';\nimport { isRulerNotSupportedResponse } from '../../utils/rules';\n\nexport function RuleListErrors(): ReactElement {\n  const [expanded, setExpanded] = useState(false);\n  const [closed, setClosed] = useLocalStorage('grafana.unifiedalerting.hideErrors', false);\n  const promRuleRequests = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n  const styles = useStyles2(getStyles);\n\n  const errors = useMemo((): JSX.Element[] => {\n    const [promRequestErrors, rulerRequestErrors] = [promRuleRequests, rulerRuleRequests].map((requests) =>\n      getRulesDataSources().reduce<Array<{ error: SerializedError; dataSource: DataSourceInstanceSettings }>>(\n        (result, dataSource) => {\n          const error = requests[dataSource.name]?.error;\n          if (requests[dataSource.name] && error && !isRulerNotSupportedResponse(requests[dataSource.name])) {\n            return [...result, { dataSource, error }];\n          }\n          return result;\n        },\n        []\n      )\n    );\n    const grafanaPromError = promRuleRequests[GRAFANA_RULES_SOURCE_NAME]?.error;\n    const grafanaRulerError = rulerRuleRequests[GRAFANA_RULES_SOURCE_NAME]?.error;\n\n    const result: JSX.Element[] = [];\n\n    if (grafanaPromError) {\n      result.push(<>Failed to load Grafana rules state: {grafanaPromError.message || 'Unknown error.'}</>);\n    }\n    if (grafanaRulerError) {\n      result.push(<>Failed to load Grafana rules config: {grafanaRulerError.message || 'Unknown error.'}</>);\n    }\n\n    promRequestErrors.forEach(({ dataSource, error }) =>\n      result.push(\n        <>\n          Failed to load rules state from{' '}\n          <a href={makeDataSourceLink(dataSource.uid)} className={styles.dsLink}>\n            {dataSource.name}\n          </a>\n          : {error.message || 'Unknown error.'}\n        </>\n      )\n    );\n\n    rulerRequestErrors.forEach(({ dataSource, error }) =>\n      result.push(\n        <>\n          Failed to load rules config from{' '}\n          <a href={makeDataSourceLink(dataSource.uid)} className={styles.dsLink}>\n            {dataSource.name}\n          </a>\n          : {error.message || 'Unknown error.'}\n        </>\n      )\n    );\n\n    return result;\n  }, [promRuleRequests, rulerRuleRequests, styles.dsLink]);\n\n  return (\n    <>\n      {!!errors.length && closed && (\n        <ErrorSummaryButton count={errors.length} onClick={() => setClosed((closed) => !closed)} />\n      )}\n      {!!errors.length && !closed && (\n        <Alert\n          data-testid=\"cloud-rulessource-errors\"\n          title={t(\n            'alerting.rule-list-errors.cloud-rulessource-errors-title-errors-loading-rules',\n            'Errors loading rules'\n          )}\n          severity=\"error\"\n          onRemove={() => setClosed(true)}\n        >\n          {expanded && errors.map((item, idx) => <div key={idx}>{item}</div>)}\n          {!expanded && (\n            <>\n              <div>{errors[0]}</div>\n              {errors.length >= 2 && (\n                <Button\n                  className={styles.moreButton}\n                  fill=\"text\"\n                  icon=\"angle-right\"\n                  size=\"sm\"\n                  onClick={() => setExpanded(true)}\n                >\n                  {errors.length - 1} more {pluralize('error', errors.length - 1)}\n                </Button>\n              )}\n            </>\n          )}\n        </Alert>\n      )}\n    </>\n  );\n}\n\ninterface ErrorSummaryProps {\n  count: number;\n  onClick: () => void;\n}\n\nconst ErrorSummaryButton: FC<ErrorSummaryProps> = ({ count, onClick }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.floatRight}>\n      <Tooltip content=\"Show all errors\" placement=\"bottom\">\n        <Button fill=\"text\" variant=\"destructive\" icon=\"exclamation-triangle\" onClick={onClick}>\n          {count > 1 ? <>{count} errors</> : <Trans i18nKey=\"alerting.error-summary-button.error\">1 error</Trans>}\n        </Button>\n      </Tooltip>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  moreButton: css({\n    padding: 0,\n  }),\n  floatRight: css({\n    display: 'flex',\n    justifyContent: 'flex-end',\n  }),\n  dsLink: css({\n    fontWeight: theme.typography.fontWeightBold,\n  }),\n});\n","import { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { FolderDTO } from '../../../../../types';\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { ExportFormats, allGrafanaExportProviders } from './providers';\n\ninterface GrafanaRuleFolderExporterProps {\n  folder: FolderDTO;\n  onClose: () => void;\n}\n\nexport function GrafanaRuleFolderExporter({ folder, onClose }: GrafanaRuleFolderExporterProps) {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n\n  return (\n    <GrafanaExportDrawer\n      title={`Export ${folder.title} rules`}\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      <GrafanaRuleFolderExportPreview folder={folder} exportFormat={activeTab} onClose={onClose} />\n    </GrafanaExportDrawer>\n  );\n}\n\ninterface GrafanaRuleFolderExportPreviewProps {\n  folder: FolderDTO;\n  exportFormat: ExportFormats;\n  onClose: () => void;\n}\n\nfunction GrafanaRuleFolderExportPreview({ folder, exportFormat, onClose }: GrafanaRuleFolderExportPreviewProps) {\n  const { currentData: exportFolderDefinition = '', isFetching } = alertRuleApi.endpoints.exportRules.useQuery({\n    folderUid: folder.uid,\n    format: exportFormat,\n  });\n\n  if (isFetching) {\n    return <LoadingPlaceholder text={t('alerting.grafana-rule-folder-export-preview.text-loading', 'Loading....')} />;\n  }\n\n  const downloadFileName = `${folder.title}-${folder.uid}`;\n\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={exportFolderDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n}\n","import { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Badge, Icon, Spinner, Stack, Tooltip, useStyles2 } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\nimport { CombinedRuleGroup, CombinedRuleNamespace, RulesSource } from 'app/types/unified-alerting';\n\nimport { useFolder } from '../../hooks/useFolder';\nimport { useHasRuler } from '../../hooks/useHasRuler';\nimport { useRulesAccess } from '../../utils/accessControlHooks';\nimport { GRAFANA_RULES_SOURCE_NAME, getRulesSourceName, isCloudRulesSource } from '../../utils/datasource';\nimport { makeFolderLink } from '../../utils/misc';\nimport { groups } from '../../utils/navigation';\nimport { isFederatedRuleGroup, isPluginProvidedRule, rulerRuleType } from '../../utils/rules';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { RuleLocation } from '../RuleLocation';\nimport { GrafanaRuleFolderExporter } from '../export/GrafanaRuleFolderExporter';\nimport { decodeGrafanaNamespace } from '../expressions/util';\n\nimport { ActionIcon } from './ActionIcon';\nimport { RuleGroupStats } from './RuleStats';\nimport { RulesTable, useIsRulesLoading } from './RulesTable';\n\ntype ViewMode = 'grouped' | 'list';\n\ninterface Props {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n  expandAll: boolean;\n  viewMode: ViewMode;\n}\n\nexport const RulesGroup = React.memo(({ group, namespace, expandAll, viewMode }: Props) => {\n  const { rulesSource } = namespace;\n  const rulesSourceName = getRulesSourceName(rulesSource);\n  const rulerRulesLoaded = useIsRulesLoading(rulesSource);\n\n  const styles = useStyles2(getStyles);\n\n  const [isExporting, setIsExporting] = useState<'folder' | undefined>(undefined);\n  const [isCollapsed, setIsCollapsed] = useState(!expandAll);\n\n  useEffect(() => {\n    setIsCollapsed(!expandAll);\n  }, [expandAll]);\n\n  const { hasRuler } = useHasRuler(namespace.rulesSource);\n\n  const rulerRule = group.rules[0]?.rulerRule;\n  const folderUID =\n    (rulerRule && rulerRuleType.grafana.rule(rulerRule) && rulerRule.grafana_alert.namespace_uid) || undefined;\n  const { folder } = useFolder(folderUID);\n\n  const { canEditRules } = useRulesAccess();\n\n  // group \"is deleting\" if rules source has ruler, but this group has no rules that are in ruler\n  const isDeleting = hasRuler && rulerRulesLoaded && !group.rules.find((rule) => !!rule.rulerRule);\n  const isFederated = isFederatedRuleGroup(group);\n\n  // check if group has provisioned items\n  const isProvisioned = group.rules.some((rule) => {\n    return rulerRuleType.grafana.rule(rule.rulerRule) && rule.rulerRule.grafana_alert.provenance;\n  });\n  const isPluginProvided = group.rules.some((rule) => isPluginProvidedRule(rule.rulerRule ?? rule.promRule));\n\n  const canEditGroup = hasRuler && !isProvisioned && !isFederated && !isPluginProvided && canEditRules(rulesSourceName);\n\n  // check what view mode we are in\n  const isListView = viewMode === 'list';\n  const isGroupView = viewMode === 'grouped';\n\n  const actionIcons: React.ReactNode[] = [];\n\n  // for grafana, link to folder views\n  if (isDeleting) {\n    actionIcons.push(\n      <Stack key=\"is-deleting\">\n        <Spinner />\n        deleting\n      </Stack>\n    );\n  } else if (rulesSource === GRAFANA_RULES_SOURCE_NAME) {\n    if (folderUID) {\n      const baseUrl = makeFolderLink(folderUID);\n      if (isGroupView) {\n        actionIcons.push(\n          <ActionIcon\n            aria-label={t('alerting.rule-group-action.details', 'rule group details')}\n            key=\"rule-group-details\"\n            icon=\"info-circle\"\n            tooltip={t('alerting.rule-group-action.details', 'rule group details')}\n            to={groups.detailsPageLink('grafana', folderUID, group.name, { includeReturnTo: true })}\n          />\n        );\n        if (folder?.canSave && canEditGroup) {\n          actionIcons.push(\n            <ActionIcon\n              aria-label={t('alerting.rule-group-action.edit', 'edit rule group')}\n              key=\"rule-group-edit\"\n              icon=\"pen\"\n              tooltip={t('alerting.rule-group-action.edit', 'edit rule group')}\n              to={groups.editPageLink('grafana', folderUID, group.name, { includeReturnTo: true })}\n            />\n          );\n        }\n      }\n      if (folder?.canSave) {\n        if (isListView) {\n          actionIcons.push(\n            <ActionIcon\n              aria-label={t('alerting.rule-group-action.go-to-folder', 'go to folder')}\n              key=\"goto\"\n              icon=\"folder-open\"\n              tooltip={t('alerting.rule-group-action.go-to-folder', 'go to folder')}\n              to={baseUrl}\n              target=\"__blank\"\n            />\n          );\n\n          if (folder?.canAdmin) {\n            actionIcons.push(\n              <ActionIcon\n                aria-label={t('alerting.rule-group-action.manage-permissions', 'manage permissions')}\n                key=\"manage-perms\"\n                icon=\"lock\"\n                tooltip={t('alerting.rule-group-action.manage-permissions', 'manage permissions')}\n                to={baseUrl + '/permissions'}\n                target=\"__blank\"\n              />\n            );\n          }\n        }\n      }\n      if (folder) {\n        if (isListView) {\n          actionIcons.push(\n            <ActionIcon\n              aria-label={t('alerting.rule-group-action.export-rules-folder', 'Export rules folder')}\n              data-testid=\"export-folder\"\n              key=\"export-folder\"\n              icon=\"download-alt\"\n              tooltip={t('alerting.rule-group-action.export-rules-folder', 'Export rules folder')}\n              onClick={() => setIsExporting('folder')}\n            />\n          );\n        }\n      }\n    }\n  } else {\n    actionIcons.push(\n      <ActionIcon\n        aria-label={t('alerting.rule-group-action.details', 'rule group details')}\n        key=\"rule-group-details\"\n        icon=\"info-circle\"\n        tooltip={t('alerting.rule-group-action.details', 'rule group details')}\n        to={groups.detailsPageLink(rulesSource.uid, namespace.name, group.name, { includeReturnTo: true })}\n      />\n    );\n    if (canEditGroup) {\n      actionIcons.push(\n        <ActionIcon\n          aria-label={t('alerting.rule-group-action.edit', 'edit rule group')}\n          key=\"rule-group-edit\"\n          icon=\"pen\"\n          tooltip={t('alerting.rule-group-action.edit', 'edit rule group')}\n          to={groups.editPageLink(rulesSource.uid, namespace.name, group.name, { includeReturnTo: true })}\n        />\n      );\n    }\n  }\n\n  // ungrouped rules are rules that are in the \"default\" group name\n  const groupName = isListView ? (\n    <RuleLocation namespace={decodeGrafanaNamespace(namespace).name} />\n  ) : (\n    <RuleLocation namespace={decodeGrafanaNamespace(namespace).name} group={group.name} />\n  );\n\n  return (\n    <div className={styles.wrapper} data-testid=\"rule-group\">\n      <div className={styles.header} data-testid=\"rule-group-header\">\n        <CollapseToggle\n          size=\"sm\"\n          className={styles.collapseToggle}\n          isCollapsed={isCollapsed}\n          onToggle={setIsCollapsed}\n          data-testid={selectors.components.AlertRules.groupToggle}\n        />\n        <FolderIcon isCollapsed={isCollapsed} />\n        <CloudSourceLogo rulesSource={rulesSource} />\n        {\n          // eslint-disable-next-line\n          <div className={styles.groupName} onClick={() => setIsCollapsed(!isCollapsed)}>\n            {isFederated && <Badge color=\"purple\" text={t('alerting.rules-group.text-federated', 'Federated')} />}{' '}\n            {groupName}\n          </div>\n        }\n        <div className={styles.spacer} />\n        <div className={styles.headerStats}>\n          <RuleGroupStats group={group} />\n        </div>\n        {isProvisioned && (\n          <>\n            <div className={styles.actionsSeparator}>|</div>\n            <div className={styles.actionIcons}>\n              <Badge color=\"purple\" text={t('alerting.rules-group.text-provisioned', 'Provisioned')} />\n            </div>\n          </>\n        )}\n        {!!actionIcons.length && (\n          <>\n            <div className={styles.actionsSeparator}>|</div>\n            <div className={styles.actionIcons}>\n              <Stack gap={0.5}>{actionIcons}</Stack>\n            </div>\n          </>\n        )}\n      </div>\n      {!isCollapsed && (\n        <RulesTable\n          showSummaryColumn={true}\n          className={styles.rulesTable}\n          showGuidelines={true}\n          showNextEvaluationColumn={Boolean(group.interval)}\n          rules={group.rules}\n        />\n      )}\n      {folder && isExporting === 'folder' && (\n        <GrafanaRuleFolderExporter folder={folder} onClose={() => setIsExporting(undefined)} />\n      )}\n    </div>\n  );\n});\n\nRulesGroup.displayName = 'RulesGroup';\n\n// It's a simple component but we render 80 of them on the list page it needs to be fast\n// The Tooltip component is expensive to render and the rulesSource doesn't change often\n// so memoization seems to bring a lot of benefit here\nconst CloudSourceLogo = React.memo(({ rulesSource }: { rulesSource: RulesSource | string }) => {\n  const styles = useStyles2(getStyles);\n\n  if (isCloudRulesSource(rulesSource)) {\n    return (\n      <Tooltip content={rulesSource.name} placement=\"top\">\n        <img alt={rulesSource.meta.name} className={styles.dataSourceIcon} src={rulesSource.meta.info.logos.small} />\n      </Tooltip>\n    );\n  }\n\n  return null;\n});\n\nCloudSourceLogo.displayName = 'CloudSourceLogo';\n\n// We render a lot of these on the list page, and the Icon component does quite a bit of work\n// to render its contents\nconst FolderIcon = React.memo(({ isCollapsed }: { isCollapsed: boolean }) => {\n  return <Icon name={isCollapsed ? 'folder' : 'folder-open'} />;\n});\n\nFolderIcon.displayName = 'FolderIcon';\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css({}),\n    header: css({\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      padding: `${theme.spacing(1)} ${theme.spacing(1)} ${theme.spacing(1)} 0`,\n      flexWrap: 'nowrap',\n      borderBottom: `1px solid ${theme.colors.border.weak}`,\n\n      '&:hover': {\n        backgroundColor: theme.components.table.rowHoverBackground,\n      },\n    }),\n    headerStats: css({\n      flexShrink: 0,\n\n      span: {\n        verticalAlign: 'middle',\n      },\n\n      [theme.breakpoints.down('sm')]: {\n        order: 2,\n        width: '100%',\n        paddingLeft: theme.spacing(1),\n      },\n    }),\n    groupName: css({\n      marginLeft: theme.spacing(1),\n      marginBottom: 0,\n      cursor: 'pointer',\n\n      whiteSpace: 'nowrap',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n    }),\n    spacer: css({\n      flex: 1,\n    }),\n    collapseToggle: css({\n      background: 'none',\n      border: 'none',\n      marginTop: `-${theme.spacing(1)}`,\n      marginBottom: `-${theme.spacing(1)}`,\n\n      svg: {\n        marginBottom: 0,\n      },\n    }),\n    dataSourceIcon: css({\n      width: theme.spacing(2),\n      height: theme.spacing(2),\n      marginLeft: theme.spacing(2),\n    }),\n    dataSourceOrigin: css({\n      marginRight: '1em',\n      color: theme.colors.text.disabled,\n    }),\n    actionsSeparator: css({\n      margin: `0 ${theme.spacing(2)}`,\n    }),\n    actionIcons: css({\n      width: '80px',\n      alignItems: 'center',\n\n      flexShrink: 0,\n    }),\n    rulesTable: css({\n      margin: theme.spacing(2, 0),\n    }),\n    rotate90: css({\n      transform: 'rotate(90deg)',\n    }),\n  };\n};\n","import { useMemo } from 'react';\n\nimport { CombinedRuleNamespace } from '../../../../../types/unified-alerting';\n\nexport function useCombinedGroupNamespace(namespaces: CombinedRuleNamespace[]) {\n  return useMemo(\n    () =>\n      namespaces.flatMap((ns) =>\n        ns.groups.map((g) => ({\n          namespace: ns,\n          group: g,\n        }))\n      ),\n    [namespaces]\n  );\n}\n","import { css } from '@emotion/css';\nimport { useMemo } from 'react';\nimport { useLocation } from 'react-router-dom-v5-compat';\n\nimport { GrafanaTheme2, urlUtil } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Badge, LinkButton, LoadingPlaceholder, Pagination, Spinner, Stack, Text, useStyles2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { DEFAULT_PER_PAGE_PAGINATION } from '../../../../../core/constants';\nimport { AlertingAction, useAlertingAbility } from '../../hooks/useAbilities';\nimport { usePagination } from '../../hooks/usePagination';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { getPaginationStyles } from '../../styles/pagination';\nimport { getRulesDataSources, getRulesSourceUid } from '../../utils/datasource';\nimport { isAsyncRequestStatePending } from '../../utils/redux';\nimport { createRelativeUrl } from '../../utils/url';\n\nimport { RulesGroup } from './RulesGroup';\nimport { useCombinedGroupNamespace } from './useCombinedGroupNamespace';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll: boolean;\n}\n\nexport const CloudRules = ({ namespaces, expandAll }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const promRules = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulesDataSources = useMemo(getRulesDataSources, []);\n  const groupsWithNamespaces = useCombinedGroupNamespace(namespaces);\n\n  const dataSourcesLoading = useMemo(\n    () => rulesDataSources.filter((ds) => isAsyncRequestStatePending(promRules[ds.name])),\n    [promRules, rulesDataSources]\n  );\n\n  const hasSomeResults = rulesDataSources.some((ds) => Boolean(promRules[ds.name]?.result?.length));\n  const hasDataSourcesConfigured = rulesDataSources.length > 0;\n  const hasDataSourcesLoading = dataSourcesLoading.length > 0;\n  const hasNamespaces = namespaces.length > 0;\n\n  const { numberOfPages, onPageChange, page, pageItems } = usePagination(\n    groupsWithNamespaces,\n    1,\n    DEFAULT_PER_PAGE_PAGINATION\n  );\n\n  const [createRuleSupported, createRuleAllowed] = useAlertingAbility(AlertingAction.CreateAlertRule);\n  const [viewExternalRuleSupported, viewExternalRuleAllowed] = useAlertingAbility(AlertingAction.ViewExternalAlertRule);\n\n  const canViewCloudRules = viewExternalRuleSupported && viewExternalRuleAllowed;\n  const canCreateGrafanaRules = createRuleSupported && createRuleAllowed;\n  const canMigrateToGMA =\n    hasDataSourcesConfigured && canCreateGrafanaRules && canViewCloudRules && config.featureToggles.alertingMigrationUI;\n\n  return (\n    <section className={styles.wrapper}>\n      <Stack gap={2} direction=\"column\">\n        <div className={styles.sectionHeader}>\n          <div className={styles.headerRow}>\n            <Text element=\"h2\" variant=\"h5\">\n              <Trans i18nKey=\"alerting.list-view.section.dataSourceManaged.title\">Data source-managed</Trans>\n            </Text>\n            {dataSourcesLoading.length ? (\n              <LoadingPlaceholder\n                className={styles.loader}\n                text={t('alerting.list-view.section.loading-rules', 'Loading rules from {{count}} sources', {\n                  count: dataSourcesLoading.length,\n                })}\n              />\n            ) : (\n              <div />\n            )}\n            <Stack gap={1}>\n              {canMigrateToGMA && <MigrateToGMAButton />}\n              <CreateRecordingRuleButton />\n            </Stack>\n          </div>\n        </div>\n      </Stack>\n\n      {pageItems.map(({ group, namespace }) => (\n        <RulesGroup\n          group={group}\n          key={`${getRulesSourceUid(namespace.rulesSource)}-${namespace.name}-${group.name}`}\n          namespace={namespace}\n          expandAll={expandAll}\n          viewMode={'grouped'}\n        />\n      ))}\n\n      {!hasDataSourcesConfigured && (\n        <p>\n          <Trans i18nKey=\"alerting.list-view.no-prom-or-loki-rules\">\n            There are no Prometheus or Loki data sources configured\n          </Trans>\n        </p>\n      )}\n      {hasDataSourcesConfigured && !hasDataSourcesLoading && !hasNamespaces && (\n        <p>\n          <Trans i18nKey=\"alerting.list-view.no-rules\">No rules found.</Trans>\n        </p>\n      )}\n      {!hasSomeResults && hasDataSourcesLoading && <Spinner size=\"xl\" className={styles.spinner} />}\n\n      <Pagination\n        className={styles.pagination}\n        currentPage={page}\n        numberOfPages={numberOfPages}\n        onNavigate={onPageChange}\n        hideWhenSinglePage\n      />\n    </section>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  loader: css({\n    marginBottom: 0,\n  }),\n  sectionHeader: css({\n    display: 'flex',\n    justifyContent: 'space-between',\n  }),\n  wrapper: css({\n    marginBottom: theme.spacing(4),\n  }),\n  spinner: css({\n    textAlign: 'center',\n    padding: theme.spacing(2),\n  }),\n  pagination: getPaginationStyles(theme),\n  headerRow: css({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    width: '100%',\n    marginBottom: theme.spacing(1),\n  }),\n});\n\nexport function CreateRecordingRuleButton() {\n  const [createCloudRuleSupported, createCloudRuleAllowed] = useAlertingAbility(AlertingAction.CreateExternalAlertRule);\n  const location = useLocation();\n\n  const canCreateCloudRules = createCloudRuleSupported && createCloudRuleAllowed;\n\n  if (canCreateCloudRules) {\n    return (\n      <LinkButton\n        key=\"new-recording-rule\"\n        href={urlUtil.renderUrl(`alerting/new/recording`, {\n          returnTo: location.pathname + location.search,\n        })}\n        icon=\"plus\"\n        variant=\"secondary\"\n      >\n        <Trans i18nKey=\"alerting.list-view.empty.new-ds-managed-recording-rule\">\n          New data source-managed recording rule\n        </Trans>\n      </LinkButton>\n    );\n  }\n  return null;\n}\n\nfunction MigrateToGMAButton() {\n  const importUrl = createRelativeUrl('/alerting/import-datasource-managed-rules');\n  return (\n    <LinkButton variant=\"secondary\" href={importUrl} icon=\"arrow-up\">\n      <Stack direction=\"row\" gap={1} alignItems=\"center\">\n        <Trans i18nKey=\"alerting.rule-list.import-to-gma.text\">Import to Grafana-managed rules</Trans>\n        <Badge\n          text={t('alerting.rule-list.import-to-gma.new-badge', 'New!')}\n          aria-label={t('alerting.migrate-to-gmabutton.aria-label-new', 'new')}\n          color=\"blue\"\n          icon=\"rocket\"\n        />\n      </Stack>\n    </LinkButton>\n  );\n}\n","import { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { ExportFormats, allGrafanaExportProviders } from './providers';\n\ninterface GrafanaRulesExporterProps {\n  onClose: () => void;\n}\n\nexport function GrafanaRulesExporter({ onClose }: GrafanaRulesExporterProps) {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n\n  return (\n    <GrafanaExportDrawer\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      <GrafanaRulesExportPreview exportFormat={activeTab} onClose={onClose} />\n    </GrafanaExportDrawer>\n  );\n}\n\ninterface GrafanaRulesExportPreviewProps {\n  exportFormat: ExportFormats;\n  onClose: () => void;\n}\n\nfunction GrafanaRulesExportPreview({ exportFormat, onClose }: GrafanaRulesExportPreviewProps) {\n  const { currentData: rulesDefinition = '', isFetching } = alertRuleApi.endpoints.exportRules.useQuery({\n    format: exportFormat,\n  });\n\n  const downloadFileName = `alert-rules-${new Date().getTime()}`;\n\n  if (isFetching) {\n    return <LoadingPlaceholder text={t('alerting.grafana-rules-export-preview.text-loading', 'Loading....')} />;\n  }\n\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={rulesDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n}\n","import { css } from '@emotion/css';\nimport { useToggle } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, LinkButton, LoadingPlaceholder, Pagination, Spinner, Stack, Text, useStyles2 } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { Trans, t } from 'app/core/internationalization';\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { DEFAULT_PER_PAGE_PAGINATION } from '../../../../../core/constants';\nimport { LogMessages, logInfo } from '../../Analytics';\nimport { useGrafanaManagedRecordingRulesSupport } from '../../featureToggles';\nimport { AlertingAction, useAlertingAbility } from '../../hooks/useAbilities';\nimport { flattenGrafanaManagedRules } from '../../hooks/useCombinedRuleNamespaces';\nimport { usePagination } from '../../hooks/usePagination';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { getPaginationStyles } from '../../styles/pagination';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { initialAsyncRequestState } from '../../utils/redux';\nimport { createRelativeUrl } from '../../utils/url';\nimport { GrafanaRulesExporter } from '../export/GrafanaRulesExporter';\n\nimport { RulesGroup } from './RulesGroup';\nimport { useCombinedGroupNamespace } from './useCombinedGroupNamespace';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll: boolean;\n}\n\nexport const GrafanaRules = ({ namespaces, expandAll }: Props) => {\n  const styles = useStyles2(getStyles);\n  const [queryParams] = useQueryParams();\n\n  const { prom, ruler } = useUnifiedAlertingSelector((state) => ({\n    prom: state.promRules[GRAFANA_RULES_SOURCE_NAME] || initialAsyncRequestState,\n    ruler: state.rulerRules[GRAFANA_RULES_SOURCE_NAME] || initialAsyncRequestState,\n  }));\n\n  const loading = prom.loading || ruler.loading;\n  const hasResult = !!prom.result || !!ruler.result;\n\n  const wantsListView = queryParams.view === 'list';\n  const namespacesFormat = wantsListView ? flattenGrafanaManagedRules(namespaces) : namespaces;\n\n  const groupsWithNamespaces = useCombinedGroupNamespace(namespacesFormat);\n\n  const { numberOfPages, onPageChange, page, pageItems } = usePagination(\n    groupsWithNamespaces,\n    1,\n    DEFAULT_PER_PAGE_PAGINATION\n  );\n\n  const [exportRulesSupported, exportRulesAllowed] = useAlertingAbility(AlertingAction.ExportGrafanaManagedRules);\n  const canExportRules = exportRulesSupported && exportRulesAllowed;\n\n  const [showExportDrawer, toggleShowExportDrawer] = useToggle(false);\n  const hasGrafanaAlerts = namespaces.length > 0;\n\n  const grafanaRecordingRulesEnabled = useGrafanaManagedRecordingRulesSupport();\n\n  return (\n    <section className={styles.wrapper}>\n      <div className={styles.sectionHeader}>\n        <div className={styles.headerRow}>\n          <Text element=\"h2\" variant=\"h5\">\n            <Trans i18nKey=\"alerting.list-view.section.grafanaManaged.title\">Grafana-managed</Trans>\n          </Text>\n          {loading ? (\n            <LoadingPlaceholder\n              className={styles.loader}\n              text={t('alerting.list-view.section.grafanaManaged.loading', 'Loading...')}\n            />\n          ) : (\n            <div />\n          )}\n          <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"flex-end\">\n            {hasGrafanaAlerts && canExportRules && (\n              <Button\n                aria-label={t(\n                  'alerting.grafana-rules.export-all-grafana-rules-aria-label-export-all-grafana-rules',\n                  'export all grafana rules'\n                )}\n                data-testid=\"export-all-grafana-rules\"\n                icon=\"download-alt\"\n                tooltip={t(\n                  'alerting.grafana-rules.export-all-grafana-rules-tooltip-export-all-grafanamanaged-rules',\n                  'Export all Grafana-managed rules'\n                )}\n                onClick={toggleShowExportDrawer}\n                variant=\"secondary\"\n              >\n                <Trans i18nKey=\"alerting.list-view.section.grafanaManaged.export-rules\">Export rules</Trans>\n              </Button>\n            )}\n            {grafanaRecordingRulesEnabled && (\n              <LinkButton\n                href={createRelativeUrl('/alerting/new/grafana-recording', {\n                  returnTo: '/alerting/list' + location.search,\n                })}\n                icon=\"plus\"\n                variant=\"secondary\"\n                tooltip={t(\n                  'alerting.grafana-rules.tooltip-create-new-grafanamanaged-recording-rule',\n                  'Create new Grafana-managed recording rule'\n                )}\n                onClick={() => logInfo(LogMessages.grafanaRecording)}\n              >\n                <Trans i18nKey=\"alerting.list-view.section.grafanaManaged.new-recording-rule\">New recording rule</Trans>\n              </LinkButton>\n            )}\n          </Stack>\n        </div>\n      </div>\n\n      {pageItems.map(({ group, namespace }) => (\n        <RulesGroup\n          group={group}\n          key={`${namespace.name}-${group.name}`}\n          namespace={namespace}\n          expandAll={expandAll}\n          viewMode={wantsListView ? 'list' : 'grouped'}\n        />\n      ))}\n      {hasResult && namespacesFormat?.length === 0 && (\n        <p>\n          <Trans i18nKey=\"alerting.grafana-rules.no-rules-found\">No rules found.</Trans>\n        </p>\n      )}\n      {!hasResult && loading && <Spinner size=\"xl\" className={styles.spinner} />}\n      <Pagination\n        className={styles.pagination}\n        currentPage={page}\n        numberOfPages={numberOfPages}\n        onNavigate={onPageChange}\n        hideWhenSinglePage\n      />\n      {canExportRules && showExportDrawer && <GrafanaRulesExporter onClose={toggleShowExportDrawer} />}\n    </section>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  loader: css({\n    marginBottom: 0,\n  }),\n  sectionHeader: css({\n    display: 'flex',\n    justifyContent: 'space-between',\n    marginBottom: theme.spacing(1),\n  }),\n  wrapper: css({\n    marginBottom: theme.spacing(4),\n  }),\n  spinner: css({\n    textAlign: 'center',\n    padding: theme.spacing(2),\n  }),\n  pagination: getPaginationStyles(theme),\n  headerRow: css({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    width: '100%',\n    flexDirection: 'row',\n  }),\n});\n","import { useEffect, useMemo } from 'react';\n\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { LogMessages, logInfo } from '../../Analytics';\nimport { AlertingAction } from '../../hooks/useAbilities';\nimport { isCloudRulesSource, isGrafanaRulesSource } from '../../utils/datasource';\nimport { Authorize } from '../Authorize';\n\nimport { CloudRules } from './CloudRules';\nimport { GrafanaRules } from './GrafanaRules';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll: boolean;\n}\n\nexport const RuleListGroupView = ({ namespaces, expandAll }: Props) => {\n  const [grafanaNamespaces, cloudNamespaces] = useMemo(() => {\n    const sorted = namespaces\n      .map((namespace) => ({\n        ...namespace,\n        groups: namespace.groups.sort((a, b) => a.name.localeCompare(b.name)),\n      }))\n      .sort((a, b) => a.name.localeCompare(b.name));\n    return [\n      sorted.filter((ns) => isGrafanaRulesSource(ns.rulesSource)),\n      sorted.filter((ns) => isCloudRulesSource(ns.rulesSource)),\n    ];\n  }, [namespaces]);\n\n  useEffect(() => {\n    logInfo(LogMessages.loadedList);\n  }, []);\n\n  return (\n    <>\n      <Authorize actions={[AlertingAction.ViewAlertRule]}>\n        <GrafanaRules namespaces={grafanaNamespaces} expandAll={expandAll} />\n      </Authorize>\n      <Authorize actions={[AlertingAction.ViewExternalAlertRule]}>\n        <CloudRules namespaces={cloudNamespaces} expandAll={expandAll} />\n      </Authorize>\n    </>\n  );\n};\n","import { useMemo } from 'react';\nimport { useMeasure } from 'react-use';\n\nimport { Counter, LoadingBar, Pagination, Stack } from '@grafana/ui';\nimport { DEFAULT_PER_PAGE_PAGINATION } from 'app/core/constants';\nimport { CombinedRule, CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\n\nimport { usePagination } from '../../hooks/usePagination';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { AlertRuleListItem } from '../../rule-list/components/AlertRuleListItem';\nimport { ListSection } from '../../rule-list/components/ListSection';\nimport { GRAFANA_RULES_SOURCE_NAME, getRulesDataSources } from '../../utils/datasource';\nimport { createViewLink } from '../../utils/misc';\nimport { isAsyncRequestStatePending } from '../../utils/redux';\nimport { hashRule } from '../../utils/rule-id';\nimport { getRulePluginOrigin, isProvisionedRule, prometheusRuleType } from '../../utils/rules';\nimport { calculateTotalInstances } from '../rule-viewer/RuleViewer';\n\nimport { RuleActionsButtons } from './RuleActionsButtons';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n}\n\ntype GroupedRules = Map<PromAlertingRuleState, CombinedRule[]>;\n\nexport const RuleListStateView = ({ namespaces }: Props) => {\n  const [ref, { width }] = useMeasure<HTMLUListElement>();\n\n  const isLoading = useDataSourcesLoadingState();\n\n  const groupedRules = useMemo(() => {\n    const result: GroupedRules = new Map([\n      [PromAlertingRuleState.Firing, []],\n      [PromAlertingRuleState.Pending, []],\n      [PromAlertingRuleState.Recovering, []],\n      [PromAlertingRuleState.Inactive, []],\n    ]);\n\n    namespaces.forEach((namespace) =>\n      namespace.groups.forEach((group) =>\n        group.rules.forEach((rule) => {\n          // We might hit edge cases where there type = alerting, but there is no state.\n          // In this case, we shouldn't try to group these alerts in the state view\n          // Even though we handle this at the API layer, this is a last catch point for any edge cases\n          if (prometheusRuleType.alertingRule(rule.promRule) && rule.promRule.state) {\n            result.get(rule.promRule.state)?.push(rule);\n          }\n        })\n      )\n    );\n\n    result.forEach((rules) => rules.sort((a, b) => a.name.localeCompare(b.name)));\n\n    return result;\n  }, [namespaces]);\n\n  const entries = groupedRules.entries();\n\n  return (\n    <ul role=\"tree\" ref={ref}>\n      {isLoading && <LoadingBar width={width} />}\n      <Stack direction=\"column\">\n        {Array.from(entries).map(([state, rules]) => (\n          <RulesByState key={state} state={state} rules={rules} />\n        ))}\n      </Stack>\n    </ul>\n  );\n};\n\nconst STATE_TITLES: Record<PromAlertingRuleState, string> = {\n  [PromAlertingRuleState.Firing]: 'Firing',\n  [PromAlertingRuleState.Pending]: 'Pending',\n  [PromAlertingRuleState.Inactive]: 'Normal',\n  [PromAlertingRuleState.Recovering]: 'Recovering',\n};\n\nconst RulesByState = ({ state, rules }: { state: PromAlertingRuleState; rules: CombinedRule[] }) => {\n  const { page, pageItems, numberOfPages, onPageChange } = usePagination(rules, 1, DEFAULT_PER_PAGE_PAGINATION);\n\n  const isFiringState = state !== PromAlertingRuleState.Firing;\n  const hasRulesMatchingState = rules.length > 0;\n\n  return (\n    <ListSection\n      title={\n        <Stack alignItems=\"center\" gap={0}>\n          {STATE_TITLES[state] ?? 'Unknown'}\n          <Counter value={rules.length} />\n        </Stack>\n      }\n      collapsed={isFiringState || hasRulesMatchingState}\n      pagination={\n        <Pagination\n          currentPage={page}\n          numberOfPages={numberOfPages}\n          onNavigate={onPageChange}\n          hideWhenSinglePage={true}\n        />\n      }\n    >\n      {pageItems.map((rule) => {\n        const { rulerRule, promRule } = rule;\n\n        const isProvisioned = rulerRule ? isProvisionedRule(rulerRule) : false;\n        const instancesCount = prometheusRuleType.alertingRule(rule.promRule)\n          ? calculateTotalInstances(rule.instanceTotals)\n          : undefined;\n\n        if (!promRule) {\n          return null;\n        }\n\n        const originMeta = getRulePluginOrigin(rule.promRule);\n\n        return (\n          <AlertRuleListItem\n            key={hashRule(promRule)}\n            name={rule.name}\n            href={createViewLink(rule.namespace.rulesSource, rule)}\n            summary={rule.annotations.summary}\n            state={state}\n            health={rule.promRule?.health}\n            error={rule.promRule?.lastError}\n            labels={rule.promRule?.labels}\n            isProvisioned={isProvisioned}\n            instancesCount={instancesCount}\n            namespace={rule.namespace.name}\n            group={rule.group.name}\n            actions={<RuleActionsButtons compact rule={rule} rulesSource={rule.namespace.rulesSource} />}\n            origin={originMeta}\n          />\n        );\n      })}\n    </ListSection>\n  );\n};\n\nfunction useDataSourcesLoadingState() {\n  const promRules = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulesDataSources = useMemo(getRulesDataSources, []);\n\n  const grafanaLoading = useUnifiedAlertingSelector((state) => {\n    const promLoading = isAsyncRequestStatePending(state.promRules[GRAFANA_RULES_SOURCE_NAME]);\n    const rulerLoading = isAsyncRequestStatePending(state.rulerRules[GRAFANA_RULES_SOURCE_NAME]);\n\n    return promLoading || rulerLoading;\n  });\n\n  const externalDataSourcesLoading = rulesDataSources.some((ds) => isAsyncRequestStatePending(promRules[ds.name]));\n\n  const loading = grafanaLoading || externalDataSourcesLoading;\n\n  return loading;\n}\n","import { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useLocation } from 'react-router-dom-v5-compat';\nimport { useAsyncFn, useInterval } from 'react-use';\n\nimport { urlUtil } from '@grafana/data';\nimport { logInfo } from '@grafana/runtime';\nimport { Button, LinkButton, Stack } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { Trans, t } from 'app/core/internationalization';\nimport { useDispatch } from 'app/types';\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { LogMessages, trackRuleListNavigation } from '../Analytics';\nimport { AlertingPageWrapper } from '../components/AlertingPageWrapper';\nimport RulesFilter from '../components/rules/Filter/RulesFilter.v1';\nimport { NoRulesSplash } from '../components/rules/NoRulesCTA';\nimport { INSTANCES_DISPLAY_LIMIT } from '../components/rules/RuleDetails';\nimport { RuleListErrors } from '../components/rules/RuleListErrors';\nimport { RuleListGroupView } from '../components/rules/RuleListGroupView';\nimport { RuleListStateView } from '../components/rules/RuleListStateView';\nimport { RuleStats } from '../components/rules/RuleStats';\nimport { shouldUsePrometheusRulesPrimary } from '../featureToggles';\nimport { AlertingAction, useAlertingAbility } from '../hooks/useAbilities';\nimport { useCombinedRuleNamespaces } from '../hooks/useCombinedRuleNamespaces';\nimport { useFilteredRules, useRulesFilter } from '../hooks/useFilteredRules';\nimport { useUnifiedAlertingSelector } from '../hooks/useUnifiedAlertingSelector';\nimport { fetchAllPromAndRulerRulesAction, fetchAllPromRulesAction, fetchRulerRulesAction } from '../state/actions';\nimport { RULE_LIST_POLL_INTERVAL_MS } from '../utils/constants';\nimport { GRAFANA_RULES_SOURCE_NAME, getAllRulesSourceNames } from '../utils/datasource';\nimport { createRelativeUrl } from '../utils/url';\n\nconst VIEWS = {\n  groups: RuleListGroupView,\n  state: RuleListStateView,\n};\n\n// make sure we ask for 1 more so we show the \"show x more\" button\nconst LIMIT_ALERTS = INSTANCES_DISPLAY_LIMIT + 1;\n\nconst prometheusRulesPrimary = shouldUsePrometheusRulesPrimary();\n\nconst RuleListV1 = () => {\n  const dispatch = useDispatch();\n  const rulesDataSourceNames = useMemo(getAllRulesSourceNames, []);\n  const [expandAll, setExpandAll] = useState(false);\n\n  const onFilterCleared = useCallback(() => setExpandAll(false), []);\n\n  const [queryParams] = useQueryParams();\n  const { filterState, hasActiveFilters } = useRulesFilter();\n\n  const hasActiveLabelsFilter = filterState.labels.length > 0;\n\n  const queryParamView = queryParams.view;\n  const viewType = queryParamView === 'state' || queryParamView === 'groups' ? queryParamView : 'groups';\n  const view = VIEWS[viewType] ? viewType : 'groups';\n\n  const ViewComponent = VIEWS[view];\n\n  const promRuleRequests = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n\n  const loading = rulesDataSourceNames.some(\n    (name) => promRuleRequests[name]?.loading || rulerRuleRequests[name]?.loading\n  );\n\n  const promRequests = Object.entries(promRuleRequests);\n  const rulerRequests = Object.entries(rulerRuleRequests);\n\n  const allPromLoaded = promRequests.every(\n    ([_, state]) => state.dispatched && (state?.result !== undefined || state?.error !== undefined)\n  );\n  const allRulerLoaded = rulerRequests.every(\n    ([_, state]) => state.dispatched && (state?.result !== undefined || state?.error !== undefined)\n  );\n\n  const allPromEmpty = promRequests.every(([_, state]) => state.dispatched && state?.result?.length === 0);\n\n  const allRulerEmpty = rulerRequests.every(([_, state]) => {\n    const rulerRules = Object.entries(state?.result ?? {});\n    const noRules = rulerRules.every(([_, result]) => result?.length === 0);\n    return noRules && state.dispatched;\n  });\n\n  const limitAlerts = hasActiveLabelsFilter ? undefined : LIMIT_ALERTS;\n  // Trigger data refresh only when the RULE_LIST_POLL_INTERVAL_MS elapsed since the previous load FINISHED\n  const [_, fetchRules] = useAsyncFn(async () => {\n    if (!loading) {\n      if (prometheusRulesPrimary) {\n        await dispatch(fetchRulerRulesAction({ rulesSourceName: GRAFANA_RULES_SOURCE_NAME }));\n        await dispatch(fetchAllPromRulesAction(false, { limitAlerts }));\n      } else {\n        await dispatch(fetchAllPromAndRulerRulesAction(false, { limitAlerts }));\n      }\n    }\n  }, [loading, limitAlerts, dispatch]);\n\n  useEffect(() => {\n    trackRuleListNavigation().catch(() => {});\n  }, []);\n\n  // fetch rules, then poll every RULE_LIST_POLL_INTERVAL_MS\n  useEffect(() => {\n    if (prometheusRulesPrimary) {\n      dispatch(fetchRulerRulesAction({ rulesSourceName: GRAFANA_RULES_SOURCE_NAME }));\n      dispatch(fetchAllPromRulesAction(false, { limitAlerts }));\n    } else {\n      dispatch(fetchAllPromAndRulerRulesAction(false, { limitAlerts }));\n    }\n  }, [dispatch, limitAlerts]);\n  useInterval(fetchRules, RULE_LIST_POLL_INTERVAL_MS);\n\n  // Show splash only when we loaded all of the data sources and none of them has alerts\n  const hasNoAlertRulesCreatedYet =\n    allPromLoaded && allPromEmpty && promRequests.length > 0 && allRulerEmpty && allRulerLoaded;\n  const hasAlertRulesCreated = !hasNoAlertRulesCreatedYet;\n\n  const combinedNamespaces: CombinedRuleNamespace[] = useCombinedRuleNamespaces();\n  const filteredNamespaces = useFilteredRules(combinedNamespaces, filterState);\n  return (\n    // We don't want to show the Loading... indicator for the whole page.\n    // We show separate indicators for Grafana-managed and Cloud rules\n    <AlertingPageWrapper\n      navId=\"alert-list\"\n      isLoading={false}\n      actions={\n        hasAlertRulesCreated && (\n          <Stack gap={1}>\n            <CreateAlertButton /> <ExportNewRuleButton />\n          </Stack>\n        )\n      }\n    >\n      <Stack direction=\"column\">\n        <RuleListErrors />\n        <RulesFilter onClear={onFilterCleared} />\n        {hasAlertRulesCreated && (\n          <Stack direction=\"row\" alignItems=\"center\">\n            {view === 'groups' && hasActiveFilters && (\n              <Button\n                icon={expandAll ? 'angle-double-up' : 'angle-double-down'}\n                variant=\"secondary\"\n                onClick={() => setExpandAll(!expandAll)}\n              >\n                {expandAll ? 'Collapse all' : 'Expand all'}\n              </Button>\n            )}\n          </Stack>\n        )}\n        <RuleStats namespaces={filteredNamespaces} />\n        {hasNoAlertRulesCreatedYet && <NoRulesSplash />}\n        {hasAlertRulesCreated && <ViewComponent expandAll={expandAll} namespaces={filteredNamespaces} />}\n      </Stack>\n    </AlertingPageWrapper>\n  );\n};\n\nexport default RuleListV1;\n\nexport function CreateAlertButton() {\n  const [createRuleSupported, createRuleAllowed] = useAlertingAbility(AlertingAction.CreateAlertRule);\n  const [createCloudRuleSupported, createCloudRuleAllowed] = useAlertingAbility(AlertingAction.CreateExternalAlertRule);\n\n  const location = useLocation();\n\n  const canCreateCloudRules = createCloudRuleSupported && createCloudRuleAllowed;\n\n  const canCreateGrafanaRules = createRuleSupported && createRuleAllowed;\n\n  if (canCreateGrafanaRules || canCreateCloudRules) {\n    return (\n      <LinkButton\n        href={urlUtil.renderUrl('alerting/new/alerting', { returnTo: location.pathname + location.search })}\n        icon=\"plus\"\n        onClick={() => logInfo(LogMessages.alertRuleFromScratch)}\n      >\n        <Trans i18nKey=\"alerting.rule-list.new-alert-rule\">New alert rule</Trans>\n      </LinkButton>\n    );\n  }\n  return null;\n}\n\nfunction ExportNewRuleButton() {\n  const returnTo = location.pathname + location.search;\n  const url = createRelativeUrl(`/alerting/export-new-rule`, {\n    returnTo,\n  });\n  return (\n    <LinkButton\n      href={url}\n      icon=\"download-alt\"\n      variant=\"secondary\"\n      tooltip={t('alerting.export-new-rule-button.tooltip-export-new-grafana-rule', 'Export new grafana rule')}\n      onClick={() => logInfo(LogMessages.exportNewGrafanaRule)}\n    >\n      <Trans i18nKey=\"alerting.list-view.section.grafanaManaged.export-new-rule\">Export rule definition</Trans>\n    </LinkButton>\n  );\n}\n","import { Suspense, lazy } from 'react';\n\nimport { config } from '@grafana/runtime';\n\nimport RuleListV1 from './rule-list/RuleList.v1';\nimport { withPageErrorBoundary } from './withPageErrorBoundary';\nconst RuleListV2 = lazy(() => import('./rule-list/RuleList.v2'));\n\nconst RuleList = () => {\n  const newView = config.featureToggles.alertingListViewV2;\n\n  return <Suspense>{newView ? <RuleListV2 /> : <RuleListV1 />}</Suspense>;\n};\n\nexport default withPageErrorBoundary(RuleList);\n","import { chain, filter } from 'lodash';\nimport { PropsWithChildren } from 'react';\n\nimport {\n  Abilities,\n  Action,\n  AlertingAction,\n  AlertmanagerAction,\n  useAlertingAbilities,\n  useAllAlertmanagerAbilities,\n} from '../hooks/useAbilities';\n\ninterface AuthorizeProps extends PropsWithChildren {\n  actions: AlertmanagerAction[] | AlertingAction[];\n}\n\nexport const Authorize = ({ actions, children }: AuthorizeProps) => {\n  const alertmanagerActions = filter(actions, isAlertmanagerAction) as AlertmanagerAction[];\n  const alertSourceActions = filter(actions, isAlertingAction) as AlertingAction[];\n\n  if (alertmanagerActions.length) {\n    return <AuthorizeAlertmanager actions={alertmanagerActions}>{children}</AuthorizeAlertmanager>;\n  }\n\n  if (alertSourceActions.length) {\n    return <AuthorizeAlertsource actions={alertSourceActions}>{children}</AuthorizeAlertsource>;\n  }\n\n  return null;\n};\n\ninterface ActionsProps<T extends Action> extends PropsWithChildren {\n  actions: T[];\n}\n\nconst AuthorizeAlertmanager = ({ actions, children }: ActionsProps<AlertmanagerAction>) => {\n  const alertmanagerAbilties = useAllAlertmanagerAbilities();\n  const allowed = actionsAllowed(alertmanagerAbilties, actions);\n\n  if (allowed) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n\nconst AuthorizeAlertsource = ({ actions, children }: ActionsProps<AlertingAction>) => {\n  const alertSourceAbilities = useAlertingAbilities();\n  const allowed = actionsAllowed(alertSourceAbilities, actions);\n\n  if (allowed) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n\n// TODO add some authorize helper components for alert source and individual alert rules\n\n// check if some action is allowed from the abilities\nfunction actionsAllowed<T extends Action>(abilities: Abilities<T>, actions: T[]) {\n  return chain(abilities)\n    .pick(actions)\n    .values()\n    .value()\n    .some(([_supported, allowed]) => allowed === true);\n}\n\nfunction isAlertmanagerAction(action: AlertmanagerAction) {\n  return Object.values(AlertmanagerAction).includes(action);\n}\n\nfunction isAlertingAction(action: AlertingAction) {\n  return Object.values(AlertingAction).includes(action);\n}\n","import { css, cx, keyframes } from '@emotion/css';\nimport { useEffect, useMemo, useState } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Alert, IconButton, Select, SelectCommonProps, Stack, Text, useStyles2 } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\nimport { ContactPointReceiverSummary } from 'app/features/alerting/unified/components/contact-points/ContactPoint';\nimport { useAlertmanager } from 'app/features/alerting/unified/state/AlertmanagerContext';\n\nimport { useContactPointsWithStatus } from '../contact-points/useContactPoints';\nimport { ContactPointWithMetadata } from '../contact-points/utils';\n\nconst MAX_CONTACT_POINTS_RENDERED = 500;\n\n// Mock sleep method, as fetching receivers is very fast and may seem like it hasn't occurred\nconst sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\nconst LOADING_SPINNER_DURATION = 1000;\n\ntype ContactPointSelectorProps = {\n  selectProps: SelectCommonProps<ContactPointWithMetadata>;\n  showRefreshButton?: boolean;\n  /** Name of a contact point to optionally find and set as the preset value on the dropdown */\n  selectedContactPointName?: string | null;\n  onError?: (error: Error) => void;\n};\n\nexport const ContactPointSelector = ({\n  selectProps,\n  showRefreshButton,\n  selectedContactPointName,\n  onError = () => {},\n}: ContactPointSelectorProps) => {\n  const { selectedAlertmanager } = useAlertmanager();\n  const { contactPoints, isLoading, error, refetch } = useContactPointsWithStatus({\n    alertmanager: selectedAlertmanager!,\n  });\n  const [loaderSpinning, setLoaderSpinning] = useState(false);\n  const styles = useStyles2(getStyles);\n\n  const options: Array<SelectableValue<ContactPointWithMetadata>> = contactPoints.map((contactPoint) => {\n    return {\n      label: contactPoint.name,\n      value: contactPoint,\n      component: () => (\n        <Text variant=\"bodySmall\" color=\"secondary\">\n          <ContactPointReceiverSummary receivers={contactPoint.grafana_managed_receiver_configs} limit={2} />\n        </Text>\n      ),\n    };\n  });\n\n  const matchedContactPoint: SelectableValue<ContactPointWithMetadata> | null = useMemo(() => {\n    return options.find((option) => option.value?.name === selectedContactPointName) || null;\n  }, [options, selectedContactPointName]);\n\n  // force some minimum wait period for fetching contact points\n  const onClickRefresh = () => {\n    setLoaderSpinning(true);\n    Promise.all([refetch(), sleep(LOADING_SPINNER_DURATION)]).finally(() => {\n      setLoaderSpinning(false);\n    });\n  };\n\n  useEffect(() => {\n    // If the contact points are fetched successfully and the selected contact point is not in the list, show an error\n    if (!isLoading && selectedContactPointName && !matchedContactPoint) {\n      onError(new Error(`Contact point \"${selectedContactPointName}\" could not be found`));\n    }\n  }, [isLoading, matchedContactPoint, onError, selectedContactPointName]);\n\n  // TODO error handling\n  if (error) {\n    return (\n      <Alert\n        title={t(\n          'alerting.contact-point-selector.title-failed-to-fetch-contact-points',\n          'Failed to fetch contact points'\n        )}\n        severity=\"error\"\n      />\n    );\n  }\n\n  return (\n    <Stack>\n      <Select\n        virtualized={options.length > MAX_CONTACT_POINTS_RENDERED}\n        options={options}\n        value={matchedContactPoint}\n        {...selectProps}\n        isLoading={isLoading}\n        disabled={isLoading}\n      />\n      {showRefreshButton && (\n        <IconButton\n          name=\"sync\"\n          onClick={onClickRefresh}\n          aria-label={t('alerting.contact-point-selector.aria-label-refresh-contact-points', 'Refresh contact points')}\n          tooltip={t(\n            'alerting.contact-point-selector.tooltip-refresh-contact-points-list',\n            'Refresh contact points list'\n          )}\n          className={cx(styles.refreshButton, {\n            [styles.loading]: loaderSpinning || isLoading,\n          })}\n        />\n      )}\n    </Stack>\n  );\n};\n\nconst rotation = keyframes({\n  from: {\n    transform: 'rotate(0deg)',\n  },\n  to: {\n    transform: 'rotate(720deg)',\n  },\n});\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  refreshButton: css({\n    color: theme.colors.text.secondary,\n    cursor: 'pointer',\n    borderRadius: theme.shape.radius.circle,\n    overflow: 'hidden',\n  }),\n  loading: css({\n    pointerEvents: 'none',\n    [theme.transitions.handleMotion('no-preference')]: {\n      animation: `${rotation} 2s infinite linear`,\n    },\n    [theme.transitions.handleMotion('reduce')]: {\n      animation: `${rotation} 6s infinite linear`,\n    },\n  }),\n});\n","import { ComponentProps } from 'react';\n\nimport { Button, IconName, LinkButton, Tooltip } from '@grafana/ui';\n\ntype TooltipProps = ComponentProps<typeof Tooltip>;\n\ninterface Props {\n  tooltip: TooltipProps['content'];\n  icon: IconName;\n  className?: string;\n  tooltipPlacement?: TooltipProps['placement'];\n  to?: string;\n  target?: string;\n  onClick?: () => void;\n  'data-testid'?: string;\n}\n\nexport const ActionIcon = ({\n  tooltip,\n  icon,\n  to,\n  target,\n  onClick,\n  className,\n  tooltipPlacement = 'top',\n  ...rest\n}: Props) => {\n  const ariaLabel = typeof tooltip === 'string' ? tooltip : undefined;\n\n  return (\n    <Tooltip content={tooltip} placement={tooltipPlacement}>\n      {to ? (\n        <LinkButton\n          variant=\"secondary\"\n          fill=\"text\"\n          icon={icon}\n          href={to}\n          size=\"sm\"\n          target={target}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      ) : (\n        <Button\n          className={className}\n          variant=\"secondary\"\n          fill=\"text\"\n          size=\"sm\"\n          icon={icon}\n          type=\"button\"\n          onClick={onClick}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      )}\n    </Tooltip>\n  );\n};\n","import { useState } from 'react';\nimport { PopValueActionMeta, RemoveValueActionMeta } from 'react-select';\n\nimport {\n  DataSourceInstanceSettings,\n  SelectableValue,\n  getDataSourceUID,\n  isUnsignedPluginSignature,\n} from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { DataSourcePickerProps, DataSourcePickerState, getDataSourceSrv } from '@grafana/runtime';\nimport { ExpressionDatasourceRef } from '@grafana/runtime/internal';\nimport { ActionMeta, MultiSelect, PluginSignatureBadge, Stack } from '@grafana/ui';\n\nimport { isDataSourceManagingAlerts } from '../../utils/datasource';\n\nexport interface MultipleDataSourcePickerProps extends Omit<DataSourcePickerProps, 'onChange' | 'current'> {\n  onChange: (ds: DataSourceInstanceSettings, action: 'add' | 'remove') => void;\n  current: string[] | undefined;\n}\n\nexport const MultipleDataSourcePicker = (props: MultipleDataSourcePickerProps) => {\n  const dataSourceSrv = getDataSourceSrv();\n\n  const [state, setState] = useState<DataSourcePickerState>();\n\n  const onChange = (items: Array<SelectableValue<string>>, actionMeta: ActionMeta) => {\n    if (actionMeta.action === 'clear' && props.onClear) {\n      props.onClear();\n      return;\n    }\n\n    const selectedItem = items[items.length - 1];\n\n    let dataSourceName, action: 'add' | 'remove';\n\n    if (actionMeta.action === 'pop-value' || actionMeta.action === 'remove-value') {\n      const castedActionMeta:\n        | RemoveValueActionMeta<SelectableValue<string>>\n        | PopValueActionMeta<SelectableValue<string>> = actionMeta;\n      dataSourceName = castedActionMeta.removedValue?.value;\n      action = 'remove';\n    } else {\n      dataSourceName = selectedItem.value;\n      action = 'add';\n    }\n\n    const dsSettings = dataSourceSrv.getInstanceSettings(dataSourceName);\n\n    if (dsSettings) {\n      props.onChange(dsSettings, action);\n      setState({ error: undefined });\n    }\n  };\n\n  const getCurrentValue = (): Array<SelectableValue<string>> | undefined => {\n    const { current, hideTextValue, noDefault } = props;\n    if (!current && noDefault) {\n      return;\n    }\n\n    return current?.map((dataSourceName: string) => {\n      const ds = dataSourceSrv.getInstanceSettings(dataSourceName);\n      if (ds) {\n        return {\n          label: ds.name.slice(0, 37),\n          value: ds.name,\n          imgUrl: ds.meta.info.logos.small,\n          hideText: hideTextValue,\n          meta: ds.meta,\n        };\n      }\n\n      const uid = getDataSourceUID(dataSourceName);\n\n      if (uid === ExpressionDatasourceRef.uid || uid === ExpressionDatasourceRef.name) {\n        return { label: uid, value: uid, hideText: hideTextValue };\n      }\n\n      return {\n        label: (uid ?? 'no name') + ' - not found',\n        value: uid ?? undefined,\n        imgUrl: '',\n        hideText: hideTextValue,\n      };\n    });\n  };\n\n  const getDataSourceOptions = () => {\n    const { alerting, tracing, metrics, mixed, dashboard, variables, annotations, pluginId, type, filter, logs } =\n      props;\n\n    const dataSources = dataSourceSrv.getList({\n      alerting,\n      tracing,\n      metrics,\n      logs,\n      dashboard,\n      mixed,\n      variables,\n      annotations,\n      pluginId,\n      filter,\n      type,\n    });\n\n    const alertManagingDs = dataSources.filter(isDataSourceManagingAlerts).map((ds) => ({\n      value: ds.name,\n      label: `${ds.name}${ds.isDefault ? ' (default)' : ''}`,\n      imgUrl: ds.meta.info.logos.small,\n      meta: ds.meta,\n    }));\n\n    const nonAlertManagingDs = dataSources\n      .filter((ds) => !isDataSourceManagingAlerts(ds))\n      .map((ds) => ({\n        value: ds.name,\n        label: `${ds.name}${ds.isDefault ? ' (default)' : ''}`,\n        imgUrl: ds.meta.info.logos.small,\n        meta: ds.meta,\n      }));\n\n    const groupedOptions = [\n      { label: 'Data sources with configured alert rules', options: alertManagingDs, expanded: true },\n      { label: 'Other data sources', options: nonAlertManagingDs, expanded: true },\n    ];\n\n    return groupedOptions;\n  };\n\n  const {\n    autoFocus,\n    onBlur,\n    onClear,\n    openMenuOnFocus,\n    placeholder,\n    width,\n    inputId,\n    disabled = false,\n    isLoading = false,\n  } = props;\n\n  const options = getDataSourceOptions();\n  const value = getCurrentValue();\n  const isClearable = typeof onClear === 'function';\n\n  return (\n    <div data-testid={selectors.components.DataSourcePicker.container}>\n      <MultiSelect\n        isLoading={isLoading}\n        disabled={disabled}\n        data-testid={selectors.components.DataSourcePicker.inputV2}\n        inputId={inputId || 'data-source-picker'}\n        className=\"ds-picker select-container\"\n        isClearable={isClearable}\n        backspaceRemovesValue={true}\n        onChange={onChange}\n        options={options}\n        autoFocus={autoFocus}\n        onBlur={onBlur}\n        width={width}\n        openMenuOnFocus={openMenuOnFocus}\n        maxMenuHeight={500}\n        placeholder={placeholder}\n        noOptionsMessage=\"No datasources found\"\n        value={value ?? []}\n        invalid={Boolean(state?.error) || Boolean(props.invalid)}\n        getOptionLabel={(o) => {\n          if (o.meta && isUnsignedPluginSignature(o.meta.signature) && o !== value) {\n            return (\n              <Stack alignItems=\"center\" justifyContent=\"space-between\">\n                <span>{o.label}</span> <PluginSignatureBadge status={o.meta.signature} />\n              </Stack>\n            );\n          }\n          return o.label || '';\n        }}\n      />\n    </div>\n  );\n};\n","import { SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { RadioButtonGroup } from '@grafana/ui';\n\nimport { trackRulesListViewChange } from '../../../Analytics';\nimport { useRulesFilter } from '../../../hooks/useFilteredRules';\nimport { useURLSearchParams } from '../../../hooks/useURLSearchParams';\n\nexport type SupportedView = 'list' | 'grouped';\n\ntype LegacySupportedView = 'list' | 'grouped' | 'state';\n\nconst ViewOptions: Array<SelectableValue<SupportedView>> = [\n  { icon: 'folder', label: 'Grouped', value: 'grouped' },\n  { icon: 'list-ul', label: 'List', value: 'list' },\n];\n\nfunction RulesViewModeSelectorV2() {\n  const [queryParams, updateQueryParams] = useURLSearchParams();\n  const { hasActiveFilters } = useRulesFilter();\n  const wantsListView = queryParams.get('view') === 'list';\n\n  const selectedViewOption = hasActiveFilters || wantsListView ? 'list' : 'grouped';\n\n  /* If we change to the grouped view, we just remove the \"list\" and \"search\" params */\n  const handleViewChange = (view: SupportedView) => {\n    if (view === 'list') {\n      updateQueryParams({ view });\n      trackRulesListViewChange({ view });\n    } else {\n      updateQueryParams({ view: undefined, search: undefined });\n    }\n  };\n\n  return <RadioButtonGroup options={ViewOptions} value={selectedViewOption} onChange={handleViewChange} />;\n}\n\nconst LegacyViewOptions: Array<SelectableValue<LegacySupportedView>> = [\n  { label: 'Grouped', value: 'grouped' },\n  { label: 'List', value: 'list' },\n  { label: 'State', value: 'state' },\n];\n\nfunction RulesViewModeSelectorV1() {\n  const [queryParams, updateQueryParams] = useURLSearchParams();\n  const viewParam = queryParams.get('view');\n\n  const currentView = viewParamToLegacyView(viewParam);\n\n  const handleViewChange = (view: LegacySupportedView) => {\n    updateQueryParams({ view });\n  };\n\n  return <RadioButtonGroup options={LegacyViewOptions} value={currentView} onChange={handleViewChange} />;\n}\n\nfunction viewParamToLegacyView(viewParam: string | null): LegacySupportedView {\n  if (viewParam === 'list') {\n    return 'list';\n  }\n\n  if (viewParam === 'state') {\n    return 'state';\n  }\n\n  return 'grouped';\n}\n\nexport const RulesViewModeSelector = config.featureToggles.alertingListViewV2\n  ? RulesViewModeSelectorV2\n  : RulesViewModeSelectorV1;\n","import { css } from '@emotion/css';\nimport { useEffect, useRef, useState } from 'react';\nimport { useForm } from 'react-hook-form';\n\nimport { DataSourceInstanceSettings, GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Button, Field, Icon, Input, Label, RadioButtonGroup, Stack, Tooltip, useStyles2 } from '@grafana/ui';\nimport { DashboardPicker } from 'app/core/components/Select/DashboardPicker';\nimport { contextSrv } from 'app/core/core';\nimport { Trans, t } from 'app/core/internationalization';\nimport { ContactPointSelector } from 'app/features/alerting/unified/components/notification-policies/ContactPointSelector';\nimport { AccessControlAction } from 'app/types';\nimport { PromAlertingRuleState, PromRuleType } from 'app/types/unified-alerting-dto';\n\nimport {\n  LogMessages,\n  logInfo,\n  trackRulesSearchComponentInteraction,\n  trackRulesSearchInputInteraction,\n} from '../../../Analytics';\nimport { shouldUseAlertingListViewV2 } from '../../../featureToggles';\nimport { useRulesFilter } from '../../../hooks/useFilteredRules';\nimport { useAlertingHomePageExtensions } from '../../../plugins/useAlertingHomePageExtensions';\nimport { RuleHealth } from '../../../search/rulesSearchParser';\nimport { AlertmanagerProvider } from '../../../state/AlertmanagerContext';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../../utils/datasource';\nimport { alertStateToReadable } from '../../../utils/rules';\nimport { PopupCard } from '../../HoverCard';\nimport { MultipleDataSourcePicker } from '../MultipleDataSourcePicker';\n\nimport { RulesViewModeSelector } from './RulesViewModeSelector';\n\nconst RuleTypeOptions: SelectableValue[] = [\n  { label: 'Alert ', value: PromRuleType.Alerting },\n  { label: 'Recording ', value: PromRuleType.Recording },\n];\n\nconst RuleHealthOptions: SelectableValue[] = [\n  { label: 'Ok', value: RuleHealth.Ok },\n  { label: 'No Data', value: RuleHealth.NoData },\n  { label: 'Error', value: RuleHealth.Error },\n];\n\n// Contact point selector is not supported in Alerting ListView V2 yet\nconst canRenderContactPointSelector =\n  (contextSrv.hasPermission(AccessControlAction.AlertingReceiversRead) &&\n    config.featureToggles.alertingSimplifiedRouting &&\n    shouldUseAlertingListViewV2() === false) ??\n  false;\n\ninterface RulesFilerProps {\n  onClear?: () => void;\n}\n\nconst RuleStateOptions = Object.entries(PromAlertingRuleState).map(([key, value]) => ({\n  label: alertStateToReadable(value),\n  value,\n}));\n\nconst RulesFilter = ({ onClear = () => undefined }: RulesFilerProps) => {\n  const styles = useStyles2(getStyles);\n  const { pluginsFilterEnabled } = usePluginsFilterStatus();\n  const { filterState, hasActiveFilters, searchQuery, setSearchQuery, updateFilters } = useRulesFilter();\n\n  // This key is used to force a rerender on the inputs when the filters are cleared\n  const [filterKey, setFilterKey] = useState<number>(Math.floor(Math.random() * 100));\n  const dataSourceKey = `dataSource-${filterKey}`;\n  const queryStringKey = `queryString-${filterKey}`;\n\n  const searchQueryRef = useRef<HTMLInputElement | null>(null);\n  const { handleSubmit, register, setValue } = useForm<{ searchQuery: string }>({\n    defaultValues: { searchQuery },\n  });\n  const { ref, ...rest } = register('searchQuery');\n\n  useEffect(() => {\n    setValue('searchQuery', searchQuery);\n  }, [searchQuery, setValue]);\n\n  const handleDataSourceChange = (dataSourceValue: DataSourceInstanceSettings, action: 'add' | 'remove') => {\n    const dataSourceNames =\n      action === 'add'\n        ? [...filterState.dataSourceNames].concat([dataSourceValue.name])\n        : filterState.dataSourceNames.filter((name) => name !== dataSourceValue.name);\n\n    updateFilters({\n      ...filterState,\n      dataSourceNames,\n    });\n\n    setFilterKey((key) => key + 1);\n    trackRulesSearchComponentInteraction('dataSourceNames');\n  };\n\n  const handleDashboardChange = (dashboardUid: string | undefined) => {\n    updateFilters({ ...filterState, dashboardUid });\n    trackRulesSearchComponentInteraction('dashboardUid');\n  };\n\n  const clearDataSource = () => {\n    updateFilters({ ...filterState, dataSourceNames: [] });\n    setFilterKey((key) => key + 1);\n  };\n\n  const handleAlertStateChange = (value: PromAlertingRuleState) => {\n    logInfo(LogMessages.clickingAlertStateFilters);\n    updateFilters({ ...filterState, ruleState: value });\n    trackRulesSearchComponentInteraction('ruleState');\n  };\n\n  const handleRuleTypeChange = (ruleType: PromRuleType) => {\n    updateFilters({ ...filterState, ruleType });\n    trackRulesSearchComponentInteraction('ruleType');\n  };\n\n  const handleRuleHealthChange = (ruleHealth: RuleHealth) => {\n    updateFilters({ ...filterState, ruleHealth });\n    trackRulesSearchComponentInteraction('ruleHealth');\n  };\n\n  const handleClearFiltersClick = () => {\n    setSearchQuery(undefined);\n    onClear();\n\n    setTimeout(() => setFilterKey(filterKey + 1), 100);\n  };\n\n  const handleContactPointChange = (contactPoint: string) => {\n    updateFilters({ ...filterState, contactPoint });\n    trackRulesSearchComponentInteraction('contactPoint');\n  };\n\n  const searchIcon = <Icon name={'search'} />;\n\n  return (\n    <Stack direction=\"column\" gap={0}>\n      <Stack direction=\"row\" gap={1} wrap=\"wrap\">\n        <Field\n          className={styles.dsPickerContainer}\n          label={\n            <Label htmlFor=\"data-source-picker\">\n              <Stack gap={0.5} alignItems=\"center\">\n                <span>\n                  <Trans i18nKey=\"alerting.rules-filter.search-by-data-sources\">Search by data sources</Trans>\n                </span>\n                <Tooltip\n                  content={\n                    <div>\n                      <p>\n                        Data sources containing configured alert rules are Mimir or Loki data sources where alert rules\n                        are stored and evaluated in the data source itself.\n                      </p>\n                      <p>\n                        In these data sources, you can select Manage alerts via Alerting UI to be able to manage these\n                        alert rules in the Grafana UI as well as in the data source where they were configured.\n                      </p>\n                    </div>\n                  }\n                >\n                  <Icon\n                    id=\"data-source-picker-inline-help\"\n                    name=\"info-circle\"\n                    size=\"sm\"\n                    title={t(\n                      'alerting.rules-filter.data-source-picker-inline-help-title-search-by-data-sources-help',\n                      'Search by data sources help'\n                    )}\n                  />\n                </Tooltip>\n              </Stack>\n            </Label>\n          }\n        >\n          <MultipleDataSourcePicker\n            key={dataSourceKey}\n            alerting\n            noDefault\n            placeholder={t('alerting.rules-filter.placeholder-all-data-sources', 'All data sources')}\n            current={filterState.dataSourceNames}\n            onChange={handleDataSourceChange}\n            onClear={clearDataSource}\n          />\n        </Field>\n\n        <Field\n          className={styles.dashboardPickerContainer}\n          label={\n            <Label htmlFor=\"filters-dashboard-picker\">\n              <Trans i18nKey=\"alerting.rules-filter.dashboard\">Dashboard</Trans>\n            </Label>\n          }\n        >\n          {/* The key prop is to clear the picker value */}\n          {/* DashboardPicker doesn't do that itself when value is undefined */}\n          <DashboardPicker\n            inputId=\"filters-dashboard-picker\"\n            key={filterState.dashboardUid ? 'dashboard-defined' : 'dashboard-not-defined'}\n            value={filterState.dashboardUid}\n            onChange={(value) => handleDashboardChange(value?.uid)}\n            isClearable\n            cacheOptions\n          />\n        </Field>\n\n        <div>\n          <Label>\n            <Trans i18nKey=\"alerting.rules-filter.state\">State</Trans>\n          </Label>\n          <RadioButtonGroup\n            options={RuleStateOptions}\n            value={filterState.ruleState}\n            onChange={handleAlertStateChange}\n          />\n        </div>\n        <div>\n          <Label>\n            <Trans i18nKey=\"alerting.rules-filter.rule-type\">Rule type</Trans>\n          </Label>\n          <RadioButtonGroup options={RuleTypeOptions} value={filterState.ruleType} onChange={handleRuleTypeChange} />\n        </div>\n        <div>\n          <Label>\n            <Trans i18nKey=\"alerting.rules-filter.health\">Health</Trans>\n          </Label>\n          <RadioButtonGroup\n            options={RuleHealthOptions}\n            value={filterState.ruleHealth}\n            onChange={handleRuleHealthChange}\n          />\n        </div>\n        {canRenderContactPointSelector && (\n          <AlertmanagerProvider accessType={'notification'} alertmanagerSourceName={GRAFANA_RULES_SOURCE_NAME}>\n            <Stack direction=\"column\" gap={0}>\n              <Field\n                label={\n                  <Label htmlFor=\"contactPointFilter\">\n                    <Trans i18nKey=\"alerting.contactPointFilter.label\">Contact point</Trans>\n                  </Label>\n                }\n              >\n                <ContactPointSelector\n                  selectedContactPointName={filterState.contactPoint}\n                  selectProps={{\n                    inputId: 'contactPointFilter',\n                    width: 40,\n                    onChange: (selectValue) => {\n                      handleContactPointChange(selectValue?.value?.name!);\n                    },\n                    isClearable: true,\n                  }}\n                />\n              </Field>\n            </Stack>\n          </AlertmanagerProvider>\n        )}\n        {pluginsFilterEnabled && (\n          <div>\n            <Label>\n              <Trans i18nKey=\"alerting.rules-filter.plugin-rules\">Plugin rules</Trans>\n            </Label>\n            <RadioButtonGroup<'hide'>\n              options={[\n                { label: 'Show', value: undefined },\n                { label: 'Hide', value: 'hide' },\n              ]}\n              value={filterState.plugins}\n              onChange={(value) => updateFilters({ ...filterState, plugins: value })}\n            />\n          </div>\n        )}\n      </Stack>\n\n      <Stack direction=\"column\" gap={0}>\n        <Stack direction=\"row\" gap={1}>\n          <form\n            className={styles.searchInput}\n            onSubmit={handleSubmit((data) => {\n              setSearchQuery(data.searchQuery);\n              searchQueryRef.current?.blur();\n              trackRulesSearchInputInteraction({ oldQuery: searchQuery, newQuery: data.searchQuery });\n            })}\n          >\n            <Field\n              label={\n                <Label htmlFor=\"rulesSearchInput\">\n                  <Stack gap={0.5} alignItems=\"center\">\n                    <span>\n                      <Trans i18nKey=\"alerting.rules-filter.search\">Search</Trans>\n                    </span>\n                    <PopupCard content={<SearchQueryHelp />}>\n                      <Icon\n                        name=\"info-circle\"\n                        size=\"sm\"\n                        tabIndex={0}\n                        title={t('alerting.rules-filter.title-search-help', 'Search help')}\n                      />\n                    </PopupCard>\n                  </Stack>\n                </Label>\n              }\n            >\n              <Input\n                id=\"rulesSearchInput\"\n                key={queryStringKey}\n                prefix={searchIcon}\n                ref={(e) => {\n                  ref(e);\n                  searchQueryRef.current = e;\n                }}\n                {...rest}\n                placeholder={t('alerting.rules-filter.rulesSearchInput-placeholder-search', 'Search')}\n                data-testid=\"search-query-input\"\n              />\n            </Field>\n            <input type=\"submit\" hidden />\n          </form>\n          <div>\n            <Label>\n              <Trans i18nKey=\"alerting.rules-filter.view-as\">View as</Trans>\n            </Label>\n            <RulesViewModeSelector />\n          </div>\n        </Stack>\n        {hasActiveFilters && (\n          <div>\n            <Button fullWidth={false} icon=\"times\" variant=\"secondary\" onClick={handleClearFiltersClick}>\n              <Trans i18nKey=\"alerting.rules-filter.clear-filters\">Clear filters</Trans>\n            </Button>\n          </div>\n        )}\n      </Stack>\n    </Stack>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    dsPickerContainer: css({\n      width: theme.spacing(60),\n      flexGrow: 0,\n      margin: 0,\n    }),\n    dashboardPickerContainer: css({\n      minWidth: theme.spacing(50),\n    }),\n    searchInput: css({\n      flex: 1,\n      margin: 0,\n    }),\n  };\n};\n\nfunction SearchQueryHelp() {\n  const styles = useStyles2(helpStyles);\n\n  return (\n    <div>\n      <div>Search syntax allows to query alert rules by the parameters defined below.</div>\n      <hr />\n      <div className={styles.grid}>\n        <div>\n          <Trans i18nKey=\"alerting.search-query-help.filter-type\">Filter type</Trans>\n        </div>\n        <div>\n          <Trans i18nKey=\"alerting.search-query-help.expression\">Expression</Trans>\n        </div>\n        <HelpRow\n          title={t('alerting.search-query-help.title-datasources', 'Datasources')}\n          expr=\"datasource:mimir datasource:prometheus\"\n        />\n        <HelpRow\n          title={t('alerting.search-query-help.title-folder-namespace', 'Folder/Namespace')}\n          expr=\"namespace:global\"\n        />\n        <HelpRow title={t('alerting.search-query-help.title-group', 'Group')} expr=\"group:cpu-usage\" />\n        <HelpRow title={t('alerting.search-query-help.title-rule', 'Rule')} expr='rule:\"cpu 80%\"' />\n        <HelpRow title={t('alerting.search-query-help.title-labels', 'Labels')} expr=\"label:team=A label:cluster=a1\" />\n        <HelpRow title={t('alerting.search-query-help.title-state', 'State')} expr=\"state:firing|normal|pending\" />\n        <HelpRow title={t('alerting.search-query-help.title-type', 'Type')} expr=\"type:alerting|recording\" />\n        <HelpRow title={t('alerting.search-query-help.title-health', 'Health')} expr=\"health:ok|nodata|error\" />\n        <HelpRow\n          title={t('alerting.search-query-help.title-dashboard-uid', 'Dashboard UID')}\n          expr=\"dashboard:eadde4c7-54e6-4964-85c0-484ab852fd04\"\n        />\n        <HelpRow\n          title={t('alerting.search-query-help.title-contact-point', 'Contact point')}\n          expr=\"contactPoint:slack\"\n        />\n      </div>\n    </div>\n  );\n}\n\nfunction HelpRow({ title, expr }: { title: string; expr: string }) {\n  const styles = useStyles2(helpStyles);\n\n  return (\n    <>\n      <div>{title}</div>\n      <code className={styles.code}>{expr}</code>\n    </>\n  );\n}\n\nconst helpStyles = (theme: GrafanaTheme2) => ({\n  grid: css({\n    display: 'grid',\n    gridTemplateColumns: 'max-content auto',\n    gap: theme.spacing(1),\n    alignItems: 'center',\n  }),\n  code: css({\n    display: 'block',\n    textAlign: 'center',\n  }),\n});\n\nfunction usePluginsFilterStatus() {\n  const { components } = useAlertingHomePageExtensions();\n  return { pluginsFilterEnabled: components.length > 0 };\n}\n\nexport default RulesFilter;\n","import { PluginExtensionPoints } from '@grafana/data';\nimport { usePluginComponents } from '@grafana/runtime';\n\nexport function useAlertingHomePageExtensions() {\n  return usePluginComponents({\n    extensionPointId: PluginExtensionPoints.AlertingHomePage,\n    limitPerPlugin: 1,\n  });\n}\n","import { css } from '@emotion/css';\nimport pluralize from 'pluralize';\nimport { ReactNode, useEffect, useId } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Icon, Stack, Text, TextLink, Tooltip, useStyles2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { Rule, RuleGroupIdentifierV2, RuleHealth, RulesSourceIdentifier } from 'app/types/unified-alerting';\nimport { Labels, PromAlertingRuleState, RulerRuleDTO, RulesSourceApplication } from 'app/types/unified-alerting-dto';\n\nimport { logError } from '../../Analytics';\nimport { MetaText } from '../../components/MetaText';\nimport { ProvisioningBadge } from '../../components/Provisioning';\nimport { PluginOriginBadge } from '../../plugins/PluginOriginBadge';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { getGroupOriginName } from '../../utils/groupIdentifier';\nimport { labelsSize } from '../../utils/labels';\nimport { createContactPointSearchLink } from '../../utils/misc';\nimport { RulePluginOrigin } from '../../utils/rules';\n\nimport { ListItem } from './ListItem';\nimport { DataSourceIcon } from './Namespace';\nimport { RuleListIcon, RuleOperation } from './RuleListIcon';\nimport { calculateNextEvaluationEstimate } from './util';\n\nexport interface AlertRuleListItemProps {\n  name: string;\n  href: string;\n  summary?: string;\n  error?: string;\n  state?: PromAlertingRuleState;\n  isPaused?: boolean;\n  health?: RuleHealth;\n  isProvisioned?: boolean;\n  lastEvaluation?: string;\n  evaluationInterval?: string;\n  labels?: Labels;\n  instancesCount?: number;\n  namespace?: string;\n  group?: string;\n  rulesSource?: RulesSourceIdentifier;\n  application?: RulesSourceApplication;\n  // used for alert rules that use simplified routing\n  contactPoint?: string;\n  actions?: ReactNode;\n  origin?: RulePluginOrigin;\n  operation?: RuleOperation;\n}\n\nexport const AlertRuleListItem = (props: AlertRuleListItemProps) => {\n  const {\n    name,\n    summary,\n    state,\n    health,\n    error,\n    href,\n    isProvisioned,\n    lastEvaluation,\n    evaluationInterval,\n    isPaused = false,\n    instancesCount = 0,\n    namespace,\n    group,\n    rulesSource,\n    application,\n    contactPoint,\n    labels,\n    origin,\n    actions = null,\n    operation,\n  } = props;\n\n  const listItemAriaId = useId();\n\n  const metadata: ReactNode[] = [];\n  if (namespace && group) {\n    metadata.push(\n      <Text color=\"secondary\" variant=\"bodySmall\">\n        <RuleLocation namespace={namespace} group={group} rulesSource={rulesSource} application={application} />\n      </Text>\n    );\n  }\n\n  if (!isPaused) {\n    if (lastEvaluation && evaluationInterval) {\n      metadata.push(\n        <EvaluationMetadata lastEvaluation={lastEvaluation} evaluationInterval={evaluationInterval} state={state} />\n      );\n    }\n\n    if (instancesCount) {\n      metadata.push(\n        <MetaText icon=\"layers-alt\">\n          <TextLink href={href + '?tab=instances'} variant=\"bodySmall\" color=\"primary\" inline={false}>\n            {pluralize('instance', instancesCount, true)}\n          </TextLink>\n        </MetaText>\n      );\n    }\n  }\n\n  if (labelsSize(labels) > 0) {\n    metadata.push(\n      <MetaText icon=\"tag-alt\">\n        <TextLink href={href} variant=\"bodySmall\" color=\"primary\" inline={false}>\n          {pluralize('label', labelsSize(labels), true)}\n        </TextLink>\n      </MetaText>\n    );\n  }\n\n  if (!isPaused && contactPoint) {\n    metadata.push(\n      <MetaText icon=\"at\">\n        <Trans i18nKey=\"alerting.contact-points.delivered-to\">Delivered to</Trans>{' '}\n        <TextLink\n          href={createContactPointSearchLink(contactPoint, GRAFANA_RULES_SOURCE_NAME)}\n          variant=\"bodySmall\"\n          color=\"primary\"\n          inline={false}\n        >\n          {contactPoint}\n        </TextLink>\n      </MetaText>\n    );\n  }\n\n  return (\n    <ListItem\n      aria-labelledby={listItemAriaId}\n      title={\n        <Stack direction=\"row\" alignItems=\"center\">\n          <TextLink href={href} color=\"primary\" inline={false} id={listItemAriaId}>\n            {name}\n          </TextLink>\n          {origin && <PluginOriginBadge pluginId={origin.pluginId} size=\"sm\" />}\n          {/* show provisioned badge only when it also doesn't have plugin origin */}\n          {isProvisioned && !origin && <ProvisioningBadge />}\n          {/* let's not show labels for now, but maybe users would be interested later? Or maybe show them only in the list view? */}\n          {/* {labels && <AlertLabels labels={labels} size=\"xs\" />} */}\n        </Stack>\n      }\n      description={<Summary content={summary} error={error} />}\n      icon={<RuleListIcon state={state} health={health} isPaused={isPaused} operation={operation} />}\n      actions={actions}\n      meta={metadata}\n    />\n  );\n};\n\nexport type RecordingRuleListItemProps = Omit<\n  AlertRuleListItemProps,\n  'summary' | 'state' | 'instancesCount' | 'contactPoint'\n>;\n\nexport function RecordingRuleListItem({\n  name,\n  namespace,\n  group,\n  rulesSource,\n  application,\n  href,\n  health,\n  isProvisioned,\n  error,\n  isPaused,\n  origin,\n  actions,\n}: RecordingRuleListItemProps) {\n  const metadata: ReactNode[] = [];\n  if (namespace && group) {\n    metadata.push(\n      <Text color=\"secondary\" variant=\"bodySmall\">\n        <RuleLocation namespace={namespace} group={group} rulesSource={rulesSource} application={application} />\n      </Text>\n    );\n  }\n\n  return (\n    <ListItem\n      title={\n        <Stack direction=\"row\" alignItems=\"center\">\n          <TextLink href={href} inline={false}>\n            {name}\n          </TextLink>\n          {origin && <PluginOriginBadge pluginId={origin.pluginId} size=\"sm\" />}\n          {/* show provisioned badge only when it also doesn't have plugin origin */}\n          {isProvisioned && !origin && <ProvisioningBadge />}\n          {/* let's not show labels for now, but maybe users would be interested later? Or maybe show them only in the list view? */}\n          {/* {labels && <AlertLabels labels={labels} size=\"xs\" />} */}\n        </Stack>\n      }\n      description={<Summary error={error} />}\n      icon={<RuleListIcon recording={true} health={health} isPaused={isPaused} />}\n      actions={actions}\n      meta={metadata}\n    />\n  );\n}\n\ninterface RuleOperationListItemProps {\n  name: string;\n  namespace: string;\n  group: string;\n  rulesSource?: RulesSourceIdentifier;\n  application?: RulesSourceApplication;\n  operation: RuleOperation;\n}\n\nexport function RuleOperationListItem({\n  name,\n  namespace,\n  group,\n  rulesSource,\n  application,\n  operation,\n}: RuleOperationListItemProps) {\n  const listItemAriaId = useId();\n\n  const metadata: ReactNode[] = [];\n  if (namespace && group) {\n    metadata.push(\n      <Text color=\"secondary\" variant=\"bodySmall\">\n        <RuleLocation namespace={namespace} group={group} rulesSource={rulesSource} application={application} />\n      </Text>\n    );\n  }\n\n  return (\n    <ListItem\n      aria-labelledby={listItemAriaId}\n      title={\n        <Stack direction=\"row\" alignItems=\"center\">\n          <Text id={listItemAriaId}>{name}</Text>\n        </Stack>\n      }\n      icon={<RuleListIcon operation={operation} />}\n      meta={metadata}\n    />\n  );\n}\n\ninterface SummaryProps {\n  content?: string;\n  error?: string;\n}\n\nfunction Summary({ content, error }: SummaryProps) {\n  if (error) {\n    return (\n      <Text variant=\"bodySmall\" color=\"error\" weight=\"light\" truncate element=\"p\">\n        {error}\n      </Text>\n    );\n  }\n  if (content) {\n    return (\n      <Text variant=\"bodySmall\" color=\"secondary\">\n        {content}\n      </Text>\n    );\n  }\n\n  return null;\n}\n\ninterface EvaluationMetadataProps {\n  lastEvaluation?: string;\n  evaluationInterval?: string;\n  state?: PromAlertingRuleState;\n}\n\nfunction EvaluationMetadata({ lastEvaluation, evaluationInterval, state }: EvaluationMetadataProps) {\n  const nextEvaluation = calculateNextEvaluationEstimate(lastEvaluation, evaluationInterval);\n\n  // @TODO support firing for calculation\n  if (state === PromAlertingRuleState.Firing && nextEvaluation) {\n    const firingFor = '2m 34s';\n\n    return (\n      <MetaText icon=\"clock-nine\">\n        <Trans i18nKey=\"alerting.alert-rules.firing-for\">Firing for</Trans> <Text color=\"primary\">{firingFor}</Text>\n        {nextEvaluation && (\n          <>\n            {'· '}\n            <Trans i18nKey=\"alerting.alert-rules.next-evaluation-in\">next evaluation in</Trans>{' '}\n            {nextEvaluation.humanized}\n          </>\n        )}\n      </MetaText>\n    );\n  }\n\n  // for recording rules and normal or pending state alert rules we just show when we evaluated last and how long that took\n  if (nextEvaluation) {\n    return (\n      <MetaText icon=\"clock-nine\">\n        <Trans i18nKey=\"alerting.alert-rules.next-evaluation\">Next evaluation</Trans> {nextEvaluation.humanized}\n      </MetaText>\n    );\n  }\n\n  return null;\n}\n\ninterface UnknownRuleListItemProps {\n  ruleName: string;\n  groupIdentifier: RuleGroupIdentifierV2;\n  ruleDefinition: Rule | RulerRuleDTO;\n}\n\nexport const UnknownRuleListItem = ({ ruleName, groupIdentifier, ruleDefinition }: UnknownRuleListItemProps) => {\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    const { namespace, groupName } = groupIdentifier;\n    const ruleContext = {\n      name: ruleName,\n      groupName,\n      namespace: JSON.stringify(namespace),\n      rulesSource: getGroupOriginName(groupIdentifier),\n    };\n    logError(new Error('unknown rule type'), ruleContext);\n  }, [ruleName, groupIdentifier]);\n\n  return (\n    <Alert\n      title={t('alerting.unknown-rule-list-item.title-unknown-rule-type', 'Unknown rule type')}\n      className={styles.resetMargin}\n    >\n      <details>\n        <summary>\n          <Trans i18nKey=\"alerting.alert-rules.rule-definition\">Rule definition</Trans>\n        </summary>\n        <pre>\n          <code>{JSON.stringify(ruleDefinition, null, 2)}</code>\n        </pre>\n      </details>\n    </Alert>\n  );\n};\n\ninterface RuleLocationProps {\n  namespace: string;\n  group: string;\n  rulesSource?: RulesSourceIdentifier;\n  application?: RulesSourceApplication;\n}\n\n// @TODO make the datasource / namespace / group click-able to allow further filtering of the list\nexport const RuleLocation = ({ namespace, group, rulesSource, application }: RuleLocationProps) => {\n  const isGrafanaApp = application === 'grafana';\n  const isDataSourceApp = !!rulesSource && !!application && !isGrafanaApp;\n\n  return (\n    <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n      {isGrafanaApp && <Icon size=\"xs\" name=\"folder\" />}\n      {isDataSourceApp && (\n        <Tooltip content={rulesSource.name}>\n          <span>\n            <DataSourceIcon application={application} size={14} />\n          </span>\n        </Tooltip>\n      )}\n\n      <Stack direction=\"row\" alignItems=\"center\" gap={0}>\n        {namespace}\n        <Icon size=\"sm\" name=\"angle-right\" />\n        {group}\n      </Stack>\n    </Stack>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  alertListItemContainer: css({\n    position: 'relative',\n    listStyle: 'none',\n    background: theme.colors.background.primary,\n\n    borderBottom: `solid 1px ${theme.colors.border.weak}`,\n    padding: theme.spacing(1, 1, 1, 1.5),\n  }),\n  resetMargin: css({\n    margin: 0,\n  }),\n});\n\nexport type RuleListItemCommonProps = Pick<\n  AlertRuleListItemProps,\n  Extract<keyof AlertRuleListItemProps, keyof RecordingRuleListItemProps>\n>;\n","import { css } from '@emotion/css';\nimport React, { AriaAttributes, ReactNode } from 'react';\nimport Skeleton from 'react-loading-skeleton';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack, Text, useStyles2 } from '@grafana/ui';\n\ninterface ListItemProps extends AriaAttributes {\n  icon?: ReactNode;\n  title: ReactNode;\n  description?: ReactNode;\n  meta?: ReactNode[];\n  metaRight?: ReactNode[];\n  actions?: ReactNode;\n  'data-testid'?: string;\n}\n\nexport const ListItem = (props: ListItemProps) => {\n  const styles = useStyles2(getStyles);\n  const { icon = null, title, description, meta, metaRight, actions, 'data-testid': testId, ...ariaAttributes } = props;\n\n  return (\n    <li\n      className={styles.alertListItemContainer}\n      role=\"treeitem\"\n      aria-selected=\"false\"\n      data-testid={testId}\n      {...ariaAttributes}\n    >\n      <Stack direction=\"row\" alignItems=\"start\" gap={1} wrap={false}>\n        {/* icon */}\n        {icon}\n\n        <Stack direction=\"column\" gap={0} flex=\"1\" minWidth={0}>\n          {/* title */}\n          <Stack direction=\"column\" gap={0}>\n            <div className={styles.textOverflow}>{title}</div>\n            <div className={styles.textOverflow}>{description}</div>\n          </Stack>\n\n          {/* metadata */}\n          <Stack direction=\"row\" gap={0.5} alignItems=\"center\">\n            {meta?.map((item, index) => (\n              <React.Fragment key={index}>\n                {index > 0 && <Separator />}\n                {item}\n              </React.Fragment>\n            ))}\n          </Stack>\n        </Stack>\n\n        {/* actions & meta right */}\n        <Stack direction=\"row\" alignItems=\"center\" gap={1} wrap={false}>\n          {/* @TODO move this so the metadata row can extend beyond the width of this column */}\n          {metaRight}\n          {actions}\n        </Stack>\n      </Stack>\n    </li>\n  );\n};\n\nexport const SkeletonListItem = () => {\n  return (\n    <ListItem\n      icon={<Skeleton width={16} height={16} circle />}\n      title={<Skeleton height={16} width={350} />}\n      actions={<Skeleton height={10} width={200} />}\n    />\n  );\n};\n\nconst Separator = () => (\n  <Text color=\"secondary\" variant=\"bodySmall\">\n    {'·'}\n  </Text>\n);\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  alertListItemContainer: css({\n    position: 'relative',\n    listStyle: 'none',\n    background: theme.colors.background.primary,\n\n    borderBottom: `solid 1px ${theme.colors.border.weak}`,\n    padding: `${theme.spacing(1)} ${theme.spacing(1)}`,\n  }),\n  textOverflow: css({\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    color: 'inherit',\n  }),\n});\n","import { css } from '@emotion/css';\nimport { isEmpty } from 'lodash';\nimport { PropsWithChildren, ReactNode } from 'react';\nimport { useToggle } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { IconButton, Stack, useStyles2 } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { Spacer } from '../../components/Spacer';\n\ninterface ListSectionProps extends PropsWithChildren {\n  title: ReactNode;\n  collapsed?: boolean;\n  actions?: ReactNode;\n  pagination?: ReactNode;\n}\n\nexport const ListSection = ({\n  children,\n  title,\n  collapsed = false,\n  actions = null,\n  pagination = null,\n}: ListSectionProps) => {\n  const styles = useStyles2(getStyles);\n  const [isCollapsed, toggleCollapsed] = useToggle(collapsed);\n\n  return (\n    <li className={styles.wrapper} role=\"treeitem\" aria-selected=\"false\">\n      <div className={styles.sectionTitle}>\n        <Stack alignItems=\"center\">\n          <Stack alignItems=\"center\" gap={0}>\n            <IconButton\n              name={isCollapsed ? 'angle-right' : 'angle-down'}\n              onClick={toggleCollapsed}\n              aria-label={t('common.collapse', 'Collapse')}\n            />\n            {title}\n          </Stack>\n          {actions && (\n            <>\n              <Spacer />\n              {actions}\n            </>\n          )}\n        </Stack>\n      </div>\n      {!isEmpty(children) && !isCollapsed && (\n        <>\n          <ul role=\"group\" className={styles.groupItemsWrapper}>\n            {children}\n          </ul>\n          {pagination}\n        </>\n      )}\n    </li>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  groupItemsWrapper: css({\n    position: 'relative',\n    borderRadius: theme.shape.radius.default,\n    border: `solid 1px ${theme.colors.border.weak}`,\n    borderBottom: 'none',\n\n    marginLeft: theme.spacing(1.5),\n  }),\n  wrapper: css({\n    display: 'flex',\n    flexDirection: 'column',\n\n    gap: theme.spacing(1),\n  }),\n  sectionTitle: css({\n    padding: `${theme.spacing(0.5)} ${theme.spacing(1)}`,\n\n    background: theme.colors.background.secondary,\n    border: `solid 1px ${theme.colors.border.weak}`,\n    borderRadius: theme.shape.radius.default,\n  }),\n});\n","import { css } from '@emotion/css';\nimport { PropsWithChildren } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, Stack, TextLink, useStyles2 } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\nimport { PromApplication, RulesSourceApplication } from 'app/types/unified-alerting-dto';\n\nimport { WithReturnButton } from '../../components/WithReturnButton';\n\ninterface NamespaceProps extends PropsWithChildren {\n  name: string;\n  href?: string;\n  application?: RulesSourceApplication;\n}\n\n// @TODO add export rules for namespace back in\nconst Namespace = ({ children, name, href, application }: NamespaceProps) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <li className={styles.namespaceWrapper} role=\"treeitem\" aria-selected=\"false\">\n      <div className={styles.namespaceTitle}>\n        <Stack alignItems={'center'} gap={1}>\n          <DataSourceIcon application={application} />\n          {href ? (\n            <WithReturnButton\n              title={t('alerting.namespace.title-alert-rules', 'Alert rules')}\n              component={\n                <TextLink href={href} inline={false}>\n                  {name}\n                </TextLink>\n              }\n            />\n          ) : (\n            name\n          )}\n        </Stack>\n      </div>\n      {children && (\n        <ul role=\"group\" className={styles.groupItemsWrapper}>\n          {children}\n        </ul>\n      )}\n    </li>\n  );\n};\n\ninterface NamespaceIconProps {\n  application?: RulesSourceApplication;\n  size?: number;\n}\n\nexport const DataSourceIcon = ({ application, size = 16 }: NamespaceIconProps) => {\n  switch (application) {\n    case PromApplication.Prometheus:\n      return (\n        <img\n          width={size}\n          height={size}\n          src=\"public/app/plugins/datasource/prometheus/img/prometheus_logo.svg\"\n          alt=\"Prometheus\"\n        />\n      );\n    case PromApplication.Mimir:\n      return (\n        <img width={size} height={size} src=\"public/app/plugins/datasource/prometheus/img/mimir_logo.svg\" alt=\"Mimir\" />\n      );\n    case 'Loki':\n      return <img width={size} height={size} src=\"public/app/plugins/datasource/loki/img/loki_icon.svg\" alt=\"Loki\" />;\n    case 'grafana':\n    default:\n      return <Icon name=\"grafana\" />;\n  }\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  groupItemsWrapper: css({\n    position: 'relative',\n    borderRadius: theme.shape.radius.default,\n    border: `solid 1px ${theme.colors.border.weak}`,\n    borderBottom: 'none',\n\n    marginLeft: theme.spacing(3),\n\n    '&:before': {\n      content: \"''\",\n      position: 'absolute',\n      height: '100%',\n\n      borderLeft: `solid 1px ${theme.colors.border.weak}`,\n\n      marginTop: 0,\n      marginLeft: `-${theme.spacing(2.5)}`,\n    },\n  }),\n  namespaceWrapper: css({\n    display: 'flex',\n    flexDirection: 'column',\n\n    gap: theme.spacing(1),\n  }),\n  namespaceTitle: css({\n    padding: `${theme.spacing(1)} ${theme.spacing(1.5)}`,\n\n    // background: theme.colors.background.secondary,\n\n    // border: `solid 1px ${theme.colors.border.weak}`,\n    // borderRadius: theme.shape.radius.default,\n  }),\n});\n\nexport default Namespace;\n","import { css, keyframes } from '@emotion/css';\nimport { ComponentProps, memo } from 'react';\nimport type { RequireAtLeastOne } from 'type-fest';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, type IconName, Text, Tooltip, useStyles2, useTheme2 } from '@grafana/ui';\nimport type { RuleHealth } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\n\nimport { isErrorHealth } from '../../components/rule-viewer/RuleViewer';\n\ntype TextProps = ComponentProps<typeof Text>;\n\ninterface RuleListIconProps {\n  recording?: boolean;\n  state?: PromAlertingRuleState;\n  health?: RuleHealth;\n  isPaused?: boolean;\n  operation?: RuleOperation;\n}\n\nexport enum RuleOperation {\n  Creating = 'Creating',\n  Deleting = 'Deleting',\n}\n\nconst icons: Record<PromAlertingRuleState, IconName> = {\n  [PromAlertingRuleState.Inactive]: 'check-circle',\n  [PromAlertingRuleState.Pending]: 'circle',\n  [PromAlertingRuleState.Recovering]: 'exclamation-circle',\n  [PromAlertingRuleState.Firing]: 'exclamation-circle',\n};\n\nconst color: Record<PromAlertingRuleState, 'success' | 'error' | 'warning'> = {\n  [PromAlertingRuleState.Inactive]: 'success',\n  [PromAlertingRuleState.Pending]: 'warning',\n  [PromAlertingRuleState.Recovering]: 'warning',\n  [PromAlertingRuleState.Firing]: 'error',\n};\n\nconst stateNames: Record<PromAlertingRuleState, string> = {\n  [PromAlertingRuleState.Inactive]: 'Normal',\n  [PromAlertingRuleState.Pending]: 'Pending',\n  [PromAlertingRuleState.Firing]: 'Firing',\n  [PromAlertingRuleState.Recovering]: 'Recovering',\n};\n\nconst operationIcons: Record<RuleOperation, IconName> = {\n  [RuleOperation.Creating]: 'plus-circle',\n  [RuleOperation.Deleting]: 'minus-circle',\n};\n\n// ⚠️ not trivial to update this, you have to re-do the math for the loading spinner\nconst ICON_SIZE = 18;\n\n/**\n * Make sure that the order of importance here matches the one we use in the StateBadge component for the detail view\n * This component is often rendered tens or hundreds of times in a single page, so it's performance is important\n */\nexport const RuleListIcon = memo(function RuleListIcon({\n  state,\n  health,\n  recording = false,\n  isPaused = false,\n  operation,\n}: RequireAtLeastOne<RuleListIconProps>) {\n  const styles = useStyles2(getStyles);\n  const theme = useTheme2();\n\n  let iconName: IconName = state ? icons[state] : 'circle';\n  let iconColor: TextProps['color'] = state ? color[state] : 'secondary';\n  let stateName: string = state ? stateNames[state] : 'unknown';\n\n  if (recording) {\n    iconName = 'record-audio';\n    iconColor = 'success';\n    stateName = 'Recording';\n  }\n\n  if (health === 'nodata') {\n    iconName = 'exclamation-triangle';\n    iconColor = 'warning';\n    stateName = 'Insufficient data';\n  }\n\n  if (isErrorHealth(health)) {\n    iconName = 'times-circle';\n    iconColor = 'error';\n    stateName = 'Failed to evaluate rule';\n  }\n\n  if (isPaused) {\n    iconName = 'pause-circle';\n    iconColor = 'warning';\n    stateName = 'Paused';\n  }\n\n  if (operation) {\n    iconName = operationIcons[operation];\n    iconColor = 'secondary';\n    stateName = operation;\n  }\n\n  return (\n    <Tooltip content={stateName} placement=\"right\">\n      <div>\n        <Text color={iconColor}>\n          <div className={styles.iconsContainer}>\n            <Icon name={iconName} width={18} height={18} title={stateName} />\n            {/* this loading spinner works by using an optical illusion;\n              the actual icon is static and the \"spinning\" part is just a semi-transparent darker circle overlayed on top.\n              This makes it look like there is a small bright colored spinner rotating.\n            */}\n            {operation && (\n              <svg\n                width={ICON_SIZE}\n                height={ICON_SIZE}\n                viewBox=\"0 0 24 24\"\n                version=\"1.1\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                className={styles.spinning}\n              >\n                <circle\n                  r={ICON_SIZE / 2}\n                  cx=\"12\"\n                  cy=\"12\"\n                  // make sure to match this color to the color of the list item background where it's being used! Works for both light and dark themes.\n                  stroke={theme.colors.background.primary}\n                  strokeWidth=\"3\"\n                  strokeLinecap=\"round\"\n                  fill=\"transparent\"\n                  strokeOpacity={0.85}\n                  strokeDasharray=\"24px\"\n                />\n              </svg>\n            )}\n          </div>\n        </Text>\n      </div>\n    </Tooltip>\n  );\n});\n\nconst spin = keyframes({\n  '0%': {\n    transform: 'rotate(0deg)',\n  },\n  '50%': {\n    transform: 'rotate(180deg)',\n  },\n  '100%': {\n    transform: 'rotate(360deg)',\n  },\n});\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  iconsContainer: css({\n    position: 'relative',\n    width: 18,\n    height: 18,\n    '> *': {\n      position: 'absolute',\n    },\n  }),\n  spinning: css({\n    [theme.transitions.handleMotion('no-preference')]: {\n      animationName: spin,\n      animationIterationCount: 'infinite',\n      animationDuration: '1s',\n      animationTimingFunction: 'linear',\n    },\n  }),\n});\n","import { useMemo } from 'react';\n\nimport { getRulesAccess } from './access-control';\n\nexport function useRulesAccess() {\n  return useMemo(() => getRulesAccess(), []);\n}\n","import { useEffect, useRef } from 'react';\nvar useInterval = function (callback, delay) {\n    var savedCallback = useRef(function () { });\n    useEffect(function () {\n        savedCallback.current = callback;\n    });\n    useEffect(function () {\n        if (delay !== null) {\n            var interval_1 = setInterval(function () { return savedCallback.current(); }, delay || 0);\n            return function () { return clearInterval(interval_1); };\n        }\n        return undefined;\n    }, [delay]);\n};\nexport default useInterval;\n"],"names":["RecordingRulesButtons","canCreateGrafanaRules","canCreateCloudRules","grafanaRecordingRulesEnabled","Dropdown","Menu","MenuItem","NoRulesSplash","canCreateAnything","EmptyState","Stack","TextLink","RuleListErrors","expanded","setExpanded","closed","setClosed","useLocalStorage","promRuleRequests","useUnifiedAlertingSelector","state","rulerRuleRequests","styles","getStyles","errors","promRequestErrors","rulerRequestErrors","requests","result","dataSource","error","grafanaPromError","grafanaRulerError","ErrorSummaryButton","Alert","item","idx","Button","count","onClick","Tooltip","theme","GrafanaRuleFolderExporter","folder","onClose","activeTab","setActiveTab","GrafanaExportDrawer","GrafanaRuleFolderExportPreview","exportFormat","exportFolderDefinition","isFetching","alertRuleApi","LoadingPlaceholder","downloadFileName","FileExportPreview","RulesGroup","group","namespace","expandAll","viewMode","rulesSource","rulesSourceName","rulerRulesLoaded","isExporting","setIsExporting","isCollapsed","setIsCollapsed","hasRuler","useHasRuler","rulerRule","folderUID","useFolder","canEditRules","isDeleting","rule","isFederated","isProvisioned","isPluginProvided","canEditGroup","isListView","isGroupView","actionIcons","Spinner","baseUrl","ActionIcon","groupName","RuleLocation","CollapseToggle","selectors","FolderIcon","CloudSourceLogo","Badge","RulesTable","Icon","useCombinedGroupNamespace","namespaces","ns","g","CloudRules","promRules","rulesDataSources","groupsWithNamespaces","dataSourcesLoading","ds","hasSomeResults","hasDataSourcesConfigured","hasDataSourcesLoading","hasNamespaces","numberOfPages","onPageChange","page","pageItems","usePagination","createRuleSupported","createRuleAllowed","viewExternalRuleSupported","viewExternalRuleAllowed","canMigrateToGMA","config","Text","MigrateToGMAButton","CreateRecordingRuleButton","Pagination","createCloudRuleSupported","createCloudRuleAllowed","location","url","importUrl","GrafanaRulesExporter","GrafanaRulesExportPreview","rulesDefinition","GrafanaRules","queryParams","useQueryParams","prom","ruler","loading","hasResult","wantsListView","namespacesFormat","exportRulesSupported","exportRulesAllowed","canExportRules","showExportDrawer","toggleShowExportDrawer","useToggle","hasGrafanaAlerts","RuleListGroupView","grafanaNamespaces","cloudNamespaces","sorted","a","b","Authorize","RuleListStateView","ref","width","useMeasure","isLoading","useDataSourcesLoadingState","entries","rules","LoadingBar","RulesByState","STATE_TITLES","isFiringState","hasRulesMatchingState","ListSection","Counter","promRule","instancesCount","originMeta","AlertRuleListItem","RuleActionsButtons","grafanaLoading","promLoading","rulerLoading","externalDataSourcesLoading","VIEWS","LIMIT_ALERTS","prometheusRulesPrimary","dispatch","rulesDataSourceNames","setExpandAll","onFilterCleared","filterState","hasActiveFilters","hasActiveLabelsFilter","queryParamView","viewType","view","ViewComponent","name","promRequests","rulerRequests","allPromLoaded","_","allRulerLoaded","allPromEmpty","allRulerEmpty","limitAlerts","fetchRules","useAsyncFn","useInterval","hasNoAlertRulesCreatedYet","hasAlertRulesCreated","combinedNamespaces","useCombinedRuleNamespaces","filteredNamespaces","useFilteredRules","AlertingPageWrapper","CreateAlertButton","ExportNewRuleButton","RuleStats","returnTo","RuleListV2","RuleList","newView","withPageErrorBoundary","actions","children","alertmanagerActions","isAlertmanagerAction","alertSourceActions","isAlertingAction","AuthorizeAlertmanager","AuthorizeAlertsource","alertmanagerAbilties","actionsAllowed","alertSourceAbilities","abilities","_supported","allowed","action","MAX_CONTACT_POINTS_RENDERED","sleep","ms","resolve","LOADING_SPINNER_DURATION","ContactPointSelector","selectProps","showRefreshButton","selectedContactPointName","onError","selectedAlertmanager","contactPoints","refetch","loaderSpinning","setLoaderSpinning","options","contactPoint","matchedContactPoint","option","onClickRefresh","rotation","tooltip","icon","to","target","className","tooltipPlacement","rest","ariaLabel","MultipleDataSourcePicker","props","dataSourceSrv","setState","onChange","items","actionMeta","selectedItem","dataSourceName","dsSettings","getCurrentValue","current","hideTextValue","noDefault","uid","getDataSourceOptions","alerting","tracing","metrics","mixed","dashboard","variables","annotations","pluginId","type","filter","logs","dataSources","alertManagingDs","nonAlertManagingDs","autoFocus","onBlur","onClear","openMenuOnFocus","placeholder","inputId","disabled","value","isClearable","o","PluginSignatureBadge","ViewOptions","RulesViewModeSelectorV2","updateQueryParams","useURLSearchParams","selectedViewOption","handleViewChange","RadioButtonGroup","LegacyViewOptions","RulesViewModeSelectorV1","viewParam","currentView","viewParamToLegacyView","RulesViewModeSelector","RuleTypeOptions","RuleHealthOptions","canRenderContactPointSelector","RuleStateOptions","key","RulesFilter","pluginsFilterEnabled","usePluginsFilterStatus","searchQuery","setSearchQuery","updateFilters","filterKey","setFilterKey","dataSourceKey","queryStringKey","searchQueryRef","handleSubmit","register","setValue","handleDataSourceChange","dataSourceValue","dataSourceNames","handleDashboardChange","dashboardUid","clearDataSource","handleAlertStateChange","handleRuleTypeChange","ruleType","handleRuleHealthChange","ruleHealth","handleClearFiltersClick","handleContactPointChange","searchIcon","Field","Label","DashboardPicker","selectValue","data","SearchQueryHelp","Input","e","helpStyles","HelpRow","title","expr","components","useAlertingHomePageExtensions","summary","health","href","lastEvaluation","evaluationInterval","isPaused","application","labels","origin","operation","listItemAriaId","metadata","EvaluationMetadata","Summary","RecordingRuleListItem","RuleOperationListItem","content","nextEvaluation","UnknownRuleListItem","ruleName","groupIdentifier","ruleDefinition","ruleContext","isGrafanaApp","isDataSourceApp","ListItem","description","meta","metaRight","testId","ariaAttributes","index","Separator","SkeletonListItem","collapsed","pagination","toggleCollapsed","Namespace","DataSourceIcon","size","RuleOperation","icons","color","stateNames","operationIcons","ICON_SIZE","RuleListIcon","recording","iconName","iconColor","stateName","spin","useRulesAccess","callback","delay","savedCallback","interval_1"],"sourceRoot":""}