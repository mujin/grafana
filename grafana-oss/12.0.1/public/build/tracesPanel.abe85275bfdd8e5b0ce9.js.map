{"version":3,"file":"tracesPanel.abe85275bfdd8e5b0ce9.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/panel/traces/TagsEditor.tsx","webpack://grafana/./public/app/plugins/panel/traces/TracesPanel.tsx","webpack://grafana/./public/app/plugins/panel/traces/suggestions.ts","webpack://grafana/./public/app/plugins/panel/traces/module.tsx"],"sourcesContent":["import { useEffect, useMemo, useState } from 'react';\n\nimport { SelectableValue, StandardEditorProps } from '@grafana/data';\n\nimport { SpanFiltersTags } from '../../../features/explore/TraceView/components/TracePageHeader/SpanFilters/SpanFiltersTags';\nimport { defaultTagFilter, SearchProps } from '../../../features/explore/TraceView/useSearch';\nimport { transformDataFrames } from '../../../features/explore/TraceView/utils/transform';\n\ntype Props = StandardEditorProps<SearchProps, unknown, SearchProps>;\n\nexport const TagsEditor = ({ value, onChange, context }: Props) => {\n  const trace = useMemo(() => transformDataFrames(context.data[0]), [context.data]);\n  const [tagKeys, setTagKeys] = useState<Array<SelectableValue<string>>>();\n  const [tagValues, setTagValues] = useState<{ [key: string]: Array<SelectableValue<string>> }>({});\n\n  useEffect(() => {\n    if (!value.tags) {\n      onChange({ ...value, tags: [defaultTagFilter] });\n    }\n  }, [onChange, value]);\n\n  if (!trace) {\n    return null;\n  }\n\n  return (\n    <SpanFiltersTags\n      search={value}\n      setSearch={onChange}\n      trace={trace}\n      tagKeys={tagKeys}\n      setTagKeys={setTagKeys}\n      tagValues={tagValues}\n      setTagValues={setTagValues}\n    />\n  );\n};\n","import { css } from '@emotion/css';\nimport { useMemo, createRef } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { Field, LinkModel, PanelProps } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { TraceView } from 'app/features/explore/TraceView/TraceView';\nimport { SpanLinkFunc } from 'app/features/explore/TraceView/components';\nimport { transformDataFrames } from 'app/features/explore/TraceView/utils/transform';\n\nimport { replaceSearchVariables, SearchProps } from '../../../features/explore/TraceView/useSearch';\n\nconst styles = {\n  wrapper: css({\n    height: '100%',\n    overflow: 'scroll',\n  }),\n};\n\nexport interface TracesPanelOptions {\n  createSpanLink?: SpanLinkFunc;\n  focusedSpanId?: string;\n  createFocusSpanLink?: (traceId: string, spanId: string) => LinkModel<Field>;\n  spanFilters?: SearchProps;\n}\n\nexport const TracesPanel = ({ data, options, replaceVariables }: PanelProps<TracesPanelOptions>) => {\n  const topOfViewRef = createRef<HTMLDivElement>();\n  const traceProp = useMemo(() => transformDataFrames(data.series[0]), [data.series]);\n  const dataSource = useAsync(async () => {\n    return await getDataSourceSrv().get(data.request?.targets[0].datasource?.uid);\n  });\n\n  if (!data || !data.series.length || !traceProp) {\n    return (\n      <div className=\"panel-empty\">\n        <p>No data found in response</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      <div ref={topOfViewRef}></div>\n      <TraceView\n        dataFrames={data.series}\n        scrollElementClass={styles.wrapper}\n        traceProp={traceProp}\n        datasource={dataSource.value}\n        topOfViewRef={topOfViewRef}\n        createSpanLink={options.createSpanLink}\n        focusedSpanId={options.focusedSpanId}\n        createFocusSpanLink={options.createFocusSpanLink}\n        spanFilters={replaceSearchVariables(replaceVariables, options.spanFilters)}\n        timeRange={data.timeRange}\n      />\n    </div>\n  );\n};\n","import { VisualizationSuggestionsBuilder, VisualizationSuggestionScore } from '@grafana/data';\nimport { SuggestionName } from 'app/types/suggestions';\n\nexport class TracesSuggestionsSupplier {\n  getListWithDefaults(builder: VisualizationSuggestionsBuilder) {\n    return builder.getListAppender<{}, {}>({\n      name: SuggestionName.Trace,\n      pluginId: 'traces',\n    });\n  }\n\n  getSuggestionsForData(builder: VisualizationSuggestionsBuilder) {\n    if (!builder.data) {\n      return;\n    }\n\n    const dataFrame = builder.data.series[0];\n    if (!dataFrame) {\n      return;\n    }\n\n    if (builder.data.series[0].meta?.preferredVisualisationType === 'trace') {\n      this.getListWithDefaults(builder).append({\n        name: SuggestionName.Trace,\n        score: VisualizationSuggestionScore.Best,\n      });\n    }\n  }\n}\n","import { PanelPlugin, toOption } from '@grafana/data';\n\nimport { getTraceServiceNames, getTraceSpanNames } from '../../../features/explore/TraceView/utils/tags';\nimport { transformDataFrames } from '../../../features/explore/TraceView/utils/transform';\n\nimport { TagsEditor } from './TagsEditor';\nimport { TracesPanel } from './TracesPanel';\nimport { TracesSuggestionsSupplier } from './suggestions';\n\nexport const plugin = new PanelPlugin(TracesPanel)\n  .setPanelOptions((builder, context) => {\n    const category = ['Span filters'];\n    const trace = transformDataFrames(context?.data?.[0]);\n\n    // Find\n    builder\n      .addTextInput({\n        path: 'spanFilters.query',\n        name: 'Find in trace',\n        category,\n      })\n      .addBooleanSwitch({\n        path: 'spanFilters.matchesOnly',\n        name: 'Show matches only',\n        defaultValue: false,\n        category,\n      })\n      .addBooleanSwitch({\n        path: 'spanFilters.criticalPathOnly',\n        name: 'Show critical path only',\n        defaultValue: false,\n        category,\n      });\n\n    // Service name\n    builder\n      .addSelect({\n        path: 'spanFilters.serviceName',\n        name: 'Service name',\n        category,\n        settings: {\n          options: trace ? getTraceServiceNames(trace).map(toOption) : [],\n          allowCustomValue: true,\n          isClearable: true,\n        },\n      })\n      .addRadio({\n        path: 'spanFilters.serviceNameOperator',\n        name: 'Service name operator',\n        defaultValue: '=',\n        settings: {\n          options: [\n            { value: '=', label: '=' },\n            { value: '!=', label: '!=' },\n          ],\n        },\n        category,\n      });\n\n    // Span name\n    builder\n      .addSelect({\n        path: 'spanFilters.spanName',\n        name: 'Span name',\n        category,\n        settings: {\n          options: trace ? getTraceSpanNames(trace).map(toOption) : [],\n          allowCustomValue: true,\n          isClearable: true,\n        },\n      })\n      .addRadio({\n        path: 'spanFilters.spanNameOperator',\n        name: 'Span name operator',\n        defaultValue: '=',\n        settings: {\n          options: [\n            { value: '=', label: '=' },\n            { value: '!=', label: '!=' },\n          ],\n        },\n        category,\n      });\n\n    // Duration\n    builder\n      .addTextInput({\n        path: 'spanFilters.from',\n        name: 'Min duration',\n        category,\n      })\n      .addTextInput({\n        path: 'spanFilters.to',\n        name: 'Max duration',\n        category,\n      });\n\n    builder.addCustomEditor({\n      id: 'tags',\n      name: 'Tags',\n      path: 'spanFilters',\n      category,\n      editor: TagsEditor,\n      defaultValue: undefined,\n    });\n  })\n  .setSuggestionsSupplier(new TracesSuggestionsSupplier());\n"],"names":["TagsEditor","value","onChange","context","trace","transform","tagKeys","setTagKeys","tagValues","setTagValues","SpanFiltersTags","styles","TracesPanel","data","options","replaceVariables","topOfViewRef","traceProp","dataSource","useAsync","TraceView","TracesSuggestionsSupplier","builder","PanelPlugin","category"],"sourceRoot":""}