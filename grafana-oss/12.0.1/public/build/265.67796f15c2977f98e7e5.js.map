{"version":3,"file":"265.67796f15c2977f98e7e5.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/RolePicker/ValueContainer.tsx","webpack://grafana/./public/app/core/components/RolePicker/constants.ts","webpack://grafana/./public/app/core/components/RolePicker/RolePickerInput.tsx","webpack://grafana/./public/app/core/components/RolePicker/styles.ts","webpack://grafana/./public/app/core/components/RolePicker/BuiltinRoleSelector.tsx","webpack://grafana/./public/app/core/components/RolePicker/RoleMenuGroupOption.tsx","webpack://grafana/./public/app/core/components/RolePicker/RoleMenuOption.tsx","webpack://grafana/./public/app/core/components/RolePicker/RolePickerSubMenu.tsx","webpack://grafana/./public/app/core/components/RolePicker/RoleMenuGroupsSection.tsx","webpack://grafana/./public/app/core/components/RolePicker/RolePickerMenu.tsx","webpack://grafana/./public/app/core/components/RolePicker/RolePicker.tsx","webpack://grafana/./public/app/core/components/RolePicker/api.ts","webpack://grafana/./public/app/core/components/RolePicker/utils.ts"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport { forwardRef, ReactNode } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { getInputStyles, Icon, IconName, useStyles2, getSelectStyles } from '@grafana/ui';\n\nexport interface Props {\n  children: ReactNode;\n  iconName?: IconName;\n}\nexport const ValueContainer = forwardRef<HTMLDivElement, Props>(({ children, iconName }, ref) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <div className={styles.container} ref={ref}>\n      {iconName && <Icon name={iconName} size=\"xs\" />}\n      {children}\n    </div>\n  );\n});\n\nValueContainer.displayName = 'ValueContainer';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const { prefix } = getInputStyles({ theme });\n  const { multiValueContainer } = getSelectStyles(theme);\n  return {\n    container: cx(\n      prefix,\n      multiValueContainer,\n      css({\n        position: 'relative',\n        padding: theme.spacing(0.5, 1, 0.5, 1),\n\n        svg: {\n          marginRight: theme.spacing(0.5),\n        },\n      })\n    ),\n  };\n};\n","export const ROLE_PICKER_WIDTH = 360;\n\nexport const MENU_MAX_HEIGHT = 300; // max height for the picker's dropdown menu\n\nexport const ROLE_PICKER_MENU_MIN_WIDTH = 320;\nexport const ROLE_PICKER_MENU_MAX_WIDTH = 360;\n\nexport const ROLE_PICKER_SUBMENU_MIN_WIDTH = 320;\nexport const ROLE_PICKER_SUBMENU_MAX_WIDTH = 360;\n\nexport const ROLE_PICKER_MAX_MENU_WIDTH = ROLE_PICKER_MENU_MAX_WIDTH + ROLE_PICKER_SUBMENU_MAX_WIDTH;\n","import { css, cx } from '@emotion/css';\nimport { FormEvent, HTMLProps, useEffect, useRef } from 'react';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, getInputStyles, sharedInputStyle, Tooltip, Icon, Spinner } from '@grafana/ui';\nimport { getFocusStyles } from '@grafana/ui/internal';\nimport { Trans } from 'app/core/internationalization';\n\nimport { Role } from '../../../types';\n\nimport { ValueContainer } from './ValueContainer';\nimport { ROLE_PICKER_WIDTH } from './constants';\n\nconst stopPropagation = (event: React.MouseEvent<HTMLDivElement>) => event.stopPropagation();\n\ninterface InputProps extends HTMLProps<HTMLInputElement> {\n  appliedRoles: Role[];\n  basicRole?: string;\n  query: string;\n  showBasicRole?: boolean;\n  isFocused?: boolean;\n  disabled?: boolean;\n  width?: string;\n  isLoading?: boolean;\n  onQueryChange: (query?: string) => void;\n  onOpen: (event: FormEvent<HTMLElement>) => void;\n  onClose: () => void;\n}\n\nexport const RolePickerInput = ({\n  appliedRoles,\n  basicRole,\n  disabled,\n  isFocused,\n  query,\n  showBasicRole,\n  width,\n  isLoading,\n  onOpen,\n  onClose,\n  onQueryChange,\n  ...rest\n}: InputProps): JSX.Element => {\n  const styles = useStyles2(getRolePickerInputStyles, false, !!isFocused, !!disabled, false, width);\n  const inputRef = useRef<HTMLInputElement | null>(null);\n\n  useEffect(() => {\n    if (isFocused) {\n      inputRef.current?.focus();\n    }\n  });\n\n  const onInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const query = event.target?.value;\n    onQueryChange(query);\n  };\n\n  const showBasicRoleOnLabel = showBasicRole && basicRole !== 'None';\n\n  return !isFocused ? (\n    // TODO: fix keyboard a11y\n    // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n    <div className={cx(styles.wrapper, styles.selectedRoles)} onMouseDown={onOpen}>\n      {showBasicRoleOnLabel && <ValueContainer>{basicRole}</ValueContainer>}\n      <RolesLabel\n        appliedRoles={appliedRoles}\n        numberOfRoles={appliedRoles.length}\n        showBuiltInRole={showBasicRoleOnLabel}\n      />\n      {isLoading && (\n        <div className={styles.spinner}>\n          <Spinner size={16} inline />\n        </div>\n      )}\n    </div>\n  ) : (\n    <div className={styles.wrapper}>\n      {showBasicRoleOnLabel && <ValueContainer>{basicRole}</ValueContainer>}\n      {appliedRoles.map((role) => (\n        <ValueContainer key={role.uid}>{role.group + ':' + (role.displayName || role.name)}</ValueContainer>\n      ))}\n\n      {!disabled && (\n        <input\n          {...rest}\n          className={styles.input}\n          ref={inputRef}\n          onMouseDown={stopPropagation}\n          onChange={onInputChange}\n          data-testid=\"role-picker-input\"\n          placeholder={isFocused ? 'Select role' : ''}\n          value={query}\n        />\n      )}\n      <div className={styles.suffix}>\n        <Icon name=\"angle-up\" className={styles.dropdownIndicator} onMouseDown={onClose} />\n      </div>\n    </div>\n  );\n};\n\nRolePickerInput.displayName = 'RolePickerInput';\n\ninterface RolesLabelProps {\n  appliedRoles: Role[];\n  showBuiltInRole?: boolean;\n  numberOfRoles: number;\n}\n\nexport const RolesLabel = ({ showBuiltInRole, numberOfRoles, appliedRoles }: RolesLabelProps): JSX.Element => {\n  const styles = useStyles2((theme) => getTooltipStyles(theme));\n\n  return (\n    <>\n      {!!numberOfRoles ? (\n        <Tooltip\n          content={\n            <div className={styles.tooltip}>\n              {appliedRoles?.map((role) => <p key={role.uid}>{role.group + ':' + (role.displayName || role.name)}</p>)}\n            </div>\n          }\n        >\n          <ValueContainer>{`${showBuiltInRole ? '+' : ''}${numberOfRoles} role${\n            numberOfRoles > 1 ? 's' : ''\n          }`}</ValueContainer>\n        </Tooltip>\n      ) : (\n        !showBuiltInRole && (\n          <ValueContainer>\n            <Trans i18nKey=\"role-picker.input.no-roles\">No roles assigned</Trans>\n          </ValueContainer>\n        )\n      )}\n    </>\n  );\n};\n\nconst getRolePickerInputStyles = (\n  theme: GrafanaTheme2,\n  invalid: boolean,\n  focused: boolean,\n  disabled: boolean,\n  withPrefix: boolean,\n  width?: string\n) => {\n  const styles = getInputStyles({ theme, invalid });\n\n  return {\n    wrapper: cx(\n      styles.wrapper,\n      sharedInputStyle(theme, invalid),\n      focused && css(getFocusStyles(theme)),\n      disabled && styles.inputDisabled,\n      css({\n        minWidth: width || ROLE_PICKER_WIDTH + 'px',\n        width: width,\n        minHeight: '32px',\n        maxHeight: '200px',\n        overflow: 'scroll',\n        overflowX: 'hidden',\n        overflowY: 'auto',\n        height: 'auto',\n        flexDirection: 'row',\n        paddingRight: theme.spacing(1),\n        maxWidth: '100%',\n        alignItems: 'center',\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'flex-start',\n        position: 'relative',\n        boxSizing: 'border-box',\n        cursor: 'default',\n      }),\n      withPrefix &&\n        css({\n          paddingLeft: 0,\n        })\n    ),\n    input: cx(\n      sharedInputStyle(theme, invalid),\n      css({\n        maxWidth: '120px',\n        border: 'none',\n        cursor: focused ? 'default' : 'pointer',\n      })\n    ),\n    suffix: styles.suffix,\n    dropdownIndicator: css({\n      cursor: 'pointer',\n    }),\n    selectedRoles: css({\n      display: 'flex',\n      alignItems: 'center',\n      cursor: disabled ? 'not-allowed' : 'pointer',\n    }),\n    tooltip: css({\n      p: {\n        marginBottom: theme.spacing(0.5),\n      },\n    }),\n    spinner: css({\n      display: 'flex',\n      flexGrow: 1,\n      justifyContent: 'flex-end',\n    }),\n  };\n};\n\nconst getTooltipStyles = (theme: GrafanaTheme2) => ({\n  tooltip: css({\n    p: {\n      marginBottom: theme.spacing(0.5),\n    },\n  }),\n});\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport {\n  ROLE_PICKER_MENU_MAX_WIDTH,\n  ROLE_PICKER_MENU_MIN_WIDTH,\n  ROLE_PICKER_SUBMENU_MAX_WIDTH,\n  ROLE_PICKER_SUBMENU_MIN_WIDTH,\n} from './constants';\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  hideScrollBar: css({\n    '.scrollbar-view': {\n      /* Hide scrollbar for Chrome, Safari, and Opera */\n      '&::-webkit-scrollbar': {\n        display: 'none',\n      },\n      /* Hide scrollbar for Firefox */\n      scrollbarWidth: 'none',\n    },\n  }),\n  menuWrapper: css({\n    display: 'flex',\n    maxHeight: '650px',\n    position: 'absolute',\n    zIndex: theme.zIndex.dropdown,\n    overflow: 'hidden',\n    minWidth: 'auto',\n  }),\n  menu: css({\n    minWidth: `${ROLE_PICKER_MENU_MIN_WIDTH}px`,\n    maxWidth: `${ROLE_PICKER_MENU_MAX_WIDTH}px`,\n    '& > div': {\n      paddingTop: theme.spacing(1),\n    },\n  }),\n  menuLeft: css({\n    flexDirection: 'row-reverse',\n  }),\n  subMenu: css({\n    height: '100%',\n    minWidth: `${ROLE_PICKER_SUBMENU_MIN_WIDTH}px`,\n    maxWidth: `${ROLE_PICKER_SUBMENU_MAX_WIDTH}px`,\n    display: 'flex',\n    flexDirection: 'column',\n    borderLeft: `1px solid ${theme.components.input.borderColor}`,\n\n    '& > div': {\n      paddingTop: theme.spacing(1),\n    },\n  }),\n  subMenuLeft: css({\n    borderRight: `1px solid ${theme.components.input.borderColor}`,\n    borderLeft: 'unset',\n  }),\n  groupHeader: css({\n    padding: theme.spacing(0, 4.5),\n    display: 'flex',\n    alignItems: 'center',\n    color: theme.colors.text.primary,\n    fontWeight: theme.typography.fontWeightBold,\n  }),\n  container: css({\n    padding: theme.spacing(1),\n    border: `1px ${theme.colors.border.weak} solid`,\n    borderRadius: theme.shape.radius.default,\n    backgroundColor: theme.colors.background.primary,\n    zIndex: theme.zIndex.modal,\n  }),\n  menuSection: css({\n    marginBottom: theme.spacing(2),\n  }),\n  menuOptionCheckbox: css({\n    display: 'flex',\n    margin: theme.spacing(0, 1, 0, 0.25),\n  }),\n  menuButtonRow: css({\n    backgroundColor: theme.colors.background.primary,\n    padding: theme.spacing(1),\n  }),\n  menuOptionBody: css({\n    fontWeight: theme.typography.fontWeightRegular,\n    padding: theme.spacing(0, 1.5, 0, 0),\n  }),\n  menuOptionDisabled: css({\n    color: theme.colors.text.disabled,\n    cursor: 'not-allowed',\n  }),\n  menuOptionExpand: css({\n    position: 'absolute',\n    right: theme.spacing(2.5),\n    color: theme.colors.text.disabled,\n\n    '&:after': {\n      content: '\">\"',\n    },\n  }),\n  menuOptionInfoSign: css({\n    color: theme.colors.text.disabled,\n  }),\n  basicRoleSelector: css({\n    margin: theme.spacing(1, 1.25, 1, 1.5),\n  }),\n  subMenuPortal: css({\n    height: '100%',\n    '> div': {\n      height: '100%',\n    },\n  }),\n  subMenuButtonRow: css({\n    backgroundColor: theme.colors.background.primary,\n    padding: theme.spacing(1),\n  }),\n  checkboxPartiallyChecked: css({\n    input: {\n      '&:checked + span': {\n        '&:after': {\n          borderWidth: '0 3px 0px 0',\n          transform: 'rotate(90deg)',\n        },\n      },\n    },\n  }),\n  loadingSpinner: css({\n    marginLeft: theme.spacing(1),\n  }),\n});\n","import { SelectableValue } from '@grafana/data';\nimport { Icon, RadioButtonList, Tooltip, useStyles2, useTheme2, PopoverContent } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\nimport { OrgRole } from 'app/types';\n\nimport { getStyles } from './styles';\n\nconst BasicRoleOption: Array<SelectableValue<OrgRole>> = Object.values(OrgRole).map((r) => ({\n  label: r === OrgRole.None ? 'No basic role' : r,\n  value: r,\n}));\n\ninterface Props {\n  value?: OrgRole;\n  onChange: (value: OrgRole) => void;\n  disabled?: boolean;\n  disabledMesssage?: string;\n  tooltipMessage?: PopoverContent;\n}\n\nexport const BuiltinRoleSelector = ({ value, onChange, disabled, disabledMesssage, tooltipMessage }: Props) => {\n  const styles = useStyles2(getStyles);\n  const theme = useTheme2();\n\n  return (\n    <>\n      <div className={styles.groupHeader}>\n        <span style={{ marginRight: theme.spacing(1) }}>\n          <Trans i18nKey=\"role-picker.built-in.basic-roles\">Basic roles</Trans>\n        </span>\n        {disabled && disabledMesssage && (\n          <Tooltip placement=\"right-end\" interactive={true} content={<div>{disabledMesssage}</div>}>\n            <Icon name=\"question-circle\" />\n          </Tooltip>\n        )}\n        {!disabled && tooltipMessage && (\n          <Tooltip placement=\"right-end\" interactive={true} content={tooltipMessage}>\n            <Icon name=\"info-circle\" size=\"xs\" />\n          </Tooltip>\n        )}\n      </div>\n      <RadioButtonList\n        name=\"Basic Role Selector\"\n        className={styles.basicRoleSelector}\n        options={BasicRoleOption}\n        value={value}\n        onChange={onChange}\n        disabled={disabled}\n      />\n    </>\n  );\n};\n","import { cx } from '@emotion/css';\nimport { FormEvent, memo } from 'react';\nimport * as React from 'react';\n\nimport { Checkbox, Portal, useStyles2, useTheme2 } from '@grafana/ui';\nimport { getSelectStyles } from '@grafana/ui/internal';\n\nimport { t } from '../../internationalization';\n\nimport { getStyles } from './styles';\n\ninterface RoleMenuGroupsOptionProps {\n  // display name\n  name: string;\n  // group id\n  value: string;\n  onChange: (value: string) => void;\n  onClick?: (value: string) => void;\n  onOpenSubMenu?: (value: string) => void;\n  onCloseSubMenu?: () => void;\n  isSelected?: boolean;\n  partiallySelected?: boolean;\n  isFocused?: boolean;\n  disabled?: boolean;\n  children?: React.ReactNode;\n  root?: HTMLElement;\n}\n\nexport const RoleMenuGroupOption = memo(\n  React.forwardRef<HTMLDivElement, RoleMenuGroupsOptionProps>(\n    (\n      {\n        name,\n        value,\n        isFocused,\n        isSelected,\n        partiallySelected,\n        disabled,\n        onChange,\n        onClick,\n        onOpenSubMenu,\n        onCloseSubMenu,\n        children,\n        root,\n      },\n      ref\n    ) => {\n      const theme = useTheme2();\n      const styles = getSelectStyles(theme);\n      const customStyles = useStyles2(getStyles);\n\n      const wrapperClassName = cx(\n        styles.option,\n        isFocused && styles.optionFocused,\n        disabled && customStyles.menuOptionDisabled\n      );\n\n      const onChangeInternal = (event: FormEvent<HTMLElement>) => {\n        if (disabled) {\n          return;\n        }\n        if (value) {\n          onChange(value);\n        }\n      };\n\n      const onClickInternal = (event: FormEvent<HTMLElement>) => {\n        if (onClick) {\n          onClick(value!);\n        }\n      };\n\n      const onMouseEnter = () => {\n        if (onOpenSubMenu) {\n          onOpenSubMenu(value!);\n        }\n      };\n\n      const onMouseLeave = () => {\n        if (onCloseSubMenu) {\n          onCloseSubMenu();\n        }\n      };\n\n      return (\n        <div onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave}>\n          {/* TODO: fix keyboard a11y */}\n          {/* eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions */}\n          <div\n            ref={ref}\n            className={wrapperClassName}\n            aria-label={t('role-picker.menu-group-option-aria-label', 'Role picker option')}\n            onClick={onClickInternal}\n          >\n            <Checkbox\n              value={isSelected}\n              className={cx(customStyles.menuOptionCheckbox, {\n                [customStyles.checkboxPartiallyChecked]: partiallySelected,\n              })}\n              onChange={onChangeInternal}\n              disabled={disabled}\n            />\n            <div className={cx(styles.optionBody, customStyles.menuOptionBody)}>\n              <span>{name}</span>\n              <span className={customStyles.menuOptionExpand} />\n            </div>\n            {root && children && (\n              <Portal className={customStyles.subMenuPortal} root={root}>\n                {children}\n              </Portal>\n            )}\n          </div>\n        </div>\n      );\n    }\n  )\n);\n\nRoleMenuGroupOption.displayName = 'RoleMenuGroupOption';\n","import { cx } from '@emotion/css';\nimport { forwardRef, FormEvent } from 'react';\n\nimport { Checkbox, Icon, Tooltip, useStyles2, useTheme2 } from '@grafana/ui';\nimport { getSelectStyles } from '@grafana/ui/internal';\nimport { Role } from 'app/types';\n\nimport { t } from '../../internationalization';\n\nimport { getStyles } from './styles';\n\ninterface RoleMenuOptionProps {\n  data: Role;\n  onChange: (value: Role) => void;\n  useFilteredDisplayName?: boolean;\n  isSelected?: boolean;\n  isFocused?: boolean;\n  disabled?: boolean;\n  mapped?: boolean;\n  hideDescription?: boolean;\n}\n\nexport const RoleMenuOption = forwardRef<HTMLDivElement, React.PropsWithChildren<RoleMenuOptionProps>>(\n  ({ data, isFocused, isSelected, useFilteredDisplayName, disabled, mapped, onChange, hideDescription }, ref) => {\n    const theme = useTheme2();\n    const styles = getSelectStyles(theme);\n    const customStyles = useStyles2(getStyles);\n    disabled = disabled || mapped;\n    let disabledMessage = '';\n    if (disabled) {\n      disabledMessage = 'You do not have permissions to assign this role.';\n      if (mapped) {\n        disabledMessage = 'Role assignment cannot be removed because the role is mapped through group sync.';\n      }\n    }\n\n    const wrapperClassName = cx(\n      styles.option,\n      isFocused && styles.optionFocused,\n      disabled && customStyles.menuOptionDisabled\n    );\n\n    const onChangeInternal = (event: FormEvent<HTMLElement>) => {\n      if (disabled) {\n        return;\n      }\n      event.preventDefault();\n      event.stopPropagation();\n      onChange(data);\n    };\n\n    return (\n      // TODO: fix keyboard a11y\n      // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions\n      <div\n        ref={ref}\n        className={wrapperClassName}\n        aria-label={t('role-picker.menu-option-aria-label', 'Role picker option')}\n        onClick={onChangeInternal}\n      >\n        <Checkbox\n          value={isSelected}\n          className={customStyles.menuOptionCheckbox}\n          onChange={onChangeInternal}\n          disabled={disabled}\n        />\n        <div className={cx(styles.optionBody, customStyles.menuOptionBody)}>\n          <span>{(useFilteredDisplayName && data.filteredDisplayName) || data.displayName || data.name}</span>\n          {!hideDescription && data.description && <div className={styles.optionDescription}>{data.description}</div>}\n        </div>\n        {disabledMessage && (\n          <Tooltip content={disabledMessage}>\n            <Icon name=\"lock\" />\n          </Tooltip>\n        )}\n        {data.description && (\n          <Tooltip content={data.description}>\n            <Icon name=\"info-circle\" className={customStyles.menuOptionInfoSign} />\n          </Tooltip>\n        )}\n      </div>\n    );\n  }\n);\n\nRoleMenuOption.displayName = 'RoleMenuOption';\n","import { cx } from '@emotion/css';\n\nimport { Button, ScrollContainer, Stack, useStyles2, useTheme2 } from '@grafana/ui';\nimport { getSelectStyles } from '@grafana/ui/internal';\nimport { t, Trans } from 'app/core/internationalization';\nimport { Role } from 'app/types';\n\nimport { RoleMenuOption } from './RoleMenuOption';\nimport { MENU_MAX_HEIGHT } from './constants';\nimport { getStyles } from './styles';\nimport { isNotDelegatable } from './utils';\n\ninterface RolePickerSubMenuProps {\n  options: Role[];\n  selectedOptions: Role[];\n  disabledOptions?: Role[];\n  onSelect: (option: Role) => void;\n  onClear?: () => void;\n  showOnLeft?: boolean;\n}\n\nexport const RolePickerSubMenu = ({\n  options,\n  selectedOptions,\n  disabledOptions,\n  onSelect,\n  onClear,\n  showOnLeft,\n}: RolePickerSubMenuProps): JSX.Element => {\n  const theme = useTheme2();\n  const styles = getSelectStyles(theme);\n  const customStyles = useStyles2(getStyles);\n\n  const onClearInternal = async () => {\n    if (onClear) {\n      onClear();\n    }\n  };\n\n  return (\n    <div\n      className={cx(customStyles.subMenu, { [customStyles.subMenuLeft]: showOnLeft })}\n      aria-label={t('role-picker.sub-menu-aria-label', 'Role picker submenu')}\n    >\n      <ScrollContainer maxHeight={`${MENU_MAX_HEIGHT}px`}>\n        <div className={styles.optionBody}>\n          {options.map((option, i) => (\n            <RoleMenuOption\n              data={option}\n              useFilteredDisplayName={false}\n              key={i}\n              isSelected={\n                !!(\n                  option.uid &&\n                  (!!selectedOptions.find((opt) => opt.uid === option.uid) ||\n                    disabledOptions?.find((opt) => opt.uid === option.uid))\n                )\n              }\n              disabled={\n                !!(option.uid && disabledOptions?.find((opt) => opt.uid === option.uid)) || isNotDelegatable(option)\n              }\n              mapped={!!(option.uid && selectedOptions.find((opt) => opt.uid === option.uid && opt.mapped))}\n              onChange={onSelect}\n              hideDescription\n            />\n          ))}\n        </div>\n      </ScrollContainer>\n      <div className={customStyles.subMenuButtonRow}>\n        <Stack justifyContent=\"flex-end\">\n          <Button size=\"sm\" fill=\"text\" onClick={onClearInternal}>\n            <Trans i18nKey=\"role-picker.sub-menu.clear-button\">Clear</Trans>\n          </Button>\n        </Stack>\n      </div>\n    </div>\n  );\n};\n","import { forwardRef, useCallback, useState } from 'react';\n\nimport { useStyles2, getSelectStyles, useTheme2 } from '@grafana/ui';\nimport { Role } from 'app/types';\n\nimport { RoleMenuGroupOption } from './RoleMenuGroupOption';\nimport { RoleMenuOption } from './RoleMenuOption';\nimport { RolePickerSubMenu } from './RolePickerSubMenu';\nimport { getStyles } from './styles';\nimport { isNotDelegatable } from './utils';\n\ninterface RoleMenuGroupsSectionProps {\n  roles: Role[];\n  isFiltered?: boolean;\n  renderedName: string;\n  showGroups?: boolean;\n  optionGroups: Array<{\n    name: string;\n    options: Role[];\n    value: string;\n  }>;\n  onGroupChange: (value: string) => void;\n  groupSelected: (group: string) => boolean;\n  groupPartiallySelected: (group: string) => boolean;\n  disabled?: boolean;\n  subMenuNode?: HTMLDivElement;\n  selectedOptions: Role[];\n  onRoleChange: (option: Role) => void;\n  onClearSubMenu: (group: string) => void;\n  showOnLeftSubMenu?: boolean;\n}\n\nexport const RoleMenuGroupsSection = forwardRef<HTMLDivElement, RoleMenuGroupsSectionProps>(\n  (\n    {\n      roles,\n      isFiltered,\n      renderedName,\n      showGroups,\n      optionGroups,\n      onGroupChange,\n      groupSelected,\n      groupPartiallySelected,\n      subMenuNode,\n      selectedOptions,\n      onRoleChange,\n      onClearSubMenu,\n      showOnLeftSubMenu,\n    },\n    _ref\n  ) => {\n    const [showSubMenu, setShowSubMenu] = useState(false);\n    const [openedMenuGroup, setOpenedMenuGroup] = useState('');\n\n    const theme = useTheme2();\n    const selectStyles = getSelectStyles(theme);\n    const styles = useStyles2(getStyles);\n\n    const onOpenSubMenu = useCallback((value: string) => {\n      setOpenedMenuGroup(value);\n      setShowSubMenu(true);\n    }, []);\n\n    const onCloseSubMenu = useCallback(() => {\n      setShowSubMenu(false);\n      setOpenedMenuGroup('');\n    }, []);\n\n    return (\n      <div>\n        {roles.length > 0 && (\n          <div className={styles.menuSection}>\n            <div className={styles.groupHeader}>{renderedName}</div>\n            <div className={selectStyles.optionBody}></div>\n            {showGroups && !!optionGroups?.length\n              ? optionGroups.map((groupOption) => (\n                  <RoleMenuGroupOption\n                    key={groupOption.value}\n                    name={groupOption.name}\n                    value={groupOption.value}\n                    isSelected={groupSelected(groupOption.value) || groupPartiallySelected(groupOption.value)}\n                    partiallySelected={groupPartiallySelected(groupOption.value)}\n                    disabled={groupOption.options?.every(\n                      (option) =>\n                        isNotDelegatable(option) || selectedOptions.find((opt) => opt.uid === option.uid && opt.mapped)\n                    )}\n                    onChange={onGroupChange}\n                    onOpenSubMenu={onOpenSubMenu}\n                    onCloseSubMenu={onCloseSubMenu}\n                    root={subMenuNode}\n                    isFocused={showSubMenu && openedMenuGroup === groupOption.value}\n                  >\n                    {showSubMenu && openedMenuGroup === groupOption.value && (\n                      <RolePickerSubMenu\n                        options={groupOption.options}\n                        selectedOptions={selectedOptions}\n                        onSelect={onRoleChange}\n                        onClear={() => onClearSubMenu(openedMenuGroup)}\n                        showOnLeft={showOnLeftSubMenu}\n                      />\n                    )}\n                  </RoleMenuGroupOption>\n                ))\n              : roles.map((option) => (\n                  <RoleMenuOption\n                    useFilteredDisplayName={isFiltered}\n                    data={option}\n                    key={option.uid}\n                    isSelected={!!(option.uid && !!selectedOptions.find((opt) => opt.uid === option.uid))}\n                    disabled={isNotDelegatable(option)}\n                    mapped={!!(option.uid && selectedOptions.find((opt) => opt.uid === option.uid && opt.mapped))}\n                    onChange={onRoleChange}\n                    hideDescription\n                  />\n                ))}\n          </div>\n        )}\n      </div>\n    );\n  }\n);\n\nRoleMenuGroupsSection.displayName = 'RoleMenuGroupsSection';\n","import { css, cx } from '@emotion/css';\nimport { useEffect, useRef, useState } from 'react';\n\nimport { Button, ScrollContainer, Stack, TextLink, useStyles2, useTheme2 } from '@grafana/ui';\nimport { getSelectStyles } from '@grafana/ui/internal';\nimport { t, Trans } from 'app/core/internationalization';\nimport { OrgRole, Role } from 'app/types';\n\nimport { BuiltinRoleSelector } from './BuiltinRoleSelector';\nimport { RoleMenuGroupsSection } from './RoleMenuGroupsSection';\nimport { MENU_MAX_HEIGHT } from './constants';\nimport { getStyles } from './styles';\n\nenum GroupType {\n  fixed = 'fixed',\n  custom = 'custom',\n  plugin = 'plugin',\n}\n\ninterface RoleGroupOption {\n  name: string;\n  value: string;\n  options: Role[];\n}\n\ninterface RolesCollectionEntry {\n  groupType: GroupType;\n  optionGroup: RoleGroupOption[];\n  renderedName: string;\n  roles: Role[];\n}\n\nconst fixedRoleGroupNames: Record<string, string> = {\n  ldap: 'LDAP',\n  current: 'Current org',\n};\n\nconst tooltipMessage = (\n  <Trans i18nKey=\"role-picker.menu.tooltip\">\n    You can now select the &quot;No basic role&quot; option and add permissions to your custom needs. You can find more\n    information in&nbsp;\n    <TextLink\n      href=\"https://grafana.com/docs/grafana/latest/administration/roles-and-permissions/#organization-roles\"\n      variant=\"bodySmall\"\n      external\n    >\n      our documentation\n    </TextLink>\n    .\n  </Trans>\n);\n\ninterface RolePickerMenuProps {\n  basicRole?: OrgRole;\n  options: Role[];\n  isFiltered?: boolean;\n  appliedRoles: Role[];\n  showGroups?: boolean;\n  basicRoleDisabled?: boolean;\n  disabledMessage?: string;\n  showBasicRole?: boolean;\n  onSelect: (roles: Role[]) => void;\n  onBasicRoleSelect?: (role: OrgRole) => void;\n  onUpdate: (newRoles: Role[], newBuiltInRole?: OrgRole) => void;\n  updateDisabled?: boolean;\n  apply?: boolean;\n  offset: { vertical: number; horizontal: number };\n  menuLeft?: boolean;\n}\n\nexport const RolePickerMenu = ({\n  basicRole,\n  options,\n  isFiltered,\n  appliedRoles,\n  showGroups,\n  basicRoleDisabled,\n  disabledMessage,\n  showBasicRole,\n  onSelect,\n  onBasicRoleSelect,\n  onUpdate,\n  updateDisabled,\n  offset,\n  menuLeft,\n  apply,\n}: RolePickerMenuProps): JSX.Element => {\n  const [selectedOptions, setSelectedOptions] = useState<Role[]>(appliedRoles);\n  const [selectedBuiltInRole, setSelectedBuiltInRole] = useState<OrgRole | undefined>(basicRole);\n  const [rolesCollection, setRolesCollection] = useState<{ [key: string]: RolesCollectionEntry }>({});\n  const subMenuNode = useRef<HTMLDivElement | null>(null);\n  const theme = useTheme2();\n  const styles = getSelectStyles(theme);\n  const customStyles = useStyles2(getStyles);\n\n  // Call onSelect() on every selectedOptions change\n  useEffect(() => {\n    onSelect(selectedOptions);\n  }, [selectedOptions, onSelect]);\n\n  useEffect(() => {\n    if (onBasicRoleSelect && selectedBuiltInRole) {\n      onBasicRoleSelect(selectedBuiltInRole);\n    }\n  }, [selectedBuiltInRole, onBasicRoleSelect]);\n\n  // Evaluate rolesCollection only if options changed, otherwise\n  // it triggers unnecessary re-rendering of <RoleMenuGroupsSection /> component\n  useEffect(() => {\n    const customRoles = options.filter(filterCustomRoles).sort(sortRolesByName);\n    const fixedRoles = options.filter(filterFixedRoles).sort(sortRolesByName);\n    const pluginRoles = options.filter(filterPluginsRoles).sort(sortRolesByName);\n    const optionGroups = {\n      fixed: convertRolesToGroupOptions(fixedRoles).sort((a, b) => a.name.localeCompare(b.name)),\n      custom: convertRolesToGroupOptions(customRoles).sort((a, b) => a.name.localeCompare(b.name)),\n      plugin: convertRolesToGroupOptions(pluginRoles).sort((a, b) => a.name.localeCompare(b.name)),\n    };\n\n    setRolesCollection({\n      fixed: {\n        groupType: GroupType.fixed,\n        optionGroup: optionGroups.fixed,\n        renderedName: `Fixed roles`,\n        roles: fixedRoles,\n      },\n      custom: {\n        groupType: GroupType.custom,\n        optionGroup: optionGroups.custom,\n        renderedName: `Custom roles`,\n        roles: customRoles,\n      },\n      plugin: {\n        groupType: GroupType.plugin,\n        optionGroup: optionGroups.plugin,\n        renderedName: `Plugin roles`,\n        roles: pluginRoles,\n      },\n    });\n  }, [options]);\n\n  const getSelectedGroupOptions = (group: string) => {\n    const selectedGroupOptions = [];\n    for (const role of selectedOptions) {\n      if (getRoleGroup(role) === group) {\n        selectedGroupOptions.push(role);\n      }\n    }\n    return selectedGroupOptions;\n  };\n\n  const groupSelected = (groupType: GroupType, group: string) => {\n    const selectedGroupOptions = getSelectedGroupOptions(group);\n    const groupOptions = rolesCollection[groupType]?.optionGroup.find((g) => g.value === group);\n    return selectedGroupOptions.length > 0 && selectedGroupOptions.length >= groupOptions!.options.length;\n  };\n\n  const groupPartiallySelected = (groupType: GroupType, group: string) => {\n    const selectedGroupOptions = getSelectedGroupOptions(group);\n    const groupOptions = rolesCollection[groupType]?.optionGroup.find((g) => g.value === group);\n    return selectedGroupOptions.length > 0 && selectedGroupOptions.length < groupOptions!.options.length;\n  };\n\n  const changeableGroupRolesSelected = (groupType: GroupType, group: string) => {\n    const selectedGroupOptions = getSelectedGroupOptions(group);\n    const changeableGroupOptions = selectedGroupOptions.filter((role) => role.delegatable && !role.mapped);\n    const groupOptions = rolesCollection[groupType]?.optionGroup.find((g) => g.value === group);\n    return changeableGroupOptions.length > 0 && changeableGroupOptions.length < groupOptions!.options.length;\n  };\n\n  const onChange = (option: Role) => {\n    if (selectedOptions.find((role) => role.uid === option.uid && !role.mapped)) {\n      setSelectedOptions(selectedOptions.filter((role) => role.uid !== option.uid));\n    } else {\n      setSelectedOptions([...selectedOptions, option]);\n    }\n  };\n\n  const onGroupChange = (groupType: GroupType, value: string) => {\n    const group = rolesCollection[groupType]?.optionGroup.find((g) => {\n      return g.value === value;\n    });\n\n    if (!group) {\n      return;\n    }\n\n    if (groupSelected(groupType, value) || changeableGroupRolesSelected(groupType, value)) {\n      const mappedGroupOptions = selectedOptions.filter((option) =>\n        group.options.find((role) => role.uid === option.uid && option.mapped)\n      );\n      const restOptions = selectedOptions.filter((role) => !group.options.find((option) => role.uid === option.uid));\n      setSelectedOptions([...restOptions, ...mappedGroupOptions]);\n    } else {\n      const mappedGroupOptions = selectedOptions.filter((option) =>\n        group.options.find((role) => role.uid === option.uid && role.delegatable)\n      );\n      const groupOptions = group.options.filter(\n        (role) => role.delegatable && !selectedOptions.find((option) => role.uid === option.uid && option.mapped)\n      );\n      const restOptions = selectedOptions.filter((role) => !group.options.find((option) => role.uid === option.uid));\n      setSelectedOptions([...restOptions, ...groupOptions, ...mappedGroupOptions]);\n    }\n  };\n\n  const onSelectedBuiltinRoleChange = (newRole: OrgRole) => {\n    setSelectedBuiltInRole(newRole);\n  };\n\n  const onClearInternal = async () => {\n    const mappedRoles = selectedOptions.filter((role) => role.mapped);\n    const nonDelegatableRoles = options.filter((role) =>\n      selectedOptions.find((option) => role.uid === option.uid && !role.delegatable)\n    );\n    setSelectedOptions([...mappedRoles, ...nonDelegatableRoles]);\n  };\n\n  const onClearSubMenu = (group: string) => {\n    const options = selectedOptions.filter((role) => {\n      const roleGroup = getRoleGroup(role);\n      return roleGroup !== group || role.mapped;\n    });\n    setSelectedOptions(options);\n  };\n\n  const onUpdateInternal = () => {\n    onUpdate(selectedOptions, selectedBuiltInRole);\n  };\n\n  return (\n    <div\n      className={cx(\n        styles.menu,\n        customStyles.menuWrapper,\n        { [customStyles.menuLeft]: menuLeft },\n        css({\n          top: `${offset.vertical}px`,\n          left: !menuLeft ? `${offset.horizontal}px` : 'unset',\n          right: menuLeft ? `${offset.horizontal}px` : 'unset',\n        })\n      )}\n    >\n      <div className={customStyles.menu} aria-label={t('role-picker.menu-aria-label', 'Role picker menu')}>\n        <ScrollContainer\n          maxHeight={`${MENU_MAX_HEIGHT}px`}\n          // NOTE: this is a way to force hiding of the scrollbar\n          // the scrollbar makes the mouseEvents drop\n          scrollbarWidth=\"none\"\n        >\n          {showBasicRole && (\n            <div className={customStyles.menuSection}>\n              <BuiltinRoleSelector\n                value={selectedBuiltInRole}\n                onChange={onSelectedBuiltinRoleChange}\n                disabled={basicRoleDisabled}\n                disabledMesssage={disabledMessage}\n                tooltipMessage={tooltipMessage}\n              />\n            </div>\n          )}\n          {Object.entries(rolesCollection).map(([groupId, collection]) => (\n            <RoleMenuGroupsSection\n              key={groupId}\n              roles={collection.roles}\n              isFiltered={isFiltered}\n              renderedName={collection.renderedName}\n              showGroups={showGroups}\n              optionGroups={collection.optionGroup}\n              groupSelected={(group: string) => groupSelected(collection.groupType, group)}\n              groupPartiallySelected={(group: string) => groupPartiallySelected(collection.groupType, group)}\n              onGroupChange={(group: string) => onGroupChange(collection.groupType, group)}\n              subMenuNode={subMenuNode?.current!}\n              selectedOptions={selectedOptions}\n              onRoleChange={onChange}\n              onClearSubMenu={onClearSubMenu}\n              showOnLeftSubMenu={menuLeft}\n            />\n          ))}\n        </ScrollContainer>\n        <div className={customStyles.menuButtonRow}>\n          <Stack justifyContent=\"flex-end\">\n            <Button size=\"sm\" fill=\"text\" onClick={onClearInternal} disabled={updateDisabled}>\n              <Trans i18nKey=\"role-picker.menu.clear-button\">Clear all</Trans>\n            </Button>\n            <Button size=\"sm\" onClick={onUpdateInternal} disabled={updateDisabled}>\n              {apply ? `Apply` : `Update`}\n            </Button>\n          </Stack>\n        </div>\n      </div>\n      <div ref={subMenuNode} />\n    </div>\n  );\n};\n\nconst filterCustomRoles = (option: Role) => !option.name?.startsWith('fixed:') && !option.name.startsWith('plugins:');\nconst filterFixedRoles = (option: Role) => option.name?.startsWith('fixed:');\nconst filterPluginsRoles = (option: Role) => option.name?.startsWith('plugins:');\n\ninterface GroupsMap {\n  [key: string]: { roles: Role[]; name: string };\n}\n\nconst convertRolesToGroupOptions = (roles: Role[]) => {\n  const groupsMap: GroupsMap = {};\n  roles.forEach((role) => {\n    const groupId = getRoleGroup(role);\n    const groupName = getRoleGroupName(role);\n    if (!groupsMap[groupId]) {\n      groupsMap[groupId] = { name: groupName, roles: [] };\n    }\n    groupsMap[groupId].roles.push(role);\n  });\n  const groups = Object.entries(groupsMap).map(([groupId, groupEntry]) => {\n    return {\n      name: fixedRoleGroupNames[groupId] || capitalize(groupEntry.name),\n      value: groupId,\n      options: groupEntry.roles.sort(sortRolesByName),\n    };\n  });\n  return groups;\n};\n\nconst getRoleGroup = (role: Role) => {\n  const prefix = getRolePrefix(role);\n  const name = getRoleGroupName(role);\n  return `${prefix}:${name}`;\n};\n\nconst getRoleGroupName = (role: Role) => {\n  return role.group || 'Other';\n};\n\nconst getRolePrefix = (role: Role) => {\n  const prefixEnd = role.name.indexOf(':');\n  if (prefixEnd < 0) {\n    return 'unknown';\n  }\n  return role.name.substring(0, prefixEnd);\n};\n\nconst sortRolesByName = (a: Role, b: Role) => a.name.localeCompare(b.name);\n\nconst capitalize = (s: string): string => {\n  return s.slice(0, 1).toUpperCase() + s.slice(1);\n};\n","import { FormEvent, useCallback, useEffect, useState, useRef } from 'react';\n\nimport { ClickOutsideWrapper, Portal, useTheme2 } from '@grafana/ui';\nimport { Role, OrgRole } from 'app/types';\n\nimport { RolePickerInput } from './RolePickerInput';\nimport { RolePickerMenu } from './RolePickerMenu';\nimport {\n  MENU_MAX_HEIGHT,\n  ROLE_PICKER_MAX_MENU_WIDTH,\n  ROLE_PICKER_MENU_MAX_WIDTH,\n  ROLE_PICKER_WIDTH,\n} from './constants';\n\nexport interface Props {\n  basicRole?: OrgRole;\n  appliedRoles: Role[];\n  roleOptions: Role[];\n  isLoading?: boolean;\n  disabled?: boolean;\n  basicRoleDisabled?: boolean;\n  basicRoleDisabledMessage?: string;\n  showBasicRole?: boolean;\n  onRolesChange: (newRoles: Role[]) => void;\n  onBasicRoleChange?: (newRole: OrgRole) => void;\n  canUpdateRoles?: boolean;\n  /**\n   * Set {@link RolePickerMenu}'s button to display either `Apply` (apply=true) or `Update` (apply=false)\n   */\n  apply?: boolean;\n  maxWidth?: string | number;\n  width?: string | number;\n}\n\nexport const RolePicker = ({\n  basicRole,\n  appliedRoles,\n  roleOptions,\n  disabled,\n  isLoading,\n  basicRoleDisabled,\n  basicRoleDisabledMessage,\n  showBasicRole,\n  onRolesChange,\n  onBasicRoleChange,\n  canUpdateRoles = true,\n  apply = false,\n  maxWidth = ROLE_PICKER_WIDTH,\n  width,\n}: Props): JSX.Element | null => {\n  const [isOpen, setOpen] = useState(false);\n  const [selectedRoles, setSelectedRoles] = useState<Role[]>(appliedRoles);\n  const [selectedBuiltInRole, setSelectedBuiltInRole] = useState<OrgRole | undefined>(basicRole);\n  const [query, setQuery] = useState('');\n  const [offset, setOffset] = useState({ vertical: 0, horizontal: 0 });\n  const [menuLeft, setMenuLeft] = useState(false);\n  const ref = useRef<HTMLDivElement>(null);\n  const theme = useTheme2();\n  const widthPx = typeof width === 'number' ? theme.spacing(width) : width;\n\n  useEffect(() => {\n    setSelectedBuiltInRole(basicRole);\n    setSelectedRoles(appliedRoles);\n  }, [appliedRoles, basicRole, onBasicRoleChange]);\n\n  const setMenuPosition = useCallback(() => {\n    const { horizontal, vertical, menuToLeft } = calculateMenuPosition();\n    if (horizontal && vertical) {\n      setOffset({ horizontal, vertical });\n      setMenuLeft(menuToLeft);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!isOpen) {\n      return;\n    }\n    setMenuPosition();\n  }, [isOpen, selectedRoles, setMenuPosition]);\n\n  const calculateMenuPosition = () => {\n    const dimensions = ref?.current?.getBoundingClientRect();\n    if (!dimensions) {\n      return {};\n    }\n    const { bottom, top, left, right } = dimensions;\n\n    const spaceBelow = window.innerHeight - bottom;\n    const spaceAbove = top;\n    const spaceRight = window.innerWidth - right;\n    const spaceLeft = left;\n\n    let horizontal = left;\n    let vertical = bottom;\n    let menuToLeft = false;\n    let menuToTop = false;\n\n    // Check vertical space\n    if (spaceBelow < MENU_MAX_HEIGHT && spaceAbove > spaceBelow) {\n      vertical = top - MENU_MAX_HEIGHT;\n      menuToTop = true;\n    }\n\n    // Check horizontal space\n    if (spaceRight < ROLE_PICKER_MENU_MAX_WIDTH && spaceLeft < ROLE_PICKER_MENU_MAX_WIDTH) {\n      horizontal = right - ROLE_PICKER_MENU_MAX_WIDTH;\n      menuToLeft = true;\n    } else {\n      horizontal = Math.max(0, left + (dimensions.width - ROLE_PICKER_MENU_MAX_WIDTH) / 2);\n    }\n\n    // Ensure the menu stays within the viewport\n    horizontal = Math.max(0, Math.min(horizontal, window.innerWidth - ROLE_PICKER_MAX_MENU_WIDTH));\n    vertical = Math.max(0, Math.min(vertical, window.innerHeight - MENU_MAX_HEIGHT));\n    if (menuToTop) {\n      // Adjust vertical position to align with the input\n      vertical -= 48;\n    }\n    return { horizontal, vertical, menuToLeft };\n  };\n\n  const onOpen = useCallback(\n    (event: FormEvent<HTMLElement>) => {\n      if (!disabled) {\n        event.preventDefault();\n        event.stopPropagation();\n        setMenuPosition();\n        setOpen(true);\n      }\n    },\n    [disabled, setMenuPosition]\n  );\n\n  const onClose = useCallback(() => {\n    setOpen(false);\n    setQuery('');\n    setSelectedRoles(appliedRoles);\n    setSelectedBuiltInRole(basicRole);\n  }, [appliedRoles, basicRole]);\n\n  // Only call onClose if menu is open. Prevent unnecessary calls for multiple pickers on the page.\n  const onClickOutside = () => isOpen && onClose();\n\n  const onInputChange = (query?: string) => {\n    if (query) {\n      setQuery(query);\n    } else {\n      setQuery('');\n    }\n  };\n\n  const onSelect = (roles: Role[]) => {\n    setSelectedRoles(roles);\n  };\n\n  const onBasicRoleSelect = (role: OrgRole) => {\n    setSelectedBuiltInRole(role);\n  };\n\n  const onUpdate = (newRoles: Role[], newBuiltInRole?: OrgRole) => {\n    if (onBasicRoleChange && newBuiltInRole && newBuiltInRole !== basicRole) {\n      onBasicRoleChange(newBuiltInRole);\n    }\n    if (canUpdateRoles) {\n      onRolesChange(newRoles);\n    }\n    setQuery('');\n    setOpen(false);\n  };\n\n  const getOptions = () => {\n    // if roles cannot be updated mark every role as non delegatable\n    const options = roleOptions.map((r) => ({ ...r, delegatable: canUpdateRoles && r.delegatable }));\n\n    if (query && query.trim() !== '') {\n      // TODO should this filter on `displayName` not (or in addition to) `name`?\n      return options.filter((option) => option.name?.toLowerCase().includes(query.toLowerCase()));\n    }\n    return options;\n  };\n\n  return (\n    <div\n      data-testid=\"role-picker\"\n      style={{\n        position: 'relative',\n        maxWidth: widthPx || maxWidth,\n        width: widthPx,\n      }}\n      ref={ref}\n    >\n      <ClickOutsideWrapper onClick={onClickOutside} useCapture={false}>\n        <RolePickerInput\n          basicRole={selectedBuiltInRole}\n          appliedRoles={selectedRoles}\n          query={query}\n          onQueryChange={onInputChange}\n          onOpen={onOpen}\n          onClose={onClose}\n          isFocused={isOpen}\n          disabled={disabled}\n          showBasicRole={showBasicRole}\n          width={widthPx}\n          isLoading={isLoading}\n        />\n        {isOpen && (\n          <Portal>\n            {/* Since menu rendered in portal and whole component wrapped in ClickOutsideWrapper, */}\n            {/* we need to stop event propagation to prevent closing menu */}\n            {/* eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions */}\n            <div onClick={(e) => e.stopPropagation()}>\n              <RolePickerMenu\n                options={getOptions()}\n                isFiltered={query.trim() !== ''}\n                basicRole={selectedBuiltInRole}\n                appliedRoles={appliedRoles}\n                onBasicRoleSelect={onBasicRoleSelect}\n                onSelect={onSelect}\n                onUpdate={onUpdate}\n                showGroups={query.length === 0 || query.trim() === ''}\n                basicRoleDisabled={basicRoleDisabled}\n                disabledMessage={basicRoleDisabledMessage}\n                showBasicRole={showBasicRole}\n                updateDisabled={basicRoleDisabled && !canUpdateRoles}\n                apply={apply}\n                offset={offset}\n                menuLeft={menuLeft}\n              />\n            </div>\n          </Portal>\n        )}\n      </ClickOutsideWrapper>\n    </div>\n  );\n};\n","import { getBackendSrv, isFetchError } from '@grafana/runtime';\nimport { Role } from 'app/types';\n\nimport { addDisplayNameForFixedRole, addFilteredDisplayName } from './utils';\n\nexport const fetchRoleOptions = async (orgId?: number): Promise<Role[]> => {\n  let rolesUrl = '/api/access-control/roles?delegatable=true';\n  if (orgId) {\n    rolesUrl += `&targetOrgId=${orgId}`;\n  }\n  const roles = await getBackendSrv().get(rolesUrl);\n  if (!roles || !roles.length) {\n    return [];\n  }\n  return roles.map(addDisplayNameForFixedRole).map(addFilteredDisplayName);\n};\n\nexport const fetchUserRoles = async (userId: number, orgId?: number): Promise<Role[]> => {\n  let userRolesUrl = `/api/access-control/users/${userId}/roles?includeMapped=true`;\n  if (orgId) {\n    userRolesUrl += `&targetOrgId=${orgId}`;\n  }\n  try {\n    const roles = await getBackendSrv().get(userRolesUrl);\n    if (!roles || !roles.length) {\n      return [];\n    }\n    return roles.map(addDisplayNameForFixedRole).map(addFilteredDisplayName);\n  } catch (error) {\n    if (isFetchError(error)) {\n      error.isHandled = true;\n    }\n    return [];\n  }\n};\n\nexport const updateUserRoles = (roles: Role[], userId: number, orgId?: number) => {\n  let userRolesUrl = `/api/access-control/users/${userId}/roles`;\n  if (orgId) {\n    userRolesUrl += `?targetOrgId=${orgId}`;\n  }\n  const filteredRoles = roles.filter((role) => !role.mapped);\n  const roleUids = filteredRoles.flatMap((x) => x.uid);\n  return getBackendSrv().put(userRolesUrl, {\n    orgId,\n    roleUids,\n  });\n};\n\nexport const fetchTeamRoles = async (teamId: number, orgId?: number): Promise<Role[]> => {\n  let teamRolesUrl = `/api/access-control/teams/${teamId}/roles`;\n  if (orgId) {\n    teamRolesUrl += `?targetOrgId=${orgId}`;\n  }\n  try {\n    const roles = await getBackendSrv().get(teamRolesUrl);\n    if (!roles || !roles.length) {\n      return [];\n    }\n    return roles.map(addDisplayNameForFixedRole).map(addFilteredDisplayName);\n  } catch (error) {\n    if (isFetchError(error)) {\n      error.isHandled = true;\n    }\n    return [];\n  }\n};\n\nexport const updateTeamRoles = (roles: Role[], teamId: number, orgId?: number) => {\n  let teamRolesUrl = `/api/access-control/teams/${teamId}/roles`;\n  if (orgId) {\n    teamRolesUrl += `?targetOrgId=${orgId}`;\n  }\n  const roleUids = roles.flatMap((x) => x.uid);\n\n  return getBackendSrv().put(teamRolesUrl, {\n    orgId,\n    roleUids,\n  });\n};\n","import { Role } from 'app/types';\n\nexport const isNotDelegatable = (role: Role) => {\n  return role.delegatable !== undefined && !role.delegatable;\n};\n\n// addDisplayNameForFixedRole provides a fallback name for fixed roles\n// this is \"incase\" a fixed role is introduced but without a displayname set\n// example: currently this would give:\n// fixed:datasources:name -> datasources name\n// fixed:datasources:admin      -> datasources admin\nexport const addDisplayNameForFixedRole = (role: Role) => {\n  const fixedRolePrefix = 'fixed:';\n  if (!role.displayName && role.name.startsWith(fixedRolePrefix)) {\n    let newRoleName = '';\n    let rNameWithoutFixedPrefix = role.name.replace(fixedRolePrefix, '');\n    newRoleName = rNameWithoutFixedPrefix.replace(/:/g, ' ');\n    role.displayName = newRoleName;\n  }\n  return role;\n};\n\n// Adds a display name for use when the list of roles is filtered\nexport const addFilteredDisplayName = (role: Role) => {\n  role.filteredDisplayName = role.group + ':' + role.displayName;\n  return role;\n};\n"],"names":["ValueContainer","children","iconName","ref","styles","getStyles","Icon","theme","prefix","multiValueContainer","getSelectStyles","ROLE_PICKER_WIDTH","MENU_MAX_HEIGHT","ROLE_PICKER_MENU_MIN_WIDTH","ROLE_PICKER_MENU_MAX_WIDTH","ROLE_PICKER_SUBMENU_MIN_WIDTH","ROLE_PICKER_SUBMENU_MAX_WIDTH","ROLE_PICKER_MAX_MENU_WIDTH","stopPropagation","event","RolePickerInput","appliedRoles","basicRole","disabled","isFocused","query","showBasicRole","width","isLoading","onOpen","onClose","onQueryChange","rest","getRolePickerInputStyles","inputRef","onInputChange","showBasicRoleOnLabel","role","RolesLabel","Spinner","showBuiltInRole","numberOfRoles","getTooltipStyles","Tooltip","invalid","focused","withPrefix","BasicRoleOption","r","BuiltinRoleSelector","value","onChange","disabledMesssage","tooltipMessage","RadioButtonList","RoleMenuGroupOption","name","isSelected","partiallySelected","onClick","onOpenSubMenu","onCloseSubMenu","root","customStyles","wrapperClassName","onChangeInternal","onClickInternal","onMouseEnter","onMouseLeave","Checkbox","Portal","RoleMenuOption","data","useFilteredDisplayName","mapped","hideDescription","disabledMessage","RolePickerSubMenu","options","selectedOptions","disabledOptions","onSelect","onClear","showOnLeft","onClearInternal","ScrollContainer","option","i","opt","Stack","Button","RoleMenuGroupsSection","roles","isFiltered","renderedName","showGroups","optionGroups","onGroupChange","groupSelected","groupPartiallySelected","subMenuNode","onRoleChange","onClearSubMenu","showOnLeftSubMenu","_ref","showSubMenu","setShowSubMenu","openedMenuGroup","setOpenedMenuGroup","selectStyles","groupOption","GroupType","fixedRoleGroupNames","TextLink","RolePickerMenu","basicRoleDisabled","onBasicRoleSelect","onUpdate","updateDisabled","offset","menuLeft","apply","setSelectedOptions","selectedBuiltInRole","setSelectedBuiltInRole","rolesCollection","setRolesCollection","customRoles","filterCustomRoles","sortRolesByName","fixedRoles","filterFixedRoles","pluginRoles","filterPluginsRoles","convertRolesToGroupOptions","a","b","getSelectedGroupOptions","group","selectedGroupOptions","getRoleGroup","groupType","groupOptions","g","changeableGroupRolesSelected","changeableGroupOptions","mappedGroupOptions","restOptions","onSelectedBuiltinRoleChange","newRole","mappedRoles","nonDelegatableRoles","onUpdateInternal","groupId","collection","groupsMap","groupName","getRoleGroupName","groupEntry","capitalize","getRolePrefix","prefixEnd","s","RolePicker","roleOptions","basicRoleDisabledMessage","onRolesChange","onBasicRoleChange","canUpdateRoles","maxWidth","isOpen","setOpen","selectedRoles","setSelectedRoles","setQuery","setOffset","setMenuLeft","widthPx","setMenuPosition","horizontal","vertical","menuToLeft","calculateMenuPosition","dimensions","bottom","top","left","right","spaceBelow","spaceAbove","spaceRight","spaceLeft","menuToTop","onClickOutside","newRoles","newBuiltInRole","getOptions","ClickOutsideWrapper","e","fetchRoleOptions","orgId","rolesUrl","fetchUserRoles","userId","userRolesUrl","error","updateUserRoles","roleUids","x","fetchTeamRoles","teamId","teamRolesUrl","updateTeamRoles","isNotDelegatable","addDisplayNameForFixedRole","fixedRolePrefix","newRoleName","addFilteredDisplayName"],"sourceRoot":""}