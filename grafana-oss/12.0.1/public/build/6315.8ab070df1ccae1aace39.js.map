{"version":3,"file":"6315.8ab070df1ccae1aace39.js","mappings":"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","sources":["webpack://grafana/./public/app/core/hooks/useCleanup.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/CollapsibleSection.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/fields/KeyValueMapInput.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/fields/StringArrayInput.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/fields/styles.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/fields/SubformArrayField.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/fields/SubformField.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/fields/TemplateContentAndPreview.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/fields/TemplateSelector.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/fields/OptionField.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useControlledFieldArray.ts","webpack://grafana/./public/app/features/alerting/unified/utils/receiver-form.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\nimport { useDispatch } from 'app/types';\n\nimport { cleanUpAction, CleanUpAction } from '../actions/cleanUp';\n\nexport function useCleanup(cleanupAction: CleanUpAction) {\n  const dispatch = useDispatch();\n  //bit of a hack to unburden user from having to wrap stateSelcetor in a useCallback. Otherwise cleanup would happen on every render\n  const selectorRef = useRef(cleanupAction);\n  selectorRef.current = cleanupAction;\n  useEffect(() => {\n    return () => {\n      dispatch(cleanUpAction({ cleanupAction: selectorRef.current }));\n    };\n  }, [dispatch]);\n}\n","import { css, cx } from '@emotion/css';\nimport { useState } from 'react';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { IconSize, useStyles2 } from '@grafana/ui';\n\nimport { CollapseToggle } from '../../CollapseToggle';\n\ninterface Props {\n  label: string;\n  description?: string;\n  className?: string;\n  size?: IconSize;\n}\n\nexport const CollapsibleSection = ({\n  label,\n  description,\n  children,\n  className,\n  size = 'xl',\n}: React.PropsWithChildren<Props>) => {\n  const styles = useStyles2(getStyles);\n  const [isCollapsed, setIsCollapsed] = useState(true);\n\n  const toggleCollapse = () => setIsCollapsed(!isCollapsed);\n\n  return (\n    <div className={cx(styles.wrapper, className)}>\n      <CollapseToggle\n        className={styles.toggle}\n        size={size}\n        onToggle={toggleCollapse}\n        isCollapsed={isCollapsed}\n        text={label}\n      />\n      {description && <p className={styles.description}>{description}</p>}\n      <div className={isCollapsed ? styles.hidden : styles.content}>{children}</div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    marginTop: theme.spacing(1),\n    paddingBottom: theme.spacing(1),\n  }),\n  toggle: css({\n    margin: theme.spacing(1, 0),\n    padding: 0,\n  }),\n  hidden: css({\n    display: 'none',\n  }),\n  description: css({\n    color: theme.colors.text.secondary,\n    fontSize: theme.typography.size.sm,\n    fontWeight: theme.typography.fontWeightRegular,\n    margin: 0,\n  }),\n  content: css({\n    paddingLeft: theme.spacing(3),\n  }),\n});\n","import { css } from '@emotion/css';\nimport { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Input, Stack, useStyles2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { ActionIcon } from '../../../rules/ActionIcon';\n\ninterface Props {\n  value?: Record<string, string>;\n  readOnly?: boolean;\n  onChange: (value: Record<string, string>) => void;\n}\n\nexport const KeyValueMapInput = ({ value, onChange, readOnly = false }: Props) => {\n  const styles = useStyles2(getStyles);\n  const [pairs, setPairs] = useState(recordToPairs(value));\n  const [currentNewPair, setCurrentNewPair] = useState<[string, string] | undefined>(undefined);\n\n  const emitChange = (pairs: Array<[string, string]>) => {\n    onChange(pairsToRecord(pairs));\n  };\n\n  const deleteItem = (index: number) => {\n    const newPairs = pairs.slice();\n    const removed = newPairs.splice(index, 1)[0];\n    setPairs(newPairs);\n    if (removed[0]) {\n      emitChange(newPairs);\n    }\n  };\n\n  return (\n    <div>\n      {!!pairs.length && (\n        <table className={styles.table}>\n          <thead>\n            <tr>\n              <th>\n                <Trans i18nKey=\"alerting.key-value-map-input.name\">Name</Trans>\n              </th>\n              <th>\n                <Trans i18nKey=\"alerting.key-value-map-input.value\">Value</Trans>\n              </th>\n              {!readOnly && <th />}\n            </tr>\n          </thead>\n          <tbody>\n            {pairs.map(([key, value], index) => (\n              <tr key={index}>\n                <td>\n                  <Input readOnly={readOnly} value={key} disabled />\n                </td>\n                <td>\n                  <Input readOnly={readOnly} value={value} disabled />\n                </td>\n                {!readOnly && (\n                  <td>\n                    <ActionIcon\n                      icon=\"trash-alt\"\n                      tooltip={t('alerting.common.delete', 'Delete')}\n                      onClick={() => deleteItem(index)}\n                    />\n                  </td>\n                )}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n      {currentNewPair && (\n        <table className={styles.table}>\n          <tr>\n            <Stack gap={1}>\n              <td>\n                <Input\n                  value={currentNewPair[0]}\n                  onChange={(e) => setCurrentNewPair([e.currentTarget.value, currentNewPair[1]])}\n                />\n              </td>\n              <td>\n                <Input\n                  value={currentNewPair[1]}\n                  onChange={(e) => setCurrentNewPair([currentNewPair[0], e.currentTarget.value])}\n                />\n              </td>\n              <td>\n                <Stack gap={1}>\n                  <ActionIcon\n                    icon=\"check\"\n                    tooltip={t('alerting.contact-points.key-value-map.confirm-add', 'Confirm to add')}\n                    onClick={() => {\n                      setPairs([...pairs, currentNewPair]);\n                      setCurrentNewPair(undefined);\n                      emitChange([...pairs, currentNewPair]);\n                    }}\n                  />\n                  <ActionIcon\n                    icon=\"times\"\n                    tooltip={t('alerting.common.cancel', 'Cancel')}\n                    onClick={() => setCurrentNewPair(undefined)}\n                  />\n                </Stack>\n              </td>\n            </Stack>\n          </tr>\n        </table>\n      )}\n      {!readOnly && (\n        <Button\n          className={styles.addButton}\n          type=\"button\"\n          variant=\"secondary\"\n          icon=\"plus\"\n          size=\"sm\"\n          disabled={!!currentNewPair}\n          onClick={() => setCurrentNewPair(['', ''])}\n        >\n          <Trans i18nKey=\"alerting.contact-points.key-value-map.add\">Add</Trans>\n        </Button>\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  addButton: css({\n    marginTop: theme.spacing(1),\n  }),\n  table: css({\n    'tbody td': {\n      padding: `0 ${theme.spacing(1)} ${theme.spacing(1)} 0`,\n    },\n  }),\n});\n\nconst pairsToRecord = (pairs: Array<[string, string]>): Record<string, string> => {\n  const record: Record<string, string> = {};\n  for (const [key, value] of pairs) {\n    if (key) {\n      record[key] = value;\n    }\n  }\n  return record;\n};\n\nconst recordToPairs = (obj?: Record<string, string>): Array<[string, string]> => Object.entries(obj ?? {});\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Input, useStyles2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { ActionIcon } from '../../../rules/ActionIcon';\n\ninterface Props {\n  value?: string[];\n  readOnly?: boolean;\n  onChange: (value: string[]) => void;\n}\n\nexport const StringArrayInput = ({ value, onChange, readOnly = false }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const deleteItem = (index: number) => {\n    if (!value) {\n      return;\n    }\n    const newValue = value.slice();\n    newValue.splice(index, 1);\n    onChange(newValue);\n  };\n\n  const updateValue = (itemValue: string, index: number) => {\n    if (!value) {\n      return;\n    }\n    onChange(value.map((v, i) => (i === index ? itemValue : v)));\n  };\n\n  return (\n    <div>\n      {!!value?.length &&\n        value.map((v, index) => (\n          <div key={index} className={styles.row}>\n            <Input readOnly={readOnly} value={v} onChange={(e) => updateValue(e.currentTarget.value, index)} />\n            {!readOnly && (\n              <ActionIcon\n                className={styles.deleteIcon}\n                icon=\"trash-alt\"\n                tooltip={t('alerting.string-array-input.tooltip-delete', 'delete')}\n                onClick={() => deleteItem(index)}\n              />\n            )}\n          </div>\n        ))}\n      {!readOnly && (\n        <Button\n          className={styles.addButton}\n          type=\"button\"\n          variant=\"secondary\"\n          icon=\"plus\"\n          size=\"sm\"\n          onClick={() => onChange([...(value ?? []), ''])}\n        >\n          <Trans i18nKey=\"alerting.string-array-input.add\">Add</Trans>\n        </Button>\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  row: css({\n    display: 'flex',\n    flexDirection: 'row',\n    marginBottom: theme.spacing(1),\n    alignItems: 'center',\n  }),\n  deleteIcon: css({\n    marginLeft: theme.spacing(1),\n  }),\n  addButton: css({\n    marginTop: theme.spacing(1),\n  }),\n});\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getReceiverFormFieldStyles = (theme: GrafanaTheme2) => ({\n  collapsibleSection: css({\n    margin: 0,\n    padding: 0,\n  }),\n  wrapper: css({\n    margin: theme.spacing(2, 0),\n    padding: theme.spacing(1),\n    border: `solid 1px ${theme.colors.border.medium}`,\n    borderRadius: theme.shape.radius.default,\n    position: 'relative',\n  }),\n  description: css({\n    color: theme.colors.text.secondary,\n    fontSize: theme.typography.size.sm,\n    fontWeight: theme.typography.fontWeightRegular,\n    margin: 0,\n  }),\n  deleteIcon: css({\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n  }),\n  addButton: css({\n    marginTop: theme.spacing(1),\n  }),\n});\n","import { DeepMap, FieldError, useFormContext } from 'react-hook-form';\n\nimport { Button, useStyles2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { useControlledFieldArray } from 'app/features/alerting/unified/hooks/useControlledFieldArray';\nimport { NotificationChannelOption } from 'app/types';\n\nimport { ActionIcon } from '../../../rules/ActionIcon';\nimport { CollapsibleSection } from '../CollapsibleSection';\n\nimport { OptionField } from './OptionField';\nimport { getReceiverFormFieldStyles } from './styles';\n\ninterface Props {\n  defaultValues?: any[];\n  option: NotificationChannelOption;\n  pathPrefix: string;\n  errors?: Array<DeepMap<any, FieldError>>;\n  readOnly?: boolean;\n}\n\nexport const SubformArrayField = ({ option, pathPrefix, errors, defaultValues, readOnly = false }: Props) => {\n  const styles = useStyles2(getReceiverFormFieldStyles);\n  const path = `${pathPrefix}${option.propertyName}`;\n  const formAPI = useFormContext();\n  const { fields, append, remove } = useControlledFieldArray({ name: path, formAPI, defaults: defaultValues });\n\n  return (\n    <div className={styles.wrapper}>\n      <CollapsibleSection\n        className={styles.collapsibleSection}\n        label={`${option.label} (${fields.length})`}\n        description={option.description}\n      >\n        {(fields ?? defaultValues ?? []).map((field, itemIndex) => {\n          return (\n            <div key={itemIndex} className={styles.wrapper}>\n              {!readOnly && (\n                <ActionIcon\n                  data-testid={`${path}.${itemIndex}.delete-button`}\n                  icon=\"trash-alt\"\n                  tooltip={t('alerting.subform-array-field.tooltip-delete', 'delete')}\n                  onClick={() => remove(itemIndex)}\n                  className={styles.deleteIcon}\n                />\n              )}\n              {option.subformOptions?.map((option) => (\n                <OptionField\n                  readOnly={readOnly}\n                  defaultValue={field?.[option.propertyName]}\n                  key={option.propertyName}\n                  option={option}\n                  pathPrefix={`${path}.${itemIndex}.`}\n                  error={errors?.[itemIndex]?.[option.propertyName]}\n                />\n              ))}\n            </div>\n          );\n        })}\n        {!readOnly && (\n          <Button\n            data-testid={`${path}.add-button`}\n            className={styles.addButton}\n            type=\"button\"\n            variant=\"secondary\"\n            icon=\"plus\"\n            size=\"sm\"\n            onClick={() => append({ __id: String(Math.random()) })}\n          >\n            <Trans i18nKey=\"alerting.subform-array-field.add\">Add</Trans>\n          </Button>\n        )}\n      </CollapsibleSection>\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { DeepMap, FieldError, useFormContext } from 'react-hook-form';\n\nimport { Button, useStyles2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { NotificationChannelOption, NotificationChannelSecureFields } from 'app/types';\n\nimport { ActionIcon } from '../../../rules/ActionIcon';\n\nimport { OptionField } from './OptionField';\nimport { getReceiverFormFieldStyles } from './styles';\n\ninterface Props {\n  defaultValue: any;\n  option: NotificationChannelOption;\n  pathPrefix: string;\n  errors?: DeepMap<any, FieldError>;\n  readOnly?: boolean;\n  secureFields?: NotificationChannelSecureFields;\n  onResetSecureField?: (propertyName: string) => void;\n}\n\nexport const SubformField = ({\n  option,\n  pathPrefix,\n  errors,\n  defaultValue,\n  readOnly = false,\n  secureFields = {},\n  onResetSecureField,\n}: Props) => {\n  const styles = useStyles2(getReceiverFormFieldStyles);\n  const name = `${pathPrefix}${option.propertyName}`;\n  const { watch } = useFormContext();\n  const _watchValue = watch(name);\n  const value = _watchValue === undefined ? defaultValue : _watchValue;\n\n  const [show, setShow] = useState(!!value);\n\n  return (\n    <div className={styles.wrapper} data-testid={`${name}.container`}>\n      <h6>{option.label}</h6>\n      {option.description && <p className={styles.description}>{option.description}</p>}\n      {show && (\n        <>\n          {!readOnly && (\n            <ActionIcon\n              data-testid={`${name}.delete-button`}\n              icon=\"trash-alt\"\n              tooltip={t('alerting.subform-field.tooltip-delete', 'delete')}\n              onClick={() => setShow(false)}\n              className={styles.deleteIcon}\n            />\n          )}\n          {(option.subformOptions ?? []).map((subOption) => {\n            return (\n              <OptionField\n                readOnly={readOnly}\n                secureFields={secureFields}\n                onResetSecureField={onResetSecureField}\n                defaultValue={defaultValue?.[subOption.propertyName]}\n                parentOption={option}\n                key={subOption.propertyName}\n                option={subOption}\n                pathPrefix={`${name}.`}\n                error={errors?.[subOption.propertyName]}\n              />\n            );\n          })}\n        </>\n      )}\n      {!show && !readOnly && (\n        <Button\n          className={styles.addButton}\n          type=\"button\"\n          variant=\"secondary\"\n          icon=\"plus\"\n          size=\"sm\"\n          onClick={() => setShow(true)}\n          data-testid={`${name}.add-button`}\n        >\n          <Trans i18nKey=\"alerting.subform-field.add\">Add</Trans>\n        </Button>\n      )}\n    </div>\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport * as React from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Box, useStyles2 } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\nimport { useAlertmanager } from 'app/features/alerting/unified/state/AlertmanagerContext';\nimport { GRAFANA_RULES_SOURCE_NAME } from 'app/features/alerting/unified/utils/datasource';\n\nimport { EditorColumnHeader } from '../../../contact-points/templates/EditorColumnHeader';\nimport { TemplateEditor } from '../../TemplateEditor';\nimport { TemplatePreview } from '../../TemplatePreview';\n\nimport { getUseTemplateText } from './utils';\n\nexport function TemplateContentAndPreview({\n  payload,\n  templateContent,\n  templateName,\n  payloadFormatError,\n  setPayloadFormatError,\n  className,\n}: {\n  payload: string;\n  templateName: string;\n  payloadFormatError: string | null;\n  setPayloadFormatError: (value: React.SetStateAction<string | null>) => void;\n  className?: string;\n  templateContent: string;\n}) {\n  const styles = useStyles2(getStyles);\n\n  const { selectedAlertmanager } = useAlertmanager();\n  const isGrafanaAlertManager = selectedAlertmanager === GRAFANA_RULES_SOURCE_NAME;\n\n  return (\n    <div className={cx(className, styles.mainContainer)}>\n      <div className={styles.container}>\n        <EditorColumnHeader\n          label={t('alerting.template-content-and-preview.label-template-content', 'Template content')}\n        />\n        <Box flex={1}>\n          <div className={styles.viewerContainer({ height: 400 })}>\n            <AutoSizer>\n              {({ width, height }) => (\n                <TemplateEditor\n                  value={templateContent}\n                  containerStyles={styles.editorContainer}\n                  width={width}\n                  height={height}\n                  readOnly\n                />\n              )}\n            </AutoSizer>\n          </div>\n        </Box>\n      </div>\n\n      {isGrafanaAlertManager && (\n        <TemplatePreview\n          payload={payload}\n          // This should be an empty template name so that the test API treats it as a new unnamed template.\n          templateName={''}\n          templateContent={getUseTemplateText(templateName)}\n          setPayloadFormatError={setPayloadFormatError}\n          payloadFormatError={payloadFormatError}\n          className={cx(styles.templatePreview, styles.minEditorSize)}\n        />\n      )}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  mainContainer: css({\n    display: 'flex',\n    flexDirection: 'column',\n    gap: theme.spacing(2),\n  }),\n  container: css({\n    label: 'template-preview-container',\n    display: 'flex',\n    flexDirection: 'column',\n    borderRadius: theme.shape.radius.default,\n    border: `1px solid ${theme.colors.border.medium}`,\n  }),\n  templatePreview: css({\n    flex: 1,\n    display: 'flex',\n  }),\n  minEditorSize: css({\n    minHeight: 300,\n    minWidth: 300,\n  }),\n  viewerContainer: ({ height }: { height: number | string }) =>\n    css({\n      height,\n      overflow: 'auto',\n      backgroundColor: theme.colors.background.primary,\n    }),\n  editorContainer: css({\n    width: 'fit-content',\n    border: 'none',\n  }),\n});\n","import { css, cx } from '@emotion/css';\nimport { PropsWithChildren, useEffect, useMemo, useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { useCopyToClipboard } from 'react-use';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport {\n  Button,\n  Drawer,\n  IconButton,\n  Label,\n  RadioButtonGroup,\n  Select,\n  Stack,\n  Text,\n  TextArea,\n  useStyles2,\n} from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport {\n  trackEditInputWithTemplate,\n  trackUseCustomInputInTemplate,\n  trackUseSingleTemplateInInput,\n} from 'app/features/alerting/unified/Analytics';\nimport { templatesApi } from 'app/features/alerting/unified/api/templateApi';\nimport {\n  NotificationTemplate,\n  useNotificationTemplates,\n} from 'app/features/alerting/unified/components/contact-points/useNotificationTemplates';\nimport { useAlertmanager } from 'app/features/alerting/unified/state/AlertmanagerContext';\nimport { NotificationChannelOption } from 'app/types';\n\nimport { defaultPayloadString } from '../../TemplateForm';\n\nimport { TemplateContentAndPreview } from './TemplateContentAndPreview';\nimport { getTemplateName, getUseTemplateText, matchesOnlyOneTemplate, parseTemplates } from './utils';\n\nconst { useGetDefaultTemplatesQuery } = templatesApi;\n\ninterface TemplatesPickerProps {\n  onSelect: (temnplate: string) => void;\n  option: NotificationChannelOption;\n  valueInForm: string;\n}\nexport function TemplatesPicker({ onSelect, option, valueInForm }: TemplatesPickerProps) {\n  const [showTemplates, setShowTemplates] = useState(false);\n  const onClick = () => {\n    setShowTemplates(true);\n    trackEditInputWithTemplate();\n  };\n  const handleClose = () => setShowTemplates(false);\n\n  return (\n    <>\n      <Button\n        icon=\"edit\"\n        tooltip={`Edit ${option.label.toLowerCase()} using existing notification templates.`}\n        onClick={onClick}\n        variant=\"secondary\"\n        size=\"sm\"\n      >\n        {`Edit ${option.label}`}\n      </Button>\n\n      {showTemplates && (\n        <Drawer title={`Edit ${option.label}`} size=\"md\" onClose={handleClose}>\n          <TemplateSelector onSelect={onSelect} onClose={handleClose} option={option} valueInForm={valueInForm} />\n        </Drawer>\n      )}\n    </>\n  );\n}\n\ntype TemplateFieldOption = 'Existing' | 'Custom';\n\nexport function getTemplateOptions(templateFiles: NotificationTemplate[], defaultTemplates: Template[] = []) {\n  // Add default templates\n  const templateMap = new Map<string, SelectableValue<Template>>();\n  templateFiles.forEach(({ content }) => {\n    const templates: Template[] = parseTemplates(content);\n    templates.forEach((template) => {\n      templateMap.set(template.name, {\n        label: template.name,\n        value: {\n          name: template.name,\n          content: template.content,\n        },\n      });\n    });\n  });\n  // Add default templates to the map\n  defaultTemplates.forEach((template) => {\n    templateMap.set(template.name, {\n      label: template.name,\n      value: {\n        name: template.name,\n        content: template.content,\n      },\n    });\n  });\n  // return the sum of default and custom templates\n  return Array.from(templateMap.values());\n}\n\nexport interface Template {\n  name: string;\n  content: string;\n}\ninterface TemplateSelectorProps {\n  onSelect: (template: string) => void;\n  onClose: () => void;\n  option: NotificationChannelOption;\n  valueInForm: string;\n}\n\nfunction TemplateSelector({ onSelect, onClose, option, valueInForm }: TemplateSelectorProps) {\n  const styles = useStyles2(getStyles);\n  const valueInFormIsCustom = Boolean(valueInForm) && !matchesOnlyOneTemplate(valueInForm);\n  const [template, setTemplate] = useState<SelectableValue<Template> | undefined>(undefined);\n  const [customTemplateValue, setCustomTemplateValue] = useState<string>(valueInForm);\n\n  const { selectedAlertmanager } = useAlertmanager();\n  const { data = [], error, isLoading } = useNotificationTemplates({ alertmanager: selectedAlertmanager! });\n  const { data: defaultTemplates } = useGetDefaultTemplatesQuery();\n  const [templateOption, setTemplateOption] = useState<TemplateFieldOption | undefined>(\n    valueInFormIsCustom ? 'Custom' : 'Existing'\n  );\n  const [_, copyToClipboard] = useCopyToClipboard();\n\n  const templateOptions: Array<SelectableValue<TemplateFieldOption>> = [\n    {\n      label: 'Select notification template',\n      ariaLabel: 'Select notification template',\n      value: 'Existing',\n      description: `Select an existing notification template and preview it, or copy it to paste it in the custom tab. ${templateOption === 'Existing' ? 'Clicking Save saves your changes to the selected template.' : ''}`,\n    },\n    {\n      label: `Enter custom ${option.label.toLowerCase()}`,\n      ariaLabel: `Enter custom ${option.label.toLowerCase()}`,\n      value: 'Custom',\n      description: `Enter custom ${option.label.toLowerCase()}. ${templateOption === 'Custom' ? 'Clicking Save will save the custom value only.' : ''}`,\n    },\n  ];\n\n  useEffect(() => {\n    if (template?.value?.name) {\n      setCustomTemplateValue(getUseTemplateText(template.value.name));\n    }\n  }, [template]);\n\n  function onCustomTemplateChange(customInput: string) {\n    setCustomTemplateValue(customInput);\n  }\n\n  const onTemplateOptionChange = (option: TemplateFieldOption) => {\n    setTemplateOption(option);\n  };\n\n  const options = useMemo(() => {\n    if (!defaultTemplates || !data || isLoading || error) {\n      return [];\n    }\n    return getTemplateOptions(data, defaultTemplates);\n  }, [data, defaultTemplates, isLoading, error]);\n\n  const defaultTemplateValue = useMemo(() => {\n    if (!options.length || !Boolean(valueInForm) || !matchesOnlyOneTemplate(valueInForm)) {\n      return null;\n    }\n    const nameOfTemplateInForm = getTemplateName(valueInForm);\n\n    return options.find((option) => option.label === nameOfTemplateInForm) || null;\n  }, [options, valueInForm]);\n\n  if (error) {\n    return (\n      <div>\n        <Trans i18nKey=\"alerting.template-selector.error-loading-templates\">Error loading templates</Trans>\n      </div>\n    );\n  }\n\n  if (isLoading || !data || !defaultTemplates) {\n    return (\n      <div>\n        <Trans i18nKey=\"alerting.template-selector.loading\">Loading...</Trans>\n      </div>\n    );\n  }\n\n  return (\n    <Stack direction=\"column\" gap={1} justifyContent=\"space-between\" height=\"100%\">\n      <Stack direction=\"column\" gap={1}>\n        <RadioButtonGroup\n          options={templateOptions}\n          value={templateOption}\n          onChange={onTemplateOptionChange}\n          className={styles.templateTabOption}\n        />\n\n        {templateOption === 'Existing' ? (\n          <Stack direction=\"column\" gap={1}>\n            <Stack direction=\"row\" gap={1} alignItems=\"center\">\n              <Select<Template>\n                data-testid=\"existing-templates-selector\"\n                placeholder={t(\n                  'alerting.template-selector.existing-templates-selector-placeholder-choose-notification-template',\n                  'Choose notification template'\n                )}\n                aria-label={t(\n                  'alerting.template-selector.existing-templates-selector-aria-label-choose-notification-template',\n                  'Choose notification template'\n                )}\n                onChange={(value: SelectableValue<Template>, _) => {\n                  setTemplate(value);\n                }}\n                options={options}\n                width={50}\n                defaultValue={defaultTemplateValue}\n              />\n              <IconButton\n                tooltip=\"Copy selected notification template to clipboard. You can use it in the custom tab.\"\n                onClick={() => copyToClipboard(template?.value?.content ?? defaultTemplateValue?.value?.content ?? '')}\n                name=\"copy\"\n              />\n            </Stack>\n\n            <TemplateContentAndPreview\n              templateContent={template?.value?.content ?? defaultTemplateValue?.value?.content ?? ''}\n              payload={defaultPayloadString}\n              templateName={template?.value?.name ?? defaultTemplateValue?.value?.name ?? ''}\n              setPayloadFormatError={() => {}}\n              className={cx(styles.templatePreview, styles.minEditorSize)}\n              payloadFormatError={null}\n            />\n          </Stack>\n        ) : (\n          <OptionCustomfield\n            option={option}\n            onCustomTemplateChange={onCustomTemplateChange}\n            initialValue={customTemplateValue}\n          />\n        )}\n      </Stack>\n      <div className={styles.actions}>\n        <Button variant=\"secondary\" onClick={onClose}>\n          <Trans i18nKey=\"alerting.common.cancel\">Cancel</Trans>\n        </Button>\n        <Button\n          variant=\"primary\"\n          onClick={() => {\n            if (templateOption === 'Custom') {\n              trackUseCustomInputInTemplate();\n              onSelect(customTemplateValue);\n            } else {\n              trackUseSingleTemplateInInput();\n              const name = template?.value?.name ?? defaultTemplateValue?.value?.name ?? '';\n              onSelect(getUseTemplateText(name));\n            }\n            return onClose();\n          }}\n        >\n          <Trans i18nKey=\"common.save\">Save</Trans>\n        </Button>\n      </div>\n    </Stack>\n  );\n}\n\nfunction OptionCustomfield({\n  option,\n  onCustomTemplateChange,\n  initialValue,\n}: {\n  option: NotificationChannelOption;\n  onCustomTemplateChange(customInput: string): void;\n  initialValue: string;\n}) {\n  const id = `custom-template-${option.label}`;\n  return (\n    <Stack direction=\"column\" gap={1}>\n      <Label htmlFor={id}>\n        <Trans i18nKey=\"alerting.contact-points.custom-template-value\">Custom template value</Trans>\n      </Label>\n      <TextArea\n        id={id}\n        label={t('alerting.option-customfield.label-custom-template', 'Custom template')}\n        placeholder={option.placeholder}\n        onChange={(e) => onCustomTemplateChange(e.currentTarget.value)}\n        defaultValue={initialValue}\n      />\n    </Stack>\n  );\n}\n\ninterface WrapWithTemplateSelectionProps extends PropsWithChildren {\n  useTemplates: boolean;\n  onSelectTemplate: (template: string) => void;\n  option: NotificationChannelOption;\n  name: string;\n}\nexport function WrapWithTemplateSelection({\n  useTemplates,\n  onSelectTemplate,\n  option,\n  name,\n  children,\n}: WrapWithTemplateSelectionProps) {\n  const styles = useStyles2(getStyles);\n  const { getValues } = useFormContext();\n  const value = getValues(name) ?? '';\n  // if the placeholder does not contain a template, we don't need to show the template picker\n  if (!option.placeholder.includes('{{ template ') || typeof value !== 'string') {\n    return <>{children}</>;\n  }\n  // Otherwise, we can use templates on this field\n  // if the value is empty, we only show the template picker\n  if (!value) {\n    return (\n      <div className={styles.inputContainer}>\n        <Stack direction=\"row\" gap={1} alignItems=\"center\">\n          {useTemplates && (\n            <TemplatesPicker onSelect={onSelectTemplate} option={option} valueInForm={getValues(name) ?? ''} />\n          )}\n        </Stack>\n      </div>\n    );\n  }\n  const onlyOneTemplate = value ? matchesOnlyOneTemplate(value) : false;\n  if (onlyOneTemplate) {\n    return (\n      <div className={styles.inputContainer}>\n        <Stack direction=\"row\" gap={1} alignItems=\"center\">\n          <Text variant=\"bodySmall\">{`Template: ${getTemplateName(value)}`}</Text>\n          {useTemplates && (\n            <TemplatesPicker onSelect={onSelectTemplate} option={option} valueInForm={getValues(name) ?? ''} />\n          )}\n        </Stack>\n      </div>\n    );\n  }\n  // custom template  field\n  return (\n    <div className={styles.inputContainer}>\n      <Stack direction=\"row\" gap={1} alignItems=\"center\">\n        {children}\n        {useTemplates && (\n          <TemplatesPicker onSelect={onSelectTemplate} option={option} valueInForm={getValues(name) ?? ''} />\n        )}\n      </Stack>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  actions: css({\n    flex: 0,\n    justifyContent: 'flex-end',\n    display: 'flex',\n    gap: theme.spacing(1),\n  }),\n  templatePreview: css({\n    flex: 1,\n    display: 'flex',\n  }),\n  templateTabOption: css({\n    width: 'fit-content',\n  }),\n  minEditorSize: css({\n    minHeight: 300,\n    minWidth: 300,\n  }),\n  inputContainer: css({\n    marginTop: theme.spacing(1.5),\n  }),\n});\n","import { css } from '@emotion/css';\nimport { isEmpty } from 'lodash';\nimport { FC, useEffect } from 'react';\nimport { Controller, DeepMap, FieldError, useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport {\n  Checkbox,\n  Field,\n  Input,\n  RadioButtonList,\n  SecretInput,\n  SecretTextArea,\n  Select,\n  TextArea,\n  useStyles2,\n} from '@grafana/ui';\nimport { NotificationChannelOption, NotificationChannelSecureFields } from 'app/types';\n\nimport { KeyValueMapInput } from './KeyValueMapInput';\nimport { StringArrayInput } from './StringArrayInput';\nimport { SubformArrayField } from './SubformArrayField';\nimport { SubformField } from './SubformField';\nimport { WrapWithTemplateSelection } from './TemplateSelector';\n\ninterface Props {\n  defaultValue: any;\n  option: NotificationChannelOption;\n  // this is defined if the option is rendered inside a subform\n  parentOption?: NotificationChannelOption;\n  invalid?: boolean;\n  pathPrefix: string;\n  pathSuffix?: string;\n  error?: FieldError | DeepMap<any, FieldError>;\n  readOnly?: boolean;\n  customValidator?: (value: string) => boolean | string | Promise<boolean | string>;\n  onResetSecureField?: (propertyName: string) => void;\n  secureFields?: NotificationChannelSecureFields;\n}\n\nexport const OptionField: FC<Props> = ({\n  option,\n  parentOption,\n  invalid,\n  pathPrefix,\n  pathSuffix = '',\n  error,\n  defaultValue,\n  readOnly = false,\n  customValidator,\n  onResetSecureField,\n  secureFields = {},\n}) => {\n  const optionPath = `${pathPrefix}${pathSuffix}`;\n\n  if (option.element === 'subform') {\n    return (\n      <SubformField\n        secureFields={secureFields}\n        onResetSecureField={onResetSecureField}\n        readOnly={readOnly}\n        defaultValue={defaultValue}\n        option={option}\n        errors={error}\n        pathPrefix={optionPath}\n      />\n    );\n  }\n  if (option.element === 'subform_array') {\n    return (\n      <SubformArrayField\n        readOnly={readOnly}\n        defaultValues={defaultValue}\n        option={option}\n        pathPrefix={optionPath}\n        errors={error as Array<DeepMap<any, FieldError>> | undefined}\n      />\n    );\n  }\n  return (\n    <Field\n      label={option.element !== 'checkbox' && option.element !== 'radio' ? option.label : undefined}\n      description={option.description || undefined}\n      invalid={!!error}\n      error={error?.message}\n      data-testid={`${optionPath}${option.propertyName}`}\n    >\n      <OptionInput\n        id={`${optionPath}${option.propertyName}`}\n        defaultValue={defaultValue}\n        option={option}\n        invalid={invalid}\n        pathPrefix={optionPath}\n        readOnly={readOnly}\n        pathIndex={pathPrefix}\n        parentOption={parentOption}\n        customValidator={customValidator}\n        onResetSecureField={onResetSecureField}\n        secureFields={secureFields}\n      />\n    </Field>\n  );\n};\n\nconst OptionInput: FC<Props & { id: string; pathIndex?: string }> = ({\n  option,\n  invalid,\n  id,\n  pathPrefix = '',\n  pathIndex = '',\n  readOnly = false,\n  customValidator,\n  onResetSecureField,\n  secureFields = {},\n  parentOption,\n}) => {\n  const styles = useStyles2(getStyles);\n  const { control, register, unregister, getValues, setValue } = useFormContext();\n\n  const name = `${pathPrefix}${option.propertyName}`;\n  const nestedKey = parentOption ? `${parentOption.propertyName}.${option.propertyName}` : option.propertyName;\n\n  const isEncryptedInput = secureFields?.[nestedKey];\n\n  // workaround for https://github.com/react-hook-form/react-hook-form/issues/4993#issuecomment-829012506\n  useEffect(\n    () => () => {\n      unregister(name, { keepValue: false });\n    },\n    [unregister, name]\n  );\n\n  const useTemplates = option.placeholder.includes('{{ template');\n\n  function onSelectTemplate(template: string) {\n    setValue(name, template);\n  }\n\n  switch (option.element) {\n    case 'checkbox':\n      return (\n        <Checkbox\n          id={id}\n          readOnly={readOnly}\n          disabled={readOnly}\n          className={styles.checkbox}\n          {...register(name)}\n          label={option.label}\n          description={option.description}\n        />\n      );\n    case 'input':\n      return (\n        <WrapWithTemplateSelection\n          useTemplates={useTemplates}\n          option={option}\n          name={name}\n          onSelectTemplate={onSelectTemplate}\n        >\n          {isEncryptedInput ? (\n            <SecretInput onReset={() => onResetSecureField?.(nestedKey)} isConfigured />\n          ) : (\n            <Input\n              id={id}\n              readOnly={readOnly || useTemplates || determineReadOnly(option, getValues, pathIndex)}\n              invalid={invalid}\n              type={option.inputType}\n              {...register(name, {\n                required: determineRequired(option, getValues, pathIndex),\n                validate: {\n                  validationRule: (v) =>\n                    option.validationRule ? validateOption(v, option.validationRule, option.required) : true,\n                  customValidator: (v) => (customValidator ? customValidator(v) : true),\n                },\n                setValueAs: option.setValueAs,\n              })}\n              placeholder={option.placeholder}\n            />\n          )}\n        </WrapWithTemplateSelection>\n      );\n\n    case 'select':\n      return (\n        <Controller\n          render={({ field: { onChange, ref, ...field } }) => (\n            <Select\n              disabled={readOnly}\n              options={option.selectOptions ?? undefined}\n              invalid={invalid}\n              onChange={(value) => onChange(value.value)}\n              {...field}\n            />\n          )}\n          control={control}\n          name={name}\n          defaultValue={option.defaultValue?.value}\n          rules={{\n            validate: {\n              customValidator: (v) => (customValidator ? customValidator(v) : true),\n            },\n          }}\n        />\n      );\n    case 'radio':\n      return (\n        <>\n          <legend className={styles.legend}>{option.label}</legend>\n          <Controller\n            render={({ field: { ref, ...field } }) => (\n              <RadioButtonList disabled={readOnly} options={option.selectOptions ?? []} {...field} />\n            )}\n            control={control}\n            defaultValue={option.defaultValue?.value}\n            name={name}\n            rules={{\n              required: option.required ? 'Option is required' : false,\n              validate: {\n                validationRule: (v) =>\n                  option.validationRule ? validateOption(v, option.validationRule, option.required) : true,\n                customValidator: (v) => (customValidator ? customValidator(v) : true),\n              },\n            }}\n          />\n        </>\n      );\n    case 'textarea':\n      return (\n        <WrapWithTemplateSelection\n          useTemplates={useTemplates}\n          option={option}\n          name={name}\n          onSelectTemplate={onSelectTemplate}\n        >\n          {isEncryptedInput ? (\n            <SecretTextArea onReset={() => onResetSecureField?.(nestedKey)} isConfigured />\n          ) : (\n            <TextArea\n              id={id}\n              readOnly={readOnly || useTemplates}\n              invalid={invalid}\n              placeholder={option.placeholder}\n              {...register(name, {\n                required: option.required ? 'Required' : false,\n                validate: (v) =>\n                  option.validationRule !== '' ? validateOption(v, option.validationRule, option.required) : true,\n              })}\n            />\n          )}\n        </WrapWithTemplateSelection>\n      );\n    case 'string_array':\n      return (\n        <Controller\n          render={({ field: { value, onChange } }) => (\n            <StringArrayInput readOnly={readOnly} value={value} onChange={onChange} />\n          )}\n          control={control}\n          name={name}\n        />\n      );\n    case 'key_value_map':\n      return (\n        <Controller\n          render={({ field: { value, onChange } }) => (\n            <KeyValueMapInput readOnly={readOnly} value={value} onChange={onChange} />\n          )}\n          control={control}\n          name={name}\n        />\n      );\n\n    default:\n      console.error('Element not supported', option.element);\n      return null;\n  }\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  checkbox: css({\n    height: 'auto', // native checkbox has fixed height which does not take into account description\n  }),\n  legend: css({\n    fontSize: theme.typography.h6.fontSize,\n  }),\n});\n\nconst validateOption = (value: string, validationRule: string, required: boolean) => {\n  if (value === '' && !required) {\n    return true;\n  }\n\n  return RegExp(validationRule).test(value) ? true : 'Invalid format';\n};\n\nconst determineRequired = (option: NotificationChannelOption, getValues: any, pathIndex: string) => {\n  const secureFields = getValues(`${pathIndex}secureFields`);\n  const secureSettings = getValues(`${pathIndex}secureSettings`);\n\n  if (!option.dependsOn) {\n    return option.required ? 'Required' : false;\n  }\n  if (isEmpty(secureFields) || !secureFields[option.dependsOn]) {\n    const dependentOn = Boolean(secureSettings[option.dependsOn]);\n    return !dependentOn && option.required ? 'Required' : false;\n  } else {\n    const dependentOn = Boolean(secureFields[option.dependsOn]);\n    return !dependentOn && option.required ? 'Required' : false;\n  }\n};\n\nconst determineReadOnly = (option: NotificationChannelOption, getValues: any, pathIndex: string) => {\n  if (!option.dependsOn) {\n    return false;\n  }\n  if (isEmpty(getValues(`${pathIndex}secureFields`))) {\n    return getValues(`${pathIndex}secureSettings.${option.dependsOn}`);\n  } else {\n    return getValues(`${pathIndex}secureFields.${option.dependsOn}`);\n  }\n};\n","import { set } from 'lodash';\nimport { useCallback } from 'react';\nimport { UseFormReturn } from 'react-hook-form';\n\ninterface Options<R> {\n  name: string;\n  formAPI: UseFormReturn<any>;\n  defaults?: R[];\n\n  // if true, sets `__deleted: true` but does not remove item from the array in values\n  softDelete?: boolean;\n}\n\nexport type ControlledField<R> = R & {\n  __deleted?: boolean;\n};\n\nconst EMPTY_ARRAY = [] as const;\n\n/*\n * react-hook-form's own useFieldArray is uncontrolled and super buggy.\n * this is a simple controlled version. It's dead simple and more robust at the cost of re-rendering the form\n * on every change to the sub forms in the array.\n * Warning: you'll have to take care of your own unique identiifer to use as `key` for the ReactNode array.\n * Using index will cause problems.\n */\nexport function useControlledFieldArray<R>(options: Options<R>) {\n  const { name, formAPI, defaults, softDelete } = options;\n  const { watch, getValues, reset, setValue } = formAPI;\n\n  const fields: Array<ControlledField<R>> = watch(name) ?? defaults ?? EMPTY_ARRAY;\n\n  const update = useCallback(\n    (updateFn: (fields: R[]) => R[]) => {\n      const values = JSON.parse(JSON.stringify(getValues()));\n      const newItems = updateFn(fields ?? []);\n      reset(set(values, name, newItems));\n    },\n    [getValues, name, reset, fields]\n  );\n\n  return {\n    fields,\n    append: useCallback((values: R) => update((fields) => [...fields, values]), [update]),\n    remove: useCallback(\n      (index: number) => {\n        if (softDelete) {\n          setValue(`${name}.${index}.__deleted`, true);\n        } else {\n          update((items) => {\n            const newItems = items.slice();\n            newItems.splice(index, 1);\n            return newItems;\n          });\n        }\n      },\n      [update, name, setValue, softDelete]\n    ),\n  };\n}\n","import { get, has, isArray, isNil, omit, omitBy, reduce } from 'lodash';\n\nimport {\n  AlertmanagerReceiver,\n  GrafanaManagedContactPoint,\n  GrafanaManagedReceiverConfig,\n  Receiver,\n} from 'app/plugins/datasource/alertmanager/types';\nimport { CloudNotifierType, NotificationChannelOption, NotifierDTO, NotifierType } from 'app/types';\n\nimport {\n  CloudChannelConfig,\n  CloudChannelMap,\n  CloudChannelValues,\n  GrafanaChannelMap,\n  GrafanaChannelValues,\n  ReceiverFormValues,\n} from '../types/receiver-form';\n\nexport function grafanaReceiverToFormValues(\n  receiver: GrafanaManagedContactPoint,\n  notifiers: NotifierDTO[]\n): [ReceiverFormValues<GrafanaChannelValues>, GrafanaChannelMap] {\n  const channelMap: GrafanaChannelMap = {};\n  // giving each form receiver item a unique id so we can use it to map back to \"original\" items\n  // as well as to use as `key` prop.\n  // @TODO use uid once backend is fixed to provide it. then we can get rid of the GrafanaChannelMap\n  let idCounter = 1;\n  const values = {\n    name: receiver.name,\n    items:\n      receiver.grafana_managed_receiver_configs?.map((channel) => {\n        const id = String(idCounter++);\n        channelMap[id] = channel;\n        const notifier = notifiers.find(({ type }) => type === channel.type);\n        return grafanaChannelConfigToFormChannelValues(id, channel, notifier);\n      }) ?? [],\n  };\n  return [values, channelMap];\n}\n\nexport function cloudReceiverToFormValues(\n  receiver: Receiver,\n  notifiers: NotifierDTO[]\n): [ReceiverFormValues<CloudChannelValues>, CloudChannelMap] {\n  const channelMap: CloudChannelMap = {};\n  // giving each form receiver item a unique id so we can use it to map back to \"original\" items\n  let idCounter = 1;\n  const items: CloudChannelValues[] = Object.entries(receiver)\n    // filter out only config items that are relevant to cloud\n    .filter(([type]) => type.endsWith('_configs') && type !== 'grafana_managed_receiver_configs')\n    // map property names to cloud notifier types by removing the `_config` suffix\n    .map(([type, configs]): [CloudNotifierType, CloudChannelConfig[]] => [\n      type.replace('_configs', '') as CloudNotifierType,\n      configs,\n    ])\n    // convert channel configs to form values\n    .map(([type, configs]) =>\n      configs.map((config) => {\n        const id = String(idCounter++);\n        channelMap[id] = { type, config };\n        const notifier = notifiers.find((notifier) => notifier.type === type);\n        if (!notifier) {\n          throw new Error(`unknown cloud notifier: ${type}`);\n        }\n        return cloudChannelConfigToFormChannelValues(id, type, config);\n      })\n    )\n    .flat();\n  const values = {\n    name: receiver.name,\n    items,\n  };\n  return [values, channelMap];\n}\n\nexport function formValuesToGrafanaReceiver(\n  values: ReceiverFormValues<GrafanaChannelValues>,\n  channelMap: GrafanaChannelMap,\n  defaultChannelValues: GrafanaChannelValues,\n  notifiers: NotifierDTO[]\n): Receiver {\n  return {\n    name: values.name,\n    grafana_managed_receiver_configs: (values.items ?? []).map((channelValues) => {\n      const existing: GrafanaManagedReceiverConfig | undefined = channelMap[channelValues.__id];\n      const notifier = notifiers.find((notifier) => notifier.type === channelValues.type);\n\n      return formChannelValuesToGrafanaChannelConfig(\n        channelValues,\n        defaultChannelValues,\n        values.name,\n        existing,\n        notifier\n      );\n    }),\n  };\n}\n\nexport function formValuesToCloudReceiver(\n  values: ReceiverFormValues<CloudChannelValues>,\n  defaults: CloudChannelValues\n): Receiver {\n  const recv: AlertmanagerReceiver = {\n    name: values.name,\n  };\n  values.items.forEach(({ __id, type, settings, sendResolved }) => {\n    const channelWithOmmitedIdentifiers = omitEmptyValues({\n      ...omitTemporaryIdentifiers(settings),\n      send_resolved: sendResolved ?? defaults.sendResolved,\n    });\n\n    const channel =\n      type === 'jira' ? convertJiraFieldToJson(channelWithOmmitedIdentifiers) : channelWithOmmitedIdentifiers;\n\n    if (!(`${type}_configs` in recv)) {\n      recv[`${type}_configs`] = [channel];\n    } else {\n      recv[`${type}_configs`]?.push(channel);\n    }\n  });\n  return recv;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function convertJiraFieldToJson(object: Record<string, any>) {\n  // Only for cloud alert manager. Jira fields option can be a nested object. We need to convert it to JSON.\n\n  const objectCopy = structuredClone(object);\n\n  if (typeof objectCopy.fields === 'object') {\n    for (const [optionName, optionValue] of Object.entries(objectCopy.fields)) {\n      let valueForField;\n      try {\n        // eslint-disable-next-line\n        valueForField = JSON.parse(optionValue as string); // is a stringified object\n      } catch {\n        valueForField = optionValue; // is not a stringified object\n      }\n      objectCopy.fields[optionName] = valueForField;\n    }\n  }\n\n  return objectCopy;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function convertJsonToJiraField(object: Record<string, any>) {\n  // Only for cloud alert manager. Convert JSON back to nested Jira fields option.\n\n  const objectCopy = structuredClone(object);\n\n  if (typeof objectCopy.fields === 'object') {\n    for (const [optionName, optionValue] of Object.entries(objectCopy.fields)) {\n      let valueForField;\n      if (typeof optionValue === 'object') {\n        valueForField = JSON.stringify(optionValue);\n      } else {\n        valueForField = optionValue;\n      }\n      objectCopy.fields[optionName] = valueForField;\n    }\n  }\n\n  return objectCopy;\n}\n\nfunction cloudChannelConfigToFormChannelValues(\n  id: string,\n  type: CloudNotifierType,\n  channel: CloudChannelConfig\n): CloudChannelValues {\n  return {\n    __id: id,\n    type,\n    settings: {\n      ...(type === 'jira' ? convertJsonToJiraField(channel) : channel),\n    },\n    secureFields: {},\n    secureSettings: {},\n    sendResolved: channel.send_resolved,\n  };\n}\n\nfunction grafanaChannelConfigToFormChannelValues(\n  id: string,\n  channel: GrafanaManagedReceiverConfig,\n  notifier?: NotifierDTO\n): GrafanaChannelValues {\n  const values: GrafanaChannelValues = {\n    __id: id,\n    type: channel.type as NotifierType,\n    provenance: channel.provenance,\n    secureSettings: {},\n    settings: { ...channel.settings },\n    secureFields: { ...channel.secureFields },\n    disableResolveMessage: channel.disableResolveMessage,\n  };\n\n  notifier?.options.forEach((option) => {\n    if (option.secure && values.settings[option.propertyName]) {\n      values.secureSettings[option.propertyName] = values.settings[option.propertyName];\n      delete values.settings[option.propertyName];\n    }\n  });\n\n  return values;\n}\n\n/**\n * Recursively find all keys that should be marked a secure fields, using JSONpath for nested fields.\n */\nexport function getSecureFieldNames(notifier: NotifierDTO): string[] {\n  // eg. ['foo', 'bar.baz']\n  const secureFieldPaths: string[] = [];\n\n  // we'll pass in the prefix for each iteration so we can track the JSON path\n  function findSecureOptions(options: NotificationChannelOption[], prefix?: string) {\n    for (const option of options) {\n      const key = prefix ? `${prefix}.${option.propertyName}` : option.propertyName;\n\n      // if the field is a subform, recurse\n      if (option.subformOptions) {\n        findSecureOptions(option.subformOptions, key);\n        continue;\n      }\n\n      if (option.secure) {\n        secureFieldPaths.push(key);\n        continue;\n      }\n    }\n  }\n\n  findSecureOptions(notifier.options);\n\n  return secureFieldPaths;\n}\n\nexport function formChannelValuesToGrafanaChannelConfig(\n  values: GrafanaChannelValues,\n  defaults: GrafanaChannelValues,\n  name: string,\n  existing?: GrafanaManagedReceiverConfig,\n  notifier?: NotifierDTO\n): GrafanaManagedReceiverConfig {\n  const channel: GrafanaManagedReceiverConfig = {\n    settings: omitEmptyValues({\n      ...(existing && existing.type === values.type ? (existing.settings ?? {}) : {}),\n      ...(values.settings ?? {}),\n    }),\n    secureSettings: omitEmptyUnlessExisting(values.secureSettings, existing?.secureFields),\n    type: values.type,\n    name,\n    disableResolveMessage:\n      values.disableResolveMessage ?? existing?.disableResolveMessage ?? defaults.disableResolveMessage,\n  };\n\n  // find all secure field definitions\n  const secureFieldNames = notifier ? getSecureFieldNames(notifier) : [];\n\n  // we make sure all fields that are marked as \"secure\" will be moved to \"SecureSettings\" instead of \"settings\"\n  const secureSettings = reduce(\n    secureFieldNames,\n    (acc: Record<string, unknown> = {}, key) => {\n      // the value for secure settings can come from either the \"settings\" (accidental) or \"secureFields\" if editing an existing receiver\n      acc[key] = get(channel.settings, key) ?? get(values.secureFields, key);\n      return acc;\n    },\n    {}\n  );\n\n  channel.secureSettings = {\n    ...secureSettings,\n    ...channel.secureSettings,\n  };\n\n  // remove the secure ones from the regular settings\n  channel.settings = omit(channel.settings, secureFieldNames);\n\n  if (existing) {\n    channel.uid = existing.uid;\n  }\n\n  return channel;\n}\n\n// null, undefined and '' are deemed unacceptable\nconst isUnacceptableValue = (value: unknown) => isNil(value) || value === '';\n\n// will remove properties that have empty ('', null, undefined) object properties.\n// traverses nested objects and arrays as well. in place, mutates the object.\n// this is needed because form will submit empty string for not filled in fields,\n// but for cloud alertmanager receiver config to use global default value the property must be omitted entirely\n// this isn't a perfect solution though. No way for user to intentionally provide an empty string. Will need rethinking later\nexport function omitEmptyValues<T>(obj: T): T {\n  if (isArray(obj)) {\n    obj.forEach(omitEmptyValues);\n  } else if (typeof obj === 'object' && obj !== null) {\n    Object.entries(obj).forEach(([key, value]) => {\n      if (isUnacceptableValue(value)) {\n        delete (obj as any)[key];\n      } else {\n        omitEmptyValues(value);\n      }\n    });\n  }\n  return obj;\n}\n\n// Will remove empty ('', null, undefined) object properties unless they were previously defined.\n// existing is a map of property names that were previously defined.\nexport function omitEmptyUnlessExisting(settings = {}, existing = {}): Record<string, unknown> {\n  return omitBy(settings, (value, key) => isUnacceptableValue(value) && !has(existing, key));\n}\n\nexport function omitTemporaryIdentifiers<T>(object: Readonly<T>): T {\n  function omitIdentifiers<T>(obj: T) {\n    if (isArray(obj)) {\n      obj.forEach(omitIdentifiers);\n    } else if (typeof obj === 'object' && obj !== null) {\n      if ('__id' in obj) {\n        delete obj.__id;\n      }\n      Object.values(obj).forEach(omitIdentifiers);\n    }\n  }\n\n  const objectCopy = structuredClone(object);\n  omitIdentifiers(objectCopy);\n\n  return objectCopy;\n}\n"],"names":["useCleanup","cleanupAction","dispatch","selectorRef","CollapsibleSection","label","description","children","className","size","styles","getStyles","isCollapsed","setIsCollapsed","toggleCollapse","theme","KeyValueMapInput","value","onChange","readOnly","pairs","setPairs","recordToPairs","currentNewPair","setCurrentNewPair","emitChange","pairsToRecord","deleteItem","index","newPairs","removed","key","Input","ActionIcon","Stack","e","Button","record","obj","StringArrayInput","newValue","updateValue","itemValue","v","i","getReceiverFormFieldStyles","SubformArrayField","option","pathPrefix","errors","defaultValues","path","formAPI","fields","append","remove","useControlledFieldArray","field","itemIndex","OptionField","SubformField","defaultValue","secureFields","onResetSecureField","name","watch","_watchValue","show","setShow","subOption","TemplateContentAndPreview","payload","templateContent","templateName","payloadFormatError","setPayloadFormatError","selectedAlertmanager","isGrafanaAlertManager","EditorColumnHeader","Box","width","height","TemplateEditor","TemplatePreview","useGetDefaultTemplatesQuery","TemplatesPicker","onSelect","valueInForm","showTemplates","setShowTemplates","onClick","handleClose","Drawer","TemplateSelector","getTemplateOptions","templateFiles","defaultTemplates","templateMap","content","template","onClose","valueInFormIsCustom","setTemplate","customTemplateValue","setCustomTemplateValue","data","error","isLoading","useNotificationTemplates","templateOption","setTemplateOption","_","copyToClipboard","useCopyToClipboard","templateOptions","onCustomTemplateChange","customInput","onTemplateOptionChange","options","defaultTemplateValue","nameOfTemplateInForm","RadioButtonGroup","Select","IconButton","OptionCustomfield","initialValue","id","Label","TextArea","WrapWithTemplateSelection","useTemplates","onSelectTemplate","getValues","Text","parentOption","invalid","pathSuffix","customValidator","optionPath","Field","OptionInput","pathIndex","control","register","unregister","setValue","nestedKey","isEncryptedInput","Checkbox","SecretInput","determineReadOnly","determineRequired","validateOption","ref","RadioButtonList","SecretTextArea","validationRule","required","secureSettings","EMPTY_ARRAY","defaults","softDelete","reset","update","updateFn","values","newItems","items","grafanaReceiverToFormValues","receiver","notifiers","channelMap","idCounter","channel","notifier","type","grafanaChannelConfigToFormChannelValues","cloudReceiverToFormValues","configs","config","cloudChannelConfigToFormChannelValues","formValuesToGrafanaReceiver","defaultChannelValues","channelValues","existing","formChannelValuesToGrafanaChannelConfig","formValuesToCloudReceiver","recv","__id","settings","sendResolved","channelWithOmmitedIdentifiers","omitEmptyValues","omitTemporaryIdentifiers","convertJiraFieldToJson","object","objectCopy","optionName","optionValue","valueForField","convertJsonToJiraField","getSecureFieldNames","secureFieldPaths","findSecureOptions","prefix","omitEmptyUnlessExisting","secureFieldNames","acc","isUnacceptableValue","omitIdentifiers"],"sourceRoot":""}