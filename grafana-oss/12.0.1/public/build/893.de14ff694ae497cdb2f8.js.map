{"version":3,"file":"893.de14ff694ae497cdb2f8.js","mappings":"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","sources":["webpack://grafana/./node_modules/react-data-grid/lib/bundle.js","webpack://grafana/./node_modules/uwrap/dist/uWrap.mjs","webpack://grafana/./packages/grafana-ui/src/components/Table/TableNG/constants.ts","webpack://grafana/./packages/grafana-ui/src/components/Table/TableNG/utils.ts","webpack://grafana/./packages/grafana-ui/src/components/Table/TableNG/Filter/utils.ts","webpack://grafana/./packages/grafana-ui/src/components/Table/TableNG/Filter/FilterPopup.tsx","webpack://grafana/./packages/grafana-ui/src/components/Table/TableNG/Filter/FilterList.tsx","webpack://grafana/./packages/grafana-ui/src/components/Table/TableNG/Filter/Filter.tsx","webpack://grafana/./packages/grafana-ui/src/components/Table/TableNG/Cells/HeaderCell.tsx","webpack://grafana/./packages/grafana-ui/src/components/Table/TableNG/Cells/RowExpander.tsx","webpack://grafana/./packages/grafana-ui/src/components/Table/TableNG/types.ts","webpack://grafana/./packages/grafana-ui/src/components/Table/TableNG/Cells/ActionsCell.tsx","webpack://grafana/./packages/grafana-ui/src/components/Table/TableNG/Cells/AutoCell.tsx","webpack://grafana/./packages/grafana-ui/src/components/Table/TableNG/Cells/BarGaugeCell.tsx","webpack://grafana/./packages/grafana-ui/src/components/Table/TableNG/Cells/DataLinksCell.tsx","webpack://grafana/./packages/grafana-ui/src/components/Table/TableNG/Cells/GeoCell.tsx","webpack://grafana/./packages/grafana-ui/src/components/Table/TableNG/Cells/ImageCell.tsx","webpack://grafana/./packages/grafana-ui/src/components/Table/TableNG/Cells/JSONCell.tsx","webpack://grafana/./packages/grafana-ui/src/components/Table/TableNG/Cells/SparklineCell.tsx","webpack://grafana/./packages/grafana-ui/src/components/Table/TableNG/Cells/TableCellNG.tsx","webpack://grafana/./packages/grafana-ui/src/components/Table/TableNG/TableNG.tsx"],"sourcesContent":["import { createContext, useContext, useMemo, useEffect, useLayoutEffect as useLayoutEffect$1, useRef, useState, useCallback, memo, useId, forwardRef, useImperativeHandle } from 'react';\nimport { flushSync } from 'react-dom';\nimport clsx from 'clsx';\nimport { jsx, jsxs, Fragment } from 'react/jsx-runtime';\n\nfunction getColSpan(column, lastFrozenColumnIndex, args) {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n  if (Number.isInteger(colSpan) && colSpan > 1 && (!column.frozen || column.idx + colSpan - 1 <= lastFrozenColumnIndex)) {\n    return colSpan;\n  }\n  return undefined;\n}\n\nfunction stopPropagation(event) {\n  event.stopPropagation();\n}\nfunction scrollIntoView(element) {\n  element?.scrollIntoView({\n    inline: 'nearest',\n    block: 'nearest'\n  });\n}\n\nfunction createCellEvent(event) {\n  let defaultPrevented = false;\n  const cellEvent = {\n    ...event,\n    preventGridDefault() {\n      defaultPrevented = true;\n    },\n    isGridDefaultPrevented() {\n      return defaultPrevented;\n    }\n  };\n  Object.setPrototypeOf(cellEvent, Object.getPrototypeOf(event));\n  return cellEvent;\n}\n\nconst nonInputKeys = new Set(['Unidentified', 'Alt', 'AltGraph', 'CapsLock', 'Control', 'Fn', 'FnLock', 'Meta', 'NumLock', 'ScrollLock', 'Shift', 'Tab', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'ArrowUp', 'End', 'Home', 'PageDown', 'PageUp', 'Insert', 'ContextMenu', 'Escape', 'Pause', 'Play', 'PrintScreen', 'F1', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12']);\nfunction isCtrlKeyHeldDown(e) {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\nfunction isDefaultCellInput(event) {\n  const vKey = 86;\n  if (isCtrlKeyHeldDown(event) && event.keyCode !== vKey) return false;\n  return !nonInputKeys.has(event.key);\n}\nfunction onEditorNavigation({\n  key,\n  target\n}) {\n  if (key === 'Tab' && (target instanceof HTMLInputElement || target instanceof HTMLTextAreaElement || target instanceof HTMLSelectElement)) {\n    return target.closest('.rdg-editor-container')?.querySelectorAll('input, textarea, select').length === 1;\n  }\n  return false;\n}\n\nconst measuringCellClassname = \"mlln6zg7-0-0-beta-46\";\nfunction renderMeasuringCells(viewportColumns) {\n  return viewportColumns.map(({\n    key,\n    idx,\n    minWidth,\n    maxWidth\n  }) => /*#__PURE__*/jsx(\"div\", {\n    className: measuringCellClassname,\n    style: {\n      gridColumnStart: idx + 1,\n      minWidth,\n      maxWidth\n    },\n    \"data-measuring-cell-key\": key\n  }, key));\n}\n\nfunction isSelectedCellEditable({\n  selectedPosition,\n  columns,\n  rows\n}) {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return isCellEditableUtil(column, row);\n}\nfunction isCellEditableUtil(column, row) {\n  return column.renderEditCell != null && (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false;\n}\nfunction getSelectedCellColSpan({\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  rowIdx,\n  mainHeaderRowIdx,\n  lastFrozenColumnIndex,\n  column\n}) {\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  if (rowIdx === mainHeaderRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'HEADER'\n    });\n  }\n  if (topSummaryRows && rowIdx > mainHeaderRowIdx && rowIdx <= topSummaryRowsCount + mainHeaderRowIdx) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: topSummaryRows[rowIdx + topSummaryRowsCount]\n    });\n  }\n  if (rowIdx >= 0 && rowIdx < rows.length) {\n    const row = rows[rowIdx];\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'ROW',\n      row\n    });\n  }\n  if (bottomSummaryRows) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: bottomSummaryRows[rowIdx - rows.length]\n    });\n  }\n  return undefined;\n}\nfunction getNextSelectedCellPosition({\n  moveUp,\n  moveNext,\n  cellNavigationMode,\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  minRowIdx,\n  mainHeaderRowIdx,\n  maxRowIdx,\n  currentPosition: {\n    idx: currentIdx,\n    rowIdx: currentRowIdx\n  },\n  nextPosition,\n  lastFrozenColumnIndex,\n  isCellWithinBounds\n}) {\n  let {\n    idx: nextIdx,\n    rowIdx: nextRowIdx\n  } = nextPosition;\n  const columnsCount = columns.length;\n  const setColSpan = moveNext => {\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx > nextIdx) break;\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        topSummaryRows,\n        bottomSummaryRows,\n        rowIdx: nextRowIdx,\n        mainHeaderRowIdx,\n        lastFrozenColumnIndex,\n        column\n      });\n      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n        nextIdx = colIdx + (moveNext ? colSpan : 0);\n        break;\n      }\n    }\n  };\n  const getParentRowIdx = parent => {\n    return parent.level + mainHeaderRowIdx;\n  };\n  const setHeaderGroupColAndRowSpan = () => {\n    if (moveNext) {\n      const nextColumn = columns[nextIdx];\n      let parent = nextColumn.parent;\n      while (parent !== undefined) {\n        const parentRowIdx = getParentRowIdx(parent);\n        if (nextRowIdx === parentRowIdx) {\n          nextIdx = parent.idx + parent.colSpan;\n          break;\n        }\n        parent = parent.parent;\n      }\n    } else if (moveUp) {\n      const nextColumn = columns[nextIdx];\n      let parent = nextColumn.parent;\n      let found = false;\n      while (parent !== undefined) {\n        const parentRowIdx = getParentRowIdx(parent);\n        if (nextRowIdx >= parentRowIdx) {\n          nextIdx = parent.idx;\n          nextRowIdx = parentRowIdx;\n          found = true;\n          break;\n        }\n        parent = parent.parent;\n      }\n      if (!found) {\n        nextIdx = currentIdx;\n        nextRowIdx = currentRowIdx;\n      }\n    }\n  };\n  if (isCellWithinBounds(nextPosition)) {\n    setColSpan(moveNext);\n    if (nextRowIdx < mainHeaderRowIdx) {\n      setHeaderGroupColAndRowSpan();\n    }\n  }\n  if (cellNavigationMode === 'CHANGE_ROW') {\n    const isAfterLastColumn = nextIdx === columnsCount;\n    const isBeforeFirstColumn = nextIdx === -1;\n    if (isAfterLastColumn) {\n      const isLastRow = nextRowIdx === maxRowIdx;\n      if (!isLastRow) {\n        nextIdx = 0;\n        nextRowIdx += 1;\n      }\n    } else if (isBeforeFirstColumn) {\n      const isFirstRow = nextRowIdx === minRowIdx;\n      if (!isFirstRow) {\n        nextRowIdx -= 1;\n        nextIdx = columnsCount - 1;\n      }\n      setColSpan(false);\n    }\n  }\n  if (nextRowIdx < mainHeaderRowIdx) {\n    const nextColumn = columns[nextIdx];\n    let parent = nextColumn.parent;\n    const nextParentRowIdx = nextRowIdx;\n    nextRowIdx = mainHeaderRowIdx;\n    while (parent !== undefined) {\n      const parentRowIdx = getParentRowIdx(parent);\n      if (parentRowIdx >= nextParentRowIdx) {\n        nextRowIdx = parentRowIdx;\n        nextIdx = parent.idx;\n      }\n      parent = parent.parent;\n    }\n  }\n  return {\n    idx: nextIdx,\n    rowIdx: nextRowIdx\n  };\n}\nfunction canExitGrid({\n  maxColIdx,\n  minRowIdx,\n  maxRowIdx,\n  selectedPosition: {\n    rowIdx,\n    idx\n  },\n  shiftKey\n}) {\n  const atLastCellInRow = idx === maxColIdx;\n  const atFirstCellInRow = idx === 0;\n  const atLastRow = rowIdx === maxRowIdx;\n  const atFirstRow = rowIdx === minRowIdx;\n  return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n}\n\nconst cell = \"cj343x07-0-0-beta-46\";\nconst cellClassname = `rdg-cell ${cell}`;\nconst cellFrozen = \"csofj7r7-0-0-beta-46\";\nconst cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\n\nfunction getRowStyle(rowIdx) {\n  return {\n    '--rdg-grid-row-start': rowIdx\n  };\n}\nfunction getHeaderCellStyle(column, rowIdx, rowSpan) {\n  const gridRowEnd = rowIdx + 1;\n  const paddingBlockStart = `calc(${rowSpan - 1} * var(--rdg-header-row-height))`;\n  if (column.parent === undefined) {\n    return {\n      insetBlockStart: 0,\n      gridRowStart: 1,\n      gridRowEnd,\n      paddingBlockStart\n    };\n  }\n  return {\n    insetBlockStart: `calc(${rowIdx - rowSpan} * var(--rdg-header-row-height))`,\n    gridRowStart: gridRowEnd - rowSpan,\n    gridRowEnd,\n    paddingBlockStart\n  };\n}\nfunction getCellStyle(column, colSpan = 1) {\n  const index = column.idx + 1;\n  return {\n    gridColumnStart: index,\n    gridColumnEnd: index + colSpan,\n    insetInlineStart: column.frozen ? `var(--rdg-frozen-left-${column.idx})` : undefined\n  };\n}\nfunction getCellClassname(column, ...extraClasses) {\n  return clsx(cellClassname, ...extraClasses, column.frozen && cellFrozenClassname);\n}\n\nconst {\n  min,\n  max,\n  floor,\n  sign,\n  abs\n} = Math;\nfunction assertIsValidKeyGetter(keyGetter) {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\nfunction clampColumnWidth(width, {\n  minWidth,\n  maxWidth\n}) {\n  width = max(width, minWidth);\n  if (typeof maxWidth === 'number' && maxWidth >= minWidth) {\n    return min(width, maxWidth);\n  }\n  return width;\n}\nfunction getHeaderCellRowSpan(column, rowIdx) {\n  return column.parent === undefined ? rowIdx : column.level - column.parent.level;\n}\n\nconst checkboxContainer = \"c1bn88vv7-0-0-beta-46\";\nconst checkbox = \"c1qt073l7-0-0-beta-46\";\nconst checkboxClassname = `rdg-checkbox-input ${checkbox}`;\nfunction renderCheckbox({\n  onChange,\n  ...props\n}) {\n  function handleChange(e) {\n    onChange(e.target.checked, e.nativeEvent.shiftKey);\n  }\n  return /*#__PURE__*/jsx(\"div\", {\n    className: checkboxContainer,\n    children: /*#__PURE__*/jsx(\"input\", {\n      type: \"checkbox\",\n      ...props,\n      className: checkboxClassname,\n      onChange: handleChange\n    })\n  });\n}\n\nconst groupCellContent = \"g1s9ylgp7-0-0-beta-46\";\nconst groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`;\nconst caret = \"cz54e4y7-0-0-beta-46\";\nconst caretClassname = `rdg-caret ${caret}`;\nfunction renderToggleGroup(props) {\n  return /*#__PURE__*/jsx(ToggleGroup, {\n    ...props\n  });\n}\nfunction ToggleGroup({\n  groupKey,\n  isExpanded,\n  tabIndex,\n  toggleGroup\n}) {\n  function handleKeyDown({\n    key\n  }) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n  return /*#__PURE__*/jsxs(\"span\", {\n    className: groupCellContentClassname,\n    tabIndex: tabIndex,\n    onKeyDown: handleKeyDown,\n    children: [groupKey, /*#__PURE__*/jsx(\"svg\", {\n      viewBox: \"0 0 14 8\",\n      width: \"14\",\n      height: \"8\",\n      className: caretClassname,\n      \"aria-hidden\": true,\n      children: /*#__PURE__*/jsx(\"path\", {\n        d: d\n      })\n    })]\n  });\n}\n\nfunction renderValue(props) {\n  try {\n    return props.row[props.column.key];\n  } catch {\n    return null;\n  }\n}\n\nconst DataGridDefaultRenderersContext = /*#__PURE__*/createContext(undefined);\nconst DataGridDefaultRenderersProvider = DataGridDefaultRenderersContext.Provider;\nfunction useDefaultRenderers() {\n  return useContext(DataGridDefaultRenderersContext);\n}\n\nfunction SelectCellFormatter({\n  value,\n  tabIndex,\n  disabled,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}) {\n  const renderCheckbox = useDefaultRenderers().renderCheckbox;\n  return renderCheckbox({\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    tabIndex,\n    disabled,\n    checked: value,\n    onChange\n  });\n}\n\nconst RowSelectionContext = /*#__PURE__*/createContext(undefined);\nconst RowSelectionProvider = RowSelectionContext.Provider;\nconst RowSelectionChangeContext = /*#__PURE__*/createContext(undefined);\nconst RowSelectionChangeProvider = RowSelectionChangeContext.Provider;\nfunction useRowSelection() {\n  const rowSelectionContext = useContext(RowSelectionContext);\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext);\n  if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n    throw new Error('useRowSelection must be used within DataGrid cells');\n  }\n  return [rowSelectionContext, rowSelectionChangeContext];\n}\n\nconst SELECT_COLUMN_KEY = 'select-row';\nfunction HeaderRenderer(props) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n  return /*#__PURE__*/jsx(SelectCellFormatter, {\n    \"aria-label\": \"Select All\",\n    tabIndex: props.tabIndex,\n    value: isRowSelected,\n    onChange: checked => {\n      onRowSelectionChange({\n        type: 'HEADER',\n        checked\n      });\n    }\n  });\n}\nfunction SelectFormatter(props) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n  return /*#__PURE__*/jsx(SelectCellFormatter, {\n    \"aria-label\": \"Select\",\n    tabIndex: props.tabIndex,\n    value: isRowSelected,\n    onChange: (checked, isShiftClick) => {\n      onRowSelectionChange({\n        type: 'ROW',\n        row: props.row,\n        checked,\n        isShiftClick\n      });\n    }\n  });\n}\nfunction SelectGroupFormatter(props) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n  return /*#__PURE__*/jsx(SelectCellFormatter, {\n    \"aria-label\": \"Select Group\",\n    tabIndex: props.tabIndex,\n    value: isRowSelected,\n    onChange: checked => {\n      onRowSelectionChange({\n        type: 'ROW',\n        row: props.row,\n        checked,\n        isShiftClick: false\n      });\n    }\n  });\n}\nconst SelectColumn = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  minWidth: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  renderHeaderCell(props) {\n    return /*#__PURE__*/jsx(HeaderRenderer, {\n      ...props\n    });\n  },\n  renderCell(props) {\n    return /*#__PURE__*/jsx(SelectFormatter, {\n      ...props\n    });\n  },\n  renderGroupCell(props) {\n    return /*#__PURE__*/jsx(SelectGroupFormatter, {\n      ...props\n    });\n  }\n};\n\nconst DEFAULT_COLUMN_WIDTH = 'auto';\nconst DEFAULT_COLUMN_MIN_WIDTH = 50;\nfunction useCalculatedColumns({\n  rawColumns,\n  defaultColumnOptions,\n  getColumnWidth,\n  viewportWidth,\n  scrollLeft,\n  enableVirtualization\n}) {\n  const defaultWidth = defaultColumnOptions?.width ?? DEFAULT_COLUMN_WIDTH;\n  const defaultMinWidth = defaultColumnOptions?.minWidth ?? DEFAULT_COLUMN_MIN_WIDTH;\n  const defaultMaxWidth = defaultColumnOptions?.maxWidth ?? undefined;\n  const defaultCellRenderer = defaultColumnOptions?.renderCell ?? renderValue;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n  const defaultDraggable = defaultColumnOptions?.draggable ?? false;\n  const {\n    columns,\n    colSpanColumns,\n    lastFrozenColumnIndex,\n    headerRowsCount\n  } = useMemo(() => {\n    let lastFrozenColumnIndex = -1;\n    let headerRowsCount = 1;\n    const columns = [];\n    collectColumns(rawColumns, 1);\n    function collectColumns(rawColumns, level, parent) {\n      for (const rawColumn of rawColumns) {\n        if ('children' in rawColumn) {\n          const calculatedColumnParent = {\n            name: rawColumn.name,\n            parent,\n            idx: -1,\n            colSpan: 0,\n            level: 0,\n            headerCellClass: rawColumn.headerCellClass\n          };\n          collectColumns(rawColumn.children, level + 1, calculatedColumnParent);\n          continue;\n        }\n        const frozen = rawColumn.frozen ?? false;\n        const column = {\n          ...rawColumn,\n          parent,\n          idx: 0,\n          level: 0,\n          frozen,\n          width: rawColumn.width ?? defaultWidth,\n          minWidth: rawColumn.minWidth ?? defaultMinWidth,\n          maxWidth: rawColumn.maxWidth ?? defaultMaxWidth,\n          sortable: rawColumn.sortable ?? defaultSortable,\n          resizable: rawColumn.resizable ?? defaultResizable,\n          draggable: rawColumn.draggable ?? defaultDraggable,\n          renderCell: rawColumn.renderCell ?? defaultCellRenderer\n        };\n        columns.push(column);\n        if (frozen) {\n          lastFrozenColumnIndex++;\n        }\n        if (level > headerRowsCount) {\n          headerRowsCount = level;\n        }\n      }\n    }\n    columns.sort(({\n      key: aKey,\n      frozen: frozenA\n    }, {\n      key: bKey,\n      frozen: frozenB\n    }) => {\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n      return 0;\n    });\n    const colSpanColumns = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n      updateColumnParent(column, idx, 0);\n      if (column.colSpan != null) {\n        colSpanColumns.push(column);\n      }\n    });\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex,\n      headerRowsCount\n    };\n  }, [rawColumns, defaultWidth, defaultMinWidth, defaultMaxWidth, defaultCellRenderer, defaultResizable, defaultSortable, defaultDraggable]);\n  const {\n    templateColumns,\n    layoutCssVars,\n    totalFrozenColumnWidth,\n    columnMetrics\n  } = useMemo(() => {\n    const columnMetrics = new Map();\n    let left = 0;\n    let totalFrozenColumnWidth = 0;\n    const templateColumns = [];\n    for (const column of columns) {\n      let width = getColumnWidth(column);\n      if (typeof width === 'number') {\n        width = clampColumnWidth(width, column);\n      } else {\n        width = column.minWidth;\n      }\n      templateColumns.push(`${width}px`);\n      columnMetrics.set(column, {\n        width,\n        left\n      });\n      left += width;\n    }\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex]);\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n    const layoutCssVars = {};\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--rdg-frozen-left-${column.idx}`] = `${columnMetrics.get(column).left}px`;\n    }\n    return {\n      templateColumns,\n      layoutCssVars,\n      totalFrozenColumnWidth,\n      columnMetrics\n    };\n  }, [getColumnWidth, columns, lastFrozenColumnIndex]);\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo(() => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const {\n        left,\n        width\n      } = columnMetrics.get(columns[colVisibleStartIdx]);\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const {\n        left,\n        width\n      } = columnMetrics.get(columns[colVisibleEndIdx]);\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n    const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [columnMetrics, columns, lastFrozenColumnIndex, scrollLeft, totalFrozenColumnWidth, viewportWidth, enableVirtualization]);\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    headerRowsCount,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth\n  };\n}\nfunction updateColumnParent(column, index, level) {\n  if (level < column.level) {\n    column.level = level;\n  }\n  if (column.parent !== undefined) {\n    const {\n      parent\n    } = column;\n    if (parent.idx === -1) {\n      parent.idx = index;\n    }\n    parent.colSpan += 1;\n    updateColumnParent(parent, index, level - 1);\n  }\n}\n\nconst useLayoutEffect = typeof window === 'undefined' ? useEffect : useLayoutEffect$1;\n\nfunction useColumnWidths(columns, viewportColumns, templateColumns, gridRef, gridWidth, resizedColumnWidths, measuredColumnWidths, setResizedColumnWidths, setMeasuredColumnWidths, onColumnResize) {\n  const prevGridWidthRef = useRef(gridWidth);\n  const columnsCanFlex = columns.length === viewportColumns.length;\n  const ignorePreviouslyMeasuredColumns = columnsCanFlex && gridWidth !== prevGridWidthRef.current;\n  const newTemplateColumns = [...templateColumns];\n  const columnsToMeasure = [];\n  for (const {\n    key,\n    idx,\n    width\n  } of viewportColumns) {\n    if (typeof width === 'string' && (ignorePreviouslyMeasuredColumns || !measuredColumnWidths.has(key)) && !resizedColumnWidths.has(key)) {\n      newTemplateColumns[idx] = width;\n      columnsToMeasure.push(key);\n    }\n  }\n  const gridTemplateColumns = newTemplateColumns.join(' ');\n  useLayoutEffect(() => {\n    prevGridWidthRef.current = gridWidth;\n    updateMeasuredWidths(columnsToMeasure);\n  });\n  function updateMeasuredWidths(columnsToMeasure) {\n    if (columnsToMeasure.length === 0) return;\n    setMeasuredColumnWidths(measuredColumnWidths => {\n      const newMeasuredColumnWidths = new Map(measuredColumnWidths);\n      let hasChanges = false;\n      for (const key of columnsToMeasure) {\n        const measuredWidth = measureColumnWidth(gridRef, key);\n        hasChanges ||= measuredWidth !== measuredColumnWidths.get(key);\n        if (measuredWidth === undefined) {\n          newMeasuredColumnWidths.delete(key);\n        } else {\n          newMeasuredColumnWidths.set(key, measuredWidth);\n        }\n      }\n      return hasChanges ? newMeasuredColumnWidths : measuredColumnWidths;\n    });\n  }\n  function handleColumnResize(column, nextWidth) {\n    const {\n      key: resizingKey\n    } = column;\n    const newTemplateColumns = [...templateColumns];\n    const columnsToMeasure = [];\n    for (const {\n      key,\n      idx,\n      width\n    } of viewportColumns) {\n      if (resizingKey === key) {\n        const width = typeof nextWidth === 'number' ? `${nextWidth}px` : nextWidth;\n        newTemplateColumns[idx] = width;\n      } else if (columnsCanFlex && typeof width === 'string' && !resizedColumnWidths.has(key)) {\n        newTemplateColumns[idx] = width;\n        columnsToMeasure.push(key);\n      }\n    }\n    gridRef.current.style.gridTemplateColumns = newTemplateColumns.join(' ');\n    const measuredWidth = typeof nextWidth === 'number' ? nextWidth : measureColumnWidth(gridRef, resizingKey);\n    flushSync(() => {\n      setResizedColumnWidths(resizedColumnWidths => {\n        const newResizedColumnWidths = new Map(resizedColumnWidths);\n        newResizedColumnWidths.set(resizingKey, measuredWidth);\n        return newResizedColumnWidths;\n      });\n      updateMeasuredWidths(columnsToMeasure);\n    });\n    onColumnResize?.(column.idx, measuredWidth);\n  }\n  return {\n    gridTemplateColumns,\n    handleColumnResize\n  };\n}\nfunction measureColumnWidth(gridRef, key) {\n  const selector = `[data-measuring-cell-key=\"${CSS.escape(key)}\"]`;\n  const measuringCell = gridRef.current?.querySelector(selector);\n  return measuringCell?.getBoundingClientRect().width;\n}\n\nfunction useGridDimensions() {\n  const gridRef = useRef(null);\n  const [inlineSize, setInlineSize] = useState(1);\n  const [blockSize, setBlockSize] = useState(1);\n  const [horizontalScrollbarHeight, setHorizontalScrollbarHeight] = useState(0);\n  useLayoutEffect(() => {\n    const {\n      ResizeObserver\n    } = window;\n    if (ResizeObserver == null) return;\n    const {\n      clientWidth,\n      clientHeight,\n      offsetWidth,\n      offsetHeight\n    } = gridRef.current;\n    const {\n      width,\n      height\n    } = gridRef.current.getBoundingClientRect();\n    const initialHorizontalScrollbarHeight = offsetHeight - clientHeight;\n    const initialWidth = width - offsetWidth + clientWidth;\n    const initialHeight = height - initialHorizontalScrollbarHeight;\n    setInlineSize(initialWidth);\n    setBlockSize(initialHeight);\n    setHorizontalScrollbarHeight(initialHorizontalScrollbarHeight);\n    const resizeObserver = new ResizeObserver(entries => {\n      const size = entries[0].contentBoxSize[0];\n      const {\n        clientHeight,\n        offsetHeight\n      } = gridRef.current;\n      flushSync(() => {\n        setInlineSize(size.inlineSize);\n        setBlockSize(size.blockSize);\n        setHorizontalScrollbarHeight(offsetHeight - clientHeight);\n      });\n    });\n    resizeObserver.observe(gridRef.current);\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n  return [gridRef, inlineSize, blockSize, horizontalScrollbarHeight];\n}\n\nfunction useLatestFunc(fn) {\n  const ref = useRef(fn);\n  useEffect(() => {\n    ref.current = fn;\n  });\n  const callbackFn = useCallback((...args) => {\n    ref.current(...args);\n  }, []);\n  return fn ? callbackFn : fn;\n}\n\nfunction useRovingTabIndex(isSelected) {\n  const [isChildFocused, setIsChildFocused] = useState(false);\n  if (isChildFocused && !isSelected) {\n    setIsChildFocused(false);\n  }\n  function onFocus(event) {\n    if (event.target !== event.currentTarget) {\n      setIsChildFocused(true);\n    }\n  }\n  const isFocusable = isSelected && !isChildFocused;\n  return {\n    tabIndex: isFocusable ? 0 : -1,\n    childTabIndex: isSelected ? 0 : -1,\n    onFocus: isSelected ? onFocus : undefined\n  };\n}\n\nfunction useViewportColumns({\n  columns,\n  colSpanColumns,\n  rows,\n  topSummaryRows,\n  bottomSummaryRows,\n  colOverscanStartIdx,\n  colOverscanEndIdx,\n  lastFrozenColumnIndex,\n  rowOverscanStartIdx,\n  rowOverscanEndIdx\n}) {\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n    let startIdx = colOverscanStartIdx;\n    const updateStartIdx = (colIdx, colSpan) => {\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n        startIdx = colIdx;\n        return true;\n      }\n      return false;\n    };\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, {\n        type: 'HEADER'\n      }))) {\n        break;\n      }\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, {\n          type: 'ROW',\n          row\n        }))) {\n          break;\n        }\n      }\n      if (topSummaryRows != null) {\n        for (const row of topSummaryRows) {\n          if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, {\n            type: 'SUMMARY',\n            row\n          }))) {\n            break;\n          }\n        }\n      }\n      if (bottomSummaryRows != null) {\n        for (const row of bottomSummaryRows) {\n          if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, {\n            type: 'SUMMARY',\n            row\n          }))) {\n            break;\n          }\n        }\n      }\n    }\n    return startIdx;\n  }, [rowOverscanStartIdx, rowOverscanEndIdx, rows, topSummaryRows, bottomSummaryRows, colOverscanStartIdx, lastFrozenColumnIndex, colSpanColumns]);\n  return useMemo(() => {\n    const viewportColumns = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n    }\n    return viewportColumns;\n  }, [startIdx, colOverscanEndIdx, columns]);\n}\n\nfunction useViewportRows({\n  rows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  enableVirtualization\n}) {\n  const {\n    totalRowHeight,\n    gridTemplateRows,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useMemo(() => {\n    if (typeof rowHeight === 'number') {\n      return {\n        totalRowHeight: rowHeight * rows.length,\n        gridTemplateRows: ` repeat(${rows.length}, ${rowHeight}px)`,\n        getRowTop: rowIdx => rowIdx * rowHeight,\n        getRowHeight: () => rowHeight,\n        findRowIdx: offset => floor(offset / rowHeight)\n      };\n    }\n    let totalRowHeight = 0;\n    let gridTemplateRows = ' ';\n    const rowPositions = rows.map(row => {\n      const currentRowHeight = rowHeight(row);\n      const position = {\n        top: totalRowHeight,\n        height: currentRowHeight\n      };\n      gridTemplateRows += `${currentRowHeight}px `;\n      totalRowHeight += currentRowHeight;\n      return position;\n    });\n    const validateRowIdx = rowIdx => {\n      return max(0, min(rows.length - 1, rowIdx));\n    };\n    return {\n      totalRowHeight,\n      gridTemplateRows,\n      getRowTop: rowIdx => rowPositions[validateRowIdx(rowIdx)].top,\n      getRowHeight: rowIdx => rowPositions[validateRowIdx(rowIdx)].height,\n      findRowIdx(offset) {\n        let start = 0;\n        let end = rowPositions.length - 1;\n        while (start <= end) {\n          const middle = start + floor((end - start) / 2);\n          const currentOffset = rowPositions[middle].top;\n          if (currentOffset === offset) return middle;\n          if (currentOffset < offset) {\n            start = middle + 1;\n          } else if (currentOffset > offset) {\n            end = middle - 1;\n          }\n          if (start > end) return end;\n        }\n        return 0;\n      }\n    };\n  }, [rowHeight, rows]);\n  let rowOverscanStartIdx = 0;\n  let rowOverscanEndIdx = rows.length - 1;\n  if (enableVirtualization) {\n    const overscanThreshold = 4;\n    const rowVisibleStartIdx = findRowIdx(scrollTop);\n    const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n    rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n    rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n  }\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    totalRowHeight,\n    gridTemplateRows,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  };\n}\n\nconst cellDragHandle = \"c1w9bbhr7-0-0-beta-46\";\nconst cellDragHandleFrozenClassname = \"c1creorc7-0-0-beta-46\";\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\nfunction DragHandle({\n  gridRowStart,\n  rows,\n  column,\n  columnWidth,\n  maxColIdx,\n  isLastRow,\n  selectedPosition,\n  latestDraggedOverRowIdx,\n  isCellEditable,\n  onRowsChange,\n  onFill,\n  onClick,\n  setDragging,\n  setDraggedOverRowIdx\n}) {\n  const {\n    idx,\n    rowIdx\n  } = selectedPosition;\n  function handleMouseDown(event) {\n    event.preventDefault();\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n    function onMouseOver(event) {\n      if (event.buttons !== 1) onMouseUp();\n    }\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined) return;\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    updateRows(startRowIndex, endRowIndex);\n    setDraggedOverRowIdx(undefined);\n  }\n  function handleDoubleClick(event) {\n    event.stopPropagation();\n    updateRows(rowIdx + 1, rows.length);\n  }\n  function updateRows(startRowIdx, endRowIdx) {\n    const sourceRow = rows[rowIdx];\n    const updatedRows = [...rows];\n    const indexes = [];\n    for (let i = startRowIdx; i < endRowIdx; i++) {\n      if (isCellEditable({\n        rowIdx: i,\n        idx\n      })) {\n        const updatedRow = onFill({\n          columnKey: column.key,\n          sourceRow,\n          targetRow: rows[i]\n        });\n        if (updatedRow !== rows[i]) {\n          updatedRows[i] = updatedRow;\n          indexes.push(i);\n        }\n      }\n    }\n    if (indexes.length > 0) {\n      onRowsChange?.(updatedRows, {\n        indexes,\n        column\n      });\n    }\n  }\n  function getStyle() {\n    const colSpan = column.colSpan?.({\n      type: 'ROW',\n      row: rows[rowIdx]\n    }) ?? 1;\n    const {\n      insetInlineStart,\n      ...style\n    } = getCellStyle(column, colSpan);\n    const marginEnd = 'calc(var(--rdg-drag-handle-size) * -0.5 + 1px)';\n    const isLastColumn = column.idx + colSpan - 1 === maxColIdx;\n    return {\n      ...style,\n      gridRowStart,\n      marginInlineEnd: isLastColumn ? undefined : marginEnd,\n      marginBlockEnd: isLastRow ? undefined : marginEnd,\n      insetInlineStart: insetInlineStart ? `calc(${insetInlineStart} + ${columnWidth}px + var(--rdg-drag-handle-size) * -0.5 - 1px)` : undefined\n    };\n  }\n  return /*#__PURE__*/jsx(\"div\", {\n    style: getStyle(),\n    className: clsx(cellDragHandleClassname, column.frozen && cellDragHandleFrozenClassname),\n    onClick: onClick,\n    onMouseDown: handleMouseDown,\n    onDoubleClick: handleDoubleClick\n  });\n}\n\nconst cellEditing = \"cis5rrm7-0-0-beta-46\";\nfunction EditCell({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  onRowChange,\n  closeEditor,\n  onKeyDown,\n  navigate\n}) {\n  const frameRequestRef = useRef(undefined);\n  const commitOnOutsideClick = column.editorOptions?.commitOnOutsideClick !== false;\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\n    onClose(true, false);\n  });\n  useEffect(() => {\n    if (!commitOnOutsideClick) return;\n    function onWindowCaptureMouseDown() {\n      frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n    }\n    addEventListener('mousedown', onWindowCaptureMouseDown, {\n      capture: true\n    });\n    return () => {\n      removeEventListener('mousedown', onWindowCaptureMouseDown, {\n        capture: true\n      });\n      cancelFrameRequest();\n    };\n  }, [commitOnOutsideClick, commitOnOutsideMouseDown]);\n  function cancelFrameRequest() {\n    cancelAnimationFrame(frameRequestRef.current);\n  }\n  function handleKeyDown(event) {\n    if (onKeyDown) {\n      const cellEvent = createCellEvent(event);\n      onKeyDown({\n        mode: 'EDIT',\n        row,\n        column,\n        rowIdx,\n        navigate() {\n          navigate(event);\n        },\n        onClose\n      }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    if (event.key === 'Escape') {\n      onClose();\n    } else if (event.key === 'Enter') {\n      onClose(true);\n    } else if (onEditorNavigation(event)) {\n      navigate(event);\n    }\n  }\n  function onClose(commitChanges = false, shouldFocusCell = true) {\n    if (commitChanges) {\n      onRowChange(row, true, shouldFocusCell);\n    } else {\n      closeEditor(shouldFocusCell);\n    }\n  }\n  function onEditorRowChange(row, commitChangesAndFocus = false) {\n    onRowChange(row, commitChangesAndFocus, commitChangesAndFocus);\n  }\n  const {\n    cellClass\n  } = column;\n  const className = getCellClassname(column, 'rdg-editor-container', typeof cellClass === 'function' ? cellClass(row) : cellClass, !column.editorOptions?.displayCellContent && cellEditing);\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"gridcell\",\n    \"aria-colindex\": column.idx + 1,\n    \"aria-colspan\": colSpan,\n    \"aria-selected\": true,\n    className: className,\n    style: getCellStyle(column, colSpan),\n    onKeyDown: handleKeyDown,\n    onMouseDownCapture: cancelFrameRequest,\n    children: column.renderEditCell != null && /*#__PURE__*/jsxs(Fragment, {\n      children: [column.renderEditCell({\n        column,\n        row,\n        rowIdx,\n        onRowChange: onEditorRowChange,\n        onClose\n      }), column.editorOptions?.displayCellContent && column.renderCell({\n        column,\n        row,\n        rowIdx,\n        isCellEditable: true,\n        tabIndex: -1,\n        onRowChange: onEditorRowChange\n      })]\n    })\n  });\n}\n\nfunction GroupedColumnHeaderCell({\n  column,\n  rowIdx,\n  isCellSelected,\n  selectCell\n}) {\n  const {\n    tabIndex,\n    onFocus\n  } = useRovingTabIndex(isCellSelected);\n  const {\n    colSpan\n  } = column;\n  const rowSpan = getHeaderCellRowSpan(column, rowIdx);\n  const index = column.idx + 1;\n  function onClick() {\n    selectCell({\n      idx: column.idx,\n      rowIdx\n    });\n  }\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"columnheader\",\n    \"aria-colindex\": index,\n    \"aria-colspan\": colSpan,\n    \"aria-rowspan\": rowSpan,\n    \"aria-selected\": isCellSelected,\n    tabIndex: tabIndex,\n    className: clsx(cellClassname, column.headerCellClass),\n    style: {\n      ...getHeaderCellStyle(column, rowIdx, rowSpan),\n      gridColumnStart: index,\n      gridColumnEnd: index + colSpan\n    },\n    onFocus: onFocus,\n    onClick: onClick,\n    children: column.name\n  });\n}\n\nconst headerSortCellClassname = \"h44jtk67-0-0-beta-46\";\nconst headerSortName = \"hcgkhxz7-0-0-beta-46\";\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\nfunction renderHeaderCell({\n  column,\n  sortDirection,\n  priority\n}) {\n  if (!column.sortable) return column.name;\n  return /*#__PURE__*/jsx(SortableHeaderCell, {\n    sortDirection: sortDirection,\n    priority: priority,\n    children: column.name\n  });\n}\nfunction SortableHeaderCell({\n  sortDirection,\n  priority,\n  children\n}) {\n  const renderSortStatus = useDefaultRenderers().renderSortStatus;\n  return /*#__PURE__*/jsxs(\"span\", {\n    className: headerSortCellClassname,\n    children: [/*#__PURE__*/jsx(\"span\", {\n      className: headerSortNameClassname,\n      children: children\n    }), /*#__PURE__*/jsx(\"span\", {\n      children: renderSortStatus({\n        sortDirection,\n        priority\n      })\n    })]\n  });\n}\n\nconst cellSortableClassname = \"c6l2wv17-0-0-beta-46\";\nconst cellResizable = \"c1kqdw7y7-0-0-beta-46\";\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\nconst resizeHandleClassname = \"r1y6ywlx7-0-0-beta-46\";\nconst cellDraggableClassname = 'rdg-cell-draggable';\nconst cellDragging = \"c1bezg5o7-0-0-beta-46\";\nconst cellDraggingClassname = `rdg-cell-dragging ${cellDragging}`;\nconst cellOver = \"c1vc96037-0-0-beta-46\";\nconst cellOverClassname = `rdg-cell-drag-over ${cellOver}`;\nfunction HeaderCell({\n  column,\n  colSpan,\n  rowIdx,\n  isCellSelected,\n  onColumnResize,\n  onColumnsReorder,\n  sortColumns,\n  onSortColumnsChange,\n  selectCell,\n  shouldFocusGrid,\n  direction,\n  dragDropKey\n}) {\n  const [isDragging, setIsDragging] = useState(false);\n  const [isOver, setIsOver] = useState(false);\n  const isRtl = direction === 'rtl';\n  const rowSpan = getHeaderCellRowSpan(column, rowIdx);\n  const {\n    tabIndex,\n    childTabIndex,\n    onFocus\n  } = useRovingTabIndex(isCellSelected);\n  const sortIndex = sortColumns?.findIndex(sort => sort.columnKey === column.key);\n  const sortColumn = sortIndex !== undefined && sortIndex > -1 ? sortColumns[sortIndex] : undefined;\n  const sortDirection = sortColumn?.direction;\n  const priority = sortColumn !== undefined && sortColumns.length > 1 ? sortIndex + 1 : undefined;\n  const ariaSort = sortDirection && !priority ? sortDirection === 'ASC' ? 'ascending' : 'descending' : undefined;\n  const {\n    sortable,\n    resizable,\n    draggable\n  } = column;\n  const className = getCellClassname(column, column.headerCellClass, sortable && cellSortableClassname, resizable && cellResizableClassname, draggable && cellDraggableClassname, isDragging && cellDraggingClassname, isOver && cellOverClassname);\n  const renderHeaderCell$1 = column.renderHeaderCell ?? renderHeaderCell;\n  function onPointerDown(event) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n    event.preventDefault();\n    const {\n      currentTarget,\n      pointerId\n    } = event;\n    const headerCell = currentTarget.parentElement;\n    const {\n      right,\n      left\n    } = headerCell.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n    function onPointerMove(event) {\n      const {\n        right,\n        left\n      } = headerCell.getBoundingClientRect();\n      const width = isRtl ? right + offset - event.clientX : event.clientX + offset - left;\n      if (width > 0) {\n        onColumnResize(column, clampColumnWidth(width, column));\n      }\n    }\n    function onLostPointerCapture() {\n      currentTarget.removeEventListener('pointermove', onPointerMove);\n      currentTarget.removeEventListener('lostpointercapture', onLostPointerCapture);\n    }\n    currentTarget.setPointerCapture(pointerId);\n    currentTarget.addEventListener('pointermove', onPointerMove);\n    currentTarget.addEventListener('lostpointercapture', onLostPointerCapture);\n  }\n  function onSort(ctrlClick) {\n    if (onSortColumnsChange == null) return;\n    const {\n      sortDescendingFirst\n    } = column;\n    if (sortColumn === undefined) {\n      const nextSort = {\n        columnKey: column.key,\n        direction: sortDescendingFirst ? 'DESC' : 'ASC'\n      };\n      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);\n    } else {\n      let nextSortColumn;\n      if (sortDescendingFirst === true && sortDirection === 'DESC' || sortDescendingFirst !== true && sortDirection === 'ASC') {\n        nextSortColumn = {\n          columnKey: column.key,\n          direction: sortDirection === 'ASC' ? 'DESC' : 'ASC'\n        };\n      }\n      if (ctrlClick) {\n        const nextSortColumns = [...sortColumns];\n        if (nextSortColumn) {\n          nextSortColumns[sortIndex] = nextSortColumn;\n        } else {\n          nextSortColumns.splice(sortIndex, 1);\n        }\n        onSortColumnsChange(nextSortColumns);\n      } else {\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\n      }\n    }\n  }\n  function onClick(event) {\n    selectCell({\n      idx: column.idx,\n      rowIdx\n    });\n    if (sortable) {\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n  function onDoubleClick() {\n    onColumnResize(column, 'max-content');\n  }\n  function handleFocus(event) {\n    onFocus?.(event);\n    if (shouldFocusGrid) {\n      selectCell({\n        idx: 0,\n        rowIdx\n      });\n    }\n  }\n  function onKeyDown(event) {\n    if (event.key === ' ' || event.key === 'Enter') {\n      event.preventDefault();\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n  function onDragStart(event) {\n    event.dataTransfer.setData(dragDropKey, column.key);\n    event.dataTransfer.dropEffect = 'move';\n    setIsDragging(true);\n  }\n  function onDragEnd() {\n    setIsDragging(false);\n  }\n  function onDragOver(event) {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'move';\n  }\n  function onDrop(event) {\n    setIsOver(false);\n    if (event.dataTransfer.types.includes(dragDropKey)) {\n      const sourceKey = event.dataTransfer.getData(dragDropKey);\n      if (sourceKey !== column.key) {\n        event.preventDefault();\n        onColumnsReorder?.(sourceKey, column.key);\n      }\n    }\n  }\n  function onDragEnter(event) {\n    if (isEventPertinent(event)) {\n      setIsOver(true);\n    }\n  }\n  function onDragLeave(event) {\n    if (isEventPertinent(event)) {\n      setIsOver(false);\n    }\n  }\n  let draggableProps;\n  if (draggable) {\n    draggableProps = {\n      draggable: true,\n      onDragStart,\n      onDragEnd,\n      onDragOver,\n      onDragEnter,\n      onDragLeave,\n      onDrop\n    };\n  }\n  return /*#__PURE__*/jsxs(\"div\", {\n    role: \"columnheader\",\n    \"aria-colindex\": column.idx + 1,\n    \"aria-colspan\": colSpan,\n    \"aria-rowspan\": rowSpan,\n    \"aria-selected\": isCellSelected,\n    \"aria-sort\": ariaSort,\n    tabIndex: shouldFocusGrid ? 0 : tabIndex,\n    className: className,\n    style: {\n      ...getHeaderCellStyle(column, rowIdx, rowSpan),\n      ...getCellStyle(column, colSpan)\n    },\n    onFocus: handleFocus,\n    onClick: onClick,\n    onKeyDown: sortable ? onKeyDown : undefined,\n    ...draggableProps,\n    children: [renderHeaderCell$1({\n      column,\n      sortDirection,\n      priority,\n      tabIndex: childTabIndex\n    }), resizable && /*#__PURE__*/jsx(\"div\", {\n      className: resizeHandleClassname,\n      onClick: stopPropagation,\n      onDoubleClick: onDoubleClick,\n      onPointerDown: onPointerDown\n    })]\n  });\n}\nfunction isEventPertinent(event) {\n  const relatedTarget = event.relatedTarget;\n  return !event.currentTarget.contains(relatedTarget);\n}\n\nconst row = \"r1upfr807-0-0-beta-46\";\nconst rowClassname = `rdg-row ${row}`;\nconst rowSelected = \"r190mhd37-0-0-beta-46\";\nconst rowSelectedClassname = 'rdg-row-selected';\nconst rowSelectedWithFrozenCell = \"r139qu9m7-0-0-beta-46\";\nconst topSummaryRowClassname = 'rdg-top-summary-row';\nconst bottomSummaryRowClassname = 'rdg-bottom-summary-row';\n\nconst headerRow = \"h10tskcx7-0-0-beta-46\";\nconst headerRowClassname = `rdg-header-row ${headerRow}`;\nfunction HeaderRow({\n  rowIdx,\n  columns,\n  onColumnResize,\n  onColumnsReorder,\n  sortColumns,\n  onSortColumnsChange,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}) {\n  const dragDropKey = useId();\n  const cells = [];\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, {\n      type: 'HEADER'\n    });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n    cells.push( /*#__PURE__*/jsx(HeaderCell, {\n      column: column,\n      colSpan: colSpan,\n      rowIdx: rowIdx,\n      isCellSelected: selectedCellIdx === column.idx,\n      onColumnResize: onColumnResize,\n      onColumnsReorder: onColumnsReorder,\n      onSortColumnsChange: onSortColumnsChange,\n      sortColumns: sortColumns,\n      selectCell: selectCell,\n      shouldFocusGrid: shouldFocusGrid && index === 0,\n      direction: direction,\n      dragDropKey: dragDropKey\n    }, column.key));\n  }\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"row\",\n    \"aria-rowindex\": rowIdx,\n    className: clsx(headerRowClassname, selectedCellIdx === -1 && rowSelectedClassname),\n    children: cells\n  });\n}\nconst HeaderRow$1 = /*#__PURE__*/memo(HeaderRow);\n\nfunction GroupedColumnHeaderRow({\n  rowIdx,\n  level,\n  columns,\n  selectedCellIdx,\n  selectCell\n}) {\n  const cells = [];\n  const renderedParents = new Set();\n  for (const column of columns) {\n    let {\n      parent\n    } = column;\n    if (parent === undefined) continue;\n    while (parent.level > level) {\n      if (parent.parent === undefined) break;\n      parent = parent.parent;\n    }\n    if (parent.level === level && !renderedParents.has(parent)) {\n      renderedParents.add(parent);\n      const {\n        idx\n      } = parent;\n      cells.push( /*#__PURE__*/jsx(GroupedColumnHeaderCell, {\n        column: parent,\n        rowIdx: rowIdx,\n        isCellSelected: selectedCellIdx === idx,\n        selectCell: selectCell\n      }, idx));\n    }\n  }\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"row\",\n    \"aria-rowindex\": rowIdx,\n    className: headerRowClassname,\n    children: cells\n  });\n}\nconst GroupedColumnHeaderRow$1 = /*#__PURE__*/memo(GroupedColumnHeaderRow);\n\nconst cellCopied = \"c6ra8a37-0-0-beta-46\";\nconst cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;\nconst cellDraggedOver = \"cq910m07-0-0-beta-46\";\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\nfunction Cell({\n  column,\n  colSpan,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  row,\n  rowIdx,\n  onClick,\n  onDoubleClick,\n  onContextMenu,\n  onRowChange,\n  selectCell,\n  ...props\n}) {\n  const {\n    tabIndex,\n    childTabIndex,\n    onFocus\n  } = useRovingTabIndex(isCellSelected);\n  const {\n    cellClass\n  } = column;\n  const className = getCellClassname(column, typeof cellClass === 'function' ? cellClass(row) : cellClass, isCopied && cellCopiedClassname, isDraggedOver && cellDraggedOverClassname);\n  const isEditable = isCellEditableUtil(column, row);\n  function selectCellWrapper(openEditor) {\n    selectCell({\n      rowIdx,\n      idx: column.idx\n    }, openEditor);\n  }\n  function handleClick(event) {\n    if (onClick) {\n      const cellEvent = createCellEvent(event);\n      onClick({\n        row,\n        column,\n        selectCell: selectCellWrapper\n      }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper();\n  }\n  function handleContextMenu(event) {\n    if (onContextMenu) {\n      const cellEvent = createCellEvent(event);\n      onContextMenu({\n        row,\n        column,\n        selectCell: selectCellWrapper\n      }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper();\n  }\n  function handleDoubleClick(event) {\n    if (onDoubleClick) {\n      const cellEvent = createCellEvent(event);\n      onDoubleClick({\n        row,\n        column,\n        selectCell: selectCellWrapper\n      }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    selectCellWrapper(true);\n  }\n  function handleRowChange(newRow) {\n    onRowChange(column, newRow);\n  }\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"gridcell\",\n    \"aria-colindex\": column.idx + 1,\n    \"aria-colspan\": colSpan,\n    \"aria-selected\": isCellSelected,\n    \"aria-readonly\": !isEditable || undefined,\n    tabIndex: tabIndex,\n    className: className,\n    style: getCellStyle(column, colSpan),\n    onClick: handleClick,\n    onDoubleClick: handleDoubleClick,\n    onContextMenu: handleContextMenu,\n    onFocus: onFocus,\n    ...props,\n    children: column.renderCell({\n      column,\n      row,\n      rowIdx,\n      isCellEditable: isEditable,\n      tabIndex: childTabIndex,\n      onRowChange: handleRowChange\n    })\n  });\n}\nconst Cell$1 = /*#__PURE__*/memo(Cell);\n\nfunction Row({\n  className,\n  rowIdx,\n  gridRowStart,\n  selectedCellIdx,\n  isRowSelected,\n  copiedCellIdx,\n  draggedOverCellIdx,\n  lastFrozenColumnIndex,\n  row,\n  viewportColumns,\n  selectedCellEditor,\n  onCellClick,\n  onCellDoubleClick,\n  onCellContextMenu,\n  rowClass,\n  setDraggedOverRowIdx,\n  onMouseEnter,\n  onRowChange,\n  selectCell,\n  ...props\n}, ref) {\n  const handleRowChange = useLatestFunc((column, newRow) => {\n    onRowChange(column, rowIdx, newRow);\n  });\n  function handleDragEnter(event) {\n    setDraggedOverRowIdx?.(rowIdx);\n    onMouseEnter?.(event);\n  }\n  className = clsx(rowClassname, `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`, rowClass?.(row, rowIdx), className, selectedCellIdx === -1 && rowSelectedClassname);\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const {\n      idx\n    } = column;\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, {\n      type: 'ROW',\n      row\n    });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n    const isCellSelected = selectedCellIdx === idx;\n    if (isCellSelected && selectedCellEditor) {\n      cells.push(selectedCellEditor);\n    } else {\n      cells.push( /*#__PURE__*/jsx(Cell$1, {\n        column: column,\n        colSpan: colSpan,\n        row: row,\n        rowIdx: rowIdx,\n        isCopied: copiedCellIdx === idx,\n        isDraggedOver: draggedOverCellIdx === idx,\n        isCellSelected: isCellSelected,\n        onClick: onCellClick,\n        onDoubleClick: onCellDoubleClick,\n        onContextMenu: onCellContextMenu,\n        onRowChange: handleRowChange,\n        selectCell: selectCell\n      }, column.key));\n    }\n  }\n  return /*#__PURE__*/jsx(RowSelectionProvider, {\n    value: isRowSelected,\n    children: /*#__PURE__*/jsx(\"div\", {\n      role: \"row\",\n      ref: ref,\n      className: className,\n      onMouseEnter: handleDragEnter,\n      style: getRowStyle(gridRowStart),\n      ...props,\n      children: cells\n    })\n  });\n}\nconst RowComponent = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Row));\nconst RowComponent$1 = RowComponent;\nfunction defaultRenderRow(key, props) {\n  return /*#__PURE__*/jsx(RowComponent, {\n    ...props\n  }, key);\n}\n\nfunction ScrollToCell({\n  scrollToPosition: {\n    idx,\n    rowIdx\n  },\n  gridElement,\n  setScrollToCellPosition\n}) {\n  const ref = useRef(null);\n  useLayoutEffect(() => {\n    scrollIntoView(ref.current);\n  });\n  useLayoutEffect(() => {\n    function removeScrollToCell() {\n      setScrollToCellPosition(null);\n    }\n    const observer = new IntersectionObserver(removeScrollToCell, {\n      root: gridElement,\n      threshold: 1.0\n    });\n    observer.observe(ref.current);\n    return () => {\n      observer.disconnect();\n    };\n  }, [gridElement, setScrollToCellPosition]);\n  return /*#__PURE__*/jsx(\"div\", {\n    ref: ref,\n    style: {\n      gridColumn: idx === undefined ? '1/-1' : idx + 1,\n      gridRow: rowIdx === undefined ? '1/-1' : rowIdx + 2\n    }\n  });\n}\n\nconst arrow = \"a3ejtar7-0-0-beta-46\";\nconst arrowClassname = `rdg-sort-arrow ${arrow}`;\nfunction renderSortStatus({\n  sortDirection,\n  priority\n}) {\n  return /*#__PURE__*/jsxs(Fragment, {\n    children: [renderSortIcon({\n      sortDirection\n    }), renderSortPriority({\n      priority\n    })]\n  });\n}\nfunction renderSortIcon({\n  sortDirection\n}) {\n  if (sortDirection === undefined) return null;\n  return /*#__PURE__*/jsx(\"svg\", {\n    viewBox: \"0 0 12 8\",\n    width: \"12\",\n    height: \"8\",\n    className: arrowClassname,\n    \"aria-hidden\": true,\n    children: /*#__PURE__*/jsx(\"path\", {\n      d: sortDirection === 'ASC' ? 'M0 8 6 0 12 8' : 'M0 0 6 8 12 0'\n    })\n  });\n}\nfunction renderSortPriority({\n  priority\n}) {\n  return priority;\n}\n\nconst root = \"rnvodz57-0-0-beta-46\";\nconst rootClassname = `rdg ${root}`;\nconst viewportDragging = \"vlqv91k7-0-0-beta-46\";\nconst viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\nconst focusSinkClassname = \"f1lsfrzw7-0-0-beta-46\";\nconst focusSinkHeaderAndSummaryClassname = \"f1cte0lg7-0-0-beta-46\";\n\nconst summaryCellClassname = \"s8wc6fl7-0-0-beta-46\";\nfunction SummaryCell({\n  column,\n  colSpan,\n  row,\n  rowIdx,\n  isCellSelected,\n  selectCell\n}) {\n  const {\n    tabIndex,\n    childTabIndex,\n    onFocus\n  } = useRovingTabIndex(isCellSelected);\n  const {\n    summaryCellClass\n  } = column;\n  const className = getCellClassname(column, summaryCellClassname, typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass);\n  function onClick() {\n    selectCell({\n      rowIdx,\n      idx: column.idx\n    });\n  }\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"gridcell\",\n    \"aria-colindex\": column.idx + 1,\n    \"aria-colspan\": colSpan,\n    \"aria-selected\": isCellSelected,\n    tabIndex: tabIndex,\n    className: className,\n    style: getCellStyle(column, colSpan),\n    onClick: onClick,\n    onFocus: onFocus,\n    children: column.renderSummaryCell?.({\n      column,\n      row,\n      tabIndex: childTabIndex\n    })\n  });\n}\nconst SummaryCell$1 = /*#__PURE__*/memo(SummaryCell);\n\nconst summaryRow = \"skuhp557-0-0-beta-46\";\nconst topSummaryRow = \"tf8l5ub7-0-0-beta-46\";\nconst summaryRowClassname = `rdg-summary-row ${summaryRow}`;\nfunction SummaryRow({\n  rowIdx,\n  gridRowStart,\n  row,\n  viewportColumns,\n  top,\n  bottom,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  isTop,\n  selectCell,\n  'aria-rowindex': ariaRowIndex\n}) {\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row\n    });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n    const isCellSelected = selectedCellIdx === column.idx;\n    cells.push( /*#__PURE__*/jsx(SummaryCell$1, {\n      column: column,\n      colSpan: colSpan,\n      row: row,\n      rowIdx: rowIdx,\n      isCellSelected: isCellSelected,\n      selectCell: selectCell\n    }, column.key));\n  }\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"row\",\n    \"aria-rowindex\": ariaRowIndex,\n    className: clsx(rowClassname, `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`, summaryRowClassname, isTop ? `${topSummaryRowClassname} ${topSummaryRow}` : bottomSummaryRowClassname, selectedCellIdx === -1 && rowSelectedClassname),\n    style: {\n      ...getRowStyle(gridRowStart),\n      '--rdg-summary-row-top': top !== undefined ? `${top}px` : undefined,\n      '--rdg-summary-row-bottom': bottom !== undefined ? `${bottom}px` : undefined\n    },\n    children: cells\n  });\n}\nconst SummaryRow$1 = /*#__PURE__*/memo(SummaryRow);\n\nfunction DataGrid(props, ref) {\n  const {\n    columns: rawColumns,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows,\n    rowKeyGetter,\n    onRowsChange,\n    rowHeight: rawRowHeight,\n    headerRowHeight: rawHeaderRowHeight,\n    summaryRowHeight: rawSummaryRowHeight,\n    selectedRows,\n    onSelectedRowsChange,\n    sortColumns,\n    onSortColumnsChange,\n    defaultColumnOptions,\n    onCellClick,\n    onCellDoubleClick,\n    onCellContextMenu,\n    onCellKeyDown,\n    onSelectedCellChange,\n    onScroll,\n    onColumnResize,\n    onColumnsReorder,\n    onFill,\n    onCopy,\n    onPaste,\n    enableVirtualization: rawEnableVirtualization,\n    renderers,\n    className,\n    style,\n    rowClass,\n    direction: rawDirection,\n    role: rawRole,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    'aria-rowcount': rawAriaRowCount,\n    'data-testid': testId\n  } = props;\n  const defaultRenderers = useDefaultRenderers();\n  const role = rawRole ?? 'grid';\n  const rowHeight = rawRowHeight ?? 35;\n  const headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const summaryRowHeight = rawSummaryRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const renderRow = renderers?.renderRow ?? defaultRenderers?.renderRow ?? defaultRenderRow;\n  const renderSortStatus$1 = renderers?.renderSortStatus ?? defaultRenderers?.renderSortStatus ?? renderSortStatus;\n  const renderCheckbox$1 = renderers?.renderCheckbox ?? defaultRenderers?.renderCheckbox ?? renderCheckbox;\n  const noRowsFallback = renderers?.noRowsFallback ?? defaultRenderers?.noRowsFallback;\n  const enableVirtualization = rawEnableVirtualization ?? true;\n  const direction = rawDirection ?? 'ltr';\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [resizedColumnWidths, setResizedColumnWidths] = useState(() => new Map());\n  const [measuredColumnWidths, setMeasuredColumnWidths] = useState(() => new Map());\n  const [copiedCell, setCopiedCell] = useState(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState(undefined);\n  const [scrollToPosition, setScrollToPosition] = useState(null);\n  const getColumnWidth = useCallback(column => {\n    return resizedColumnWidths.get(column.key) ?? measuredColumnWidths.get(column.key) ?? column.width;\n  }, [measuredColumnWidths, resizedColumnWidths]);\n  const [gridRef, gridWidth, gridHeight, horizontalScrollbarHeight] = useGridDimensions();\n  const {\n    columns,\n    colSpanColumns,\n    lastFrozenColumnIndex,\n    headerRowsCount,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    templateColumns,\n    layoutCssVars,\n    totalFrozenColumnWidth\n  } = useCalculatedColumns({\n    rawColumns,\n    defaultColumnOptions,\n    getColumnWidth,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    enableVirtualization\n  });\n  const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n  const bottomSummaryRowsCount = bottomSummaryRows?.length ?? 0;\n  const summaryRowsCount = topSummaryRowsCount + bottomSummaryRowsCount;\n  const headerAndTopSummaryRowsCount = headerRowsCount + topSummaryRowsCount;\n  const groupedColumnHeaderRowsCount = headerRowsCount - 1;\n  const minRowIdx = -headerAndTopSummaryRowsCount;\n  const mainHeaderRowIdx = minRowIdx + groupedColumnHeaderRowsCount;\n  const maxRowIdx = rows.length + bottomSummaryRowsCount - 1;\n  const [selectedPosition, setSelectedPosition] = useState(() => ({\n    idx: -1,\n    rowIdx: minRowIdx - 1,\n    mode: 'SELECT'\n  }));\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n  const focusSinkRef = useRef(null);\n  const shouldFocusCellRef = useRef(false);\n  const isTreeGrid = role === 'treegrid';\n  const headerRowsHeight = headerRowsCount * headerRowHeight;\n  const summaryRowsHeight = summaryRowsCount * summaryRowHeight;\n  const clientHeight = gridHeight - headerRowsHeight - summaryRowsHeight;\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n  const isRtl = direction === 'rtl';\n  const leftKey = isRtl ? 'ArrowRight' : 'ArrowLeft';\n  const rightKey = isRtl ? 'ArrowLeft' : 'ArrowRight';\n  const ariaRowCount = rawAriaRowCount ?? headerRowsCount + rows.length + summaryRowsCount;\n  const defaultGridComponents = useMemo(() => ({\n    renderCheckbox: renderCheckbox$1,\n    renderSortStatus: renderSortStatus$1\n  }), [renderCheckbox$1, renderSortStatus$1]);\n  const allRowsSelected = useMemo(() => {\n    const {\n      length\n    } = rows;\n    return length !== 0 && selectedRows != null && rowKeyGetter != null && selectedRows.size >= length && rows.every(row => selectedRows.has(rowKeyGetter(row)));\n  }, [rows, selectedRows, rowKeyGetter]);\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    totalRowHeight,\n    gridTemplateRows,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useViewportRows({\n    rows,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    enableVirtualization\n  });\n  const viewportColumns = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    topSummaryRows,\n    bottomSummaryRows\n  });\n  const {\n    gridTemplateColumns,\n    handleColumnResize\n  } = useColumnWidths(columns, viewportColumns, templateColumns, gridRef, gridWidth, resizedColumnWidths, measuredColumnWidths, setResizedColumnWidths, setMeasuredColumnWidths, onColumnResize);\n  const minColIdx = isTreeGrid ? -1 : 0;\n  const maxColIdx = columns.length - 1;\n  const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);\n  const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);\n  const scrollHeight = headerRowHeight + totalRowHeight + summaryRowsHeight + horizontalScrollbarHeight;\n  const handleColumnResizeLatest = useLatestFunc(handleColumnResize);\n  const onColumnsReorderLastest = useLatestFunc(onColumnsReorder);\n  const onSortColumnsChangeLatest = useLatestFunc(onSortColumnsChange);\n  const onCellClickLatest = useLatestFunc(onCellClick);\n  const onCellDoubleClickLatest = useLatestFunc(onCellDoubleClick);\n  const onCellContextMenuLatest = useLatestFunc(onCellContextMenu);\n  const selectRowLatest = useLatestFunc(selectRow);\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n  const selectCellLatest = useLatestFunc(selectCell);\n  const selectHeaderCellLatest = useLatestFunc(({\n    idx,\n    rowIdx\n  }) => {\n    selectCell({\n      rowIdx: minRowIdx + rowIdx - 1,\n      idx\n    });\n  });\n  useLayoutEffect(() => {\n    if (!selectedCellIsWithinSelectionBounds || isSamePosition(selectedPosition, prevSelectedPosition.current)) {\n      prevSelectedPosition.current = selectedPosition;\n      return;\n    }\n    prevSelectedPosition.current = selectedPosition;\n    if (selectedPosition.idx === -1) {\n      focusSinkRef.current.focus({\n        preventScroll: true\n      });\n      scrollIntoView(focusSinkRef.current);\n    }\n  });\n  useLayoutEffect(() => {\n    if (!shouldFocusCellRef.current) return;\n    shouldFocusCellRef.current = false;\n    focusCellOrCellContent();\n  });\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToCell({\n      idx,\n      rowIdx\n    }) {\n      const scrollToIdx = idx !== undefined && idx > lastFrozenColumnIndex && idx < columns.length ? idx : undefined;\n      const scrollToRowIdx = rowIdx !== undefined && isRowIdxWithinViewportBounds(rowIdx) ? rowIdx : undefined;\n      if (scrollToIdx !== undefined || scrollToRowIdx !== undefined) {\n        setScrollToPosition({\n          idx: scrollToIdx,\n          rowIdx: scrollToRowIdx\n        });\n      }\n    },\n    selectCell\n  }));\n  const setDraggedOverRowIdx = useCallback(rowIdx => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n  function selectRow(args) {\n    if (!onSelectedRowsChange) return;\n    assertIsValidKeyGetter(rowKeyGetter);\n    if (args.type === 'HEADER') {\n      const newSelectedRows = new Set(selectedRows);\n      for (const row of rows) {\n        const rowKey = rowKeyGetter(row);\n        if (args.checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n    const {\n      row,\n      checked,\n      isShiftClick\n    } = args;\n    const newSelectedRows = new Set(selectedRows);\n    const rowKey = rowKeyGetter(row);\n    const previousRowIdx = lastSelectedRowIdx.current;\n    const rowIdx = rows.indexOf(row);\n    lastSelectedRowIdx.current = rowIdx;\n    if (checked) {\n      newSelectedRows.add(rowKey);\n    } else {\n      newSelectedRows.delete(rowKey);\n    }\n    if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx && previousRowIdx < rows.length) {\n      const step = sign(rowIdx - previousRowIdx);\n      for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n        const row = rows[i];\n        if (checked) {\n          newSelectedRows.add(rowKeyGetter(row));\n        } else {\n          newSelectedRows.delete(rowKeyGetter(row));\n        }\n      }\n    }\n    onSelectedRowsChange(newSelectedRows);\n  }\n  function handleKeyDown(event) {\n    const {\n      idx,\n      rowIdx,\n      mode\n    } = selectedPosition;\n    if (mode === 'EDIT') return;\n    if (onCellKeyDown && isRowIdxWithinViewportBounds(rowIdx)) {\n      const row = rows[rowIdx];\n      const cellEvent = createCellEvent(event);\n      onCellKeyDown({\n        mode: 'SELECT',\n        row,\n        column: columns[idx],\n        rowIdx,\n        selectCell\n      }, cellEvent);\n      if (cellEvent.isGridDefaultPrevented()) return;\n    }\n    if (!(event.target instanceof Element)) return;\n    const isCellEvent = event.target.closest('.rdg-cell') !== null;\n    const isRowEvent = isTreeGrid && event.target === focusSinkRef.current;\n    if (!isCellEvent && !isRowEvent) return;\n    const {\n      keyCode\n    } = event;\n    if (selectedCellIsWithinViewportBounds && (onPaste != null || onCopy != null) && isCtrlKeyHeldDown(event)) {\n      const cKey = 67;\n      const vKey = 86;\n      if (keyCode === cKey) {\n        if (window.getSelection()?.isCollapsed === false) return;\n        handleCopy();\n        return;\n      }\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n    switch (event.key) {\n      case 'Escape':\n        setCopiedCell(null);\n        return;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n  function handleScroll(event) {\n    const {\n      scrollTop,\n      scrollLeft\n    } = event.currentTarget;\n    flushSync(() => {\n      setScrollTop(scrollTop);\n      setScrollLeft(abs(scrollLeft));\n    });\n    onScroll?.(event);\n  }\n  function updateRow(column, rowIdx, row) {\n    if (typeof onRowsChange !== 'function') return;\n    if (row === rows[rowIdx]) return;\n    const updatedRows = [...rows];\n    updatedRows[rowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rowIdx],\n      column\n    });\n  }\n  function commitEditorChanges() {\n    if (selectedPosition.mode !== 'EDIT') return;\n    updateRow(columns[selectedPosition.idx], selectedPosition.rowIdx, selectedPosition.row);\n  }\n  function handleCopy() {\n    const {\n      idx,\n      rowIdx\n    } = selectedPosition;\n    const sourceRow = rows[rowIdx];\n    const sourceColumnKey = columns[idx].key;\n    setCopiedCell({\n      row: sourceRow,\n      columnKey: sourceColumnKey\n    });\n    onCopy?.({\n      sourceRow,\n      sourceColumnKey\n    });\n  }\n  function handlePaste() {\n    if (!onPaste || !onRowsChange || copiedCell === null || !isCellEditable(selectedPosition)) {\n      return;\n    }\n    const {\n      idx,\n      rowIdx\n    } = selectedPosition;\n    const targetColumn = columns[idx];\n    const targetRow = rows[rowIdx];\n    const updatedTargetRow = onPaste({\n      sourceRow: copiedCell.row,\n      sourceColumnKey: copiedCell.columnKey,\n      targetRow,\n      targetColumnKey: targetColumn.key\n    });\n    updateRow(targetColumn, rowIdx, updatedTargetRow);\n  }\n  function handleCellInput(event) {\n    if (!selectedCellIsWithinViewportBounds) return;\n    const row = rows[selectedPosition.rowIdx];\n    const {\n      key,\n      shiftKey\n    } = event;\n    if (isSelectable && shiftKey && key === ' ') {\n      assertIsValidKeyGetter(rowKeyGetter);\n      const rowKey = rowKeyGetter(row);\n      selectRow({\n        type: 'ROW',\n        row,\n        checked: !selectedRows.has(rowKey),\n        isShiftClick: false\n      });\n      event.preventDefault();\n      return;\n    }\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({\n        idx,\n        rowIdx\n      }) => ({\n        idx,\n        rowIdx,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n  function isColIdxWithinSelectionBounds(idx) {\n    return idx >= minColIdx && idx <= maxColIdx;\n  }\n  function isRowIdxWithinViewportBounds(rowIdx) {\n    return rowIdx >= 0 && rowIdx < rows.length;\n  }\n  function isCellWithinSelectionBounds({\n    idx,\n    rowIdx\n  }) {\n    return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);\n  }\n  function isCellWithinEditBounds({\n    idx,\n    rowIdx\n  }) {\n    return isRowIdxWithinViewportBounds(rowIdx) && idx >= 0 && idx <= maxColIdx;\n  }\n  function isCellWithinViewportBounds({\n    idx,\n    rowIdx\n  }) {\n    return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);\n  }\n  function isCellEditable(position) {\n    return isCellWithinEditBounds(position) && isSelectedCellEditable({\n      columns,\n      rows,\n      selectedPosition: position\n    });\n  }\n  function selectCell(position, enableEditor) {\n    if (!isCellWithinSelectionBounds(position)) return;\n    commitEditorChanges();\n    const row = rows[position.rowIdx];\n    const samePosition = isSamePosition(selectedPosition, position);\n    if (enableEditor && isCellEditable(position)) {\n      setSelectedPosition({\n        ...position,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      });\n    } else if (samePosition) {\n      scrollIntoView(getCellToScroll(gridRef.current));\n    } else {\n      shouldFocusCellRef.current = true;\n      setSelectedPosition({\n        ...position,\n        mode: 'SELECT'\n      });\n    }\n    if (onSelectedCellChange && !samePosition) {\n      onSelectedCellChange({\n        rowIdx: position.rowIdx,\n        row,\n        column: columns[position.idx]\n      });\n    }\n  }\n  function getNextPosition(key, ctrlKey, shiftKey) {\n    const {\n      idx,\n      rowIdx\n    } = selectedPosition;\n    const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;\n    switch (key) {\n      case 'ArrowUp':\n        return {\n          idx,\n          rowIdx: rowIdx - 1\n        };\n      case 'ArrowDown':\n        return {\n          idx,\n          rowIdx: rowIdx + 1\n        };\n      case leftKey:\n        return {\n          idx: idx - 1,\n          rowIdx\n        };\n      case rightKey:\n        return {\n          idx: idx + 1,\n          rowIdx\n        };\n      case 'Tab':\n        return {\n          idx: idx + (shiftKey ? -1 : 1),\n          rowIdx\n        };\n      case 'Home':\n        if (isRowSelected) return {\n          idx,\n          rowIdx: minRowIdx\n        };\n        return {\n          idx: 0,\n          rowIdx: ctrlKey ? minRowIdx : rowIdx\n        };\n      case 'End':\n        if (isRowSelected) return {\n          idx,\n          rowIdx: maxRowIdx\n        };\n        return {\n          idx: maxColIdx,\n          rowIdx: ctrlKey ? maxRowIdx : rowIdx\n        };\n      case 'PageUp':\n        {\n          if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;\n          const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n          return {\n            idx,\n            rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0\n          };\n        }\n      case 'PageDown':\n        {\n          if (selectedPosition.rowIdx >= rows.length) return selectedPosition;\n          const nextRowY = getRowTop(rowIdx) + clientHeight;\n          return {\n            idx,\n            rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1\n          };\n        }\n      default:\n        return selectedPosition;\n    }\n  }\n  function navigate(event) {\n    const {\n      key,\n      shiftKey\n    } = event;\n    let cellNavigationMode = 'NONE';\n    if (key === 'Tab') {\n      if (canExitGrid({\n        shiftKey,\n        maxColIdx,\n        minRowIdx,\n        maxRowIdx,\n        selectedPosition\n      })) {\n        commitEditorChanges();\n        return;\n      }\n      cellNavigationMode = 'CHANGE_ROW';\n    }\n    event.preventDefault();\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    if (isSamePosition(selectedPosition, nextPosition)) return;\n    const nextSelectedCellPosition = getNextSelectedCellPosition({\n      moveUp: key === 'ArrowUp',\n      moveNext: key === rightKey || key === 'Tab' && !shiftKey,\n      columns,\n      colSpanColumns,\n      rows,\n      topSummaryRows,\n      bottomSummaryRows,\n      minRowIdx,\n      mainHeaderRowIdx,\n      maxRowIdx,\n      lastFrozenColumnIndex,\n      cellNavigationMode,\n      currentPosition: selectedPosition,\n      nextPosition,\n      isCellWithinBounds: isCellWithinSelectionBounds\n    });\n    selectCell(nextSelectedCellPosition);\n  }\n  function getDraggedOverCellIdx(currentRowIdx) {\n    if (draggedOverRowIdx === undefined) return;\n    const {\n      rowIdx\n    } = selectedPosition;\n    const isDraggedOver = rowIdx < draggedOverRowIdx ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n  function focusCellOrCellContent() {\n    const cell = getCellToScroll(gridRef.current);\n    if (cell === null) return;\n    scrollIntoView(cell);\n    const elementToFocus = cell.querySelector('[tabindex=\"0\"]') ?? cell;\n    elementToFocus.focus({\n      preventScroll: true\n    });\n  }\n  function renderDragHandle() {\n    if (onFill == null || selectedPosition.mode === 'EDIT' || !isCellWithinViewportBounds(selectedPosition)) {\n      return;\n    }\n    const {\n      idx,\n      rowIdx\n    } = selectedPosition;\n    const column = columns[idx];\n    if (column.renderEditCell == null || column.editable === false) {\n      return;\n    }\n    const columnWidth = getColumnWidth(column);\n    return /*#__PURE__*/jsx(DragHandle, {\n      gridRowStart: headerAndTopSummaryRowsCount + rowIdx + 1,\n      rows: rows,\n      column: column,\n      columnWidth: columnWidth,\n      maxColIdx: maxColIdx,\n      isLastRow: rowIdx === maxRowIdx,\n      selectedPosition: selectedPosition,\n      isCellEditable: isCellEditable,\n      latestDraggedOverRowIdx: latestDraggedOverRowIdx,\n      onRowsChange: onRowsChange,\n      onClick: focusCellOrCellContent,\n      onFill: onFill,\n      setDragging: setDragging,\n      setDraggedOverRowIdx: setDraggedOverRowIdx\n    });\n  }\n  function getCellEditor(rowIdx) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'SELECT') return;\n    const {\n      idx,\n      row\n    } = selectedPosition;\n    const column = columns[idx];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, {\n      type: 'ROW',\n      row\n    });\n    const closeEditor = shouldFocusCell => {\n      shouldFocusCellRef.current = shouldFocusCell;\n      setSelectedPosition(({\n        idx,\n        rowIdx\n      }) => ({\n        idx,\n        rowIdx,\n        mode: 'SELECT'\n      }));\n    };\n    const onRowChange = (row, commitChanges, shouldFocusCell) => {\n      if (commitChanges) {\n        flushSync(() => {\n          updateRow(column, selectedPosition.rowIdx, row);\n          closeEditor(shouldFocusCell);\n        });\n      } else {\n        setSelectedPosition(position => ({\n          ...position,\n          row\n        }));\n      }\n    };\n    if (rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n      closeEditor(false);\n    }\n    return /*#__PURE__*/jsx(EditCell, {\n      column: column,\n      colSpan: colSpan,\n      row: row,\n      rowIdx: rowIdx,\n      onRowChange: onRowChange,\n      closeEditor: closeEditor,\n      onKeyDown: onCellKeyDown,\n      navigate: navigate\n    }, column.key);\n  }\n  function getRowViewportColumns(rowIdx) {\n    const selectedColumn = selectedPosition.idx === -1 ? undefined : columns[selectedPosition.idx];\n    if (selectedColumn !== undefined && selectedPosition.rowIdx === rowIdx && !viewportColumns.includes(selectedColumn)) {\n      return selectedPosition.idx > colOverscanEndIdx ? [...viewportColumns, selectedColumn] : [...viewportColumns.slice(0, lastFrozenColumnIndex + 1), selectedColumn, ...viewportColumns.slice(lastFrozenColumnIndex + 1)];\n    }\n    return viewportColumns;\n  }\n  function getViewportRows() {\n    const rowElements = [];\n    const {\n      idx: selectedIdx,\n      rowIdx: selectedRowIdx\n    } = selectedPosition;\n    const startRowIdx = selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx ? rowOverscanStartIdx - 1 : rowOverscanStartIdx;\n    const endRowIdx = selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx ? rowOverscanEndIdx + 1 : rowOverscanEndIdx;\n    for (let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++) {\n      const isRowOutsideViewport = viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n      let rowColumns = viewportColumns;\n      const selectedColumn = selectedIdx === -1 ? undefined : columns[selectedIdx];\n      if (selectedColumn !== undefined) {\n        if (isRowOutsideViewport) {\n          rowColumns = [selectedColumn];\n        } else {\n          rowColumns = getRowViewportColumns(rowIdx);\n        }\n      }\n      const row = rows[rowIdx];\n      const gridRowStart = headerAndTopSummaryRowsCount + rowIdx + 1;\n      let key = rowIdx;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      }\n      rowElements.push(renderRow(key, {\n        'aria-rowindex': headerAndTopSummaryRowsCount + rowIdx + 1,\n        'aria-selected': isSelectable ? isRowSelected : undefined,\n        rowIdx,\n        row,\n        viewportColumns: rowColumns,\n        isRowSelected,\n        onCellClick: onCellClickLatest,\n        onCellDoubleClick: onCellDoubleClickLatest,\n        onCellContextMenu: onCellContextMenuLatest,\n        rowClass,\n        gridRowStart,\n        copiedCellIdx: copiedCell !== null && copiedCell.row === row ? columns.findIndex(c => c.key === copiedCell.columnKey) : undefined,\n        selectedCellIdx: selectedRowIdx === rowIdx ? selectedIdx : undefined,\n        draggedOverCellIdx: getDraggedOverCellIdx(rowIdx),\n        setDraggedOverRowIdx: isDragging ? setDraggedOverRowIdx : undefined,\n        lastFrozenColumnIndex,\n        onRowChange: handleFormatterRowChangeLatest,\n        selectCell: selectCellLatest,\n        selectedCellEditor: getCellEditor(rowIdx)\n      }));\n    }\n    return rowElements;\n  }\n  if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\n    setSelectedPosition({\n      idx: -1,\n      rowIdx: minRowIdx - 1,\n      mode: 'SELECT'\n    });\n    setDraggedOverRowIdx(undefined);\n  }\n  let templateRows = `repeat(${headerRowsCount}, ${headerRowHeight}px)`;\n  if (topSummaryRowsCount > 0) {\n    templateRows += ` repeat(${topSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n  if (rows.length > 0) {\n    templateRows += gridTemplateRows;\n  }\n  if (bottomSummaryRowsCount > 0) {\n    templateRows += ` repeat(${bottomSummaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n  const isGroupRowFocused = selectedPosition.idx === -1 && selectedPosition.rowIdx !== minRowIdx - 1;\n  return /*#__PURE__*/jsxs(\"div\", {\n    role: role,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-describedby\": ariaDescribedBy,\n    \"aria-multiselectable\": isSelectable ? true : undefined,\n    \"aria-colcount\": columns.length,\n    \"aria-rowcount\": ariaRowCount,\n    className: clsx(rootClassname, className, isDragging && viewportDraggingClassname),\n    style: {\n      ...style,\n      scrollPaddingInlineStart: selectedPosition.idx > lastFrozenColumnIndex || scrollToPosition?.idx !== undefined ? `${totalFrozenColumnWidth}px` : undefined,\n      scrollPaddingBlock: isRowIdxWithinViewportBounds(selectedPosition.rowIdx) || scrollToPosition?.rowIdx !== undefined ? `${headerRowsHeight + topSummaryRowsCount * summaryRowHeight}px ${bottomSummaryRowsCount * summaryRowHeight}px` : undefined,\n      gridTemplateColumns,\n      gridTemplateRows: templateRows,\n      '--rdg-header-row-height': `${headerRowHeight}px`,\n      '--rdg-scroll-height': `${scrollHeight}px`,\n      ...layoutCssVars\n    },\n    dir: direction,\n    ref: gridRef,\n    onScroll: handleScroll,\n    onKeyDown: handleKeyDown,\n    \"data-testid\": testId,\n    children: [/*#__PURE__*/jsx(DataGridDefaultRenderersProvider, {\n      value: defaultGridComponents,\n      children: /*#__PURE__*/jsxs(RowSelectionChangeProvider, {\n        value: selectRowLatest,\n        children: [/*#__PURE__*/jsxs(RowSelectionProvider, {\n          value: allRowsSelected,\n          children: [Array.from({\n            length: groupedColumnHeaderRowsCount\n          }, (_, index) => /*#__PURE__*/jsx(GroupedColumnHeaderRow$1, {\n            rowIdx: index + 1,\n            level: -groupedColumnHeaderRowsCount + index,\n            columns: getRowViewportColumns(minRowIdx + index),\n            selectedCellIdx: selectedPosition.rowIdx === minRowIdx + index ? selectedPosition.idx : undefined,\n            selectCell: selectHeaderCellLatest\n          }, index)), /*#__PURE__*/jsx(HeaderRow$1, {\n            rowIdx: headerRowsCount,\n            columns: getRowViewportColumns(mainHeaderRowIdx),\n            onColumnResize: handleColumnResizeLatest,\n            onColumnsReorder: onColumnsReorderLastest,\n            sortColumns: sortColumns,\n            onSortColumnsChange: onSortColumnsChangeLatest,\n            lastFrozenColumnIndex: lastFrozenColumnIndex,\n            selectedCellIdx: selectedPosition.rowIdx === mainHeaderRowIdx ? selectedPosition.idx : undefined,\n            selectCell: selectHeaderCellLatest,\n            shouldFocusGrid: !selectedCellIsWithinSelectionBounds,\n            direction: direction\n          })]\n        }), rows.length === 0 && noRowsFallback ? noRowsFallback : /*#__PURE__*/jsxs(Fragment, {\n          children: [topSummaryRows?.map((row, rowIdx) => {\n            const gridRowStart = headerRowsCount + 1 + rowIdx;\n            const summaryRowIdx = mainHeaderRowIdx + 1 + rowIdx;\n            const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n            const top = headerRowsHeight + summaryRowHeight * rowIdx;\n            return /*#__PURE__*/jsx(SummaryRow$1, {\n              \"aria-rowindex\": gridRowStart,\n              rowIdx: summaryRowIdx,\n              gridRowStart: gridRowStart,\n              row: row,\n              top: top,\n              bottom: undefined,\n              viewportColumns: getRowViewportColumns(summaryRowIdx),\n              lastFrozenColumnIndex: lastFrozenColumnIndex,\n              selectedCellIdx: isSummaryRowSelected ? selectedPosition.idx : undefined,\n              isTop: true,\n              selectCell: selectCellLatest\n            }, rowIdx);\n          }), getViewportRows(), bottomSummaryRows?.map((row, rowIdx) => {\n            const gridRowStart = headerAndTopSummaryRowsCount + rows.length + rowIdx + 1;\n            const summaryRowIdx = rows.length + rowIdx;\n            const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n            const top = clientHeight > totalRowHeight ? gridHeight - summaryRowHeight * (bottomSummaryRows.length - rowIdx) : undefined;\n            const bottom = top === undefined ? summaryRowHeight * (bottomSummaryRows.length - 1 - rowIdx) : undefined;\n            return /*#__PURE__*/jsx(SummaryRow$1, {\n              \"aria-rowindex\": ariaRowCount - bottomSummaryRowsCount + rowIdx + 1,\n              rowIdx: summaryRowIdx,\n              gridRowStart: gridRowStart,\n              row: row,\n              top: top,\n              bottom: bottom,\n              viewportColumns: getRowViewportColumns(summaryRowIdx),\n              lastFrozenColumnIndex: lastFrozenColumnIndex,\n              selectedCellIdx: isSummaryRowSelected ? selectedPosition.idx : undefined,\n              isTop: false,\n              selectCell: selectCellLatest\n            }, rowIdx);\n          })]\n        })]\n      })\n    }), renderDragHandle(), renderMeasuringCells(viewportColumns), isTreeGrid && /*#__PURE__*/jsx(\"div\", {\n      ref: focusSinkRef,\n      tabIndex: isGroupRowFocused ? 0 : -1,\n      className: clsx(focusSinkClassname, isGroupRowFocused && [rowSelected, lastFrozenColumnIndex !== -1 && rowSelectedWithFrozenCell], !isRowIdxWithinViewportBounds(selectedPosition.rowIdx) && focusSinkHeaderAndSummaryClassname),\n      style: {\n        gridRowStart: selectedPosition.rowIdx + headerAndTopSummaryRowsCount + 1\n      }\n    }), scrollToPosition !== null && /*#__PURE__*/jsx(ScrollToCell, {\n      scrollToPosition: scrollToPosition,\n      setScrollToCellPosition: setScrollToPosition,\n      gridElement: gridRef.current\n    })]\n  });\n}\nfunction getCellToScroll(gridEl) {\n  return gridEl.querySelector(':scope > [role=\"row\"] > [tabindex=\"0\"]');\n}\nfunction isSamePosition(p1, p2) {\n  return p1.idx === p2.idx && p1.rowIdx === p2.rowIdx;\n}\nconst DataGrid$1 = /*#__PURE__*/forwardRef(DataGrid);\n\nfunction GroupCell({\n  id,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  column,\n  row,\n  groupColumnIndex,\n  isGroupByColumn,\n  toggleGroup: toggleGroupWrapper\n}) {\n  const {\n    tabIndex,\n    childTabIndex,\n    onFocus\n  } = useRovingTabIndex(isCellSelected);\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n  const isLevelMatching = isGroupByColumn && groupColumnIndex === column.idx;\n  return /*#__PURE__*/jsx(\"div\", {\n    role: \"gridcell\",\n    \"aria-colindex\": column.idx + 1,\n    \"aria-selected\": isCellSelected,\n    tabIndex: tabIndex,\n    className: getCellClassname(column),\n    style: {\n      ...getCellStyle(column),\n      cursor: isLevelMatching ? 'pointer' : 'default'\n    },\n    onClick: isLevelMatching ? toggleGroup : undefined,\n    onFocus: onFocus,\n    children: (!isGroupByColumn || isLevelMatching) && column.renderGroupCell?.({\n      groupKey,\n      childRows,\n      column,\n      row,\n      isExpanded,\n      tabIndex: childTabIndex,\n      toggleGroup\n    })\n  }, column.key);\n}\nconst GroupCell$1 = /*#__PURE__*/memo(GroupCell);\n\nconst groupRow = \"g1yxluv37-0-0-beta-46\";\nconst groupRowClassname = `rdg-group-row ${groupRow}`;\nfunction GroupedRow({\n  className,\n  row,\n  rowIdx,\n  viewportColumns,\n  selectedCellIdx,\n  isRowSelected,\n  selectCell,\n  gridRowStart,\n  groupBy,\n  toggleGroup,\n  ...props\n}) {\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? row.level + 1 : row.level;\n  function handleSelectGroup() {\n    selectCell({\n      rowIdx,\n      idx: -1\n    });\n  }\n  return /*#__PURE__*/jsx(RowSelectionProvider, {\n    value: isRowSelected,\n    children: /*#__PURE__*/jsx(\"div\", {\n      role: \"row\",\n      \"aria-level\": row.level + 1,\n      \"aria-setsize\": row.setSize,\n      \"aria-posinset\": row.posInSet + 1,\n      \"aria-expanded\": row.isExpanded,\n      className: clsx(rowClassname, groupRowClassname, `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`, className, selectedCellIdx === -1 && rowSelectedClassname),\n      onClick: handleSelectGroup,\n      style: getRowStyle(gridRowStart),\n      ...props,\n      children: viewportColumns.map(column => /*#__PURE__*/jsx(GroupCell$1, {\n        id: row.id,\n        groupKey: row.groupKey,\n        childRows: row.childRows,\n        isExpanded: row.isExpanded,\n        isCellSelected: selectedCellIdx === column.idx,\n        column: column,\n        row: row,\n        groupColumnIndex: idx,\n        toggleGroup: toggleGroup,\n        isGroupByColumn: groupBy.includes(column.key)\n      }, column.key))\n    })\n  });\n}\nconst GroupedRow$1 = /*#__PURE__*/memo(GroupedRow);\n\nfunction TreeDataGrid({\n  columns: rawColumns,\n  rows: rawRows,\n  rowHeight: rawRowHeight,\n  rowKeyGetter: rawRowKeyGetter,\n  onCellKeyDown: rawOnCellKeyDown,\n  onRowsChange,\n  selectedRows: rawSelectedRows,\n  onSelectedRowsChange: rawOnSelectedRowsChange,\n  renderers,\n  groupBy: rawGroupBy,\n  rowGrouper,\n  expandedGroupIds,\n  onExpandedGroupIdsChange,\n  ...props\n}, ref) {\n  const defaultRenderers = useDefaultRenderers();\n  const rawRenderRow = renderers?.renderRow ?? defaultRenderers?.renderRow ?? defaultRenderRow;\n  const headerAndTopSummaryRowsCount = 1 + (props.topSummaryRows?.length ?? 0);\n  const isRtl = props.direction === 'rtl';\n  const leftKey = isRtl ? 'ArrowRight' : 'ArrowLeft';\n  const rightKey = isRtl ? 'ArrowLeft' : 'ArrowRight';\n  const toggleGroupLatest = useLatestFunc(toggleGroup);\n  const {\n    columns,\n    groupBy\n  } = useMemo(() => {\n    const columns = [...rawColumns].sort(({\n      key: aKey\n    }, {\n      key: bKey\n    }) => {\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n      if (rawGroupBy.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n        return -1;\n      }\n      if (rawGroupBy.includes(bKey)) return 1;\n      return 0;\n    });\n    const groupBy = [];\n    for (const [index, column] of columns.entries()) {\n      if (rawGroupBy.includes(column.key)) {\n        groupBy.push(column.key);\n        columns[index] = {\n          ...column,\n          frozen: true,\n          renderCell: () => null,\n          renderGroupCell: column.renderGroupCell ?? renderToggleGroup,\n          editable: false\n        };\n      }\n    }\n    return {\n      columns,\n      groupBy\n    };\n  }, [rawColumns, rawGroupBy]);\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0) return [undefined, rawRows.length];\n    const groupRows = (rows, [groupByKey, ...remainingGroupByKeys], startRowIndex) => {\n      let groupRowsCount = 0;\n      const groups = {};\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        const [childGroups, childRowsCount] = remainingGroupByKeys.length === 0 ? [childRows, childRows.length] : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1);\n        groups[key] = {\n          childRows,\n          childGroups,\n          startRowIndex: startRowIndex + groupRowsCount\n        };\n        groupRowsCount += childRowsCount + 1;\n      }\n      return [groups, groupRowsCount];\n    };\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n  const [rows, isGroupRow] = useMemo(() => {\n    const allGroupRows = new Set();\n    if (!groupedRows) return [rawRows, isGroupRow];\n    const flattenedRows = [];\n    const expandGroup = (rows, parentId, level) => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = expandedGroupIds.has(id);\n        const {\n          childRows,\n          childGroups,\n          startRowIndex\n        } = rows[groupKey];\n        const groupRow = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, isGroupRow];\n    function isGroupRow(row) {\n      return allGroupRows.has(row);\n    }\n  }, [expandedGroupIds, groupedRows, rawRows]);\n  const rowHeight = useMemo(() => {\n    if (typeof rawRowHeight === 'function') {\n      return row => {\n        if (isGroupRow(row)) {\n          return rawRowHeight({\n            type: 'GROUP',\n            row\n          });\n        }\n        return rawRowHeight({\n          type: 'ROW',\n          row\n        });\n      };\n    }\n    return rawRowHeight;\n  }, [isGroupRow, rawRowHeight]);\n  const getParentRowAndIndex = useCallback(row => {\n    const rowIdx = rows.indexOf(row);\n    for (let i = rowIdx - 1; i >= 0; i--) {\n      const parentRow = rows[i];\n      if (isGroupRow(parentRow) && (!isGroupRow(row) || row.parentId === parentRow.id)) {\n        return [parentRow, i];\n      }\n    }\n    return undefined;\n  }, [isGroupRow, rows]);\n  const rowKeyGetter = useCallback(row => {\n    if (isGroupRow(row)) {\n      return row.id;\n    }\n    if (typeof rawRowKeyGetter === 'function') {\n      return rawRowKeyGetter(row);\n    }\n    const parentRowAndIndex = getParentRowAndIndex(row);\n    if (parentRowAndIndex !== undefined) {\n      const {\n        startRowIndex,\n        childRows\n      } = parentRowAndIndex[0];\n      const groupIndex = childRows.indexOf(row);\n      return startRowIndex + groupIndex + 1;\n    }\n    return rows.indexOf(row);\n  }, [getParentRowAndIndex, isGroupRow, rawRowKeyGetter, rows]);\n  const selectedRows = useMemo(() => {\n    if (rawSelectedRows == null) return null;\n    assertIsValidKeyGetter(rawRowKeyGetter);\n    const selectedRows = new Set(rawSelectedRows);\n    for (const row of rows) {\n      if (isGroupRow(row)) {\n        const isGroupRowSelected = row.childRows.every(cr => rawSelectedRows.has(rawRowKeyGetter(cr)));\n        if (isGroupRowSelected) {\n          selectedRows.add(row.id);\n        }\n      }\n    }\n    return selectedRows;\n  }, [isGroupRow, rawRowKeyGetter, rawSelectedRows, rows]);\n  function onSelectedRowsChange(newSelectedRows) {\n    if (!rawOnSelectedRowsChange) return;\n    assertIsValidKeyGetter(rawRowKeyGetter);\n    const newRawSelectedRows = new Set(rawSelectedRows);\n    for (const row of rows) {\n      const key = rowKeyGetter(row);\n      if (selectedRows?.has(key) && !newSelectedRows.has(key)) {\n        if (isGroupRow(row)) {\n          for (const cr of row.childRows) {\n            newRawSelectedRows.delete(rawRowKeyGetter(cr));\n          }\n        } else {\n          newRawSelectedRows.delete(key);\n        }\n      } else if (!selectedRows?.has(key) && newSelectedRows.has(key)) {\n        if (isGroupRow(row)) {\n          for (const cr of row.childRows) {\n            newRawSelectedRows.add(rawRowKeyGetter(cr));\n          }\n        } else {\n          newRawSelectedRows.add(key);\n        }\n      }\n    }\n    rawOnSelectedRowsChange(newRawSelectedRows);\n  }\n  function handleKeyDown(args, event) {\n    rawOnCellKeyDown?.(args, event);\n    if (event.isGridDefaultPrevented()) return;\n    if (args.mode === 'EDIT') return;\n    const {\n      column,\n      rowIdx,\n      selectCell\n    } = args;\n    const idx = column?.idx ?? -1;\n    const row = rows[rowIdx];\n    if (!isGroupRow(row)) return;\n    if (idx === -1 && (event.key === leftKey && row.isExpanded || event.key === rightKey && !row.isExpanded)) {\n      event.preventDefault();\n      event.preventGridDefault();\n      toggleGroup(row.id);\n    }\n    if (idx === -1 && event.key === leftKey && !row.isExpanded && row.level !== 0) {\n      const parentRowAndIndex = getParentRowAndIndex(row);\n      if (parentRowAndIndex !== undefined) {\n        event.preventGridDefault();\n        selectCell({\n          idx,\n          rowIdx: parentRowAndIndex[1]\n        });\n      }\n    }\n    if (isCtrlKeyHeldDown(event) && (event.keyCode === 67 || event.keyCode === 86)) {\n      event.preventGridDefault();\n    }\n  }\n  function handleRowsChange(updatedRows, {\n    indexes,\n    column\n  }) {\n    if (!onRowsChange) return;\n    const updatedRawRows = [...rawRows];\n    const rawIndexes = [];\n    for (const index of indexes) {\n      const rawIndex = rawRows.indexOf(rows[index]);\n      updatedRawRows[rawIndex] = updatedRows[index];\n      rawIndexes.push(rawIndex);\n    }\n    onRowsChange(updatedRawRows, {\n      indexes: rawIndexes,\n      column\n    });\n  }\n  function toggleGroup(groupId) {\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n    if (newExpandedGroupIds.has(groupId)) {\n      newExpandedGroupIds.delete(groupId);\n    } else {\n      newExpandedGroupIds.add(groupId);\n    }\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n  function renderRow(key, {\n    row,\n    rowClass,\n    onCellClick,\n    onCellDoubleClick,\n    onCellContextMenu,\n    onRowChange,\n    lastFrozenColumnIndex,\n    copiedCellIdx,\n    draggedOverCellIdx,\n    setDraggedOverRowIdx,\n    selectedCellEditor,\n    ...rowProps\n  }) {\n    if (isGroupRow(row)) {\n      const {\n        startRowIndex\n      } = row;\n      return /*#__PURE__*/jsx(GroupedRow$1, {\n        ...rowProps,\n        \"aria-rowindex\": headerAndTopSummaryRowsCount + startRowIndex + 1,\n        row: row,\n        groupBy: groupBy,\n        toggleGroup: toggleGroupLatest\n      }, key);\n    }\n    let ariaRowIndex = rowProps['aria-rowindex'];\n    const parentRowAndIndex = getParentRowAndIndex(row);\n    if (parentRowAndIndex !== undefined) {\n      const {\n        startRowIndex,\n        childRows\n      } = parentRowAndIndex[0];\n      const groupIndex = childRows.indexOf(row);\n      ariaRowIndex = startRowIndex + headerAndTopSummaryRowsCount + groupIndex + 2;\n    }\n    return rawRenderRow(key, {\n      ...rowProps,\n      'aria-rowindex': ariaRowIndex,\n      row,\n      rowClass,\n      onCellClick,\n      onCellDoubleClick,\n      onCellContextMenu,\n      onRowChange,\n      lastFrozenColumnIndex,\n      copiedCellIdx,\n      draggedOverCellIdx,\n      setDraggedOverRowIdx,\n      selectedCellEditor\n    });\n  }\n  return /*#__PURE__*/jsx(DataGrid$1, {\n    ...props,\n    role: \"treegrid\",\n    \"aria-rowcount\": rowsCount + 1 + (props.topSummaryRows?.length ?? 0) + (props.bottomSummaryRows?.length ?? 0),\n    ref: ref,\n    columns: columns,\n    rows: rows,\n    rowHeight: rowHeight,\n    rowKeyGetter: rowKeyGetter,\n    onRowsChange: handleRowsChange,\n    selectedRows: selectedRows,\n    onSelectedRowsChange: onSelectedRowsChange,\n    onCellKeyDown: handleKeyDown,\n    renderers: {\n      ...renderers,\n      renderRow\n    }\n  });\n}\nfunction isReadonlyArray(arr) {\n  return Array.isArray(arr);\n}\nconst TreeDataGrid$1 = /*#__PURE__*/forwardRef(TreeDataGrid);\n\nconst textEditorInternalClassname = \"t7vyx3i7-0-0-beta-46\";\nconst textEditorClassname = `rdg-text-editor ${textEditorInternalClassname}`;\nfunction autoFocusAndSelect(input) {\n  input?.focus();\n  input?.select();\n}\nfunction textEditor({\n  row,\n  column,\n  onRowChange,\n  onClose\n}) {\n  return /*#__PURE__*/jsx(\"input\", {\n    className: textEditorClassname,\n    ref: autoFocusAndSelect,\n    value: row[column.key],\n    onChange: event => onRowChange({\n      ...row,\n      [column.key]: event.target.value\n    }),\n    onBlur: () => onClose(true, false)\n  });\n}\n\nexport { DataGridDefaultRenderersProvider, RowComponent$1 as Row, SELECT_COLUMN_KEY, SelectCellFormatter, SelectColumn, ToggleGroup, TreeDataGrid$1 as TreeDataGrid, DataGrid$1 as default, renderCheckbox, renderHeaderCell, renderSortIcon, renderSortPriority, renderToggleGroup, renderValue, textEditor, useRowSelection };\n//# sourceMappingURL=bundle.js.map\n","/**\n* Copyright (c) 2025, Leon Sorokin\n* All rights reserved. (MIT Licensed)\n*\n* uWrap.js\n* A small, fast line wrapping thing for Canvas2D\n* https://github.com/leeoniya/uWrap (v0.1.1)\n*/\n\n// BREAKS\nconst D = \"-\".charCodeAt(0);\nconst S = \" \".charCodeAt(0);\nconst N = \"\\n\".charCodeAt(0);\n// const R = \"\\r\".charCodeAt(0); (TODO: support \\r\\n breaks)\n// const T = \"\\t\".charCodeAt(0);\nconst SYMBS = `\\`~!@#$%^&*()_+-=[]\\\\{}|;':\",./<>? \\t`;\nconst NUMS = \"1234567890\";\nconst UPPER = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nconst LOWER = \"abcdefghijklmnopqrstuvwxyz\";\nconst CHARS = `${UPPER}${LOWER}${NUMS}${SYMBS}`;\nfunction supportsLetterSpacing(ctx) {\n    const _w = ctx.measureText('W').width;\n    const _letterSpacing = ctx.letterSpacing;\n    ctx.letterSpacing = '101px';\n    const w = ctx.measureText('W').width;\n    ctx.letterSpacing = _letterSpacing;\n    return w > _w;\n}\nfunction varPreLine(ctx) {\n    // Safari pre-18.4 does not support Canvas letterSpacing, and measureText() does not account for it\n    // so we have to add it manually. https://caniuse.com/mdn-api_canvasrenderingcontext2d_letterspacing\n    const fauxLetterSpacing = !supportsLetterSpacing(ctx) ? parseFloat(ctx.letterSpacing) : 0;\n    // single-char widths in isolation\n    const WIDTHS = {};\n    for (let i = 0; i < CHARS.length; i++)\n        WIDTHS[CHARS.charCodeAt(i)] = ctx.measureText(CHARS[i]).width + fauxLetterSpacing;\n    const wordSpacing = parseFloat(ctx.wordSpacing);\n    if (wordSpacing > 0)\n        WIDTHS[S] = wordSpacing;\n    // build kerning/spacing LUT of upper+lower, upper+sym, upper+upper pairs. (this includes letterSpacing)\n    // holds kerning-adjusted width of the uppers\n    const PAIRS = {};\n    for (let i = 0; i < UPPER.length; i++) {\n        let uc = UPPER.charCodeAt(i);\n        PAIRS[uc] = {};\n        for (let j = 0; j < CHARS.length; j++) {\n            let ch = CHARS.charCodeAt(j);\n            let wid = ctx.measureText(`${UPPER[i]}${CHARS[j]}`).width - WIDTHS[ch] + fauxLetterSpacing;\n            PAIRS[uc][ch] = wid;\n        }\n    }\n    const eachLine = () => { };\n    function each(text, width, cb = eachLine) {\n        let fr = 0;\n        while (text.charCodeAt(fr) === S)\n            fr++;\n        let to = text.length - 1;\n        while (text.charCodeAt(to) === S)\n            to--;\n        let headIdx = fr;\n        let headEnd = 0;\n        let headWid = 0;\n        let tailIdx = -1; // wrap candidate\n        let tailWid = 0;\n        let inWS = false;\n        for (let i = fr; i <= to; i++) {\n            let c = text.charCodeAt(i);\n            let w = 0;\n            if (c in PAIRS) {\n                let n = text.charCodeAt(i + 1);\n                if (n in PAIRS[c])\n                    w = PAIRS[c][n];\n            }\n            if (w === 0)\n                w = WIDTHS[c] ?? (WIDTHS[c] = ctx.measureText(text[i]).width);\n            if (c === S) { //  || c === T || c === N || c === R\n                // set possible wrap point\n                if (text.charCodeAt(i + 1) !== c) {\n                    tailIdx = i + 1;\n                    tailWid = 0;\n                }\n                if (!inWS && headWid > 0) {\n                    headWid += w;\n                    headEnd = i;\n                }\n                inWS = true;\n            }\n            else if (c === N) {\n                if (cb(headIdx, i) === false)\n                    return;\n                headIdx = headEnd = i + 1;\n                headWid = tailWid = 0;\n                tailWid = 0;\n                tailIdx = -1;\n            }\n            else {\n                if (headEnd > headIdx && headWid + w > width) {\n                    if (cb(headIdx, headEnd) === false)\n                        return;\n                    headWid = tailWid + w;\n                    headIdx = headEnd = tailIdx;\n                    tailWid = 0;\n                    tailIdx = -1;\n                }\n                else {\n                    if (c === D) {\n                        // set possible wrap point\n                        if (text.charCodeAt(i + 1) !== c) {\n                            tailIdx = headEnd = i + 1;\n                            tailWid = 0;\n                        }\n                    }\n                    headWid += w;\n                    tailWid += w;\n                }\n                inWS = false;\n            }\n        }\n        cb(headIdx, to + 1);\n    }\n    return {\n        each,\n        split: (text, width, limit = Infinity) => {\n            let out = [];\n            each(text, width, (idx0, idx1) => {\n                out.push(text.slice(idx0, idx1));\n                if (out.length === limit)\n                    return false;\n            });\n            return out;\n        },\n        count: (text, width) => {\n            let count = 0;\n            each(text, width, () => { count++; });\n            return count;\n        },\n        test: (text, width) => {\n            let count = 0;\n            each(text, width, () => {\n                if (++count === 2)\n                    return false;\n            });\n            return count === 2;\n        },\n    };\n}\n/*\nfunction isMonospace(ctx: CanvasRenderingContext2D) {\n  let w = ctx.measureText('.').width;\n  return ctx.measureText('i').width === w && ctx.measureText('.').width === w;\n}\n*/\n\nexport { varPreLine };\n","/** Column width and sizing configuration */\nexport const COLUMN = {\n  DEFAULT_WIDTH: 150,\n  EXPANDER_WIDTH: 50,\n  // This will need to eventually change to 36\n  MIN_WIDTH: 50,\n};\n\n/** Table layout and display constants */\nexport const TABLE = {\n  CELL_PADDING: 8,\n  MAX_CELL_HEIGHT: 48,\n  PAGINATION_LIMIT: 750,\n  SCROLL_BAR_WIDTH: 8,\n  SCROLL_BAR_MARGIN: 2,\n};\n","import { css } from '@emotion/css';\nimport { Property } from 'csstype';\nimport React from 'react';\nimport { SortColumn, SortDirection } from 'react-data-grid';\nimport tinycolor from 'tinycolor2';\nimport { varPreLine } from 'uwrap';\n\nimport {\n  FieldType,\n  Field,\n  formattedValueToString,\n  reduceField,\n  GrafanaTheme2,\n  DisplayValue,\n  LinkModel,\n  DisplayValueAlignmentFactors,\n  DataFrame,\n} from '@grafana/data';\nimport {\n  BarGaugeDisplayMode,\n  TableAutoCellOptions,\n  TableCellBackgroundDisplayMode,\n  TableCellDisplayMode,\n  TableCellHeight,\n  TableCellOptions,\n  TableSortByFieldState,\n} from '@grafana/schema';\n\nimport { TableCellInspectorMode } from '../..';\nimport { getTextColorForAlphaBackground } from '../../../utils';\n\nimport { TABLE } from './constants';\nimport {\n  CellColors,\n  TableRow,\n  TableFieldOptionsType,\n  ColumnTypes,\n  FilterType,\n  FrameToRowsConverter,\n  TableNGProps,\n  Comparator,\n  TableFooterCalc,\n} from './types';\n\n/* ---------------------------- Cell calculations --------------------------- */\nexport function getCellHeight(\n  text: string,\n  cellWidth: number, // width of the cell without padding\n  ctx: CanvasRenderingContext2D,\n  lineHeight: number,\n  defaultRowHeight: number,\n  padding = 0\n) {\n  const PADDING = padding * 2;\n\n  if (typeof text === 'string') {\n    const words = text.split(/\\s/);\n    const lines = [];\n    let currentLine = '';\n\n    // Let's just wrap the lines and see how well the measurement works\n    for (let i = 0; i < words.length; i++) {\n      const currentWord = words[i];\n      // TODO: this method is not accurate\n      let lineWidth = ctx.measureText(currentLine + ' ' + currentWord).width;\n\n      // if line width is less than the cell width, add the word to the current line and continue\n      // else add the current line to the lines array and start a new line with the current word\n      if (lineWidth < cellWidth) {\n        currentLine += ' ' + currentWord;\n      } else {\n        lines.push({\n          width: lineWidth,\n          line: currentLine,\n        });\n\n        currentLine = currentWord;\n      }\n\n      // if we are at the last word, add the current line to the lines array\n      if (i === words.length - 1) {\n        lines.push({\n          width: lineWidth,\n          line: currentLine,\n        });\n      }\n    }\n\n    if (lines.length === 1) {\n      return defaultRowHeight;\n    }\n\n    // TODO: double padding to adjust osContext.measureText() results\n    const height = lines.length * lineHeight + PADDING * 2;\n\n    return height;\n  }\n\n  return defaultRowHeight;\n}\n\nexport type CellHeightCalculator = (text: string, cellWidth: number) => number;\n\nexport function getCellHeightCalculator(\n  // should be pre-configured with font and letterSpacing\n  ctx: CanvasRenderingContext2D,\n  lineHeight: number,\n  defaultRowHeight: number,\n  padding = 0\n) {\n  const { count } = varPreLine(ctx);\n\n  return (text: string, cellWidth: number) => {\n    const effectiveCellWidth = Math.max(cellWidth, 20); // Minimum width to work with\n    const TOTAL_PADDING = padding * 2;\n    const numLines = count(text, effectiveCellWidth);\n    const totalHeight = numLines * lineHeight + TOTAL_PADDING;\n    return Math.max(totalHeight, defaultRowHeight);\n  };\n}\n\nexport function getDefaultRowHeight(theme: GrafanaTheme2, cellHeight: TableCellHeight | undefined): number {\n  const bodyFontSize = theme.typography.fontSize;\n  const lineHeight = theme.typography.body.lineHeight;\n\n  switch (cellHeight) {\n    case TableCellHeight.Sm:\n      return 36;\n    case TableCellHeight.Md:\n      return 42;\n    case TableCellHeight.Lg:\n      return TABLE.MAX_CELL_HEIGHT;\n  }\n\n  return TABLE.CELL_PADDING * 2 + bodyFontSize * lineHeight;\n}\n\n/**\n * getRowHeight determines cell height based on cell width + text length. Used\n * for when textWrap is enabled.\n */\nexport function getRowHeight(\n  row: TableRow,\n  calc: CellHeightCalculator,\n  avgCharWidth: number,\n  defaultRowHeight: number,\n  fieldsData: {\n    headersLength: number;\n    textWraps: { [key: string]: boolean };\n    columnTypes: ColumnTypes;\n    columnWidths: Record<string, number>;\n    fieldDisplayType: Record<string, TableCellDisplayMode>;\n  }\n): number {\n  let maxLines = 1;\n  let maxLinesCol = '';\n\n  for (const key in row) {\n    if (\n      fieldsData.columnTypes[key] === FieldType.string &&\n      fieldsData.textWraps[key] &&\n      fieldsData.fieldDisplayType[key] !== TableCellDisplayMode.Image\n    ) {\n      const cellText = row[key] as string;\n\n      if (cellText != null) {\n        const charsPerLine = fieldsData.columnWidths[key] / avgCharWidth;\n        const approxLines = cellText.length / charsPerLine;\n\n        if (approxLines > maxLines) {\n          maxLines = approxLines;\n          maxLinesCol = key;\n        }\n      }\n    }\n  }\n\n  return maxLinesCol === '' ? defaultRowHeight : calc(row[maxLinesCol] as string, fieldsData.columnWidths[maxLinesCol]);\n}\n\nexport function isTextCell(key: string, columnTypes: Record<string, string>): boolean {\n  return columnTypes[key] === FieldType.string;\n}\n\nexport function shouldTextOverflow(\n  key: string,\n  row: TableRow,\n  columnTypes: ColumnTypes,\n  headerCellRefs: React.MutableRefObject<Record<string, HTMLDivElement>>,\n  ctx: CanvasRenderingContext2D,\n  lineHeight: number,\n  defaultRowHeight: number,\n  padding: number,\n  textWrap: boolean,\n  field: Field,\n  cellType: TableCellDisplayMode\n): boolean {\n  const cellInspect = field.config?.custom?.inspect ?? false;\n\n  // Tech debt: Technically image cells are of type string, which is misleading (kinda?)\n  // so we need to ensure we don't apply overflow hover states fo type image\n  if (textWrap || cellInspect || cellType === TableCellDisplayMode.Image || !isTextCell(key, columnTypes)) {\n    return false;\n  }\n\n  return true;\n}\n\nexport function getTextAlign(field?: Field): Property.JustifyContent {\n  if (!field) {\n    return 'flex-start';\n  }\n\n  if (field.config.custom) {\n    const custom: TableFieldOptionsType = field.config.custom;\n\n    switch (custom.align) {\n      case 'right':\n        return 'flex-end';\n      case 'left':\n        return 'flex-start';\n      case 'center':\n        return 'center';\n    }\n  }\n\n  if (field.type === FieldType.number) {\n    return 'flex-end';\n  }\n\n  return 'flex-start';\n}\n\nconst defaultCellOptions: TableAutoCellOptions = { type: TableCellDisplayMode.Auto };\n\nexport function getCellOptions(field: Field): TableCellOptions {\n  if (field.config.custom?.displayMode) {\n    return migrateTableDisplayModeToCellOptions(field.config.custom?.displayMode);\n  }\n\n  if (!field.config.custom?.cellOptions) {\n    return defaultCellOptions;\n  }\n\n  return field.config.custom.cellOptions;\n}\n\n/**\n * Getting gauge or sparkline values to align is very tricky without looking at all values and passing them through display processor.\n * For very large tables that could pretty expensive. So this is kind of a compromise. We look at the first 1000 rows and cache the longest value.\n * If we have a cached value we just check if the current value is longer and update the alignmentFactor. This can obviously still lead to\n * unaligned gauges but it should a lot less common.\n **/\nexport function getAlignmentFactor(\n  field: Field,\n  displayValue: DisplayValue,\n  rowIndex: number\n): DisplayValueAlignmentFactors {\n  let alignmentFactor = field.state?.alignmentFactors;\n\n  if (alignmentFactor) {\n    // check if current alignmentFactor is still the longest\n    if (formattedValueToString(alignmentFactor).length < formattedValueToString(displayValue).length) {\n      alignmentFactor = { ...displayValue };\n      field.state!.alignmentFactors = alignmentFactor;\n    }\n    return alignmentFactor;\n  } else {\n    // look at the next 1000 rows\n    alignmentFactor = { ...displayValue };\n    const maxIndex = Math.min(field.values.length, rowIndex + 1000);\n\n    for (let i = rowIndex + 1; i < maxIndex; i++) {\n      const nextDisplayValue = field.display!(field.values[i]);\n      if (formattedValueToString(alignmentFactor).length > formattedValueToString(nextDisplayValue).length) {\n        alignmentFactor.text = displayValue.text;\n      }\n    }\n\n    if (field.state) {\n      field.state.alignmentFactors = alignmentFactor;\n    } else {\n      field.state = { alignmentFactors: alignmentFactor };\n    }\n\n    return alignmentFactor;\n  }\n}\n\n/* ------------------------------ Footer calculations ------------------------------ */\nexport function getFooterItemNG(rows: TableRow[], field: Field, options: TableFooterCalc | undefined): string {\n  if (options === undefined) {\n    return '';\n  }\n\n  if (field.type !== FieldType.number) {\n    return '';\n  }\n\n  // Check if reducer array exists and has at least one element\n  if (!options.reducer || !options.reducer.length) {\n    return '';\n  }\n\n  // If fields array is specified, only show footer for fields included in that array\n  if (options.fields && options.fields.length > 0) {\n    if (!options.fields.includes(field.name)) {\n      return '';\n    }\n  }\n\n  const calc = options.reducer[0];\n  const value = reduceField({\n    field: {\n      ...field,\n      values: rows.map((row) => row[getDisplayName(field)]),\n    },\n    reducers: options.reducer,\n  })[calc];\n\n  const formattedValue = formattedValueToString(field.display!(value));\n\n  return formattedValue;\n}\n\nexport const getFooterStyles = (justifyContent: Property.JustifyContent) => ({\n  footerCell: css({\n    display: 'flex',\n    justifyContent: justifyContent || 'space-between',\n  }),\n});\n\n/* ------------------------- Cell color calculation ------------------------- */\nconst CELL_COLOR_DARKENING_MULTIPLIER = 10;\nconst CELL_GRADIENT_DARKENING_MULTIPLIER = 15;\nconst CELL_GRADIENT_HUE_ROTATION_DEGREES = 5;\n\nexport function getCellColors(\n  theme: GrafanaTheme2,\n  cellOptions: TableCellOptions,\n  displayValue: DisplayValue\n): CellColors {\n  // Convert RGBA hover color to hex to prevent transparency issues on cell hover\n  const autoCellBackgroundHoverColor = convertRGBAToHex(theme.colors.background.primary, theme.colors.action.hover);\n\n  // How much to darken elements depends upon if we're in dark mode\n  const darkeningFactor = theme.isDark ? 1 : -0.7;\n\n  // Setup color variables\n  let textColor: string | undefined = undefined;\n  let bgColor: string | undefined = undefined;\n  let bgHoverColor: string = autoCellBackgroundHoverColor;\n\n  if (cellOptions.type === TableCellDisplayMode.ColorText) {\n    textColor = displayValue.color;\n  } else if (cellOptions.type === TableCellDisplayMode.ColorBackground) {\n    const mode = cellOptions.mode ?? TableCellBackgroundDisplayMode.Gradient;\n\n    if (mode === TableCellBackgroundDisplayMode.Basic) {\n      textColor = getTextColorForAlphaBackground(displayValue.color!, theme.isDark);\n      bgColor = tinycolor(displayValue.color).toRgbString();\n      bgHoverColor = tinycolor(displayValue.color)\n        .darken(CELL_COLOR_DARKENING_MULTIPLIER * darkeningFactor)\n        .toRgbString();\n    } else if (mode === TableCellBackgroundDisplayMode.Gradient) {\n      const hoverColor = tinycolor(displayValue.color)\n        .darken(CELL_GRADIENT_DARKENING_MULTIPLIER * darkeningFactor)\n        .toRgbString();\n      const bgColor2 = tinycolor(displayValue.color)\n        .darken(CELL_COLOR_DARKENING_MULTIPLIER * darkeningFactor)\n        .spin(CELL_GRADIENT_HUE_ROTATION_DEGREES);\n      textColor = getTextColorForAlphaBackground(displayValue.color!, theme.isDark);\n      bgColor = `linear-gradient(120deg, ${bgColor2.toRgbString()}, ${displayValue.color})`;\n      bgHoverColor = `linear-gradient(120deg, ${bgColor2.toRgbString()}, ${hoverColor})`;\n    }\n  }\n\n  return { textColor, bgColor, bgHoverColor };\n}\n\n/** Extracts numeric pixel value from theme spacing */\nexport const extractPixelValue = (spacing: string | number): number => {\n  return typeof spacing === 'number' ? spacing : parseFloat(spacing) || 0;\n};\n\n/** Converts an RGBA color to hex by blending it with a background color */\nexport const convertRGBAToHex = (backgroundColor: string, rgbaColor: string): string => {\n  const bg = tinycolor(backgroundColor);\n  const rgba = tinycolor(rgbaColor);\n  return tinycolor.mix(bg, rgba, rgba.getAlpha() * 100).toHexString();\n};\n\n/* ------------------------------- Data links ------------------------------- */\n/**\n * @internal\n */\nexport const getCellLinks = (field: Field, rowIdx: number) => {\n  let links: Array<LinkModel<unknown>> | undefined;\n  if (field.getLinks) {\n    links = field.getLinks({\n      valueRowIndex: rowIdx,\n    });\n  }\n\n  if (!links) {\n    return;\n  }\n\n  for (let i = 0; i < links?.length; i++) {\n    if (links[i].onClick) {\n      const origOnClick = links[i].onClick;\n\n      links[i].onClick = (event) => {\n        // Allow opening in new tab\n        if (!(event.ctrlKey || event.metaKey || event.shiftKey)) {\n          event.preventDefault();\n          origOnClick!(event, {\n            field,\n            rowIndex: rowIdx,\n          });\n        }\n      };\n    }\n  }\n\n  return links;\n};\n\n/* ----------------------------- Data grid sorting ---------------------------- */\nexport const handleSort = (\n  columnKey: string,\n  direction: SortDirection,\n  isMultiSort: boolean,\n  setSortColumns: React.Dispatch<React.SetStateAction<readonly SortColumn[]>>,\n  sortColumnsRef: React.MutableRefObject<readonly SortColumn[]>\n) => {\n  let currentSortColumn: SortColumn | undefined;\n\n  const updatedSortColumns = sortColumnsRef.current.filter((column) => {\n    const isCurrentColumn = column.columnKey === columnKey;\n    if (isCurrentColumn) {\n      currentSortColumn = column;\n    }\n    return !isCurrentColumn;\n  });\n\n  // sorted column exists and is descending -> remove it to reset sorting\n  if (currentSortColumn && currentSortColumn.direction === 'DESC') {\n    setSortColumns(updatedSortColumns);\n    sortColumnsRef.current = updatedSortColumns;\n  } else {\n    // new sort column or changed direction\n    if (isMultiSort) {\n      setSortColumns([...updatedSortColumns, { columnKey, direction }]);\n      sortColumnsRef.current = [...updatedSortColumns, { columnKey, direction }];\n    } else {\n      setSortColumns([{ columnKey, direction }]);\n      sortColumnsRef.current = [{ columnKey, direction }];\n    }\n  }\n};\n\n/* ----------------------------- Data grid mapping ---------------------------- */\nexport const frameToRecords = (frame: DataFrame): TableRow[] => {\n  const fnBody = `\n    const rows = Array(frame.length);\n    const values = frame.fields.map(f => f.values);\n    let rowCount = 0;\n    for (let i = 0; i < frame.length; i++) {\n      rows[rowCount] = {\n        __depth: 0,\n        __index: i,\n        ${frame.fields.map((field, fieldIdx) => `${JSON.stringify(getDisplayName(field))}: values[${fieldIdx}][i]`).join(',')}\n      };\n      rowCount += 1;\n      if (rows[rowCount-1]['Nested frames']){\n        const childFrame = rows[rowCount-1]['Nested frames'];\n        rows[rowCount] = {__depth: 1, __index: i, data: childFrame[0]}\n        rowCount += 1;\n      }\n    }\n    return rows;\n  `;\n\n  // Creates a function that converts a DataFrame into an array of TableRows\n  // Uses new Function() for performance as it's faster than creating rows using loops\n  const convert = new Function('frame', fnBody) as unknown as FrameToRowsConverter;\n  return convert(frame);\n};\n\nexport interface MapFrameToGridOptions extends TableNGProps {\n  columnTypes: ColumnTypes;\n  columnWidth: number | string;\n  crossFilterOrder: React.MutableRefObject<string[]>;\n  crossFilterRows: React.MutableRefObject<{ [key: string]: TableRow[] }>;\n  defaultLineHeight: number;\n  defaultRowHeight: number;\n  expandedRows: number[];\n  filter: FilterType;\n  headerCellRefs: React.MutableRefObject<Record<string, HTMLDivElement>>;\n  isCountRowsSet: boolean;\n  ctx: CanvasRenderingContext2D;\n  onSortByChange?: (sortBy: TableSortByFieldState[]) => void;\n  rows: TableRow[];\n  setContextMenuProps: (props: { value: string; top?: number; left?: number; mode?: TableCellInspectorMode }) => void;\n  setFilter: React.Dispatch<React.SetStateAction<FilterType>>;\n  setIsInspecting: (isInspecting: boolean) => void;\n  setSortColumns: React.Dispatch<React.SetStateAction<readonly SortColumn[]>>;\n  sortColumnsRef: React.MutableRefObject<readonly SortColumn[]>;\n  styles: { cell: string; cellWrapped: string };\n  textWraps: Record<string, boolean>;\n  theme: GrafanaTheme2;\n  showTypeIcons?: boolean;\n}\n\n/* ----------------------------- Data grid comparator ---------------------------- */\n// The numeric: true option is used to sort numbers as strings correctly. It recognizes numeric sequences\n// within strings and sorts numerically instead of lexicographically.\nconst compare = new Intl.Collator('en', { sensitivity: 'base', numeric: true }).compare;\nexport function getComparator(sortColumnType: FieldType): Comparator {\n  switch (sortColumnType) {\n    // Handle sorting for frame type fields (sparklines)\n    case FieldType.frame:\n      return (a, b) => {\n        // @ts-ignore The values are DataFrameWithValue\n        return (a?.value ?? 0) - (b?.value ?? 0);\n      };\n    case FieldType.time:\n    case FieldType.number:\n    case FieldType.boolean:\n      return (a, b) => {\n        if (a === b) {\n          return 0;\n        }\n        if (a == null) {\n          return -1;\n        }\n        if (b == null) {\n          return 1;\n        }\n        return Number(a) - Number(b);\n      };\n    case FieldType.string:\n    case FieldType.enum:\n    default:\n      return (a, b) => compare(String(a ?? ''), String(b ?? ''));\n  }\n}\n\n/* ---------------------------- Miscellaneous ---------------------------- */\n/**\n * Migrates table cell display mode to new object format.\n *\n * @param displayMode The display mode of the cell\n * @returns TableCellOptions object in the correct format\n * relative to the old display mode.\n */\nexport function migrateTableDisplayModeToCellOptions(displayMode: TableCellDisplayMode): TableCellOptions {\n  switch (displayMode) {\n    // In the case of the gauge we move to a different option\n    case 'basic':\n    case 'gradient-gauge':\n    case 'lcd-gauge':\n      let gaugeMode = BarGaugeDisplayMode.Basic;\n\n      if (displayMode === 'gradient-gauge') {\n        gaugeMode = BarGaugeDisplayMode.Gradient;\n      } else if (displayMode === 'lcd-gauge') {\n        gaugeMode = BarGaugeDisplayMode.Lcd;\n      }\n\n      return {\n        type: TableCellDisplayMode.Gauge,\n        mode: gaugeMode,\n      };\n    // Also true in the case of the color background\n    case 'color-background':\n    case 'color-background-solid':\n      let mode = TableCellBackgroundDisplayMode.Basic;\n\n      // Set the new mode field, somewhat confusingly the\n      // color-background mode is for gradient display\n      if (displayMode === 'color-background') {\n        mode = TableCellBackgroundDisplayMode.Gradient;\n      }\n\n      return {\n        type: TableCellDisplayMode.ColorBackground,\n        mode: mode,\n      };\n    default:\n      return {\n        // @ts-ignore\n        type: displayMode,\n      };\n  }\n}\n\n/** Returns true if the DataFrame contains nested frames */\nexport const getIsNestedTable = (dataFrame: DataFrame): boolean =>\n  dataFrame.fields.some(({ type }) => type === FieldType.nestedFrames);\n\n/** Processes nested table rows */\nexport const processNestedTableRows = (\n  rows: TableRow[],\n  processParents: (parents: TableRow[]) => TableRow[]\n): TableRow[] => {\n  // Separate parent and child rows\n  // Array for parentRows: enables sorting and maintains order for iteration\n  // Map for childRows: provides O(1) lookup by parent index when reconstructing the result\n  const parentRows: TableRow[] = [];\n  const childRows: Map<number, TableRow> = new Map();\n\n  rows.forEach((row) => {\n    if (Number(row.__depth) === 0) {\n      parentRows.push(row);\n    } else {\n      childRows.set(Number(row.__index), row);\n    }\n  });\n\n  // Process parent rows (filter or sort)\n  const processedParents = processParents(parentRows);\n\n  // Reconstruct the result\n  const result: TableRow[] = [];\n  processedParents.forEach((row) => {\n    result.push(row);\n    const childRow = childRows.get(Number(row.__index));\n    if (childRow) {\n      result.push(childRow);\n    }\n  });\n\n  return result;\n};\n\nexport const getDisplayName = (field: Field): string => {\n  return field.state?.displayName ?? field.name;\n};\n","import { Field, formattedValueToString, SelectableValue } from '@grafana/data';\n\nimport { getDisplayName } from '../utils';\n\nexport function calculateUniqueFieldValues(rows: any[], field?: Field) {\n  if (!field || rows.length === 0) {\n    return {};\n  }\n\n  const set: Record<string, string> = {};\n\n  for (let index = 0; index < rows.length; index++) {\n    const row = rows[index];\n    const fieldValue = row[getDisplayName(field)];\n    const displayValue = field.display ? field.display(fieldValue) : fieldValue;\n    const value = field.display ? formattedValueToString(displayValue) : displayValue;\n\n    set[value || '(Blanks)'] = value;\n  }\n\n  return set;\n}\n\nexport function getFilteredOptions(options: SelectableValue[], filterValues?: SelectableValue[]): SelectableValue[] {\n  if (!filterValues) {\n    return [];\n  }\n\n  return options.filter((option) => filterValues.some((filtered) => filtered.value === option.value));\n}\n\nexport function valuesToOptions(unique: Record<string, unknown>): SelectableValue[] {\n  return Object.keys(unique)\n    .map((key) => ({ value: unique[key], label: key }))\n    .sort(sortOptions);\n}\n\nfunction sortOptions(a: SelectableValue, b: SelectableValue): number {\n  if (a.label === undefined && b.label === undefined) {\n    return 0;\n  }\n\n  if (a.label === undefined && b.label !== undefined) {\n    return -1;\n  }\n\n  if (a.label !== undefined && b.label === undefined) {\n    return 1;\n  }\n\n  if (a.label! < b.label!) {\n    return -1;\n  }\n\n  if (a.label! > b.label!) {\n    return 1;\n  }\n\n  return 0;\n}\n","import { css } from '@emotion/css';\nimport React, { useCallback, useMemo, useState } from 'react';\n\nimport { Field, GrafanaTheme2, SelectableValue } from '@grafana/data';\n\nimport { Button, ButtonSelect, ClickOutsideWrapper, FilterInput, Label, Stack } from '../../..';\nimport { useStyles2, useTheme2 } from '../../../../themes';\nimport { t, Trans } from '../../../../utils/i18n';\nimport { FilterType } from '../types';\n\nimport { FilterList } from './FilterList';\nimport { calculateUniqueFieldValues, getFilteredOptions, valuesToOptions } from './utils';\n\nexport const operatorSelectableValues: { [key: string]: SelectableValue<string> } = {\n  Contains: { label: 'Contains', value: 'Contains', description: 'Contains' },\n  '=': { label: '=', value: '=', description: 'Equals' },\n  '!=': { label: '!=', value: '!=', description: 'Not equals' },\n  '>': { label: '>', value: '>', description: 'Greater' },\n  '>=': { label: '>=', value: '>=', description: 'Greater or Equal' },\n  '<': { label: '<', value: '<', description: 'Less' },\n  '<=': { label: '<=', value: '<=', description: 'Less or Equal' },\n  Expression: {\n    label: 'Expression',\n    value: 'Expression',\n    description: 'Bool Expression (Char $ represents the column value in the expression, e.g. \"$ >= 10 && $ <= 12\")',\n  },\n};\nconst OPERATORS = Object.values(operatorSelectableValues);\n\ninterface Props {\n  name: string;\n  rows: any[];\n  filterValue: any;\n  setFilter: (value: any) => void;\n  onClose: () => void;\n  field?: Field;\n  searchFilter: string;\n  setSearchFilter: (value: string) => void;\n  operator: SelectableValue<string>;\n  setOperator: (item: SelectableValue<string>) => void;\n}\n\nexport const FilterPopup = ({\n  name,\n  rows,\n  filterValue,\n  setFilter,\n  onClose,\n  field,\n  searchFilter,\n  setSearchFilter,\n  operator,\n  setOperator,\n}: Props) => {\n  const theme = useTheme2();\n  const uniqueValues = useMemo(() => calculateUniqueFieldValues(rows, field), [rows, field]);\n  const options = useMemo(() => valuesToOptions(uniqueValues), [uniqueValues]);\n  const filteredOptions = useMemo(() => getFilteredOptions(options, filterValue), [options, filterValue]);\n  const [values, setValues] = useState<SelectableValue[]>(filteredOptions);\n  const [matchCase, setMatchCase] = useState(false);\n\n  const onCancel = useCallback((event?: React.MouseEvent) => onClose(), [onClose]);\n\n  const onFilter = useCallback(\n    (event: React.MouseEvent) => {\n      if (values.length !== 0) {\n        // create a Set for faster filtering\n        const filteredSet = new Set(values.map((item) => item.value));\n\n        setFilter((filter: FilterType) => ({\n          ...filter,\n          [name]: { filtered: values, filteredSet, searchFilter, operator },\n        }));\n      } else {\n        setFilter((filter: FilterType) => {\n          const newFilter = { ...filter };\n          delete newFilter[name];\n          return newFilter;\n        });\n      }\n      onClose();\n    },\n    [setFilter, values, onClose] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  const onClearFilter = useCallback(\n    (event: React.MouseEvent) => {\n      setFilter((filter: FilterType) => {\n        const newFilter = { ...filter };\n        delete newFilter[name];\n        return newFilter;\n      });\n      onClose();\n    },\n    [setFilter, onClose] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  const clearFilterVisible = useMemo(() => filterValue !== undefined, [filterValue]);\n  const styles = useStyles2(getStyles);\n\n  return (\n    <ClickOutsideWrapper onClick={onCancel} useCapture={true}>\n      {/* This is just blocking click events from bubbeling and should not have a keyboard interaction. */}\n      {/* eslint-disable-next-line jsx-a11y/no-static-element-interactions, jsx-a11y/click-events-have-key-events */}\n      <div className={styles.filterContainer} onClick={stopPropagation}>\n        <Stack direction=\"column\">\n          <Stack alignItems=\"center\">\n            {field && <Label className={styles.label}>{field.config.displayName || field.name}</Label>}\n            <ButtonSelect\n              variant=\"canvas\"\n              options={OPERATORS}\n              onChange={setOperator}\n              value={operator}\n              tooltip={operator.description}\n            />\n          </Stack>\n\n          <div className={styles.listDivider} />\n\n          <Stack gap={1}>\n            <FilterInput\n              placeholder={t('grafana-ui.table.filter-popup-input-placeholder', 'Filter values')}\n              onChange={setSearchFilter}\n              value={searchFilter}\n            />\n            <Button\n              variant=\"secondary\"\n              style={{ color: matchCase ? theme.colors.text.link : theme.colors.text.disabled }}\n              onClick={() => {\n                setMatchCase((s) => !s);\n              }}\n              icon={'text-fields'}\n            />\n          </Stack>\n\n          <FilterList\n            onChange={setValues}\n            values={values}\n            options={options}\n            caseSensitive={matchCase}\n            searchFilter={searchFilter}\n            operator={operator}\n          />\n\n          <Stack gap={3}>\n            <Stack>\n              <Button size=\"sm\" onClick={onFilter}>\n                <Trans i18nKey=\"grafana-ui.table.filter-popup-apply\">Ok</Trans>\n              </Button>\n              <Button size=\"sm\" variant=\"secondary\" onClick={onCancel}>\n                <Trans i18nKey=\"grafana-ui.table.filter-popup-cancel\">Cancel</Trans>\n              </Button>\n            </Stack>\n            {clearFilterVisible && (\n              <Stack>\n                <Button fill=\"text\" size=\"sm\" onClick={onClearFilter}>\n                  <Trans i18nKey=\"grafana-ui.table.filter-popup-clear\">Clear filter</Trans>\n                </Button>\n              </Stack>\n            )}\n          </Stack>\n        </Stack>\n      </div>\n    </ClickOutsideWrapper>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  filterContainer: css({\n    label: 'filterContainer',\n    width: '100%',\n    minWidth: '250px',\n    height: '100%',\n    backgroundColor: theme.colors.background.primary,\n    border: `1px solid ${theme.colors.border.weak}`,\n    padding: theme.spacing(2),\n    boxShadow: theme.shadows.z3,\n    borderRadius: theme.shape.radius.default,\n  }),\n  listDivider: css({\n    label: 'listDivider',\n    width: '100%',\n    borderTop: `1px solid ${theme.colors.border.medium}`,\n  }),\n  label: css({\n    marginBottom: 0,\n  }),\n});\n\nconst stopPropagation = (event: React.MouseEvent) => {\n  event.stopPropagation();\n};\n","import { css } from '@emotion/css';\nimport { useCallback, useMemo } from 'react';\nimport * as React from 'react';\nimport { FixedSizeList as List, ListChildComponentProps } from 'react-window';\n\nimport { GrafanaTheme2, formattedValueToString, getValueFormat, SelectableValue } from '@grafana/data';\n\nimport { Checkbox, Label, Stack } from '../../..';\nimport { useStyles2, useTheme2 } from '../../../../themes';\nimport { Trans } from '../../../../utils/i18n';\n\nimport { operatorSelectableValues } from './FilterPopup';\n\ninterface Props {\n  values: SelectableValue[];\n  options: SelectableValue[];\n  onChange: (options: SelectableValue[]) => void;\n  caseSensitive?: boolean;\n  searchFilter: string;\n  operator: SelectableValue<string>;\n}\n\nconst ITEM_HEIGHT = 28;\nconst MIN_HEIGHT = ITEM_HEIGHT * 5;\n\nexport const REGEX_OPERATOR = operatorSelectableValues['Contains'];\nconst XPR_OPERATOR = operatorSelectableValues['Expression'];\n\nconst comparableValue = (value: string): string | number | Date | boolean => {\n  value = value.trim().replace(/\\\\/g, '');\n\n  // Does it look like a Date (Starting with pattern YYYY-MM-DD* or YYYY/MM/DD*)?\n  if (/^(\\d{4}-\\d{2}-\\d{2}|\\d{4}\\/\\d{2}\\/\\d{2})/.test(value)) {\n    const date = new Date(value);\n    if (!isNaN(date.getTime())) {\n      const fmt = getValueFormat('dateTimeAsIso');\n      return formattedValueToString(fmt(date.getTime()));\n    }\n  }\n  // Does it look like a Number?\n  const num = parseFloat(value);\n  if (!isNaN(num)) {\n    return num;\n  }\n  // Does it look like a Bool?\n  const lvalue = value.toLowerCase();\n  if (lvalue === 'true' || lvalue === 'false') {\n    return lvalue === 'true';\n  }\n  // Anything else\n  return value;\n};\n\nexport const FilterList = ({ options, values, caseSensitive, onChange, searchFilter, operator }: Props) => {\n  const regex = useMemo(() => new RegExp(searchFilter, caseSensitive ? undefined : 'i'), [searchFilter, caseSensitive]);\n  const items = useMemo(\n    () =>\n      options.filter((option) => {\n        if (!searchFilter || operator.value === REGEX_OPERATOR.value) {\n          if (option.label === undefined) {\n            return false;\n          }\n          return regex.test(option.label);\n        } else if (operator.value === XPR_OPERATOR.value) {\n          if (option.value === undefined) {\n            return false;\n          }\n          try {\n            const xpr = searchFilter.replace(/\\\\/g, '');\n            const fnc = new Function('$', `'use strict'; return ${xpr};`);\n            const val = comparableValue(option.value);\n            return fnc(val);\n          } catch (_) {}\n          return false;\n        } else {\n          if (option.value === undefined) {\n            return false;\n          }\n\n          const value1 = comparableValue(option.value);\n          const value2 = comparableValue(searchFilter);\n\n          switch (operator.value) {\n            case '=':\n              return value1 === value2;\n            case '!=':\n              return value1 !== value2;\n            case '>':\n              return value1 > value2;\n            case '>=':\n              return value1 >= value2;\n            case '<':\n              return value1 < value2;\n            case '<=':\n              return value1 <= value2;\n          }\n          return false;\n        }\n      }),\n    [options, regex, operator, searchFilter]\n  );\n  const selectedItems = useMemo(() => items.filter((item) => values.includes(item)), [items, values]);\n\n  const selectCheckValue = useMemo(() => items.length === selectedItems.length, [items, selectedItems]);\n  const selectCheckIndeterminate = useMemo(\n    () => selectedItems.length > 0 && items.length > selectedItems.length,\n    [items, selectedItems]\n  );\n  const selectCheckLabel = useMemo(\n    () => (selectedItems.length ? `${selectedItems.length} selected` : `Select all`),\n    [selectedItems]\n  );\n  const selectCheckDescription = useMemo(\n    () =>\n      items.length !== selectedItems.length\n        ? 'Add all displayed values to the filter'\n        : 'Remove all displayed values from the filter',\n    [items, selectedItems]\n  );\n\n  const styles = useStyles2(getStyles);\n  const theme = useTheme2();\n  const gutter = theme.spacing.gridSize;\n  const height = useMemo(() => Math.min(items.length * ITEM_HEIGHT, MIN_HEIGHT) + gutter, [gutter, items.length]);\n\n  const onCheckedChanged = useCallback(\n    (option: SelectableValue) => (event: React.FormEvent<HTMLInputElement>) => {\n      const newValues = event.currentTarget.checked\n        ? values.concat(option)\n        : values.filter((c) => c.value !== option.value);\n\n      onChange(newValues);\n    },\n    [onChange, values]\n  );\n\n  const onSelectChanged = useCallback(() => {\n    if (items.length === selectedItems.length) {\n      const newValues = values.filter((item) => !items.includes(item));\n      onChange(newValues);\n    } else {\n      const newValues = [...new Set([...values, ...items])];\n      onChange(newValues);\n    }\n  }, [onChange, values, items, selectedItems]);\n\n  return (\n    <Stack direction=\"column\">\n      {items.length > 0 ? (\n        <>\n          <List\n            height={height}\n            itemCount={items.length}\n            itemSize={ITEM_HEIGHT}\n            itemData={{ items, values: selectedItems, onCheckedChanged, className: styles.filterListRow }}\n            width=\"100%\"\n            className={styles.filterList}\n          >\n            {ItemRenderer}\n          </List>\n          <div className={styles.filterListRow}>\n            <Checkbox\n              value={selectCheckValue}\n              indeterminate={selectCheckIndeterminate}\n              label={selectCheckLabel}\n              description={selectCheckDescription}\n              onChange={onSelectChanged}\n            />\n          </div>\n        </>\n      ) : (\n        <Label className={styles.noValuesLabel}>\n          <Trans i18nKey=\"grafana-ui.table.no-values-label\">No values</Trans>\n        </Label>\n      )}\n    </Stack>\n  );\n};\n\ninterface ItemRendererProps extends ListChildComponentProps {\n  data: {\n    onCheckedChanged: (option: SelectableValue) => (event: React.FormEvent<HTMLInputElement>) => void;\n    items: SelectableValue[];\n    values: SelectableValue[];\n    className: string;\n  };\n}\n\nfunction ItemRenderer({ index, style, data: { onCheckedChanged, items, values, className } }: ItemRendererProps) {\n  const option = items[index];\n  const { value, label } = option;\n  const isChecked = values.find((s) => s.value === value) !== undefined;\n\n  return (\n    <div className={className} style={style} title={label}>\n      <Checkbox value={isChecked} label={label} onChange={onCheckedChanged(option)} />\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  filterList: css({\n    label: 'filterList',\n    backgroundColor: theme.components.input.background,\n    border: `1px solid ${theme.colors.border.medium}`,\n    borderRadius: theme.shape.radius.default,\n  }),\n  filterListRow: css({\n    label: 'filterListRow',\n    cursor: 'pointer',\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    padding: theme.spacing(0.5),\n\n    ':hover': {\n      backgroundColor: theme.colors.action.hover,\n    },\n  }),\n  selectDivider: css({\n    label: 'selectDivider',\n    width: '100%',\n    borderTop: `1px solid ${theme.colors.border.medium}`,\n    padding: theme.spacing(0.5, 2),\n  }),\n  noValuesLabel: css({\n    paddingTop: theme.spacing(1),\n  }),\n});\n","import { css, cx } from '@emotion/css';\nimport { useCallback, useMemo, useRef, useState } from 'react';\n\nimport { Field, GrafanaTheme2, SelectableValue } from '@grafana/data';\n\nimport { useStyles2 } from '../../../../themes';\nimport { Icon } from '../../../Icon/Icon';\nimport { Popover } from '../../../Tooltip/Popover';\nimport { TableRow } from '../types';\n\nimport { REGEX_OPERATOR } from './FilterList';\nimport { FilterPopup } from './FilterPopup';\n\ninterface Props {\n  name: string;\n  rows: any[];\n  filter: any;\n  setFilter: (value: any) => void;\n  field?: Field;\n  crossFilterOrder: string[];\n  crossFilterRows: { [key: string]: TableRow[] };\n}\n\nexport const Filter = ({ name, rows, filter, setFilter, field, crossFilterOrder, crossFilterRows }: Props) => {\n  const filterValue = filter[name]?.filtered;\n\n  // get rows for cross filtering\n  const filterIndex = crossFilterOrder.indexOf(name);\n  let filteredRows: TableRow[];\n  if (filterIndex > 0) {\n    // current filter list should be based on the previous filter list\n    const previousFilterName = crossFilterOrder[filterIndex - 1];\n    filteredRows = crossFilterRows[previousFilterName];\n  } else if (filterIndex === -1 && crossFilterOrder.length > 0) {\n    // current filter list should be based on the last filter list\n    const previousFilterName = crossFilterOrder[crossFilterOrder.length - 1];\n    filteredRows = crossFilterRows[previousFilterName];\n  } else {\n    filteredRows = rows;\n  }\n\n  const ref = useRef<HTMLButtonElement>(null);\n  const [isPopoverVisible, setPopoverVisible] = useState<boolean>(false);\n  const styles = useStyles2(getStyles);\n  const filterEnabled = useMemo(() => Boolean(filterValue), [filterValue]);\n  const onShowPopover = useCallback(() => setPopoverVisible(true), [setPopoverVisible]);\n  const onClosePopover = useCallback(() => setPopoverVisible(false), [setPopoverVisible]);\n  const [searchFilter, setSearchFilter] = useState(filter[name]?.searchFilter || '');\n  const [operator, setOperator] = useState<SelectableValue<string>>(filter[name]?.operator || REGEX_OPERATOR);\n\n  return (\n    <button\n      className={cx(styles.headerFilter, filterEnabled ? styles.filterIconEnabled : styles.filterIconDisabled)}\n      ref={ref}\n      type=\"button\"\n      onClick={onShowPopover}\n    >\n      <Icon name=\"filter\" />\n      {isPopoverVisible && ref.current && (\n        <Popover\n          content={\n            <FilterPopup\n              name={name}\n              rows={filteredRows}\n              filterValue={filterValue}\n              setFilter={setFilter}\n              field={field}\n              onClose={onClosePopover}\n              searchFilter={searchFilter}\n              setSearchFilter={setSearchFilter}\n              operator={operator}\n              setOperator={setOperator}\n            />\n          }\n          placement=\"bottom-start\"\n          referenceElement={ref.current}\n          show\n        />\n      )}\n    </button>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  headerFilter: css({\n    background: 'transparent',\n    border: 'none',\n    label: 'headerFilter',\n    padding: 0,\n  }),\n  filterIconEnabled: css({\n    label: 'filterIconEnabled',\n    color: theme.colors.primary.text,\n  }),\n  filterIconDisabled: css({\n    label: 'filterIconDisabled',\n    color: theme.colors.text.disabled,\n  }),\n});\n","import { css } from '@emotion/css';\nimport { Property } from 'csstype';\nimport React, { useLayoutEffect, useRef, useEffect } from 'react';\nimport { Column, SortDirection } from 'react-data-grid';\n\nimport { Field, GrafanaTheme2 } from '@grafana/data';\n\nimport { useStyles2 } from '../../../../themes';\nimport { getFieldTypeIcon } from '../../../../types';\nimport { Icon } from '../../../Icon/Icon';\nimport { Filter } from '../Filter/Filter';\nimport { TableColumnResizeActionCallback, FilterType, TableRow, TableSummaryRow } from '../types';\nimport { getDisplayName } from '../utils';\n\ninterface HeaderCellProps {\n  column: Column<TableRow, TableSummaryRow>;\n  rows: TableRow[];\n  field: Field;\n  onSort: (columnKey: string, direction: SortDirection, isMultiSort: boolean) => void;\n  direction?: SortDirection;\n  justifyContent: Property.JustifyContent;\n  filter: FilterType;\n  setFilter: React.Dispatch<React.SetStateAction<FilterType>>;\n  onColumnResize?: TableColumnResizeActionCallback;\n  headerCellRefs: React.MutableRefObject<Record<string, HTMLDivElement>>;\n  crossFilterOrder: React.MutableRefObject<string[]>;\n  crossFilterRows: React.MutableRefObject<{ [key: string]: TableRow[] }>;\n  showTypeIcons?: boolean;\n}\n\nconst HeaderCell: React.FC<HeaderCellProps> = ({\n  column,\n  rows,\n  field,\n  onSort,\n  direction,\n  justifyContent,\n  filter,\n  setFilter,\n  onColumnResize,\n  headerCellRefs,\n  crossFilterOrder,\n  crossFilterRows,\n  showTypeIcons,\n}) => {\n  const styles = useStyles2(getStyles, justifyContent);\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const filterable = field.config?.custom?.filterable ?? false;\n  const displayName = getDisplayName(field);\n\n  let isColumnFilterable = filterable;\n  if (field.config.custom?.filterable !== filterable) {\n    isColumnFilterable = field.config.custom?.filterable || false;\n  }\n  // we have to remove/reset the filter if the column is not filterable\n  if (!isColumnFilterable && filter[displayName]) {\n    setFilter((filter: FilterType) => {\n      const newFilter = { ...filter };\n      delete newFilter[displayName];\n      return newFilter;\n    });\n  }\n\n  const handleSort = (event: React.MouseEvent<HTMLButtonElement>) => {\n    const isMultiSort = event.shiftKey;\n    onSort(column.key, direction === 'ASC' ? 'DESC' : 'ASC', isMultiSort);\n  };\n\n  // collecting header cell refs to handle manual column resize\n  useLayoutEffect(() => {\n    if (headerRef.current) {\n      headerCellRefs.current[column.key] = headerRef.current;\n    }\n  }, [headerRef, column.key]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // TODO: this is a workaround to handle manual column resize;\n  useEffect(() => {\n    const headerCellParent = headerRef.current?.parentElement;\n    if (headerCellParent) {\n      // `lastElement` is an HTML element added by react-data-grid for resizing columns.\n      // We add event listeners to `lastElement` to handle the resize operation.\n      const lastElement = headerCellParent.lastElementChild;\n      if (lastElement) {\n        const handleMouseUp = () => {\n          let newWidth = headerCellParent.clientWidth;\n          onColumnResize?.(column.key, newWidth);\n        };\n\n        lastElement.addEventListener('click', handleMouseUp);\n\n        return () => {\n          lastElement.removeEventListener('click', handleMouseUp);\n        };\n      }\n    }\n    // to handle \"Not all code paths return a value.\" error\n    return;\n  }, [column]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <div\n      ref={headerRef}\n      className={styles.headerCell}\n      // TODO find a better solution to this issue, see: https://github.com/adazzle/react-data-grid/issues/3535\n      // Unblock spacebar event\n      onKeyDown={(event) => {\n        if (event.key === ' ') {\n          event.stopPropagation();\n        }\n      }}\n    >\n      <button className={styles.headerCellLabel} onClick={handleSort}>\n        {showTypeIcons && <Icon name={getFieldTypeIcon(field)} title={field?.type} size=\"sm\" />}\n        {/* Used cached displayName if available, otherwise use the column name (nested tables) */}\n        <div>{field.state?.displayName ?? column.name}</div>\n        {direction && (direction === 'ASC' ? <Icon name=\"arrow-up\" size=\"lg\" /> : <Icon name=\"arrow-down\" size=\"lg\" />)}\n      </button>\n\n      {isColumnFilterable && (\n        <Filter\n          name={column.key}\n          rows={rows}\n          filter={filter}\n          setFilter={setFilter}\n          field={field}\n          crossFilterOrder={crossFilterOrder.current}\n          crossFilterRows={crossFilterRows.current}\n        />\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2, justifyContent: Property.JustifyContent) => ({\n  headerCell: css({\n    display: 'flex',\n    gap: theme.spacing(0.5),\n    justifyContent,\n  }),\n  headerCellLabel: css({\n    border: 'none',\n    padding: 0,\n    background: 'inherit',\n    cursor: 'pointer',\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    fontWeight: theme.typography.fontWeightMedium,\n    display: 'flex',\n    alignItems: 'center',\n    color: theme.colors.text.secondary,\n    gap: theme.spacing(1),\n\n    '&:hover': {\n      textDecoration: 'underline',\n      color: theme.colors.text.link,\n    },\n  }),\n});\n\nexport { HeaderCell };\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { useStyles2 } from '../../../../themes';\nimport { Icon } from '../../../Icon/Icon';\nimport { RowExpanderNGProps } from '../types';\n\nexport function RowExpander({ height, onCellExpand, isExpanded }: RowExpanderNGProps) {\n  const styles = useStyles2(getStyles, height);\n  function handleKeyDown(e: React.KeyboardEvent<HTMLSpanElement>) {\n    if (e.key === ' ' || e.key === 'Enter') {\n      e.preventDefault();\n      onCellExpand();\n    }\n  }\n  return (\n    <div className={styles.expanderCell} onClick={onCellExpand} onKeyDown={handleKeyDown}>\n      <Icon\n        aria-label={isExpanded ? 'Collapse row' : 'Expand row'}\n        name={isExpanded ? 'angle-down' : 'angle-right'}\n        size=\"lg\"\n      />\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2, rowHeight: number) => ({\n  expanderCell: css({\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    height: `${rowHeight}px`,\n    cursor: 'pointer',\n  }),\n});\n","import { Property } from 'csstype';\nimport { Column } from 'react-data-grid';\n\nimport {\n  DataFrame,\n  Field,\n  GrafanaTheme2,\n  KeyValue,\n  TimeRange,\n  FieldConfigSource,\n  ActionModel,\n  InterpolateFunction,\n  FieldType,\n  DataFrameWithValue,\n} from '@grafana/data';\nimport { TableCellOptions, TableCellHeight, TableFieldOptions } from '@grafana/schema';\n\nimport { TableCellInspectorMode } from '../TableCellInspector';\n\nexport const FILTER_FOR_OPERATOR = '=';\nexport const FILTER_OUT_OPERATOR = '!=';\n\nexport type AdHocFilterOperator = typeof FILTER_FOR_OPERATOR | typeof FILTER_OUT_OPERATOR;\nexport type AdHocFilterItem = { key: string; value: string; operator: AdHocFilterOperator };\nexport type TableFilterActionCallback = (item: AdHocFilterItem) => void;\nexport type TableColumnResizeActionCallback = (fieldDisplayName: string, width: number) => void;\nexport type TableSortByActionCallback = (state: TableSortByFieldState[]) => void;\nexport type FooterItem = Array<KeyValue<string>> | string | undefined;\n\nexport type GetActionsFunction = (\n  frame: DataFrame,\n  field: Field,\n  rowIndex: number,\n  replaceVariables?: InterpolateFunction\n) => ActionModel[];\n\nexport type TableFieldOptionsType = Omit<TableFieldOptions, 'cellOptions'> & {\n  cellOptions: TableCellOptions;\n  headerComponent?: React.ComponentType<CustomHeaderRendererProps>;\n};\n\nexport type FilterType = {\n  [key: string]: {\n    filteredSet: Set<string>;\n  };\n};\n\n/* ----------------------------- Table specific types ----------------------------- */\nexport interface TableSummaryRow {\n  [columnName: string]: string | number | undefined;\n}\n\nexport interface TableColumn extends Column<TableRow, TableSummaryRow> {\n  key: string; // Unique identifier used by DataGrid\n  name: string; // Display name in header\n  field: Field; // Grafana field data/config\n  width?: number | string; // Column width\n  minWidth?: number; // Min width constraint\n  cellClass?: string; // CSS styling\n}\n\n// Possible values for table cells based on field types\nexport type TableCellValue =\n  | string // FieldType.string, FieldType.enum\n  | number // FieldType.number\n  | boolean // FieldType.boolean\n  | Date // FieldType.time\n  | DataFrame // For nested data\n  | DataFrame[] // For nested frames\n  | DataFrameWithValue // For sparklines\n  | undefined; // For undefined values\n\nexport interface TableRow {\n  // Required metadata properties\n  __depth: number;\n  __index: number;\n\n  // Nested table properties\n  data?: DataFrame;\n  'Nested frames'?: DataFrame[];\n\n  // Generic typing for column values\n  [columnName: string]: TableCellValue;\n}\n\nexport interface CustomCellRendererProps {\n  field: Field;\n  rowIndex: number;\n  frame: DataFrame;\n  // Would be great to have generic type for this but that would need having a generic DataFrame type where the field\n  // types could be propagated here.\n  value: unknown;\n}\n\nexport interface CustomHeaderRendererProps {\n  field: Field;\n  defaultContent: React.ReactNode;\n}\n\nexport interface TableSortByFieldState {\n  displayName: string;\n  desc?: boolean;\n}\n\nexport interface TableFooterCalc {\n  show: boolean;\n  reducer?: string[]; // Make this optional\n  fields?: string[];\n  enablePagination?: boolean;\n  countRows?: boolean;\n}\n\nexport interface BaseTableProps {\n  ariaLabel?: string;\n  data: DataFrame;\n  width: number;\n  height: number;\n  maxHeight?: number;\n  /** Minimal column width specified in pixels */\n  columnMinWidth?: number;\n  noHeader?: boolean;\n  showTypeIcons?: boolean;\n  resizable?: boolean;\n  initialSortBy?: TableSortByFieldState[];\n  onColumnResize?: TableColumnResizeActionCallback;\n  onSortByChange?: TableSortByActionCallback;\n  onCellFilterAdded?: TableFilterActionCallback;\n  footerOptions?: TableFooterCalc;\n  footerValues?: FooterItem[];\n  enablePagination?: boolean;\n  cellHeight?: TableCellHeight;\n  /** @alpha Used by SparklineCell when provided */\n  timeRange?: TimeRange;\n  enableSharedCrosshair?: boolean;\n  // The index of the field value that the table will initialize scrolled to\n  initialRowIndex?: number;\n  fieldConfig?: FieldConfigSource;\n  getActions?: GetActionsFunction;\n  replaceVariables?: InterpolateFunction;\n  // Used solely for testing as RTL can't correctly render the table otherwise\n  enableVirtualization?: boolean;\n}\n\n/* ---------------------------- Table cell props ---------------------------- */\nexport interface TableNGProps extends BaseTableProps {}\n\nexport interface TableCellNGProps {\n  field: Field;\n  frame: DataFrame;\n  getActions?: GetActionsFunction;\n  height: number;\n  justifyContent: Property.JustifyContent;\n  rowIdx: number;\n  setContextMenuProps: (props: { value: string; top?: number; left?: number; mode?: TableCellInspectorMode }) => void;\n  setIsInspecting: (isInspecting: boolean) => void;\n  shouldTextOverflow: () => boolean;\n  theme: GrafanaTheme2;\n  timeRange: TimeRange;\n  value: TableCellValue;\n  rowBg: Function | undefined;\n  onCellFilterAdded?: TableFilterActionCallback;\n  replaceVariables?: InterpolateFunction;\n}\n\n/* ------------------------- Specialized Cell Props ------------------------- */\nexport interface RowExpanderNGProps {\n  height: number;\n  onCellExpand: () => void;\n  isExpanded?: boolean;\n}\n\nexport interface SparklineCellProps {\n  field: Field;\n  justifyContent: Property.JustifyContent;\n  rowIdx: number;\n  theme: GrafanaTheme2;\n  timeRange: TimeRange;\n  value: TableCellValue;\n  width: number;\n}\n\nexport interface BarGaugeCellProps {\n  field: Field;\n  height: number;\n  rowIdx: number;\n  theme: GrafanaTheme2;\n  value: TableCellValue;\n  width: number;\n  timeRange: TimeRange;\n}\n\nexport interface ImageCellProps {\n  cellOptions: TableCellOptions;\n  field: Field;\n  height: number;\n  justifyContent: Property.JustifyContent;\n  value: TableCellValue;\n  rowIdx: number;\n}\n\nexport interface JSONCellProps {\n  justifyContent: Property.JustifyContent;\n  value: TableCellValue;\n  field: Field;\n  rowIdx: number;\n}\n\nexport interface DataLinksCellProps {\n  field: Field;\n  rowIdx: number;\n}\n\nexport interface GeoCellProps {\n  value: TableCellValue;\n  justifyContent: Property.JustifyContent;\n  height: number;\n}\n\nexport interface ActionCellProps {\n  actions?: ActionModel[];\n}\n\nexport interface CellColors {\n  textColor?: string;\n  bgColor?: string;\n  bgHoverColor?: string;\n}\n\nexport interface AutoCellProps {\n  value: TableCellValue;\n  field: Field;\n  justifyContent: Property.JustifyContent;\n  rowIdx: number;\n  cellOptions: TableCellOptions;\n}\n\n// Comparator for sorting table values\nexport type Comparator = (a: TableCellValue, b: TableCellValue) => number;\n\n// Type for converting a DataFrame into an array of TableRows\nexport type FrameToRowsConverter = (frame: DataFrame) => TableRow[];\n\n// Type for mapping column names to their field types\nexport type ColumnTypes = Record<string, FieldType>;\n\nexport interface ScrollPosition {\n  x: number;\n  y: number;\n}\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { useStyles2 } from '../../../../themes';\nimport { ActionButton } from '../../../Actions/ActionButton';\nimport { ActionCellProps } from '../types';\n\nexport const ActionsCell = ({ actions }: ActionCellProps) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.buttonsGap}>\n      {actions && actions.map((action, i) => <ActionButton key={i} action={action} variant=\"secondary\" />)}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  buttonsGap: css({\n    display: 'flex',\n    gap: 6,\n  }),\n});\n","import { css, cx } from '@emotion/css';\nimport { Property } from 'csstype';\n\nimport { GrafanaTheme2, formattedValueToString } from '@grafana/data';\nimport { TableCellDisplayMode, TableCellOptions } from '@grafana/schema';\n\nimport { useStyles2 } from '../../../../themes';\nimport { clearLinkButtonStyles } from '../../../Button';\nimport { DataLinksContextMenu } from '../../../DataLinks/DataLinksContextMenu';\nimport { AutoCellProps } from '../types';\nimport { getCellLinks } from '../utils';\n\nexport default function AutoCell({ value, field, justifyContent, rowIdx, cellOptions }: AutoCellProps) {\n  const styles = useStyles2(getStyles, justifyContent);\n\n  const displayValue = field.display!(value);\n  const formattedValue = formattedValueToString(displayValue);\n  const hasLinks = Boolean(getCellLinks(field, rowIdx)?.length);\n  const clearButtonStyle = useStyles2(clearLinkButtonStyles);\n\n  return (\n    <div className={styles.cell}>\n      {hasLinks ? (\n        <DataLinksContextMenu links={() => getCellLinks(field, rowIdx) || []}>\n          {(api) => {\n            if (api.openMenu) {\n              return (\n                <button\n                  className={cx(clearButtonStyle, getLinkStyle(styles, cellOptions, api.targetClassName))}\n                  onClick={api.openMenu}\n                >\n                  {formattedValue}\n                </button>\n              );\n            } else {\n              return <div className={getLinkStyle(styles, cellOptions, api.targetClassName)}>{formattedValue}</div>;\n            }\n          }}\n        </DataLinksContextMenu>\n      ) : (\n        formattedValue\n      )}\n    </div>\n  );\n}\n\nconst getLinkStyle = (\n  styles: ReturnType<typeof getStyles>,\n  cellOptions: TableCellOptions,\n  targetClassName: string | undefined\n) => {\n  if (cellOptions.type === TableCellDisplayMode.Auto) {\n    return cx(styles.linkCell, targetClassName);\n  }\n\n  return cx(styles.cellLinkForColoredCell, targetClassName);\n};\n\nconst getStyles = (theme: GrafanaTheme2, justifyContent: Property.JustifyContent | undefined) => ({\n  cell: css({\n    display: 'flex',\n    justifyContent: justifyContent,\n\n    a: {\n      color: 'inherit',\n    },\n  }),\n  cellLinkForColoredCell: css({\n    cursor: 'pointer',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    userSelect: 'text',\n    whiteSpace: 'nowrap',\n    fontWeight: theme.typography.fontWeightMedium,\n    textDecoration: 'underline',\n  }),\n  linkCell: css({\n    cursor: 'pointer',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    userSelect: 'text',\n    whiteSpace: 'nowrap',\n    color: theme.colors.text.link,\n    fontWeight: theme.typography.fontWeightMedium,\n    paddingRight: theme.spacing(1.5),\n    a: {\n      color: theme.colors.text.link,\n    },\n    '&:hover': {\n      textDecoration: 'underline',\n      color: theme.colors.text.link,\n    },\n  }),\n});\n","import { ThresholdsConfig, ThresholdsMode, VizOrientation, getFieldConfigWithMinMax } from '@grafana/data';\nimport { BarGaugeDisplayMode, BarGaugeValueMode, TableCellDisplayMode } from '@grafana/schema';\n\nimport { BarGauge } from '../../../BarGauge/BarGauge';\nimport { DataLinksContextMenu, DataLinksContextMenuApi } from '../../../DataLinks/DataLinksContextMenu';\nimport { BarGaugeCellProps } from '../types';\nimport { extractPixelValue, getCellOptions, getAlignmentFactor, getCellLinks } from '../utils';\n\nconst defaultScale: ThresholdsConfig = {\n  mode: ThresholdsMode.Absolute,\n  steps: [\n    {\n      color: 'blue',\n      value: -Infinity,\n    },\n    {\n      color: 'green',\n      value: 20,\n    },\n  ],\n};\n\nexport const BarGaugeCell = ({ value, field, theme, height, width, rowIdx }: BarGaugeCellProps) => {\n  const displayValue = field.display!(value);\n  const cellOptions = getCellOptions(field);\n  const heightOffset = extractPixelValue(theme.spacing(1));\n\n  let config = getFieldConfigWithMinMax(field, false);\n  if (!config.thresholds) {\n    config = {\n      ...config,\n      thresholds: defaultScale,\n    };\n  }\n\n  // Set default display mode and update if defined\n  // and update the valueMode if defined\n  let barGaugeMode: BarGaugeDisplayMode = BarGaugeDisplayMode.Gradient;\n  let valueDisplayMode: BarGaugeValueMode | undefined = undefined;\n\n  if (cellOptions.type === TableCellDisplayMode.Gauge) {\n    barGaugeMode = cellOptions.mode ?? BarGaugeDisplayMode.Gradient;\n    valueDisplayMode =\n      cellOptions.valueDisplayMode !== undefined ? cellOptions.valueDisplayMode : BarGaugeValueMode.Text;\n  }\n\n  const hasLinks = Boolean(getCellLinks(field, rowIdx)?.length);\n\n  const alignmentFactors = getAlignmentFactor(field, displayValue, rowIdx!);\n\n  const renderComponent = (menuProps: DataLinksContextMenuApi) => {\n    const { openMenu } = menuProps;\n\n    return (\n      <BarGauge\n        width={width}\n        height={height - heightOffset}\n        field={config}\n        display={field.display}\n        text={{ valueSize: 14 }}\n        value={displayValue}\n        orientation={VizOrientation.Horizontal}\n        theme={theme}\n        alignmentFactors={alignmentFactors}\n        onClick={openMenu}\n        itemSpacing={1}\n        lcdCellWidth={8}\n        displayMode={barGaugeMode}\n        valueDisplayMode={valueDisplayMode}\n      />\n    );\n  };\n\n  // @TODO: Actions\n  return (\n    <>\n      {hasLinks ? (\n        <DataLinksContextMenu\n          links={() => getCellLinks(field, rowIdx) || []}\n          style={{ display: 'flex', width: '100%' }}\n        >\n          {(api) => renderComponent(api)}\n        </DataLinksContextMenu>\n      ) : (\n        renderComponent({})\n      )}\n    </>\n  );\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { useStyles2 } from '../../../../themes';\nimport { DataLinksCellProps } from '../types';\nimport { getCellLinks } from '../utils';\n\nexport const DataLinksCell = ({ field, rowIdx }: DataLinksCellProps) => {\n  const styles = useStyles2(getStyles);\n\n  const links = getCellLinks(field, rowIdx!);\n\n  return (\n    <div>\n      {links &&\n        links.map((link, idx) => {\n          return (\n            // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-static-element-interactions\n            <span key={idx} className={styles.linkCell} onClick={link.onClick}>\n              <a href={link.href} target={link.target}>\n                {link.title}\n              </a>\n            </span>\n          );\n        })}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  linkCell: css({\n    cursor: 'pointer',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    userSelect: 'text',\n    whiteSpace: 'nowrap',\n    color: theme.colors.text.link,\n    fontWeight: theme.typography.fontWeightMedium,\n    paddingRight: theme.spacing(1.5),\n    a: {\n      color: theme.colors.text.link,\n    },\n    '&:hover': {\n      textDecoration: 'underline',\n      color: theme.colors.text.link,\n    },\n  }),\n});\n","import { css } from '@emotion/css';\nimport WKT from 'ol/format/WKT';\nimport { Geometry } from 'ol/geom';\n\nimport { useStyles2 } from '../../../../themes';\nimport { GeoCellProps } from '../types';\n\nexport function GeoCell({ value, justifyContent, height }: GeoCellProps) {\n  const styles = useStyles2(getStyles);\n\n  let disp = '';\n\n  if (value instanceof Geometry) {\n    disp = new WKT().writeGeometry(value, {\n      featureProjection: 'EPSG:3857',\n      dataProjection: 'EPSG:4326',\n    });\n  } else if (value != null) {\n    disp = `${value}`;\n  }\n\n  return (\n    <div className={styles.cell} style={{ justifyContent, height }}>\n      <div className={styles.cellText} style={{ fontFamily: 'monospace' }}>\n        {disp}\n      </div>\n    </div>\n  );\n}\n\nconst getStyles = () => ({\n  cell: css({\n    height: '100%',\n    display: 'flex',\n    alignItems: 'center',\n    padding: '0 8px',\n  }),\n  cellText: css({\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  }),\n});\n","import { css } from '@emotion/css';\nimport { Property } from 'csstype';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { TableCellDisplayMode } from '@grafana/schema';\n\nimport { useStyles2 } from '../../../../themes';\nimport { DataLinksContextMenu } from '../../../DataLinks/DataLinksContextMenu';\nimport { ImageCellProps } from '../types';\nimport { getCellLinks } from '../utils';\n\nconst DATALINKS_HEIGHT_OFFSET = 10;\n\nexport const ImageCell = ({ cellOptions, field, height, justifyContent, value, rowIdx }: ImageCellProps) => {\n  const calculatedHeight = height - DATALINKS_HEIGHT_OFFSET;\n  const styles = useStyles2(getStyles, calculatedHeight, justifyContent);\n  const hasLinks = Boolean(getCellLinks(field, rowIdx)?.length);\n\n  const { text } = field.display!(value);\n  const { alt, title } =\n    cellOptions.type === TableCellDisplayMode.Image ? cellOptions : { alt: undefined, title: undefined };\n\n  const img = <img alt={alt} src={text} className={styles.image} title={title} />;\n\n  // TODO: Implement actions\n  return (\n    <div className={styles.imageContainer}>\n      {hasLinks ? (\n        <DataLinksContextMenu links={() => getCellLinks(field, rowIdx) || []}>\n          {(api) => {\n            if (api.openMenu) {\n              return (\n                <div\n                  onClick={api.openMenu}\n                  role=\"button\"\n                  tabIndex={0}\n                  onKeyDown={(e: React.KeyboardEvent) => {\n                    if (e.key === 'Enter' && api.openMenu) {\n                      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/consistent-type-assertions\n                      api.openMenu(e as any);\n                    }\n                  }}\n                >\n                  {img}\n                </div>\n              );\n            } else {\n              return img;\n            }\n          }}\n        </DataLinksContextMenu>\n      ) : (\n        img\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2, height: number, justifyContent: Property.JustifyContent) => ({\n  image: css({\n    height,\n    width: 'auto',\n  }),\n  imageContainer: css({\n    display: 'flex',\n    justifyContent,\n  }),\n});\n","import { css, cx } from '@emotion/css';\nimport { Property } from 'csstype';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { useStyles2 } from '../../../../themes';\nimport { Button, clearLinkButtonStyles } from '../../../Button';\nimport { DataLinksContextMenu } from '../../../DataLinks/DataLinksContextMenu';\nimport { JSONCellProps } from '../types';\nimport { getCellLinks } from '../utils';\n\nexport const JSONCell = ({ value, justifyContent, field, rowIdx }: JSONCellProps) => {\n  const styles = useStyles2(getStyles, justifyContent);\n  const clearButtonStyle = useStyles2(clearLinkButtonStyles);\n\n  let displayValue = value;\n\n  // Handle string values that might be JSON\n  if (typeof value === 'string') {\n    try {\n      const parsed = JSON.parse(value);\n      displayValue = JSON.stringify(parsed, null, ' ');\n    } catch {\n      displayValue = value; // Keep original if not valid JSON\n    }\n  } else {\n    // For non-string values, stringify them\n    try {\n      displayValue = JSON.stringify(value, null, ' ');\n    } catch (error) {\n      // Handle circular references or other stringify errors\n      displayValue = String(value);\n    }\n  }\n\n  const hasLinks = Boolean(getCellLinks(field, rowIdx)?.length);\n\n  // TODO: Implement actions\n  return (\n    <div className={styles.jsonText}>\n      {hasLinks ? (\n        <DataLinksContextMenu links={() => getCellLinks(field, rowIdx) || []}>\n          {(api) => {\n            if (api.openMenu) {\n              return (\n                <Button className={cx(clearButtonStyle)} onClick={api.openMenu}>\n                  {displayValue}\n                </Button>\n              );\n            } else {\n              return <>{displayValue}</>;\n            }\n          }}\n        </DataLinksContextMenu>\n      ) : (\n        displayValue\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2, justifyContent: Property.JustifyContent) => ({\n  jsonText: css({\n    display: 'flex',\n    cursor: 'pointer',\n    fontFamily: 'monospace',\n    justifyContent: justifyContent,\n  }),\n});\n","import { css } from '@emotion/css';\nimport { Property } from 'csstype';\nimport * as React from 'react';\n\nimport {\n  FieldType,\n  FieldConfig,\n  getMinMaxAndDelta,\n  FieldSparkline,\n  isDataFrame,\n  Field,\n  isDataFrameWithValue,\n  GrafanaTheme2,\n} from '@grafana/data';\nimport {\n  BarAlignment,\n  GraphDrawStyle,\n  GraphFieldConfig,\n  GraphGradientMode,\n  LineInterpolation,\n  TableSparklineCellOptions,\n  TableCellDisplayMode,\n  VisibilityMode,\n} from '@grafana/schema';\n\nimport { useStyles2 } from '../../../../themes';\nimport { measureText } from '../../../../utils';\nimport { FormattedValueDisplay } from '../../../FormattedValueDisplay/FormattedValueDisplay';\nimport { Sparkline } from '../../../Sparkline/Sparkline';\nimport { SparklineCellProps } from '../types';\nimport { getAlignmentFactor, getCellOptions } from '../utils';\n\nexport const defaultSparklineCellConfig: TableSparklineCellOptions = {\n  type: TableCellDisplayMode.Sparkline,\n  drawStyle: GraphDrawStyle.Line,\n  lineInterpolation: LineInterpolation.Smooth,\n  lineWidth: 1,\n  fillOpacity: 17,\n  gradientMode: GraphGradientMode.Hue,\n  pointSize: 2,\n  barAlignment: BarAlignment.Center,\n  showPoints: VisibilityMode.Never,\n  hideValue: false,\n};\n\nexport const SparklineCell = (props: SparklineCellProps) => {\n  const { field, value, theme, timeRange, rowIdx, justifyContent, width } = props;\n  const styles = useStyles2(getStyles, justifyContent);\n  const sparkline = getSparkline(value);\n\n  if (!sparkline) {\n    return <>{field.config.noValue || 'no data'}</>;\n  }\n\n  // Get the step from the first two values to null-fill the x-axis based on timerange\n  if (sparkline.x && !sparkline.x.config.interval && sparkline.x.values.length > 1) {\n    sparkline.x.config.interval = sparkline.x.values[1] - sparkline.x.values[0];\n  }\n\n  // Remove non-finite values, e.g: NaN, +/-Infinity\n  sparkline.y.values = sparkline.y.values.map((v) => {\n    if (!Number.isFinite(v)) {\n      return null;\n    } else {\n      return v;\n    }\n  });\n\n  const range = getMinMaxAndDelta(sparkline.y);\n  sparkline.y.config.min = range.min;\n  sparkline.y.config.max = range.max;\n  sparkline.y.state = { range };\n  sparkline.timeRange = timeRange;\n\n  const cellOptions = getTableSparklineCellOptions(field);\n\n  const config: FieldConfig<GraphFieldConfig> = {\n    color: field.config.color,\n    custom: {\n      ...defaultSparklineCellConfig,\n      ...cellOptions,\n    },\n  };\n\n  const hideValue = field.config.custom?.cellOptions?.hideValue;\n  let valueWidth = 0;\n  let valueElement: React.ReactNode = null;\n  if (!hideValue) {\n    const newValue = isDataFrameWithValue(value) ? value.value : null;\n    const displayValue = field.display!(newValue);\n    const alignmentFactor = getAlignmentFactor(field, displayValue, rowIdx!);\n\n    valueWidth =\n      measureText(`${alignmentFactor.prefix ?? ''}${alignmentFactor.text}${alignmentFactor.suffix ?? ''}`, 16).width +\n      theme.spacing.gridSize;\n\n    valueElement = (\n      <FormattedValueDisplay\n        style={{\n          width: `${valueWidth - theme.spacing.gridSize}px`,\n          textAlign: 'right',\n          marginRight: theme.spacing(1),\n        }}\n        className={styles.valueContainer}\n        value={displayValue}\n      />\n    );\n  }\n\n  // @TODO update width, height\n  return (\n    <div className={styles.cellContainer}>\n      {valueElement}\n      <Sparkline width={width - valueWidth} height={25} sparkline={sparkline} config={config} theme={theme} />\n    </div>\n  );\n};\n\nfunction getSparkline(value: unknown): FieldSparkline | undefined {\n  if (Array.isArray(value)) {\n    return {\n      y: {\n        name: 'test',\n        type: FieldType.number,\n        values: value,\n        config: {},\n      },\n    };\n  }\n\n  if (isDataFrame(value)) {\n    const timeField = value.fields.find((x) => x.type === FieldType.time);\n    const numberField = value.fields.find((x) => x.type === FieldType.number);\n\n    if (timeField && numberField) {\n      return { x: timeField, y: numberField };\n    }\n  }\n\n  return;\n}\n\nfunction getTableSparklineCellOptions(field: Field): TableSparklineCellOptions {\n  let options = getCellOptions(field);\n  if (options.type === TableCellDisplayMode.Auto) {\n    options = { ...options, type: TableCellDisplayMode.Sparkline };\n  }\n  if (options.type === TableCellDisplayMode.Sparkline) {\n    return options;\n  }\n  throw new Error(`Expected options type ${TableCellDisplayMode.Sparkline} but got ${options.type}`);\n}\n\nconst getStyles = (theme: GrafanaTheme2, justifyContent: Property.JustifyContent | undefined) => ({\n  cellContainer: css({\n    display: 'flex',\n    width: '100%',\n    alignItems: 'center',\n    justifyContent,\n  }),\n  valueContainer: css({\n    div: { width: 'inherit' },\n  }),\n});\n","import { css } from '@emotion/css';\nimport { WKT } from 'ol/format';\nimport { Geometry } from 'ol/geom';\nimport { ReactNode, useCallback, useLayoutEffect, useMemo, useRef, useState } from 'react';\n\nimport { FieldType, GrafanaTheme2, isDataFrame, isTimeSeriesFrame } from '@grafana/data';\nimport { TableAutoCellOptions, TableCellDisplayMode } from '@grafana/schema';\n\nimport { useStyles2 } from '../../../../themes';\nimport { t } from '../../../../utils/i18n';\nimport { IconButton } from '../../../IconButton/IconButton';\n// import { GeoCell } from '../../Cells/GeoCell';\nimport { TableCellInspectorMode } from '../../TableCellInspector';\nimport {\n  CellColors,\n  CustomCellRendererProps,\n  FILTER_FOR_OPERATOR,\n  FILTER_OUT_OPERATOR,\n  TableCellNGProps,\n} from '../types';\nimport { getCellColors, getDisplayName, getTextAlign } from '../utils';\n\nimport { ActionsCell } from './ActionsCell';\nimport AutoCell from './AutoCell';\nimport { BarGaugeCell } from './BarGaugeCell';\nimport { DataLinksCell } from './DataLinksCell';\nimport { GeoCell } from './GeoCell';\nimport { ImageCell } from './ImageCell';\nimport { JSONCell } from './JSONCell';\nimport { SparklineCell } from './SparklineCell';\n\nexport function TableCellNG(props: TableCellNGProps) {\n  const {\n    field,\n    frame,\n    value,\n    theme,\n    timeRange,\n    height,\n    rowIdx,\n    justifyContent,\n    shouldTextOverflow,\n    setIsInspecting,\n    setContextMenuProps,\n    getActions,\n    rowBg,\n    onCellFilterAdded,\n    replaceVariables,\n  } = props;\n\n  const cellInspect = field.config?.custom?.inspect ?? false;\n  const displayName = getDisplayName(field);\n\n  const { config: fieldConfig } = field;\n  const defaultCellOptions: TableAutoCellOptions = { type: TableCellDisplayMode.Auto };\n  const cellOptions = fieldConfig.custom?.cellOptions ?? defaultCellOptions;\n  const { type: cellType } = cellOptions;\n\n  const showFilters = field.config.filterable && onCellFilterAdded;\n\n  const isRightAligned = getTextAlign(field) === 'flex-end';\n  const displayValue = field.display!(value);\n  let colors: CellColors = { bgColor: '', textColor: '', bgHoverColor: '' };\n  if (rowBg) {\n    colors = rowBg(rowIdx);\n  } else {\n    colors = useMemo(() => getCellColors(theme, cellOptions, displayValue), [theme, cellOptions, displayValue]);\n  }\n  const styles = useStyles2(getStyles, isRightAligned, colors);\n\n  // TODO\n  // TableNG provides either an overridden cell width or 'auto' as the cell width value.\n  // While the overridden value gives the exact cell width, 'auto' does not.\n  // Therefore, we need to determine the actual cell width from the DOM.\n  const divWidthRef = useRef<HTMLDivElement>(null);\n  const [divWidth, setDivWidth] = useState(0);\n  const [isHovered, setIsHovered] = useState(false);\n\n  const actions = getActions ? getActions(frame, field, rowIdx, replaceVariables) : [];\n\n  useLayoutEffect(() => {\n    if (divWidthRef.current && divWidthRef.current.clientWidth !== 0) {\n      setDivWidth(divWidthRef.current.clientWidth);\n    }\n  }, [divWidthRef.current]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Common props for all cells\n  const commonProps = {\n    value,\n    field,\n    rowIdx,\n    justifyContent,\n  };\n\n  // Get the correct cell type\n  let cell: ReactNode = null;\n  switch (cellType) {\n    case TableCellDisplayMode.Sparkline:\n      cell = <SparklineCell {...commonProps} theme={theme} timeRange={timeRange} width={divWidth} />;\n      break;\n    case TableCellDisplayMode.Gauge:\n    case TableCellDisplayMode.BasicGauge:\n    case TableCellDisplayMode.GradientGauge:\n    case TableCellDisplayMode.LcdGauge:\n      cell = <BarGaugeCell {...commonProps} theme={theme} timeRange={timeRange} height={height} width={divWidth} />;\n      break;\n    case TableCellDisplayMode.Image:\n      cell = <ImageCell {...commonProps} cellOptions={cellOptions} height={height} />;\n      break;\n    case TableCellDisplayMode.JSONView:\n      cell = <JSONCell {...commonProps} />;\n      break;\n    case TableCellDisplayMode.DataLinks:\n      cell = <DataLinksCell field={field} rowIdx={rowIdx} />;\n      break;\n    case TableCellDisplayMode.Actions:\n      cell = <ActionsCell actions={actions} />;\n      break;\n    case TableCellDisplayMode.Custom:\n      const CustomCellComponent: React.ComponentType<CustomCellRendererProps> = cellOptions.cellComponent;\n      cell = <CustomCellComponent field={field} value={value} rowIndex={rowIdx} frame={frame} />;\n      break;\n    case TableCellDisplayMode.Auto:\n    default:\n      // Handle auto cell type detection\n      if (field.type === FieldType.geo) {\n        cell = <GeoCell {...commonProps} height={height} />;\n      } else if (field.type === FieldType.frame) {\n        const firstValue = field.values[0];\n        if (isDataFrame(firstValue) && isTimeSeriesFrame(firstValue)) {\n          cell = <SparklineCell {...commonProps} theme={theme} timeRange={timeRange} width={divWidth} />;\n        } else {\n          cell = <JSONCell {...commonProps} />;\n        }\n      } else if (field.type === FieldType.other) {\n        cell = <JSONCell {...commonProps} />;\n      } else {\n        cell = <AutoCell {...commonProps} cellOptions={cellOptions} />;\n      }\n      break;\n  }\n\n  const handleMouseEnter = () => {\n    setIsHovered(true);\n    if (shouldTextOverflow()) {\n      // TODO: The table cell styles in TableNG do not update dynamically even if we change the state\n      const div = divWidthRef.current;\n      const tableCellDiv = div?.parentElement;\n      tableCellDiv?.style.setProperty('z-index', String(theme.zIndex.tooltip));\n      tableCellDiv?.style.setProperty('white-space', 'pre-line');\n      tableCellDiv?.style.setProperty('min-height', `100%`);\n      tableCellDiv?.style.setProperty('height', `fit-content`);\n      tableCellDiv?.style.setProperty('background', colors.bgHoverColor || 'none');\n      tableCellDiv?.style.setProperty('min-width', 'min-content');\n    }\n  };\n\n  const handleMouseLeave = () => {\n    setIsHovered(false);\n    if (shouldTextOverflow()) {\n      // TODO: The table cell styles in TableNG do not update dynamically even if we change the state\n      const div = divWidthRef.current;\n      const tableCellDiv = div?.parentElement;\n      tableCellDiv?.style.removeProperty('z-index');\n      tableCellDiv?.style.removeProperty('white-space');\n      tableCellDiv?.style.removeProperty('min-height');\n      tableCellDiv?.style.removeProperty('height');\n      tableCellDiv?.style.removeProperty('background');\n      tableCellDiv?.style.removeProperty('min-width');\n    }\n  };\n\n  const onFilterFor = useCallback(() => {\n    if (onCellFilterAdded) {\n      onCellFilterAdded({\n        key: displayName,\n        operator: FILTER_FOR_OPERATOR,\n        value: String(value ?? ''),\n      });\n    }\n  }, [displayName, onCellFilterAdded, value]);\n\n  const onFilterOut = useCallback(() => {\n    if (onCellFilterAdded) {\n      onCellFilterAdded({\n        key: displayName,\n        operator: FILTER_OUT_OPERATOR,\n        value: String(value ?? ''),\n      });\n    }\n  }, [displayName, onCellFilterAdded, value]);\n\n  return (\n    <div ref={divWidthRef} onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave} className={styles.cell}>\n      {cell}\n      {isHovered && (cellInspect || showFilters) && (\n        <div className={styles.cellActions}>\n          {cellInspect && (\n            <IconButton\n              name=\"eye\"\n              tooltip={t('grafana-ui.table.cell-inspect-tooltip', 'Inspect value')}\n              onClick={() => {\n                let inspectValue = value;\n                let mode = TableCellInspectorMode.text;\n\n                if (field.type === FieldType.geo && value instanceof Geometry) {\n                  inspectValue = new WKT().writeGeometry(value, {\n                    featureProjection: 'EPSG:3857',\n                    dataProjection: 'EPSG:4326',\n                  });\n                  mode = TableCellInspectorMode.code;\n                } else if (cellType === TableCellDisplayMode.JSONView) {\n                  mode = TableCellInspectorMode.code;\n                }\n\n                setContextMenuProps({\n                  value: String(inspectValue ?? ''),\n                  mode,\n                });\n                setIsInspecting(true);\n              }}\n            />\n          )}\n          {showFilters && (\n            <>\n              <IconButton\n                name={'search-plus'}\n                onClick={onFilterFor}\n                tooltip={t('grafana-ui.table.cell-filter-on', 'Filter for value')}\n              />\n              <IconButton\n                name={'search-minus'}\n                onClick={onFilterOut}\n                tooltip={t('grafana-ui.table.cell-filter-out', 'Filter out value')}\n              />\n            </>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2, isRightAligned: boolean, color: CellColors) => ({\n  cell: css({\n    height: '100%',\n    alignContent: 'center',\n    paddingInline: '8px',\n    // TODO: follow-up on this: change styles on hover on table row level\n    background: color.bgColor || 'none',\n    color: color.textColor,\n    '&:hover': { background: color.bgHoverColor },\n  }),\n  cellActions: css({\n    display: 'flex',\n    position: 'absolute',\n    top: '1px',\n    left: isRightAligned ? 0 : undefined,\n    right: isRightAligned ? undefined : 0,\n    margin: 'auto',\n    height: '100%',\n    background: theme.colors.background.secondary,\n    color: theme.colors.text.primary,\n    padding: '4px 0px 4px 4px',\n  }),\n});\n","import 'react-data-grid/lib/styles.css';\nimport { css } from '@emotion/css';\nimport { useMemo, useState, useLayoutEffect, useCallback, useRef, useEffect } from 'react';\nimport DataGrid, { RenderCellProps, RenderRowProps, Row, SortColumn, DataGridHandle } from 'react-data-grid';\nimport { useMeasure } from 'react-use';\n\nimport {\n  DataFrame,\n  DataHoverClearEvent,\n  DataHoverEvent,\n  Field,\n  fieldReducers,\n  FieldType,\n  formattedValueToString,\n  getDefaultTimeRange,\n  GrafanaTheme2,\n  ReducerID,\n} from '@grafana/data';\nimport { TableCellDisplayMode } from '@grafana/schema';\n\nimport { useStyles2, useTheme2 } from '../../../themes';\nimport { t, Trans } from '../../../utils/i18n';\nimport { ContextMenu } from '../../ContextMenu/ContextMenu';\nimport { MenuItem } from '../../Menu/MenuItem';\nimport { Pagination } from '../../Pagination/Pagination';\nimport { PanelContext, usePanelContext } from '../../PanelChrome';\nimport { TableCellInspector, TableCellInspectorMode } from '../TableCellInspector';\n\nimport { HeaderCell } from './Cells/HeaderCell';\nimport { RowExpander } from './Cells/RowExpander';\nimport { TableCellNG } from './Cells/TableCellNG';\nimport { COLUMN, TABLE } from './constants';\nimport {\n  TableNGProps,\n  FilterType,\n  TableRow,\n  TableSummaryRow,\n  ColumnTypes,\n  TableColumnResizeActionCallback,\n  TableColumn,\n  TableFieldOptionsType,\n  ScrollPosition,\n  CellColors,\n} from './types';\nimport {\n  frameToRecords,\n  getCellColors,\n  getCellHeightCalculator,\n  getComparator,\n  getDefaultRowHeight,\n  getDisplayName,\n  getFooterItemNG,\n  getFooterStyles,\n  getIsNestedTable,\n  getRowHeight,\n  getTextAlign,\n  handleSort,\n  MapFrameToGridOptions,\n  processNestedTableRows,\n  shouldTextOverflow,\n} from './utils';\n\nexport function TableNG(props: TableNGProps) {\n  const {\n    cellHeight,\n    enablePagination,\n    enableVirtualization = true,\n    fieldConfig,\n    footerOptions,\n    height,\n    initialSortBy,\n    noHeader,\n    onCellFilterAdded,\n    onColumnResize,\n    onSortByChange,\n    width,\n    data,\n    enableSharedCrosshair,\n    showTypeIcons,\n    replaceVariables,\n  } = props;\n\n  const initialSortColumns = useMemo<SortColumn[]>(() => {\n    const initialSort = initialSortBy?.map(({ displayName, desc }) => {\n      const matchingField = data.fields.find(({ state }) => state?.displayName === displayName);\n      const columnKey = matchingField?.name || displayName;\n\n      return {\n        columnKey,\n        direction: desc ? ('DESC' as const) : ('ASC' as const),\n      };\n    });\n    return initialSort ?? [];\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  /* ------------------------------- Local state ------------------------------ */\n  const [revId, setRevId] = useState(0);\n  const [contextMenuProps, setContextMenuProps] = useState<{\n    rowIdx?: number;\n    value: string;\n    mode?: TableCellInspectorMode.code | TableCellInspectorMode.text;\n    top?: number;\n    left?: number;\n  } | null>(null);\n  const [isInspecting, setIsInspecting] = useState(false);\n  const [isContextMenuOpen, setIsContextMenuOpen] = useState(false);\n  const [filter, setFilter] = useState<FilterType>({});\n  const [page, setPage] = useState(0);\n  // This state will trigger re-render for recalculating row heights\n  const [, setResizeTrigger] = useState(0);\n  const [, setReadyForRowHeightCalc] = useState(false);\n  const [sortColumns, setSortColumns] = useState<readonly SortColumn[]>(initialSortColumns);\n  const [expandedRows, setExpandedRows] = useState<number[]>([]);\n  const [isNestedTable, setIsNestedTable] = useState(false);\n  const scrollPositionRef = useRef<ScrollPosition>({ x: 0, y: 0 });\n  const [hasScroll, setHasScroll] = useState(false);\n\n  /* ------------------------------- Local refs ------------------------------- */\n  const crossFilterOrder = useRef<string[]>([]);\n  const crossFilterRows = useRef<Record<string, TableRow[]>>({});\n  const headerCellRefs = useRef<Record<string, HTMLDivElement>>({});\n  // TODO: This ref persists sortColumns between renders. setSortColumns is still used to trigger re-render\n  const sortColumnsRef = useRef<SortColumn[]>(initialSortColumns);\n  const prevProps = useRef(props);\n  const calcsRef = useRef<string[]>([]);\n  const [paginationWrapperRef, { height: paginationHeight }] = useMeasure<HTMLDivElement>();\n\n  const theme = useTheme2();\n  const panelContext = usePanelContext();\n\n  const isFooterVisible = Boolean(footerOptions?.show && footerOptions.reducer?.length);\n  const isCountRowsSet = Boolean(\n    footerOptions?.countRows &&\n      footerOptions.reducer &&\n      footerOptions.reducer.length &&\n      footerOptions.reducer[0] === ReducerID.count\n  );\n  const tableRef = useRef<DataGridHandle | null>(null);\n\n  /* --------------------------------- Effects -------------------------------- */\n  useEffect(() => {\n    // TODO: there is a use case when adding a new column to the table doesn't update the table\n    if (\n      prevProps.current.data.fields.length !== props.data.fields.length ||\n      prevProps.current.fieldConfig?.overrides !== fieldConfig?.overrides ||\n      prevProps.current.fieldConfig?.defaults !== fieldConfig?.defaults\n    ) {\n      setRevId(revId + 1);\n    }\n    prevProps.current = props;\n  }, [props, revId, fieldConfig?.overrides, fieldConfig?.defaults]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useLayoutEffect(() => {\n    if (!isContextMenuOpen) {\n      return;\n    }\n\n    function onClick(event: MouseEvent) {\n      setIsContextMenuOpen(false);\n    }\n\n    addEventListener('click', onClick);\n\n    return () => {\n      removeEventListener('click', onClick);\n    };\n  }, [isContextMenuOpen]);\n\n  useEffect(() => {\n    const hasNestedFrames = getIsNestedTable(props.data);\n    setIsNestedTable(hasNestedFrames);\n  }, [props.data]);\n\n  useEffect(() => {\n    const el = tableRef.current;\n    if (el) {\n      const gridElement = el?.element;\n      if (gridElement) {\n        setHasScroll(\n          gridElement.scrollHeight > gridElement.clientHeight || gridElement.scrollWidth > gridElement.clientWidth\n        );\n      }\n    }\n  }, []);\n\n  // TODO: this is a hack to force the column width to update when the fieldConfig changes\n  const columnWidth = useMemo(() => {\n    setRevId(revId + 1);\n    return fieldConfig?.defaults?.custom?.width || 'auto';\n  }, [fieldConfig]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const defaultRowHeight = getDefaultRowHeight(theme, cellHeight);\n  const defaultLineHeight = theme.typography.body.lineHeight * theme.typography.fontSize;\n  const panelPaddingHeight = theme.components.panel.padding * theme.spacing.gridSize * 2;\n\n  /* ------------------------------ Rows & Columns ----------------------------- */\n  const rows = useMemo(() => frameToRecords(props.data), [frameToRecords, props.data]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Create a map of column key to column type\n  const columnTypes = useMemo(\n    () => props.data.fields.reduce<ColumnTypes>((acc, field) => ({ ...acc, [getDisplayName(field)]: field.type }), {}),\n    [props.data.fields]\n  );\n\n  // Create a map of column key to text wrap\n  const textWraps = useMemo(\n    () =>\n      props.data.fields.reduce<{ [key: string]: boolean }>(\n        (acc, field) => ({\n          ...acc,\n          [getDisplayName(field)]: field.config?.custom?.cellOptions?.wrapText ?? false,\n        }),\n        {}\n      ),\n    [props.data.fields]\n  );\n\n  const textWrap = useMemo(() => Object.values(textWraps).some(Boolean), [textWraps]);\n  const styles = useStyles2(getStyles);\n\n  // Create a function to get column widths for text wrapping calculations\n  const getColumnWidths = useCallback(() => {\n    const widths: Record<string, number> = {};\n\n    // Set default widths from field config if they exist\n    props.data.fields.forEach((field) => {\n      const displayName = getDisplayName(field);\n      const configWidth = field.config?.custom?.width;\n      const totalWidth = typeof configWidth === 'number' ? configWidth : COLUMN.DEFAULT_WIDTH;\n      // subtract out padding and 1px right border\n      const contentWidth = totalWidth - 2 * TABLE.CELL_PADDING - 1;\n      widths[displayName] = contentWidth;\n    });\n\n    // Measure actual widths if available\n    Object.keys(headerCellRefs.current).forEach((key) => {\n      const headerCell = headerCellRefs.current[key];\n\n      if (headerCell.offsetWidth > 0) {\n        widths[key] = headerCell.offsetWidth;\n      }\n    });\n\n    return widths;\n  }, [props.data.fields]);\n\n  const headersLength = useMemo(() => {\n    return props.data.fields.length;\n  }, [props.data.fields]);\n\n  const fieldDisplayType = useMemo(() => {\n    return props.data.fields.reduce<Record<string, TableCellDisplayMode>>((acc, field) => {\n      if (field.config?.custom?.cellOptions?.type) {\n        acc[getDisplayName(field)] = field.config.custom.cellOptions.type;\n      }\n      return acc;\n    }, {});\n  }, [props.data.fields]);\n\n  // Clean up fieldsData to simplify\n  const fieldsData = useMemo(\n    () => ({\n      headersLength,\n      textWraps,\n      columnTypes,\n      fieldDisplayType,\n      columnWidths: getColumnWidths(),\n    }),\n    [textWraps, columnTypes, getColumnWidths, headersLength, fieldDisplayType]\n  );\n\n  // Filter rows\n  const filteredRows = useMemo(() => {\n    const filterValues = Object.entries(filter);\n    if (filterValues.length === 0) {\n      // reset cross filter order\n      crossFilterOrder.current = [];\n      return rows;\n    }\n\n    // Helper function to get displayed value\n    const getDisplayedValue = (row: TableRow, key: string) => {\n      const field = props.data.fields.find((field) => getDisplayName(field) === key);\n      if (!field || !field.display) {\n        return '';\n      }\n      const displayedValue = formattedValueToString(field.display(row[key]));\n      return displayedValue;\n    };\n\n    // Update crossFilterOrder\n    const filterKeys = new Set(filterValues.map(([key]) => key));\n    filterKeys.forEach((key) => {\n      if (!crossFilterOrder.current.includes(key)) {\n        // Each time a filter is added or removed, it is always a single filter.\n        // When adding a new filter, it is always appended to the end, maintaining the order.\n        crossFilterOrder.current.push(key);\n      }\n    });\n    // Remove keys from crossFilterOrder that are no longer present in the current filter values\n    crossFilterOrder.current = crossFilterOrder.current.filter((key) => filterKeys.has(key));\n\n    // reset crossFilterRows\n    crossFilterRows.current = {};\n\n    // For nested tables, only filter parent rows and keep their children\n    if (isNestedTable) {\n      return processNestedTableRows(rows, (parents) =>\n        parents.filter((row) => {\n          for (const [key, value] of filterValues) {\n            const displayedValue = getDisplayedValue(row, key);\n            if (!value.filteredSet.has(displayedValue)) {\n              return false;\n            }\n            // collect rows for crossFilter\n            if (!crossFilterRows.current[key]) {\n              crossFilterRows.current[key] = [row];\n            } else {\n              crossFilterRows.current[key].push(row);\n            }\n          }\n          return true;\n        })\n      );\n    }\n\n    // Regular filtering for non-nested tables\n    return rows.filter((row) => {\n      for (const [key, value] of filterValues) {\n        const displayedValue = getDisplayedValue(row, key);\n        if (!value.filteredSet.has(displayedValue)) {\n          return false;\n        }\n        // collect rows for crossFilter\n        if (!crossFilterRows.current[key]) {\n          crossFilterRows.current[key] = [row];\n        } else {\n          crossFilterRows.current[key].push(row);\n        }\n      }\n      return true;\n    });\n  }, [rows, filter, isNestedTable, props.data.fields]);\n\n  // Sort rows\n  const sortedRows = useMemo(() => {\n    if (sortColumns.length === 0) {\n      return filteredRows;\n    }\n\n    // Common sort comparator function\n    const compareRows = (a: TableRow, b: TableRow): number => {\n      let result = 0;\n      for (let i = 0; i < sortColumns.length; i++) {\n        const { columnKey, direction } = sortColumns[i];\n        const compare = getComparator(columnTypes[columnKey]);\n        const sortDir = direction === 'ASC' ? 1 : -1;\n\n        result = sortDir * compare(a[columnKey], b[columnKey]);\n        if (result !== 0) {\n          break;\n        }\n      }\n      return result;\n    };\n\n    // Handle nested tables\n    if (isNestedTable) {\n      return processNestedTableRows(filteredRows, (parents) => [...parents].sort(compareRows));\n    }\n\n    // Regular sort for tables without nesting\n    return filteredRows.slice().sort((a, b) => compareRows(a, b));\n  }, [filteredRows, sortColumns, columnTypes, isNestedTable]);\n\n  // Paginated rows\n  // TODO consolidate calculations into pagination wrapper component and only use when needed\n  const numRows = sortedRows.length;\n  // calculate number of rowsPerPage based on height stack\n  let headerCellHeight = TABLE.MAX_CELL_HEIGHT;\n  if (noHeader) {\n    headerCellHeight = 0;\n  } else if (!noHeader && Object.keys(headerCellRefs.current).length > 0) {\n    headerCellHeight = headerCellRefs.current[Object.keys(headerCellRefs.current)[0]].getBoundingClientRect().height;\n  }\n  let rowsPerPage = Math.floor(\n    (height - headerCellHeight - TABLE.SCROLL_BAR_WIDTH - paginationHeight - panelPaddingHeight) / defaultRowHeight\n  );\n  // if footer calcs are on, remove one row per page\n  if (isFooterVisible) {\n    rowsPerPage -= 1;\n  }\n  if (rowsPerPage < 1) {\n    // avoid 0 or negative rowsPerPage\n    rowsPerPage = 1;\n  }\n  const numberOfPages = Math.ceil(numRows / rowsPerPage);\n  if (page > numberOfPages) {\n    // resets pagination to end\n    setPage(numberOfPages - 1);\n  }\n  // calculate row range for pagination summary display\n  const itemsRangeStart = page * rowsPerPage + 1;\n  let displayedEnd = itemsRangeStart + rowsPerPage - 1;\n  if (displayedEnd > numRows) {\n    displayedEnd = numRows;\n  }\n  const smallPagination = width < TABLE.PAGINATION_LIMIT;\n\n  const paginatedRows = useMemo(() => {\n    const pageOffset = page * rowsPerPage;\n    return sortedRows.slice(pageOffset, pageOffset + rowsPerPage);\n  }, [rows, sortedRows, page, rowsPerPage]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useMemo(() => {\n    calcsRef.current = props.data.fields.map((field, index) => {\n      if (field.state?.calcs) {\n        delete field.state?.calcs;\n      }\n      if (isCountRowsSet) {\n        return index === 0 ? `${sortedRows.length}` : '';\n      }\n      if (index === 0) {\n        const footerCalcReducer = footerOptions?.reducer?.[0];\n        return footerCalcReducer ? fieldReducers.get(footerCalcReducer).name : '';\n      }\n      return getFooterItemNG(sortedRows, field, footerOptions);\n    });\n  }, [sortedRows, props.data.fields, footerOptions, isCountRowsSet]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const onCellExpand = (rowIdx: number) => {\n    if (!expandedRows.includes(rowIdx)) {\n      setExpandedRows([...expandedRows, rowIdx]);\n    } else {\n      const currentExpandedRows = expandedRows;\n      const indexToRemove = currentExpandedRows.indexOf(rowIdx);\n      if (indexToRemove > -1) {\n        currentExpandedRows.splice(indexToRemove, 1);\n        setExpandedRows(currentExpandedRows);\n      }\n    }\n    setResizeTrigger((prev) => prev + 1);\n  };\n\n  const { ctx, avgCharWidth } = useMemo(() => {\n    const font = `${theme.typography.fontSize}px ${theme.typography.fontFamily}`;\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d')!;\n    // set in grafana/data in createTypography.ts\n    const letterSpacing = 0.15;\n\n    ctx.letterSpacing = `${letterSpacing}px`;\n    ctx.font = font;\n    let txt =\n      \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s\";\n    const txtWidth = ctx.measureText(txt).width;\n    const avgCharWidth = txtWidth / txt.length + letterSpacing;\n\n    return {\n      ctx,\n      font,\n      avgCharWidth,\n    };\n  }, [theme.typography.fontSize, theme.typography.fontFamily]);\n\n  const columns = useMemo(\n    () =>\n      mapFrameToDataGrid({\n        frame: props.data,\n        calcsRef,\n        options: {\n          columnTypes,\n          textWraps,\n          columnWidth,\n          crossFilterOrder,\n          crossFilterRows,\n          defaultLineHeight,\n          defaultRowHeight,\n          expandedRows,\n          filter,\n          headerCellRefs,\n          isCountRowsSet,\n          onCellFilterAdded,\n          ctx,\n          onSortByChange,\n          rows,\n          setContextMenuProps,\n          setFilter,\n          setIsInspecting,\n          setSortColumns,\n          sortColumnsRef,\n          styles,\n          theme,\n          showTypeIcons,\n          replaceVariables,\n          ...props,\n        },\n        handlers: {\n          onCellExpand,\n          onColumnResize: onColumnResize!,\n        },\n        // Adjust table width to account for the scroll bar width\n        availableWidth: width - (hasScroll ? TABLE.SCROLL_BAR_WIDTH + TABLE.SCROLL_BAR_MARGIN : 0),\n      }),\n    [props.data, calcsRef, filter, expandedRows, expandedRows.length, footerOptions, width, hasScroll, sortedRows] // eslint-disable-line react-hooks/exhaustive-deps\n  );\n\n  // This effect needed to set header cells refs before row height calculation\n  useLayoutEffect(() => {\n    setReadyForRowHeightCalc(Object.keys(headerCellRefs.current).length > 0);\n  }, [columns]);\n\n  const renderMenuItems = () => {\n    return (\n      <>\n        <MenuItem\n          label={t('grafana-ui.table.inspect-menu-label', 'Inspect value')}\n          onClick={() => {\n            setIsInspecting(true);\n          }}\n          className={styles.menuItem}\n        />\n      </>\n    );\n  };\n\n  const cellHeightCalc = useMemo(() => {\n    return getCellHeightCalculator(ctx, defaultLineHeight, defaultRowHeight, TABLE.CELL_PADDING);\n  }, [ctx, defaultLineHeight, defaultRowHeight]);\n\n  const calculateRowHeight = useCallback(\n    (row: TableRow) => {\n      // Logic for sub-tables\n      if (Number(row.__depth) === 1 && !expandedRows.includes(Number(row.__index))) {\n        return 0;\n      } else if (Number(row.__depth) === 1 && expandedRows.includes(Number(row.__index))) {\n        const headerCount = row?.data?.meta?.custom?.noHeader ? 0 : 1;\n        return defaultRowHeight * (row.data?.length ?? 0 + headerCount); // TODO this probably isn't very robust\n      }\n      return getRowHeight(row, cellHeightCalc, avgCharWidth, defaultRowHeight, fieldsData);\n    },\n    [expandedRows, avgCharWidth, defaultRowHeight, fieldsData, cellHeightCalc]\n  );\n\n  const handleScroll = (event: React.UIEvent<HTMLDivElement>) => {\n    const target = event.currentTarget;\n    scrollPositionRef.current = {\n      x: target.scrollLeft,\n      y: target.scrollTop,\n    };\n  };\n\n  // Reset sortColumns when initialSortBy changes\n  useEffect(() => {\n    if (initialSortColumns.length > 0) {\n      setSortColumns(initialSortColumns);\n    }\n  }, [initialSortColumns]);\n\n  // Restore scroll position after re-renders\n  useEffect(() => {\n    if (tableRef.current?.element) {\n      tableRef.current.element.scrollLeft = scrollPositionRef.current.x;\n      tableRef.current.element.scrollTop = scrollPositionRef.current.y;\n    }\n  }, [revId]);\n\n  return (\n    <>\n      <DataGrid<TableRow, TableSummaryRow>\n        ref={tableRef}\n        className={styles.dataGrid}\n        // Default to true, overridden to false for testing\n        enableVirtualization={enableVirtualization}\n        key={`DataGrid${revId}`}\n        rows={enablePagination ? paginatedRows : sortedRows}\n        columns={columns}\n        headerRowHeight={noHeader ? 0 : undefined}\n        defaultColumnOptions={{\n          sortable: true,\n          resizable: true,\n        }}\n        rowHeight={textWrap || isNestedTable ? calculateRowHeight : defaultRowHeight}\n        // TODO: This doesn't follow current table behavior\n        style={{ width, height: height - (enablePagination ? paginationHeight : 0) }}\n        renderers={{\n          renderRow: (key, props) =>\n            myRowRenderer(key, props, expandedRows, panelContext, data, enableSharedCrosshair ?? false),\n        }}\n        onScroll={handleScroll}\n        onCellContextMenu={({ row, column }, event) => {\n          event.preventGridDefault();\n          // Do not show the default context menu\n          event.preventDefault();\n\n          const cellValue = row[column.key];\n          setContextMenuProps({\n            // rowIdx: rows.indexOf(row),\n            value: String(cellValue ?? ''),\n            top: event.clientY,\n            left: event.clientX,\n          });\n          setIsContextMenuOpen(true);\n        }}\n        // sorting\n        sortColumns={sortColumns}\n        // footer\n        // TODO figure out exactly how this works - some array needs to be here for it to render regardless of renderSummaryCell()\n        bottomSummaryRows={isFooterVisible ? [{}] : undefined}\n        onColumnResize={() => {\n          // NOTE: This method is called continuously during the column resize drag operation,\n          // providing the current column width. There is no separate event for the end of the drag operation.\n          if (textWrap) {\n            // This is needed only when textWrap is enabled\n            // TODO: this is a hack to force rowHeight re-calculation\n            setResizeTrigger((prev) => prev + 1);\n          }\n        }}\n      />\n\n      {enablePagination && (\n        <div className={styles.paginationContainer} ref={paginationWrapperRef}>\n          <Pagination\n            className=\"table-ng-pagination\"\n            currentPage={page + 1}\n            numberOfPages={numberOfPages}\n            showSmallVersion={smallPagination}\n            onNavigate={(toPage) => {\n              setPage(toPage - 1);\n            }}\n          />\n          {!smallPagination && (\n            <div className={styles.paginationSummary}>\n              <Trans i18nKey=\"grafana-ui.table.pagination-summary\">\n                {{ itemsRangeStart }} - {{ displayedEnd }} of {{ numRows }} rows\n              </Trans>\n            </div>\n          )}\n        </div>\n      )}\n\n      {isContextMenuOpen && (\n        <ContextMenu\n          x={contextMenuProps?.left || 0}\n          y={contextMenuProps?.top || 0}\n          renderMenuItems={renderMenuItems}\n          focusOnOpen={false}\n        />\n      )}\n\n      {isInspecting && (\n        <TableCellInspector\n          mode={contextMenuProps?.mode ?? TableCellInspectorMode.text}\n          value={contextMenuProps?.value}\n          onDismiss={() => {\n            setIsInspecting(false);\n            setContextMenuProps(null);\n          }}\n        />\n      )}\n    </>\n  );\n}\n\nexport function mapFrameToDataGrid({\n  frame,\n  calcsRef,\n  options,\n  handlers,\n  availableWidth,\n}: {\n  frame: DataFrame;\n  calcsRef: React.MutableRefObject<string[]>;\n  options: MapFrameToGridOptions;\n  handlers: { onCellExpand: (rowIdx: number) => void; onColumnResize: TableColumnResizeActionCallback };\n  availableWidth: number;\n}): TableColumn[] {\n  const {\n    columnTypes,\n    textWraps,\n    crossFilterOrder,\n    crossFilterRows,\n    defaultLineHeight,\n    defaultRowHeight,\n    expandedRows,\n    filter,\n    headerCellRefs,\n    isCountRowsSet,\n    onCellFilterAdded,\n    ctx,\n    onSortByChange,\n    rows,\n    setContextMenuProps,\n    setFilter,\n    setIsInspecting,\n    setSortColumns,\n    sortColumnsRef,\n    styles,\n    theme,\n    timeRange,\n    getActions,\n    showTypeIcons,\n    replaceVariables,\n  } = options;\n  const { onCellExpand, onColumnResize } = handlers;\n\n  const columns: TableColumn[] = [];\n  const hasNestedFrames = getIsNestedTable(frame);\n\n  // If nested frames, add expansion control column\n  if (hasNestedFrames) {\n    const expanderField: Field = {\n      name: '',\n      type: FieldType.other,\n      config: {},\n      values: [],\n    };\n    columns.push({\n      key: 'expanded',\n      name: '',\n      field: expanderField,\n      cellClass: styles.cell,\n      colSpan(args) {\n        return args.type === 'ROW' && Number(args.row.__depth) === 1 ? frame.fields.length : 1;\n      },\n      renderCell: ({ row }) => {\n        // TODO add TableRow type extension to include row depth and optional data\n        if (Number(row.__depth) === 0) {\n          const rowIdx = Number(row.__index);\n          return (\n            <RowExpander\n              height={defaultRowHeight}\n              onCellExpand={() => onCellExpand(rowIdx)}\n              isExpanded={expandedRows.includes(rowIdx)}\n            />\n          );\n        }\n        // If it's a child, render entire DataGrid at first column position\n        let expandedColumns: TableColumn[] = [];\n        let expandedRecords: TableRow[] = [];\n\n        // Type guard to check if data exists as it's optional\n        if (row.data) {\n          expandedColumns = mapFrameToDataGrid({\n            frame: row.data,\n            calcsRef,\n            options: { ...options },\n            handlers: { onCellExpand, onColumnResize },\n            availableWidth: availableWidth - COLUMN.EXPANDER_WIDTH,\n          });\n          expandedRecords = frameToRecords(row.data);\n        }\n\n        // TODO add renderHeaderCell HeaderCell's here and handle all features\n        return (\n          <DataGrid<TableRow, TableSummaryRow>\n            rows={expandedRecords}\n            columns={expandedColumns}\n            rowHeight={defaultRowHeight}\n            style={{ height: '100%', overflow: 'visible', marginLeft: COLUMN.EXPANDER_WIDTH }}\n            headerRowHeight={row.data?.meta?.custom?.noHeader ? 0 : undefined}\n          />\n        );\n      },\n      width: COLUMN.EXPANDER_WIDTH,\n      minWidth: COLUMN.EXPANDER_WIDTH,\n    });\n\n    availableWidth -= COLUMN.EXPANDER_WIDTH;\n  }\n\n  // Row background color function\n  let rowBg: Function | undefined = undefined;\n  for (const field of frame.fields) {\n    const fieldOptions = field.config.custom;\n    const cellOptionsExist = fieldOptions !== undefined && fieldOptions.cellOptions !== undefined;\n\n    if (\n      cellOptionsExist &&\n      fieldOptions.cellOptions.type === TableCellDisplayMode.ColorBackground &&\n      fieldOptions.cellOptions.applyToRow\n    ) {\n      rowBg = (rowIndex: number): CellColors => {\n        const display = field.display!(field.values[rowIndex]);\n        const colors = getCellColors(theme, fieldOptions.cellOptions, display);\n        return colors;\n      };\n    }\n  }\n\n  let fieldCountWithoutWidth = 0;\n  frame.fields.map((field, fieldIndex) => {\n    if (field.type === FieldType.nestedFrames || field.config.custom?.hidden) {\n      // Don't render nestedFrames type field\n      return;\n    }\n    const fieldTableOptions: TableFieldOptionsType = field.config.custom || {};\n    const key = getDisplayName(field);\n    const justifyColumnContent = getTextAlign(field);\n    const footerStyles = getFooterStyles(justifyColumnContent);\n\n    // current/old table width logic calculations\n    if (fieldTableOptions.width) {\n      availableWidth -= fieldTableOptions.width;\n    } else {\n      fieldCountWithoutWidth++;\n    }\n\n    // Add a column for each field\n    columns.push({\n      key,\n      name: field.name,\n      field,\n      cellClass: textWraps[getDisplayName(field)] ? styles.cellWrapped : styles.cell,\n      renderCell: (props: RenderCellProps<TableRow, TableSummaryRow>): JSX.Element => {\n        const { row } = props;\n        const cellType = field.config?.custom?.cellOptions?.type ?? TableCellDisplayMode.Auto;\n        const value = row[key];\n        // Cell level rendering here\n        return (\n          <TableCellNG\n            frame={frame}\n            key={key}\n            value={value}\n            field={field}\n            theme={theme}\n            timeRange={timeRange ?? getDefaultTimeRange()}\n            height={defaultRowHeight}\n            justifyContent={justifyColumnContent}\n            rowIdx={row.__index}\n            shouldTextOverflow={() =>\n              shouldTextOverflow(\n                key,\n                row,\n                columnTypes,\n                headerCellRefs,\n                ctx,\n                defaultLineHeight,\n                defaultRowHeight,\n                TABLE.CELL_PADDING,\n                textWraps[getDisplayName(field)],\n                field,\n                cellType\n              )\n            }\n            setIsInspecting={setIsInspecting}\n            setContextMenuProps={setContextMenuProps}\n            getActions={getActions}\n            rowBg={rowBg}\n            onCellFilterAdded={onCellFilterAdded}\n            replaceVariables={replaceVariables}\n          />\n        );\n      },\n      renderSummaryCell: () => {\n        if (isCountRowsSet && fieldIndex === 0) {\n          return (\n            <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n              <span>\n                <Trans i18nKey=\"grafana-ui.table.count\">Count</Trans>\n              </span>\n              <span>{calcsRef.current[fieldIndex]}</span>\n            </div>\n          );\n        }\n        return <div className={footerStyles.footerCell}>{calcsRef.current[fieldIndex]}</div>;\n      },\n      renderHeaderCell: ({ column, sortDirection }): JSX.Element => (\n        <HeaderCell\n          column={column}\n          rows={rows}\n          field={field}\n          onSort={(columnKey, direction, isMultiSort) => {\n            handleSort(columnKey, direction, isMultiSort, setSortColumns, sortColumnsRef);\n\n            // Update panel context with the new sort order\n            if (onSortByChange) {\n              const sortByFields = sortColumnsRef.current.map(({ columnKey, direction }) => ({\n                displayName: columnKey,\n                desc: direction === 'DESC',\n              }));\n              onSortByChange(sortByFields);\n            }\n          }}\n          direction={sortDirection}\n          justifyContent={justifyColumnContent}\n          filter={filter}\n          setFilter={setFilter}\n          onColumnResize={onColumnResize}\n          headerCellRefs={headerCellRefs}\n          crossFilterOrder={crossFilterOrder}\n          crossFilterRows={crossFilterRows}\n          showTypeIcons={showTypeIcons}\n        />\n      ),\n      width: fieldTableOptions.width,\n      minWidth: fieldTableOptions.minWidth || COLUMN.DEFAULT_WIDTH,\n    });\n  });\n\n  // set columns that are at minimum width\n  let sharedWidth = availableWidth / fieldCountWithoutWidth;\n  for (let i = fieldCountWithoutWidth; i > 0; i--) {\n    for (const column of columns) {\n      if (!column.width && column.minWidth! > sharedWidth) {\n        column.width = column.minWidth;\n        availableWidth -= column.width!;\n        fieldCountWithoutWidth -= 1;\n        sharedWidth = availableWidth / fieldCountWithoutWidth;\n      }\n    }\n  }\n\n  // divide up the rest of the space\n  for (const column of columns) {\n    if (!column.width) {\n      column.width = sharedWidth;\n    }\n    column.minWidth = COLUMN.MIN_WIDTH;\n  }\n\n  return columns;\n}\n\nexport function myRowRenderer(\n  key: React.Key,\n  props: RenderRowProps<TableRow, TableSummaryRow>,\n  expandedRows: number[],\n  panelContext: PanelContext,\n  data: DataFrame,\n  enableSharedCrosshair: boolean\n): React.ReactNode {\n  // Let's render row level things here!\n  // i.e. we can look at row styles and such here\n  const { row } = props;\n  const rowIdx = Number(row.__index);\n  const isExpanded = expandedRows.includes(rowIdx);\n\n  // Don't render non expanded child rows\n  if (Number(row.__depth) === 1 && !isExpanded) {\n    return null;\n  }\n\n  // Add aria-expanded to parent rows that have nested data\n  if (row.data) {\n    return <Row key={key} {...props} aria-expanded={isExpanded} />;\n  }\n\n  return (\n    <Row\n      key={key}\n      {...props}\n      onMouseEnter={() => onRowHover(rowIdx, panelContext, data, enableSharedCrosshair)}\n      onMouseLeave={() => onRowLeave(panelContext, enableSharedCrosshair)}\n    />\n  );\n}\n\nexport function onRowHover(idx: number, panelContext: PanelContext, frame: DataFrame, enableSharedCrosshair: boolean) {\n  if (!enableSharedCrosshair) {\n    return;\n  }\n\n  const timeField: Field = frame!.fields.find((f) => f.type === FieldType.time)!;\n\n  if (!timeField) {\n    return;\n  }\n\n  panelContext.eventBus.publish(\n    new DataHoverEvent({\n      point: {\n        time: timeField.values[idx],\n      },\n    })\n  );\n}\n\nexport function onRowLeave(panelContext: PanelContext, enableSharedCrosshair: boolean) {\n  if (!enableSharedCrosshair) {\n    return;\n  }\n\n  panelContext.eventBus.publish(new DataHoverClearEvent());\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  dataGrid: css({\n    '--rdg-background-color': theme.colors.background.primary,\n    '--rdg-header-background-color': theme.colors.background.primary,\n    '--rdg-border-color': 'transparent',\n    '--rdg-color': theme.colors.text.primary,\n    '&:hover': {\n      '--rdg-row-hover-background-color': theme.colors.emphasize(theme.colors.action.hover, 0.6),\n    },\n\n    // If we rely solely on borderInlineEnd which is added from data grid, we\n    // get a small gap where the gridCell borders meet the column header borders.\n    // To avoid this, we can unset borderInlineEnd and set borderRight instead.\n    '.rdg-cell': {\n      borderInlineEnd: 'unset',\n      borderRight: `1px solid ${theme.colors.border.medium}`,\n\n      '&:last-child': {\n        borderRight: 'none',\n      },\n    },\n\n    '.rdg-summary-row': {\n      backgroundColor: theme.colors.background.primary,\n      '--rdg-summary-border-color': theme.colors.border.medium,\n\n      '.rdg-cell': {\n        // Prevent collisions with custom cell components\n        zIndex: 2,\n        borderRight: 'none',\n      },\n    },\n\n    // Due to stylistic choices, we do not want borders on the column headers\n    // other than the bottom border.\n    'div[role=columnheader]': {\n      borderBottom: `1px solid ${theme.colors.border.medium}`,\n      borderInlineEnd: 'unset',\n\n      '.r1y6ywlx7-0-0-beta-46': {\n        '&:hover': {\n          borderRight: `3px solid ${theme.colors.text.link}`,\n        },\n      },\n    },\n\n    '::-webkit-scrollbar': {\n      width: TABLE.SCROLL_BAR_WIDTH,\n      height: TABLE.SCROLL_BAR_WIDTH,\n    },\n    '::-webkit-scrollbar-thumb': {\n      backgroundColor: 'rgba(204, 204, 220, 0.16)',\n      borderRadius: '4px',\n    },\n    '::-webkit-scrollbar-track': {\n      background: 'transparent',\n    },\n    '::-webkit-scrollbar-corner': {\n      backgroundColor: 'transparent',\n    },\n  }),\n  menuItem: css({\n    maxWidth: '200px',\n  }),\n  cell: css({\n    '--rdg-border-color': theme.colors.border.medium,\n    borderLeft: 'none',\n    whiteSpace: 'nowrap',\n    wordWrap: 'break-word',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n\n    // Reset default cell styles for custom cell component styling\n    paddingInline: '0',\n  }),\n  cellWrapped: css({\n    '--rdg-border-color': theme.colors.border.medium,\n    borderLeft: 'none',\n    whiteSpace: 'pre-line',\n    wordWrap: 'break-word',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n\n    // Reset default cell styles for custom cell component styling\n    paddingInline: '0',\n  }),\n  paginationContainer: css({\n    alignItems: 'center',\n    display: 'flex',\n    justifyContent: 'center',\n    marginTop: '8px',\n    width: '100%',\n  }),\n  paginationSummary: css({\n    color: theme.colors.text.secondary,\n    fontSize: theme.typography.bodySmall.fontSize,\n    display: 'flex',\n    justifyContent: 'flex-end',\n    padding: theme.spacing(0, 1, 0, 2),\n  }),\n});\n"],"names":["getColSpan","column","lastFrozenColumnIndex","args","colSpan","stopPropagation","event","scrollIntoView","element","createCellEvent","defaultPrevented","cellEvent","nonInputKeys","isCtrlKeyHeldDown","isDefaultCellInput","onEditorNavigation","key","target","measuringCellClassname","renderMeasuringCells","viewportColumns","idx","minWidth","maxWidth","isSelectedCellEditable","selectedPosition","columns","rows","row","isCellEditableUtil","getSelectedCellColSpan","topSummaryRows","bottomSummaryRows","rowIdx","mainHeaderRowIdx","topSummaryRowsCount","getNextSelectedCellPosition","moveUp","moveNext","cellNavigationMode","colSpanColumns","minRowIdx","maxRowIdx","currentIdx","currentRowIdx","nextPosition","isCellWithinBounds","nextIdx","nextRowIdx","columnsCount","setColSpan","colIdx","getParentRowIdx","parent","setHeaderGroupColAndRowSpan","parentRowIdx","found","nextParentRowIdx","canExitGrid","maxColIdx","shiftKey","cellClassname","cellFrozenClassname","getRowStyle","getHeaderCellStyle","rowSpan","gridRowEnd","paddingBlockStart","getCellStyle","index","getCellClassname","extraClasses","min","max","floor","sign","abs","assertIsValidKeyGetter","keyGetter","clampColumnWidth","width","getHeaderCellRowSpan","checkboxContainer","checkboxClassname","renderCheckbox","onChange","props","handleChange","e","groupCellContent","groupCellContentClassname","caret","caretClassname","renderToggleGroup","ToggleGroup","groupKey","isExpanded","tabIndex","toggleGroup","handleKeyDown","d","renderValue","DataGridDefaultRenderersContext","DataGridDefaultRenderersProvider","useDefaultRenderers","SelectCellFormatter","value","disabled","ariaLabel","ariaLabelledBy","RowSelectionContext","RowSelectionProvider","RowSelectionChangeContext","RowSelectionChangeProvider","useRowSelection","rowSelectionContext","rowSelectionChangeContext","SELECT_COLUMN_KEY","HeaderRenderer","isRowSelected","onRowSelectionChange","checked","SelectFormatter","isShiftClick","SelectGroupFormatter","SelectColumn","DEFAULT_COLUMN_WIDTH","DEFAULT_COLUMN_MIN_WIDTH","useCalculatedColumns","rawColumns","defaultColumnOptions","getColumnWidth","viewportWidth","scrollLeft","enableVirtualization","defaultWidth","defaultMinWidth","defaultMaxWidth","defaultCellRenderer","defaultSortable","defaultResizable","defaultDraggable","headerRowsCount","collectColumns","level","rawColumn","calculatedColumnParent","frozen","aKey","frozenA","bKey","frozenB","updateColumnParent","templateColumns","layoutCssVars","totalFrozenColumnWidth","columnMetrics","left","columnMetric","i","colOverscanStartIdx","colOverscanEndIdx","viewportLeft","viewportRight","lastColIdx","firstUnfrozenColumnIdx","colVisibleStartIdx","colVisibleEndIdx","useLayoutEffect","useColumnWidths","gridRef","gridWidth","resizedColumnWidths","measuredColumnWidths","setResizedColumnWidths","setMeasuredColumnWidths","onColumnResize","prevGridWidthRef","columnsCanFlex","ignorePreviouslyMeasuredColumns","newTemplateColumns","columnsToMeasure","gridTemplateColumns","updateMeasuredWidths","newMeasuredColumnWidths","hasChanges","measuredWidth","measureColumnWidth","handleColumnResize","nextWidth","resizingKey","newResizedColumnWidths","selector","useGridDimensions","inlineSize","setInlineSize","blockSize","setBlockSize","horizontalScrollbarHeight","setHorizontalScrollbarHeight","ResizeObserver","clientWidth","clientHeight","offsetWidth","offsetHeight","height","initialHorizontalScrollbarHeight","initialWidth","initialHeight","resizeObserver","entries","size","useLatestFunc","fn","ref","callbackFn","useRovingTabIndex","isSelected","isChildFocused","setIsChildFocused","onFocus","useViewportColumns","rowOverscanStartIdx","rowOverscanEndIdx","startIdx","updateStartIdx","useViewportRows","rowHeight","scrollTop","totalRowHeight","gridTemplateRows","getRowTop","getRowHeight","findRowIdx","offset","rowPositions","currentRowHeight","position","validateRowIdx","start","end","middle","currentOffset","rowVisibleStartIdx","rowVisibleEndIdx","cellDragHandle","cellDragHandleFrozenClassname","cellDragHandleClassname","DragHandle","gridRowStart","columnWidth","isLastRow","latestDraggedOverRowIdx","isCellEditable","onRowsChange","onFill","onClick","setDragging","setDraggedOverRowIdx","handleMouseDown","onMouseOver","onMouseUp","handleDragEnd","overRowIdx","startRowIndex","endRowIndex","updateRows","handleDoubleClick","startRowIdx","endRowIdx","sourceRow","updatedRows","indexes","updatedRow","getStyle","insetInlineStart","style","marginEnd","isLastColumn","cellEditing","EditCell","onRowChange","closeEditor","onKeyDown","navigate","frameRequestRef","commitOnOutsideClick","commitOnOutsideMouseDown","onClose","onWindowCaptureMouseDown","cancelFrameRequest","commitChanges","shouldFocusCell","onEditorRowChange","commitChangesAndFocus","cellClass","className","GroupedColumnHeaderCell","isCellSelected","selectCell","headerSortCellClassname","headerSortNameClassname","renderHeaderCell","sortDirection","priority","SortableHeaderCell","children","renderSortStatus","cellSortableClassname","cellResizableClassname","resizeHandleClassname","cellDraggableClassname","cellDraggingClassname","cellOverClassname","HeaderCell","onColumnsReorder","sortColumns","onSortColumnsChange","shouldFocusGrid","direction","dragDropKey","isDragging","setIsDragging","isOver","setIsOver","isRtl","childTabIndex","sortIndex","sort","sortColumn","ariaSort","sortable","resizable","draggable","renderHeaderCell$1","onPointerDown","currentTarget","pointerId","headerCell","right","onPointerMove","onLostPointerCapture","onSort","ctrlClick","sortDescendingFirst","nextSort","nextSortColumn","nextSortColumns","onDoubleClick","handleFocus","onDragStart","onDragEnd","onDragOver","onDrop","sourceKey","onDragEnter","isEventPertinent","onDragLeave","draggableProps","relatedTarget","rowClassname","rowSelected","rowSelectedClassname","rowSelectedWithFrozenCell","topSummaryRowClassname","bottomSummaryRowClassname","headerRowClassname","HeaderRow","selectedCellIdx","cells","HeaderRow$1","GroupedColumnHeaderRow","renderedParents","GroupedColumnHeaderRow$1","cellCopiedClassname","cellDraggedOverClassname","Cell","isCopied","isDraggedOver","onContextMenu","isEditable","selectCellWrapper","openEditor","handleClick","handleContextMenu","handleRowChange","newRow","Cell$1","Row","copiedCellIdx","draggedOverCellIdx","selectedCellEditor","onCellClick","onCellDoubleClick","onCellContextMenu","rowClass","onMouseEnter","handleDragEnter","RowComponent","RowComponent$1","defaultRenderRow","ScrollToCell","gridElement","setScrollToCellPosition","removeScrollToCell","observer","arrowClassname","renderSortIcon","renderSortPriority","rootClassname","viewportDraggingClassname","focusSinkClassname","focusSinkHeaderAndSummaryClassname","summaryCellClassname","SummaryCell","summaryCellClass","SummaryCell$1","summaryRow","topSummaryRow","summaryRowClassname","SummaryRow","top","bottom","isTop","ariaRowIndex","SummaryRow$1","DataGrid","rowKeyGetter","rawRowHeight","rawHeaderRowHeight","rawSummaryRowHeight","selectedRows","onSelectedRowsChange","onCellKeyDown","onSelectedCellChange","onScroll","onCopy","onPaste","rawEnableVirtualization","renderers","rawDirection","rawRole","ariaDescribedBy","rawAriaRowCount","testId","defaultRenderers","role","headerRowHeight","summaryRowHeight","renderRow","renderSortStatus$1","renderCheckbox$1","noRowsFallback","setScrollTop","setScrollLeft","copiedCell","setCopiedCell","draggedOverRowIdx","setOverRowIdx","scrollToPosition","setScrollToPosition","gridHeight","bottomSummaryRowsCount","summaryRowsCount","headerAndTopSummaryRowsCount","groupedColumnHeaderRowsCount","setSelectedPosition","prevSelectedPosition","lastSelectedRowIdx","focusSinkRef","shouldFocusCellRef","isTreeGrid","headerRowsHeight","summaryRowsHeight","isSelectable","leftKey","rightKey","ariaRowCount","defaultGridComponents","allRowsSelected","length","minColIdx","selectedCellIsWithinSelectionBounds","isCellWithinSelectionBounds","selectedCellIsWithinViewportBounds","isCellWithinViewportBounds","scrollHeight","handleColumnResizeLatest","onColumnsReorderLastest","onSortColumnsChangeLatest","onCellClickLatest","onCellDoubleClickLatest","onCellContextMenuLatest","selectRowLatest","selectRow","handleFormatterRowChangeLatest","updateRow","selectCellLatest","selectHeaderCellLatest","isSamePosition","focusCellOrCellContent","scrollToIdx","scrollToRowIdx","isRowIdxWithinViewportBounds","newSelectedRows","rowKey","previousRowIdx","step","mode","isCellEvent","isRowEvent","keyCode","handleCopy","handlePaste","handleCellInput","handleScroll","commitEditorChanges","sourceColumnKey","targetColumn","targetRow","updatedTargetRow","isColIdxWithinSelectionBounds","isCellWithinEditBounds","enableEditor","samePosition","getCellToScroll","getNextPosition","ctrlKey","nextRowY","nextSelectedCellPosition","getDraggedOverCellIdx","cell","renderDragHandle","getCellEditor","getRowViewportColumns","selectedColumn","getViewportRows","rowElements","selectedIdx","selectedRowIdx","viewportRowIdx","isRowOutsideViewport","rowColumns","c","templateRows","isGroupRowFocused","_","summaryRowIdx","isSummaryRowSelected","gridEl","p1","p2","DataGrid$1","GroupCell","id","childRows","groupColumnIndex","isGroupByColumn","toggleGroupWrapper","isLevelMatching","GroupCell$1","groupRow","groupRowClassname","GroupedRow","groupBy","handleSelectGroup","GroupedRow$1","TreeDataGrid","rawRows","rawRowKeyGetter","rawOnCellKeyDown","rawSelectedRows","rawOnSelectedRowsChange","rawGroupBy","rowGrouper","expandedGroupIds","onExpandedGroupIdsChange","rawRenderRow","toggleGroupLatest","groupedRows","rowsCount","groupRows","groupByKey","remainingGroupByKeys","groupRowsCount","groups","childGroups","childRowsCount","isGroupRow","allGroupRows","flattenedRows","expandGroup","parentId","isReadonlyArray","posInSet","keys","getParentRowAndIndex","parentRow","parentRowAndIndex","groupIndex","cr","newRawSelectedRows","handleRowsChange","updatedRawRows","rawIndexes","rawIndex","groupId","newExpandedGroupIds","rowProps","arr","TreeDataGrid$1","textEditorInternalClassname","textEditorClassname","autoFocusAndSelect","input","textEditor","D","S","N","SYMBS","NUMS","UPPER","CHARS","supportsLetterSpacing","ctx","_w","_letterSpacing","w","varPreLine","fauxLetterSpacing","WIDTHS","wordSpacing","PAIRS","uc","j","ch","wid","eachLine","each","text","cb","fr","to","headIdx","headEnd","headWid","tailIdx","tailWid","inWS","n","limit","out","idx0","idx1","count","COLUMN","TABLE","getCellHeight","cellWidth","lineHeight","defaultRowHeight","padding","PADDING","words","lines","currentLine","currentWord","lineWidth","getCellHeightCalculator","effectiveCellWidth","TOTAL_PADDING","totalHeight","getDefaultRowHeight","theme","cellHeight","bodyFontSize","calc","avgCharWidth","fieldsData","maxLines","maxLinesCol","cellText","charsPerLine","approxLines","isTextCell","columnTypes","shouldTextOverflow","headerCellRefs","textWrap","field","cellType","cellInspect","getTextAlign","defaultCellOptions","getCellOptions","migrateTableDisplayModeToCellOptions","getAlignmentFactor","displayValue","rowIndex","alignmentFactor","maxIndex","nextDisplayValue","getFooterItemNG","options","getDisplayName","getFooterStyles","justifyContent","CELL_COLOR_DARKENING_MULTIPLIER","CELL_GRADIENT_DARKENING_MULTIPLIER","CELL_GRADIENT_HUE_ROTATION_DEGREES","getCellColors","cellOptions","autoCellBackgroundHoverColor","convertRGBAToHex","darkeningFactor","textColor","bgColor","bgHoverColor","tinycolor","hoverColor","bgColor2","extractPixelValue","spacing","backgroundColor","rgbaColor","bg","rgba","getCellLinks","links","origOnClick","handleSort","columnKey","isMultiSort","setSortColumns","sortColumnsRef","currentSortColumn","updatedSortColumns","isCurrentColumn","frameToRecords","frame","fnBody","fieldIdx","compare","getComparator","sortColumnType","a","b","displayMode","gaugeMode","getIsNestedTable","dataFrame","type","processNestedTableRows","processParents","parentRows","processedParents","result","childRow","calculateUniqueFieldValues","set","fieldValue","getFilteredOptions","filterValues","option","filtered","valuesToOptions","unique","sortOptions","operatorSelectableValues","OPERATORS","FilterPopup","name","filterValue","setFilter","searchFilter","setSearchFilter","operator","setOperator","uniqueValues","filteredOptions","values","setValues","matchCase","setMatchCase","onCancel","onFilter","filteredSet","item","filter","newFilter","onClearFilter","clearFilterVisible","styles","getStyles","ClickOutsideWrapper","Stack","Label","ButtonSelect","FilterInput","Button","s","FilterList","ITEM_HEIGHT","MIN_HEIGHT","REGEX_OPERATOR","XPR_OPERATOR","comparableValue","date","fmt","num","lvalue","caseSensitive","regex","items","xpr","fnc","val","value1","value2","selectedItems","selectCheckValue","selectCheckIndeterminate","selectCheckLabel","selectCheckDescription","gutter","onCheckedChanged","newValues","onSelectChanged","ItemRenderer","Checkbox","label","isChecked","Filter","crossFilterOrder","crossFilterRows","filterIndex","filteredRows","previousFilterName","isPopoverVisible","setPopoverVisible","filterEnabled","onShowPopover","onClosePopover","Icon","Popover","showTypeIcons","headerRef","filterable","displayName","isColumnFilterable","headerCellParent","lastElement","handleMouseUp","newWidth","RowExpander","onCellExpand","FILTER_FOR_OPERATOR","FILTER_OUT_OPERATOR","ActionsCell","actions","action","ActionButton","AutoCell","formattedValue","hasLinks","clearButtonStyle","DataLinksContextMenu","api","getLinkStyle","targetClassName","defaultScale","BarGaugeCell","heightOffset","config","barGaugeMode","valueDisplayMode","alignmentFactors","renderComponent","menuProps","openMenu","BarGauge","DataLinksCell","link","GeoCell","disp","Geometry","WKT","DATALINKS_HEIGHT_OFFSET","ImageCell","calculatedHeight","alt","title","img","JSONCell","parsed","defaultSparklineCellConfig","SparklineCell","timeRange","sparkline","getSparkline","v","range","getTableSparklineCellOptions","hideValue","valueWidth","valueElement","newValue","measureText","FormattedValueDisplay","Sparkline","timeField","x","numberField","TableCellNG","setIsInspecting","setContextMenuProps","getActions","rowBg","onCellFilterAdded","replaceVariables","fieldConfig","showFilters","isRightAligned","colors","divWidthRef","divWidth","setDivWidth","isHovered","setIsHovered","commonProps","CustomCellComponent","firstValue","handleMouseEnter","tableCellDiv","handleMouseLeave","onFilterFor","onFilterOut","IconButton","inspectValue","TableCellInspector","color","TableNG","enablePagination","footerOptions","initialSortBy","noHeader","onSortByChange","data","enableSharedCrosshair","initialSortColumns","desc","state","revId","setRevId","contextMenuProps","isInspecting","isContextMenuOpen","setIsContextMenuOpen","page","setPage","setResizeTrigger","setReadyForRowHeightCalc","expandedRows","setExpandedRows","isNestedTable","setIsNestedTable","scrollPositionRef","hasScroll","setHasScroll","prevProps","calcsRef","paginationWrapperRef","paginationHeight","useMeasure","panelContext","isFooterVisible","isCountRowsSet","tableRef","hasNestedFrames","el","defaultLineHeight","panelPaddingHeight","acc","textWraps","getColumnWidths","widths","configWidth","contentWidth","headersLength","fieldDisplayType","getDisplayedValue","filterKeys","parents","displayedValue","sortedRows","compareRows","numRows","headerCellHeight","rowsPerPage","numberOfPages","itemsRangeStart","displayedEnd","smallPagination","paginatedRows","pageOffset","footerCalcReducer","fieldReducer","currentExpandedRows","indexToRemove","prev","font","letterSpacing","txt","mapFrameToDataGrid","renderMenuItems","MenuItem","cellHeightCalc","calculateRowHeight","headerCount","myRowRenderer","cellValue","Pagination","toPage","ContextMenu","handlers","availableWidth","expanderField","expandedColumns","expandedRecords","fieldOptions","display","fieldCountWithoutWidth","fieldIndex","fieldTableOptions","justifyColumnContent","footerStyles","sortByFields","sharedWidth","onRowHover","onRowLeave","f"],"sourceRoot":""}