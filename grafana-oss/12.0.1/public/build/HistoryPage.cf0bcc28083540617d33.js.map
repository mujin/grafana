{"version":3,"file":"HistoryPage.cf0bcc28083540617d33.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/CollapseToggle.tsx","webpack://grafana/./public/app/features/alerting/unified/components/MetaText.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/central-state-history/HistoryErrorMessage.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/central-state-history/utils.ts","webpack://grafana/./public/app/features/alerting/unified/components/rules/central-state-history/EventDetails.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/central-state-history/useRuleHistoryRecords.ts","webpack://grafana/./public/app/features/alerting/unified/components/rules/central-state-history/EventListSceneObject.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/central-state-history/CentralHistoryRuntimeDataSource.ts","webpack://grafana/./public/app/features/alerting/unified/components/rules/central-state-history/CentralAlertHistoryScene.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/central-state-history/CentralAlertHistoryPage.tsx"],"sourcesContent":["import { HTMLAttributes } from 'react';\n\nimport { Button, IconSize } from '@grafana/ui';\n\ninterface Props extends HTMLAttributes<HTMLButtonElement> {\n  isCollapsed: boolean;\n  onToggle: (isCollapsed: boolean) => void;\n  // Todo: this should be made compulsory for a11y purposes\n  idControlled?: string;\n  size?: IconSize;\n  className?: string;\n  text?: string;\n}\n\nexport const CollapseToggle = ({\n  isCollapsed,\n  onToggle,\n  idControlled,\n  className,\n  text,\n  size = 'xl',\n  ...restOfProps\n}: Props) => {\n  return (\n    <Button\n      type=\"button\"\n      fill=\"text\"\n      variant=\"secondary\"\n      aria-expanded={!isCollapsed}\n      aria-controls={idControlled}\n      className={className}\n      icon={isCollapsed ? 'angle-right' : 'angle-down'}\n      onClick={() => onToggle(!isCollapsed)}\n      {...restOfProps}\n    >\n      {text}\n    </Button>\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport { ComponentProps, HTMLAttributes } from 'react';\n\nimport { Icon, IconName, Stack, Text, useStyles2 } from '@grafana/ui';\n\ninterface Props extends HTMLAttributes<HTMLDivElement> {\n  icon?: IconName;\n  direction?: 'row' | 'column';\n  color?: ComponentProps<typeof Text>['color'];\n}\n\nconst MetaText = ({ children, icon, color = 'secondary', direction = 'row', ...rest }: Props) => {\n  const styles = useStyles2(getStyles);\n  const interactive = typeof rest.onClick === 'function';\n\n  const rowDirection = direction === 'row';\n  const alignItems = rowDirection ? 'center' : 'flex-start';\n  const gap = rowDirection ? 0.5 : 0;\n\n  return (\n    <div\n      className={cx({\n        [styles.interactive]: interactive,\n      })}\n      // allow passing ARIA and data- attributes\n      {...rest}\n    >\n      <Text variant=\"bodySmall\" color={color}>\n        <Stack direction={direction} alignItems={alignItems} gap={gap} wrap={'wrap'}>\n          {icon && <Icon size=\"xs\" name={icon} />}\n          {children}\n        </Stack>\n      </Text>\n    </div>\n  );\n};\n\nconst getStyles = () => ({\n  interactive: css({\n    cursor: 'pointer',\n  }),\n});\n\nexport { MetaText };\n","import { isFetchError } from '@grafana/runtime';\nimport { Alert } from '@grafana/ui';\nimport { EntityNotFound } from 'app/core/components/PageNotFound/EntityNotFound';\nimport { t } from 'app/core/internationalization';\n\nimport { stringifyErrorLike } from '../../../utils/misc';\n\nexport interface HistoryErrorMessageProps {\n  error: unknown;\n}\n\nexport function HistoryErrorMessage({ error }: HistoryErrorMessageProps) {\n  if (isFetchError(error) && error.status === 404) {\n    return <EntityNotFound entity=\"History\" />;\n  }\n  const title = t('alerting.central-alert-history.error', 'Something went wrong loading the alert state history');\n  const errorStr = stringifyErrorLike(error);\n\n  return <Alert title={title}>{errorStr}</Alert>;\n}\n","import { groupBy } from 'lodash';\n\nimport {\n  DataFrame,\n  Field as DataFrameField,\n  DataFrameJSON,\n  Field,\n  FieldType,\n  GrafanaTheme2,\n  MappingType,\n  ThresholdsMode,\n  getDisplayProcessor,\n} from '@grafana/data';\nimport { fieldIndexComparer } from '@grafana/data/internal';\nimport { mapStateWithReasonToBaseState } from 'app/types/unified-alerting-dto';\n\nimport { labelsMatchMatchers } from '../../../utils/alertmanager';\nimport { parsePromQLStyleMatcherLooseSafe } from '../../../utils/matchers';\nimport { LogRecord } from '../state-history/common';\nimport { isLine, isNumbers } from '../state-history/useRuleHistoryRecords';\n\nimport { LABELS_FILTER, STATE_FILTER_FROM, STATE_FILTER_TO, StateFilterValues } from './CentralAlertHistoryScene';\n\nconst GROUPING_INTERVAL = 10 * 1000; // 10 seconds\nconst QUERY_PARAM_PREFIX = 'var-'; // Prefix used by Grafana to sync variables in the URL\n\ninterface HistoryFilters {\n  stateTo: string;\n  stateFrom: string;\n  labels: string;\n}\n\nconst emptyFilters: HistoryFilters = {\n  stateTo: 'all',\n  stateFrom: 'all',\n  labels: '',\n};\n\n/*\n * This function is used to convert the history response to a DataFrame list and filter the data by labels and states\n * The response is a list of log records, each log record has a timestamp and a line.\n * We group all records by alert instance (unique set of labels) and create a DataFrame for each group (instance).\n * This allows us to be able to filter by labels and states in the groupDataFramesByTime function.\n */\nexport function historyResultToDataFrame({ data }: DataFrameJSON, filters = emptyFilters): DataFrame[] {\n  const { stateTo, stateFrom } = filters;\n\n  // Extract timestamps and lines from the response\n  const [tsValues = [], lines = []] = data?.values ?? [];\n  const timestamps = isNumbers(tsValues) ? tsValues : [];\n\n  // Filter log records by state and create a list of log records with the timestamp and line\n  const logRecords = timestamps.reduce<LogRecord[]>((acc, timestamp: number, index: number) => {\n    const line = lines[index];\n    if (!isLine(line)) {\n      return acc;\n    }\n\n    // we have to filter out by state at that point , because we are going to group by timestamp and these states are going to be lost\n    const baseStateTo = mapStateWithReasonToBaseState(line.current);\n    const baseStateFrom = mapStateWithReasonToBaseState(line.previous);\n    const stateToMatch = stateTo !== StateFilterValues.all ? stateTo === baseStateTo : true;\n    const stateFromMatch = stateFrom !== StateFilterValues.all ? stateFrom === baseStateFrom : true;\n\n    // filter by state\n    if (stateToMatch && stateFromMatch) {\n      acc.push({ timestamp, line });\n    }\n\n    return acc;\n  }, []);\n\n  // Group log records by alert instance\n  const logRecordsByInstance = groupBy(logRecords, (record: LogRecord) => {\n    return JSON.stringify(record.line.labels);\n  });\n\n  // Convert each group of log records to a DataFrame\n  const dataFrames: DataFrame[] = Object.entries(logRecordsByInstance).map<DataFrame>(([key, records]) => {\n    // key is the stringified labels\n    return logRecordsToDataFrame(key, records);\n  });\n\n  // Group DataFrames by time and filter by labels\n  return groupDataFramesByTimeAndFilterByLabels(dataFrames, filters);\n}\n\n// Scenes sync variables in the URL adding a prefix to the variable name.\nexport function getLabelsFilterInQueryParams() {\n  const queryParams = new URLSearchParams(window.location.search);\n  return queryParams.get(`${QUERY_PARAM_PREFIX}${LABELS_FILTER}`) ?? '';\n}\n\nexport function getStateFilterToInQueryParams() {\n  const queryParams = new URLSearchParams(window.location.search);\n  return queryParams.get(`${QUERY_PARAM_PREFIX}${STATE_FILTER_TO}`) ?? StateFilterValues.all;\n}\n\nexport function getStateFilterFromInQueryParams() {\n  const queryParams = new URLSearchParams(window.location.search);\n  return queryParams.get(`${QUERY_PARAM_PREFIX}${STATE_FILTER_FROM}`) ?? StateFilterValues.all;\n}\n\n/*\n * This function groups the data frames by time and filters them by labels.\n * The interval is set to 10 seconds.\n * */\nexport function groupDataFramesByTimeAndFilterByLabels(dataFrames: DataFrame[], filters: HistoryFilters): DataFrame[] {\n  // Filter data frames by labels. This is used to filter out the data frames that do not match the query.\n  const labelsFilterValue = filters.labels;\n  const dataframesFiltered = dataFrames.filter((frame) => {\n    const labels = JSON.parse(frame.name ?? ''); // in name we store the labels stringified\n\n    const matchers = Boolean(labelsFilterValue) ? parsePromQLStyleMatcherLooseSafe(labelsFilterValue) : [];\n    return labelsMatchMatchers(labels, matchers);\n  });\n  // Extract time fields from filtered data frames\n  const timeFieldList = dataframesFiltered.flatMap((frame) => frame.fields.find((field) => field.name === 'time'));\n\n  // Group time fields by interval\n  const groupedTimeFields = groupBy(\n    timeFieldList?.flatMap((tf) => tf?.values),\n    (time: number) => Math.floor(time / GROUPING_INTERVAL) * GROUPING_INTERVAL\n  );\n\n  // Create new time field with grouped time values\n  const newTimeField: Field = {\n    name: 'time',\n    type: FieldType.time,\n    values: Object.keys(groupedTimeFields).map(Number),\n    config: { displayName: 'Time', custom: { fillOpacity: 100 } },\n  };\n\n  // Create count field with count of records in each group\n  const countField: Field = {\n    name: 'value',\n    type: FieldType.number,\n    values: Object.values(groupedTimeFields).map((group) => group.length),\n    config: {},\n  };\n\n  // Return new DataFrame with time and count fields\n  return [\n    {\n      fields: [newTimeField, countField],\n      length: newTimeField.values.length,\n    },\n  ];\n}\n\n/*\n * This function is used to convert the log records to a DataFrame.\n * The DataFrame has two fields: time and value.\n * The time field is the timestamp of the log record.\n * The value field is always 1.\n * */\nfunction logRecordsToDataFrame(instanceLabels: string, records: LogRecord[]): DataFrame {\n  const timeField: DataFrameField = {\n    name: 'time',\n    type: FieldType.time,\n    values: [...records.map((record) => record.timestamp)],\n    config: { displayName: 'Time', custom: { fillOpacity: 100 } },\n  };\n\n  // Sort time field values\n  const timeIndex = timeField.values.map((_, index) => index);\n  timeIndex.sort(fieldIndexComparer(timeField));\n\n  // Create DataFrame with time and value fields\n  const frame: DataFrame = {\n    fields: [\n      {\n        ...timeField,\n        values: timeField.values.map((_, i) => timeField.values[timeIndex[i]]),\n      },\n      {\n        name: instanceLabels,\n        type: FieldType.number,\n        values: timeField.values.map((record) => 1),\n        config: {},\n      },\n    ],\n    length: timeField.values.length,\n    name: instanceLabels,\n  };\n\n  return frame;\n}\n\n/*\n * This function is used to convert the log records to a DataFrame.\n * The DataFrame has two fields: time and value.\n * The time field is the timestamp of the log record.\n * The value field is the state of the log record.\n * The state is converted to a string and color is assigned based on the state.\n * The state can be Alerting, Pending, Recovering, Normal, or NoData.\n *\n * */\nexport function logRecordsToDataFrameForState(records: LogRecord[], theme: GrafanaTheme2): DataFrame {\n  const timeField: DataFrameField = {\n    name: 'time',\n    type: FieldType.time,\n    values: [...records.map((record) => record.timestamp), Date.now()],\n    config: { displayName: 'Time', custom: { fillOpacity: 100 } },\n  };\n\n  // Sort time field values\n  const timeIndex = timeField.values.map((_, index) => index);\n  timeIndex.sort(fieldIndexComparer(timeField));\n\n  const stateValues = [...records.map((record) => record.line.current), records.at(-1)?.line.current];\n\n  // Create DataFrame with time and value fields\n  const frame: DataFrame = {\n    fields: [\n      {\n        ...timeField,\n        values: timeField.values.map((_, i) => timeField.values[timeIndex[i]]),\n      },\n      {\n        name: 'State',\n        type: FieldType.string,\n        values: stateValues.map((_, i) => stateValues[timeIndex[i]]),\n        config: {\n          displayName: 'State',\n          color: { mode: 'thresholds' },\n          custom: { fillOpacity: 100 },\n          mappings: [\n            {\n              type: MappingType.ValueToText,\n              options: {\n                Alerting: {\n                  color: theme.colors.error.main,\n                },\n                Pending: {\n                  color: theme.colors.warning.main,\n                },\n                Recovering: {\n                  color: theme.colors.warning.main,\n                },\n                Normal: {\n                  color: theme.colors.success.main,\n                },\n                NoData: {\n                  color: theme.colors.info.main,\n                },\n              },\n            },\n          ],\n          thresholds: {\n            mode: ThresholdsMode.Absolute,\n            steps: [],\n          },\n        },\n      },\n    ],\n    length: timeField.values.length,\n    name: '',\n  };\n  frame.fields.forEach((field) => {\n    field.display = getDisplayProcessor({ field, theme });\n  });\n\n  return frame;\n}\n","import { css } from '@emotion/css';\nimport { capitalize, groupBy } from 'lodash';\nimport { useEffect, useMemo } from 'react';\n\nimport { DataFrame, DataFrameJSON, GrafanaTheme2, TimeRange } from '@grafana/data';\nimport { Icon, Stack, Text, useStyles2, useTheme2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { CombinedRule } from 'app/types/unified-alerting';\n\nimport { trackUseCentralHistoryExpandRow } from '../../../Analytics';\nimport { stateHistoryApi } from '../../../api/stateHistoryApi';\nimport { useCombinedRule } from '../../../hooks/useCombinedRule';\nimport { labelsMatchMatchers } from '../../../utils/alertmanager';\nimport { parsePromQLStyleMatcherLooseSafe } from '../../../utils/matchers';\nimport { parse } from '../../../utils/rule-id';\nimport { MetaText } from '../../MetaText';\nimport { AnnotationValue } from '../../rule-viewer/tabs/Details';\nimport { LogTimelineViewer } from '../state-history/LogTimelineViewer';\nimport { useFrameSubset } from '../state-history/LokiStateHistory';\nimport { LogRecord } from '../state-history/common';\nimport { isLine, isNumbers } from '../state-history/useRuleHistoryRecords';\n\nimport { EventState, FilterType, LIMIT_EVENTS } from './EventListSceneObject';\nimport { HistoryErrorMessage } from './HistoryErrorMessage';\nimport { logRecordsToDataFrameForState } from './utils';\n\ninterface EventDetailsProps {\n  record: LogRecord;\n  addFilter: (key: string, value: string, type: FilterType) => void;\n  timeRange: TimeRange;\n}\nexport function EventDetails({ record, addFilter, timeRange }: EventDetailsProps) {\n  // track the usage of the expand row\n  useEffect(() => {\n    trackUseCentralHistoryExpandRow();\n  }, []);\n\n  // get the rule from the ruleUID\n  const ruleUID = record.line?.ruleUID ?? '';\n  const labelsInInstance = record.line?.labels;\n  const identifier = useMemo(() => {\n    return parse(ruleUID, true);\n  }, [ruleUID]);\n  const { error, loading, result: rule } = useCombinedRule({ ruleIdentifier: identifier, limitAlerts: 0 }); // we limit the alerts to 0 as we only need the rule\n\n  if (error) {\n    return (\n      <Text>\n        <Trans i18nKey=\"alerting.central-alert-history.details.error\">Error loading rule for this event.</Trans>\n      </Text>\n    );\n  }\n  if (loading) {\n    return (\n      <Text>\n        <Trans i18nKey=\"alerting.central-alert-history.details.loading\">Loading...</Trans>\n      </Text>\n    );\n  }\n\n  if (!rule) {\n    return (\n      <Text>\n        <Trans i18nKey=\"alerting.central-alert-history.details.not-found\">Rule not found for this event.</Trans>\n      </Text>\n    );\n  }\n\n  return (\n    <Stack direction=\"column\" gap={0.5}>\n      <Stack direction={'row'} gap={6}>\n        <StateTransition record={record} addFilter={addFilter} />\n        <ValueInTransition record={record} />\n      </Stack>\n      <Annotations rule={rule} />\n      <StateVisualization ruleUID={ruleUID} timeRange={timeRange} labels={labelsInInstance ?? {}} />\n    </Stack>\n  );\n}\n\nfunction useRuleHistoryRecordsForTheInstance(labelsForTheInstance: string, stateHistory?: DataFrameJSON) {\n  const theme = useTheme2();\n\n  return useMemo(() => {\n    // merge timestamp with \"line\"\n    const tsValues = stateHistory?.data?.values[0] ?? [];\n    const timestamps: number[] = isNumbers(tsValues) ? tsValues : [];\n    const lines = stateHistory?.data?.values[1] ?? [];\n\n    const logRecords = timestamps.reduce((acc: LogRecord[], timestamp: number, index: number) => {\n      const line = lines[index];\n      // values property can be undefined for some instance states (e.g. NoData)\n      if (isLine(line)) {\n        acc.push({ timestamp, line });\n      }\n\n      return acc;\n    }, []);\n\n    // group all records by alert instance (unique set of labels)\n    const logRecordsByInstance = groupBy(logRecords, (record: LogRecord) => {\n      return JSON.stringify(record.line.labels);\n    });\n\n    // filter by instance labels\n    const filterMatchers = parsePromQLStyleMatcherLooseSafe(labelsForTheInstance);\n    const filteredGroupedLines = Object.entries(logRecordsByInstance).filter(([key]) => {\n      const labels = JSON.parse(key);\n      return labelsMatchMatchers(labels, filterMatchers);\n    });\n    // Convert each group of log records to a DataFrame\n    const dataFrames: DataFrame[] = Object.values(filteredGroupedLines).map<DataFrame>((records) => {\n      // first element is the linstance labels, the second is the records list\n      return logRecordsToDataFrameForState(records[1], theme);\n    });\n    return {\n      dataFrames,\n    };\n  }, [stateHistory, labelsForTheInstance, theme]);\n}\n\ninterface StateVisualizationProps {\n  ruleUID: string;\n  timeRange: TimeRange;\n  labels: Record<string, string>;\n}\n\n/**\n * This component fetches the state history for the given ruleUID and time range, and displays the number of transitions and a State TimelineChart.\n * Fetching the state history for the alert rule uid, and labels,\n * makes the result to be more accurate, as it might be that we are not showing all the state transitions in the log records.\n * @param ruleUID\n * @param timeRange\n * @param labels\n * @returns\n */\nfunction StateVisualization({ ruleUID, timeRange, labels }: StateVisualizationProps) {\n  const { useGetRuleHistoryQuery } = stateHistoryApi;\n\n  const {\n    currentData: stateHistory,\n    isLoading,\n    isError,\n    error,\n  } = useGetRuleHistoryQuery(\n    {\n      ruleUid: ruleUID,\n      from: timeRange.from.unix(),\n      to: timeRange.to.unix(),\n      limit: LIMIT_EVENTS,\n    },\n    {\n      refetchOnFocus: true,\n      refetchOnReconnect: true,\n    }\n  );\n\n  const { dataFrames } = useRuleHistoryRecordsForTheInstance(\n    labels\n      ? Object.entries(labels)\n          .map(([key, value]) => `${key}=${value}`)\n          .join(',')\n      : '',\n    stateHistory\n  );\n\n  const { frameSubset, frameTimeRange } = useFrameSubset(dataFrames);\n\n  if (isLoading) {\n    return (\n      <div>\n        <Trans i18nKey=\"alerting.central-alert-history.details.loading\">Loading...</Trans>\n      </div>\n    );\n  }\n  if (isError) {\n    return <HistoryErrorMessage error={error} />;\n  }\n  if (!frameSubset || frameSubset.length === 0) {\n    return null;\n  }\n\n  // we subtract 1 as the first value is the initial state\n  const numberOfTransitions = dataFrames[0]?.fields[0]?.values?.length - 1 || 0;\n\n  return (\n    <>\n      <NumberTransitions transitions={ruleUID ? numberOfTransitions : 0} />\n      <LogTimelineViewer frames={frameSubset} timeRange={frameTimeRange} />\n    </>\n  );\n}\n\ninterface StateTransitionProps {\n  record: LogRecord;\n  addFilter: (key: string, value: string, type: FilterType) => void;\n}\nfunction StateTransition({ record, addFilter }: StateTransitionProps) {\n  return (\n    <Stack gap={0.5} direction={'column'}>\n      <Text variant=\"body\" weight=\"light\" color=\"secondary\">\n        <Trans i18nKey=\"alerting.central-alert-history.details.state-transitions\">State transition</Trans>\n      </Text>\n      <Stack gap={0.5} direction={'row'} alignItems=\"center\">\n        <EventState state={record.line.previous} showLabel addFilter={addFilter} type=\"from\" />\n        <Icon name=\"arrow-right\" size=\"lg\" />\n        <EventState state={record.line.current} showLabel addFilter={addFilter} type=\"to\" />\n      </Stack>\n    </Stack>\n  );\n}\n\ninterface AnnotationsProps {\n  rule: CombinedRule;\n}\nconst Annotations = ({ rule }: AnnotationsProps) => {\n  const styles = useStyles2(getStyles);\n  const annotations = rule.annotations;\n  if (!annotations || Object.keys(annotations).length === 0) {\n    return null;\n  }\n  return (\n    <div className={styles.metadataWrapper}>\n      {Object.entries(annotations).map(([name, value]) => {\n        const capitalizedName = capitalize(name);\n        return (\n          <MetaText direction=\"column\" key={capitalizedName}>\n            {capitalizedName}\n            <AnnotationValue value={value} />\n          </MetaText>\n        );\n      })}\n    </div>\n  );\n};\ninterface ValueInTransitionProps {\n  record: LogRecord;\n}\nfunction ValueInTransition({ record }: ValueInTransitionProps) {\n  const values = record?.line?.values\n    ? JSON.stringify(record.line.values)\n    : t('alerting.central-alert-history.details.no-values', 'No values');\n  return (\n    <Stack gap={0.5} direction={'column'}>\n      <Text variant=\"body\" weight=\"light\" color=\"secondary\">\n        <Trans i18nKey=\"alerting.central-alert-history.details.value-in-transition\">Value in transition</Trans>\n      </Text>\n      <Stack gap={0.5} direction={'row'} alignItems=\"center\">\n        <Text variant=\"body\" weight=\"light\">\n          {values}\n        </Text>\n      </Stack>\n    </Stack>\n  );\n}\ninterface NumberTransitionsProps {\n  transitions: number;\n}\nfunction NumberTransitions({ transitions }: NumberTransitionsProps) {\n  const styles = useStyles2(getStyles);\n  return (\n    <div className={styles.transitionsNumber}>\n      <Text variant=\"body\" weight=\"bold\" color=\"secondary\">\n        <Trans i18nKey=\"alerting.central-alert-history.details.number-transitions\">\n          State transitions for selected period:\n        </Trans>\n      </Text>\n      <Text variant=\"body\" weight=\"light\">\n        {transitions}\n      </Text>\n    </div>\n  );\n}\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    metadataWrapper: css({\n      display: 'grid',\n      gridTemplateColumns: 'auto auto',\n      rowGap: theme.spacing(3),\n      columnGap: theme.spacing(12),\n    }),\n    transitionsNumber: css({\n      display: 'flex',\n      flexDirection: 'row',\n      gap: theme.spacing(0.5),\n      alignItems: 'center',\n      marginTop: theme.spacing(1.5),\n    }),\n  };\n};\n","import { useMemo } from 'react';\n\nimport { DataFrameJSON } from '@grafana/data';\nimport { mapStateWithReasonToBaseState } from 'app/types/unified-alerting-dto';\n\nimport { labelsMatchMatchers } from '../../../utils/alertmanager';\nimport { parsePromQLStyleMatcherLooseSafe } from '../../../utils/matchers';\nimport { LogRecord } from '../state-history/common';\nimport { isLine, isNumbers } from '../state-history/useRuleHistoryRecords';\n\nimport { StateFilterValues } from './CentralAlertHistoryScene';\n\nconst emptyFilters = {\n  labels: '',\n  stateFrom: 'all',\n  stateTo: 'all',\n};\n\n/**\n * This hook filters the history records based on the label, stateTo and stateFrom filters.\n * @param filterInLabel\n * @param filterInStateTo\n * @param filterInStateFrom\n * @param stateHistory the original history records\n * @returns the filtered history records\n */\nexport function useRuleHistoryRecords(stateHistory?: DataFrameJSON, filters = emptyFilters) {\n  return useMemo(() => ruleHistoryToRecords(stateHistory, filters), [filters, stateHistory]);\n}\n\nexport function ruleHistoryToRecords(stateHistory?: DataFrameJSON, filters = emptyFilters) {\n  const { labels, stateFrom, stateTo } = filters;\n\n  if (!stateHistory?.data) {\n    return { historyRecords: [] };\n  }\n\n  const filterMatchers = labels ? parsePromQLStyleMatcherLooseSafe(labels) : [];\n\n  const [tsValues, lines] = stateHistory.data.values;\n  const timestamps = isNumbers(tsValues) ? tsValues : [];\n\n  // merge timestamp with \"line\"\n  const logRecords = timestamps.reduce((acc: LogRecord[], timestamp: number, index: number) => {\n    const line = lines[index];\n    if (!isLine(line)) {\n      return acc;\n    }\n    // values property can be undefined for some instance states (e.g. NoData)\n    const filterMatch = line.labels && labelsMatchMatchers(line.labels, filterMatchers);\n    const baseStateTo = mapStateWithReasonToBaseState(line.current);\n    const baseStateFrom = mapStateWithReasonToBaseState(line.previous);\n    const stateToMatch = stateTo !== StateFilterValues.all ? stateTo === baseStateTo : true;\n    const stateFromMatch = stateFrom !== StateFilterValues.all ? stateFrom === baseStateFrom : true;\n    if (filterMatch && stateToMatch && stateFromMatch) {\n      acc.push({ timestamp, line });\n    }\n\n    return acc;\n  }, []);\n\n  return {\n    historyRecords: logRecords,\n  };\n}\n","import { css, cx } from '@emotion/css';\nimport { ReactElement, useState } from 'react';\nimport { useLocation } from 'react-router-dom-v5-compat';\nimport { useMeasure } from 'react-use';\n\nimport { GrafanaTheme2, IconName, TimeRange } from '@grafana/data';\nimport {\n  CustomVariable,\n  SceneComponentProps,\n  SceneObjectBase,\n  TextBoxVariable,\n  VariableDependencyConfig,\n  VariableValue,\n  sceneGraph,\n} from '@grafana/scenes';\nimport { Alert, Icon, LoadingBar, Pagination, Stack, Text, Tooltip, useStyles2, withErrorBoundary } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport {\n  GrafanaAlertStateWithReason,\n  isAlertStateWithReason,\n  isGrafanaAlertState,\n  mapStateWithReasonToBaseState,\n  mapStateWithReasonToReason,\n} from 'app/types/unified-alerting-dto';\n\nimport { trackUseCentralHistoryFilterByClicking, trackUseCentralHistoryMaxEventsReached } from '../../../Analytics';\nimport { stateHistoryApi } from '../../../api/stateHistoryApi';\nimport { usePagination } from '../../../hooks/usePagination';\nimport { combineMatcherStrings } from '../../../utils/alertmanager';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../../utils/datasource';\nimport { createRelativeUrl } from '../../../utils/url';\nimport { AlertLabels } from '../../AlertLabels';\nimport { CollapseToggle } from '../../CollapseToggle';\nimport { LogRecord } from '../state-history/common';\n\nimport { LABELS_FILTER, STATE_FILTER_FROM, STATE_FILTER_TO } from './CentralAlertHistoryScene';\nimport { EventDetails } from './EventDetails';\nimport { HistoryErrorMessage } from './HistoryErrorMessage';\nimport { useRuleHistoryRecords } from './useRuleHistoryRecords';\n\nexport const LIMIT_EVENTS = 5000; // limit is hard-capped at 5000 at the BE level.\nconst PAGE_SIZE = 100;\n\n/**\n *\n * This component displays a list of history events.\n * It fetches the events from the history api and displays them in a list.\n * The list is filtered by the labels in the filter variable and by the time range variable in the scene graph.\n */\ninterface HistoryEventsListProps {\n  timeRange: TimeRange;\n  valueInLabelFilter: VariableValue;\n  valueInStateToFilter: VariableValue;\n  valueInStateFromFilter: VariableValue;\n  addFilter: (key: string, value: string, type: FilterType) => void;\n}\nexport const HistoryEventsList = ({\n  timeRange,\n  valueInLabelFilter,\n  valueInStateToFilter,\n  valueInStateFromFilter,\n  addFilter,\n}: HistoryEventsListProps) => {\n  const from = timeRange?.from.unix();\n  const to = timeRange?.to.unix();\n\n  const {\n    data: stateHistory,\n    isLoading,\n    isError,\n    error,\n  } = stateHistoryApi.endpoints.getRuleHistory.useQuery({\n    from: from,\n    to: to,\n    limit: LIMIT_EVENTS,\n  });\n\n  const { historyRecords: historyRecordsNotSorted } = useRuleHistoryRecords(stateHistory, {\n    labels: valueInLabelFilter.toString(),\n    stateFrom: valueInStateFromFilter.toString(),\n    stateTo: valueInStateToFilter.toString(),\n  });\n\n  const historyRecords = historyRecordsNotSorted.sort((a, b) => b.timestamp - a.timestamp);\n\n  if (isError) {\n    return <HistoryErrorMessage error={error} />;\n  }\n\n  const maximumEventsReached = !isLoading && stateHistory?.data?.values?.[0]?.length === LIMIT_EVENTS;\n  if (maximumEventsReached) {\n    trackUseCentralHistoryMaxEventsReached({ from, to });\n  }\n\n  return (\n    <>\n      {maximumEventsReached && (\n        <Alert\n          severity=\"warning\"\n          title={t('alerting.central-alert-history.too-many-events.title', 'Unable to display all events')}\n        >\n          {t(\n            'alerting.central-alert-history.too-many-events.text',\n            'The selected time period has too many events to display. Diplaying the latest 5000 events. Try using a shorter time period.'\n          )}\n        </Alert>\n      )}\n      <LoadingIndicator visible={isLoading} />\n      <HistoryLogEvents logRecords={historyRecords} addFilter={addFilter} timeRange={timeRange} />\n    </>\n  );\n};\n\n// todo: this function has been copied from RuleList.v2.tsx, should be moved to a shared location\nconst LoadingIndicator = ({ visible = false }) => {\n  const [measureRef, { width }] = useMeasure<HTMLDivElement>();\n  return <div ref={measureRef}>{visible && <LoadingBar width={width} data-testid=\"loading-bar\" />}</div>;\n};\n\ninterface HistoryLogEventsProps {\n  logRecords: LogRecord[];\n  addFilter: (key: string, value: string, type: FilterType) => void;\n  timeRange: TimeRange;\n}\nfunction HistoryLogEvents({ logRecords, addFilter, timeRange }: HistoryLogEventsProps) {\n  const { page, pageItems, numberOfPages, onPageChange } = usePagination(logRecords, 1, PAGE_SIZE);\n  return (\n    <Stack direction=\"column\" gap={0}>\n      <ListHeader />\n      <ul>\n        {pageItems.map((record) => {\n          return (\n            <EventRow\n              key={record.timestamp + (record.line.fingerprint ?? '')}\n              record={record}\n              addFilter={addFilter}\n              timeRange={timeRange}\n            />\n          );\n        })}\n      </ul>\n      {/* This paginations improves the performance considerably , making the page load faster */}\n      <Pagination currentPage={page} numberOfPages={numberOfPages} onNavigate={onPageChange} hideWhenSinglePage />\n    </Stack>\n  );\n}\n\nfunction ListHeader() {\n  const styles = useStyles2(getStyles);\n  return (\n    <div className={styles.headerWrapper}>\n      <div className={styles.mainHeader}>\n        <div className={styles.timeCol}>\n          <Text variant=\"body\">\n            <Trans i18nKey=\"alerting.central-alert-history.details.header.timestamp\">Timestamp</Trans>\n          </Text>\n        </div>\n        <div className={styles.transitionCol}>\n          <Text variant=\"body\">\n            <Trans i18nKey=\"alerting.central-alert-history.details.header.state\">State</Trans>\n          </Text>\n        </div>\n        <div className={styles.alertNameCol}>\n          <Text variant=\"body\">\n            <Trans i18nKey=\"alerting.central-alert-history.details.header.alert-rule\">Alert rule</Trans>\n          </Text>\n        </div>\n        <div className={styles.labelsCol}>\n          <Text variant=\"body\">\n            <Trans i18nKey=\"alerting.central-alert-history.details.header.instance\">Instance</Trans>\n          </Text>\n        </div>\n      </div>\n    </div>\n  );\n}\n\ninterface EventRowProps {\n  record: LogRecord;\n  addFilter: (key: string, value: string, type: FilterType) => void;\n  timeRange: TimeRange;\n}\nfunction EventRow({ record, addFilter, timeRange }: EventRowProps) {\n  const styles = useStyles2(getStyles);\n  const [isCollapsed, setIsCollapsed] = useState(true);\n  function onLabelClick(label: string, value: string) {\n    addFilter(label, value, 'label');\n  }\n\n  return (\n    <Stack direction=\"column\" gap={0}>\n      <div\n        className={cx(styles.header, isCollapsed ? styles.collapsedHeader : styles.notCollapsedHeader)}\n        data-testid=\"event-row-header\"\n      >\n        <CollapseToggle\n          size=\"sm\"\n          className={styles.collapseToggle}\n          isCollapsed={isCollapsed}\n          onToggle={setIsCollapsed}\n        />\n        <Stack gap={0.5} direction={'row'} alignItems={'center'}>\n          <div className={styles.timeCol}>\n            <Timestamp time={record.timestamp} />\n          </div>\n          <div className={styles.transitionCol}>\n            <EventTransition previous={record.line.previous} current={record.line.current} addFilter={addFilter} />\n          </div>\n          <div className={styles.alertNameCol}>\n            {record.line.labels ? <AlertRuleName labels={record.line.labels} ruleUID={record.line.ruleUID} /> : null}\n          </div>\n          <div className={styles.labelsCol}>\n            <AlertLabels labels={record.line.labels ?? {}} size=\"xs\" onClick={onLabelClick} />\n          </div>\n        </Stack>\n      </div>\n      {!isCollapsed && (\n        <div className={styles.expandedRow}>\n          <EventDetails record={record} addFilter={addFilter} timeRange={timeRange} />\n        </div>\n      )}\n    </Stack>\n  );\n}\n\ninterface AlertRuleNameProps {\n  labels: Record<string, string>;\n  ruleUID?: string;\n}\nfunction AlertRuleName({ labels, ruleUID }: AlertRuleNameProps) {\n  const styles = useStyles2(getStyles);\n  const { pathname, search } = useLocation();\n  const returnTo = `${pathname}${search}`;\n  const alertRuleName = labels.alertname;\n  if (!ruleUID) {\n    return (\n      <Text>\n        <Trans i18nKey=\"alerting.central-alert-history.details.unknown-rule\">Unknown</Trans>\n      </Text>\n    );\n  }\n  const ruleViewUrl = createRelativeUrl(`/alerting/${GRAFANA_RULES_SOURCE_NAME}/${ruleUID}/view`, {\n    tab: 'history',\n    returnTo,\n  });\n  return (\n    <Tooltip content={alertRuleName ?? ''}>\n      <a href={ruleViewUrl} className={styles.alertName}>\n        {alertRuleName}\n      </a>\n    </Tooltip>\n  );\n}\n\ninterface EventTransitionProps {\n  previous: GrafanaAlertStateWithReason;\n  current: GrafanaAlertStateWithReason;\n  addFilter: (key: string, value: string, type: FilterType) => void;\n}\nfunction EventTransition({ previous, current, addFilter }: EventTransitionProps) {\n  return (\n    <Stack gap={0.5} direction={'row'}>\n      <EventState state={previous} addFilter={addFilter} type=\"from\" />\n      <Icon name=\"arrow-right\" size=\"lg\" />\n      <EventState state={current} addFilter={addFilter} type=\"to\" />\n    </Stack>\n  );\n}\n\ninterface StateIconProps {\n  iconName: IconName;\n  iconColor: string;\n  tooltipContent: string;\n  labelText: ReactElement;\n  showLabel: boolean;\n}\nconst StateIcon = ({ iconName, iconColor, tooltipContent, labelText, showLabel }: StateIconProps) => (\n  <Tooltip content={tooltipContent} placement=\"top\">\n    <Stack gap={0.5} direction={'row'} alignItems=\"center\">\n      <Icon name={iconName} size=\"md\" className={iconColor} />\n      {showLabel && (\n        <Text variant=\"body\" weight=\"light\">\n          {labelText}\n        </Text>\n      )}\n    </Stack>\n  </Tooltip>\n);\n\ninterface EventStateProps {\n  state: GrafanaAlertStateWithReason;\n  showLabel?: boolean;\n  addFilter: (key: string, value: string, type: FilterType) => void;\n  type: 'from' | 'to';\n}\nexport function EventState({ state, showLabel = false, addFilter, type }: EventStateProps) {\n  const styles = useStyles2(getStyles);\n  const toolTip = t('alerting.central-alert-history.details.no-recognized-state', 'No recognized state');\n  if (!isGrafanaAlertState(state) && !isAlertStateWithReason(state)) {\n    return (\n      <StateIcon\n        iconName=\"exclamation-triangle\"\n        tooltipContent={toolTip}\n        labelText={<Trans i18nKey=\"alerting.central-alert-history.details.unknown-event-state\">Unknown</Trans>}\n        showLabel={showLabel}\n        iconColor={styles.warningColor}\n      />\n    );\n  }\n  const baseState = mapStateWithReasonToBaseState(state);\n  const reason = mapStateWithReasonToReason(state);\n  interface StateConfig {\n    iconName: IconName;\n    iconColor: string;\n    tooltipContent: string;\n    labelText: ReactElement;\n  }\n  interface StateConfigMap {\n    [key: string]: StateConfig;\n  }\n  const stateConfig: StateConfigMap = {\n    Normal: {\n      iconName: 'check-circle',\n      iconColor: Boolean(reason) ? styles.warningColor : styles.normalColor,\n      tooltipContent: Boolean(reason) ? `Normal (${reason})` : 'Normal',\n      labelText: <Trans i18nKey=\"alerting.central-alert-history.details.state.normal\">Normal</Trans>,\n    },\n    Alerting: {\n      iconName: 'exclamation-circle',\n      iconColor: styles.alertingColor,\n      tooltipContent: 'Alerting',\n      labelText: <Trans i18nKey=\"alerting.central-alert-history.details.state.alerting\">Alerting</Trans>,\n    },\n    NoData: {\n      iconName: 'exclamation-triangle',\n      iconColor: styles.warningColor,\n      tooltipContent: 'Insufficient data',\n      labelText: <Trans i18nKey=\"alerting.central-alert-history.details.state.no-data\">No data</Trans>,\n    },\n    Error: {\n      iconName: 'exclamation-circle',\n      tooltipContent: 'Error',\n      iconColor: styles.warningColor,\n      labelText: <Trans i18nKey=\"alerting.central-alert-history.details.state.error\">Error</Trans>,\n    },\n    Pending: {\n      iconName: 'circle',\n      iconColor: styles.warningColor,\n      tooltipContent: Boolean(reason) ? `Pending (${reason})` : 'Pending',\n      labelText: <Trans i18nKey=\"alerting.central-alert-history.details.state.pending\">Pending</Trans>,\n    },\n    Recovering: {\n      iconName: 'circle',\n      iconColor: styles.warningColor,\n      tooltipContent: Boolean(reason) ? `Recovering (${reason})` : 'Recovering',\n      labelText: <Trans i18nKey=\"alerting.central-alert-history.details.state.recovering\">Recovering</Trans>,\n    },\n  };\n  function onStateClick() {\n    addFilter('state', baseState, type === 'from' ? 'stateFrom' : 'stateTo');\n  }\n\n  const config = stateConfig[baseState] || { iconName: 'exclamation-triangle', tooltipContent: 'Unknown State' };\n  return (\n    <div\n      onClick={onStateClick}\n      onKeyDown={(e) => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          onStateClick();\n        }\n      }}\n      className={styles.state}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <StateIcon {...config} showLabel={showLabel} />\n    </div>\n  );\n}\n\ninterface TimestampProps {\n  time: number; // epoch timestamp\n}\n\nconst Timestamp = ({ time }: TimestampProps) => {\n  const dateTime = new Date(time);\n  const formattedDate = dateTime.toLocaleString('en-US', {\n    month: 'long',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit',\n    hour12: false,\n  });\n\n  return (\n    <Text variant=\"body\" weight=\"light\">\n      {formattedDate}\n    </Text>\n  );\n};\n\nexport default withErrorBoundary(HistoryEventsList, { style: 'page' });\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    header: css({\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      padding: `${theme.spacing(1)} ${theme.spacing(1)} ${theme.spacing(1)} 0`,\n      flexWrap: 'nowrap',\n      '&:hover': {\n        backgroundColor: theme.components.table.rowHoverBackground,\n      },\n    }),\n    collapsedHeader: css({\n      borderBottom: `1px solid ${theme.colors.border.weak}`,\n    }),\n    notCollapsedHeader: css({\n      borderBottom: 'none',\n    }),\n\n    collapseToggle: css({\n      background: 'none',\n      border: 'none',\n      marginTop: `-${theme.spacing(1)}`,\n      marginBottom: `-${theme.spacing(1)}`,\n\n      svg: {\n        marginBottom: 0,\n      },\n    }),\n    normalColor: css({\n      fill: theme.colors.success.text,\n    }),\n    warningColor: css({\n      fill: theme.colors.warning.text,\n    }),\n    alertingColor: css({\n      fill: theme.colors.error.text,\n    }),\n    timeCol: css({\n      width: '150px',\n    }),\n    transitionCol: css({\n      width: '80px',\n    }),\n    alertNameCol: css({\n      width: '300px',\n    }),\n    labelsCol: css({\n      display: 'flex',\n      overflow: 'hidden',\n      alignItems: 'center',\n      paddingRight: theme.spacing(2),\n      flex: 1,\n    }),\n    alertName: css({\n      whiteSpace: 'nowrap',\n      cursor: 'pointer',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      display: 'block',\n      color: theme.colors.text.link,\n    }),\n    expandedRow: css({\n      padding: theme.spacing(2),\n      marginLeft: theme.spacing(2),\n      borderLeft: `1px solid ${theme.colors.border.weak}`,\n    }),\n    colorIcon: css({\n      color: theme.colors.primary.text,\n      '&:hover': {\n        opacity: 0.8,\n      },\n    }),\n    state: css({\n      '&:hover': {\n        opacity: 0.8,\n        cursor: 'pointer',\n      },\n    }),\n    headerWrapper: css({\n      borderBottom: `1px solid ${theme.colors.border.weak}`,\n    }),\n    mainHeader: css({\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      flexWrap: 'nowrap',\n      marginLeft: '30px',\n      padding: `${theme.spacing(1)} ${theme.spacing(1)} ${theme.spacing(1)} 0`,\n      gap: theme.spacing(0.5),\n    }),\n  };\n};\n\n/**\n * This is a scene object that displays a list of history events.\n */\n\nexport class HistoryEventsListObject extends SceneObjectBase {\n  public static Component = HistoryEventsListObjectRenderer;\n\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    variableNames: [LABELS_FILTER, STATE_FILTER_FROM, STATE_FILTER_TO],\n  });\n}\n\nexport type FilterType = 'label' | 'stateFrom' | 'stateTo';\n\nexport function HistoryEventsListObjectRenderer({ model }: SceneComponentProps<HistoryEventsListObject>) {\n  // This make sure the component is re-rendered when the variables change\n  model.useState();\n\n  const { value: timeRange } = sceneGraph.getTimeRange(model).useState(); // get time range from scene graph\n\n  const labelsFiltersVariable = sceneGraph.lookupVariable(LABELS_FILTER, model);\n  const stateToFilterVariable = sceneGraph.lookupVariable(STATE_FILTER_TO, model);\n  const stateFromFilterVariable = sceneGraph.lookupVariable(STATE_FILTER_FROM, model);\n\n  const addFilter = (key: string, value: string, type: FilterType) => {\n    const newFilterToAdd = `${key}=${value}`;\n    trackUseCentralHistoryFilterByClicking({ type, key, value });\n    if (type === 'stateTo' && stateToFilterVariable instanceof CustomVariable) {\n      stateToFilterVariable.changeValueTo(value);\n    }\n    if (type === 'stateFrom' && stateFromFilterVariable instanceof CustomVariable) {\n      stateFromFilterVariable.changeValueTo(value);\n    }\n    if (type === 'label' && labelsFiltersVariable instanceof TextBoxVariable) {\n      const finalFilter = combineMatcherStrings(labelsFiltersVariable.state.value.toString(), newFilterToAdd);\n      labelsFiltersVariable.setValue(finalFilter);\n    }\n  };\n\n  if (\n    stateToFilterVariable instanceof CustomVariable &&\n    stateFromFilterVariable instanceof CustomVariable &&\n    labelsFiltersVariable instanceof TextBoxVariable\n  ) {\n    return (\n      <HistoryEventsList\n        timeRange={timeRange}\n        valueInLabelFilter={labelsFiltersVariable.state.value}\n        addFilter={addFilter}\n        valueInStateToFilter={stateToFilterVariable.state.value}\n        valueInStateFromFilter={stateFromFilterVariable.state.value}\n      />\n    );\n  } else {\n    return null;\n  }\n}\n","import { useEffect, useMemo } from 'react';\n\nimport { DataQueryRequest, DataQueryResponse, TestDataSourceResponse } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { RuntimeDataSource, sceneUtils } from '@grafana/scenes';\nimport { DataQuery } from '@grafana/schema';\nimport { getTimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { dispatch } from 'app/store/store';\n\nimport { stateHistoryApi } from '../../../api/stateHistoryApi';\nimport { DataSourceInformation } from '../../../home/Insights';\n\nimport { LIMIT_EVENTS } from './EventListSceneObject';\nimport { historyResultToDataFrame } from './utils';\n\nconst historyDataSourceUid = '__history_api_ds_uid__';\nconst historyDataSourcePluginId = '__history_api_ds_pluginId__';\n\nexport const alertStateHistoryDatasource: DataSourceInformation = {\n  type: historyDataSourcePluginId,\n  uid: historyDataSourceUid,\n  settings: undefined,\n};\n\nexport function useRegisterHistoryRuntimeDataSource() {\n  // we need to memoize the datasource so it is not registered multiple times for each render\n  const ds = useMemo(() => new HistoryAPIDatasource(historyDataSourceUid, historyDataSourcePluginId), []);\n  useEffect(() => {\n    try {\n      // avoid showing error when the datasource is already registered\n      sceneUtils.registerRuntimeDataSource({ dataSource: ds });\n    } catch (e) {}\n  }, [ds]);\n}\n\ninterface HistoryAPIQuery extends DataQuery {\n  labels?: string;\n  stateFrom?: string;\n  stateTo?: string;\n}\n\n/**\n * This class is a runtime datasource that fetches the events from the history api.\n * The events are grouped by alert instance and then converted to a DataFrame list.\n * The DataFrame list is then grouped by time.\n * This allows us to filter the events by labels.\n * The result is a timeseries panel that shows the events for the selected time range and filtered by labels.\n */\nclass HistoryAPIDatasource extends RuntimeDataSource<HistoryAPIQuery> {\n  constructor(pluginId: string, uid: string) {\n    super(uid, pluginId);\n  }\n\n  async query(request: DataQueryRequest<HistoryAPIQuery>): Promise<DataQueryResponse> {\n    const from = request.range.from.unix();\n    const to = request.range.to.unix();\n    // get the query from the request\n    const query = request.targets[0]!;\n\n    const templateSrv = getTemplateSrv();\n\n    // we get the labels, stateTo and stateFrom from the query variables\n    const labels = templateSrv.replace(query.labels ?? '', request.scopedVars);\n    const stateTo = templateSrv.replace(query.stateTo ?? '', request.scopedVars);\n    const stateFrom = templateSrv.replace(query.stateFrom ?? '', request.scopedVars);\n\n    const historyResult = await getHistory(from, to);\n\n    return {\n      data: historyResultToDataFrame(historyResult, { stateTo, stateFrom, labels }),\n    };\n  }\n\n  testDatasource(): Promise<TestDataSourceResponse> {\n    return Promise.resolve({ status: 'success', message: 'Data source is working', title: 'Success' });\n  }\n}\n\n/**\n * Fetch the history events from the history api.\n * @param from the start time\n * @param to the end time\n * @returns the history events only filtered by time\n */\nexport const getHistory = (from: number, to: number) => {\n  return dispatch(\n    stateHistoryApi.endpoints.getRuleHistory.initiate(\n      {\n        from: from,\n        to: to,\n        limit: LIMIT_EVENTS,\n      },\n      {\n        forceRefetch: Boolean(getTimeSrv().getAutoRefreshInteval().interval), // force refetch in case we are using the refresh option\n      }\n    )\n  ).unwrap();\n};\n","import { css } from '@emotion/css';\nimport { useEffect, useMemo } from 'react';\n\nimport { GrafanaTheme2, VariableHide } from '@grafana/data';\nimport {\n  CustomVariable,\n  EmbeddedScene,\n  PanelBuilders,\n  SceneComponentProps,\n  SceneControlsSpacer,\n  SceneFlexItem,\n  SceneFlexLayout,\n  SceneObjectBase,\n  SceneQueryRunner,\n  SceneReactObject,\n  SceneRefreshPicker,\n  SceneTimePicker,\n  SceneTimeRange,\n  SceneVariableSet,\n  TextBoxVariable,\n  VariableDependencyConfig,\n  VariableValueSelectors,\n  sceneGraph,\n  useUrlSync,\n} from '@grafana/scenes';\nimport { GraphDrawStyle, VisibilityMode } from '@grafana/schema/dist/esm/index';\nimport {\n  Button,\n  GraphGradientMode,\n  Icon,\n  LegendDisplayMode,\n  LineInterpolation,\n  ScaleDistribution,\n  StackingMode,\n  Text,\n  Tooltip,\n  TooltipDisplayMode,\n  useStyles2,\n} from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nimport { LogMessages, logInfo } from '../../../Analytics';\n\nimport { alertStateHistoryDatasource, useRegisterHistoryRuntimeDataSource } from './CentralHistoryRuntimeDataSource';\nimport { HistoryEventsListObject } from './EventListSceneObject';\n\nexport const LABELS_FILTER = 'LABELS_FILTER';\nexport const STATE_FILTER_TO = 'STATE_FILTER_TO';\nexport const STATE_FILTER_FROM = 'STATE_FILTER_FROM';\n/**\n *\n * This scene shows the history of the alert state changes.\n * It shows a timeseries panel with the alert state changes and a list of the events.\n * The events in the panel are fetched from the history api, through a runtime datasource.\n * The events in the list are fetched direclty from the history api.\n * Main scene renders two children scene objects, one for the timeseries panel and one for the list of events.\n * Both share time range and filter variable from the parent scene.\n */\n\nexport const StateFilterValues = {\n  all: 'all',\n  firing: 'Alerting',\n  normal: 'Normal',\n  pending: 'Pending',\n  recovering: 'Recovering',\n} as const;\n\nexport const CentralAlertHistoryScene = () => {\n  //track the loading of the central alert state history\n  useEffect(() => {\n    logInfo(LogMessages.loadedCentralAlertStateHistory);\n  }, []);\n\n  useRegisterHistoryRuntimeDataSource(); // register the runtime datasource for the history api.\n\n  const scene = useMemo(() => {\n    // create the variables for the filters\n    // textbox variable for filtering by labels\n    const labelsFilterVariable = new TextBoxVariable({\n      name: LABELS_FILTER,\n      label: 'Labels: ',\n    });\n\n    //custom variable for filtering by the current state\n    const transitionsToFilterVariable = new CustomVariable({\n      name: STATE_FILTER_TO,\n      value: StateFilterValues.all,\n      label: 'End state:',\n      hide: VariableHide.dontHide,\n      query: `All : ${StateFilterValues.all}, To Firing : ${StateFilterValues.firing},To Normal : ${StateFilterValues.normal},To Pending : ${StateFilterValues.pending},To Recovering : ${StateFilterValues.recovering}`,\n    });\n\n    //custom variable for filtering by the previous state\n    const transitionsFromFilterVariable = new CustomVariable({\n      name: STATE_FILTER_FROM,\n      value: StateFilterValues.all,\n      label: 'Start state:',\n      hide: VariableHide.dontHide,\n      query: `All : ${StateFilterValues.all}, From Firing : ${StateFilterValues.firing},From Normal : ${StateFilterValues.normal},From Pending : ${StateFilterValues.pending},From Recovering : ${StateFilterValues.recovering}`,\n    });\n\n    return new EmbeddedScene({\n      controls: [\n        new SceneReactObject({\n          component: LabelFilter,\n        }),\n        new SceneReactObject({\n          component: FilterInfo,\n        }),\n        new VariableValueSelectors({}),\n        new ClearFilterButtonScenesObject({}),\n        new SceneControlsSpacer(),\n        new SceneTimePicker({}),\n        new SceneRefreshPicker({}),\n      ],\n      // use default time range as from 1 hour ago to now, as the limit of the history api is 5000 events,\n      // and using a wider time range might lead to showing gaps in the events list and the chart.\n      $timeRange: new SceneTimeRange({\n        from: 'now-1h',\n        to: 'now',\n      }),\n      $variables: new SceneVariableSet({\n        variables: [labelsFilterVariable, transitionsFromFilterVariable, transitionsToFilterVariable],\n      }),\n      body: new SceneFlexLayout({\n        direction: 'column',\n        children: [\n          getEventsScenesFlexItem(),\n          new SceneFlexItem({\n            body: new HistoryEventsListObject({}),\n          }),\n        ],\n      }),\n    });\n  }, []);\n\n  // we need to call this to sync the url with the scene state\n  const isUrlSyncInitialized = useUrlSync(scene);\n\n  if (!isUrlSyncInitialized) {\n    return null;\n  }\n\n  return <scene.Component model={scene} />;\n};\n\n/**\n * Creates a SceneQueryRunner with the datasource information for the runtime datasource.\n * @param datasource the datasource information for the runtime datasource\n * @returns the SceneQueryRunner\n */\nfunction getQueryRunnerForAlertHistoryDataSource() {\n  const query = new SceneQueryRunner({\n    datasource: alertStateHistoryDatasource,\n    queries: [\n      {\n        refId: 'A',\n        labels: '${LABELS_FILTER}',\n        stateFrom: '${STATE_FILTER_FROM}',\n        stateTo: '${STATE_FILTER_TO}',\n      },\n    ],\n  });\n  return query;\n}\n/**\n * This function creates a SceneFlexItem with a timeseries panel that shows the events.\n * The query uses a runtime datasource that fetches the events from the history api.\n */\nexport function getEventsScenesFlexItem() {\n  return new SceneFlexItem({\n    minHeight: 300,\n    ySizing: 'content',\n    body: PanelBuilders.timeseries()\n      .setTitle('Alert Events')\n      .setDescription(\n        'Each alert event represents an alert instance that changed its state at a particular point in time. The history of the data is displayed over a period of time.'\n      )\n      .setData(getQueryRunnerForAlertHistoryDataSource())\n      .setColor({ mode: 'continuous-BlPu' })\n      .setCustomFieldConfig('fillOpacity', 100)\n      .setCustomFieldConfig('drawStyle', GraphDrawStyle.Bars)\n      .setCustomFieldConfig('lineInterpolation', LineInterpolation.Linear)\n      .setCustomFieldConfig('lineWidth', 1)\n      .setCustomFieldConfig('barAlignment', 0)\n      .setCustomFieldConfig('spanNulls', false)\n      .setCustomFieldConfig('insertNulls', false)\n      .setCustomFieldConfig('showPoints', VisibilityMode.Auto)\n      .setCustomFieldConfig('pointSize', 5)\n      .setCustomFieldConfig('stacking', { mode: StackingMode.None, group: 'A' })\n      .setCustomFieldConfig('gradientMode', GraphGradientMode.Hue)\n      .setCustomFieldConfig('scaleDistribution', { type: ScaleDistribution.Linear })\n      .setOption('legend', { showLegend: false, displayMode: LegendDisplayMode.Hidden })\n      .setOption('tooltip', { mode: TooltipDisplayMode.Single })\n      .setNoValue('No events found')\n      .build(),\n  });\n}\n\nexport class ClearFilterButtonScenesObject extends SceneObjectBase {\n  public static Component = ClearFilterButtonObjectRenderer;\n\n  protected _variableDependency = new VariableDependencyConfig(this, {\n    variableNames: [LABELS_FILTER, STATE_FILTER_FROM, STATE_FILTER_TO],\n  });\n}\n\nexport function ClearFilterButtonObjectRenderer({ model }: SceneComponentProps<ClearFilterButtonScenesObject>) {\n  // This make sure the component is re-rendered when the variables change\n  model.useState();\n\n  const labelsFilter = sceneGraph.interpolate(model, '${LABELS_FILTER}');\n  const stateTo = sceneGraph.interpolate(model, '${STATE_FILTER_TO}');\n  const stateFrom = sceneGraph.interpolate(model, '${STATE_FILTER_FROM}');\n\n  // if no filter is active, return null\n  if (!labelsFilter && stateTo === StateFilterValues.all && stateFrom === StateFilterValues.all) {\n    return null;\n  }\n\n  const onClearFilter = () => {\n    const labelsFiltersVariable = sceneGraph.lookupVariable(LABELS_FILTER, model);\n    if (labelsFiltersVariable instanceof TextBoxVariable) {\n      labelsFiltersVariable.setValue('');\n    }\n\n    const stateToFilterVariable = sceneGraph.lookupVariable(STATE_FILTER_TO, model);\n    if (stateToFilterVariable instanceof CustomVariable) {\n      stateToFilterVariable.changeValueTo(StateFilterValues.all);\n    }\n\n    const stateFromFilterVariable = sceneGraph.lookupVariable(STATE_FILTER_FROM, model);\n    if (stateFromFilterVariable instanceof CustomVariable) {\n      stateFromFilterVariable.changeValueTo(StateFilterValues.all);\n    }\n  };\n\n  return (\n    <Tooltip content=\"Clear filter\">\n      <Button variant={'secondary'} icon=\"times\" onClick={onClearFilter}>\n        <Trans i18nKey=\"alerting.central-alert-history.filter.clear\">Clear filters</Trans>\n      </Button>\n    </Tooltip>\n  );\n}\n\nconst LabelFilter = () => {\n  const styles = useStyles2(getStyles);\n  return (\n    <div className={styles.filterLabelContainer}>\n      <Text variant=\"body\" weight=\"light\" color=\"secondary\">\n        <Trans i18nKey=\"alerting.central-alert-history.filterBy\">Filter by:</Trans>\n      </Text>\n    </div>\n  );\n};\n\nconst FilterInfo = () => {\n  const styles = useStyles2(getStyles);\n  return (\n    <div className={styles.filterInfoContainer}>\n      <Tooltip\n        content={\n          <div>\n            <Trans i18nKey=\"alerting.central-alert-history.filter.info.label1\">\n              Filter events using label querying without spaces, ex:\n            </Trans>\n            <pre>{`{severity=\"critical\", instance=~\"cluster-us-.+\"}`}</pre>\n            <Trans i18nKey=\"alerting.central-alert-history.filter.info.label2\">Invalid use of spaces:</Trans>\n            <pre>{`{severity= \"critical\"}`}</pre>\n            <pre>{`{severity =\"critical\"}`}</pre>\n            <Trans i18nKey=\"alerting.central-alert-history.filter.info.label3\">Valid use of spaces:</Trans>\n            <pre>{`{severity=\" critical\"}`}</pre>\n            <Trans i18nKey=\"alerting.central-alert-history.filter.info.label4\">\n              Filter alerts using label querying without braces, ex:\n            </Trans>\n            <pre>{`severity=\"critical\", instance=~\"cluster-us-.+\"`}</pre>\n          </div>\n        }\n      >\n        <Icon name=\"info-circle\" size=\"sm\" />\n      </Tooltip>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    filterInfoContainer: css({\n      padding: '0',\n      alignSelf: 'center',\n      marginRight: theme.spacing(-1),\n    }),\n    filterLabelContainer: css({\n      padding: '0',\n      alignSelf: 'center',\n    }),\n  };\n};\n","import { withPageErrorBoundary } from '../../../withPageErrorBoundary';\nimport { AlertingPageWrapper } from '../../AlertingPageWrapper';\n\nimport { CentralAlertHistoryScene } from './CentralAlertHistoryScene';\n\nfunction HistoryPage() {\n  return (\n    <AlertingPageWrapper navId=\"alerts-history\" isLoading={false}>\n      <CentralAlertHistoryScene />\n    </AlertingPageWrapper>\n  );\n}\n\nexport default withPageErrorBoundary(HistoryPage);\n"],"names":["CollapseToggle","isCollapsed","onToggle","idControlled","className","text","size","restOfProps","MetaText","children","icon","color","direction","rest","styles","getStyles","interactive","rowDirection","alignItems","gap","HistoryErrorMessage","error","EntityNotFound","title","errorStr","Alert","GROUPING_INTERVAL","QUERY_PARAM_PREFIX","emptyFilters","historyResultToDataFrame","data","filters","stateTo","stateFrom","tsValues","lines","logRecords","acc","timestamp","index","line","baseStateTo","baseStateFrom","stateToMatch","stateFromMatch","logRecordsByInstance","record","dataFrames","key","records","logRecordsToDataFrame","groupDataFramesByTimeAndFilterByLabels","getLabelsFilterInQueryParams","getStateFilterToInQueryParams","getStateFilterFromInQueryParams","labelsFilterValue","timeFieldList","frame","labels","matchers","field","groupedTimeFields","tf","time","newTimeField","countField","group","instanceLabels","timeField","timeIndex","_","i","logRecordsToDataFrameForState","theme","stateValues","EventDetails","addFilter","timeRange","ruleUID","labelsInInstance","identifier","loading","rule","useCombinedRule","Text","Stack","StateTransition","ValueInTransition","Annotations","StateVisualization","useRuleHistoryRecordsForTheInstance","labelsForTheInstance","stateHistory","timestamps","filterMatchers","filteredGroupedLines","useGetRuleHistoryQuery","stateHistoryApi","isLoading","isError","LIMIT_EVENTS","value","frameSubset","frameTimeRange","numberOfTransitions","NumberTransitions","LogTimelineViewer","EventState","Icon","annotations","name","capitalizedName","values","transitions","ruleHistoryToRecords","filterMatch","PAGE_SIZE","HistoryEventsList","valueInLabelFilter","valueInStateToFilter","valueInStateFromFilter","from","to","historyRecordsNotSorted","historyRecords","a","b","maximumEventsReached","LoadingIndicator","HistoryLogEvents","visible","measureRef","width","useMeasure","LoadingBar","page","pageItems","numberOfPages","onPageChange","usePagination","ListHeader","EventRow","Pagination","setIsCollapsed","onLabelClick","label","Timestamp","EventTransition","AlertRuleName","AlertLabels","pathname","search","returnTo","alertRuleName","ruleViewUrl","Tooltip","previous","current","StateIcon","iconName","iconColor","tooltipContent","labelText","showLabel","state","type","toolTip","baseState","reason","stateConfig","onStateClick","config","e","formattedDate","HistoryEventsListObject","HistoryEventsListObjectRenderer","model","labelsFiltersVariable","stateToFilterVariable","stateFromFilterVariable","newFilterToAdd","finalFilter","historyDataSourceUid","historyDataSourcePluginId","alertStateHistoryDatasource","useRegisterHistoryRuntimeDataSource","ds","HistoryAPIDatasource","pluginId","uid","request","query","templateSrv","historyResult","getHistory","CentralAlertHistoryScene","scene","labelsFilterVariable","transitionsToFilterVariable","transitionsFromFilterVariable","LabelFilter","FilterInfo","ClearFilterButtonScenesObject","getEventsScenesFlexItem","getQueryRunnerForAlertHistoryDataSource","ClearFilterButtonObjectRenderer","labelsFilter","onClearFilter","Button","HistoryPage","AlertingPageWrapper","withPageErrorBoundary"],"sourceRoot":""}