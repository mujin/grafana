{"version":3,"file":"3952.f41d28029a9728a35614.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/CollapseToggle.tsx","webpack://grafana/./public/app/features/alerting/unified/components/MetaText.tsx","webpack://grafana/./public/app/features/alerting/unified/components/common/TextVariants.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/components/UnusedBadge.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/ContactPointHeader.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/components/Modals.tsx","webpack://grafana/./public/app/plugins/datasource/alertmanager/consts.ts","webpack://grafana/./public/app/features/alerting/unified/types/contact-points.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/grafanaAppReceivers/ReceiverMetadataBadge.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/ContactPoint.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaReceiverExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaReceiversExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/useExportContactPoint.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/FileExportPreview.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaExportDrawer.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/providers.ts","webpack://grafana/./public/app/features/alerting/unified/components/permissions/ManagePermissions.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/RuleInspector.tsx"],"sourcesContent":["import { HTMLAttributes } from 'react';\n\nimport { Button, IconSize } from '@grafana/ui';\n\ninterface Props extends HTMLAttributes<HTMLButtonElement> {\n  isCollapsed: boolean;\n  onToggle: (isCollapsed: boolean) => void;\n  // Todo: this should be made compulsory for a11y purposes\n  idControlled?: string;\n  size?: IconSize;\n  className?: string;\n  text?: string;\n}\n\nexport const CollapseToggle = ({\n  isCollapsed,\n  onToggle,\n  idControlled,\n  className,\n  text,\n  size = 'xl',\n  ...restOfProps\n}: Props) => {\n  return (\n    <Button\n      type=\"button\"\n      fill=\"text\"\n      variant=\"secondary\"\n      aria-expanded={!isCollapsed}\n      aria-controls={idControlled}\n      className={className}\n      icon={isCollapsed ? 'angle-right' : 'angle-down'}\n      onClick={() => onToggle(!isCollapsed)}\n      {...restOfProps}\n    >\n      {text}\n    </Button>\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport { ComponentProps, HTMLAttributes } from 'react';\n\nimport { Icon, IconName, Stack, Text, useStyles2 } from '@grafana/ui';\n\ninterface Props extends HTMLAttributes<HTMLDivElement> {\n  icon?: IconName;\n  direction?: 'row' | 'column';\n  color?: ComponentProps<typeof Text>['color'];\n}\n\nconst MetaText = ({ children, icon, color = 'secondary', direction = 'row', ...rest }: Props) => {\n  const styles = useStyles2(getStyles);\n  const interactive = typeof rest.onClick === 'function';\n\n  const rowDirection = direction === 'row';\n  const alignItems = rowDirection ? 'center' : 'flex-start';\n  const gap = rowDirection ? 0.5 : 0;\n\n  return (\n    <div\n      className={cx({\n        [styles.interactive]: interactive,\n      })}\n      // allow passing ARIA and data- attributes\n      {...rest}\n    >\n      <Text variant=\"bodySmall\" color={color}>\n        <Stack direction={direction} alignItems={alignItems} gap={gap} wrap={'wrap'}>\n          {icon && <Icon size=\"xs\" name={icon} />}\n          {children}\n        </Stack>\n      </Text>\n    </div>\n  );\n};\n\nconst getStyles = () => ({\n  interactive: css({\n    cursor: 'pointer',\n  }),\n});\n\nexport { MetaText };\n","// These are convenience components to deal with i18n shenanigans\n// (see https://github.com/grafana/grafana/blob/main/contribute/internationalization.md#jsx)\n// These help when we need to interpolate variables inside translated strings,\n// where we need to style them differently\n\nimport { Text } from '@grafana/ui';\n\nexport const PrimaryText = ({ content }: { content: string }) => <Text color=\"primary\">{content}</Text>;\nexport const CodeText = ({ content }: { content: string }) => <Text variant=\"code\">{content}</Text>;\n","import { Badge } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nexport const UnusedContactPointBadge = () => (\n  <Badge\n    text={t('alerting.unused-contact-point-badge.text-unused', 'Unused')}\n    aria-label={t('alerting.unused-contact-point-badge.aria-label-unused', 'unused')}\n    color=\"orange\"\n    icon=\"exclamation-triangle\"\n    tooltip=\"This contact point is not used in any notification policy or alert rule\"\n  />\n);\n","import { css } from '@emotion/css';\nimport { Fragment, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Dropdown, LinkButton, Menu, Stack, Text, TextLink, Tooltip, useStyles2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport ConditionalWrap from 'app/features/alerting/unified/components/ConditionalWrap';\nimport { useExportContactPoint } from 'app/features/alerting/unified/components/contact-points/useExportContactPoint';\nimport { ManagePermissionsDrawer } from 'app/features/alerting/unified/components/permissions/ManagePermissions';\nimport { useAlertmanager } from 'app/features/alerting/unified/state/AlertmanagerContext';\nimport { K8sAnnotations } from 'app/features/alerting/unified/utils/k8s/constants';\nimport {\n  canDeleteEntity,\n  canEditEntity,\n  getAnnotation,\n  shouldUseK8sApi,\n} from 'app/features/alerting/unified/utils/k8s/utils';\n\nimport { AlertmanagerAction, useAlertmanagerAbility } from '../../hooks/useAbilities';\nimport { createRelativeUrl } from '../../utils/url';\nimport MoreButton from '../MoreButton';\nimport { ProvisioningBadge } from '../Provisioning';\nimport { Spacer } from '../Spacer';\n\nimport { UnusedContactPointBadge } from './components/UnusedBadge';\nimport { ContactPointWithMetadata, showManageContactPointPermissions } from './utils';\n\ninterface ContactPointHeaderProps {\n  contactPoint: ContactPointWithMetadata;\n  onDelete: (contactPoint: ContactPointWithMetadata) => void;\n}\n\nexport const ContactPointHeader = ({ contactPoint, onDelete }: ContactPointHeaderProps) => {\n  const { name, id, provisioned, policies = [] } = contactPoint;\n  const styles = useStyles2(getStyles);\n  const [showPermissionsDrawer, setShowPermissionsDrawer] = useState(false);\n  const { selectedAlertmanager } = useAlertmanager();\n\n  const usingK8sApi = shouldUseK8sApi(selectedAlertmanager!);\n\n  const [exportSupported, exportAllowed] = useAlertmanagerAbility(AlertmanagerAction.ExportContactPoint);\n  const [editSupported, editAllowed] = useAlertmanagerAbility(AlertmanagerAction.UpdateContactPoint);\n  const [deleteSupported, deleteAllowed] = useAlertmanagerAbility(AlertmanagerAction.UpdateContactPoint);\n  const [ExportDrawer, openExportDrawer] = useExportContactPoint();\n\n  const showManagePermissions = showManageContactPointPermissions(selectedAlertmanager!, contactPoint);\n\n  const regularPolicyReferences = policies.filter((ref) => ref.route.type !== 'auto-generated');\n\n  const k8sRoutesInUse = getAnnotation(contactPoint, K8sAnnotations.InUseRoutes);\n  /**\n   * Number of policies that reference this contact point\n   *\n   * When the k8s API is being used, this number will only be the regular policies\n   * (will not include the auto generated simplified routing policies in the count)\n   */\n  const numberOfPolicies = usingK8sApi ? Number(k8sRoutesInUse) : policies.length;\n\n  const numberOfPoliciesPreventingDeletion = usingK8sApi ? Number(k8sRoutesInUse) : regularPolicyReferences.length;\n\n  /** Number of rules that use this contact point for simplified routing */\n  const numberOfRules = Number(getAnnotation(contactPoint, K8sAnnotations.InUseRules)) || 0;\n\n  /**\n   * Is the contact point referenced by anything such as notification policies or as a simplified routing contact point?\n   *\n   * Used to determine whether to show the \"Unused\" badge\n   */\n  const isReferencedByAnything = usingK8sApi ? Boolean(numberOfPolicies || numberOfRules) : policies.length > 0;\n  /** Does the current user have permissions to edit the contact point? */\n  const hasAbilityToEdit = canEditEntity(contactPoint) || editAllowed;\n  /** Can the contact point actually be edited via the UI? */\n  const contactPointIsEditable = !provisioned;\n  /** Given the alertmanager, the user's permissions, and the state of the contact point - can it actually be edited? */\n  const canEdit = editSupported && hasAbilityToEdit && contactPointIsEditable;\n\n  /** Does the current user have permissions to delete the contact point? */\n  const hasAbilityToDelete = canDeleteEntity(contactPoint) || deleteAllowed;\n  /** Can the contact point actually be deleted, regardless of permissions? i.e. ensuring it isn't provisioned and isn't referenced elsewhere */\n  const contactPointIsDeleteable = !provisioned && !numberOfPoliciesPreventingDeletion && !numberOfRules;\n  /** Given the alertmanager, the user's permissions, and the state of the contact point - can it actually be deleted? */\n  const canBeDeleted = deleteSupported && hasAbilityToDelete && contactPointIsDeleteable;\n\n  const menuActions: JSX.Element[] = [];\n  if (showManagePermissions) {\n    menuActions.push(\n      <Fragment key=\"manage-permissions\">\n        <Menu.Item\n          icon=\"unlock\"\n          label={t('alerting.contact-point-header.label-manage-permissions', 'Manage permissions')}\n          onClick={() => setShowPermissionsDrawer(true)}\n        />\n      </Fragment>\n    );\n  }\n\n  if (exportSupported) {\n    menuActions.push(\n      <Fragment key=\"export-contact-point\">\n        <Menu.Item\n          icon=\"download-alt\"\n          label={t('alerting.contact-point-header.export-label-export', 'Export')}\n          ariaLabel=\"export\"\n          disabled={!exportAllowed}\n          data-testid=\"export\"\n          onClick={() => openExportDrawer(name)}\n        />\n        <Menu.Divider />\n      </Fragment>\n    );\n  }\n\n  if (deleteSupported) {\n    const cannotDeleteNoPermissions = t(\n      'alerting.contact-points.delete-reasons.no-permissions',\n      'You do not have the required permission to delete this contact point'\n    );\n    const cannotDeleteProvisioned = t(\n      'alerting.contact-points.delete-reasons.provisioned',\n      'Contact point is provisioned and cannot be deleted via the UI'\n    );\n    const cannotDeletePolicies = t(\n      'alerting.contact-points.delete-reasons.policies',\n      'Contact point is referenced by one or more notification policies'\n    );\n    const cannotDeleteRules = t(\n      'alerting.contact-points.delete-reasons.rules',\n      'Contact point is referenced by one or more alert rules'\n    );\n\n    const reasonsDeleteIsDisabled = [\n      !hasAbilityToDelete ? cannotDeleteNoPermissions : '',\n      provisioned ? cannotDeleteProvisioned : '',\n      numberOfPoliciesPreventingDeletion > 0 ? cannotDeletePolicies : '',\n      numberOfRules ? cannotDeleteRules : '',\n    ].filter(Boolean);\n\n    const deleteTooltipContent = (\n      <>\n        <Trans i18nKey=\"alerting.contact-points.delete-reasons.heading\">\n          Contact point cannot be deleted for the following reasons:\n        </Trans>\n        <br />\n        {reasonsDeleteIsDisabled.map((reason) => (\n          <li key={reason}>{reason}</li>\n        ))}\n      </>\n    );\n\n    menuActions.push(\n      <ConditionalWrap\n        key=\"delete-contact-point\"\n        shouldWrap={!canBeDeleted}\n        wrap={(children) => (\n          <Tooltip content={deleteTooltipContent} placement=\"top\">\n            <span>{children}</span>\n          </Tooltip>\n        )}\n      >\n        <Menu.Item\n          label={t('alerting.contact-point-header.label-delete', 'Delete')}\n          ariaLabel=\"delete\"\n          icon=\"trash-alt\"\n          destructive\n          disabled={!canBeDeleted}\n          onClick={() => onDelete(contactPoint)}\n        />\n      </ConditionalWrap>\n    );\n  }\n\n  const referencedByPoliciesText = t('alerting.contact-points.used-by', 'Used by {{ count }} notification policy', {\n    count: numberOfPolicies,\n  });\n\n  const referencedByRulesText = t('alerting.contact-points.used-by-rules', 'Used by {{ count }} alert rule', {\n    count: numberOfRules,\n  });\n\n  // TOOD: Tidy up/consolidate logic for working out id for contact point. This requires some unravelling of\n  // existing types so its clearer where the ID has come from\n  const urlId = id || name;\n\n  return (\n    <div className={styles.headerWrapper}>\n      <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n        <Stack alignItems=\"center\" gap={1} minWidth={0}>\n          <Text element=\"h2\" variant=\"body\" weight=\"medium\" truncate>\n            {name}\n          </Text>\n        </Stack>\n        {numberOfPolicies > 0 && (\n          <TextLink\n            href={createRelativeUrl('/alerting/routes', { contactPoint: name })}\n            variant=\"bodySmall\"\n            color=\"primary\"\n            inline={false}\n          >\n            {referencedByPoliciesText}\n          </TextLink>\n        )}\n        {numberOfRules > 0 && (\n          <TextLink\n            href={createRelativeUrl('/alerting/list', { search: `contactPoint:\"${name}\"` })}\n            variant=\"bodySmall\"\n            color=\"primary\"\n            inline={false}\n          >\n            {referencedByRulesText}\n          </TextLink>\n        )}\n        {provisioned && (\n          <ProvisioningBadge tooltip provenance={getAnnotation(contactPoint, K8sAnnotations.Provenance)} />\n        )}\n        {!isReferencedByAnything && <UnusedContactPointBadge />}\n        <Spacer />\n        <LinkButton\n          tooltipPlacement=\"top\"\n          tooltip={provisioned ? 'Provisioned contact points cannot be edited in the UI' : undefined}\n          variant=\"secondary\"\n          size=\"sm\"\n          icon={canEdit ? 'pen' : 'eye'}\n          type=\"button\"\n          aria-label={`${canEdit ? 'edit' : 'view'}-action`}\n          data-testid={`${canEdit ? 'edit' : 'view'}-action`}\n          href={`/alerting/notifications/receivers/${encodeURIComponent(urlId)}/edit`}\n        >\n          {canEdit ? 'Edit' : 'View'}\n        </LinkButton>\n        {menuActions.length > 0 && (\n          <Dropdown overlay={<Menu>{menuActions}</Menu>}>\n            <MoreButton aria-label={`More actions for contact point \"${contactPoint.name}\"`} />\n          </Dropdown>\n        )}\n      </Stack>\n      {ExportDrawer}\n      {showPermissionsDrawer && (\n        <ManagePermissionsDrawer\n          resource=\"receivers\"\n          resourceId={contactPoint.id}\n          resourceName={contactPoint.name}\n          onClose={() => setShowPermissionsDrawer(false)}\n        />\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  headerWrapper: css({\n    background: `${theme.colors.background.secondary}`,\n    padding: `${theme.spacing(1)} ${theme.spacing(1.5)}`,\n\n    borderBottom: `solid 1px ${theme.colors.border.weak}`,\n    borderTopLeftRadius: `${theme.shape.radius.default}`,\n    borderTopRightRadius: `${theme.shape.radius.default}`,\n  }),\n});\n","import { useCallback, useMemo, useState } from 'react';\n\nimport { Button, Modal, ModalProps } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { stringifyErrorLike } from '../../../utils/misc';\n\n/**\n * This hook controls the delete modal for contact points, showing loading and error states when appropriate\n */\nexport const useDeleteContactPointModal = (\n  handleDelete: ({ name, resourceVersion }: { name: string; resourceVersion?: string }) => Promise<unknown>\n) => {\n  const [showModal, setShowModal] = useState(false);\n  const [contactPoint, setContactPoint] = useState<{ name: string; resourceVersion?: string }>();\n  const [error, setError] = useState<unknown | undefined>();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleDismiss = useCallback(() => {\n    if (isLoading) {\n      return;\n    }\n    setContactPoint(undefined);\n    setShowModal(false);\n    setError(undefined);\n  }, [isLoading]);\n\n  const handleShow = useCallback(({ name, resourceVersion }: { name: string; resourceVersion?: string }) => {\n    setContactPoint({ name, resourceVersion });\n    setShowModal(true);\n    setError(undefined);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    if (contactPoint) {\n      setIsLoading(true);\n      handleDelete(contactPoint)\n        .then(() => setShowModal(false))\n        .catch(setError)\n        .finally(() => {\n          setIsLoading(false);\n        });\n    }\n  }, [handleDelete, contactPoint]);\n\n  const modalElement = useMemo(() => {\n    if (error) {\n      return <ErrorModal isOpen={showModal} onDismiss={handleDismiss} error={error} />;\n    }\n\n    return (\n      <Modal\n        isOpen={showModal}\n        onDismiss={handleDismiss}\n        closeOnBackdropClick={!isLoading}\n        closeOnEscape={!isLoading}\n        title={t(\n          'alerting.use-delete-contact-point-modal.modal-element.title-delete-contact-point',\n          'Delete contact point'\n        )}\n      >\n        <p>\n          <Trans i18nKey=\"alerting.use-delete-contact-point-modal.modal-element.deleting-contact-point-permanently-remove\">\n            Deleting this contact point will permanently remove it.\n          </Trans>\n        </p>\n        <p>\n          <Trans i18nKey=\"alerting.use-delete-contact-point-modal.modal-element.delete-contact-point\">\n            Are you sure you want to delete this contact point?\n          </Trans>\n        </p>\n\n        <Modal.ButtonRow>\n          <Button type=\"button\" variant=\"destructive\" onClick={handleSubmit} disabled={isLoading}>\n            {isLoading ? 'Deleting...' : 'Yes, delete contact point'}\n          </Button>\n          <Button type=\"button\" variant=\"secondary\" onClick={handleDismiss} disabled={isLoading}>\n            <Trans i18nKey=\"alerting.common.cancel\">Cancel</Trans>\n          </Button>\n        </Modal.ButtonRow>\n      </Modal>\n    );\n  }, [error, handleDismiss, handleSubmit, isLoading, showModal]);\n\n  return [modalElement, handleShow, handleDismiss] as const;\n};\n\ninterface ErrorModalProps extends Pick<ModalProps, 'isOpen' | 'onDismiss'> {\n  error: unknown;\n}\nconst ErrorModal = ({ isOpen, onDismiss, error }: ErrorModalProps) => (\n  <Modal\n    isOpen={isOpen}\n    onDismiss={onDismiss}\n    closeOnBackdropClick={true}\n    closeOnEscape={true}\n    title={t('alerting.error-modal.title-something-went-wrong', 'Something went wrong')}\n  >\n    <p>\n      <Trans i18nKey=\"alerting.error-modal.failed-to-update-your-configuration\">\n        Failed to update your configuration:\n      </Trans>\n    </p>\n    <pre>\n      <code>{stringifyErrorLike(error)}</code>\n    </pre>\n  </Modal>\n);\n","export const receiverTypeNames: Record<string, string> = {\n  pagerduty: 'PagerDuty',\n  pushover: 'Pushover',\n  slack: 'Slack',\n  opsgenie: 'OpsGenie',\n  webhook: 'Webhook',\n  victorops: 'VictorOps',\n  wechat: 'WeChat',\n  discord: 'Discord',\n  webex: 'Cisco Webex Teams',\n  sns: 'Amazon SNS',\n  telegram: 'Telegram',\n  msteams: 'Microsoft Teams',\n};\n","import { IconName } from '@grafana/ui';\n\nexport const INTEGRATION_ICONS: Record<string, IconName> = {\n  discord: 'discord',\n  email: 'envelope',\n  googlechat: 'google-hangouts-alt',\n  hipchat: 'hipchat',\n  line: 'line',\n  pagerduty: 'pagerduty',\n  slack: 'slack',\n  teams: 'microsoft',\n  telegram: 'telegram-alt',\n  webhook: 'link',\n  sns: 'amazon',\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, LinkButton, Stack, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { ReceiverPluginMetadata } from './useReceiversMetadata';\n\ninterface Props {\n  metadata: ReceiverPluginMetadata;\n}\n\nexport const ReceiverMetadataBadge = ({ metadata: { icon, title, externalUrl, warning } }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Stack alignItems=\"center\" gap={0.5}>\n      <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n        {warning ? (\n          <Tooltip content={warning} theme=\"error\">\n            <Icon name=\"exclamation-triangle\" className={styles.warnIcon} />\n          </Tooltip>\n        ) : (\n          <img src={icon} alt={title} height=\"16px\" />\n        )}\n        <span>{title}</span>\n      </Stack>\n      {externalUrl && (\n        <LinkButton icon=\"external-link-alt\" href={externalUrl} target=\"_blank\" variant=\"secondary\" size=\"sm\" />\n      )}\n    </Stack>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  warnIcon: css({\n    fill: theme.colors.warning.text,\n  }),\n});\n","import { css } from '@emotion/css';\nimport { groupBy, size, upperFirst } from 'lodash';\nimport { Fragment, ReactNode } from 'react';\n\nimport { GrafanaTheme2, dateTime } from '@grafana/data';\nimport { Icon, Stack, Text, Tooltip, useStyles2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\nimport { PrimaryText } from 'app/features/alerting/unified/components/common/TextVariants';\nimport { ContactPointHeader } from 'app/features/alerting/unified/components/contact-points/ContactPointHeader';\nimport { useDeleteContactPointModal } from 'app/features/alerting/unified/components/contact-points/components/Modals';\nimport { useDeleteContactPoint } from 'app/features/alerting/unified/components/contact-points/useContactPoints';\nimport { useAlertmanager } from 'app/features/alerting/unified/state/AlertmanagerContext';\nimport { receiverTypeNames } from 'app/plugins/datasource/alertmanager/consts';\nimport { GrafanaNotifierType, NotifierStatus } from 'app/types/alerting';\n\nimport { INTEGRATION_ICONS } from '../../types/contact-points';\nimport { MetaText } from '../MetaText';\nimport { ReceiverMetadataBadge } from '../receivers/grafanaAppReceivers/ReceiverMetadataBadge';\nimport { ReceiverPluginMetadata } from '../receivers/grafanaAppReceivers/useReceiversMetadata';\n\nimport { RECEIVER_META_KEY, RECEIVER_PLUGIN_META_KEY, RECEIVER_STATUS_KEY } from './constants';\nimport { ContactPointWithMetadata, ReceiverConfigWithMetadata, getReceiverDescription } from './utils';\n\ninterface ContactPointProps {\n  contactPoint: ContactPointWithMetadata;\n}\n\nexport const ContactPoint = ({ contactPoint }: ContactPointProps) => {\n  const { grafana_managed_receiver_configs: receivers } = contactPoint;\n  const styles = useStyles2(getStyles);\n  const { selectedAlertmanager } = useAlertmanager();\n  const [deleteTrigger] = useDeleteContactPoint({ alertmanager: selectedAlertmanager! });\n  const [DeleteModal, showDeleteModal] = useDeleteContactPointModal(deleteTrigger.execute);\n\n  // TODO probably not the best way to figure out if we want to show either only the summary or full metadata for the receivers?\n  const showFullMetadata = receivers.some((receiver) => Boolean(receiver[RECEIVER_META_KEY]));\n\n  return (\n    <div className={styles.contactPointWrapper} data-testid=\"contact-point\">\n      <Stack direction=\"column\" gap={0}>\n        <ContactPointHeader\n          contactPoint={contactPoint}\n          onDelete={(contactPointToDelete) =>\n            showDeleteModal({\n              name: contactPointToDelete.id || contactPointToDelete.name,\n              resourceVersion: contactPointToDelete.metadata?.resourceVersion,\n            })\n          }\n        />\n\n        {showFullMetadata ? (\n          <div>\n            {receivers.map((receiver, index) => {\n              const diagnostics = receiver[RECEIVER_STATUS_KEY];\n              const metadata = receiver[RECEIVER_META_KEY];\n              const sendingResolved = !Boolean(receiver.disableResolveMessage);\n              const pluginMetadata = receiver[RECEIVER_PLUGIN_META_KEY];\n              const key = metadata.name + index;\n\n              return (\n                <ContactPointReceiver\n                  key={key}\n                  name={metadata.name}\n                  type={receiver.type}\n                  description={getReceiverDescription(receiver)}\n                  diagnostics={diagnostics}\n                  pluginMetadata={pluginMetadata}\n                  sendingResolved={sendingResolved}\n                />\n              );\n            })}\n          </div>\n        ) : (\n          <div className={styles.integrationWrapper}>\n            <ContactPointReceiverSummary receivers={receivers} />\n          </div>\n        )}\n      </Stack>\n      {DeleteModal}\n    </div>\n  );\n};\n\ninterface ContactPointReceiverProps {\n  name: string;\n  type: GrafanaNotifierType | string;\n  description?: ReactNode;\n  sendingResolved?: boolean;\n  diagnostics?: NotifierStatus;\n  pluginMetadata?: ReceiverPluginMetadata;\n}\n\nconst ContactPointReceiver = (props: ContactPointReceiverProps) => {\n  const { name, type, description, diagnostics, pluginMetadata, sendingResolved = true } = props;\n  const styles = useStyles2(getStyles);\n\n  const hasMetadata = diagnostics !== undefined;\n\n  return (\n    <div className={styles.integrationWrapper}>\n      <Stack direction=\"column\" gap={0.5}>\n        <ContactPointReceiverTitleRow\n          name={name}\n          type={type}\n          description={description}\n          pluginMetadata={pluginMetadata}\n        />\n        {hasMetadata && <ContactPointReceiverMetadataRow diagnostics={diagnostics} sendingResolved={sendingResolved} />}\n      </Stack>\n    </div>\n  );\n};\n\nexport interface ContactPointReceiverTitleRowProps {\n  name: string;\n  type: GrafanaNotifierType | string;\n  description?: ReactNode;\n  pluginMetadata?: ReceiverPluginMetadata;\n}\n\nexport function ContactPointReceiverTitleRow(props: ContactPointReceiverTitleRowProps) {\n  const { name, type, description, pluginMetadata } = props;\n\n  const iconName = INTEGRATION_ICONS[type];\n\n  return (\n    <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n      <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n        {iconName && <Icon name={iconName} />}\n        {pluginMetadata ? (\n          <ReceiverMetadataBadge metadata={pluginMetadata} />\n        ) : (\n          <Text variant=\"body\" color=\"primary\">\n            {name}\n          </Text>\n        )}\n      </Stack>\n      {description && (\n        <Text variant=\"bodySmall\" color=\"secondary\">\n          {description}\n        </Text>\n      )}\n    </Stack>\n  );\n}\n\ninterface ContactPointReceiverMetadata {\n  sendingResolved: boolean;\n  diagnostics: NotifierStatus;\n}\n\ntype ContactPointReceiverSummaryProps = {\n  receivers: ReceiverConfigWithMetadata[];\n  limit?: number;\n};\n\n/**\n * This summary is used when we're dealing with non-Grafana managed alertmanager since they\n * don't have any metadata worth showing other than a summary of what types are configured for the contact point\n */\nexport const ContactPointReceiverSummary = ({ receivers, limit }: ContactPointReceiverSummaryProps) => {\n  // limit for how many integrations are rendered\n  const INTEGRATIONS_LIMIT = limit ?? Number.MAX_VALUE;\n  const countByType = groupBy(receivers, (receiver) => receiver.type);\n\n  const numberOfUniqueIntegrations = size(countByType);\n  const integrationsShown = Object.entries(countByType).slice(0, INTEGRATIONS_LIMIT);\n  const numberOfIntegrationsNotShown = numberOfUniqueIntegrations - INTEGRATIONS_LIMIT;\n\n  return (\n    <Stack direction=\"column\" gap={0}>\n      <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n        {integrationsShown.length === 0 && (\n          <MetaText color=\"warning\" icon=\"exclamation-triangle\">\n            <Trans i18nKey=\"alerting.contact-points.no-integrations\">No integrations configured</Trans>\n          </MetaText>\n        )}\n        {integrationsShown.map(([type, receivers], index) => {\n          const iconName = INTEGRATION_ICONS[type];\n          const receiverName = receiverTypeNames[type] ?? upperFirst(type);\n          const isLastItem = size(countByType) - 1 === index;\n          // Pick the first integration of the grouped receivers, since they should all be the same type\n          // e.g. if we have multiple Oncall, they _should_ all have the same plugin metadata,\n          // so we can just use the first one for additional display purposes\n          const receiver = receivers[0];\n\n          return (\n            <Fragment key={type}>\n              <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n                {receiver[RECEIVER_PLUGIN_META_KEY]?.icon && (\n                  <img\n                    width=\"14px\"\n                    src={receiver[RECEIVER_PLUGIN_META_KEY]?.icon}\n                    alt={receiver[RECEIVER_PLUGIN_META_KEY]?.title}\n                  />\n                )}\n                {iconName && <Icon name={iconName} />}\n                <span>\n                  {receiverName}\n                  {receivers.length > 1 && ` (${receivers.length})`}\n                </span>\n              </Stack>\n              {!isLastItem && '⋅'}\n            </Fragment>\n          );\n        })}\n        {numberOfIntegrationsNotShown > 0 && <span>{`+${numberOfIntegrationsNotShown} more`}</span>}\n      </Stack>\n    </Stack>\n  );\n};\n\nconst ContactPointReceiverMetadataRow = ({ diagnostics, sendingResolved }: ContactPointReceiverMetadata) => {\n  const styles = useStyles2(getStyles);\n\n  const failedToSend = Boolean(diagnostics.lastNotifyAttemptError);\n  const lastDeliveryAttempt = dateTime(diagnostics.lastNotifyAttempt);\n  const lastDeliveryAttemptDuration = diagnostics.lastNotifyAttemptDuration;\n  const hasDeliveryAttempt = lastDeliveryAttempt.isValid();\n\n  return (\n    <div className={styles.metadataRow}>\n      <Stack direction=\"row\" gap={1}>\n        {/* this is shown when the last delivery failed – we don't show any additional metadata */}\n        {failedToSend ? (\n          <MetaText color=\"error\" icon=\"exclamation-circle\">\n            <Tooltip content={diagnostics.lastNotifyAttemptError!}>\n              <span>\n                <Trans i18nKey=\"alerting.contact-points.last-delivery-failed\">Last delivery attempt failed</Trans>\n              </span>\n            </Tooltip>\n          </MetaText>\n        ) : (\n          <>\n            {/* this is shown when we have a last delivery attempt */}\n            {hasDeliveryAttempt && (\n              <>\n                <MetaText icon=\"clock-nine\">\n                  <Trans i18nKey=\"alerting.contact-points.last-delivery-attempt\">Last delivery attempt</Trans>\n                  <Tooltip content={lastDeliveryAttempt.toLocaleString()}>\n                    <span>\n                      <Text color=\"primary\">{lastDeliveryAttempt.locale('en').fromNow()}</Text>\n                    </span>\n                  </Tooltip>\n                </MetaText>\n                <MetaText icon=\"stopwatch\">\n                  <Trans i18nKey=\"alerting.contact-points.delivery-duration\">\n                    Last delivery took <PrimaryText content={lastDeliveryAttemptDuration} />\n                  </Trans>\n                </MetaText>\n              </>\n            )}\n            {/* when we have no last delivery attempt */}\n            {!hasDeliveryAttempt && (\n              <MetaText icon=\"clock-nine\">\n                <Trans i18nKey=\"alerting.contact-points.no-delivery-attempts\">No delivery attempts</Trans>\n              </MetaText>\n            )}\n            {/* this is only shown for contact points that only want \"firing\" updates */}\n            {!sendingResolved && (\n              <MetaText icon=\"info-circle\">\n                <Trans i18nKey=\"alerting.contact-points.only-firing\">\n                  Delivering <Text color=\"primary\">only firing</Text> notifications\n                </Trans>\n              </MetaText>\n            )}\n          </>\n        )}\n      </Stack>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  contactPointWrapper: css({\n    borderRadius: `${theme.shape.radius.default}`,\n    border: `solid 1px ${theme.colors.border.weak}`,\n    borderBottom: 'none',\n  }),\n  integrationWrapper: css({\n    position: 'relative',\n\n    background: `${theme.colors.background.primary}`,\n    padding: `${theme.spacing(1)} ${theme.spacing(1.5)}`,\n\n    borderBottom: `solid 1px ${theme.colors.border.weak}`,\n  }),\n  metadataRow: css({\n    borderBottomLeftRadius: `${theme.shape.radius.default}`,\n    borderBottomRightRadius: `${theme.shape.radius.default}`,\n  }),\n  noIntegrationsContainer: css({\n    paddingTop: `${theme.spacing(1.5)}`,\n    paddingLeft: `${theme.spacing(1.5)}`,\n  }),\n});\n","import { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { ExportFormats, allGrafanaExportProviders } from './providers';\n\ninterface GrafanaReceiverExportPreviewProps {\n  exportFormat: ExportFormats;\n  onClose: () => void;\n  receiverName: string;\n  decrypt: boolean;\n}\n\nconst GrafanaReceiverExportPreview = ({\n  receiverName,\n  decrypt,\n  exportFormat,\n  onClose,\n}: GrafanaReceiverExportPreviewProps) => {\n  const { currentData: receiverDefinition = '', isFetching } = alertRuleApi.useExportReceiverQuery({\n    receiverName: receiverName,\n    decrypt: decrypt,\n    format: exportFormat,\n  });\n\n  const downloadFileName = `cp-${receiverName}-${new Date().getTime()}`;\n\n  if (isFetching) {\n    return <LoadingPlaceholder text={t('alerting.grafana-receiver-export-preview.text-loading', 'Loading....')} />;\n  }\n\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={receiverDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n};\n\ninterface GrafanaReceiverExporterProps {\n  onClose: () => void;\n  receiverName: string;\n  decrypt: boolean;\n}\n\nexport const GrafanaReceiverExporter = ({ onClose, receiverName, decrypt }: GrafanaReceiverExporterProps) => {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n\n  return (\n    <GrafanaExportDrawer\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      <GrafanaReceiverExportPreview\n        receiverName={receiverName}\n        decrypt={decrypt}\n        exportFormat={activeTab}\n        onClose={onClose}\n      />\n    </GrafanaExportDrawer>\n  );\n};\n","import { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { ExportFormats, allGrafanaExportProviders } from './providers';\n\ninterface GrafanaReceiversExportPreviewProps {\n  exportFormat: ExportFormats;\n  onClose: () => void;\n  decrypt: boolean;\n}\n\nconst GrafanaReceiversExportPreview = ({ decrypt, exportFormat, onClose }: GrafanaReceiversExportPreviewProps) => {\n  const { currentData: receiverDefinition = '', isFetching } = alertRuleApi.useExportReceiversQuery({\n    decrypt: decrypt,\n    format: exportFormat,\n  });\n\n  const downloadFileName = `contact-points-${new Date().getTime()}`;\n\n  if (isFetching) {\n    return <LoadingPlaceholder text={t('alerting.grafana-receivers-export-preview.text-loading', 'Loading....')} />;\n  }\n\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={receiverDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n};\n\ninterface GrafanaReceiversExporterProps {\n  onClose: () => void;\n  decrypt: boolean;\n}\n\nexport const GrafanaReceiversExporter = ({ onClose, decrypt }: GrafanaReceiversExporterProps) => {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n\n  return (\n    <GrafanaExportDrawer\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      <GrafanaReceiversExportPreview decrypt={decrypt} exportFormat={activeTab} onClose={onClose} />\n    </GrafanaExportDrawer>\n  );\n};\n","import { useCallback, useMemo, useState } from 'react';\nimport { useToggle } from 'react-use';\n\nimport { AlertmanagerAction, useAlertmanagerAbility } from '../../hooks/useAbilities';\nimport { GrafanaReceiverExporter } from '../export/GrafanaReceiverExporter';\nimport { GrafanaReceiversExporter } from '../export/GrafanaReceiversExporter';\n\nexport const ALL_CONTACT_POINTS = Symbol('all contact points');\n\ntype ExportProps = [JSX.Element | null, (receiver: string | typeof ALL_CONTACT_POINTS) => void];\n\nexport const useExportContactPoint = (): ExportProps => {\n  const [receiverName, setReceiverName] = useState<string | typeof ALL_CONTACT_POINTS | null>(null);\n  const [isExportDrawerOpen, toggleShowExportDrawer] = useToggle(false);\n  const [decryptSecretsSupported, decryptSecretsAllowed] = useAlertmanagerAbility(AlertmanagerAction.DecryptSecrets);\n\n  const canReadSecrets = decryptSecretsSupported && decryptSecretsAllowed;\n\n  const handleClose = useCallback(() => {\n    setReceiverName(null);\n    toggleShowExportDrawer(false);\n  }, [toggleShowExportDrawer]);\n\n  const handleOpen = (receiverName: string | typeof ALL_CONTACT_POINTS) => {\n    setReceiverName(receiverName);\n    toggleShowExportDrawer(true);\n  };\n\n  const drawer = useMemo(() => {\n    if (!receiverName || !isExportDrawerOpen) {\n      return null;\n    }\n\n    if (receiverName === ALL_CONTACT_POINTS) {\n      // use this drawer when we want to export all contact points\n      return <GrafanaReceiversExporter decrypt={canReadSecrets} onClose={handleClose} />;\n    } else {\n      // use this one for exporting a single contact point\n      return <GrafanaReceiverExporter receiverName={receiverName} decrypt={canReadSecrets} onClose={handleClose} />;\n    }\n  }, [canReadSecrets, isExportDrawerOpen, handleClose, receiverName]);\n\n  return [drawer, handleOpen];\n};\n","import { css } from '@emotion/css';\nimport saveAs from 'file-saver';\nimport { useCallback, useMemo } from 'react';\nimport * as React from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, ClipboardButton, CodeEditor, TextLink, useStyles2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nimport { ExportFormats, ExportProvider, ProvisioningType, allGrafanaExportProviders } from './providers';\n\ninterface FileExportPreviewProps {\n  format: ExportFormats;\n  textDefinition: string;\n\n  /*** Filename without extension ***/\n  downloadFileName: string;\n  onClose: () => void;\n}\n\nexport function FileExportPreview({ format, textDefinition, downloadFileName, onClose }: FileExportPreviewProps) {\n  const styles = useStyles2(fileExportPreviewStyles);\n  const provider = allGrafanaExportProviders[format];\n\n  const onDownload = useCallback(() => {\n    const blob = new Blob([textDefinition], {\n      type: `application/${format};charset=utf-8`,\n    });\n    saveAs(blob, `${downloadFileName}.${format}`);\n  }, [textDefinition, downloadFileName, format]);\n\n  const formattedTextDefinition = useMemo(() => {\n    return provider.formatter ? provider.formatter(textDefinition) : textDefinition;\n  }, [provider, textDefinition]);\n\n  return (\n    // TODO Handle empty content\n    <div className={styles.container}>\n      <FileExportInlineDocumentation exportProvider={provider} />\n      <div className={styles.content}>\n        <AutoSizer disableWidth>\n          {({ height }) => (\n            <CodeEditor\n              width=\"100%\"\n              height={height}\n              language={format}\n              value={formattedTextDefinition}\n              monacoOptions={{\n                minimap: {\n                  enabled: false,\n                },\n                scrollBeyondLastLine: false,\n                lineNumbers: 'on',\n                readOnly: true,\n              }}\n            />\n          )}\n        </AutoSizer>\n      </div>\n      <div className={styles.actions}>\n        <Button variant=\"secondary\" onClick={onClose}>\n          <Trans i18nKey=\"alerting.common.cancel\">Cancel</Trans>\n        </Button>\n        <ClipboardButton icon=\"copy\" getText={() => textDefinition}>\n          <Trans i18nKey=\"alerting.file-export-preview.copy-code\">Copy code</Trans>\n        </ClipboardButton>\n        <Button icon=\"download-alt\" onClick={onDownload}>\n          <Trans i18nKey=\"alerting.file-export-preview.download\">Download</Trans>\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nconst fileExportPreviewStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    display: 'flex',\n    flexDirection: 'column',\n    height: '100%',\n    gap: theme.spacing(2),\n  }),\n  content: css({\n    flex: '1 1 100%',\n  }),\n  actions: css({\n    flex: 0,\n    justifyContent: 'flex-end',\n    display: 'flex',\n    gap: theme.spacing(1),\n  }),\n});\n\nfunction FileExportInlineDocumentation({ exportProvider }: { exportProvider: ExportProvider<unknown> }) {\n  const { name, type } = exportProvider;\n\n  const exportInlineDoc: Record<ProvisioningType, { title: string; component: React.ReactNode }> = {\n    file: {\n      title: 'File-provisioning format',\n      component: (\n        <>\n          {name} format is only valid for File Provisioning.{' '}\n          <TextLink\n            href=\"https://grafana.com/docs/grafana/latest/alerting/set-up/provision-alerting-resources/file-provisioning/\"\n            external\n          >\n            Read more in the docs.\n          </TextLink>\n        </>\n      ),\n    },\n    api: {\n      title: 'API-provisioning format',\n      component: (\n        <>\n          {name} format is only valid for API Provisioning.{' '}\n          <TextLink\n            href=\"https://grafana.com/docs/grafana/latest/alerting/set-up/provision-alerting-resources/http-api-provisioning/\"\n            external\n          >\n            Read more in the docs.\n          </TextLink>\n        </>\n      ),\n    },\n    terraform: {\n      title: 'Terraform-provisioning format',\n      component: (\n        <>\n          {name} format is only valid for Terraform Provisioning.{' '}\n          <TextLink\n            href=\"https://grafana.com/docs/grafana/latest/alerting/set-up/provision-alerting-resources/terraform-provisioning/\"\n            external\n          >\n            Read more in the docs.\n          </TextLink>\n        </>\n      ),\n    },\n  };\n\n  const { title, component } = exportInlineDoc[type];\n\n  return (\n    <Alert title={title} severity=\"info\" bottomSpacing={0} topSpacing={0}>\n      {component}\n    </Alert>\n  );\n}\n","import * as React from 'react';\n\nimport { Drawer } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { RuleInspectorTabs } from '../rule-editor/RuleInspector';\n\nimport { ExportFormats, ExportProvider } from './providers';\n\ninterface GrafanaExportDrawerProps {\n  activeTab: ExportFormats;\n  onTabChange: (tab: ExportFormats) => void;\n  children: React.ReactNode;\n  onClose: () => void;\n  formatProviders: Array<ExportProvider<ExportFormats>>;\n  title?: string;\n}\n\nexport function GrafanaExportDrawer({\n  activeTab,\n  onTabChange,\n  children,\n  onClose,\n  formatProviders,\n  title = 'Export',\n}: GrafanaExportDrawerProps) {\n  const grafanaRulesTabs = Object.values(formatProviders).map((provider) => ({\n    label: provider.name,\n    value: provider.exportFormat,\n  }));\n  const subtitle =\n    formatProviders.length > 1\n      ? t(\n          'alerting.export.subtitle.formats',\n          'Select the format and download the file or copy the contents to clipboard'\n        )\n      : t('alerting.export.subtitle.one-format', 'Download the file or copy the contents to clipboard');\n  return (\n    <Drawer\n      title={title}\n      subtitle={subtitle}\n      tabs={\n        <RuleInspectorTabs<ExportFormats> tabs={grafanaRulesTabs} setActiveTab={onTabChange} activeTab={activeTab} />\n      }\n      onClose={onClose}\n      size=\"md\"\n    >\n      {children}\n    </Drawer>\n  );\n}\n","export type ProvisioningType = 'file' | 'api' | 'terraform';\n\nexport interface ExportProvider<TFormat> {\n  name: string;\n  exportFormat: TFormat;\n  type: ProvisioningType;\n  formatter?: (raw: string) => string;\n}\n\nexport const JsonExportProvider: ExportProvider<'json'> = {\n  name: 'JSON',\n  exportFormat: 'json',\n  type: 'file',\n  formatter: (raw: string) => {\n    try {\n      return JSON.stringify(JSON.parse(raw), null, 4);\n    } catch (e) {\n      return raw;\n    }\n  },\n};\n\nexport const YamlExportProvider: ExportProvider<'yaml'> = {\n  name: 'YAML',\n  exportFormat: 'yaml',\n  type: 'file',\n};\n\nexport const HclExportProvider: ExportProvider<'hcl'> = {\n  name: 'Terraform (HCL)',\n  exportFormat: 'hcl',\n  type: 'terraform',\n};\n\nexport const allGrafanaExportProviders = {\n  [JsonExportProvider.exportFormat]: JsonExportProvider,\n  [YamlExportProvider.exportFormat]: YamlExportProvider,\n  [HclExportProvider.exportFormat]: HclExportProvider,\n} as const;\n\nexport const jsonAndYamlGrafanaExportProviders = [JsonExportProvider, YamlExportProvider];\n\nexport type ExportFormats = keyof typeof allGrafanaExportProviders;\n","import { ComponentProps, useState } from 'react';\n\nimport { Button, Drawer } from '@grafana/ui';\nimport { Permissions } from 'app/core/components/AccessControl';\nimport { Trans, t } from 'app/core/internationalization';\n\ntype ButtonProps = { onClick: () => void };\n\ntype BaseProps = Pick<ComponentProps<typeof Permissions>, 'resource' | 'resourceId'> & {\n  resourceName?: string;\n  title?: string;\n};\n\ntype Props = BaseProps & {\n  renderButton?: (props: ButtonProps) => JSX.Element;\n};\n\n/**\n * Renders just the drawer containing permissions management for the resource.\n *\n * Useful for manually controlling the state/display of the drawer when you need to render the\n * controlling button within a dropdown etc.\n */\nexport const ManagePermissionsDrawer = ({\n  resourceName,\n  title,\n  onClose,\n  ...permissionsProps\n}: BaseProps & Pick<ComponentProps<typeof Drawer>, 'onClose'>) => {\n  const defaultTitle = t('alerting.manage-permissions.title', 'Manage permissions');\n  return (\n    <Drawer onClose={onClose} title={title || defaultTitle} subtitle={resourceName}>\n      <Permissions {...permissionsProps} canSetPermissions />\n    </Drawer>\n  );\n};\n\n/** Default way to render the button for \"manage permissions\" */\nconst DefaultButton = ({ onClick }: ButtonProps) => {\n  return (\n    <Button variant=\"secondary\" onClick={onClick} icon=\"unlock\">\n      <Trans i18nKey=\"alerting.manage-permissions.button\">Manage permissions</Trans>\n    </Button>\n  );\n};\n\n/**\n * Renders a button that opens a drawer with the permissions editor.\n *\n * Provides capability to render button as custom component, and manages open/close state internally\n */\nexport const ManagePermissions = ({ resource, resourceId, resourceName, title, renderButton }: Props) => {\n  const [showDrawer, setShowDrawer] = useState(false);\n  const closeDrawer = () => setShowDrawer(false);\n  const openDrawer = () => setShowDrawer(true);\n\n  return (\n    <>\n      {renderButton ? renderButton({ onClick: openDrawer }) : <DefaultButton onClick={openDrawer} />}\n      {showDrawer && (\n        <ManagePermissionsDrawer\n          resource={resource}\n          resourceId={resourceId}\n          resourceName={resourceName}\n          title={title}\n          onClose={closeDrawer}\n        />\n      )}\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport { dump, load } from 'js-yaml';\nimport { useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, CodeEditor, Drawer, Icon, Tab, TabsBar, Tooltip, useStyles2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { RulerRuleDTO } from '../../../../../types/unified-alerting-dto';\nimport { RuleFormValues } from '../../types/rule-form';\nimport {\n  alertingRulerRuleToRuleForm,\n  formValuesToRulerRuleDTO,\n  recordingRulerRuleToRuleForm,\n} from '../../utils/rule-form';\nimport { rulerRuleType } from '../../utils/rules';\n\ninterface Props {\n  onClose: () => void;\n}\n\nconst cloudRulesTabs = [{ label: 'Yaml', value: 'yaml' }];\n\nexport const RuleInspector = ({ onClose }: Props) => {\n  const [activeTab, setActiveTab] = useState('yaml');\n  const { setValue } = useFormContext<RuleFormValues>();\n  const styles = useStyles2(drawerStyles);\n\n  const onApply = (formValues: RuleFormValues) => {\n    // Need to loop through all values and set them individually\n    // TODO this is not type-safe :(\n    for (const key in formValues) {\n      // @ts-ignore\n      setValue(key, formValues[key]);\n    }\n    onClose();\n  };\n\n  return (\n    <Drawer\n      title={t('alerting.rule-inspector.title-inspect-alert-rule', 'Inspect Alert rule')}\n      subtitle={\n        <div className={styles.subtitle}>\n          <RuleInspectorTabs tabs={cloudRulesTabs} setActiveTab={setActiveTab} activeTab={activeTab} />\n        </div>\n      }\n      onClose={onClose}\n    >\n      {activeTab === 'yaml' && <InspectorYamlTab onSubmit={onApply} />}\n    </Drawer>\n  );\n};\n\ninterface RuleInspectorTabsProps<T = string> {\n  tabs: Array<{ label: string; value: T }>;\n  activeTab: T;\n  setActiveTab: (tab: T) => void;\n}\n\nexport function RuleInspectorTabs<T extends string>({ tabs, activeTab, setActiveTab }: RuleInspectorTabsProps<T>) {\n  return (\n    <TabsBar>\n      {tabs.map((tab, index) => {\n        return (\n          <Tab\n            key={`${tab.value}-${index}`}\n            label={tab.label}\n            value={tab.value}\n            onChangeTab={() => setActiveTab(tab.value)}\n            active={activeTab === tab.value}\n          />\n        );\n      })}\n    </TabsBar>\n  );\n}\n\ninterface YamlTabProps {\n  onSubmit: (newModel: RuleFormValues) => void;\n}\n\nconst InspectorYamlTab = ({ onSubmit }: YamlTabProps) => {\n  const styles = useStyles2(yamlTabStyle);\n  const { getValues } = useFormContext<RuleFormValues>();\n\n  const yamlValues = formValuesToRulerRuleDTO(getValues());\n  const [alertRuleAsYaml, setAlertRuleAsYaml] = useState(dump(yamlValues));\n\n  const onApply = () => {\n    const rulerRule = load(alertRuleAsYaml) as RulerRuleDTO;\n    const currentFormValues = getValues();\n\n    const yamlFormValues = rulerRuleToRuleFormValues(rulerRule);\n    onSubmit({ ...currentFormValues, ...yamlFormValues });\n  };\n\n  return (\n    <>\n      <div className={styles.applyButton}>\n        <Button type=\"button\" onClick={onApply}>\n          <Trans i18nKey=\"alerting.inspector-yaml-tab.apply\">Apply</Trans>\n        </Button>\n        <Tooltip content={<YamlContentInfo />} theme=\"info\" placement=\"left-start\" interactive={true}>\n          <Icon name=\"exclamation-triangle\" size=\"xl\" />\n        </Tooltip>\n      </div>\n\n      <div className={styles.content}>\n        <AutoSizer disableWidth>\n          {({ height }) => (\n            <CodeEditor\n              width=\"100%\"\n              height={height}\n              language=\"yaml\"\n              value={alertRuleAsYaml}\n              onBlur={setAlertRuleAsYaml}\n              monacoOptions={{\n                minimap: {\n                  enabled: false,\n                },\n              }}\n            />\n          )}\n        </AutoSizer>\n      </div>\n    </>\n  );\n};\n\nfunction YamlContentInfo() {\n  return (\n    <div>\n      The YAML content in the editor only contains alert rule configuration <br />\n      To configure Prometheus, you need to provide the rest of the{' '}\n      <a\n        href=\"https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        configuration file content.\n      </a>\n    </div>\n  );\n}\n\nfunction rulerRuleToRuleFormValues(rulerRule: RulerRuleDTO): Partial<RuleFormValues> {\n  if (rulerRuleType.dataSource.alertingRule(rulerRule)) {\n    return alertingRulerRuleToRuleForm(rulerRule);\n  } else if (rulerRuleType.dataSource.recordingRule(rulerRule)) {\n    return recordingRulerRuleToRuleForm(rulerRule);\n  }\n\n  return {};\n}\n\nexport const yamlTabStyle = (theme: GrafanaTheme2) => ({\n  content: css({\n    flexGrow: 1,\n    height: '100%',\n    paddingBottom: '16px',\n    marginBottom: theme.spacing(2),\n  }),\n  applyButton: css({\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    flexGrow: 0,\n    marginBottom: theme.spacing(2),\n  }),\n});\n\nexport const drawerStyles = () => ({\n  subtitle: css({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  }),\n});\n"],"names":["CollapseToggle","isCollapsed","onToggle","idControlled","className","text","size","restOfProps","MetaText","children","icon","color","direction","rest","styles","getStyles","interactive","rowDirection","alignItems","gap","PrimaryText","content","CodeText","UnusedContactPointBadge","Badge","ContactPointHeader","contactPoint","onDelete","name","id","provisioned","policies","showPermissionsDrawer","setShowPermissionsDrawer","selectedAlertmanager","usingK8sApi","exportSupported","exportAllowed","editSupported","editAllowed","deleteSupported","deleteAllowed","ExportDrawer","openExportDrawer","useExportContactPoint","showManagePermissions","regularPolicyReferences","ref","k8sRoutesInUse","numberOfPolicies","numberOfPoliciesPreventingDeletion","numberOfRules","isReferencedByAnything","hasAbilityToEdit","canEdit","hasAbilityToDelete","canBeDeleted","menuActions","Fragment","Menu","cannotDeleteNoPermissions","cannotDeleteProvisioned","cannotDeletePolicies","cannotDeleteRules","reasonsDeleteIsDisabled","deleteTooltipContent","reason","ConditionalWrap","Tooltip","referencedByPoliciesText","referencedByRulesText","urlId","Stack","Text","TextLink","Provisioning","Spacer","Dropdown","MoreButton","ManagePermissions","theme","useDeleteContactPointModal","handleDelete","showModal","setShowModal","setContactPoint","error","setError","isLoading","setIsLoading","handleDismiss","handleShow","resourceVersion","handleSubmit","ErrorModal","Modal","Button","isOpen","onDismiss","receiverTypeNames","INTEGRATION_ICONS","ReceiverMetadataBadge","title","externalUrl","warning","Icon","ContactPoint","receivers","deleteTrigger","DeleteModal","showDeleteModal","showFullMetadata","receiver","contactPointToDelete","index","diagnostics","metadata","sendingResolved","pluginMetadata","key","ContactPointReceiver","ContactPointReceiverSummary","props","type","description","hasMetadata","ContactPointReceiverTitleRow","ContactPointReceiverMetadataRow","iconName","limit","INTEGRATIONS_LIMIT","countByType","numberOfUniqueIntegrations","integrationsShown","numberOfIntegrationsNotShown","receiverName","isLastItem","failedToSend","lastDeliveryAttempt","lastDeliveryAttemptDuration","hasDeliveryAttempt","GrafanaReceiverExportPreview","decrypt","exportFormat","onClose","receiverDefinition","isFetching","alertRuleApi","downloadFileName","LoadingPlaceholder","FileExportPreview","GrafanaReceiverExporter","activeTab","setActiveTab","GrafanaExportDrawer","GrafanaReceiversExportPreview","GrafanaReceiversExporter","ALL_CONTACT_POINTS","setReceiverName","isExportDrawerOpen","toggleShowExportDrawer","useToggle","decryptSecretsSupported","decryptSecretsAllowed","canReadSecrets","handleClose","handleOpen","format","textDefinition","fileExportPreviewStyles","provider","onDownload","blob","formattedTextDefinition","FileExportInlineDocumentation","height","exportProvider","exportInlineDoc","component","onTabChange","formatProviders","grafanaRulesTabs","subtitle","JsonExportProvider","raw","YamlExportProvider","HclExportProvider","allGrafanaExportProviders","jsonAndYamlGrafanaExportProviders","ManagePermissionsDrawer","resourceName","permissionsProps","defaultTitle","DefaultButton","onClick","resource","resourceId","renderButton","showDrawer","setShowDrawer","closeDrawer","openDrawer","cloudRulesTabs","RuleInspector","setValue","drawerStyles","onApply","formValues","RuleInspectorTabs","InspectorYamlTab","tabs","tab","onSubmit","yamlTabStyle","getValues","yamlValues","alertRuleAsYaml","setAlertRuleAsYaml","rulerRule","currentFormValues","yamlFormValues","rulerRuleToRuleFormValues","YamlContentInfo"],"sourceRoot":""}