{"version":3,"file":"2699.ee540b08ba5abba4394a.js","mappings":"sKA2BO,MAAMA,CAAwG,CAGnH,YAAmBC,EAA4C,CAA5C,aAAAA,EAFnB,qBAAkB,CAAC,KAAc,SAAU,KAAc,WAAW,EAmBpE,cAAYC,GAAgD,CACrD,OAAO,yBAIR,MAAgBA,CAAC,GACnB,OAAO,oBAAoB,gBAAgB,KAGzC,MAAmBA,CAAC,GACtB,OAAO,oBAAoB,aAAa,CACtC,KAAMA,EAAE,QAAQ,gBAChB,WAAYA,EAAE,QAAQ,UACxB,CAAC,EAEL,EAGA,WAAQ,IAAM,CAAC,EAlCb,MAAMC,EAA0B,CAC9B,OAAQ,CACN,iBAAkBF,EAAQ,iBAC1B,YAAaA,EAAQ,WACvB,CACF,EAGA,OAAO,OADK,oDACK,EACd,KAAMG,GAAOA,EAAE,QAAUA,EAAE,QAAUA,CAAE,EACvC,KAAK,CAAC,CAAE,oBAAAC,CAAoB,IAAM,CACjC,MAAMC,EAAO,IAAID,EAAoBF,CAAuB,EAC5D,OAAO,oBAAsBG,EAAK,gBAAgB,CACpD,CAAC,CACL,CAqBF,C","sources":["webpack://grafana/./public/app/core/services/echo/backends/analytics/ApplicationInsightsBackend.ts"],"sourcesContent":["import {\n  EchoBackend,\n  EchoEventType,\n  InteractionEchoEvent,\n  isInteractionEvent,\n  isPageviewEvent,\n  PageviewEchoEvent,\n} from '@grafana/runtime';\n\ninterface ApplicationInsights {\n  trackPageView: () => void;\n  trackEvent: (event: { name: string; properties?: Record<string, unknown> }) => void;\n}\n\ndeclare global {\n  interface Window {\n    // We say all methods are undefined because we can't be sure they're there\n    // and we should be extra cautious\n    applicationInsights?: Partial<ApplicationInsights>;\n  }\n}\n\nexport interface ApplicationInsightsBackendOptions {\n  connectionString: string;\n  endpointUrl?: string;\n}\n\nexport class ApplicationInsightsBackend implements EchoBackend<PageviewEchoEvent, ApplicationInsightsBackendOptions> {\n  supportedEvents = [EchoEventType.Pageview, EchoEventType.Interaction];\n\n  constructor(public options: ApplicationInsightsBackendOptions) {\n    const applicationInsightsOpts = {\n      config: {\n        connectionString: options.connectionString,\n        endpointUrl: options.endpointUrl,\n      },\n    };\n\n    const url = 'https://js.monitor.azure.com/scripts/b/ai.2.min.js';\n    System.import(url)\n      .then((m) => (m.default ? m.default : m))\n      .then(({ ApplicationInsights }) => {\n        const init = new ApplicationInsights(applicationInsightsOpts);\n        window.applicationInsights = init.loadAppInsights();\n      });\n  }\n\n  addEvent = (e: PageviewEchoEvent | InteractionEchoEvent) => {\n    if (!window.applicationInsights) {\n      return;\n    }\n\n    if (isPageviewEvent(e)) {\n      window.applicationInsights.trackPageView?.();\n    }\n\n    if (isInteractionEvent(e)) {\n      window.applicationInsights.trackEvent?.({\n        name: e.payload.interactionName,\n        properties: e.payload.properties,\n      });\n    }\n  };\n\n  // Not using Echo buffering, addEvent above sends events to Application Insights as soon as they appear\n  flush = () => {};\n}\n"],"names":["ApplicationInsightsBackend","options","e","applicationInsightsOpts","m","ApplicationInsights","init"],"sourceRoot":""}