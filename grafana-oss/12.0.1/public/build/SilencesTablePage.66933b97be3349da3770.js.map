{"version":3,"file":"SilencesTablePage.66933b97be3349da3770.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/Authorize.tsx","webpack://grafana/./public/app/features/alerting/unified/components/CollapseToggle.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/Matchers.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/NoSilencesCTA.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencedAlertsTableRow.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencedAlertsTable.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilenceDetails.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilenceStateTag.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencesFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/SilencesTable.tsx","webpack://grafana/./public/app/features/alerting/unified/styles/table.ts"],"sourcesContent":["import { chain, filter } from 'lodash';\nimport { PropsWithChildren } from 'react';\n\nimport {\n  Abilities,\n  Action,\n  AlertingAction,\n  AlertmanagerAction,\n  useAlertingAbilities,\n  useAllAlertmanagerAbilities,\n} from '../hooks/useAbilities';\n\ninterface AuthorizeProps extends PropsWithChildren {\n  actions: AlertmanagerAction[] | AlertingAction[];\n}\n\nexport const Authorize = ({ actions, children }: AuthorizeProps) => {\n  const alertmanagerActions = filter(actions, isAlertmanagerAction) as AlertmanagerAction[];\n  const alertSourceActions = filter(actions, isAlertingAction) as AlertingAction[];\n\n  if (alertmanagerActions.length) {\n    return <AuthorizeAlertmanager actions={alertmanagerActions}>{children}</AuthorizeAlertmanager>;\n  }\n\n  if (alertSourceActions.length) {\n    return <AuthorizeAlertsource actions={alertSourceActions}>{children}</AuthorizeAlertsource>;\n  }\n\n  return null;\n};\n\ninterface ActionsProps<T extends Action> extends PropsWithChildren {\n  actions: T[];\n}\n\nconst AuthorizeAlertmanager = ({ actions, children }: ActionsProps<AlertmanagerAction>) => {\n  const alertmanagerAbilties = useAllAlertmanagerAbilities();\n  const allowed = actionsAllowed(alertmanagerAbilties, actions);\n\n  if (allowed) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n\nconst AuthorizeAlertsource = ({ actions, children }: ActionsProps<AlertingAction>) => {\n  const alertSourceAbilities = useAlertingAbilities();\n  const allowed = actionsAllowed(alertSourceAbilities, actions);\n\n  if (allowed) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n\n// TODO add some authorize helper components for alert source and individual alert rules\n\n// check if some action is allowed from the abilities\nfunction actionsAllowed<T extends Action>(abilities: Abilities<T>, actions: T[]) {\n  return chain(abilities)\n    .pick(actions)\n    .values()\n    .value()\n    .some(([_supported, allowed]) => allowed === true);\n}\n\nfunction isAlertmanagerAction(action: AlertmanagerAction) {\n  return Object.values(AlertmanagerAction).includes(action);\n}\n\nfunction isAlertingAction(action: AlertingAction) {\n  return Object.values(AlertingAction).includes(action);\n}\n","import { HTMLAttributes } from 'react';\n\nimport { Button, IconSize } from '@grafana/ui';\n\ninterface Props extends HTMLAttributes<HTMLButtonElement> {\n  isCollapsed: boolean;\n  onToggle: (isCollapsed: boolean) => void;\n  // Todo: this should be made compulsory for a11y purposes\n  idControlled?: string;\n  size?: IconSize;\n  className?: string;\n  text?: string;\n}\n\nexport const CollapseToggle = ({\n  isCollapsed,\n  onToggle,\n  idControlled,\n  className,\n  text,\n  size = 'xl',\n  ...restOfProps\n}: Props) => {\n  return (\n    <Button\n      type=\"button\"\n      fill=\"text\"\n      variant=\"secondary\"\n      aria-expanded={!isCollapsed}\n      aria-controls={idControlled}\n      className={className}\n      icon={isCollapsed ? 'angle-right' : 'angle-down'}\n      onClick={() => onToggle(!isCollapsed)}\n      {...restOfProps}\n    >\n      {text}\n    </Button>\n  );\n};\n","import { css } from '@emotion/css';\n\nimport { TagList, useStyles2 } from '@grafana/ui';\nimport { Matcher } from 'app/plugins/datasource/alertmanager/types';\n\nimport { matcherToOperator } from '../../utils/alertmanager';\n\ntype MatchersProps = { matchers: Matcher[] };\n\nexport const Matchers = ({ matchers }: MatchersProps) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <div>\n      <TagList\n        className={styles.tags}\n        tags={matchers.map((matcher) => `${matcher.name}${matcherToOperator(matcher)}${matcher.value}`)}\n      />\n    </div>\n  );\n};\n\nconst getStyles = () => ({\n  tags: css({\n    justifyContent: 'flex-start',\n  }),\n});\n","import { CallToActionCard, EmptyState, LinkButton } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { contextSrv } from 'app/core/services/context_srv';\n\nimport { getInstancesPermissions } from '../../utils/access-control';\nimport { makeAMLink } from '../../utils/misc';\n\ntype Props = {\n  alertManagerSourceName: string;\n};\n\nexport const NoSilencesSplash = ({ alertManagerSourceName }: Props) => {\n  const permissions = getInstancesPermissions(alertManagerSourceName);\n\n  if (contextSrv.hasPermission(permissions.create)) {\n    return (\n      <EmptyState\n        variant=\"call-to-action\"\n        button={\n          <LinkButton href={makeAMLink('alerting/silence/new', alertManagerSourceName)} icon=\"bell-slash\" size=\"lg\">\n            <Trans i18nKey=\"silences.empty-state.button-title\">Create silence</Trans>\n          </LinkButton>\n        }\n        message={t('silences.empty-state.title', \"You haven't created any silences yet\")}\n      />\n    );\n  }\n  return <CallToActionCard callToActionElement={<div />} message=\"No silences found.\" />;\n};\n","import { useState } from 'react';\n\nimport { intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { AlertmanagerAlert } from 'app/plugins/datasource/alertmanager/types';\n\nimport { AlertLabels } from '../AlertLabels';\nimport { CollapseToggle } from '../CollapseToggle';\n\nimport { AmAlertStateTag } from './AmAlertStateTag';\n\ninterface Props {\n  alert: AlertmanagerAlert;\n  className?: string;\n}\n\nexport const SilencedAlertsTableRow = ({ alert, className }: Props) => {\n  const [isCollapsed, setIsCollapsed] = useState(true);\n\n  const duration = intervalToAbbreviatedDurationString({\n    start: new Date(alert.startsAt),\n    end: new Date(alert.endsAt),\n  });\n  const alertName = Object.entries(alert.labels).reduce((name, [labelKey, labelValue]) => {\n    if (labelKey === 'alertname' || labelKey === '__alert_rule_title__') {\n      name = labelValue;\n    }\n    return name;\n  }, '');\n  return (\n    <>\n      <tr className={className}>\n        <td>\n          <CollapseToggle isCollapsed={isCollapsed} onToggle={(collapsed) => setIsCollapsed(collapsed)} />\n        </td>\n        <td>\n          <AmAlertStateTag state={alert.status.state} />\n        </td>\n        <td>for {duration}</td>\n        <td>{alertName}</td>\n      </tr>\n      {!isCollapsed && (\n        <tr className={className}>\n          <td />\n          <td colSpan={5}>\n            <AlertLabels labels={alert.labels} size=\"sm\" />\n          </td>\n        </tr>\n      )}\n    </>\n  );\n};\n","import { css, cx } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\nimport { AlertmanagerAlert } from 'app/plugins/datasource/alertmanager/types';\n\nimport { getAlertTableStyles } from '../../styles/table';\n\nimport { SilencedAlertsTableRow } from './SilencedAlertsTableRow';\n\ninterface Props {\n  silencedAlerts: AlertmanagerAlert[];\n}\n\nconst SilencedAlertsTable = ({ silencedAlerts }: Props) => {\n  const tableStyles = useStyles2(getAlertTableStyles);\n  const styles = useStyles2(getStyles);\n\n  if (!!silencedAlerts.length) {\n    return (\n      <table className={cx(tableStyles.table, styles.tableMargin)}>\n        <colgroup>\n          <col className={tableStyles.colExpand} />\n          <col className={styles.colState} />\n          <col />\n          <col className={styles.colName} />\n        </colgroup>\n        <thead>\n          <tr>\n            <th />\n            <th>\n              <Trans i18nKey=\"silences-table.header.state\">State</Trans>\n            </th>\n            <th />\n            <th>\n              <Trans i18nKey=\"silences-table.header.alert-name\">Alert name</Trans>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {silencedAlerts.map((alert, index) => {\n            return (\n              <SilencedAlertsTableRow\n                key={alert.fingerprint}\n                alert={alert}\n                className={index % 2 === 0 ? tableStyles.evenRow : ''}\n              />\n            );\n          })}\n        </tbody>\n      </table>\n    );\n  } else {\n    return null;\n  }\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tableMargin: css({\n    marginBottom: theme.spacing(1),\n  }),\n  colState: css({\n    width: '110px',\n  }),\n  colName: css({\n    width: '65%',\n  }),\n});\n\nexport default SilencedAlertsTable;\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2, dateMath, intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nimport SilencedAlertsTable from './SilencedAlertsTable';\nimport { SilenceTableItem } from './SilencesTable';\n\ninterface Props {\n  silence: SilenceTableItem;\n}\n\nexport const SilenceDetails = ({ silence }: Props) => {\n  const { startsAt, endsAt, comment, createdBy, silencedAlerts } = silence;\n  const styles = useStyles2(getStyles);\n\n  const dateDisplayFormat = 'YYYY-MM-DD HH:mm';\n  const startsAtDate = dateMath.parse(startsAt);\n  const endsAtDate = dateMath.parse(endsAt);\n  const duration = intervalToAbbreviatedDurationString({ start: new Date(startsAt), end: new Date(endsAt) });\n  return (\n    <div className={styles.container}>\n      <div className={styles.title}>\n        <Trans i18nKey=\"alerting.silence-details.comment\">Comment</Trans>\n      </div>\n      <div>{comment}</div>\n      <div className={styles.title}>\n        <Trans i18nKey=\"alerting.silence-details.schedule\">Schedule</Trans>\n      </div>\n      <div>{`${startsAtDate?.format(dateDisplayFormat)} - ${endsAtDate?.format(dateDisplayFormat)}`}</div>\n      <div className={styles.title}>\n        <Trans i18nKey=\"alerting.silence-details.duration\">Duration</Trans>\n      </div>\n      <div>{duration}</div>\n      <div className={styles.title}>\n        <Trans i18nKey=\"alerting.silence-details.created-by\">Created by</Trans>\n      </div>\n      <div>{createdBy}</div>\n      {Array.isArray(silencedAlerts) && (\n        <>\n          <div className={styles.title}>\n            <Trans i18nKey=\"alerting.silence-details.affected-alerts\">Affected alerts</Trans>\n          </div>\n          <SilencedAlertsTable silencedAlerts={silencedAlerts} />\n        </>\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    display: 'grid',\n    gridTemplateColumns: '1fr 9fr',\n    gridRowGap: '1rem',\n    paddingBottom: theme.spacing(2),\n  }),\n  title: css({\n    color: theme.colors.text.primary,\n  }),\n  row: css({\n    margin: theme.spacing(1, 0),\n  }),\n});\n","import { SilenceState } from 'app/plugins/datasource/alertmanager/types';\n\nimport { State, StateTag } from '../StateTag';\n\nconst silenceStateToState: Record<SilenceState, State> = {\n  [SilenceState.Active]: 'good',\n  [SilenceState.Expired]: 'neutral',\n  [SilenceState.Pending]: 'neutral',\n};\n\ninterface Props {\n  state: SilenceState;\n}\n\nexport const SilenceStateTag = ({ state }: Props) => <StateTag state={silenceStateToState[state]}>{state}</StateTag>;\n","import { css } from '@emotion/css';\nimport { debounce, uniqueId } from 'lodash';\nimport { FormEvent, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Field, Icon, Input, Label, Stack, Tooltip, useStyles2 } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { parsePromQLStyleMatcherLoose } from '../../utils/matchers';\nimport { getSilenceFiltersFromUrlParams } from '../../utils/misc';\n\nconst getQueryStringKey = () => uniqueId('query-string-');\n\nexport const SilencesFilter = () => {\n  const [queryStringKey, setQueryStringKey] = useState(getQueryStringKey());\n  const [queryParams, setQueryParams] = useQueryParams();\n  const { queryString } = getSilenceFiltersFromUrlParams(queryParams);\n  const styles = useStyles2(getStyles);\n\n  const handleQueryStringChange = debounce((e: FormEvent<HTMLInputElement>) => {\n    const target = e.target as HTMLInputElement;\n    setQueryParams({ queryString: target.value || null });\n  }, 400);\n\n  const clearFilters = () => {\n    setQueryParams({\n      queryString: null,\n      silenceState: null,\n    });\n    setTimeout(() => setQueryStringKey(getQueryStringKey()));\n  };\n\n  let inputValid = queryString && queryString.length > 3;\n  try {\n    if (!queryString) {\n      inputValid = true;\n    } else {\n      parsePromQLStyleMatcherLoose(queryString);\n    }\n  } catch (err) {\n    inputValid = false;\n  }\n\n  return (\n    <div className={styles.flexRow}>\n      <Field\n        className={styles.rowChild}\n        label={\n          <Label>\n            <Stack gap={0.5}>\n              <Trans i18nKey=\"alerting.common.search-by-matchers\">Search by matchers</Trans>\n              <Tooltip\n                content={\n                  <div>\n                    Filter silences by using a comma separated list of matchers, e.g.:\n                    <pre>severity=critical, env=production</pre>\n                  </div>\n                }\n              >\n                <Icon name=\"info-circle\" size=\"sm\" />\n              </Tooltip>\n            </Stack>\n          </Label>\n        }\n        invalid={!inputValid}\n        error={!inputValid ? 'Query must use valid matcher syntax' : null}\n      >\n        <Input\n          key={queryStringKey}\n          className={styles.searchInput}\n          prefix={<Icon name=\"search\" />}\n          onChange={handleQueryStringChange}\n          defaultValue={queryString ?? ''}\n          placeholder={t('alerting.silences-filter.search-query-input-placeholder-search', 'Search')}\n          data-testid=\"search-query-input\"\n        />\n      </Field>\n\n      {queryString && (\n        <div className={styles.rowChild}>\n          <Button variant=\"secondary\" icon=\"times\" onClick={clearFilters}>\n            <Trans i18nKey=\"alerting.common.clear-filters\">Clear filters</Trans>\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  searchInput: css({\n    width: '360px',\n  }),\n  flexRow: css({\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'flex-end',\n    paddingBottom: theme.spacing(3),\n    borderBottom: `1px solid ${theme.colors.border.medium}`,\n  }),\n  rowChild: css({\n    marginRight: theme.spacing(1),\n    marginBottom: 0,\n    maxHeight: '52px',\n  }),\n  fieldLabel: css({\n    fontSize: '12px',\n    fontWeight: 500,\n  }),\n});\n","import { css } from '@emotion/css';\nimport { useMemo } from 'react';\n\nimport { GrafanaTheme2, dateMath } from '@grafana/data';\nimport {\n  Alert,\n  CollapsableSection,\n  Divider,\n  Icon,\n  Link,\n  LinkButton,\n  LoadingPlaceholder,\n  Stack,\n  useStyles2,\n} from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { Trans, t } from 'app/core/internationalization';\nimport { alertSilencesApi } from 'app/features/alerting/unified/api/alertSilencesApi';\nimport { featureDiscoveryApi } from 'app/features/alerting/unified/api/featureDiscoveryApi';\nimport { MATCHER_ALERT_RULE_UID, SILENCES_POLL_INTERVAL_MS } from 'app/features/alerting/unified/utils/constants';\nimport { GRAFANA_RULES_SOURCE_NAME, getDatasourceAPIUid } from 'app/features/alerting/unified/utils/datasource';\nimport { AlertmanagerAlert, Silence, SilenceState } from 'app/plugins/datasource/alertmanager/types';\n\nimport { alertmanagerApi } from '../../api/alertmanagerApi';\nimport { AlertmanagerAction, useAlertmanagerAbility } from '../../hooks/useAbilities';\nimport { useAlertmanager } from '../../state/AlertmanagerContext';\nimport { parsePromQLStyleMatcherLooseSafe } from '../../utils/matchers';\nimport { getSilenceFiltersFromUrlParams, makeAMLink, stringifyErrorLike } from '../../utils/misc';\nimport { withPageErrorBoundary } from '../../withPageErrorBoundary';\nimport { AlertmanagerPageWrapper } from '../AlertingPageWrapper';\nimport { Authorize } from '../Authorize';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { GrafanaAlertmanagerDeliveryWarning } from '../GrafanaAlertmanagerDeliveryWarning';\n\nimport { Matchers } from './Matchers';\nimport { NoSilencesSplash } from './NoSilencesCTA';\nimport { SilenceDetails } from './SilenceDetails';\nimport { SilenceStateTag } from './SilenceStateTag';\nimport { SilencesFilter } from './SilencesFilter';\n\nexport interface SilenceTableItem extends Silence {\n  silencedAlerts: AlertmanagerAlert[] | undefined;\n}\n\ntype SilenceTableColumnProps = DynamicTableColumnProps<SilenceTableItem>;\ntype SilenceTableItemProps = DynamicTableItemProps<SilenceTableItem>;\n\nconst API_QUERY_OPTIONS = { pollingInterval: SILENCES_POLL_INTERVAL_MS, refetchOnFocus: true };\n\nconst SilencesTable = () => {\n  const { selectedAlertmanager: alertManagerSourceName = '' } = useAlertmanager();\n  const [previewAlertsSupported, previewAlertsAllowed] = useAlertmanagerAbility(\n    AlertmanagerAction.PreviewSilencedInstances\n  );\n  const canPreview = previewAlertsSupported && previewAlertsAllowed;\n\n  const { data: alertManagerAlerts = [], isLoading: amAlertsIsLoading } =\n    alertmanagerApi.endpoints.getAlertmanagerAlerts.useQuery(\n      { amSourceName: alertManagerSourceName, filter: { silenced: true, active: true, inhibited: true } },\n      { ...API_QUERY_OPTIONS, skip: !canPreview }\n    );\n\n  const {\n    data: silences = [],\n    isLoading,\n    error,\n  } = alertSilencesApi.endpoints.getSilences.useQuery(\n    { datasourceUid: getDatasourceAPIUid(alertManagerSourceName), ruleMetadata: true, accessControl: true },\n    API_QUERY_OPTIONS\n  );\n\n  const { currentData: amFeatures } = featureDiscoveryApi.useDiscoverAmFeaturesQuery(\n    { amSourceName: alertManagerSourceName ?? '' },\n    { skip: !alertManagerSourceName }\n  );\n\n  const mimirLazyInitError =\n    stringifyErrorLike(error).includes('the Alertmanager is not configured') && amFeatures?.lazyConfigInit;\n\n  const styles = useStyles2(getStyles);\n  const [queryParams] = useQueryParams();\n  const filteredSilencesNotExpired = useFilteredSilences(silences, false);\n  const filteredSilencesExpired = useFilteredSilences(silences, true);\n\n  const { silenceState: silenceStateInParams } = getSilenceFiltersFromUrlParams(queryParams);\n  const showExpiredFromUrl = silenceStateInParams === SilenceState.Expired;\n\n  const itemsNotExpired = useMemo((): SilenceTableItemProps[] => {\n    const findSilencedAlerts = (id: string) => {\n      return alertManagerAlerts.filter((alert) => alert.status.silencedBy.includes(id));\n    };\n    return filteredSilencesNotExpired.map((silence) => {\n      const silencedAlerts = canPreview ? findSilencedAlerts(silence.id) : undefined;\n      return {\n        id: silence.id,\n        data: { ...silence, silencedAlerts },\n      };\n    });\n  }, [filteredSilencesNotExpired, alertManagerAlerts, canPreview]);\n\n  const itemsExpired = useMemo((): SilenceTableItemProps[] => {\n    const findSilencedAlerts = (id: string) => {\n      return alertManagerAlerts.filter((alert) => alert.status.silencedBy.includes(id));\n    };\n    return filteredSilencesExpired.map((silence) => {\n      const silencedAlerts = canPreview ? findSilencedAlerts(silence.id) : undefined;\n      return {\n        id: silence.id,\n        data: { ...silence, silencedAlerts },\n      };\n    });\n  }, [filteredSilencesExpired, alertManagerAlerts, canPreview]);\n\n  if (isLoading || amAlertsIsLoading) {\n    return <LoadingPlaceholder text={t('alerting.silences-table.text-loading-silences', 'Loading silences...')} />;\n  }\n\n  if (mimirLazyInitError) {\n    return (\n      <Alert\n        title={t(\n          'alerting.silences-table.title-the-selected-alertmanager-has-no-configuration',\n          'The selected Alertmanager has no configuration'\n        )}\n        severity=\"warning\"\n      >\n        <Trans i18nKey=\"silences.table.noConfig\">\n          Create a new contact point to create a configuration using the default values or contact your administrator to\n          set up the Alertmanager.\n        </Trans>\n      </Alert>\n    );\n  }\n\n  if (error) {\n    const errMessage = stringifyErrorLike(error) || 'Unknown error.';\n    return (\n      <Alert\n        severity=\"error\"\n        title={t('alerting.silences-table.title-error-loading-silences', 'Error loading silences')}\n      >\n        {errMessage}\n      </Alert>\n    );\n  }\n\n  return (\n    <div data-testid=\"silences-table\">\n      <GrafanaAlertmanagerDeliveryWarning currentAlertmanager={alertManagerSourceName} />\n      {!!silences.length && (\n        <Stack direction=\"column\">\n          <SilencesFilter />\n          <Authorize actions={[AlertmanagerAction.CreateSilence]}>\n            <Stack justifyContent=\"end\">\n              <LinkButton href={makeAMLink('/alerting/silence/new', alertManagerSourceName)} icon=\"plus\">\n                <Trans i18nKey=\"silences.table.add-silence-button\">Add Silence</Trans>\n              </LinkButton>\n            </Stack>\n          </Authorize>\n          <SilenceList\n            items={itemsNotExpired}\n            alertManagerSourceName={alertManagerSourceName}\n            dataTestId=\"not-expired-table\"\n          />\n          {itemsExpired.length > 0 && (\n            <CollapsableSection label={`Expired silences (${itemsExpired.length})`} isOpen={showExpiredFromUrl}>\n              <div className={styles.callout}>\n                <Icon className={styles.calloutIcon} name=\"info-circle\" />\n                <span>\n                  <Trans i18nKey=\"silences.table.expired-silences\">\n                    Expired silences are automatically deleted after 5 days.\n                  </Trans>\n                </span>\n              </div>\n              <SilenceList\n                items={itemsExpired}\n                alertManagerSourceName={alertManagerSourceName}\n                dataTestId=\"expired-table\"\n              />\n            </CollapsableSection>\n          )}\n        </Stack>\n      )}\n      {!silences.length && <NoSilencesSplash alertManagerSourceName={alertManagerSourceName} />}\n    </div>\n  );\n};\n\nfunction SilenceList({\n  items,\n  alertManagerSourceName,\n  dataTestId,\n}: {\n  items: SilenceTableItemProps[];\n  alertManagerSourceName: string;\n  dataTestId: string;\n}) {\n  const columns = useColumns(alertManagerSourceName);\n  if (!!items.length) {\n    return (\n      <DynamicTable\n        pagination={{ itemsPerPage: 25 }}\n        items={items}\n        cols={columns}\n        isExpandable\n        dataTestId={dataTestId}\n        renderExpandedContent={({ data }) => {\n          return (\n            <>\n              <Divider />\n              <SilenceDetails silence={data} />\n            </>\n          );\n        }}\n      />\n    );\n  } else {\n    return <Trans i18nKey=\"silences.table.no-matching-silences\">No matching silences found;</Trans>;\n  }\n}\n\nconst useFilteredSilences = (silences: Silence[], expired = false) => {\n  const [queryParams] = useQueryParams();\n  return useMemo(() => {\n    const { queryString } = getSilenceFiltersFromUrlParams(queryParams);\n    const silenceIdsString = queryParams?.silenceIds;\n    return silences.filter((silence) => {\n      if (typeof silenceIdsString === 'string') {\n        const idsIncluded = silenceIdsString.split(',').includes(silence.id);\n        if (!idsIncluded) {\n          return false;\n        }\n      }\n      if (queryString) {\n        const matchers = parsePromQLStyleMatcherLooseSafe(queryString);\n        const matchersMatch = matchers.every((matcher) =>\n          silence.matchers?.some(\n            ({ name, value, isEqual, isRegex }) =>\n              matcher.name === name &&\n              matcher.value === value &&\n              matcher.isEqual === isEqual &&\n              matcher.isRegex === isRegex\n          )\n        );\n        if (!matchersMatch) {\n          return false;\n        }\n      }\n      if (expired) {\n        return silence.status.state === SilenceState.Expired;\n      } else {\n        return silence.status.state !== SilenceState.Expired;\n      }\n    });\n  }, [queryParams, silences, expired]);\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  callout: css({\n    backgroundColor: theme.colors.background.secondary,\n    borderTop: `3px solid ${theme.colors.info.border}`,\n    borderRadius: theme.shape.radius.default,\n    height: '62px',\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n\n    '& > *': {\n      marginLeft: theme.spacing(1),\n    },\n  }),\n  calloutIcon: css({\n    color: theme.colors.info.text,\n  }),\n});\n\nfunction useColumns(alertManagerSourceName: string) {\n  const [updateSupported, updateAllowed] = useAlertmanagerAbility(AlertmanagerAction.UpdateSilence);\n  const [expireSilence] = alertSilencesApi.endpoints.expireSilence.useMutation();\n  const isGrafanaFlavoredAlertmanager = alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME;\n\n  return useMemo((): SilenceTableColumnProps[] => {\n    const handleExpireSilenceClick = (silenceId: string) => {\n      expireSilence({ datasourceUid: getDatasourceAPIUid(alertManagerSourceName), silenceId });\n    };\n    const columns: SilenceTableColumnProps[] = [\n      {\n        id: 'state',\n        label: 'State',\n        renderCell: function renderStateTag({ data: { status } }) {\n          return <SilenceStateTag state={status.state} />;\n        },\n        size: 3,\n      },\n      {\n        id: 'alert-rule',\n        label: 'Alert rule targeted',\n        renderCell: function renderAlertRuleLink({ data: { metadata } }) {\n          return metadata?.rule_title ? (\n            <Link\n              href={`/alerting/grafana/${metadata?.rule_uid}/view?returnTo=${encodeURIComponent('/alerting/silences')}`}\n            >\n              {metadata.rule_title}\n            </Link>\n          ) : (\n            'None'\n          );\n        },\n        size: 8,\n      },\n      {\n        id: 'matchers',\n        label: 'Matching labels',\n        renderCell: function renderMatchers({ data: { matchers } }) {\n          const filteredMatchers = matchers?.filter((matcher) => matcher.name !== MATCHER_ALERT_RULE_UID) || [];\n          return <Matchers matchers={filteredMatchers} />;\n        },\n        size: 7,\n      },\n      {\n        id: 'alerts',\n        label: 'Alerts silenced',\n        renderCell: function renderSilencedAlerts({ data: { silencedAlerts } }) {\n          return <span data-testid=\"alerts\">{Array.isArray(silencedAlerts) ? silencedAlerts.length : '-'}</span>;\n        },\n        size: 2,\n      },\n      {\n        id: 'schedule',\n        label: 'Schedule',\n        renderCell: function renderSchedule({ data: { startsAt, endsAt } }) {\n          const startsAtDate = dateMath.parse(startsAt);\n          const endsAtDate = dateMath.parse(endsAt);\n          const dateDisplayFormat = 'YYYY-MM-DD HH:mm';\n          return `${startsAtDate?.format(dateDisplayFormat)} - ${endsAtDate?.format(dateDisplayFormat)}`;\n        },\n        size: 7,\n      },\n    ];\n    if (updateSupported) {\n      columns.push({\n        id: 'actions',\n        label: 'Actions',\n        renderCell: function renderActions({ data: silence }) {\n          const isExpired = silence.status.state === SilenceState.Expired;\n\n          const canCreate = silence?.accessControl?.create;\n          const canWrite = silence?.accessControl?.write;\n\n          const canRecreate = isExpired && (isGrafanaFlavoredAlertmanager ? canCreate : updateAllowed);\n          const canEdit = !isExpired && (isGrafanaFlavoredAlertmanager ? canWrite : updateAllowed);\n\n          return (\n            <Stack gap={0.5} wrap=\"wrap\">\n              {canRecreate && (\n                <LinkButton\n                  title={t('alerting.use-columns.title-recreate', 'Recreate')}\n                  size=\"sm\"\n                  variant=\"secondary\"\n                  icon=\"sync\"\n                  href={makeAMLink(`/alerting/silence/${silence.id}/edit`, alertManagerSourceName)}\n                >\n                  <Trans i18nKey=\"silences.table.recreate-button\">Recreate</Trans>\n                </LinkButton>\n              )}\n              {canEdit && (\n                <>\n                  <LinkButton\n                    title={t('alerting.use-columns.title-unsilence', 'Unsilence')}\n                    size=\"sm\"\n                    variant=\"secondary\"\n                    icon=\"bell\"\n                    onClick={() => handleExpireSilenceClick(silence.id)}\n                  >\n                    <Trans i18nKey=\"silences.table.unsilence-button\">Unsilence</Trans>\n                  </LinkButton>\n                  <LinkButton\n                    title={t('alerting.use-columns.title-edit', 'Edit')}\n                    size=\"sm\"\n                    variant=\"secondary\"\n                    icon=\"pen\"\n                    href={makeAMLink(`/alerting/silence/${silence.id}/edit`, alertManagerSourceName)}\n                  >\n                    <Trans i18nKey=\"silences.table.edit-button\">Edit</Trans>\n                  </LinkButton>\n                </>\n              )}\n            </Stack>\n          );\n        },\n        size: 5,\n      });\n    }\n    return columns;\n  }, [alertManagerSourceName, expireSilence, isGrafanaFlavoredAlertmanager, updateAllowed, updateSupported]);\n}\n\nfunction SilencesTablePage() {\n  return (\n    <AlertmanagerPageWrapper navId=\"silences\" accessType=\"instance\">\n      <SilencesTable />\n    </AlertmanagerPageWrapper>\n  );\n}\n\nexport default withPageErrorBoundary(SilencesTablePage);\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getAlertTableStyles = (theme: GrafanaTheme2) => ({\n  table: css({\n    width: '100%',\n    borderRadius: theme.shape.radius.default,\n    border: `solid 1px ${theme.colors.border.weak}`,\n    backgroundColor: theme.colors.background.secondary,\n\n    th: {\n      padding: theme.spacing(1),\n    },\n\n    td: {\n      padding: `0 ${theme.spacing(1)}`,\n    },\n\n    tr: {\n      height: '38px',\n    },\n  }),\n  evenRow: css({\n    backgroundColor: theme.colors.background.primary,\n  }),\n  colExpand: css({\n    width: '36px',\n  }),\n  nameCell: css({\n    gap: theme.spacing(1),\n  }),\n  actionsCell: css({\n    textAlign: 'right',\n    width: '1%',\n    whiteSpace: 'nowrap',\n\n    '& > * + *': {\n      marginLeft: theme.spacing(0.5),\n    },\n  }),\n});\n"],"names":["Authorize","actions","children","alertmanagerActions","isAlertmanagerAction","alertSourceActions","isAlertingAction","AuthorizeAlertmanager","AuthorizeAlertsource","alertmanagerAbilties","actionsAllowed","alertSourceAbilities","abilities","_supported","allowed","action","CollapseToggle","isCollapsed","onToggle","idControlled","className","text","size","restOfProps","Matchers","matchers","styles","getStyles","TagList","matcher","NoSilencesSplash","alertManagerSourceName","permissions","EmptyState","CallToActionCard","SilencedAlertsTableRow","alert","setIsCollapsed","duration","alertName","name","labelKey","labelValue","collapsed","AmAlertStateTag","AlertLabels","SilencedAlertsTable","silencedAlerts","tableStyles","index","theme","SilenceDetails","silence","startsAt","endsAt","comment","createdBy","dateDisplayFormat","startsAtDate","endsAtDate","silenceStateToState","SilenceStateTag","state","StateTag","getQueryStringKey","SilencesFilter","queryStringKey","setQueryStringKey","queryParams","setQueryParams","useQueryParams","queryString","handleQueryStringChange","e","target","clearFilters","inputValid","Field","Label","Stack","Tooltip","Icon","Input","Button","API_QUERY_OPTIONS","SilencesTable","previewAlertsSupported","previewAlertsAllowed","canPreview","alertManagerAlerts","amAlertsIsLoading","alertmanagerApi","silences","isLoading","error","alertSilencesApi","amFeatures","featureDiscoveryApi","mimirLazyInitError","filteredSilencesNotExpired","useFilteredSilences","filteredSilencesExpired","silenceStateInParams","showExpiredFromUrl","itemsNotExpired","findSilencedAlerts","id","itemsExpired","LoadingPlaceholder","Alert","errMessage","GrafanaAlertmanagerDeliveryWarning","SilenceList","CollapsableSection","items","dataTestId","columns","useColumns","DynamicTable","data","Divider","expired","silenceIdsString","value","isEqual","isRegex","updateSupported","updateAllowed","expireSilence","isGrafanaFlavoredAlertmanager","handleExpireSilenceClick","silenceId","status","metadata","Link","filteredMatchers","isExpired","canCreate","canWrite","canRecreate","canEdit","SilencesTablePage","withPageErrorBoundary","getAlertTableStyles"],"sourceRoot":""}