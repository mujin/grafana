{"version":3,"file":"Templates.413056ba7b6e9b3c9ef7.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/contact-points/DuplicateMessageTemplate.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/EditMessageTemplate.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/NewMessageTemplate.tsx","webpack://grafana/./public/app/features/alerting/unified/Templates.tsx","webpack://grafana/./public/app/features/alerting/unified/utils/duplicate.ts"],"sourcesContent":["import { useParams } from 'react-router-dom-v5-compat';\n\nimport { Alert, LoadingPlaceholder } from '@grafana/ui';\nimport { EntityNotFound } from 'app/core/components/PageNotFound/EntityNotFound';\nimport { t } from 'app/core/internationalization';\n\nimport { isNotFoundError } from '../../api/util';\nimport { useAlertmanager } from '../../state/AlertmanagerContext';\nimport { generateCopiedName } from '../../utils/duplicate';\nimport { stringifyErrorLike } from '../../utils/misc';\nimport { updateDefinesWithUniqueValue } from '../../utils/templates';\nimport { createRelativeUrl } from '../../utils/url';\nimport { withPageErrorBoundary } from '../../withPageErrorBoundary';\nimport { AlertmanagerPageWrapper } from '../AlertingPageWrapper';\nimport { TemplateForm } from '../receivers/TemplateForm';\n\nimport { ActiveTab } from './ContactPoints';\nimport { useGetNotificationTemplate, useNotificationTemplates } from './useNotificationTemplates';\n\nconst notFoundComponent = <EntityNotFound entity=\"Notification template\" />;\n\nconst DuplicateMessageTemplateComponent = () => {\n  const { selectedAlertmanager } = useAlertmanager();\n  const { name } = useParams<{ name: string }>();\n  const templateUid = name ? decodeURIComponent(name) : undefined;\n\n  const {\n    currentData: template,\n    isLoading: isLoadingTemplate,\n    error: templateFetchError,\n  } = useGetNotificationTemplate({ alertmanager: selectedAlertmanager ?? '', uid: templateUid ?? '' });\n\n  const {\n    currentData: templates,\n    isLoading: templatesLoading,\n    error: templatesFetchError,\n  } = useNotificationTemplates({ alertmanager: selectedAlertmanager ?? '' });\n\n  const isLoading = isLoadingTemplate || templatesLoading;\n  const error = templateFetchError || templatesFetchError;\n\n  if (!selectedAlertmanager) {\n    return <EntityNotFound entity=\"Alertmanager\" />;\n  }\n\n  if (!templateUid) {\n    return <EntityNotFound entity=\"Notification template\" />;\n  }\n\n  if (isLoading) {\n    return (\n      <LoadingPlaceholder\n        text={t(\n          'alerting.duplicate-message-template.text-loading-notification-template',\n          'Loading notification template'\n        )}\n      />\n    );\n  }\n\n  if (error) {\n    return isNotFoundError(error) ? (\n      notFoundComponent\n    ) : (\n      <Alert\n        title={t(\n          'alerting.duplicate-message-template.title-error-loading-notification-template',\n          'Error loading notification template'\n        )}\n        severity=\"error\"\n      >\n        {stringifyErrorLike(error)}\n      </Alert>\n    );\n  }\n\n  if (!template) {\n    return notFoundComponent;\n  }\n\n  const duplicatedName = generateCopiedName(template.title, templates?.map((t) => t.title) ?? []);\n\n  return (\n    <TemplateForm\n      alertmanager={selectedAlertmanager}\n      prefill={{ title: duplicatedName, content: updateDefinesWithUniqueValue(template.content) }}\n    />\n  );\n};\n\nfunction DuplicateMessageTemplate() {\n  return (\n    <AlertmanagerPageWrapper\n      navId=\"receivers\"\n      accessType=\"notification\"\n      pageNav={{\n        id: 'templates',\n        text: t('alerting.notification-templates.duplicate.title', 'Duplicate notification template group'),\n        subTitle: t(\n          'alerting.notification-templates.duplicate.subTitle',\n          'Duplicate a group of notification templates'\n        ),\n        parentItem: {\n          text: t('alerting.common.titles.notification-templates', 'Notification Templates'),\n          url: createRelativeUrl('/alerting/notifications', {\n            tab: ActiveTab.NotificationTemplates,\n          }),\n        },\n      }}\n    >\n      <DuplicateMessageTemplateComponent />\n    </AlertmanagerPageWrapper>\n  );\n}\n\nexport default withPageErrorBoundary(DuplicateMessageTemplate);\n","import { useParams } from 'react-router-dom-v5-compat';\n\nimport { Alert, LoadingPlaceholder } from '@grafana/ui';\nimport { EntityNotFound } from 'app/core/components/PageNotFound/EntityNotFound';\nimport { t } from 'app/core/internationalization';\n\nimport { isNotFoundError } from '../../api/util';\nimport { useAlertmanager } from '../../state/AlertmanagerContext';\nimport { stringifyErrorLike } from '../../utils/misc';\nimport { createRelativeUrl } from '../../utils/url';\nimport { withPageErrorBoundary } from '../../withPageErrorBoundary';\nimport { AlertmanagerPageWrapper } from '../AlertingPageWrapper';\nimport { TemplateForm } from '../receivers/TemplateForm';\n\nimport { ActiveTab } from './ContactPoints';\nimport { useGetNotificationTemplate } from './useNotificationTemplates';\n\nconst notFoundComponent = <EntityNotFound entity=\"Notification template\" />;\n\nconst EditMessageTemplateComponent = () => {\n  const { name } = useParams<{ name: string }>();\n  const templateUid = name ? decodeURIComponent(name) : undefined;\n\n  const { selectedAlertmanager } = useAlertmanager();\n  const { currentData, isLoading, error, isUninitialized } = useGetNotificationTemplate({\n    alertmanager: selectedAlertmanager ?? '',\n    uid: templateUid ?? '',\n  });\n\n  if (!templateUid) {\n    return <EntityNotFound entity=\"Notification template\" />;\n  }\n\n  if (isLoading || isUninitialized) {\n    return (\n      <LoadingPlaceholder text={t('alerting.edit-message-template.text-loading-template', 'Loading template...')} />\n    );\n  }\n\n  if (error) {\n    return isNotFoundError(error) ? (\n      notFoundComponent\n    ) : (\n      <Alert\n        severity=\"error\"\n        title={t(\n          'alerting.edit-message-template.title-failed-to-fetch-notification-template',\n          'Failed to fetch notification template'\n        )}\n      >\n        {stringifyErrorLike(error)}\n      </Alert>\n    );\n  }\n\n  if (!currentData) {\n    return notFoundComponent;\n  }\n\n  return <TemplateForm alertmanager={selectedAlertmanager ?? ''} originalTemplate={currentData} />;\n};\n\nfunction EditMessageTemplate() {\n  return (\n    <AlertmanagerPageWrapper\n      navId=\"receivers\"\n      accessType=\"notification\"\n      pageNav={{\n        id: 'templates',\n        text: t('alerting.notification-templates.edit.title', 'Edit notification template group'),\n        subTitle: t('alerting.notification-templates.edit.subTitle', 'Edit a group of notification templates'),\n        parentItem: {\n          text: t('alerting.common.titles.notification-templates', 'Notification Templates'),\n          url: createRelativeUrl('/alerting/notifications', {\n            tab: ActiveTab.NotificationTemplates,\n          }),\n        },\n      }}\n    >\n      <EditMessageTemplateComponent />\n    </AlertmanagerPageWrapper>\n  );\n}\n\nexport default withPageErrorBoundary(EditMessageTemplate);\n","import { t } from 'app/core/internationalization';\n\nimport { useAlertmanager } from '../../state/AlertmanagerContext';\nimport { createRelativeUrl } from '../../utils/url';\nimport { withPageErrorBoundary } from '../../withPageErrorBoundary';\nimport { AlertmanagerPageWrapper } from '../AlertingPageWrapper';\nimport { TemplateForm } from '../receivers/TemplateForm';\n\nimport { ActiveTab } from './ContactPoints';\n\nfunction NewMessageTemplatePage() {\n  return (\n    <AlertmanagerPageWrapper\n      navId=\"receivers\"\n      accessType=\"notification\"\n      pageNav={{\n        id: 'templates',\n        text: t('alerting.notification-templates.new.title', 'New notification template group'),\n        subTitle: t('alerting.notification-templates.new.subTitle', 'Create a new group of notification templates'),\n        parentItem: {\n          text: t('alerting.common.titles.notification-templates', 'Notification Templates'),\n          url: createRelativeUrl('/alerting/notifications', {\n            tab: ActiveTab.NotificationTemplates,\n          }),\n        },\n      }}\n    >\n      <NewMessageTemplate />\n    </AlertmanagerPageWrapper>\n  );\n}\n\nfunction NewMessageTemplate() {\n  const { selectedAlertmanager } = useAlertmanager();\n  return <TemplateForm alertmanager={selectedAlertmanager ?? ''} />;\n}\n\nexport default withPageErrorBoundary(NewMessageTemplatePage);\n","import { Route, Routes } from 'react-router-dom-v5-compat';\n\nimport DuplicateMessageTemplate from './components/contact-points/DuplicateMessageTemplate';\nimport EditMessageTemplate from './components/contact-points/EditMessageTemplate';\nimport NewMessageTemplate from './components/contact-points/NewMessageTemplate';\nimport { withPageErrorBoundary } from './withPageErrorBoundary';\n\nfunction NotificationTemplates() {\n  return (\n    <Routes>\n      <Route path=\"new\" element={<NewMessageTemplate />} />\n      <Route path=\":name/edit\" element={<EditMessageTemplate />} />\n      <Route path=\":name/duplicate\" element={<DuplicateMessageTemplate />} />\n    </Routes>\n  );\n}\n\nexport default withPageErrorBoundary(NotificationTemplates);\n","export function generateCopiedName(originalName: string, exisitingNames: string[]) {\n  const nonDuplicateName = originalName.replace(/\\(copy( [0-9]+)?\\)$/, '').trim();\n\n  let newName = `${nonDuplicateName} (copy)`;\n\n  for (let i = 2; exisitingNames.includes(newName); i++) {\n    newName = `${nonDuplicateName} (copy ${i})`;\n  }\n\n  return newName;\n}\n"],"names":["notFoundComponent","EntityNotFound","DuplicateMessageTemplateComponent","selectedAlertmanager","name","templateUid","template","isLoadingTemplate","templateFetchError","templates","templatesLoading","templatesFetchError","useNotificationTemplates","isLoading","error","LoadingPlaceholder","Alert","duplicatedName","t","TemplateForm","DuplicateMessageTemplate","withPageErrorBoundary","EditMessageTemplateComponent","currentData","isUninitialized","EditMessageTemplate","NewMessageTemplatePage","NewMessageTemplate","NotificationTemplates","generateCopiedName","originalName","exisitingNames","nonDuplicateName","newName","i"],"sourceRoot":""}