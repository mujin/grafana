{"version":3,"file":"AdminSettings.50c412e1bf25d295637c.js","mappings":"8PAYA,MAAMA,EAA8B,CAAC,CAAE,SAAAC,CAAS,OAE5C,OAACC,EAAA,EAAe,CAAC,UAAU,UAAU,UAAU,OAAO,MAAM,OAC1D,mBAAC,SAAM,UAAU,eACf,mBAAC,SACE,gBAAO,QAAQD,CAAQ,EAAE,IAAI,CAAC,CAACE,EAAaC,CAAe,EAAGC,OAC7D,QAAC,WAAQ,CACP,qBAAC,MACC,oBAAC,MACC,mBAACC,EAAA,EAAI,CAAC,MAAM,OAAO,OAAO,OACvB,SAAAH,CAAA,CACH,EACF,KACA,OAAC,OAAG,GACN,EACC,OAAO,QAAQC,CAAe,EAAE,IAAI,CAAC,CAACG,EAAaC,CAAY,EAAGC,OACjE,QAAC,MACC,oBAAC,MAAG,MAAO,CAAE,YAAa,MAAO,EAAI,SAAAF,CAAA,CAAY,KACjD,OAAC,MAAG,MAAO,CAAE,WAAY,cAAe,EAAI,SAAAC,CAAA,CAAa,IAFlD,YAAYC,CAAC,EAGtB,CACD,IAdY,WAAWJ,CAAC,EAe3B,CACD,EACH,EACF,EACF,EAKEK,EAAe,IAAI,MAAM,EAAE,EAAE,KAAK,IAAI,EAAE,IAAI,IAAM,KAAK,OAAO,CAAC,EAE/DC,EAAgD,CAAC,CAAE,UAAAC,CAAU,OAE/D,OAACV,EAAA,EAAe,CAAC,UAAU,UAAU,UAAU,OAAO,MAAM,OAC1D,mBAAC,SAAM,UAAU,eAAgB,GAAGU,EAClC,mBAAC,SACE,SAAAF,EAAa,IAAI,CAACG,EAAaC,IAAU,CACxC,MAAMC,EAAYD,IAAU,GAAKD,EAAc,GAE/C,SACE,QAAC,WAAQ,CACN,UAAAE,MACC,QAAC,MACC,oBAAC,MAAG,UAAU,yBACZ,mBAAC,IAAQ,CAAC,MAAOC,EAAiB,GAAI,GAAIH,CAAW,EAAG,EAC1D,KACA,OAAC,OAAG,GACN,KAEF,QAAC,MACC,oBAAC,MAAG,MAAO,CAAE,YAAa,MAAO,EAC/B,mBAAC,IAAQ,CAAC,MAAOG,EAAiB,GAAI,IAAKH,CAAW,EAAG,EAC3D,KACA,OAAC,MACC,mBAAC,IAAQ,CAAC,MAAOG,EAAiB,GAAI,IAAKH,CAAW,EAAG,EAC3D,GACF,IAhBaC,CAiBf,CAEJ,CAAC,EACH,EACF,EACF,EAIJ,SAASE,EAAiBC,EAAaC,EAAaC,EAAoB,CACtE,OAAOA,GAAcD,EAAMD,GAAOA,CACpC,CAEO,MAAMG,KAAqB,KAAepB,EAA6BW,CAA0B,ECxExG,SAASU,GAAgB,CACvB,KAAM,CAAE,QAAAC,EAAS,MAAOrB,CAAS,KAAIsB,EAAA,GAAS,OAAM,MAAc,EAAE,IAAc,qBAAqB,EAAG,CAAC,CAAC,EAE5G,SACE,OAACC,EAAA,EAAI,CAAC,MAAM,kBACV,oBAACA,EAAA,EAAK,SAAL,CACC,oBAACC,EAAA,EAAK,CAAC,SAAS,OAAO,MAAM,GAC3B,mBAAC,KAAK,CAAC,QAAQ,kCAAkC,mKAGjD,EACF,EAECH,MAAW,OAACF,EAAmB,SAAnB,EAA4B,EAExCnB,MAAY,OAACmB,EAAkB,CAAC,SAAAnB,CAAA,CAAoB,GACvD,EACF,CAEJ,CAEA,QAAeoB,C","sources":["webpack://grafana/./public/app/features/admin/AdminSettingsTable.tsx","webpack://grafana/./public/app/features/admin/AdminSettings.tsx"],"sourcesContent":["import { Fragment } from 'react';\nimport Skeleton from 'react-loading-skeleton';\n\nimport { ScrollContainer, Text } from '@grafana/ui';\nimport { SkeletonComponent, attachSkeleton } from '@grafana/ui/unstable';\n\nimport { Settings } from './AdminSettings';\n\ninterface Props {\n  settings: Settings;\n}\n\nconst AdminSettingsTableComponent = ({ settings }: Props) => {\n  return (\n    <ScrollContainer overflowY=\"visible\" overflowX=\"auto\" width=\"100%\">\n      <table className=\"filter-table\">\n        <tbody>\n          {Object.entries(settings).map(([sectionName, sectionSettings], i) => (\n            <Fragment key={`section-${i}`}>\n              <tr>\n                <td>\n                  <Text color=\"info\" weight=\"bold\">\n                    {sectionName}\n                  </Text>\n                </td>\n                <td />\n              </tr>\n              {Object.entries(sectionSettings).map(([settingName, settingValue], j) => (\n                <tr key={`property-${j}`}>\n                  <td style={{ paddingLeft: '25px' }}>{settingName}</td>\n                  <td style={{ whiteSpace: 'break-spaces' }}>{settingValue}</td>\n                </tr>\n              ))}\n            </Fragment>\n          ))}\n        </tbody>\n      </table>\n    </ScrollContainer>\n  );\n};\n\n// note: don't want to put this in render function else it will get regenerated\nconst randomValues = new Array(50).fill(null).map(() => Math.random());\n\nconst AdminSettingsTableSkeleton: SkeletonComponent = ({ rootProps }) => {\n  return (\n    <ScrollContainer overflowY=\"visible\" overflowX=\"auto\" width=\"100%\">\n      <table className=\"filter-table\" {...rootProps}>\n        <tbody>\n          {randomValues.map((randomValue, index) => {\n            const isSection = index === 0 || randomValue > 0.9;\n\n            return (\n              <Fragment key={index}>\n                {isSection && (\n                  <tr>\n                    <td className=\"admin-settings-section\">\n                      <Skeleton width={getRandomInRange(40, 80, randomValue)} />\n                    </td>\n                    <td />\n                  </tr>\n                )}\n                <tr>\n                  <td style={{ paddingLeft: '25px' }}>\n                    <Skeleton width={getRandomInRange(60, 100, randomValue)} />\n                  </td>\n                  <td>\n                    <Skeleton width={getRandomInRange(80, 320, randomValue)} />\n                  </td>\n                </tr>\n              </Fragment>\n            );\n          })}\n        </tbody>\n      </table>\n    </ScrollContainer>\n  );\n};\n\nfunction getRandomInRange(min: number, max: number, randomSeed: number) {\n  return randomSeed * (max - min) + min;\n}\n\nexport const AdminSettingsTable = attachSkeleton(AdminSettingsTableComponent, AdminSettingsTableSkeleton);\n","import { useAsync } from 'react-use';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Alert } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { Trans } from 'app/core/internationalization';\n\nimport { AdminSettingsTable } from './AdminSettingsTable';\n\nexport type Settings = { [key: string]: { [key: string]: string } };\n\nfunction AdminSettings() {\n  const { loading, value: settings } = useAsync(() => getBackendSrv().get<Settings>('/api/admin/settings'), []);\n\n  return (\n    <Page navId=\"server-settings\">\n      <Page.Contents>\n        <Alert severity=\"info\" title=\"\">\n          <Trans i18nKey=\"admin.settings.info-description\">\n            These system settings are defined in grafana.ini or custom.ini (or overridden in ENV variables). To change\n            these you currently need to restart Grafana.\n          </Trans>\n        </Alert>\n\n        {loading && <AdminSettingsTable.Skeleton />}\n\n        {settings && <AdminSettingsTable settings={settings} />}\n      </Page.Contents>\n    </Page>\n  );\n}\n\nexport default AdminSettings;\n"],"names":["AdminSettingsTableComponent","settings","ScrollContainer","sectionName","sectionSettings","i","Text","settingName","settingValue","j","randomValues","AdminSettingsTableSkeleton","rootProps","randomValue","index","isSection","getRandomInRange","min","max","randomSeed","AdminSettingsTable","AdminSettings","loading","useAsync","Page","Alert"],"sourceRoot":""}