{"version":3,"file":"PublicDashboardPage.5c1bf4eeb8800766b56a.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/Login/LoginLayout.tsx","webpack://grafana/./public/app/features/dashboard/components/PublicDashboard/usePublicDashboardConfig.tsx","webpack://grafana/./public/app/features/dashboard/components/PublicDashboard/PublicDashboardsFooter.tsx","webpack://grafana/./public/app/features/dashboard/components/PublicDashboardNotAvailable/PublicDashboardNotAvailable.tsx","webpack://grafana/./public/app/features/dashboard-scene/pages/PublicDashboardScenePage.tsx","webpack://grafana/./public/app/features/dashboard/components/DashboardLoading/DashboardFailed.tsx","webpack://grafana/./public/app/features/dashboard/containers/PublicDashboardPage.tsx","webpack://grafana/./public/app/features/dashboard/containers/PublicDashboardPageProxy.tsx"],"sourcesContent":["import { cx, css, keyframes } from '@emotion/css';\nimport { useEffect, useState } from 'react';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nimport { Branding } from '../Branding/Branding';\nimport { BrandingSettings } from '../Branding/types';\nimport { Footer } from '../Footer/Footer';\n\ninterface InnerBoxProps {\n  enterAnimation?: boolean;\n}\nexport const InnerBox = ({ children, enterAnimation = true }: React.PropsWithChildren<InnerBoxProps>) => {\n  const loginStyles = useStyles2(getLoginStyles);\n  return <div className={cx(loginStyles.loginInnerBox, enterAnimation && loginStyles.enterAnimation)}>{children}</div>;\n};\n\nexport interface LoginLayoutProps {\n  /** Custom branding settings that can be used e.g. for previewing the Login page changes */\n  branding?: BrandingSettings;\n  isChangingPassword?: boolean;\n}\n\nexport const LoginLayout = ({ children, branding, isChangingPassword }: React.PropsWithChildren<LoginLayoutProps>) => {\n  const loginStyles = useStyles2(getLoginStyles);\n  const [startAnim, setStartAnim] = useState(false);\n  const subTitle = branding?.loginSubtitle ?? Branding.GetLoginSubTitle();\n  const loginTitle = branding?.loginTitle ?? Branding.LoginTitle;\n  const loginBoxBackground = branding?.loginBoxBackground || Branding.LoginBoxBackground();\n  const loginLogo = branding?.loginLogo;\n  const hideEdition = branding?.hideEdition ?? Branding.HideEdition;\n\n  useEffect(() => setStartAnim(true), []);\n\n  return (\n    <Branding.LoginBackground\n      className={cx(loginStyles.container, startAnim && loginStyles.loginAnim, branding?.loginBackground)}\n    >\n      <div className={loginStyles.loginMain}>\n        <div className={cx(loginStyles.loginContent, loginBoxBackground, 'login-content-box')}>\n          <div className={loginStyles.loginLogoWrapper}>\n            <Branding.LoginLogo className={loginStyles.loginLogo} logo={loginLogo} />\n            <div className={loginStyles.titleWrapper}>\n              {isChangingPassword ? (\n                <h1 className={loginStyles.mainTitle}>\n                  <Trans i18nKey=\"login.layout.update-password\">Update your password</Trans>\n                </h1>\n              ) : (\n                <>\n                  <h1 className={loginStyles.mainTitle}>{loginTitle}</h1>\n                  {subTitle && <h3 className={loginStyles.subTitle}>{subTitle}</h3>}\n                </>\n              )}\n            </div>\n          </div>\n          <div className={loginStyles.loginOuterBox}>{children}</div>\n        </div>\n      </div>\n      {branding?.hideFooter ? <></> : <Footer hideEdition={hideEdition} customLinks={branding?.footerLinks} />}\n    </Branding.LoginBackground>\n  );\n};\n\nconst flyInAnimation = keyframes`\nfrom{\n  opacity: 0;\n  transform: translate(-60px, 0px);\n}\n\nto{\n  opacity: 1;\n  transform: translate(0px, 0px);\n}`;\n\nexport const getLoginStyles = (theme: GrafanaTheme2) => {\n  return {\n    loginMain: css({\n      flexGrow: 1,\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      minWidth: '100%',\n    }),\n    container: css({\n      minHeight: '100%',\n      backgroundPosition: 'center',\n      backgroundRepeat: 'no-repeat',\n      flex: 1,\n      minWidth: '100%',\n      marginLeft: 0,\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n    }),\n    loginAnim: css({\n      ['&:before']: {\n        opacity: 1,\n      },\n\n      ['.login-content-box']: {\n        opacity: 1,\n      },\n    }),\n    submitButton: css({\n      justifyContent: 'center',\n      width: '100%',\n    }),\n    loginLogo: css({\n      width: '100%',\n      maxWidth: 60,\n      marginBottom: theme.spacing(2),\n\n      [theme.breakpoints.up('sm')]: {\n        maxWidth: 100,\n      },\n    }),\n    loginLogoWrapper: css({\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      flexDirection: 'column',\n      padding: theme.spacing(3),\n    }),\n    titleWrapper: css({\n      textAlign: 'center',\n    }),\n    mainTitle: css({\n      fontSize: 22,\n\n      [theme.breakpoints.up('sm')]: {\n        fontSize: 32,\n      },\n    }),\n    subTitle: css({\n      fontSize: theme.typography.size.md,\n      color: theme.colors.text.secondary,\n    }),\n    loginContent: css({\n      maxWidth: 478,\n      width: `calc(100% - 2rem)`,\n      display: 'flex',\n      alignItems: 'stretch',\n      flexDirection: 'column',\n      position: 'relative',\n      justifyContent: 'flex-start',\n      zIndex: 1,\n      minHeight: 320,\n      borderRadius: theme.shape.radius.default,\n      padding: theme.spacing(2, 0),\n      opacity: 0,\n      [theme.transitions.handleMotion('no-preference', 'reduce')]: {\n        transition: 'opacity 0.5s ease-in-out',\n      },\n\n      [theme.breakpoints.up('sm')]: {\n        minHeight: theme.spacing(40),\n        justifyContent: 'center',\n      },\n    }),\n    loginOuterBox: css({\n      display: 'flex',\n      overflowY: 'hidden',\n      alignItems: 'center',\n      justifyContent: 'center',\n    }),\n    loginInnerBox: css({\n      padding: theme.spacing(0, 2, 2, 2),\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      flexGrow: 1,\n      maxWidth: 415,\n      width: '100%',\n      transform: 'translate(0px, 0px)',\n      [theme.transitions.handleMotion('no-preference')]: {\n        transition: '0.25s ease',\n      },\n    }),\n    enterAnimation: css({\n      [theme.transitions.handleMotion('no-preference')]: {\n        animation: `${flyInAnimation} ease-out 0.2s`,\n      },\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, useTheme2 } from '@grafana/ui';\n\nconst FOOTER_URL = 'https://grafana.com/?src=grafananet&cnt=public-dashboards';\nconst GRAFANA_LOGO_LIGHT_URL = 'public/img/grafana_text_logo_light.svg';\nconst GRAFANA_LOGO_DARK_URL = 'public/img/grafana_text_logo_dark.svg';\nconst GRAFANA_LOGO_DEFAULT_VALUE = 'grafana-logo';\n\nexport interface PublicDashboardCfg {\n  footerHide: boolean;\n  footerText: React.ReactNode;\n  footerLogo: string;\n  footerLink: string;\n  headerLogoHide: boolean;\n}\nconst useGetConfig = (cfg?: PublicDashboardCfg) => {\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n\n  const { footerHide, footerText, footerLink, footerLogo, headerLogoHide } = cfg || {\n    footerHide: false,\n    footerText: 'Powered by',\n    footerLogo: GRAFANA_LOGO_DEFAULT_VALUE,\n    footerLink: FOOTER_URL,\n    headerLogoHide: false,\n  };\n\n  return {\n    footerHide,\n    footerText: <span className={styles.text}>{footerText}</span>,\n    footerLogo:\n      footerLogo === GRAFANA_LOGO_DEFAULT_VALUE\n        ? theme.isDark\n          ? GRAFANA_LOGO_LIGHT_URL\n          : GRAFANA_LOGO_DARK_URL\n        : footerLogo,\n    footerLink,\n    headerLogoHide,\n  };\n};\nexport let useGetPublicDashboardConfig = (): PublicDashboardCfg => useGetConfig();\n\nexport function setPublicDashboardConfigFn(cfg: PublicDashboardCfg) {\n  useGetPublicDashboardConfig = (): PublicDashboardCfg => useGetConfig(cfg);\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  text: css({\n    color: theme.colors.text.secondary,\n    fontSize: theme.typography.body.fontSize,\n  }),\n});\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { useGetPublicDashboardConfig } from './usePublicDashboardConfig';\n\nconst selectors = e2eSelectors.pages.PublicDashboard;\n\nexport const PublicDashboardFooter = function () {\n  const styles = useStyles2(getStyles);\n  const conf = useGetPublicDashboardConfig();\n\n  return conf.footerHide ? null : (\n    <div className={styles.footer} data-testid={selectors.footer}>\n      <a className={styles.link} href={conf.footerLink} target=\"_blank\" rel=\"noreferrer noopener\">\n        {conf.footerText} <img className={styles.logoImg} alt=\"\" src={conf.footerLogo} />\n      </a>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  footer: css({\n    display: 'flex',\n    justifyContent: 'end',\n    height: '30px',\n    backgroundColor: theme.colors.background.canvas,\n    position: 'sticky',\n    bottom: 0,\n    zIndex: theme.zIndex.navbarFixed,\n    padding: theme.spacing(0.5, 0),\n  }),\n  link: css({\n    display: 'flex',\n    alignItems: 'center',\n  }),\n  logoImg: css({\n    height: '16px',\n    marginLeft: theme.spacing(0.5),\n  }),\n});\n","import { css, cx } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors/src';\nimport { useStyles2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nimport { Branding } from '../../../../core/components/Branding/Branding';\nimport { getLoginStyles } from '../../../../core/components/Login/LoginLayout';\n\nconst selectors = e2eSelectors.pages.PublicDashboard.NotAvailable;\n\nexport const PublicDashboardNotAvailable = ({ paused }: { paused?: boolean }) => {\n  const styles = useStyles2(getStyles);\n  const loginStyles = useStyles2(getLoginStyles);\n  const loginBoxBackground = Branding.LoginBoxBackground();\n\n  return (\n    <Branding.LoginBackground className={styles.container} data-testid={selectors.container}>\n      <div className={cx(styles.box, loginBoxBackground)}>\n        <Branding.LoginLogo className={loginStyles.loginLogo} />\n        <p className={styles.title} data-testid={selectors.title}>\n          {paused\n            ? 'This dashboard has been paused by the administrator'\n            : 'The dashboard you are trying to access does not exist'}\n        </p>\n        {paused && (\n          <p className={styles.description} data-testid={selectors.pausedDescription}>\n            <Trans i18nKey=\"dashboard.public-dashboard-not-available.try-again-later\">Try again later</Trans>\n          </p>\n        )}\n      </div>\n    </Branding.LoginBackground>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: '100%',\n\n    ':before': {\n      opacity: 1,\n    },\n  }),\n  box: css({\n    width: '608px',\n    display: 'flex',\n    alignItems: 'center',\n    flexDirection: 'column',\n    gap: theme.spacing(4),\n    zIndex: 1,\n    borderRadius: theme.shape.borderRadius(4),\n    padding: theme.spacing(6, 8),\n    opacity: 1,\n  }),\n  title: css({\n    fontSize: theme.typography.h3.fontSize,\n    textAlign: 'center',\n    margin: 0,\n  }),\n  description: css({\n    fontSize: theme.typography.h5.fontSize,\n    margin: 0,\n  }),\n});\n","import { css } from '@emotion/css';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom-v5-compat';\n\nimport { GrafanaTheme2, PageLayoutType } from '@grafana/data';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors';\nimport { SceneComponentProps, UrlSyncContextProvider } from '@grafana/scenes';\nimport { Alert, Box, Icon, Stack, useStyles2 } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { PublicDashboardFooter } from 'app/features/dashboard/components/PublicDashboard/PublicDashboardsFooter';\nimport { PublicDashboardNotAvailable } from 'app/features/dashboard/components/PublicDashboardNotAvailable/PublicDashboardNotAvailable';\nimport {\n  PublicDashboardPageRouteParams,\n  PublicDashboardPageRouteSearchParams,\n} from 'app/features/dashboard/containers/types';\nimport { AppNotificationSeverity } from 'app/types';\nimport { DashboardRoutes } from 'app/types/dashboard';\n\nimport { DashboardScene } from '../scene/DashboardScene';\n\nimport { getDashboardScenePageStateManager, LoadError } from './DashboardScenePageStateManager';\n\nconst selectors = e2eSelectors.pages.PublicDashboardScene;\n\nexport type Props = Omit<\n  GrafanaRouteComponentProps<PublicDashboardPageRouteParams, PublicDashboardPageRouteSearchParams>,\n  'match' | 'history'\n>;\n\nexport function PublicDashboardScenePage({ route }: Props) {\n  const { accessToken = '' } = useParams();\n  const stateManager = getDashboardScenePageStateManager();\n  const styles = useStyles2(getStyles);\n  const { dashboard, isLoading, loadError } = stateManager.useState();\n\n  useEffect(() => {\n    stateManager.loadDashboard({ uid: accessToken, route: DashboardRoutes.Public });\n\n    return () => {\n      stateManager.clearState();\n    };\n  }, [stateManager, accessToken, route.routeName]);\n\n  if (loadError) {\n    return <PublicDashboardScenePageError error={loadError} />;\n  }\n\n  if (!dashboard) {\n    return (\n      <Page layout={PageLayoutType.Custom} className={styles.loadingPage} data-testid={selectors.loadingPage}>\n        {isLoading && <PageLoader />}\n      </Page>\n    );\n  }\n\n  // if no time picker render without url sync\n  if (dashboard.state.controls?.state.hideTimeControls) {\n    return <PublicDashboardSceneRenderer model={dashboard} />;\n  }\n\n  return (\n    <UrlSyncContextProvider scene={dashboard}>\n      <PublicDashboardSceneRenderer model={dashboard} />\n    </UrlSyncContextProvider>\n  );\n}\n\nfunction PublicDashboardSceneRenderer({ model }: SceneComponentProps<DashboardScene>) {\n  const [isActive, setIsActive] = useState(false);\n  const { controls, title } = model.useState();\n  const { timePicker, refreshPicker, hideTimeControls } = controls!.useState();\n  const bodyToRender = model.getBodyToRender();\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    return refreshPicker.activate();\n  }, [refreshPicker]);\n\n  useEffect(() => {\n    setIsActive(true);\n    return model.activate();\n  }, [model]);\n\n  if (!isActive) {\n    return null;\n  }\n\n  return (\n    <Page layout={PageLayoutType.Custom} className={styles.page} data-testid={selectors.page}>\n      <div className={styles.controls}>\n        <Stack alignItems=\"center\">\n          <div className={styles.iconTitle}>\n            <Icon name=\"grafana\" size=\"lg\" aria-hidden />\n          </div>\n          <span className={styles.title}>{title}</span>\n        </Stack>\n        {!hideTimeControls && (\n          <Stack>\n            <timePicker.Component model={timePicker} />\n            <refreshPicker.Component model={refreshPicker} />\n          </Stack>\n        )}\n      </div>\n      <div className={styles.body}>\n        <bodyToRender.Component model={bodyToRender} />\n      </div>\n      <PublicDashboardFooter />\n    </Page>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    loadingPage: css({\n      justifyContent: 'center',\n    }),\n    page: css({\n      padding: theme.spacing(0, 2),\n    }),\n    controls: css({\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      position: 'sticky',\n      top: 0,\n      zIndex: theme.zIndex.navbarFixed,\n      background: theme.colors.background.canvas,\n      padding: theme.spacing(2, 0),\n      [theme.breakpoints.down('sm')]: {\n        flexDirection: 'column',\n        gap: theme.spacing(1),\n        alignItems: 'stretch',\n      },\n    }),\n    iconTitle: css({\n      display: 'none',\n      [theme.breakpoints.up('sm')]: {\n        display: 'flex',\n        alignItems: 'center',\n      },\n    }),\n    title: css({\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap',\n      display: 'flex',\n      fontSize: theme.typography.h4.fontSize,\n      margin: 0,\n    }),\n    body: css({\n      label: 'body',\n      display: 'flex',\n      flex: 1,\n      flexDirection: 'column',\n      overflowY: 'auto',\n    }),\n  };\n}\n\nfunction PublicDashboardScenePageError({ error }: { error: LoadError }) {\n  const styles = useStyles2(getStyles);\n  const statusCode = error.status;\n  const messageId = error.messageId;\n  const message = error.message;\n\n  const isPublicDashboardPaused = statusCode === 403 && messageId === 'publicdashboards.notEnabled';\n  const isPublicDashboardNotFound = statusCode === 404 && messageId === 'publicdashboards.notFound';\n  const isDashboardNotFound = statusCode === 404 && messageId === 'publicdashboards.dashboardNotFound';\n\n  const publicDashboardEnabled = isPublicDashboardNotFound ? undefined : !isPublicDashboardPaused;\n  const dashboardNotFound = isPublicDashboardNotFound || isDashboardNotFound;\n\n  if (publicDashboardEnabled === false) {\n    return <PublicDashboardNotAvailable paused />;\n  }\n\n  if (dashboardNotFound) {\n    return <PublicDashboardNotAvailable />;\n  }\n\n  return (\n    <Page layout={PageLayoutType.Custom} className={styles.loadingPage} data-testid={selectors.loadingPage}>\n      <Box paddingY={4} display=\"flex\" direction=\"column\" alignItems=\"center\">\n        <Alert severity={AppNotificationSeverity.Error} title={message}>\n          {message}\n        </Alert>\n      </Box>\n    </Page>\n  );\n}\n","import { css } from '@emotion/css';\n\nimport { Alert } from '@grafana/ui';\nimport { getMessageFromError } from 'app/core/utils/errors';\nimport { DashboardInitError, AppNotificationSeverity } from 'app/types';\n\nexport interface Props {\n  initError?: DashboardInitError;\n}\n\nexport const DashboardFailed = ({ initError }: Props) => {\n  if (!initError) {\n    return null;\n  }\n\n  return (\n    <div className={styles.dashboardLoading}>\n      <Alert severity={AppNotificationSeverity.Error} title={initError.message}>\n        {getMessageFromError(initError.error)}\n      </Alert>\n    </div>\n  );\n};\n\nexport const styles = {\n  dashboardLoading: css({\n    height: '60vh',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  }),\n};\n","import { css } from '@emotion/css';\nimport { useEffect } from 'react';\nimport { useLocation, useParams } from 'react-router-dom-v5-compat';\nimport { usePrevious } from 'react-use';\n\nimport { GrafanaTheme2, PageLayoutType, TimeZone } from '@grafana/data';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors/src';\nimport { PageToolbar, useStyles2 } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { useGrafana } from 'app/core/context/GrafanaContext';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport {\n  PublicDashboardPageRouteParams,\n  PublicDashboardPageRouteSearchParams,\n} from 'app/features/dashboard/containers/types';\nimport { updateTimeZoneForSession } from 'app/features/profile/state/reducers';\nimport { useSelector, useDispatch, DashboardInitError } from 'app/types';\n\nimport { DashNavTimeControls } from '../components/DashNav/DashNavTimeControls';\nimport { DashboardFailed } from '../components/DashboardLoading/DashboardFailed';\nimport { DashboardLoading } from '../components/DashboardLoading/DashboardLoading';\nimport { PublicDashboardFooter } from '../components/PublicDashboard/PublicDashboardsFooter';\nimport { useGetPublicDashboardConfig } from '../components/PublicDashboard/usePublicDashboardConfig';\nimport { PublicDashboardNotAvailable } from '../components/PublicDashboardNotAvailable/PublicDashboardNotAvailable';\nimport { DashboardGrid } from '../dashgrid/DashboardGrid';\nimport { getTimeSrv } from '../services/TimeSrv';\nimport { DashboardModel } from '../state/DashboardModel';\nimport { initDashboard } from '../state/initDashboard';\n\nexport type Props = Omit<\n  GrafanaRouteComponentProps<PublicDashboardPageRouteParams, PublicDashboardPageRouteSearchParams>,\n  'match' | 'history'\n>;\n\nconst selectors = e2eSelectors.pages.PublicDashboard;\n\nconst Toolbar = ({ dashboard }: { dashboard: DashboardModel }) => {\n  const dispatch = useDispatch();\n  const conf = useGetPublicDashboardConfig();\n\n  const onChangeTimeZone = (timeZone: TimeZone) => {\n    dispatch(updateTimeZoneForSession(timeZone));\n  };\n\n  return (\n    <PageToolbar\n      title={dashboard.title}\n      pageIcon={!conf.headerLogoHide ? 'grafana' : undefined}\n      buttonOverflowAlignment=\"right\"\n    >\n      {!dashboard.timepicker.hidden && (\n        <DashNavTimeControls dashboard={dashboard} onChangeTimeZone={onChangeTimeZone} />\n      )}\n    </PageToolbar>\n  );\n};\n\nconst PublicDashboardPage = (props: Props) => {\n  const { route } = props;\n  const location = useLocation();\n  const { accessToken } = useParams();\n  const dispatch = useDispatch();\n  const context = useGrafana();\n  const prevProps = usePrevious({ ...props, location });\n  const styles = useStyles2(getStyles);\n  const dashboardState = useSelector((store) => store.dashboard);\n  const loadError = dashboardState.initError;\n  const dashboard = dashboardState.getModel();\n\n  useEffect(() => {\n    dispatch(\n      initDashboard({\n        routeName: route.routeName,\n        fixUrl: false,\n        accessToken,\n        keybindingSrv: context.keybindings,\n      })\n    );\n  }, [route.routeName, accessToken, context.keybindings, dispatch]);\n\n  useEffect(() => {\n    if (prevProps?.location.search !== location.search) {\n      const prevUrlParams = prevProps?.queryParams;\n      const urlParams = props.queryParams;\n\n      const updateTimeRangeFromUrl =\n        (urlParams?.from !== prevUrlParams?.from || urlParams?.to !== prevUrlParams?.to) &&\n        !dashboard?.timepicker.hidden;\n\n      if (updateTimeRangeFromUrl) {\n        getTimeSrv().updateTimeRangeFromUrl();\n      }\n\n      if (!prevUrlParams?.refresh && urlParams?.refresh) {\n        getTimeSrv().setAutoRefresh(urlParams.refresh);\n      }\n    }\n  }, [prevProps, location.search, props.queryParams, dashboard?.timepicker.hidden, accessToken]);\n\n  if (loadError) {\n    return <PublicDashboardPageError error={loadError} />;\n  }\n\n  if (!dashboard) {\n    return <DashboardLoading initPhase={dashboardState.initPhase} />;\n  }\n\n  return (\n    <Page pageNav={{ text: dashboard.title }} layout={PageLayoutType.Custom} data-testid={selectors.page}>\n      <Toolbar dashboard={dashboard} />\n      {dashboardState.initError && <DashboardFailed initError={dashboardState.initError} />}\n      <div className={styles.gridContainer}>\n        <DashboardGrid dashboard={dashboard} isEditable={false} viewPanel={null} editPanel={null} hidePanelMenus />\n      </div>\n      <div className={styles.footer}>\n        <PublicDashboardFooter />\n      </div>\n    </Page>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  gridContainer: css({\n    flex: 1,\n    padding: theme.spacing(2, 2, 2, 2),\n    overflow: 'auto',\n  }),\n  footer: css({\n    padding: theme.spacing(0, 2),\n  }),\n});\n\nexport default PublicDashboardPage;\n\nfunction PublicDashboardPageError({ error }: { error: DashboardInitError }) {\n  let statusCode: number | undefined;\n  let messageId: string | undefined;\n\n  if (typeof error.error === 'object' && error.error !== null && 'data' in error.error) {\n    const typedError = error.error as { data: { statusCode: number; messageId: string } };\n    statusCode = typedError.data.statusCode;\n    messageId = typedError.data.messageId;\n  }\n\n  const isPublicDashboardPaused = statusCode === 403 && messageId === 'publicdashboards.notEnabled';\n  const isPublicDashboardNotFound = statusCode === 404 && messageId === 'publicdashboards.notFound';\n  const isDashboardNotFound = statusCode === 404 && messageId === 'publicdashboards.dashboardNotFound';\n\n  const publicDashboardEnabled = isPublicDashboardNotFound ? undefined : !isPublicDashboardPaused;\n  const dashboardNotFound = isPublicDashboardNotFound || isDashboardNotFound;\n\n  if (publicDashboardEnabled === false) {\n    return <PublicDashboardNotAvailable paused />;\n  }\n\n  if (dashboardNotFound) {\n    return <PublicDashboardNotAvailable />;\n  }\n\n  return <DashboardFailed initError={error} />;\n}\n","import { config } from '@grafana/runtime';\n\nimport { PublicDashboardScenePage } from '../../dashboard-scene/pages/PublicDashboardScenePage';\n\nimport PublicDashboardPage, { type Props } from './PublicDashboardPage';\n\nexport type PublicDashboardPageProxyProps = Props;\n\nfunction PublicDashboardPageProxy(props: PublicDashboardPageProxyProps) {\n  if (config.featureToggles.publicDashboardsScene) {\n    return <PublicDashboardScenePage {...props} />;\n  }\n\n  return <PublicDashboardPage {...props} />;\n}\n\nexport default PublicDashboardPageProxy;\n"],"names":["InnerBox","children","enterAnimation","loginStyles","getLoginStyles","LoginLayout","branding","isChangingPassword","startAnim","setStartAnim","subTitle","loginTitle","loginBoxBackground","loginLogo","hideEdition","flyInAnimation","theme","FOOTER_URL","GRAFANA_LOGO_LIGHT_URL","GRAFANA_LOGO_DARK_URL","GRAFANA_LOGO_DEFAULT_VALUE","useGetConfig","cfg","styles","getStyles","footerHide","footerText","footerLink","footerLogo","headerLogoHide","useGetPublicDashboardConfig","setPublicDashboardConfigFn","PublicDashboardFooter","conf","PublicDashboardNotAvailable","paused","Branding","PublicDashboardScenePage","route","accessToken","stateManager","dashboard","isLoading","loadError","PublicDashboardScenePageError","PublicDashboardSceneRenderer","Page","PageLoader","model","isActive","setIsActive","controls","title","timePicker","refreshPicker","hideTimeControls","bodyToRender","Stack","Icon","error","statusCode","messageId","message","isPublicDashboardPaused","isPublicDashboardNotFound","isDashboardNotFound","publicDashboardEnabled","dashboardNotFound","Box","Alert","DashboardFailed","initError","Toolbar","dispatch","onChangeTimeZone","timeZone","PageToolbar","DashNavTimeControls","PublicDashboardPage","props","location","context","prevProps","usePrevious","dashboardState","store","initDashboard","prevUrlParams","urlParams","PublicDashboardPageError","DashboardGrid","DashboardLoading","typedError","PublicDashboardPageProxy","config"],"sourceRoot":""}