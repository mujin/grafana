{"version":3,"file":"AlertingRuleForm.4247db2a9cdd3cac0cac.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/create-folder/CreateNewFolder.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/ExportNewGrafanaRule.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaModifyExport.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/AlertRuleNameInput.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/CloudRulesSourcePicker.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/FolderSelector.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/GrafanaFolderAndLabelsStep.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/alert-rule-form/simplifiedRouting/contactPoint/ContactPointDetails.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/alert-rule-form/simplifiedRouting/contactPoint/ContactPointSelector.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/alert-rule-form/simplifiedRouting/route-settings/MuteTimingFields.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/alert-rule-form/simplifiedRouting/route-settings/RouteTimings.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/alert-rule-form/simplifiedRouting/route-settings/RouteSettings.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/alert-rule-form/simplifiedRouting/AlertManagerRouting.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/alert-rule-form/simplifiedRouting/SimplifiedRouting.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/notificaton-preview/NotificationPreview.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/NotificationsStep.tsx","webpack://grafana/./public/app/features/alerting/unified/types/preview.ts","webpack://grafana/./public/app/features/alerting/unified/api/preview.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/PreviewRuleResult.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/PreviewRule.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/alert-rule-form/ModifyExportRuleForm.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/labels/LabelsEditorModal.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/labels/LabelsFieldInForm.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/preview.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/CloudAlertPreview.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/ExpressionEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/ExpressionsEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/QueryOptions.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/QueryWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/QueryRows.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/QueryEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/RecordingRuleEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/query-and-alert-condition/CloudDataSourceSelector.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/query-and-alert-condition/reducer.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/query-and-alert-condition/SimpleCondition.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/query-and-alert-condition/SmartAlertTypeDetector.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/query-and-alert-condition/descriptions.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/query-and-alert-condition/useAdvancedMode.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/query-and-alert-condition/QueryAndExpressionsStep.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useRuleSourcesWithRuler.ts","webpack://grafana/./public/app/features/alerting/unified/AlertWarning.tsx","webpack://grafana/./public/app/features/alerting/unified/api/alertRuleModel.ts","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaRuleExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/GroupAndNamespaceFields.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/CloudEvaluationBehavior.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/RecordingRulesNameSpaceAndGroupStep.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/alert-rule-form/AlertRuleForm.tsx","webpack://grafana/./public/app/features/alerting/unified/rule-editor/CloneRuleEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/rule-editor/ExistingRuleEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/rule-editor/RuleEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/utils/accessControlHooks.ts","webpack://grafana/./public/app/features/alerting/unified/utils/duplicate.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button, Field, Input, Label, Modal, Stack, useStyles2 } from '@grafana/ui';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { contextSrv } from 'app/core/core';\nimport { Trans, t } from 'app/core/internationalization';\nimport { useNewFolderMutation } from 'app/features/browse-dashboards/api/browseDashboardsAPI';\nimport { AccessControlAction } from 'app/types';\n\nimport { Folder } from '../../types/rule-form';\n\n/**\n * Provides a button and associated modal for creating a new folder\n */\nexport const CreateNewFolder = ({ onCreate }: { onCreate: (folder: Folder) => void }) => {\n  const [isCreatingFolder, setIsCreatingFolder] = useState(false);\n  const handleCreate = (folder: Folder) => {\n    onCreate(folder);\n    setIsCreatingFolder(false);\n  };\n  return (\n    <>\n      <Button\n        onClick={() => setIsCreatingFolder(true)}\n        type=\"button\"\n        icon=\"plus\"\n        fill=\"outline\"\n        variant=\"secondary\"\n        disabled={!contextSrv.hasPermission(AccessControlAction.FoldersCreate)}\n      >\n        <Trans i18nKey=\"alerting.create-new-folder.new-folder\">New folder</Trans>\n      </Button>\n      {isCreatingFolder && <FolderCreationModal onCreate={handleCreate} onClose={() => setIsCreatingFolder(false)} />}\n    </>\n  );\n};\n\nfunction FolderCreationModal({\n  onClose,\n  onCreate,\n}: {\n  onClose: () => void;\n  onCreate: (folder: Folder) => void;\n}): React.ReactElement {\n  const styles = useStyles2(getStyles);\n  const notifyApp = useAppNotification();\n  const [title, setTitle] = useState('');\n  const [createFolder] = useNewFolderMutation();\n\n  const onSubmit = async () => {\n    const { data, error } = await createFolder({ title });\n\n    if (error) {\n      notifyApp.error('Failed to create folder');\n    } else if (data) {\n      onCreate({ title: data.title, uid: data.uid });\n      notifyApp.success('Folder created');\n    }\n  };\n\n  return (\n    <Modal\n      className={styles.modal}\n      isOpen\n      title={t('alerting.create-new-folder.title-new-folder', 'New folder')}\n      onDismiss={onClose}\n      onClickBackdrop={onClose}\n    >\n      <Stack direction=\"column\" gap={2}>\n        <Field\n          label={\n            <Label htmlFor=\"folder\">\n              <Trans i18nKey=\"alerting.create-new-folder.folder.name\">Folder name</Trans>\n            </Label>\n          }\n        >\n          <Input\n            data-testid={selectors.components.AlertRules.newFolderNameField}\n            autoFocus={true}\n            id=\"folderName\"\n            placeholder={t('alerting.create-new-folder.placeholder-enter-a-name', 'Enter a name')}\n            value={title}\n            onChange={(e) => setTitle(e.currentTarget.value)}\n          />\n        </Field>\n\n        <Modal.ButtonRow>\n          <Button variant=\"secondary\" type=\"button\" onClick={onClose}>\n            <Trans i18nKey=\"alerting.create-new-folder.folder.cancel\">Cancel</Trans>\n          </Button>\n          <Button\n            onClick={onSubmit}\n            disabled={!title}\n            data-testid={selectors.components.AlertRules.newFolderNameCreateButton}\n          >\n            <Trans i18nKey=\"alerting.create-new-folder.folder.create\">Create</Trans>\n          </Button>\n        </Modal.ButtonRow>\n      </Stack>\n    </Modal>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  modal: css({\n    width: `${theme.breakpoints.values.sm}px`,\n  }),\n});\n","import { withPageErrorBoundary } from '../../withPageErrorBoundary';\nimport { AlertingPageWrapper } from '../AlertingPageWrapper';\nimport { ModifyExportRuleForm } from '../rule-editor/alert-rule-form/ModifyExportRuleForm';\n\nfunction ExportNewGrafanaRulePage() {\n  return (\n    <AlertingPageWrapper\n      navId=\"alert-list\"\n      pageNav={{\n        text: 'Export new Grafana rule',\n        subTitle: 'Export a new rule definition in Terraform(HCL) format. Any changes you make will not be saved.',\n      }}\n    >\n      <ModifyExportRuleForm />\n    </AlertingPageWrapper>\n  );\n}\n\nexport default withPageErrorBoundary(ExportNewGrafanaRulePage);\n","import { useMemo } from 'react';\nimport { useParams } from 'react-router-dom-v5-compat';\n\nimport { locationService } from '@grafana/runtime';\nimport { Alert, LoadingPlaceholder } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { RuleIdentifier } from '../../../../../types/unified-alerting';\nimport { useRuleWithLocation } from '../../hooks/useCombinedRule';\nimport { formValuesFromExistingRule } from '../../rule-editor/formDefaults';\nimport { stringifyErrorLike } from '../../utils/misc';\nimport * as ruleId from '../../utils/rule-id';\nimport { rulerRuleType } from '../../utils/rules';\nimport { createRelativeUrl } from '../../utils/url';\nimport { withPageErrorBoundary } from '../../withPageErrorBoundary';\nimport { AlertingPageWrapper } from '../AlertingPageWrapper';\nimport { ModifyExportRuleForm } from '../rule-editor/alert-rule-form/ModifyExportRuleForm';\n\nfunction GrafanaModifyExport() {\n  const { id } = useParams();\n  const ruleIdentifier = useMemo<RuleIdentifier | undefined>(() => {\n    return ruleId.tryParse(id, true);\n  }, [id]);\n\n  if (!ruleIdentifier) {\n    return (\n      <Alert title={t('alerting.grafana-modify-export.title-invalid-rule-id', 'Invalid rule ID')} severity=\"error\">\n        The rule UID in the page URL is invalid. Please check the URL and try again.\n      </Alert>\n    );\n  }\n\n  return <RuleModifyExport ruleIdentifier={ruleIdentifier} />;\n}\n\nfunction RuleModifyExport({ ruleIdentifier }: { ruleIdentifier: RuleIdentifier }) {\n  const { loading, error, result: rulerRule } = useRuleWithLocation({ ruleIdentifier: ruleIdentifier });\n\n  if (loading) {\n    return <LoadingPlaceholder text={t('alerting.rule-modify-export.text-loading-the-rule', 'Loading the rule...')} />;\n  }\n\n  if (error) {\n    return (\n      <Alert\n        title={t('alerting.rule-modify-export.title-cannot-load-modify-export', 'Cannot load modify export')}\n        severity=\"error\"\n      >\n        {stringifyErrorLike(error)}\n      </Alert>\n    );\n  }\n\n  if (!rulerRule && !loading) {\n    // alert rule does not exist\n    return (\n      <Alert\n        title={t('alerting.rule-modify-export.title-cannot-exist', 'Cannot load the rule. The rule does not exist')}\n        buttonContent=\"Go back to alert list\"\n        onRemove={() => locationService.replace(createRelativeUrl('/alerting/list'))}\n      />\n    );\n  }\n\n  if (rulerRule && !rulerRuleType.grafana.rule(rulerRule.rule)) {\n    // alert rule exists but is not a grafana-managed rule\n    return (\n      <Alert\n        title={t(\n          'alerting.rule-modify-export.title-grafanamanaged-alert',\n          'This rule is not a Grafana-managed alert rule'\n        )}\n        buttonContent=\"Go back to alert list\"\n        onRemove={() => locationService.replace(createRelativeUrl('/alerting/list'))}\n      />\n    );\n  }\n\n  if (rulerRule && rulerRuleType.grafana.rule(rulerRule.rule)) {\n    return (\n      <ModifyExportRuleForm\n        ruleForm={formValuesFromExistingRule(rulerRule)}\n        alertUid={rulerRule.rule.grafana_alert.uid}\n      />\n    );\n  }\n\n  return <Alert title={t('alerting.rule-modify-export.title-unknown-error', 'Unknown error')} />;\n}\n\nfunction GrafanaModifyExportPage() {\n  return (\n    <AlertingPageWrapper\n      navId=\"alert-list\"\n      pageNav={{\n        text: 'Modify export',\n        subTitle:\n          'Modify the current alert rule and export the rule definition in the format of your choice. Any changes you make will not be saved.',\n      }}\n    >\n      <GrafanaModifyExport />\n    </AlertingPageWrapper>\n  );\n}\n\nexport default withPageErrorBoundary(GrafanaModifyExportPage);\n","import { Controller, useFormContext } from 'react-hook-form';\n\nimport { DataSourceInstanceSettings } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config } from '@grafana/runtime';\nimport { Field, Input, Stack, Text } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\nimport { DataSourcePicker } from 'app/features/datasources/components/picker/DataSourcePicker';\n\nimport { RuleFormType, RuleFormValues } from '../../types/rule-form';\nimport { isSupportedExternalPrometheusFlavoredRulesSourceType } from '../../utils/datasource';\nimport { isCloudRecordingRuleByType, isGrafanaRecordingRuleByType, isRecordingRuleByType } from '../../utils/rules';\n\nimport { RuleEditorSection } from './RuleEditorSection';\n\nconst recordingRuleNameValidationPattern = (type: RuleFormType) => ({\n  message: isGrafanaRecordingRuleByType(type)\n    ? 'Recording rule metric must be valid metric name. It may only contain letters, numbers, and colons. It may not contain whitespace.'\n    : 'Recording rule name must be valid metric name. It may only contain letters, numbers, and colons. It may not contain whitespace.',\n  value: /^[a-zA-Z_:][a-zA-Z0-9_:]*$/,\n});\n\n/**\n *  This component renders the input for the alert rule name.\n *  In case of recording rule, it also renders the input for the recording rule metric, and it validates this value.\n */\nexport const AlertRuleNameAndMetric = () => {\n  const {\n    control,\n    register,\n    watch,\n    formState: { errors },\n    setValue,\n  } = useFormContext<RuleFormValues>();\n\n  const ruleFormType = watch('type');\n  if (!ruleFormType) {\n    return null;\n  }\n  const isRecording = isRecordingRuleByType(ruleFormType);\n  const isGrafanaRecordingRule = isGrafanaRecordingRuleByType(ruleFormType);\n  const isCloudRecordingRule = isCloudRecordingRuleByType(ruleFormType);\n  const recordingLabel = isGrafanaRecordingRule ? 'recording rule and metric' : 'recording rule';\n  const namePlaceholder = isRecording ? 'recording rule' : 'alert rule';\n  const entityName = isRecording ? recordingLabel : 'alert rule';\n  return (\n    <RuleEditorSection\n      stepNo={1}\n      title={`Enter ${entityName} name`}\n      description={\n        <Text variant=\"bodySmall\" color=\"secondary\">\n          Enter a name to identify your {entityName}.\n        </Text>\n      }\n    >\n      <Stack direction=\"column\">\n        <Field\n          label={t('alerting.alert-rule-name-and-metric.label-name', 'Name')}\n          error={errors?.name?.message}\n          invalid={!!errors.name?.message}\n        >\n          <Input\n            data-testid={selectors.components.AlertRules.ruleNameField}\n            id=\"name\"\n            width={38}\n            {...register('name', {\n              required: { value: true, message: 'Must enter a name' },\n              pattern: isCloudRecordingRule\n                ? recordingRuleNameValidationPattern(RuleFormType.cloudRecording)\n                : undefined,\n            })}\n            aria-label={t('alerting.alert-rule-name-and-metric.aria-label-name', 'name')}\n            placeholder={`Give your ${namePlaceholder} a name`}\n          />\n        </Field>\n        {isGrafanaRecordingRule && (\n          <Field\n            label={t('alerting.alert-rule-name-and-metric.label-metric', 'Metric')}\n            error={errors?.metric?.message}\n            invalid={!!errors.metric?.message}\n          >\n            <Input\n              id=\"metric\"\n              width={38}\n              {...register('metric', {\n                required: { value: true, message: 'Must enter a metric name' },\n                pattern: recordingRuleNameValidationPattern(RuleFormType.grafanaRecording),\n              })}\n              aria-label={t('alerting.alert-rule-name-and-metric.metric-aria-label-metric', 'metric')}\n              placeholder={`Give the name of the new recorded metric`}\n            />\n          </Field>\n        )}\n\n        {isGrafanaRecordingRule && config.featureToggles.grafanaManagedRecordingRulesDatasources && (\n          <Field\n            id=\"target-data-source\"\n            label={t('alerting.recording-rules.label-target-data-source', 'Target data source')}\n            description={t(\n              'alerting.recording-rules.description-target-data-source',\n              'The Prometheus data source to store recording rules in'\n            )}\n            error={errors.targetDatasourceUid?.message}\n            invalid={!!errors.targetDatasourceUid?.message}\n          >\n            <Controller\n              render={({ field: { onChange, ref, ...field } }) => (\n                <DataSourcePicker\n                  {...field}\n                  current={field.value}\n                  noDefault\n                  // Filter with `filter` prop instead of `type` prop to avoid showing the `-- Grafana --` data source\n                  filter={(ds: DataSourceInstanceSettings) =>\n                    isSupportedExternalPrometheusFlavoredRulesSourceType(ds.type)\n                  }\n                  onChange={(ds: DataSourceInstanceSettings) => {\n                    setValue('targetDatasourceUid', ds.uid);\n                  }}\n                />\n              )}\n              name=\"targetDatasourceUid\"\n              control={control}\n              rules={{\n                required: { value: true, message: 'Please select a data source' },\n              }}\n            />\n          </Field>\n        )}\n      </Stack>\n    </RuleEditorSection>\n  );\n};\n","import { useCallback } from 'react';\n\nimport { DataSourceInstanceSettings } from '@grafana/data';\nimport { DataSourcePicker, DataSourcePickerProps } from 'app/features/datasources/components/picker/DataSourcePicker';\n\nimport { useRulesSourcesWithRuler } from '../../hooks/useRuleSourcesWithRuler';\n\ninterface Props extends DataSourcePickerProps {\n  disabled?: boolean;\n  onChange: (ds: DataSourceInstanceSettings) => void;\n  value: string | null;\n  onBlur?: () => void;\n  name?: string;\n}\n\nexport function CloudRulesSourcePicker({ value, disabled, ...props }: Props): JSX.Element {\n  const { rulesSourcesWithRuler: dataSourcesWithRuler, isLoading } = useRulesSourcesWithRuler();\n\n  const dataSourceFilter = useCallback(\n    (ds: DataSourceInstanceSettings): boolean => {\n      return dataSourcesWithRuler.some(({ uid }) => uid === ds.uid);\n    },\n    [dataSourcesWithRuler]\n  );\n\n  return (\n    <DataSourcePicker\n      disabled={isLoading || disabled}\n      noDefault\n      alerting\n      filter={dataSourceFilter}\n      current={value}\n      {...props}\n    />\n  );\n}\n","import { useCallback } from 'react';\nimport { Controller, useFormContext } from 'react-hook-form';\n\nimport { Field, Label, Stack } from '@grafana/ui';\nimport { NestedFolderPicker } from 'app/core/components/NestedFolderPicker/NestedFolderPicker';\nimport { t } from 'app/core/internationalization';\n\nimport { Trans } from '../../../../../core/internationalization/index';\nimport { Folder, RuleFormValues } from '../../types/rule-form';\nimport { CreateNewFolder } from '../create-folder/CreateNewFolder';\n\nexport function FolderSelector() {\n  const {\n    formState: { errors },\n    setValue,\n    watch,\n  } = useFormContext<RuleFormValues>();\n\n  const resetGroup = useCallback(() => {\n    setValue('group', '');\n  }, [setValue]);\n\n  const folder = watch('folder');\n\n  const handleFolderCreation = (folder: Folder) => {\n    resetGroup();\n    setValue('folder', folder);\n  };\n\n  return (\n    <Stack alignItems=\"center\">\n      {\n        <Field\n          label={\n            <Label\n              htmlFor=\"folder\"\n              description={t(\n                'alerting.folder-selector.description-select-folder',\n                'Select a folder to store your rule in.'\n              )}\n            >\n              <Trans i18nKey=\"alerting.rule-form.folder.label\">Folder</Trans>\n            </Label>\n          }\n          error={errors.folder?.message}\n          data-testid=\"folder-picker\"\n        >\n          <Stack direction=\"row\" alignItems=\"center\">\n            <Controller\n              render={({ field: { ref, ...field } }) => (\n                <div style={{ width: 420 }}>\n                  <NestedFolderPicker\n                    showRootFolder={false}\n                    invalid={!!errors.folder?.message}\n                    {...field}\n                    value={folder?.uid}\n                    onChange={(uid, title) => {\n                      if (uid && title) {\n                        setValue('folder', { title, uid });\n                      } else {\n                        setValue('folder', undefined);\n                      }\n\n                      resetGroup();\n                    }}\n                  />\n                </div>\n              )}\n              name=\"folder\"\n              rules={{\n                required: { value: true, message: 'Select a folder' },\n              }}\n            />\n            <CreateNewFolder onCreate={handleFolderCreation} />\n          </Stack>\n        </Field>\n      }\n    </Stack>\n  );\n}\n","import { useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\n\nimport { Stack, Text } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { KBObjectArray, RuleFormValues } from '../../types/rule-form';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\n\nimport { FolderSelector } from './FolderSelector';\nimport { NeedHelpInfo } from './NeedHelpInfo';\nimport { RuleEditorSection } from './RuleEditorSection';\nimport { LabelsEditorModal } from './labels/LabelsEditorModal';\nimport { LabelsFieldInForm } from './labels/LabelsFieldInForm';\n\n/** Precondition: rule is Grafana managed.\n */\nexport function GrafanaFolderAndLabelsStep() {\n  const { setValue, getValues } = useFormContext<RuleFormValues>();\n  const [showLabelsEditor, setShowLabelsEditor] = useState(false);\n\n  function onCloseLabelsEditor(labelsToUpdate?: KBObjectArray) {\n    if (labelsToUpdate) {\n      setValue('labels', labelsToUpdate);\n    }\n    setShowLabelsEditor(false);\n  }\n\n  function SectionDescription() {\n    return (\n      <Stack direction=\"row\" gap={0.5} alignItems=\"center\">\n        <Text variant=\"bodySmall\" color=\"secondary\">\n          <Trans i18nKey=\"alerting.rule-form.folder-and-labels\">\n            Organize your alert rule with a folder and set of labels.\n          </Trans>\n        </Text>\n        <NeedHelpInfo\n          contentText={\n            <>\n              <p>\n                {t(\n                  'alerting.rule-form.folders.help-info',\n                  'Folders are used for storing alert rules. You can extend the access provided by a role to alert rules and assign permissions to individual folders.'\n                )}\n              </p>\n              <p>\n                {t(\n                  'alerting.rule-form.labels.help-info',\n                  'Labels are used to differentiate an alert from all other alerts.You can use them for searching, silencing, and routing notifications.'\n                )}\n              </p>\n            </>\n          }\n        />\n      </Stack>\n    );\n  }\n\n  return (\n    <RuleEditorSection\n      stepNo={3}\n      title={t('alerting.grafana-folder-and-labels-step.title-add-folder-and-labels', 'Add folder and labels')}\n      description={<SectionDescription />}\n    >\n      <Stack direction=\"column\" justify-content=\"flex-start\" align-items=\"flex-start\">\n        <FolderSelector />\n        <LabelsFieldInForm onEditClick={() => setShowLabelsEditor(true)} />\n        <LabelsEditorModal\n          isOpen={showLabelsEditor}\n          onClose={onCloseLabelsEditor}\n          dataSourceName={GRAFANA_RULES_SOURCE_NAME}\n          initialLabels={getValues('labels')}\n        />\n      </Stack>\n    </RuleEditorSection>\n  );\n}\n","import { Stack } from '@grafana/ui';\n\nimport { ContactPointReceiverTitleRow } from '../../../../contact-points/ContactPoint';\nimport { RECEIVER_META_KEY, RECEIVER_PLUGIN_META_KEY } from '../../../../contact-points/constants';\nimport { ReceiverConfigWithMetadata, getReceiverDescription } from '../../../../contact-points/utils';\n\ninterface ContactPointDetailsProps {\n  receivers: ReceiverConfigWithMetadata[];\n}\n\nexport const ContactPointDetails = ({ receivers }: ContactPointDetailsProps) => {\n  return (\n    <Stack direction=\"column\" gap={0}>\n      <div>\n        {receivers.map((receiver, index) => {\n          const metadata = receiver[RECEIVER_META_KEY];\n          const pluginMetadata = receiver[RECEIVER_PLUGIN_META_KEY];\n          const key = metadata.name + index;\n          return (\n            <ContactPointReceiverTitleRow\n              key={key}\n              name={metadata.name}\n              type={receiver.type}\n              description={getReceiverDescription(receiver)}\n              pluginMetadata={pluginMetadata}\n            />\n          );\n        })}\n      </div>\n    </Stack>\n  );\n};\n","import { useCallback, useEffect } from 'react';\nimport { Controller, useFormContext } from 'react-hook-form';\n\nimport { SelectableValue } from '@grafana/data';\nimport { ActionMeta, Field, FieldValidationMessage, Stack, TextLink } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { ContactPointSelector as ContactPointSelectorDropdown } from 'app/features/alerting/unified/components/notification-policies/ContactPointSelector';\nimport { RuleFormValues } from 'app/features/alerting/unified/types/rule-form';\nimport { createRelativeUrl } from 'app/features/alerting/unified/utils/url';\n\nimport { ContactPointWithMetadata } from '../../../../contact-points/utils';\n\nexport interface ContactPointSelectorProps {\n  alertManager: string;\n  onSelectContactPoint: (contactPoint?: ContactPointWithMetadata) => void;\n}\n\nexport function ContactPointSelector({ alertManager, onSelectContactPoint }: ContactPointSelectorProps) {\n  const { control, watch, trigger, setError } = useFormContext<RuleFormValues>();\n\n  const contactPointInForm = watch(`contactPoints.${alertManager}.selectedContactPoint`);\n\n  // Wrap in useCallback to avoid infinite render loop\n  const handleError = useCallback(\n    (err: Error) => {\n      setError(`contactPoints.${alertManager}.selectedContactPoint`, {\n        message: err.message,\n      });\n    },\n    [alertManager, setError]\n  );\n\n  // if we have a contact point selected, check if it still exists in the event that someone has deleted it\n  const validateContactPoint = useCallback(() => {\n    if (contactPointInForm) {\n      trigger(`contactPoints.${alertManager}.selectedContactPoint`, { shouldFocus: true });\n    }\n  }, [alertManager, contactPointInForm, trigger]);\n\n  // validate the contact point and check if it still exists when mounting the component\n  useEffect(() => {\n    validateContactPoint();\n  }, [validateContactPoint]);\n\n  return (\n    <Stack direction=\"column\">\n      <Stack direction=\"row\" alignItems=\"center\">\n        <Field\n          label={t('alerting.contact-point-selector.contact-point-picker-label-contact-point', 'Contact point')}\n          data-testid=\"contact-point-picker\"\n        >\n          <Controller\n            render={({ field: { onChange }, fieldState: { error } }) => (\n              <>\n                <Stack>\n                  <ContactPointSelectorDropdown\n                    selectProps={{\n                      onChange: (value: SelectableValue<ContactPointWithMetadata>, _: ActionMeta) => {\n                        onChange(value?.value?.name);\n                        onSelectContactPoint(value?.value);\n                      },\n                      width: 50,\n                    }}\n                    showRefreshButton\n                    selectedContactPointName={contactPointInForm}\n                    onError={handleError}\n                  />\n                  <LinkToContactPoints />\n                </Stack>\n\n                {/* Error can come from the required validation we have in here, or from the manual setError we do in the parent component.\n                The only way I found to check the custom error is to check if the field has a value and if it's not in the options. */}\n\n                {error && <FieldValidationMessage>{error?.message}</FieldValidationMessage>}\n              </>\n            )}\n            rules={{\n              required: {\n                value: true,\n                message: 'Contact point is required.',\n              },\n            }}\n            control={control}\n            name={`contactPoints.${alertManager}.selectedContactPoint`}\n          />\n        </Field>\n      </Stack>\n    </Stack>\n  );\n}\nfunction LinkToContactPoints() {\n  const hrefToContactPoints = '/alerting/notifications';\n  return (\n    <TextLink\n      external\n      href={createRelativeUrl(hrefToContactPoints)}\n      aria-label={t(\n        'alerting.link-to-contact-points.aria-label-view-or-create-contact-points',\n        'View or create contact points'\n      )}\n    >\n      <Trans i18nKey=\"alerting.link-to-contact-points.view-or-create-contact-points\">\n        View or create contact points\n      </Trans>\n    </TextLink>\n  );\n}\n","import { css } from '@emotion/css';\nimport { Controller, useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Field, useStyles2 } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\nimport MuteTimingsSelector from 'app/features/alerting/unified/components/alertmanager-entities/MuteTimingsSelector';\nimport { BaseAlertmanagerArgs } from 'app/features/alerting/unified/types/hooks';\nimport { RuleFormValues } from 'app/features/alerting/unified/types/rule-form';\nimport { mapMultiSelectValueToStrings } from 'app/features/alerting/unified/utils/amroutes';\n\n/** Provides a form field for use in simplified routing, for selecting appropriate mute timings */\nexport function MuteTimingFields({ alertmanager }: BaseAlertmanagerArgs) {\n  const styles = useStyles2(getStyles);\n  const {\n    control,\n    formState: { errors },\n  } = useFormContext<RuleFormValues>();\n\n  return (\n    <Field\n      label={t('alerting.mute-timing-fields.am-mute-timing-select-label-mute-timings', 'Mute timings')}\n      data-testid=\"am-mute-timing-select\"\n      description=\"Select a mute timing to define when not to send notifications for this alert rule\"\n      className={styles.muteTimingField}\n      invalid={!!errors.contactPoints?.[alertmanager]?.muteTimeIntervals}\n    >\n      <Controller\n        render={({ field: { onChange, ref, ...field } }) => (\n          <MuteTimingsSelector\n            alertmanager={alertmanager}\n            selectProps={{\n              ...field,\n              onChange: (value) => onChange(mapMultiSelectValueToStrings(value)),\n            }}\n          />\n        )}\n        control={control}\n        name={`contactPoints.${alertmanager}.muteTimeIntervals`}\n      />\n    </Field>\n  );\n}\nconst getStyles = (theme: GrafanaTheme2) => ({\n  muteTimingField: css({\n    marginTop: theme.spacing(1),\n  }),\n});\n","import { useFormContext } from 'react-hook-form';\n\nimport { Field, useStyles2 } from '@grafana/ui';\nimport { RuleFormValues } from 'app/features/alerting/unified/types/rule-form';\nimport { promDurationValidator, repeatIntervalValidator } from 'app/features/alerting/unified/utils/amroutes';\n\nimport { PromDurationInput } from '../../../../notification-policies/PromDurationInput';\nimport { getFormStyles } from '../../../../notification-policies/formStyles';\nimport { routeTimingsFields } from '../../../../notification-policies/routeTimingsFields';\nimport { TIMING_OPTIONS_DEFAULTS } from '../../../../notification-policies/timingOptions';\n\ninterface RouteTimingsProps {\n  alertManager: string;\n}\n\nexport function RouteTimings({ alertManager }: RouteTimingsProps) {\n  const formStyles = useStyles2(getFormStyles);\n  const {\n    register,\n    formState: { errors },\n    getValues,\n  } = useFormContext<RuleFormValues>();\n  return (\n    <>\n      <Field\n        label={routeTimingsFields.groupWait.label}\n        description={routeTimingsFields.groupWait.description}\n        invalid={!!errors.contactPoints?.[alertManager]?.groupWaitValue}\n        error={errors.contactPoints?.[alertManager]?.groupWaitValue?.message}\n      >\n        <PromDurationInput\n          {...register(`contactPoints.${alertManager}.groupWaitValue`, { validate: promDurationValidator })}\n          aria-label={routeTimingsFields.groupWait.ariaLabel}\n          className={formStyles.promDurationInput}\n          placeholder={TIMING_OPTIONS_DEFAULTS.group_wait}\n        />\n      </Field>\n      <Field\n        label={routeTimingsFields.groupInterval.label}\n        description={routeTimingsFields.groupInterval.description}\n        invalid={!!errors.contactPoints?.[alertManager]?.groupIntervalValue}\n        error={errors.contactPoints?.[alertManager]?.groupIntervalValue?.message}\n      >\n        <PromDurationInput\n          {...register(`contactPoints.${alertManager}.groupIntervalValue`, {\n            validate: promDurationValidator,\n          })}\n          aria-label={routeTimingsFields.groupInterval.ariaLabel}\n          className={formStyles.promDurationInput}\n          placeholder={TIMING_OPTIONS_DEFAULTS.group_interval}\n        />\n      </Field>\n      <Field\n        label={routeTimingsFields.repeatInterval.label}\n        description={routeTimingsFields.repeatInterval.description}\n        invalid={!!errors.contactPoints?.[alertManager]?.repeatIntervalValue}\n        error={errors.contactPoints?.[alertManager]?.repeatIntervalValue?.message}\n      >\n        <PromDurationInput\n          {...register(`contactPoints.${alertManager}.repeatIntervalValue`, {\n            validate: (value: string) => {\n              const groupInterval = getValues(`contactPoints.${alertManager}.repeatIntervalValue`);\n              return repeatIntervalValidator(value, groupInterval);\n            },\n          })}\n          aria-label={routeTimingsFields.repeatInterval.ariaLabel}\n          className={formStyles.promDurationInput}\n          placeholder={TIMING_OPTIONS_DEFAULTS.repeat_interval}\n        />\n      </Field>\n    </>\n  );\n}\n","import { css } from '@emotion/css';\nimport { useEffect, useState } from 'react';\nimport * as React from 'react';\nimport { Controller, useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Field, FieldValidationMessage, InlineField, MultiSelect, Stack, Switch, Text, useStyles2 } from '@grafana/ui';\nimport { MultiValueRemove, MultiValueRemoveProps } from '@grafana/ui/internal';\nimport { t } from 'app/core/internationalization';\nimport { RuleFormValues } from 'app/features/alerting/unified/types/rule-form';\nimport {\n  commonGroupByOptions,\n  mapMultiSelectValueToStrings,\n  stringToSelectableValue,\n  stringsToSelectableValues,\n} from 'app/features/alerting/unified/utils/amroutes';\n\nimport { getFormStyles } from '../../../../notification-policies/formStyles';\nimport { TIMING_OPTIONS_DEFAULTS } from '../../../../notification-policies/timingOptions';\n\nimport { RouteTimings } from './RouteTimings';\n\nconst REQUIRED_FIELDS_IN_GROUPBY = ['grafana_folder', 'alertname'];\n\nconst DEFAULTS_TIMINGS = {\n  groupWaitValue: TIMING_OPTIONS_DEFAULTS.group_wait,\n  groupIntervalValue: TIMING_OPTIONS_DEFAULTS.group_interval,\n  repeatIntervalValue: TIMING_OPTIONS_DEFAULTS.repeat_interval,\n};\nconst DISABLE_GROUPING = '...';\n\nexport interface RoutingSettingsProps {\n  alertManager: string;\n}\nexport const RoutingSettings = ({ alertManager }: RoutingSettingsProps) => {\n  const formStyles = useStyles2(getFormStyles);\n  const {\n    control,\n    watch,\n    register,\n    setValue,\n    formState: { errors },\n  } = useFormContext<RuleFormValues>();\n  const [groupByOptions, setGroupByOptions] = useState(stringsToSelectableValues([]));\n  const { groupIntervalValue, groupWaitValue, repeatIntervalValue } = DEFAULTS_TIMINGS;\n  const overrideGrouping = watch(`contactPoints.${alertManager}.overrideGrouping`);\n  const overrideTimings = watch(`contactPoints.${alertManager}.overrideTimings`);\n  const groupByCount = watch(`contactPoints.${alertManager}.groupBy`)?.length ?? 0;\n\n  const styles = useStyles2(getStyles);\n  useEffect(() => {\n    if (overrideGrouping && groupByCount === 0) {\n      setValue(`contactPoints.${alertManager}.groupBy`, REQUIRED_FIELDS_IN_GROUPBY);\n    }\n  }, [overrideGrouping, setValue, alertManager, groupByCount]);\n\n  return (\n    <Stack direction=\"column\">\n      <Stack direction=\"row\" gap={1} alignItems=\"center\" justifyContent=\"space-between\">\n        <InlineField\n          label={t('alerting.routing-settings.label-override-grouping', 'Override grouping')}\n          transparent={true}\n          className={styles.switchElement}\n        >\n          <Switch id=\"override-grouping-toggle\" {...register(`contactPoints.${alertManager}.overrideGrouping`)} />\n        </InlineField>\n        {!overrideGrouping && (\n          <Text variant=\"body\" color=\"secondary\">\n            Grouping: <strong>{REQUIRED_FIELDS_IN_GROUPBY.join(', ')}</strong>\n          </Text>\n        )}\n      </Stack>\n      {overrideGrouping && (\n        <Field\n          label={t('alerting.routing-settings.label-group-by', 'Group by')}\n          description=\"Combine multiple alerts into a single notification by grouping them by the same label values. If empty, it is inherited from the default notification policy.\"\n          {...register(`contactPoints.${alertManager}.groupBy`)}\n          invalid={!!errors.contactPoints?.[alertManager]?.groupBy}\n          className={styles.optionalContent}\n        >\n          <Controller\n            rules={{\n              validate: (value: string[]) => {\n                if (!value || value.length === 0) {\n                  return 'At least one group by option is required.';\n                }\n                if (value.length === 1 && value[0] === DISABLE_GROUPING) {\n                  return true;\n                }\n                // we need to make sure that the required fields are included\n                const requiredFieldsIncluded = REQUIRED_FIELDS_IN_GROUPBY.every((field) => value.includes(field));\n                if (!requiredFieldsIncluded) {\n                  return `Group by must include ${REQUIRED_FIELDS_IN_GROUPBY.join(', ')}`;\n                }\n                return true;\n              },\n            }}\n            render={({ field: { onChange, ref, ...field }, fieldState: { error } }) => (\n              <>\n                <MultiSelect\n                  aria-label={t('alerting.routing-settings.aria-label-group-by', 'Group by')}\n                  {...field}\n                  allowCustomValue\n                  className={formStyles.input}\n                  onCreateOption={(opt: string) => {\n                    setGroupByOptions((opts) => [...opts, stringToSelectableValue(opt)]);\n\n                    // @ts-ignore-check: react-hook-form made me do this\n                    setValue(`contactPoints.${alertManager}.groupBy`, [...field.value, opt]);\n                  }}\n                  onChange={(value) => {\n                    return onChange(mapMultiSelectValueToStrings(value));\n                  }}\n                  options={[...commonGroupByOptions, ...groupByOptions]}\n                  components={{\n                    MultiValueRemove(\n                      props: React.PropsWithChildren<\n                        MultiValueRemoveProps &\n                          Array<SelectableValue<string>> & {\n                            data: {\n                              label: string;\n                              value: string;\n                              isFixed: boolean;\n                            };\n                          }\n                      >\n                    ) {\n                      const { data } = props;\n                      if (data.isFixed) {\n                        return null;\n                      }\n                      return MultiValueRemove(props);\n                    },\n                  }}\n                />\n                {error && <FieldValidationMessage>{error.message}</FieldValidationMessage>}\n              </>\n            )}\n            name={`contactPoints.${alertManager}.groupBy`}\n            control={control}\n          />\n        </Field>\n      )}\n      <Stack direction=\"row\" gap={1} alignItems=\"center\" justifyContent=\"space-between\">\n        <InlineField\n          label={t('alerting.routing-settings.label-override-timings', 'Override timings')}\n          transparent={true}\n          className={styles.switchElement}\n        >\n          <Switch id=\"override-timings-toggle\" {...register(`contactPoints.${alertManager}.overrideTimings`)} />\n        </InlineField>\n        {!overrideTimings && (\n          <Text variant=\"body\" color=\"secondary\">\n            Group wait: <strong>{groupWaitValue}, </strong>\n            Group interval: <strong>{groupIntervalValue}, </strong>\n            Repeat interval: <strong>{repeatIntervalValue}</strong>\n          </Text>\n        )}\n      </Stack>\n      {overrideTimings && (\n        <div className={styles.optionalContent}>\n          <RouteTimings alertManager={alertManager} />\n        </div>\n      )}\n    </Stack>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  switchElement: css({\n    flexFlow: 'row-reverse',\n    gap: theme.spacing(1),\n    alignItems: 'center',\n  }),\n  optionalContent: css({\n    marginLeft: '49px',\n    marginBottom: theme.spacing(1),\n  }),\n});\n","import { css } from '@emotion/css';\nimport { useEffect, useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { CollapsableSection, Stack, Text, useStyles2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { RuleFormValues } from 'app/features/alerting/unified/types/rule-form';\nimport { AlertManagerDataSource } from 'app/features/alerting/unified/utils/datasource';\n\nimport { useContactPointsWithStatus } from '../../../contact-points/useContactPoints';\nimport { ContactPointWithMetadata } from '../../../contact-points/utils';\nimport { NeedHelpInfo } from '../../NeedHelpInfo';\n\nimport { ContactPointDetails } from './contactPoint/ContactPointDetails';\nimport { ContactPointSelector } from './contactPoint/ContactPointSelector';\nimport { MuteTimingFields } from './route-settings/MuteTimingFields';\nimport { RoutingSettings } from './route-settings/RouteSettings';\n\ninterface AlertManagerManualRoutingProps {\n  alertManager: AlertManagerDataSource;\n}\n\nexport function AlertManagerManualRouting({ alertManager }: AlertManagerManualRoutingProps) {\n  const styles = useStyles2(getStyles);\n\n  const alertManagerName = alertManager.name;\n\n  const [selectedContactPointWithMetadata, setSelectedContactPointWithMetadata] = useState<\n    ContactPointWithMetadata | undefined\n  >();\n  const { watch } = useFormContext<RuleFormValues>();\n\n  const contactPointInForm = watch(`contactPoints.${alertManagerName}.selectedContactPoint`);\n  const { contactPoints } = useContactPointsWithStatus({\n    // we only fetch the contact points with metadata for the first time we render an existing alert rule\n    alertmanager: alertManagerName,\n    skip: Boolean(selectedContactPointWithMetadata),\n  });\n  const contactPointWithMetadata = contactPoints.find((cp) => cp.name === contactPointInForm);\n\n  useEffect(() => {\n    if (contactPointWithMetadata && !selectedContactPointWithMetadata) {\n      onSelectContactPoint(contactPointWithMetadata);\n    }\n  }, [contactPointWithMetadata, selectedContactPointWithMetadata]);\n\n  const onSelectContactPoint = (contactPoint?: ContactPointWithMetadata) => {\n    setSelectedContactPointWithMetadata(contactPoint);\n  };\n\n  const hasRouteSettings =\n    watch(`contactPoints.${alertManagerName}.overrideGrouping`) ||\n    watch(`contactPoints.${alertManagerName}.overrideTimings`) ||\n    watch(`contactPoints.${alertManagerName}.muteTimeIntervals`)?.length > 0;\n\n  return (\n    <Stack direction=\"column\">\n      <Stack direction=\"row\" alignItems=\"center\">\n        <div className={styles.firstAlertManagerLine} />\n        <div className={styles.alertManagerName}>\n          <Trans i18nKey=\"alerting.rule-form.simple-routing.alertmanager-label\">Alertmanager:</Trans>\n          <img src={alertManager.imgUrl} alt=\"Alert manager logo\" className={styles.img} />\n          {alertManagerName}\n        </div>\n        <div className={styles.secondAlertManagerLine} />\n      </Stack>\n      <Stack direction=\"row\" gap={1} alignItems=\"center\">\n        <ContactPointSelector alertManager={alertManagerName} onSelectContactPoint={onSelectContactPoint} />\n      </Stack>\n      {selectedContactPointWithMetadata?.grafana_managed_receiver_configs && (\n        <ContactPointDetails receivers={selectedContactPointWithMetadata.grafana_managed_receiver_configs} />\n      )}\n      <div className={styles.routingSection}>\n        <CollapsableSection\n          label={t(\n            'alerting.alert-manager-manual-routing.label-muting-grouping-and-timings-optional',\n            'Muting, grouping and timings (optional)'\n          )}\n          isOpen={hasRouteSettings}\n          className={styles.collapsableSection}\n          contentClassName={styles.collapsableSectionContent}\n        >\n          <Stack direction=\"column\" gap={1}>\n            <Stack direction=\"row\" gap={0.5} alignItems=\"center\">\n              <Text variant=\"bodySmall\" color=\"secondary\">\n                <Trans i18nKey=\"alerting.rule-form.simple-routing.optional-settings.description\">\n                  Configure how notifications for this alert rule are sent.\n                </Trans>\n              </Text>\n              <NeedHelpInfo\n                title={t(\n                  'alerting.alert-manager-manual-routing.title-muting-grouping-and-timings',\n                  'Muting, grouping, and timings'\n                )}\n                linkText={'Read about notification grouping'}\n                externalLink={\n                  'https://grafana.com/docs/grafana/latest/alerting/fundamentals/notifications/group-alert-notifications/'\n                }\n                contentText={\n                  <>\n                    <p>\n                      {t(\n                        'alerting.rule-form.simple-routing.optional-settings.help-info1',\n                        'Mute timings allows you to temporarily pause notifications for a specific recurring period, such as a regular maintenance window or weekends.'\n                      )}\n                    </p>\n                    {t(\n                      'alerting.rule-form.simple-routing.optional-settings.help-info2',\n                      'Grouping and timing options combine multiple alerts within a specific period into a single notification, allowing you to customize default options.'\n                    )}\n                  </>\n                }\n              />\n            </Stack>\n            <MuteTimingFields alertmanager={alertManagerName} />\n            <RoutingSettings alertManager={alertManagerName} />\n          </Stack>\n        </CollapsableSection>\n      </div>\n    </Stack>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  firstAlertManagerLine: css({\n    height: 1,\n    width: theme.spacing(4),\n    backgroundColor: theme.colors.secondary.main,\n  }),\n  alertManagerName: css({\n    with: 'fit-content',\n  }),\n  secondAlertManagerLine: css({\n    height: '1px',\n    width: '100%',\n    flex: 1,\n    backgroundColor: theme.colors.secondary.main,\n  }),\n  img: css({\n    marginLeft: theme.spacing(2),\n    width: theme.spacing(3),\n    height: theme.spacing(3),\n    marginRight: theme.spacing(1),\n  }),\n  collapsableSection: css({\n    width: 'fit-content',\n    fontSize: theme.typography.body.fontSize,\n  }),\n  collapsableSectionContent: css({\n    padding: '0',\n  }),\n  routingSection: css({\n    display: 'flex',\n    flexDirection: 'column',\n    maxWidth: theme.breakpoints.values.xl,\n    border: `solid 1px ${theme.colors.border.weak}`,\n    borderRadius: theme.shape.radius.default,\n    padding: `${theme.spacing(1)} ${theme.spacing(2)}`,\n    marginTop: theme.spacing(2),\n  }),\n});\n","import { useMemo } from 'react';\nimport { useFormContext } from 'react-hook-form';\n\nimport { AlertmanagerProvider } from 'app/features/alerting/unified/state/AlertmanagerContext';\nimport { RuleFormValues } from 'app/features/alerting/unified/types/rule-form';\nimport { getAlertManagerDataSourcesByPermission } from 'app/features/alerting/unified/utils/datasource';\n\nimport { AlertManagerManualRouting } from './AlertManagerRouting';\n\nexport function SimplifiedRouting() {\n  const { getValues } = useFormContext<RuleFormValues>();\n  const contactPointsInAlert = getValues('contactPoints');\n\n  const allAlertManagersByPermission = getAlertManagerDataSourcesByPermission('notification');\n\n  // We decided to only show internal alert manager for now. Once we want to show external alert managers we can use this code\n  // const alertManagersDataSources = allAlertManagersByPermission.availableInternalDataSources.concat(\n  //   allAlertManagersByPermission.availableExternalDataSources\n  // );\n\n  const alertManagersDataSources = allAlertManagersByPermission.availableInternalDataSources;\n\n  const alertManagersDataSourcesWithConfigAPI = alertManagersDataSources.filter((am) => am.hasConfigurationAPI);\n\n  // we merge the selected contact points data for each alert manager, with the alert manager meta data\n  const alertManagersWithSelectedContactPoints = useMemo(\n    () =>\n      alertManagersDataSourcesWithConfigAPI.map((am) => {\n        const selectedContactPoint = contactPointsInAlert ? contactPointsInAlert[am.name] : undefined;\n        return {\n          alertManager: am,\n          selectedContactPoint: selectedContactPoint?.selectedContactPoint ?? '',\n          routeSettings: {\n            muteTimeIntervals: selectedContactPoint?.muteTimeIntervals ?? [],\n            overrideGrouping: selectedContactPoint?.overrideGrouping ?? false,\n            groupBy: selectedContactPoint?.groupBy ?? [],\n            overrideTimings: selectedContactPoint?.overrideTimings ?? false,\n            groupWaitValue: selectedContactPoint?.groupWaitValue ?? '',\n            groupIntervalValue: selectedContactPoint?.groupIntervalValue ?? '',\n            repeatIntervalValue: selectedContactPoint?.repeatIntervalValue ?? '',\n          },\n        };\n      }),\n    [alertManagersDataSourcesWithConfigAPI, contactPointsInAlert]\n  );\n\n  return alertManagersWithSelectedContactPoints.map((alertManagerContactPoint, index) => {\n    return (\n      <AlertmanagerProvider\n        accessType={'notification'}\n        alertmanagerSourceName={alertManagerContactPoint.alertManager.name}\n        key={alertManagerContactPoint.alertManager.name + index}\n      >\n        <AlertManagerManualRouting alertManager={alertManagerContactPoint.alertManager} />\n      </AlertmanagerProvider>\n    );\n  });\n}\n","import { compact } from 'lodash';\nimport { Suspense, lazy } from 'react';\n\nimport { Button, LoadingPlaceholder, Stack, Text } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { alertRuleApi } from 'app/features/alerting/unified/api/alertRuleApi';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { Folder, KBObjectArray } from '../../../types/rule-form';\nimport { useGetAlertManagerDataSourcesByPermissionAndConfig } from '../../../utils/datasource';\n\nconst NotificationPreviewByAlertManager = lazy(() => import('./NotificationPreviewByAlertManager'));\n\ninterface NotificationPreviewProps {\n  customLabels: KBObjectArray;\n  alertQueries: AlertQuery[];\n  condition: string | null;\n  folder?: Folder;\n  alertName?: string;\n  alertUid?: string;\n}\n\n// TODO the scroll position keeps resetting when we preview\n// this is to be expected because the list of routes dissapears as we start the request but is very annoying\nexport const NotificationPreview = ({\n  alertQueries,\n  customLabels,\n  condition,\n  folder,\n  alertName,\n  alertUid,\n}: NotificationPreviewProps) => {\n  const disabled = !condition || !folder;\n\n  const previewEndpoint = alertRuleApi.endpoints.preview;\n\n  const [trigger, { data = [], isLoading, isUninitialized: previewUninitialized }] = previewEndpoint.useMutation();\n\n  // potential instances are the instances that are going to be routed to the notification policies\n  // convert data to list of labels: are the representation of the potential instances\n  const potentialInstances = compact(data.flatMap((label) => label?.labels));\n\n  const onPreview = () => {\n    if (!folder || !condition) {\n      return;\n    }\n\n    // Get the potential labels given the alert queries, the condition and the custom labels (autogenerated labels are calculated on the BE side)\n    trigger({\n      alertQueries: alertQueries,\n      condition: condition,\n      customLabels: customLabels,\n      folder: folder,\n      alertName: alertName,\n      alertUid: alertUid,\n    });\n  };\n\n  //  Get alert managers's data source information\n  const alertManagerDataSources = useGetAlertManagerDataSourcesByPermissionAndConfig('notification');\n\n  const onlyOneAM = alertManagerDataSources.length === 1;\n\n  return (\n    <Stack direction=\"column\">\n      <Stack direction=\"row\" alignItems=\"flex-start\" justifyContent=\"space-between\">\n        <Stack direction=\"column\" gap={1}>\n          <Text element=\"h5\">\n            <Trans i18nKey=\"alerting.notification-preview.title\">Alert instance routing preview</Trans>\n          </Text>\n          {isLoading && previewUninitialized && (\n            <Text color=\"secondary\" variant=\"bodySmall\">\n              <Trans i18nKey=\"alerting.common.loading\">Loading...</Trans>\n            </Text>\n          )}\n          {previewUninitialized ? (\n            <Text color=\"secondary\" variant=\"bodySmall\">\n              <Trans i18nKey=\"alerting.notification-preview.uninitialized\">\n                When you have your folder selected and your query and labels are configured, click &quot;Preview\n                routing&quot; to see the results here.\n              </Trans>\n            </Text>\n          ) : (\n            <Text color=\"secondary\" variant=\"bodySmall\">\n              <Trans i18nKey=\"alerting.notification-preview.initialized\">\n                Based on the labels added, alert instances are routed to the following notification policies. Expand\n                each notification policy below to view more details.\n              </Trans>\n            </Text>\n          )}\n        </Stack>\n        <Button icon=\"sync\" variant=\"secondary\" type=\"button\" onClick={onPreview} disabled={disabled}>\n          <Trans i18nKey=\"alerting.notification-preview.preview-routing\">Preview routing</Trans>\n        </Button>\n      </Stack>\n      {!isLoading && !previewUninitialized && potentialInstances.length > 0 && (\n        <Suspense\n          fallback={\n            <LoadingPlaceholder text={t('alerting.notification-preview.text-loading-preview', 'Loading preview...')} />\n          }\n        >\n          {alertManagerDataSources.map((alertManagerSource) => (\n            <NotificationPreviewByAlertManager\n              alertManagerSource={alertManagerSource}\n              potentialInstances={potentialInstances}\n              onlyOneAM={onlyOneAM}\n              key={alertManagerSource.name}\n            />\n          ))}\n        </Suspense>\n      )}\n    </Stack>\n  );\n};\n","import { css } from '@emotion/css';\nimport { useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Icon, RadioButtonGroup, Stack, Text, useStyles2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { AlertmanagerChoice } from 'app/plugins/datasource/alertmanager/types';\n\nimport { alertmanagerApi } from '../../api/alertmanagerApi';\nimport { KBObjectArray, RuleFormType, RuleFormValues } from '../../types/rule-form';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { isGrafanaManagedRuleByType, isGrafanaRecordingRuleByType, isRecordingRuleByType } from '../../utils/rules';\n\nimport { NeedHelpInfo } from './NeedHelpInfo';\nimport { RuleEditorSection } from './RuleEditorSection';\nimport { SimplifiedRouting } from './alert-rule-form/simplifiedRouting/SimplifiedRouting';\nimport { LabelsEditorModal } from './labels/LabelsEditorModal';\nimport { LabelsFieldInForm } from './labels/LabelsFieldInForm';\nimport { NotificationPreview } from './notificaton-preview/NotificationPreview';\n\ntype NotificationsStepProps = {\n  alertUid?: string;\n};\n\nenum RoutingOptions {\n  NotificationPolicy = 'notification policy',\n  ContactPoint = 'contact point',\n}\n\nfunction useHasInternalAlertmanagerEnabled() {\n  const { useGetGrafanaAlertingConfigurationStatusQuery } = alertmanagerApi;\n  const { currentData: amChoiceStatus } = useGetGrafanaAlertingConfigurationStatusQuery(undefined);\n  return (\n    amChoiceStatus?.alertmanagersChoice === AlertmanagerChoice.Internal ||\n    amChoiceStatus?.alertmanagersChoice === AlertmanagerChoice.All\n  );\n}\n\nexport const NotificationsStep = ({ alertUid }: NotificationsStepProps) => {\n  const { watch, getValues, setValue } = useFormContext<RuleFormValues>();\n  const styles = useStyles2(getStyles);\n\n  const [type, manualRouting] = watch(['type', 'manualRouting']);\n  const [showLabelsEditor, setShowLabelsEditor] = useState(false);\n\n  const dataSourceName = watch('dataSourceName') ?? GRAFANA_RULES_SOURCE_NAME;\n  const isGrafanaManaged = isGrafanaManagedRuleByType(type);\n  const simplifiedRoutingToggleEnabled = config.featureToggles.alertingSimplifiedRouting ?? false;\n  const simplifiedModeInNotificationsStepEnabled = config.featureToggles.alertingNotificationsStepMode ?? false;\n  const shouldRenderpreview = type === RuleFormType.grafana;\n  const hasInternalAlertmanagerEnabled = useHasInternalAlertmanagerEnabled();\n\n  const shouldAllowSimplifiedRouting =\n    type === RuleFormType.grafana && simplifiedRoutingToggleEnabled && hasInternalAlertmanagerEnabled;\n\n  function onCloseLabelsEditor(labelsToUpdate?: KBObjectArray) {\n    if (labelsToUpdate) {\n      setValue('labels', labelsToUpdate);\n    }\n    setShowLabelsEditor(false);\n  }\n\n  if (isGrafanaRecordingRuleByType(type)) {\n    return null;\n  }\n\n  const step = !isGrafanaManaged ? 4 : 5;\n\n  const switchMode =\n    isGrafanaManaged && simplifiedModeInNotificationsStepEnabled\n      ? {\n          isAdvancedMode: !manualRouting,\n          setAdvancedMode: (isAdvanced: boolean) => {\n            setValue('editorSettings.simplifiedNotificationEditor', !isAdvanced);\n            setValue('manualRouting', !isAdvanced);\n          },\n        }\n      : undefined;\n  const title = isRecordingRuleByType(type)\n    ? 'Add labels'\n    : isGrafanaManaged\n      ? 'Configure notifications'\n      : 'Configure labels and notifications';\n\n  return (\n    <RuleEditorSection\n      stepNo={step}\n      title={title}\n      description={\n        <Stack direction=\"row\" gap={0.5} alignItems=\"center\">\n          {isRecordingRuleByType(type) ? (\n            <Text variant=\"bodySmall\" color=\"secondary\">\n              <Trans i18nKey=\"alerting.notifications-step.labels-better-manage-recording-rules\">\n                Add labels to help you better manage your recording rules.\n              </Trans>\n            </Text>\n          ) : (\n            shouldAllowSimplifiedRouting && (\n              <Text variant=\"bodySmall\" color=\"secondary\">\n                Select who should receive a notification when an alert rule fires.\n              </Text>\n            )\n          )}\n        </Stack>\n      }\n      switchMode={switchMode}\n      fullWidth\n    >\n      {!isGrafanaManaged && (\n        <>\n          <LabelsFieldInForm onEditClick={() => setShowLabelsEditor(true)} />\n          <LabelsEditorModal\n            isOpen={showLabelsEditor}\n            onClose={onCloseLabelsEditor}\n            dataSourceName={dataSourceName}\n            initialLabels={getValues('labels')}\n          />\n        </>\n      )}\n      {shouldAllowSimplifiedRouting && (\n        <div className={styles.configureNotifications}>\n          <Text element=\"h5\">\n            <Trans i18nKey=\"alerting.notifications-step.recipient\">Recipient</Trans>\n          </Text>\n        </div>\n      )}\n      {shouldAllowSimplifiedRouting ? ( // when simplified routing is enabled and is grafana rule\n        simplifiedModeInNotificationsStepEnabled ? ( // simplified mode is enabled\n          <ManualAndAutomaticRoutingSimplified alertUid={alertUid} />\n        ) : (\n          // simplified mode is disabled\n          <ManualAndAutomaticRouting alertUid={alertUid} />\n        )\n      ) : // when simplified routing is not enabled, render the notification preview as we did before\n      shouldRenderpreview ? (\n        <AutomaticRooting alertUid={alertUid} />\n      ) : null}\n    </RuleEditorSection>\n  );\n};\n\n/**\n * Preconditions:\n * - simplified routing is enabled\n * - the alert rule is a grafana rule\n *\n * This component will render the switch between the select contact point routing and the notification policy routing.\n * It also renders the section body of the NotificationsStep, depending on the routing option selected.\n * If select contact point routing is selected, it will render the SimplifiedRouting component.\n * If notification policy routing is selected, it will render the AutomaticRouting component.\n *\n */\nfunction ManualAndAutomaticRouting({ alertUid }: { alertUid?: string }) {\n  const { watch, setValue } = useFormContext<RuleFormValues>();\n  const styles = useStyles2(getStyles);\n\n  const [manualRouting] = watch(['manualRouting']);\n\n  const routingOptions = [\n    { label: 'Select contact point', value: RoutingOptions.ContactPoint },\n    { label: 'Use notification policy', value: RoutingOptions.NotificationPolicy },\n  ];\n\n  const onRoutingOptionChange = (option: RoutingOptions) => {\n    setValue('manualRouting', option === RoutingOptions.ContactPoint);\n  };\n\n  return (\n    <Stack direction=\"column\" gap={2}>\n      <Stack direction=\"column\">\n        <RadioButtonGroup\n          data-testid={manualRouting ? 'routing-options-contact-point' : 'routing-options-notification-policy'}\n          options={routingOptions}\n          value={manualRouting ? RoutingOptions.ContactPoint : RoutingOptions.NotificationPolicy}\n          onChange={onRoutingOptionChange}\n          className={styles.routingOptions}\n        />\n      </Stack>\n\n      <RoutingOptionDescription manualRouting={manualRouting} />\n\n      {manualRouting ? <SimplifiedRouting /> : <AutomaticRooting alertUid={alertUid} />}\n    </Stack>\n  );\n}\n\n/**\n * Preconditions:\n * - simplified routing is enabled\n * - simple mode for notifications step is enabled\n * - the alert rule is a grafana rule\n *\n * This component will render the switch between the select contact point routing and the notification policy routing.\n * It also renders the section body of the NotificationsStep, depending on the routing option selected.\n * If select contact point routing is selected, it will render the SimplifiedRouting component.\n * If notification policy routing is selected, it will render the AutomaticRouting component.\n *\n */\nfunction ManualAndAutomaticRoutingSimplified({ alertUid }: { alertUid?: string }) {\n  const { watch } = useFormContext<RuleFormValues>();\n\n  const [manualRouting] = watch(['manualRouting']);\n\n  return (\n    <Stack direction=\"column\" gap={2}>\n      <RoutingOptionDescription manualRouting={manualRouting} />\n\n      {manualRouting ? <SimplifiedRouting /> : <AutomaticRooting alertUid={alertUid} />}\n    </Stack>\n  );\n}\n\ninterface AutomaticRootingProps {\n  alertUid?: string;\n}\n\nfunction AutomaticRooting({ alertUid }: AutomaticRootingProps) {\n  const { watch } = useFormContext<RuleFormValues>();\n  const [labels, queries, condition, folder, alertName] = watch([\n    'labels',\n    'queries',\n    'condition',\n    'folder',\n    'name',\n    'manualRouting',\n  ]);\n  return (\n    <NotificationPreview\n      alertQueries={queries}\n      customLabels={labels}\n      condition={condition}\n      folder={folder}\n      alertName={alertName}\n      alertUid={alertUid}\n    />\n  );\n}\n\n// Auxiliar components to build the texts and descriptions in the NotificationsStep\nfunction NeedHelpInfoForNotificationPolicy() {\n  return (\n    <NeedHelpInfo\n      contentText={\n        <Stack gap={1} direction=\"column\">\n          <Stack direction=\"column\" gap={0}>\n            Firing alert instances are routed to notification policies based on matching labels. The default\n            notification policy matches all alert instances.\n          </Stack>\n          <Stack direction=\"column\" gap={0}>\n            Custom labels change the way your notifications are routed. First, add labels to your alert rule and then\n            connect them to your notification policy by adding label matchers.\n            <a\n              href={`https://grafana.com/docs/grafana/latest/alerting/fundamentals/notifications/notification-policies/`}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              <Text color=\"link\">\n                Read about notification policies. <Icon name=\"external-link-alt\" />\n              </Text>\n            </a>\n          </Stack>\n        </Stack>\n      }\n      title={t('alerting.need-help-info-for-notification-policy.title-notification-routing', 'Notification routing')}\n    />\n  );\n}\n\nfunction NeedHelpInfoForContactpoint() {\n  return (\n    <NeedHelpInfo\n      contentText={\n        <>\n          Select a contact point to notify all recipients in it.\n          <br />\n          Muting, grouping, and timings options allow you to customize how notifications are sent.\n          <br />\n          <br />\n          Alternatively, toggle the <b>Advanced options</b> button to route notifications using notification policies\n          for greater flexibility.\n        </>\n      }\n      externalLink=\"https://grafana.com/docs/grafana/latest/alerting/fundamentals/notifications/\"\n      linkText=\"Read more about notifications\"\n      title={t(\n        'alerting.need-help-info-for-contactpoint.title-notify-by-selecting-a-contact-point',\n        'Notify by selecting a contact point'\n      )}\n    />\n  );\n}\ninterface NotificationsStepDescriptionProps {\n  manualRouting: boolean;\n}\n\nexport const RoutingOptionDescription = ({ manualRouting }: NotificationsStepDescriptionProps) => {\n  return (\n    <Stack alignItems=\"center\">\n      <Text variant=\"bodySmall\" color=\"secondary\">\n        {manualRouting\n          ? 'Notifications for firing alerts are routed to a selected contact point.'\n          : 'Notifications for firing alerts are routed to contact points based on matching labels and the notification policy tree.'}\n      </Text>\n      {manualRouting ? <NeedHelpInfoForContactpoint /> : <NeedHelpInfoForNotificationPolicy />}\n    </Stack>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  routingOptions: css({\n    width: 'fit-content',\n  }),\n  configureNotifications: css({\n    display: 'flex',\n    flexDirection: 'column',\n    marginTop: theme.spacing(2),\n  }),\n});\n","import { PanelData } from '@grafana/data';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { RuleFormType } from './rule-form';\n\nexport type PreviewRuleRequest = GrafanaPreviewRuleRequest | CloudPreviewRuleRequest;\n\nexport type GrafanaPreviewRuleRequest = {\n  grafana_condition: {\n    condition: string;\n    data: AlertQuery[];\n    now: string;\n  };\n};\n\nexport type CloudPreviewRuleRequest = {\n  dataSourceUid: string;\n  dataSourceName: string;\n  expr: string;\n};\n\nexport type PreviewRuleResponse = {\n  ruleType: RuleFormType;\n  data: PanelData;\n};\n\nexport function isCloudPreviewRequest(request: PreviewRuleRequest): request is CloudPreviewRuleRequest {\n  return 'expr' in request;\n}\n\nexport function isGrafanaPreviewRequest(request: PreviewRuleRequest): request is GrafanaPreviewRuleRequest {\n  return 'grafana_condition' in request;\n}\n","import { Observable, of } from 'rxjs';\nimport { catchError, map, share } from 'rxjs/operators';\n\nimport {\n  DataFrameJSON,\n  LoadingState,\n  PanelData,\n  dataFrameFromJSON,\n  getDefaultTimeRange,\n  withLoadingIndicator,\n} from '@grafana/data';\nimport { getBackendSrv, toDataQueryError } from '@grafana/runtime';\n\nimport {\n  PreviewRuleRequest,\n  PreviewRuleResponse,\n  isCloudPreviewRequest,\n  isGrafanaPreviewRequest,\n} from '../types/preview';\nimport { RuleFormType } from '../types/rule-form';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nexport function previewAlertRule(request: PreviewRuleRequest): Observable<PreviewRuleResponse> {\n  if (isCloudPreviewRequest(request)) {\n    return fetchAlertRulePreview(request, request.dataSourceUid, RuleFormType.cloudAlerting);\n  }\n\n  if (isGrafanaPreviewRequest(request)) {\n    return fetchAlertRulePreview(request, GRAFANA_RULES_SOURCE_NAME, RuleFormType.grafana);\n  }\n\n  throw new Error('unsupported preview rule request');\n}\n\ntype AlertRulePreviewResponse = {\n  instances: DataFrameJSON[];\n};\n\nfunction fetchAlertRulePreview(\n  request: PreviewRuleRequest,\n  dataSourceUid: string,\n  ruleType: RuleFormType\n): Observable<PreviewRuleResponse> {\n  return withLoadingIndicator({\n    whileLoading: createResponse(ruleType),\n    source: getBackendSrv()\n      .fetch<AlertRulePreviewResponse>({\n        method: 'POST',\n        url: `/api/v1/rule/test/${dataSourceUid}`,\n        data: request,\n      })\n      .pipe(\n        map(({ data }) => {\n          return createResponse(ruleType, {\n            state: LoadingState.Done,\n            series: data.instances.map(dataFrameFromJSON),\n          });\n        }),\n        catchError((error: Error) => {\n          return of(\n            createResponse(ruleType, {\n              state: LoadingState.Error,\n              error: toDataQueryError(error),\n            })\n          );\n        }),\n        share()\n      ),\n  });\n}\n\nfunction createResponse(ruleType: RuleFormType, data: Partial<PanelData> = {}): PreviewRuleResponse {\n  return {\n    ruleType,\n    data: {\n      state: LoadingState.Loading,\n      series: [],\n      timeRange: getDefaultTimeRange(),\n      ...data,\n    },\n  };\n}\n","import { css } from '@emotion/css';\nimport * as React from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { FieldConfigSource, FieldMatcherID, GrafanaTheme2, LoadingState } from '@grafana/data';\nimport { PanelRenderer } from '@grafana/runtime';\nimport { TableCellDisplayMode, useStyles2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nimport { PreviewRuleResponse } from '../../types/preview';\nimport { RuleFormType } from '../../types/rule-form';\nimport { messageFromError } from '../../utils/redux';\n\ntype Props = {\n  preview: PreviewRuleResponse | undefined;\n};\n\nexport function PreviewRuleResult(props: Props): React.ReactElement | null {\n  const { preview } = props;\n  const styles = useStyles2(getStyles);\n  const fieldConfig: FieldConfigSource = {\n    defaults: {},\n    overrides: [\n      {\n        matcher: { id: FieldMatcherID.byName, options: 'Info' },\n        properties: [{ id: 'custom.displayMode', value: TableCellDisplayMode.JSONView }],\n      },\n    ],\n  };\n\n  if (!preview) {\n    return null;\n  }\n\n  const { data, ruleType } = preview;\n\n  if (data.state === LoadingState.Loading) {\n    return (\n      <div className={styles.container}>\n        <span>\n          <Trans i18nKey=\"alerting.preview-rule-result.loading-preview\">Loading preview...</Trans>\n        </span>\n      </div>\n    );\n  }\n\n  if (data.state === LoadingState.Error) {\n    return (\n      <div className={styles.container}>\n        {data.error ? messageFromError(data.error) : 'Failed to preview alert rule'}\n      </div>\n    );\n  }\n  return (\n    <div className={styles.container}>\n      <span>\n        Preview based on the result of running the query, for this moment.{' '}\n        {ruleType === RuleFormType.grafana ? 'Configuration for `no data` and `error handling` is not applied.' : null}\n      </span>\n      <div className={styles.table}>\n        <AutoSizer>\n          {({ width, height }) => (\n            <div style={{ width: `${width}px`, height: `${height}px` }}>\n              <PanelRenderer\n                title=\"\"\n                width={width}\n                height={height}\n                pluginId=\"table\"\n                data={data}\n                fieldConfig={fieldConfig}\n              />\n            </div>\n          )}\n        </AutoSizer>\n      </div>\n    </div>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      margin: `${theme.spacing(2)} 0`,\n    }),\n    table: css({\n      flex: '1 1 auto',\n      height: '135px',\n      marginTop: theme.spacing(2),\n      border: `1px solid ${theme.colors.border.medium}`,\n      borderRadius: theme.shape.radius.default,\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport * as React from 'react';\nimport { useCallback, useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { useMountedState } from 'react-use';\nimport { takeWhile } from 'rxjs/operators';\n\nimport { GrafanaTheme2, LoadingState, dateTimeFormatISO } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { Alert, Button, Stack, useStyles2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { previewAlertRule } from '../../api/preview';\nimport { useAlertQueriesStatus } from '../../hooks/useAlertQueriesStatus';\nimport { PreviewRuleRequest, PreviewRuleResponse } from '../../types/preview';\nimport { RuleFormType, RuleFormValues } from '../../types/rule-form';\nimport { isDataSourceManagedRuleByType } from '../../utils/rules';\n\nimport { PreviewRuleResult } from './PreviewRuleResult';\n\nconst fields: Array<keyof RuleFormValues> = ['type', 'dataSourceName', 'condition', 'queries', 'expression'];\n\nexport function PreviewRule(): React.ReactElement | null {\n  const styles = useStyles2(getStyles);\n  const [preview, onPreview] = usePreview();\n  const { watch } = useFormContext<RuleFormValues>();\n  const [type, condition, queries] = watch(['type', 'condition', 'queries']);\n  const { allDataSourcesAvailable } = useAlertQueriesStatus(queries);\n\n  if (!type || isDataSourceManagedRuleByType(type)) {\n    return null;\n  }\n\n  const isPreviewAvailable = Boolean(condition) && allDataSourcesAvailable;\n\n  return (\n    <div className={styles.container}>\n      <Stack>\n        {allDataSourcesAvailable && (\n          <Button disabled={!isPreviewAvailable} type=\"button\" variant=\"primary\" onClick={onPreview}>\n            <Trans i18nKey=\"alerting.preview-rule.preview-alerts\">Preview alerts</Trans>\n          </Button>\n        )}\n        {!allDataSourcesAvailable && (\n          <Alert\n            title={t('alerting.preview-rule.title-preview-is-not-available', 'Preview is not available')}\n            severity=\"warning\"\n          >\n            Cannot display the query preview. Some of the data sources used in the queries are not available.\n          </Alert>\n        )}\n      </Stack>\n      <PreviewRuleResult preview={preview} />\n    </div>\n  );\n}\n\nexport function usePreview(): [PreviewRuleResponse | undefined, () => void] {\n  const [preview, setPreview] = useState<PreviewRuleResponse | undefined>();\n  const { getValues } = useFormContext<RuleFormValues>();\n  const isMounted = useMountedState();\n\n  const onPreview = useCallback(() => {\n    const values = getValues(fields);\n    const request = createPreviewRequest(values);\n\n    previewAlertRule(request)\n      .pipe(takeWhile((response) => !isCompleted(response), true))\n      .subscribe((response) => {\n        if (!isMounted()) {\n          return;\n        }\n        setPreview(response);\n      });\n  }, [getValues, isMounted]);\n\n  return [preview, onPreview];\n}\n\nfunction createPreviewRequest(values: any[]): PreviewRuleRequest {\n  const [type, dataSourceName, condition, queries, expression] = values;\n  const dsSettings = getDataSourceSrv().getInstanceSettings(dataSourceName);\n  if (!dsSettings) {\n    throw new Error(`Cannot find data source settings for ${dataSourceName}`);\n  }\n\n  switch (type) {\n    case RuleFormType.cloudAlerting:\n      return {\n        dataSourceUid: dsSettings.uid,\n        dataSourceName,\n        expr: expression,\n      };\n\n    case RuleFormType.grafana:\n      return {\n        grafana_condition: {\n          condition,\n          data: queries,\n          now: dateTimeFormatISO(Date.now()),\n        },\n      };\n\n    default:\n      throw new Error(`Alert type ${type} not supported by preview.`);\n  }\n}\n\nfunction isCompleted(response: PreviewRuleResponse): boolean {\n  switch (response.data.state) {\n    case LoadingState.Done:\n    case LoadingState.Error:\n      return true;\n    default:\n      return false;\n  }\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      marginTop: theme.spacing(2),\n      maxWidth: `${theme.breakpoints.values.xxl}px`,\n    }),\n  };\n}\n","import { memo, useCallback, useEffect, useMemo, useState } from 'react';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport { useAsync } from 'react-use';\n\nimport { Button, LinkButton, LoadingPlaceholder, Stack } from '@grafana/ui';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { AppChromeUpdate } from '../../../../../../core/components/AppChrome/AppChromeUpdate';\nimport {\n  PostableRulerRuleGroupDTO,\n  RulerRuleDTO,\n  RulerRuleGroupDTO,\n} from '../../../../../../types/unified-alerting-dto';\nimport { alertRuleApi } from '../../../api/alertRuleApi';\nimport { fetchRulerRulesGroup } from '../../../api/ruler';\nimport { useDataSourceFeatures } from '../../../hooks/useCombinedRule';\nimport { useReturnTo } from '../../../hooks/useReturnTo';\nimport { DEFAULT_GROUP_EVALUATION_INTERVAL, getDefaultFormValues } from '../../../rule-editor/formDefaults';\nimport { RuleFormType, RuleFormValues } from '../../../types/rule-form';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../../utils/datasource';\nimport { formValuesToRulerGrafanaRuleDTO, getDefaultQueries } from '../../../utils/rule-form';\nimport { rulerRuleType } from '../../../utils/rules';\nimport { FileExportPreview } from '../../export/FileExportPreview';\nimport { GrafanaExportDrawer } from '../../export/GrafanaExportDrawer';\nimport { ExportFormats, HclExportProvider, allGrafanaExportProviders } from '../../export/providers';\nimport { AlertRuleNameAndMetric } from '../AlertRuleNameInput';\nimport AnnotationsStep from '../AnnotationsStep';\nimport { GrafanaEvaluationBehaviorStep } from '../GrafanaEvaluationBehavior';\nimport { GrafanaFolderAndLabelsStep } from '../GrafanaFolderAndLabelsStep';\nimport { NotificationsStep } from '../NotificationsStep';\nimport { QueryAndExpressionsStep } from '../query-and-alert-condition/QueryAndExpressionsStep';\n\ninterface ModifyExportRuleFormProps {\n  alertUid?: string;\n  ruleForm?: RuleFormValues;\n}\n\nexport function ModifyExportRuleForm({ ruleForm, alertUid }: ModifyExportRuleFormProps) {\n  const defaultValuesForNewRule: RuleFormValues = useMemo(() => {\n    const defaultRuleType = RuleFormType.grafana;\n\n    return {\n      ...getDefaultFormValues(),\n      condition: 'C',\n      queries: getDefaultQueries(false),\n      type: defaultRuleType,\n      evaluateEvery: DEFAULT_GROUP_EVALUATION_INTERVAL,\n    };\n  }, []);\n\n  const formAPI = useForm<RuleFormValues>({\n    mode: 'onSubmit',\n    defaultValues: ruleForm ?? defaultValuesForNewRule,\n    shouldFocusError: true,\n  });\n\n  const existing = Boolean(ruleForm);\n  const notifyApp = useAppNotification();\n  const { returnTo } = useReturnTo('/alerting/list');\n\n  const [exportData, setExportData] = useState<RuleFormValues | undefined>(undefined);\n  const [conditionErrorMsg, setConditionErrorMsg] = useState('');\n\n  const onInvalid = (): void => {\n    notifyApp.error('There are errors in the form. Please correct them and try again!');\n  };\n\n  const checkAlertCondition = (msg = '') => {\n    setConditionErrorMsg(msg);\n  };\n\n  const submit = (exportData: RuleFormValues | undefined) => {\n    if (conditionErrorMsg !== '') {\n      notifyApp.error(conditionErrorMsg);\n      return;\n    }\n    setExportData(exportData);\n  };\n\n  const onClose = useCallback(() => {\n    setExportData(undefined);\n  }, [setExportData]);\n\n  const actionButtons = [\n    <LinkButton href={returnTo} key=\"cancel\" size=\"sm\" variant=\"secondary\" onClick={() => submit(undefined)}>\n      <Trans i18nKey=\"alerting.common.cancel\">Cancel</Trans>\n    </LinkButton>,\n    <Button key=\"export-rule\" size=\"sm\" onClick={formAPI.handleSubmit((formValues) => submit(formValues), onInvalid)}>\n      <Trans i18nKey=\"alerting.modify-export-rule-form.action-buttons.export\">Export</Trans>\n    </Button>,\n  ];\n\n  return (\n    <FormProvider {...formAPI}>\n      <AppChromeUpdate actions={actionButtons} />\n      <form onSubmit={(e) => e.preventDefault()}>\n        <div>\n          <Stack direction=\"column\" gap={3}>\n            {/* Step 1 */}\n            <AlertRuleNameAndMetric />\n            {/* Step 2 */}\n            <QueryAndExpressionsStep editingExistingRule={existing} onDataChange={checkAlertCondition} mode=\"draft\" />\n            {/* Step 3-4-5 */}\n            <GrafanaFolderAndLabelsStep />\n\n            {/* Step 4 & 5 */}\n            <GrafanaEvaluationBehaviorStep existing={Boolean(existing)} enableProvisionedGroups={true} />\n            {/* Notifications step*/}\n            <NotificationsStep alertUid={alertUid} />\n            {/* Annotations only for cloud and Grafana */}\n            <AnnotationsStep />\n          </Stack>\n        </div>\n      </form>\n      {exportData && <GrafanaRuleDesignExporter exportValues={exportData} onClose={onClose} uid={alertUid} />}\n    </FormProvider>\n  );\n}\n\nconst useGetGroup = (nameSpaceUID: string, group: string) => {\n  const { dsFeatures } = useDataSourceFeatures(GRAFANA_RULES_SOURCE_NAME);\n\n  const rulerConfig = dsFeatures?.rulerConfig;\n\n  const targetGroup = useAsync(async () => {\n    return rulerConfig ? await fetchRulerRulesGroup(rulerConfig, nameSpaceUID, group) : undefined;\n  }, [rulerConfig, nameSpaceUID, group]);\n\n  return targetGroup;\n};\n\ninterface GrafanaRuleDesignExportPreviewProps {\n  exportFormat: ExportFormats;\n  onClose: () => void;\n  exportValues: RuleFormValues;\n  uid?: string;\n}\nexport const getPayloadToExport = (\n  formValues: RuleFormValues,\n  existingGroup: RulerRuleGroupDTO<RulerRuleDTO> | null | undefined,\n  ruleUid?: string\n): PostableRulerRuleGroupDTO => {\n  const grafanaRuleDto = formValuesToRulerGrafanaRuleDTO(formValues);\n\n  const updatedRule = { ...grafanaRuleDto, grafana_alert: { ...grafanaRuleDto.grafana_alert, uid: ruleUid } };\n  if (existingGroup?.rules) {\n    // we have to update the rule in the group in the same position if it exists, otherwise we have to add it at the end\n    let alreadyExistsInGroup = false;\n    const updatedRules = existingGroup.rules.map((rule: RulerRuleDTO) => {\n      if (rulerRuleType.grafana.rule(rule) && rule.grafana_alert.uid === ruleUid) {\n        alreadyExistsInGroup = true;\n        return updatedRule;\n      } else {\n        return rule;\n      }\n    });\n    if (!alreadyExistsInGroup) {\n      // we have to add the updated rule at the end of the group\n      updatedRules.push(updatedRule);\n    }\n    return {\n      ...existingGroup,\n      rules: updatedRules,\n    };\n  } else {\n    // we have to create a new group with the updated rule\n    return {\n      name: existingGroup?.name ?? formValues.group,\n      rules: [updatedRule],\n    };\n  }\n};\n\nconst useGetPayloadToExport = (values: RuleFormValues, ruleUid?: string) => {\n  const rulerGroupDto = useGetGroup(values.folder?.uid ?? '', values.group);\n  const payload: PostableRulerRuleGroupDTO = useMemo(() => {\n    return getPayloadToExport(values, rulerGroupDto?.value, ruleUid);\n  }, [ruleUid, rulerGroupDto, values]);\n  return { payload, loadingGroup: rulerGroupDto.loading };\n};\n\nconst GrafanaRuleDesignExportPreview = ({\n  exportFormat,\n  exportValues,\n  onClose,\n  uid,\n}: GrafanaRuleDesignExportPreviewProps) => {\n  const [getExport, exportData] = alertRuleApi.endpoints.exportModifiedRuleGroup.useMutation();\n  const { loadingGroup, payload } = useGetPayloadToExport(exportValues, uid);\n\n  const nameSpaceUID = exportValues.folder?.uid ?? '';\n\n  useEffect(() => {\n    !loadingGroup && payload.name && getExport({ payload, format: exportFormat, nameSpaceUID });\n  }, [nameSpaceUID, exportFormat, payload, getExport, loadingGroup]);\n\n  if (exportData.isLoading) {\n    return <LoadingPlaceholder text={t('alerting.grafana-rule-design-export-preview.text-loading', 'Loading....')} />;\n  }\n\n  const downloadFileName = `modify-export-${payload.name}-${uid}-${new Date().getTime()}`;\n\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={exportData.data ?? ''}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n};\n\ninterface GrafanaRuleDesignExporterProps {\n  onClose: () => void;\n  exportValues: RuleFormValues;\n  uid?: string;\n}\n\nexport const GrafanaRuleDesignExporter = memo(({ onClose, exportValues, uid }: GrafanaRuleDesignExporterProps) => {\n  const exportingNewRule = !uid;\n  const initialTab = exportingNewRule ? 'hcl' : 'yaml';\n  const [activeTab, setActiveTab] = useState<ExportFormats>(initialTab);\n  const formatProviders = exportingNewRule ? [HclExportProvider] : Object.values(allGrafanaExportProviders);\n\n  return (\n    <GrafanaExportDrawer\n      title={t('alerting.grafana-rule-design-exporter.title-export-group', 'Export Group')}\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={formatProviders}\n    >\n      <GrafanaRuleDesignExportPreview\n        exportFormat={activeTab}\n        onClose={onClose}\n        exportValues={exportValues}\n        uid={uid}\n      />\n    </GrafanaExportDrawer>\n  );\n});\n\nGrafanaRuleDesignExporter.displayName = 'GrafanaRuleDesignExporter';\n","import { Modal } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { KBObjectArray } from '../../../types/rule-form';\n\nimport { LabelsSubForm } from './LabelsField';\n\nexport interface LabelsEditorModalProps {\n  isOpen: boolean;\n  initialLabels: Array<{\n    key: string;\n    value: string;\n  }>;\n  onClose: (labelsToUodate?: KBObjectArray) => void;\n  dataSourceName: string;\n}\nexport function LabelsEditorModal({ isOpen, onClose, dataSourceName, initialLabels }: LabelsEditorModalProps) {\n  return (\n    <Modal\n      title={t('alerting.labels-editor-modal.title-edit-labels', 'Edit labels')}\n      closeOnEscape\n      isOpen={isOpen}\n      onDismiss={() => onClose()}\n    >\n      <LabelsSubForm dataSourceName={dataSourceName} onClose={onClose} initialLabels={initialLabels} />\n    </Modal>\n  );\n}\n","import { useFormContext } from 'react-hook-form';\n\nimport { Button, Stack, Text } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { RuleFormValues } from '../../../types/rule-form';\nimport { isRecordingRuleByType } from '../../../utils/rules';\nimport { NeedHelpInfo } from '../NeedHelpInfo';\n\nimport { LabelsInRule } from './LabelsField';\n\ninterface LabelsFieldInFormProps {\n  onEditClick: () => void;\n}\nexport function LabelsFieldInForm({ onEditClick }: LabelsFieldInFormProps) {\n  const { watch } = useFormContext<RuleFormValues>();\n  const labels = watch('labels');\n  const type = watch('type');\n\n  const isRecordingRule = type ? isRecordingRuleByType(type) : false;\n\n  const text = isRecordingRule\n    ? t('alerting.alertform.labels.recording', 'Add labels to your rule.')\n    : t(\n        'alerting.alertform.labels.alerting',\n        'Add labels to your rule for searching, silencing, or routing to a notification policy.'\n      );\n\n  const hasLabels = Object.keys(labels).length > 0 && labels.some((label) => label.key || label.value);\n\n  return (\n    <Stack direction=\"column\" gap={2}>\n      <Stack direction=\"column\" gap={1}>\n        <Text element=\"h5\">\n          <Trans i18nKey=\"alerting.labels-field-in-form.labels\">Labels</Trans>\n        </Text>\n        <Stack direction={'row'} gap={1}>\n          <Text variant=\"bodySmall\" color=\"secondary\">\n            {text}\n          </Text>\n          <NeedHelpInfo\n            externalLink={'https://grafana.com/docs/grafana/latest/alerting/fundamentals/alert-rules/annotation-label/'}\n            linkText={`Read about labels`}\n            contentText=\"The dropdown only displays labels that you have previously used for alerts.\n              Select a label from the options below or type in a new one.\"\n            title={t('alerting.labels-field-in-form.title-labels', 'Labels')}\n          />\n        </Stack>\n      </Stack>\n      <Stack direction=\"row\" gap={1} alignItems=\"center\">\n        <LabelsInRule labels={labels} />\n        {hasLabels ? (\n          <Button variant=\"secondary\" type=\"button\" onClick={onEditClick} size=\"sm\">\n            <Trans i18nKey=\"alerting.labels-field-in-form.edit-labels\">Edit labels</Trans>\n          </Button>\n        ) : (\n          <Stack direction=\"row\" gap={2} alignItems=\"center\">\n            <Text>\n              <Trans i18nKey=\"alerting.labels-field-in-form.no-labels-selected\">No labels selected</Trans>\n            </Text>\n            <Button\n              icon=\"plus\"\n              type=\"button\"\n              variant=\"secondary\"\n              onClick={onEditClick}\n              size=\"sm\"\n              data-testid=\"add-labels-button\"\n            >\n              <Trans i18nKey=\"alerting.labels-field-in-form.add-labels\">Add labels</Trans>\n            </Button>\n          </Stack>\n        )}\n      </Stack>\n    </Stack>\n  );\n}\n","import { DataFrame } from '@grafana/data';\n\nimport { GrafanaAlertState, Labels, isGrafanaAlertState } from '../../../../../types/unified-alerting-dto';\n\ninterface AlertPreviewInstance {\n  state: GrafanaAlertState;\n  info?: string;\n  labels: Labels;\n}\n\ninterface AlertPreview {\n  instances: AlertPreviewInstance[];\n}\n\n// Alerts previews come in a DataFrame format which is more suited for displaying time series data\n// In order to display a list of tags we need to transform DataFrame into set of labels\nexport function mapDataFrameToAlertPreview({ fields }: DataFrame): AlertPreview {\n  const labelFields = fields.filter((field) => !['State', 'Info'].includes(field.name));\n  const stateFieldIndex = fields.findIndex((field) => field.name === 'State');\n  const infoFieldIndex = fields.findIndex((field) => field.name === 'Info');\n\n  const labelIndexes = labelFields.map((labelField) => fields.indexOf(labelField));\n\n  const instanceStatusCount = fields[stateFieldIndex]?.values.length ?? 0;\n\n  const instances: AlertPreviewInstance[] = [];\n\n  for (let index = 0; index < instanceStatusCount; index++) {\n    const labelValues = labelIndexes.map((labelIndex) => [fields[labelIndex].name, fields[labelIndex].values[index]]);\n    const state = fields[stateFieldIndex]?.values?.[index];\n    const info = fields[infoFieldIndex]?.values?.[index];\n\n    if (isGrafanaAlertState(state)) {\n      instances.push({\n        state: state,\n        info: info,\n        labels: Object.fromEntries(labelValues),\n      });\n    }\n  }\n\n  return { instances };\n}\n","import { css } from '@emotion/css';\n\nimport { DataFrame, GrafanaTheme2 } from '@grafana/data';\nimport { Icon, TagList, Tooltip, useStyles2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nimport { labelsToTags } from '../../utils/labels';\nimport { AlertStateTag } from '../rules/AlertStateTag';\n\nimport { mapDataFrameToAlertPreview } from './preview';\n\ninterface CloudAlertPreviewProps {\n  preview: DataFrame;\n}\n\nexport function CloudAlertPreview({ preview }: CloudAlertPreviewProps) {\n  const styles = useStyles2(getStyles);\n  const alertPreview = mapDataFrameToAlertPreview(preview);\n\n  return (\n    <table className={styles.table}>\n      <caption>\n        <div>\n          <Trans i18nKey=\"alerting.cloud-alert-preview.alerts-preview\">Alerts preview</Trans>\n        </div>\n        <span>Preview based on the result of running the query for this moment.</span>\n      </caption>\n      <thead>\n        <tr>\n          <th>\n            <Trans i18nKey=\"alerting.cloud-alert-preview.state\">State</Trans>\n          </th>\n          <th>\n            <Trans i18nKey=\"alerting.cloud-alert-preview.labels\">Labels</Trans>\n          </th>\n          <th>\n            <Trans i18nKey=\"alerting.cloud-alert-preview.info\">Info</Trans>\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        {alertPreview.instances.map(({ state, info, labels }, index) => {\n          const instanceTags = labelsToTags(labels);\n\n          return (\n            <tr key={index}>\n              <td>{<AlertStateTag state={state} />}</td>\n              <td>\n                <TagList tags={instanceTags} className={styles.tagList} />\n              </td>\n              <td>\n                {info && (\n                  <Tooltip content={info}>\n                    <Icon name=\"info-circle\" />\n                  </Tooltip>\n                )}\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  table: css({\n    width: '100%',\n    margin: theme.spacing(2, 0),\n\n    caption: {\n      captionSide: 'top',\n      color: theme.colors.text.primary,\n\n      '& > span': {\n        fontSize: theme.typography.bodySmall.fontSize,\n        color: theme.colors.text.secondary,\n      },\n    },\n\n    'td, th': {\n      padding: theme.spacing(1, 1),\n    },\n\n    'td + td, th + th': {\n      paddingLeft: theme.spacing(3),\n    },\n\n    'thead th': {\n      '&:nth-child(1)': {\n        width: '80px',\n      },\n\n      '&:nth-child(2)': {\n        width: 'auto',\n      },\n\n      '&:nth-child(3)': {\n        width: '40px',\n      },\n    },\n\n    'td:nth-child(3)': {\n      textAlign: 'center',\n    },\n\n    'tbody tr:nth-child(2n + 1)': {\n      backgroundColor: theme.colors.background.secondary,\n    },\n  }),\n  tagList: css({\n    justifyContent: 'flex-start',\n  }),\n});\n","import { css } from '@emotion/css';\nimport { noop } from 'lodash';\nimport { useCallback, useMemo } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { CoreApp, DataSourcePluginContextProvider, GrafanaTheme2, LoadingState } from '@grafana/data';\nimport { PromQuery } from '@grafana/prometheus';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { DataQuery } from '@grafana/schema';\nimport { Alert, Button, useStyles2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { LokiQuery } from 'app/plugins/datasource/loki/types';\n\nimport { isSupportedExternalRulesSourceType } from '../../utils/datasource';\n\nimport { CloudAlertPreview } from './CloudAlertPreview';\nimport { usePreview } from './PreviewRule';\n\nexport interface ExpressionEditorProps {\n  value?: string;\n  onChange: (value: string) => void;\n  dataSourceName: string; // will be a prometheus or loki datasource\n  showPreviewAlertsButton: boolean;\n}\n\nexport const ExpressionEditor = ({\n  value,\n  onChange,\n  dataSourceName,\n  showPreviewAlertsButton = true,\n}: ExpressionEditorProps) => {\n  const styles = useStyles2(getStyles);\n\n  const { mapToValue, mapToQuery } = useQueryMappers(dataSourceName);\n  const dataQuery = mapToQuery({ refId: 'A', hide: false }, value);\n\n  const {\n    error,\n    loading,\n    value: dataSource,\n  } = useAsync(() => {\n    return getDataSourceSrv().get(dataSourceName);\n  }, [dataSourceName]);\n\n  const onChangeQuery = useCallback(\n    (query: DataQuery) => {\n      onChange(mapToValue(query));\n    },\n    [onChange, mapToValue]\n  );\n\n  const [alertPreview, onPreview] = usePreview();\n\n  const onRunQueriesClick = async () => {\n    onPreview();\n  };\n\n  if (loading || dataSource?.name !== dataSourceName) {\n    return null;\n  }\n\n  const dsi = getDataSourceSrv().getInstanceSettings(dataSourceName);\n\n  if (error || !dataSource || !dataSource?.components?.QueryEditor || !dsi) {\n    const errorMessage = error?.message || 'Data source plugin does not export any Query Editor component';\n    return <div>Could not load query editor due to: {errorMessage}</div>;\n  }\n\n  const previewLoaded = alertPreview?.data.state === LoadingState.Done;\n\n  const QueryEditor = dataSource?.components?.QueryEditor;\n\n  // The Preview endpoint returns the preview as a single-element array of data frames\n  const previewDataFrame = alertPreview?.data?.series?.find((s) => s.name === 'evaluation results');\n  // The preview API returns arrays with empty elements when there are no firing alerts\n  const previewHasAlerts = previewDataFrame && previewDataFrame.fields.some((field) => field.values.length > 0);\n\n  return (\n    <>\n      <DataSourcePluginContextProvider instanceSettings={dsi}>\n        <QueryEditor\n          query={dataQuery}\n          queries={[dataQuery]}\n          app={CoreApp.CloudAlerting}\n          onChange={onChangeQuery}\n          onRunQuery={noop}\n          datasource={dataSource}\n        />\n      </DataSourcePluginContextProvider>\n      {showPreviewAlertsButton && (\n        <div className={styles.preview}>\n          <Button\n            type=\"button\"\n            onClick={onRunQueriesClick}\n            disabled={alertPreview?.data.state === LoadingState.Loading}\n          >\n            <Trans i18nKey=\"alerting.expression-editor.preview-alerts\">Preview alerts</Trans>\n          </Button>\n          {previewLoaded && !previewHasAlerts && (\n            <Alert\n              title={t('alerting.expression-editor.title-alerts-preview', 'Alerts preview')}\n              severity=\"info\"\n              className={styles.previewAlert}\n            >\n              <Trans i18nKey=\"alerting.expression-editor.there-firing-alerts-query\">\n                There are no firing alerts for your query.\n              </Trans>\n            </Alert>\n          )}\n          {previewHasAlerts && <CloudAlertPreview preview={previewDataFrame} />}\n        </div>\n      )}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  preview: css({\n    padding: theme.spacing(2, 0),\n    maxWidth: `${theme.breakpoints.values.xl}px`,\n  }),\n  previewAlert: css({\n    margin: theme.spacing(1, 0),\n  }),\n});\n\ntype QueryMappers<T extends DataQuery = DataQuery> = {\n  mapToValue: (query: T) => string;\n  mapToQuery: (existing: T, value: string | undefined) => T;\n};\n\nexport function useQueryMappers(dataSourceName: string): QueryMappers {\n  return useMemo(() => {\n    const settings = getDataSourceSrv().getInstanceSettings(dataSourceName);\n    if (!settings) {\n      throw new Error(`Datasource ${dataSourceName} not found`);\n    }\n\n    if (!isSupportedExternalRulesSourceType(settings.type)) {\n      throw new Error(`${settings.type} is not supported as an expression editor`);\n    }\n\n    return {\n      mapToValue: (query: DataQuery) => (query as PromQuery | LokiQuery).expr,\n      mapToQuery: (existing: DataQuery, value: string | undefined) => ({ ...existing, expr: value }),\n    };\n  }, [dataSourceName]);\n}\n","import { css } from '@emotion/css';\nimport { useMemo } from 'react';\n\nimport { GrafanaTheme2, PanelData } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { ExpressionQuery, ExpressionQueryType } from 'app/features/expressions/types';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { Expression } from '../expressions/Expression';\n\nimport { errorFromCurrentCondition, errorFromPreviewData, warningFromSeries } from './util';\n\ninterface Props {\n  condition: string | null;\n  onSetCondition: (refId: string) => void;\n  panelData: Record<string, PanelData | undefined>;\n  queries: AlertQuery[];\n  onRemoveExpression: (refId: string) => void;\n  onUpdateRefId: (oldRefId: string, newRefId: string) => void;\n  onUpdateExpressionType: (refId: string, type: ExpressionQueryType) => void;\n  onUpdateQueryExpression: (query: ExpressionQuery) => void;\n}\n\nexport const ExpressionsEditor = ({\n  condition,\n  onSetCondition,\n  queries,\n  panelData,\n  onUpdateRefId,\n  onRemoveExpression,\n  onUpdateExpressionType,\n  onUpdateQueryExpression,\n}: Props) => {\n  const expressionQueries = useMemo(() => {\n    return queries.reduce((acc: ExpressionQuery[], query) => {\n      return isExpressionQuery(query.model) ? acc.concat(query.model) : acc;\n    }, []);\n  }, [queries]);\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.wrapper}>\n      {expressionQueries.map((query) => {\n        const data = panelData[query.refId];\n\n        const isAlertCondition = condition === query.refId;\n\n        const errorFromCondition = data && isAlertCondition ? errorFromCurrentCondition(data) : undefined;\n        const errorFromPreview = data ? errorFromPreviewData(data) : undefined;\n        const error = errorFromPreview || errorFromCondition;\n\n        const warning = data ? warningFromSeries(data.series) : undefined;\n\n        return (\n          <Expression\n            key={query.refId}\n            isAlertCondition={isAlertCondition}\n            data={data}\n            error={error}\n            warning={warning}\n            queries={queries}\n            query={query}\n            onSetCondition={onSetCondition}\n            onRemoveExpression={onRemoveExpression}\n            onUpdateRefId={onUpdateRefId}\n            onUpdateExpressionType={onUpdateExpressionType}\n            onChangeQuery={onUpdateQueryExpression}\n          />\n        );\n      })}\n    </div>\n  );\n};\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    display: 'flex',\n    gap: theme.spacing(2),\n    alignContent: 'stretch',\n    flexWrap: 'wrap',\n  }),\n});\n","import { css } from '@emotion/css';\nimport { useState } from 'react';\n\nimport { GrafanaTheme2, RelativeTimeRange, dateTime, getDefaultRelativeTimeRange, rangeUtil } from '@grafana/data';\nimport { Icon, InlineField, RelativeTimeRangePicker, Toggletip, clearButtonStyles, useStyles2 } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { AlertQueryOptions, MaxDataPointsOption, MinIntervalOption } from './QueryWrapper';\n\nexport interface QueryOptionsProps {\n  query: AlertQuery;\n  queryOptions: AlertQueryOptions;\n  onChangeTimeRange?: (timeRange: RelativeTimeRange, index: number) => void;\n  onChangeQueryOptions: (options: AlertQueryOptions, index: number) => void;\n  index: number;\n}\n\nexport const QueryOptions = ({\n  query,\n  queryOptions,\n  onChangeTimeRange,\n  onChangeQueryOptions,\n  index,\n}: QueryOptionsProps) => {\n  const styles = useStyles2(getStyles);\n\n  const [showOptions, setShowOptions] = useState(false);\n\n  const timeRange = query.relativeTimeRange ? rangeUtil.relativeToTimeRange(query.relativeTimeRange) : undefined;\n\n  return (\n    <>\n      <Toggletip\n        content={\n          <div className={styles.queryOptions}>\n            {onChangeTimeRange && (\n              <InlineField label={t('alerting.query-options.label-time-range', 'Time Range')}>\n                <RelativeTimeRangePicker\n                  timeRange={query.relativeTimeRange ?? getDefaultRelativeTimeRange()}\n                  onChange={(range) => onChangeTimeRange(range, index)}\n                />\n              </InlineField>\n            )}\n            <MaxDataPointsOption options={queryOptions} onChange={(options) => onChangeQueryOptions(options, index)} />\n            <MinIntervalOption options={queryOptions} onChange={(options) => onChangeQueryOptions(options, index)} />\n          </div>\n        }\n        closeButton={true}\n        placement=\"bottom-start\"\n      >\n        <button type=\"button\" className={styles.actionLink} onClick={() => setShowOptions(!showOptions)}>\n          Options {showOptions ? <Icon name=\"angle-right\" /> : <Icon name=\"angle-down\" />}\n        </button>\n      </Toggletip>\n\n      <div className={styles.staticValues}>\n        <span>{dateTime(timeRange?.from).locale('en').fromNow(true)}</span>\n        {queryOptions.maxDataPoints && <span>, MD = {queryOptions.maxDataPoints}</span>}\n        {queryOptions.minInterval && <span>, Min. Interval = {queryOptions.minInterval}</span>}\n      </div>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const clearButton = clearButtonStyles(theme);\n\n  return {\n    queryOptions: css({\n      '> div': {\n        justifyContent: 'space-between',\n      },\n    }),\n\n    staticValues: css({\n      color: theme.colors.text.secondary,\n      marginRight: theme.spacing(1),\n    }),\n\n    actionLink: css(clearButton, {\n      color: theme.colors.text.link,\n      cursor: 'pointer',\n\n      '&:hover': {\n        textDecoration: 'underline',\n      },\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport { cloneDeep } from 'lodash';\nimport * as React from 'react';\nimport { ChangeEvent, useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\n\nimport {\n  CoreApp,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  GrafanaTheme2,\n  LoadingState,\n  PanelData,\n  RelativeTimeRange,\n  ThresholdsConfig,\n  getDefaultRelativeTimeRange,\n  rangeUtil,\n} from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { DataQuery } from '@grafana/schema';\nimport { GraphThresholdsStyleMode, Icon, InlineField, Input, Stack, Tooltip, useStyles2 } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\nimport { logInfo } from 'app/features/alerting/unified/Analytics';\nimport { QueryEditorRow } from 'app/features/query/components/QueryEditorRow';\nimport { AlertDataQuery, AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { RuleFormValues } from '../../types/rule-form';\nimport { msToSingleUnitDuration } from '../../utils/time';\nimport { ExpressionStatusIndicator } from '../expressions/ExpressionStatusIndicator';\n\nimport { QueryOptions } from './QueryOptions';\nimport { VizWrapper } from './VizWrapper';\n\nexport const DEFAULT_MAX_DATA_POINTS = 43200;\nexport const DEFAULT_MIN_INTERVAL = '1s';\n\nexport interface AlertQueryOptions {\n  maxDataPoints?: number | undefined;\n  minInterval?: string | undefined;\n}\n\ninterface Props {\n  data: PanelData;\n  error?: Error;\n  query: AlertQuery;\n  queries: AlertQuery[];\n  dsSettings: DataSourceInstanceSettings;\n  onChangeDataSource: (settings: DataSourceInstanceSettings, index: number) => void;\n  onChangeQuery: (query: DataQuery, index: number) => void;\n  onChangeTimeRange?: (timeRange: RelativeTimeRange, index: number) => void;\n  onRemoveQuery: (query: DataQuery) => void;\n  onDuplicateQuery: (query: AlertQuery) => void;\n  onRunQueries: () => void;\n  index: number;\n  thresholds: ThresholdsConfig;\n  thresholdsType?: GraphThresholdsStyleMode;\n  onChangeThreshold?: (thresholds: ThresholdsConfig, index: number) => void;\n  condition: string | null;\n  onSetCondition: (refId: string) => void;\n  onChangeQueryOptions: (options: AlertQueryOptions, index: number) => void;\n}\n\nexport const QueryWrapper = ({\n  data,\n  error,\n  dsSettings,\n  index,\n  onChangeDataSource,\n  onChangeQuery,\n  onChangeTimeRange,\n  onRunQueries,\n  onRemoveQuery,\n  onDuplicateQuery,\n  query,\n  queries,\n  thresholds,\n  thresholdsType,\n  onChangeThreshold,\n  condition,\n  onSetCondition,\n  onChangeQueryOptions,\n}: Props) => {\n  const styles = useStyles2(getStyles);\n  const [dsInstance, setDsInstance] = useState<DataSourceApi>();\n  const defaults = dsInstance?.getDefaultQuery ? dsInstance.getDefaultQuery(CoreApp.UnifiedAlerting) : {};\n\n  const { getValues } = useFormContext<RuleFormValues>();\n  const isSwitchModeEnabled = config.featureToggles.alertingQueryAndExpressionsStepMode ?? false;\n  const isAdvancedMode = isSwitchModeEnabled ? getValues('editorSettings.simplifiedQueryEditor') !== true : true;\n\n  const queryWithDefaults = {\n    ...defaults,\n    ...cloneDeep(query.model),\n  };\n\n  if (queryWithDefaults.datasource && queryWithDefaults.datasource?.uid !== query.datasourceUid) {\n    logInfo('rule query datasource and datasourceUid mismatch', {\n      queryModelDatasourceUid: queryWithDefaults.datasource?.uid || '',\n      queryDatasourceUid: query.datasourceUid,\n      datasourceType: query.model.datasource?.type || 'unknown type',\n    });\n    // There are occasions when the rule query model datasource UID and the datasourceUid do not match\n    // It's unclear as to why this happens, but we need better visibility on why this happens,\n    // so we log when it does, and make the query model datasource UID match the datasource UID\n    // We already elsewhere work under the assumption that the datasource settings are fetched from the datasourceUid property\n\n    // This check is necessary for some few cases where the datasource might be an string instead of an object\n    // see: https://github.com/grafana/grafana/issues/96040 for more context\n    if (typeof queryWithDefaults.datasource === 'object' && Boolean(queryWithDefaults.datasource)) {\n      queryWithDefaults.datasource.uid = query.datasourceUid;\n    } else {\n      // if the datasource is a string, we need to convert it to an object, and populate the fields from the query model\n      queryWithDefaults.datasource = {};\n      queryWithDefaults.datasource.uid = query.datasourceUid;\n      queryWithDefaults.datasource.type = query.model.datasource?.type;\n      queryWithDefaults.datasource.apiVersion = query.model.datasource?.apiVersion;\n    }\n  }\n\n  function SelectingDataSourceTooltip() {\n    const styles = useStyles2(getStyles);\n    return (\n      <div className={styles.dsTooltip}>\n        <Tooltip\n          content={\n            <>\n              Not finding the data source you want? Some data sources are not supported for alerting. Click on the icon\n              for more information.\n            </>\n          }\n        >\n          <Icon\n            name=\"info-circle\"\n            onClick={() =>\n              window.open(\n                ' https://grafana.com/docs/grafana/latest/alerting/fundamentals/data-source-alerting/',\n                '_blank'\n              )\n            }\n          />\n        </Tooltip>\n      </div>\n    );\n  }\n\n  // TODO add a warning label here too when the data looks like time series data and is used as an alert condition\n  function HeaderExtras({\n    query,\n    error,\n    index,\n    isAdvancedMode = true,\n  }: {\n    query: AlertQuery<AlertDataQuery>;\n    error?: Error;\n    index: number;\n    isAdvancedMode?: boolean;\n  }) {\n    const queryOptions: AlertQueryOptions = {\n      maxDataPoints: query.model.maxDataPoints,\n      minInterval: query.model.intervalMs ? msToSingleUnitDuration(query.model.intervalMs) : undefined,\n    };\n    const alertQueryOptions: AlertQueryOptions = {\n      maxDataPoints: queryOptions.maxDataPoints,\n      minInterval: queryOptions.minInterval,\n    };\n\n    const isAlertCondition = condition === query.refId;\n\n    return (\n      <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n        <SelectingDataSourceTooltip />\n        <QueryOptions\n          onChangeTimeRange={onChangeTimeRange}\n          query={query}\n          queryOptions={alertQueryOptions}\n          onChangeQueryOptions={onChangeQueryOptions}\n          index={index}\n        />\n        {isAdvancedMode && (\n          <ExpressionStatusIndicator\n            onSetCondition={() => onSetCondition(query.refId)}\n            isCondition={isAlertCondition}\n          />\n        )}\n      </Stack>\n    );\n  }\n\n  const showVizualisation = data.state !== LoadingState.NotStarted;\n  // ⚠️ the query editors want the entire array of queries passed as \"DataQuery\" NOT \"AlertQuery\"\n  // TypeScript isn't complaining here because the interfaces just happen to be compatible\n  const editorQueries = cloneDeep(queries.map((query) => query.model));\n  const range = rangeUtil.relativeToTimeRange(query.relativeTimeRange ?? getDefaultRelativeTimeRange());\n\n  return (\n    <Stack direction=\"column\" gap={0.5}>\n      <div className={styles.wrapper}>\n        <QueryEditorRow<AlertDataQuery>\n          hideRefId={!isAdvancedMode}\n          hideActionButtons={!isAdvancedMode}\n          collapsable={false}\n          dataSource={dsSettings}\n          onDataSourceLoaded={setDsInstance}\n          onChangeDataSource={(settings) => onChangeDataSource(settings, index)}\n          id={query.refId}\n          index={index}\n          key={query.refId}\n          data={data}\n          query={queryWithDefaults}\n          onChange={(query) => onChangeQuery(query, index)}\n          onRemoveQuery={onRemoveQuery}\n          onAddQuery={() => onDuplicateQuery(cloneDeep(query))}\n          onRunQuery={onRunQueries}\n          queries={editorQueries}\n          range={range}\n          renderHeaderExtras={() => (\n            <HeaderExtras query={query} index={index} error={error} isAdvancedMode={isAdvancedMode} />\n          )}\n          app={CoreApp.UnifiedAlerting}\n          hideHideQueryButton={true}\n        />\n      </div>\n      {showVizualisation && <VizWrapper data={data} thresholds={thresholds} thresholdsType={thresholdsType} />}\n    </Stack>\n  );\n};\n\nexport const EmptyQueryWrapper = ({ children }: React.PropsWithChildren<{}>) => {\n  const styles = useStyles2(getStyles);\n  return <div className={styles.wrapper}>{children}</div>;\n};\n\nexport function MaxDataPointsOption({\n  options,\n  onChange,\n}: {\n  options: AlertQueryOptions;\n  onChange: (options: AlertQueryOptions) => void;\n}) {\n  const value = options.maxDataPoints ?? '';\n\n  const onMaxDataPointsBlur = (event: ChangeEvent<HTMLInputElement>) => {\n    const maxDataPointsNumber = parseInt(event.target.value, 10);\n\n    const maxDataPoints = isNaN(maxDataPointsNumber) || maxDataPointsNumber === 0 ? undefined : maxDataPointsNumber;\n\n    if (maxDataPoints !== options.maxDataPoints) {\n      onChange({\n        ...options,\n        maxDataPoints,\n      });\n    }\n  };\n\n  return (\n    <InlineField\n      labelWidth={24}\n      label={t('alerting.max-data-points-option.label-max-data-points', 'Max data points')}\n      tooltip=\"The maximum data points per series. Used directly by some data sources and used in calculation of auto interval. With streaming data this value is used for the rolling buffer.\"\n    >\n      <Input\n        type=\"number\"\n        width={10}\n        placeholder={DEFAULT_MAX_DATA_POINTS.toString()}\n        spellCheck={false}\n        onBlur={onMaxDataPointsBlur}\n        defaultValue={value}\n      />\n    </InlineField>\n  );\n}\n\nexport function MinIntervalOption({\n  options,\n  onChange,\n}: {\n  options: AlertQueryOptions;\n  onChange: (options: AlertQueryOptions) => void;\n}) {\n  const value = options.minInterval ?? '';\n\n  const onMinIntervalBlur = (event: ChangeEvent<HTMLInputElement>) => {\n    const minInterval = event.target.value;\n    if (minInterval !== value) {\n      onChange({\n        ...options,\n        minInterval,\n      });\n    }\n  };\n\n  return (\n    <InlineField\n      label={t('alerting.min-interval-option.label-interval', 'Interval')}\n      labelWidth={24}\n      tooltip={\n        <>\n          Interval sent to the data source. Recommended to be set to write frequency, for example <code>1m</code> if\n          your data is written every minute.\n        </>\n      }\n    >\n      <Input\n        type=\"text\"\n        width={10}\n        placeholder={DEFAULT_MIN_INTERVAL}\n        spellCheck={false}\n        onBlur={onMinIntervalBlur}\n        defaultValue={value}\n      />\n    </InlineField>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    label: 'AlertingQueryWrapper',\n    marginBottom: theme.spacing(1),\n    border: `1px solid ${theme.colors.border.weak}`,\n    borderRadius: theme.shape.radius.default,\n\n    button: {\n      overflow: 'visible',\n    },\n  }),\n  dsTooltip: css({\n    display: 'flex',\n    alignItems: 'center',\n    '&:hover': {\n      opacity: 0.85,\n      cursor: 'pointer',\n    },\n  }),\n});\n","import { DragDropContext, DropResult, Droppable } from '@hello-pangea/dnd';\nimport { omit } from 'lodash';\nimport { PureComponent, useState } from 'react';\n\nimport {\n  DataSourceInstanceSettings,\n  LoadingState,\n  PanelData,\n  RelativeTimeRange,\n  getDataSourceRef,\n  rangeUtil,\n} from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { DataQuery } from '@grafana/schema';\nimport { Button, Card, Icon, Stack } from '@grafana/ui';\nimport { QueryOperationRow } from 'app/core/components/QueryOperationRow/QueryOperationRow';\nimport { Trans } from 'app/core/internationalization';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { AlertDataQuery, AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { getInstantFromDataQuery } from '../../utils/rule-form';\n\nimport { AlertQueryOptions, EmptyQueryWrapper, QueryWrapper } from './QueryWrapper';\nimport { errorFromCurrentCondition, errorFromPreviewData, getThresholdsForQueries } from './util';\n\ninterface Props {\n  // The query configuration\n  queries: AlertQuery[];\n  expressions: AlertQuery[];\n  data: Record<string, PanelData>;\n  onRunQueries: () => void;\n\n  // Query editing\n  onQueriesChange: (queries: AlertQuery[]) => void;\n  onDuplicateQuery: (query: AlertQuery) => void;\n  condition: string | null;\n  onSetCondition: (refId: string) => void;\n}\n\nexport class QueryRows extends PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  onRemoveQuery = (query: DataQuery) => {\n    const { queries, onQueriesChange } = this.props;\n    onQueriesChange(queries.filter((q) => q.refId !== query.refId));\n  };\n\n  onChangeTimeRange = (timeRange: RelativeTimeRange, index: number) => {\n    const { queries, onQueriesChange } = this.props;\n    onQueriesChange(\n      queries.map((item, itemIndex) => {\n        if (itemIndex !== index) {\n          return item;\n        }\n        return {\n          ...item,\n          relativeTimeRange: timeRange,\n        };\n      })\n    );\n  };\n\n  onChangeQueryOptions = (options: AlertQueryOptions, index: number) => {\n    const { queries, onQueriesChange } = this.props;\n    onQueriesChange(\n      queries.map((item, itemIndex) => {\n        if (itemIndex !== index) {\n          return item;\n        }\n        return {\n          ...item,\n          model: {\n            ...item.model,\n            maxDataPoints: options.maxDataPoints,\n            intervalMs: options.minInterval ? rangeUtil.intervalToMs(options.minInterval) : undefined,\n          },\n        };\n      })\n    );\n  };\n\n  onChangeDataSource = (settings: DataSourceInstanceSettings, index: number) => {\n    const { queries, onQueriesChange } = this.props;\n\n    const updatedQueries = queries.map((item, itemIndex) => {\n      if (itemIndex !== index) {\n        return item;\n      }\n\n      const previousSettings = this.getDataSourceSettings(item);\n\n      // Copy model if changing to a datasource of same type.\n      if (settings.type === previousSettings?.type) {\n        return copyModel(item, settings);\n      }\n      return newModel(item, settings);\n    });\n\n    onQueriesChange(updatedQueries);\n  };\n\n  onChangeQuery = (query: DataQuery, index: number) => {\n    const { queries, onQueriesChange } = this.props;\n\n    onQueriesChange(\n      queries.map((item, itemIndex) => {\n        if (itemIndex !== index) {\n          return item;\n        }\n\n        return {\n          ...item,\n          refId: query.refId,\n          queryType: item.model.queryType ?? '',\n          model: {\n            ...item.model,\n            ...query,\n            datasource: query.datasource!,\n          },\n        };\n      })\n    );\n  };\n\n  onDragEnd = (result: DropResult) => {\n    const { queries, onQueriesChange } = this.props;\n\n    if (!result || !result.destination) {\n      return;\n    }\n\n    const startIndex = result.source.index;\n    const endIndex = result.destination.index;\n    if (startIndex === endIndex) {\n      return;\n    }\n\n    const update = Array.from(queries);\n    const [removed] = update.splice(startIndex, 1);\n    update.splice(endIndex, 0, removed);\n    onQueriesChange(update);\n  };\n\n  getDataSourceSettings = (query: AlertQuery): DataSourceInstanceSettings | undefined => {\n    return getDataSourceSrv().getInstanceSettings(query.datasourceUid);\n  };\n\n  render() {\n    const { queries, expressions, condition } = this.props;\n    const thresholdByRefId = getThresholdsForQueries([...queries, ...expressions], condition);\n\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <Droppable droppableId=\"alerting-queries\" direction=\"vertical\">\n          {(provided) => {\n            return (\n              <div ref={provided.innerRef} {...provided.droppableProps}>\n                <Stack direction=\"column\">\n                  {queries.map((query, index) => {\n                    const isCondition = this.props.condition === query.refId;\n                    const data: PanelData = this.props.data?.[query.refId] ?? {\n                      series: [],\n                      state: LoadingState.NotStarted,\n                    };\n                    const dsSettings = this.getDataSourceSettings(query);\n                    let error: Error | undefined = undefined;\n                    if (data && isCondition) {\n                      error = errorFromCurrentCondition(data);\n                    } else if (data) {\n                      error = errorFromPreviewData(data);\n                    }\n\n                    if (!dsSettings) {\n                      return (\n                        <DatasourceNotFound\n                          key={`${query.refId}-${index}`}\n                          index={index}\n                          model={query.model}\n                          onUpdateDatasource={() => {\n                            const defaultDataSource = getDatasourceSrv().getInstanceSettings(null);\n                            if (defaultDataSource) {\n                              this.onChangeDataSource(defaultDataSource, index);\n                            }\n                          }}\n                          onRemoveQuery={() => {\n                            this.onRemoveQuery(query);\n                          }}\n                        />\n                      );\n                    }\n\n                    return (\n                      <QueryWrapper\n                        index={index}\n                        key={query.refId}\n                        dsSettings={dsSettings}\n                        data={data}\n                        error={error}\n                        query={query}\n                        onChangeQuery={this.onChangeQuery}\n                        onRemoveQuery={this.onRemoveQuery}\n                        queries={[...queries, ...expressions]}\n                        onChangeDataSource={this.onChangeDataSource}\n                        onDuplicateQuery={this.props.onDuplicateQuery}\n                        onChangeTimeRange={this.onChangeTimeRange}\n                        onChangeQueryOptions={this.onChangeQueryOptions}\n                        thresholds={thresholdByRefId[query.refId]?.config}\n                        thresholdsType={thresholdByRefId[query.refId]?.mode}\n                        onRunQueries={this.props.onRunQueries}\n                        condition={this.props.condition}\n                        onSetCondition={this.props.onSetCondition}\n                      />\n                    );\n                  })}\n                  {provided.placeholder}\n                </Stack>\n              </div>\n            );\n          }}\n        </Droppable>\n      </DragDropContext>\n    );\n  }\n}\n\nfunction copyModel(item: AlertQuery, settings: DataSourceInstanceSettings): Omit<AlertQuery, 'datasource'> {\n  return {\n    ...item,\n    model: {\n      ...omit(item.model, 'datasource'),\n      datasource: getDataSourceRef(settings),\n    },\n    datasourceUid: settings.uid,\n  };\n}\n\nfunction newModel(item: AlertQuery, settings: DataSourceInstanceSettings): Omit<AlertQuery, 'datasource'> {\n  const isExpression = isExpressionQuery(item);\n  const isInstant = isExpression ? false : getInstantFromDataQuery(item);\n\n  const newQuery: Omit<AlertQuery, 'datasource'> = {\n    refId: item.refId,\n    relativeTimeRange: item.relativeTimeRange,\n    queryType: '',\n    datasourceUid: settings.uid,\n    model: {\n      refId: item.refId,\n      hide: false,\n      datasource: getDataSourceRef(settings),\n    },\n  };\n\n  if (isInstant && !isExpressionQuery(item)) {\n    (newQuery as AlertQuery<AlertDataQuery>).model.instant = isInstant;\n  }\n\n  return newQuery;\n}\n\ninterface DatasourceNotFoundProps {\n  index: number;\n  model: AlertDataQuery;\n  onUpdateDatasource: () => void;\n  onRemoveQuery: () => void;\n}\n\nconst DatasourceNotFound = ({ index, onUpdateDatasource, onRemoveQuery, model }: DatasourceNotFoundProps) => {\n  const refId = model.refId;\n\n  const [showDetails, setShowDetails] = useState<boolean>(false);\n\n  const toggleDetails = () => {\n    setShowDetails((show) => !show);\n  };\n\n  const handleUpdateDatasource = () => {\n    onUpdateDatasource();\n  };\n\n  return (\n    <EmptyQueryWrapper>\n      <QueryOperationRow title={refId} draggable index={index} id={refId} isOpen collapsable={false}>\n        <Card>\n          <Card.Heading>\n            <Trans i18nKey=\"alerting.datasource-not-found.this-datasource-has-been-removed\">\n              This datasource has been removed\n            </Trans>\n          </Card.Heading>\n          <Card.Description>\n            The datasource for this query was not found, it was either removed or is not installed correctly.\n          </Card.Description>\n          <Card.Figure>\n            <Icon name=\"question-circle\" />\n          </Card.Figure>\n          <Card.Actions>\n            <Button key=\"update\" variant=\"secondary\" onClick={handleUpdateDatasource}>\n              <Trans i18nKey=\"alerting.datasource-not-found.update-datasource\">Update datasource</Trans>\n            </Button>\n            <Button key=\"remove\" variant=\"destructive\" onClick={onRemoveQuery}>\n              <Trans i18nKey=\"alerting.datasource-not-found.remove-query\">Remove query</Trans>\n            </Button>\n          </Card.Actions>\n          <Card.SecondaryActions>\n            <Button\n              key=\"details\"\n              onClick={toggleDetails}\n              icon={showDetails ? 'angle-up' : 'angle-down'}\n              fill=\"text\"\n              size=\"sm\"\n            >\n              <Trans i18nKey=\"alerting.datasource-not-found.show-details\">Show details</Trans>\n            </Button>\n          </Card.SecondaryActions>\n        </Card>\n        {showDetails && (\n          <div>\n            <pre>\n              <code>{JSON.stringify(model, null, 2)}</code>\n            </pre>\n          </div>\n        )}\n      </QueryOperationRow>\n    </EmptyQueryWrapper>\n  );\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2, PanelData } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { QueryRows } from './QueryRows';\n\ninterface Props {\n  panelData: Record<string, PanelData>;\n  queries: AlertQuery[];\n  expressions: AlertQuery[];\n  onRunQueries: () => void;\n  onChangeQueries: (queries: AlertQuery[]) => void;\n  onDuplicateQuery: (query: AlertQuery) => void;\n  condition: string | null;\n  onSetCondition: (refId: string) => void;\n}\n\nexport const QueryEditor = ({\n  queries,\n  expressions,\n  panelData,\n  onRunQueries,\n  onChangeQueries,\n  onDuplicateQuery,\n  condition,\n  onSetCondition,\n}: Props) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <QueryRows\n        data={panelData}\n        queries={queries}\n        expressions={expressions}\n        onRunQueries={onRunQueries}\n        onQueriesChange={onChangeQueries}\n        onDuplicateQuery={onDuplicateQuery}\n        condition={condition}\n        onSetCondition={onSetCondition}\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    backgroundColor: theme.colors.background.primary,\n    height: '100%',\n  }),\n});\n","import { css } from '@emotion/css';\nimport { FC, useCallback, useEffect, useState } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { CoreApp, GrafanaTheme2, LoadingState, PanelData } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { DataQuery } from '@grafana/schema';\nimport { useStyles2 } from '@grafana/ui';\nimport { DataSourceType } from 'app/features/alerting/unified/utils/datasource';\nimport { getTimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { QueryErrorAlert } from 'app/features/query/components/QueryErrorAlert';\nimport { LokiQueryType } from 'app/plugins/datasource/loki/dataquery.gen';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { isPromOrLokiQuery } from '../../utils/rule-form';\n\nimport { VizWrapper } from './VizWrapper';\n\nexport interface RecordingRuleEditorProps {\n  queries: AlertQuery[];\n  onChangeQuery: (updatedQueries: AlertQuery[]) => void;\n  runQueries: () => void;\n  panelData: Record<string, PanelData>;\n  dataSourceName: string;\n}\n\nexport const RecordingRuleEditor: FC<RecordingRuleEditorProps> = ({\n  queries,\n  onChangeQuery,\n  runQueries,\n  panelData,\n  dataSourceName,\n}) => {\n  const [data, setData] = useState<PanelData>({\n    series: [],\n    state: LoadingState.NotStarted,\n    timeRange: getTimeSrv().timeRange(),\n  });\n\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    setData(panelData?.[queries[0]?.refId]);\n  }, [panelData, queries]);\n\n  const {\n    error,\n    loading,\n    value: dataSource,\n  } = useAsync(() => {\n    return getDataSourceSrv().get(dataSourceName);\n  }, [dataSourceName]);\n\n  const handleChangedQuery = useCallback(\n    (changedQuery: DataQuery) => {\n      if (!isPromOrLokiQuery(changedQuery) || !dataSource) {\n        return;\n      }\n\n      const [query] = queries;\n      const { uid: dataSourceId, type } = dataSource;\n      const isLoki = type === DataSourceType.Loki;\n      const expr = changedQuery.expr;\n\n      const merged = {\n        ...query,\n        ...changedQuery,\n        datasourceUid: dataSourceId,\n        expr,\n        model: {\n          expr,\n          datasource: changedQuery.datasource,\n          refId: changedQuery.refId,\n          editorMode: changedQuery.editorMode,\n          // Instant and range are used by Prometheus queries\n          instant: changedQuery.instant,\n          range: changedQuery.range,\n          // Query type is used by Loki queries\n          // On first render/when creating a recording rule, the query type is not set\n          // unless the user has changed it betwee range/instant. The cleanest way to handle this\n          // is to default to instant, or whatever the changed type is\n          queryType: isLoki ? changedQuery.queryType || LokiQueryType.Instant : changedQuery.queryType,\n          legendFormat: changedQuery.legendFormat,\n        },\n      };\n      onChangeQuery([merged]);\n    },\n    [dataSource, queries, onChangeQuery]\n  );\n\n  if (loading || dataSource?.name !== dataSourceName) {\n    return null;\n  }\n\n  const dsi = getDataSourceSrv().getInstanceSettings(dataSourceName);\n\n  if (error || !dataSource || !dataSource?.components?.QueryEditor || !dsi) {\n    const errorMessage = error?.message || 'Data source plugin does not export any Query Editor component';\n    return <div>Could not load query editor due to: {errorMessage}</div>;\n  }\n\n  const QueryEditor = dataSource.components.QueryEditor;\n\n  return (\n    <>\n      {queries.length && (\n        <>\n          <QueryEditor\n            query={queries[0]}\n            queries={queries}\n            app={CoreApp.UnifiedAlerting}\n            onChange={handleChangedQuery}\n            onRunQuery={runQueries}\n            datasource={dataSource}\n          />\n          {(data?.errors || []).map((err) => {\n            return <QueryErrorAlert key={err.message} error={err} />;\n          })}\n        </>\n      )}\n\n      {data && (\n        <div className={styles.vizWrapper}>\n          <VizWrapper data={data} />\n        </div>\n      )}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  vizWrapper: css({\n    margin: theme.spacing(1, 0),\n  }),\n});\n","import { css } from '@emotion/css';\nimport { Controller, useFormContext } from 'react-hook-form';\n\nimport { DataSourceInstanceSettings, GrafanaTheme2 } from '@grafana/data';\nimport { Field, useStyles2 } from '@grafana/ui';\n\nimport { RuleFormType, RuleFormValues } from '../../../types/rule-form';\nimport { CloudRulesSourcePicker } from '../CloudRulesSourcePicker';\n\nexport interface CloudDataSourceSelectorProps {\n  disabled?: boolean;\n  onChangeCloudDatasource: (datasourceUid: string) => void;\n}\nexport const CloudDataSourceSelector = ({ disabled, onChangeCloudDatasource }: CloudDataSourceSelectorProps) => {\n  const {\n    control,\n    formState: { errors },\n    setValue,\n    watch,\n  } = useFormContext<RuleFormValues>();\n\n  const styles = useStyles2(getStyles);\n  const ruleFormType = watch('type');\n\n  return (\n    <div className={styles.flexRow}>\n      {(ruleFormType === RuleFormType.cloudAlerting || ruleFormType === RuleFormType.cloudRecording) && (\n        <Field\n          className={styles.formInput}\n          label={disabled ? 'Data source' : 'Select data source'}\n          error={errors.dataSourceName?.message}\n          invalid={!!errors.dataSourceName?.message}\n        >\n          <Controller\n            render={({ field: { onChange, ref, ...field } }) => (\n              <CloudRulesSourcePicker\n                {...field}\n                disabled={disabled}\n                onChange={(ds: DataSourceInstanceSettings) => {\n                  // reset expression as they don't need to persist after changing datasources\n                  setValue('expression', '');\n                  onChange(ds?.name ?? null);\n                  onChangeCloudDatasource(ds?.uid ?? null);\n                }}\n              />\n            )}\n            name=\"dataSourceName\"\n            control={control}\n            rules={{\n              required: { value: true, message: 'Please select a data source' },\n            }}\n          />\n        </Field>\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  formInput: css({\n    width: '330px',\n    '& + &': {\n      marginLeft: theme.spacing(3),\n    },\n  }),\n  flexRow: css({\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    alignItems: 'flex-end',\n  }),\n});\n","import { createAction, createReducer, original } from '@reduxjs/toolkit';\n\nimport {\n  ReducerID,\n  RelativeTimeRange,\n  getDataSourceRef,\n  getDefaultRelativeTimeRange,\n  getNextRefId,\n  rangeUtil,\n} from '@grafana/data';\nimport { DataQuery } from '@grafana/schema';\nimport { dataSource as expressionDatasource } from 'app/features/expressions/ExpressionDatasource';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { ExpressionDatasourceUID, ExpressionQuery, ExpressionQueryType } from 'app/features/expressions/types';\nimport {\n  defaultCondition,\n  isReducerExpression,\n  isThresholdExpression,\n} from 'app/features/expressions/utils/expressionTypes';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { logError } from '../../../Analytics';\nimport { getDefaultOrFirstCompatibleDataSource } from '../../../utils/datasource';\nimport { getDefaultQueries, getInstantFromDataQuery } from '../../../utils/rule-form';\nimport { createDagFromQueries, getOriginOfRefId } from '../dag';\nimport { queriesWithUpdatedReferences, refIdExists } from '../util';\n\n// this one will be used as the refID when we create a new reducer for the threshold expression\nexport const NEW_REDUCER_REF = 'reducer';\n\nexport interface QueriesAndExpressionsState {\n  queries: AlertQuery[];\n}\n\nconst findDataSourceFromExpression = (queries: AlertQuery[], refId: string): AlertQuery | undefined => {\n  const dag = createDagFromQueries(queries);\n  const dataSource = getOriginOfRefId(refId, dag)[0];\n  if (!dataSource) {\n    return;\n  }\n\n  const originQuery = queries.find((query) => query.refId === dataSource);\n  if (originQuery && 'relativeTimeRange' in originQuery) {\n    return originQuery;\n  }\n\n  return;\n};\n\nconst initialState: QueriesAndExpressionsState = {\n  queries: [],\n};\n\nexport const duplicateQuery = createAction<AlertQuery>('duplicateQuery');\nexport const addNewDataQuery = createAction('addNewDataQuery');\nexport const setDataQueries = createAction<AlertQuery[]>('setDataQueries');\n\nexport const addNewExpression = createAction<ExpressionQueryType>('addNewExpression');\nexport const removeExpression = createAction<string>('removeExpression');\nexport const removeExpressions = createAction('removeExpressions');\nexport const addExpressions = createAction<AlertQuery[]>('addExpressions');\nexport const updateExpression = createAction<ExpressionQuery>('updateExpression');\nexport const updateExpressionRefId = createAction<{ oldRefId: string; newRefId: string }>('updateExpressionRefId');\nexport const rewireExpressions = createAction<{ oldRefId: string; newRefId: string }>('rewireExpressions');\nexport const updateExpressionType = createAction<{ refId: string; type: ExpressionQueryType }>('updateExpressionType');\nexport const updateExpressionTimeRange = createAction('updateExpressionTimeRange');\nexport const updateMaxDataPoints = createAction<{ refId: string; maxDataPoints: number }>('updateMaxDataPoints');\nexport const updateMinInterval = createAction<{ refId: string; minInterval: string }>('updateMinInterval');\n\nexport const resetToSimpleCondition = createAction('resetToSimpleCondition');\nexport const optimizeReduceExpression = createAction<{\n  updatedQueries: AlertQuery[];\n  expressionQueries: Array<AlertQuery<ExpressionQuery>>;\n}>('optimizeReduceExpression');\nexport const setRecordingRulesQueries = createAction<{ recordingRuleQueries: AlertQuery[]; expression: string }>(\n  'setRecordingRulesQueries'\n);\n\nexport const queriesAndExpressionsReducer = createReducer(initialState, (builder) => {\n  // data queries actions\n  builder\n    // simple condition actions\n    .addCase(resetToSimpleCondition, (state) => {\n      state.queries = getDefaultQueries();\n    })\n    .addCase(duplicateQuery, (state, { payload }) => {\n      state.queries = addQuery(state.queries, payload);\n    })\n    .addCase(addNewDataQuery, (state) => {\n      const datasource = getDefaultOrFirstCompatibleDataSource();\n      if (!datasource) {\n        return;\n      }\n\n      state.queries = addQuery(state.queries, {\n        datasourceUid: datasource.uid,\n        model: {\n          refId: '',\n          datasource: getDataSourceRef(datasource),\n        },\n      });\n    })\n    .addCase(setDataQueries, (state, { payload }) => {\n      const expressionQueries = state.queries.filter((query) => isExpressionQuery(query.model));\n      state.queries = [...payload, ...expressionQueries];\n    })\n    .addCase(setRecordingRulesQueries, (state, { payload }) => {\n      const query = payload.recordingRuleQueries[0];\n      const recordingRuleQuery = {\n        ...query,\n        ...{ expr: payload.expression, model: query?.model },\n      };\n\n      state.queries = [recordingRuleQuery];\n    })\n    .addCase(updateMaxDataPoints, (state, action) => {\n      state.queries = state.queries.map((query) => {\n        return query.refId === action.payload.refId\n          ? {\n              ...query,\n              model: {\n                ...query.model,\n                maxDataPoints: action.payload.maxDataPoints,\n              },\n            }\n          : query;\n      });\n    })\n    .addCase(updateMinInterval, (state, action) => {\n      state.queries = state.queries.map((query) => {\n        return query.refId === action.payload.refId\n          ? {\n              ...query,\n              model: {\n                ...query.model,\n                intervalMs: action.payload.minInterval ? rangeUtil.intervalToMs(action.payload.minInterval) : undefined,\n              },\n            }\n          : query;\n      });\n    });\n\n  // expressions actions\n  builder\n    .addCase(addNewExpression, (state, { payload }) => {\n      state.queries = addQuery(state.queries, {\n        datasourceUid: ExpressionDatasourceUID,\n        model: expressionDatasource.newQuery({\n          type: payload,\n          conditions: [{ ...defaultCondition, query: { params: [] } }],\n          expression: '',\n        }),\n      });\n    })\n    .addCase(removeExpression, (state, { payload }) => {\n      state.queries = state.queries.filter((query) => query.refId !== payload);\n    })\n    .addCase(removeExpressions, (state) => {\n      state.queries = state.queries.filter((query) => !isExpressionQuery(query.model));\n    })\n    .addCase(addExpressions, (state, { payload }) => {\n      state.queries = [...state.queries, ...payload];\n    })\n    .addCase(updateExpression, (state, { payload }) => {\n      const queryToUpdate = state.queries.find((query) => query.refId === payload.refId);\n      if (!queryToUpdate) {\n        return;\n      }\n\n      queryToUpdate.model = payload;\n\n      // the resample expression needs to also know what the relative time range is to work with, this means we have to copy it from the source node (data source query)\n      if (payload.type === ExpressionQueryType.resample && payload.expression) {\n        // findDataSourceFromExpression uses memoization and it doesn't always work with proxies when the proxy has been revoked\n        const originalQueries = original(state)?.queries ?? [];\n\n        let relativeTimeRange = getDefaultRelativeTimeRange();\n        try {\n          const dataSourceAlertQuery = findDataSourceFromExpression(originalQueries, payload.expression);\n          if (dataSourceAlertQuery?.relativeTimeRange) {\n            relativeTimeRange = dataSourceAlertQuery.relativeTimeRange;\n          }\n        } catch (error) {\n          if (error instanceof Error) {\n            logError(error);\n          } else {\n            logError(new Error('Error while trying to find data source from expression'));\n          }\n        }\n\n        queryToUpdate.relativeTimeRange = relativeTimeRange;\n      }\n    })\n    .addCase(updateExpressionTimeRange, (state) => {\n      state.queries.forEach((query) => {\n        // Resample expression needs to get the relativeTimeRange with its dataSource relativeTimeRange\n        if (\n          isExpressionQuery(query.model) &&\n          query.model.type === ExpressionQueryType.resample &&\n          query.model.expression\n        ) {\n          // findDataSourceFromExpression uses memoization and doesn't work with proxies\n          const originalQueries = original(state)?.queries ?? [];\n\n          const dataSource = findDataSourceFromExpression(originalQueries, query.model.expression);\n          const relativeTimeRange = dataSource ? dataSource.relativeTimeRange : getDefaultRelativeTimeRange();\n          query.relativeTimeRange = relativeTimeRange;\n        }\n      });\n    })\n    .addCase(updateExpressionRefId, (state, { payload }) => {\n      const { newRefId, oldRefId } = payload;\n\n      // if the new refId already exists we just refuse to update the state\n      const newRefIdExists = refIdExists(state.queries, newRefId);\n      if (newRefIdExists) {\n        return;\n      }\n\n      const updatedQueries = queriesWithUpdatedReferences(state.queries, oldRefId, newRefId);\n      state.queries = updatedQueries.map((query) => {\n        if (query.refId === oldRefId) {\n          return {\n            ...query,\n            refId: newRefId,\n            model: {\n              ...query.model,\n              refId: newRefId,\n            },\n          };\n        }\n\n        return query;\n      });\n    })\n    .addCase(rewireExpressions, (state, { payload }) => {\n      state.queries = queriesWithUpdatedReferences(state.queries, payload.oldRefId, payload.newRefId);\n    })\n    // removes the reduce expression when we have a instant data query\n    .addCase(optimizeReduceExpression, (state, { payload }) => {\n      const { updatedQueries, expressionQueries } = payload;\n\n      if (updatedQueries.length !== 1) {\n        // we only optimize when we have one data query\n        return;\n      }\n\n      const dataQuery = updatedQueries.at(0);\n      const isInstantDataQuery = dataQuery ? getInstantFromDataQuery(dataQuery) : false;\n\n      const shouldRemoveReducer = isInstantDataQuery && expressionQueries.length === 2;\n      if (shouldRemoveReducer) {\n        const reduceExpressionIndex = state.queries.findIndex(\n          (query) =>\n            isExpressionQuery(query.model) &&\n            isReducerExpression(query.model) &&\n            query.model.expression === dataQuery?.refId\n        );\n\n        state.queries.splice(reduceExpressionIndex, 1);\n        state.queries[1].model.expression = dataQuery?.refId;\n      }\n\n      const shouldAddReduceExpression =\n        !isInstantDataQuery && expressionQueries.length === 1 && isThresholdExpression(expressionQueries[0].model);\n      if (shouldAddReduceExpression) {\n        // add reducer to the second position\n        // we only update the refid and the model to point to the reducer expression\n        state.queries[1].model.expression = NEW_REDUCER_REF;\n\n        // insert in second position the reducer expression\n        state.queries.splice(1, 0, {\n          datasourceUid: ExpressionDatasourceUID,\n          model: expressionDatasource.newQuery({\n            type: ExpressionQueryType.reduce,\n            reducer: ReducerID.last,\n            conditions: [{ ...defaultCondition, query: { params: [] } }],\n            expression: dataQuery?.refId,\n            refId: NEW_REDUCER_REF,\n          }),\n          refId: NEW_REDUCER_REF,\n          queryType: 'expression',\n        });\n      }\n    })\n    .addCase(updateExpressionType, (state, action) => {\n      state.queries = state.queries.map((query) => {\n        return query.refId === action.payload.refId\n          ? {\n              ...query,\n              model: {\n                ...expressionDatasource.newQuery({\n                  type: action.payload.type,\n                  conditions: [{ ...defaultCondition, query: { params: [] } }],\n                  expression: '',\n                }),\n                refId: action.payload.refId,\n              },\n            }\n          : query;\n      });\n    });\n});\n\nconst addQuery = (\n  queries: AlertQuery[],\n  queryToAdd: Pick<AlertQuery, 'model' | 'datasourceUid' | 'relativeTimeRange'>\n): AlertQuery[] => {\n  const refId = getNextRefId(queries);\n  const query: AlertQuery = {\n    ...queryToAdd,\n    refId,\n    queryType: '',\n    model: {\n      ...queryToAdd.model,\n      hide: false,\n      refId,\n    },\n    relativeTimeRange: queryToAdd.relativeTimeRange ?? defaultTimeRange(queryToAdd.model),\n  };\n\n  return [...queries, query];\n};\n\nconst defaultTimeRange = (model: DataQuery): RelativeTimeRange | undefined => {\n  if (isExpressionQuery(model)) {\n    return;\n  }\n\n  return getDefaultRelativeTimeRange();\n};\n","import { css } from '@emotion/css';\nimport { produce } from 'immer';\nimport { Dispatch, FormEvent } from 'react';\nimport { UnknownAction } from 'redux';\n\nimport { GrafanaTheme2, PanelData, ReducerID, SelectableValue } from '@grafana/data';\nimport { InlineField, InlineFieldRow, Input, Select, Stack, Text, useStyles2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { EvalFunction } from 'app/features/alerting/state/alertDef';\nimport { ThresholdSelect } from 'app/features/expressions/components/ThresholdSelect';\nimport { ExpressionQuery, ExpressionQueryType, reducerTypes, thresholdFunctions } from 'app/features/expressions/types';\nimport { getReducerType, isRangeEvaluator } from 'app/features/expressions/utils/expressionTypes';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { ToLabel } from '../../../../../expressions/components/ToLabel';\nimport { ExpressionResult } from '../../expressions/Expression';\n\nimport { updateExpression } from './reducer';\n\nexport interface SimpleCondition {\n  whenField?: string;\n  evaluator: {\n    params: number[];\n    type: EvalFunction;\n  };\n}\n\n/**\n * This is the simple condition editor if the user is in the simple mode in the query section\n */\nexport interface SimpleConditionEditorProps {\n  simpleCondition: SimpleCondition;\n  onChange: (condition: SimpleCondition) => void;\n  expressionQueriesList: Array<AlertQuery<ExpressionQuery>>;\n  dispatch: Dispatch<UnknownAction>;\n  previewData?: PanelData;\n}\n\n/**\n *\n * This represents the simple condition editor for the alerting query section\n * The state for this simple condition is kept in the parent component\n * But we have also to keep the reducer state in sync with this condition state (both kept in the parent)\n */\n\nexport const SimpleConditionEditor = ({\n  simpleCondition,\n  onChange,\n  expressionQueriesList,\n  dispatch,\n  previewData,\n}: SimpleConditionEditorProps) => {\n  const onReducerTypeChange = (value: SelectableValue<string>) => {\n    onChange({ ...simpleCondition, whenField: value.value ?? ReducerID.last });\n    updateReduceExpression(value.value ?? ReducerID.last, expressionQueriesList, dispatch);\n  };\n\n  const isRange = isRangeEvaluator(simpleCondition.evaluator.type);\n\n  const thresholdFunction = thresholdFunctions.find((fn) => fn.value === simpleCondition.evaluator?.type);\n\n  const onEvalFunctionChange = (value: SelectableValue<EvalFunction>) => {\n    // change the condition kept in the parent\n    onChange({\n      ...simpleCondition,\n      evaluator: { ...simpleCondition.evaluator, type: value.value ?? EvalFunction.IsAbove },\n    });\n    // update the reducer state where we store the queries\n    updateThresholdFunction(value.value ?? EvalFunction.IsAbove, expressionQueriesList, dispatch);\n  };\n\n  const onEvaluateValueChange = (event: FormEvent<HTMLInputElement>, index = 0) => {\n    const value = event.currentTarget.value;\n    const numericValue = parseFloat(value) || 0; // try to convert input to a number that isn't NaN\n\n    onChange(\n      produce(simpleCondition, (draftCondition) => {\n        draftCondition.evaluator.params[index] = numericValue;\n      })\n    );\n\n    updateThresholdValue(numericValue, index, expressionQueriesList, dispatch);\n  };\n\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.condition.wrapper}>\n      <Stack direction=\"column\" gap={0} width=\"100%\">\n        <header className={styles.condition.header}>\n          <Text variant=\"body\">\n            <Trans i18nKey=\"alerting.simpleCondition.alertCondition\">Alert condition</Trans>\n          </Text>\n        </header>\n        <InlineFieldRow className={styles.condition.container}>\n          {simpleCondition.whenField && (\n            <InlineField label={t('alerting.simple-condition-editor.label-when', 'WHEN')}>\n              <Select\n                options={reducerTypes}\n                value={reducerTypes.find((o) => o.value === simpleCondition.whenField)}\n                onChange={onReducerTypeChange}\n                width={20}\n              />\n            </InlineField>\n          )}\n          <InlineField label={simpleCondition.whenField ? 'OF QUERY' : 'WHEN QUERY'}>\n            <Stack direction=\"row\" gap={1} alignItems=\"center\">\n              <ThresholdSelect onChange={onEvalFunctionChange} value={thresholdFunction} />\n              {isRange ? (\n                <>\n                  <Input\n                    type=\"number\"\n                    width={10}\n                    // by using the key prop we can force the input to re-render whenever the defaultValue updates\n                    // this is because we have a useEffect() that updates the data structure but \"defaultValue\" will memoize the\n                    // first value before the useEffect() runs\n                    key={simpleCondition.evaluator.params[0]}\n                    defaultValue={simpleCondition.evaluator.params[0] ?? ''}\n                    onBlur={(event) => {\n                      onEvaluateValueChange(event, 0);\n                    }}\n                  />\n                  <ToLabel />\n                  <Input\n                    type=\"number\"\n                    width={10}\n                    key={simpleCondition.evaluator.params[1]}\n                    defaultValue={simpleCondition.evaluator.params[1] ?? ''}\n                    onBlur={(event) => {\n                      onEvaluateValueChange(event, 1);\n                    }}\n                  />\n                </>\n              ) : (\n                <Input\n                  type=\"number\"\n                  width={10}\n                  key={simpleCondition.evaluator.params[0]}\n                  defaultValue={simpleCondition.evaluator.params[0] ?? ''}\n                  onBlur={(event) => {\n                    onEvaluateValueChange(event, 0);\n                  }}\n                />\n              )}\n            </Stack>\n          </InlineField>\n        </InlineFieldRow>\n        {previewData?.series && <ExpressionResult series={previewData?.series} isAlertCondition={true} />}\n      </Stack>\n    </div>\n  );\n};\n\nfunction updateReduceExpression(\n  reducer: string,\n  expressionQueriesList: Array<AlertQuery<ExpressionQuery>>,\n  dispatch: Dispatch<UnknownAction>\n) {\n  // 1. make sure have have a reduce expression and that it is pointing to the data query\n  const reduceExpression = expressionQueriesList.find((query) => query.model.type === ExpressionQueryType.reduce);\n\n  const newReduceExpression = reduceExpression\n    ? produce(reduceExpression?.model, (draft) => {\n        if (draft && draft.conditions) {\n          draft.reducer = reducer;\n          draft.conditions[0].reducer.type = getReducerType(reducer) ?? ReducerID.last;\n        }\n      })\n    : undefined;\n  newReduceExpression && dispatch(updateExpression(newReduceExpression));\n}\n\nfunction updateThresholdFunction(\n  evaluator: EvalFunction,\n  expressionQueriesList: Array<AlertQuery<ExpressionQuery>>,\n  dispatch: Dispatch<UnknownAction>\n) {\n  const thresholdExpression = expressionQueriesList.find((query) => query.model.type === ExpressionQueryType.threshold);\n\n  const newThresholdExpression = produce(thresholdExpression, (draft) => {\n    if (draft && draft.model.conditions) {\n      draft.model.conditions[0].evaluator.type = evaluator;\n    }\n  });\n  newThresholdExpression && dispatch(updateExpression(newThresholdExpression.model));\n}\n\nfunction updateThresholdValue(\n  value: number,\n  index: number,\n  expressionQueriesList: Array<AlertQuery<ExpressionQuery>>,\n  dispatch: Dispatch<UnknownAction>\n) {\n  const thresholdExpression = expressionQueriesList.find((query) => query.model.type === ExpressionQueryType.threshold);\n\n  const newThresholdExpression = produce(thresholdExpression, (draft) => {\n    if (draft && draft.model.conditions) {\n      draft.model.conditions[0].evaluator.params[index] = value;\n    }\n  });\n  newThresholdExpression && dispatch(updateExpression(newThresholdExpression.model));\n}\n\nexport function getSimpleConditionFromExpressions(expressions: Array<AlertQuery<ExpressionQuery>>): SimpleCondition {\n  const reduceExpression = expressions.find((query) => query.model.type === ExpressionQueryType.reduce);\n  const thresholdExpression = expressions.find((query) => query.model.type === ExpressionQueryType.threshold);\n  const conditionsFromThreshold = thresholdExpression?.model.conditions ?? [];\n  const whenField = reduceExpression?.model.reducer;\n  const params = conditionsFromThreshold[0]?.evaluator?.params\n    ? [...conditionsFromThreshold[0]?.evaluator?.params]\n    : [0];\n  const type = conditionsFromThreshold[0]?.evaluator?.type ?? EvalFunction.IsAbove;\n\n  return {\n    whenField: whenField,\n    evaluator: {\n      params: params,\n      type: type,\n    },\n  };\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  buttonSelectText: css({\n    color: theme.colors.primary.text,\n    fontSize: theme.typography.bodySmall.fontSize,\n    textTransform: 'uppercase',\n    padding: `0 ${theme.spacing(1)}`,\n  }),\n  condition: {\n    wrapper: css({\n      display: 'flex',\n      border: `solid 1px ${theme.colors.border.medium}`,\n      flex: 1,\n      height: 'fit-content',\n      borderRadius: theme.shape.radius.default,\n    }),\n    container: css({\n      display: 'flex',\n      flexDirection: 'row',\n      padding: theme.spacing(1),\n      flex: 1,\n      width: '100%',\n    }),\n    header: css({\n      background: theme.colors.background.secondary,\n      padding: `${theme.spacing(0.5)} ${theme.spacing(1)}`,\n      borderBottom: `solid 1px ${theme.colors.border.weak}`,\n      flex: 1,\n    }),\n  },\n});\n","import { useFormContext } from 'react-hook-form';\n\nimport { DataSourceInstanceSettings } from '@grafana/data';\nimport { DataSourceJsonData } from '@grafana/schema';\nimport { RadioButtonGroup, Stack, Text } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { Trans, t } from 'app/core/internationalization';\nimport { ExpressionDatasourceUID } from 'app/features/expressions/types';\nimport { AccessControlAction } from 'app/types';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { RuleFormType, RuleFormValues } from '../../../types/rule-form';\nimport { NeedHelpInfo } from '../NeedHelpInfo';\n\nfunction getAvailableRuleTypes() {\n  const canCreateGrafanaRules = contextSrv.hasPermission(AccessControlAction.AlertingRuleCreate);\n  const canCreateCloudRules = contextSrv.hasPermission(AccessControlAction.AlertingRuleExternalWrite);\n  const defaultRuleType = canCreateGrafanaRules ? RuleFormType.grafana : RuleFormType.cloudAlerting;\n\n  const enabledRuleTypes: RuleFormType[] = [];\n  if (canCreateGrafanaRules) {\n    enabledRuleTypes.push(RuleFormType.grafana);\n  }\n  if (canCreateCloudRules) {\n    enabledRuleTypes.push(RuleFormType.cloudAlerting, RuleFormType.cloudRecording);\n  }\n\n  return { enabledRuleTypes, defaultRuleType };\n}\n\nconst onlyOneDSInQueries = (queries: AlertQuery[]) => {\n  return queries.filter((q) => q.datasourceUid !== ExpressionDatasourceUID).length === 1;\n};\nconst getCanSwitch = ({\n  queries,\n  ruleFormType,\n  rulesSourcesWithRuler,\n}: {\n  rulesSourcesWithRuler: Array<DataSourceInstanceSettings<DataSourceJsonData>>;\n  queries: AlertQuery[];\n  ruleFormType: RuleFormType | undefined;\n}) => {\n  // get available rule types\n  const availableRuleTypes = getAvailableRuleTypes();\n\n  // check if we have only one query in queries and if it's a cloud datasource\n  const onlyOneDS = onlyOneDSInQueries(queries);\n  const dataSourceIdFromQueries = queries[0]?.datasourceUid ?? '';\n  const isRecordingRuleType = ruleFormType === RuleFormType.cloudRecording;\n\n  //let's check if we switch to cloud type\n  const canSwitchToCloudRule =\n    !isRecordingRuleType &&\n    onlyOneDS &&\n    rulesSourcesWithRuler.some((dsJsonData) => dsJsonData.uid === dataSourceIdFromQueries);\n\n  const canSwitchToGrafanaRule = !isRecordingRuleType;\n  // check for enabled types\n  const grafanaTypeEnabled = availableRuleTypes.enabledRuleTypes.includes(RuleFormType.grafana);\n  const cloudTypeEnabled = availableRuleTypes.enabledRuleTypes.includes(RuleFormType.cloudAlerting);\n\n  // can we switch to the other type? (cloud or grafana)\n  const canSwitchFromCloudToGrafana =\n    ruleFormType === RuleFormType.cloudAlerting && grafanaTypeEnabled && canSwitchToGrafanaRule;\n  const canSwitchFromGrafanaToCloud =\n    ruleFormType === RuleFormType.grafana && canSwitchToCloudRule && cloudTypeEnabled && canSwitchToCloudRule;\n\n  return canSwitchFromCloudToGrafana || canSwitchFromGrafanaToCloud;\n};\n\nexport interface SmartAlertTypeDetectorProps {\n  editingExistingRule: boolean;\n  rulesSourcesWithRuler: Array<DataSourceInstanceSettings<DataSourceJsonData>>;\n  queries: AlertQuery[];\n  onClickSwitch: () => void;\n}\n\nexport function SmartAlertTypeDetector({\n  editingExistingRule,\n  rulesSourcesWithRuler,\n  queries,\n  onClickSwitch,\n}: SmartAlertTypeDetectorProps) {\n  const { getValues } = useFormContext<RuleFormValues>();\n  const [ruleFormType] = getValues(['type']);\n  const canSwitch = getCanSwitch({ queries, ruleFormType, rulesSourcesWithRuler });\n\n  const options = [\n    { label: 'Grafana-managed', value: RuleFormType.grafana },\n    { label: 'Data source-managed', value: RuleFormType.cloudAlerting },\n  ];\n\n  // if we can't switch to data-source managed, disable it\n  // TODO figure out how to show a popover to the user to indicate _why_ it's disabled\n  const disabledOptions = canSwitch ? [] : [RuleFormType.cloudAlerting];\n\n  return (\n    <Stack direction=\"column\" gap={1} alignItems=\"flex-start\">\n      <Stack direction=\"column\" gap={0}>\n        <Text variant=\"h5\">\n          <Trans i18nKey=\"alerting.smart-alert-type-detector.rule-type\">Rule type</Trans>\n        </Text>\n        <Stack direction=\"row\" gap={0.5} alignItems=\"center\">\n          <Text variant=\"bodySmall\" color=\"secondary\">\n            <Trans i18nKey=\"alerting.smart-alert-type-detector.select-where-alert-managed\">\n              Select where the alert rule will be managed.\n            </Trans>\n          </Text>\n          <NeedHelpInfo\n            contentText={\n              <>\n                <Text color=\"primary\" variant=\"h6\">\n                  <Trans i18nKey=\"alerting.smart-alert-type-detector.grafanamanaged-alert-rules\">\n                    Grafana-managed alert rules\n                  </Trans>\n                </Text>\n                <p>\n                  Grafana-managed alert rules allow you to create alerts that can act on data from any of our supported\n                  data sources, including having multiple data sources in the same rule. You can also add expressions to\n                  transform your data and set alert conditions. Using images in alert notifications is also supported.\n                </p>\n                <Text color=\"primary\" variant=\"h6\">\n                  <Trans i18nKey=\"alerting.smart-alert-type-detector.data-sourcemanaged-alert-rules\">\n                    Data source-managed alert rules\n                  </Trans>\n                </Text>\n                <p>\n                  Data source-managed alert rules can be used for Grafana Mimir or Grafana Loki data sources which have\n                  been configured to support rule creation. The use of expressions or multiple queries is not supported.\n                </p>\n              </>\n            }\n            externalLink=\"https://grafana.com/docs/grafana/latest/alerting/fundamentals/alert-rules/alert-rule-types/\"\n            linkText=\"Read about alert rule types\"\n            title={t('alerting.smart-alert-type-detector.title-alert-rule-types', 'Alert rule types')}\n          />\n        </Stack>\n      </Stack>\n      <RadioButtonGroup\n        options={options}\n        disabled={editingExistingRule}\n        disabledOptions={disabledOptions}\n        value={ruleFormType}\n        onChange={onClickSwitch}\n        data-testid=\"rule-type-radio-group\"\n      />\n      {/* editing an existing rule, we just show \"cannot be changed\" */}\n      {editingExistingRule && (\n        <Text color=\"secondary\">The alert rule type cannot be changed for an existing rule.</Text>\n      )}\n      {/* in regular alert creation we tell the user what options they have when using a cloud data source */}\n      {!editingExistingRule && (\n        <>\n          {canSwitch ? (\n            <Text color=\"secondary\">\n              {ruleFormType === RuleFormType.grafana\n                ? 'The data source selected in your query supports alert rule management. Switch to data source-managed if you want the alert rule to be managed by the data source instead of Grafana.'\n                : 'Switch to Grafana-managed to use expressions, multiple queries, images in notifications and various other features.'}\n            </Text>\n          ) : (\n            <Text color=\"secondary\">Based on the selected data sources this alert rule will be Grafana-managed.</Text>\n          )}\n        </>\n      )}\n    </Stack>\n  );\n}\n","import { RuleFormType } from '../../../types/rule-form';\n\ntype FormDescriptions = {\n  sectionTitle: string;\n  helpLabel: string;\n  helpContent: string;\n  helpLink: string;\n};\n\nexport const DESCRIPTIONS: Record<RuleFormType, FormDescriptions> = {\n  [RuleFormType.cloudRecording]: {\n    sectionTitle: 'Define recording rule',\n    helpLabel: 'Define your recording rule',\n    helpContent:\n      'Pre-compute frequently needed or computationally expensive expressions and save their result as a new set of time series.',\n    helpLink: 'https://grafana.com/docs/grafana/latest/alerting/alerting-rules/create-recording-rules/',\n  },\n  [RuleFormType.grafanaRecording]: {\n    sectionTitle: 'Define recording rule',\n    helpLabel: 'Define your recording rule',\n    helpContent:\n      'Pre-compute frequently needed or computationally expensive expressions and save their result as a new set of time series.',\n    helpLink: 'https://grafana.com/docs/grafana/latest/alerting/alerting-rules/create-recording-rules/',\n  },\n  [RuleFormType.grafana]: {\n    sectionTitle: 'Define query and alert condition',\n    helpLabel: 'Define query and alert condition',\n    helpContent:\n      'An alert rule consists of one or more queries and expressions that select the data you want to measure. Define queries and/or expressions and then choose one of them as the alert rule condition. This is the threshold that an alert rule must meet or exceed in order to fire. For more information on queries and expressions, see Query and transform data.',\n    helpLink: 'https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/',\n  },\n  [RuleFormType.cloudAlerting]: {\n    sectionTitle: 'Define query and alert condition',\n    helpLabel: 'Define query and alert condition',\n    helpContent:\n      'An alert rule consists of one or more queries and expressions that select the data you want to measure. Define queries and/or expressions and then choose one of them as the alert rule condition. This is the threshold that an alert rule must meet or exceed in order to fire. For more information on queries and expressions, see Query and transform data.',\n    helpLink: 'https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/',\n  },\n};\n","import { useEffect, useState } from 'react';\n\nimport { ReducerID } from '@grafana/data';\nimport { EvalFunction } from 'app/features/alerting/state/alertDef';\nimport { ExpressionQuery } from 'app/features/expressions/types';\nimport { AlertDataQuery, AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { areQueriesTransformableToSimpleCondition } from '../../../rule-editor/formProcessing';\n\nimport { SimpleCondition, getSimpleConditionFromExpressions } from './SimpleCondition';\n\nfunction initializeSimpleCondition(\n  isGrafanaAlertingType: boolean,\n  dataQueries: Array<AlertQuery<AlertDataQuery>>,\n  expressionQueries: Array<AlertQuery<ExpressionQuery>>\n) {\n  if (isGrafanaAlertingType && areQueriesTransformableToSimpleCondition(dataQueries, expressionQueries)) {\n    return getSimpleConditionFromExpressions(expressionQueries);\n  } else {\n    return {\n      whenField: ReducerID.last,\n      evaluator: {\n        params: [0],\n        type: EvalFunction.IsAbove,\n      },\n    };\n  }\n}\nexport function determineAdvancedMode(simplifiedQueryEditor: boolean | undefined, isGrafanaAlertingType: boolean) {\n  return simplifiedQueryEditor === false || !isGrafanaAlertingType;\n}\n\n/*\n  This hook is used mantain the state of the advanced mode, and the simple condition,\n  depending on the editor settings, the alert type, and the queries.\n   */\nexport const useAdvancedMode = (\n  simplifiedQueryEditor: boolean | undefined,\n  isGrafanaAlertingType: boolean,\n  dataQueries: Array<AlertQuery<ExpressionQuery | AlertDataQuery>>,\n  expressionQueries: Array<AlertQuery<ExpressionQuery>>\n) => {\n  const isAdvancedMode = determineAdvancedMode(simplifiedQueryEditor, isGrafanaAlertingType);\n\n  const [simpleCondition, setSimpleCondition] = useState<SimpleCondition>(\n    initializeSimpleCondition(isGrafanaAlertingType, dataQueries, expressionQueries)\n  );\n\n  useEffect(() => {\n    if (isGrafanaAlertingType && !isAdvancedMode) {\n      setSimpleCondition(getSimpleConditionFromExpressions(expressionQueries));\n    }\n  }, [isAdvancedMode, expressionQueries, isGrafanaAlertingType]);\n\n  return { simpleCondition, setSimpleCondition };\n};\n","import { css } from '@emotion/css';\nimport { cloneDeep } from 'lodash';\nimport { useCallback, useEffect, useMemo, useReducer, useState } from 'react';\nimport { Controller, useFormContext } from 'react-hook-form';\nimport { useEffectOnce } from 'react-use';\n\nimport { GrafanaTheme2, getDefaultRelativeTimeRange } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config, getDataSourceSrv } from '@grafana/runtime';\nimport {\n  Alert,\n  Button,\n  ConfirmModal,\n  Dropdown,\n  Field,\n  Icon,\n  Menu,\n  MenuItem,\n  Stack,\n  Text,\n  Tooltip,\n  useStyles2,\n} from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport {\n  ExpressionDatasourceUID,\n  ExpressionQuery,\n  ExpressionQueryType,\n  expressionTypes,\n} from 'app/features/expressions/types';\nimport { AlertQuery } from 'app/types/unified-alerting-dto';\n\nimport { useRulesSourcesWithRuler } from '../../../hooks/useRuleSourcesWithRuler';\nimport {\n  areQueriesTransformableToSimpleCondition,\n  isExpressionQueryInAlert,\n} from '../../../rule-editor/formProcessing';\nimport { RuleFormType, RuleFormValues } from '../../../types/rule-form';\nimport { getDefaultOrFirstCompatibleDataSource } from '../../../utils/datasource';\nimport { PromOrLokiQuery, isPromOrLokiQuery } from '../../../utils/rule-form';\nimport {\n  isCloudAlertingRuleByType,\n  isCloudRecordingRuleByType,\n  isDataSourceManagedRuleByType,\n  isGrafanaAlertingRuleByType,\n  isGrafanaManagedRuleByType,\n} from '../../../utils/rules';\nimport { ExpressionEditor } from '../ExpressionEditor';\nimport { ExpressionsEditor } from '../ExpressionsEditor';\nimport { NeedHelpInfo } from '../NeedHelpInfo';\nimport { QueryEditor } from '../QueryEditor';\nimport { RecordingRuleEditor } from '../RecordingRuleEditor';\nimport { RuleEditorSection } from '../RuleEditorSection';\nimport { errorFromCurrentCondition, errorFromPreviewData, findRenamedDataQueryReferences, refIdExists } from '../util';\n\nimport { CloudDataSourceSelector } from './CloudDataSourceSelector';\nimport { SimpleConditionEditor, getSimpleConditionFromExpressions } from './SimpleCondition';\nimport { SmartAlertTypeDetector } from './SmartAlertTypeDetector';\nimport { DESCRIPTIONS } from './descriptions';\nimport {\n  addExpressions,\n  addNewDataQuery,\n  addNewExpression,\n  duplicateQuery,\n  optimizeReduceExpression,\n  queriesAndExpressionsReducer,\n  removeExpression,\n  removeExpressions,\n  resetToSimpleCondition,\n  rewireExpressions,\n  setDataQueries,\n  setRecordingRulesQueries,\n  updateExpression,\n  updateExpressionRefId,\n  updateExpressionTimeRange,\n  updateExpressionType,\n} from './reducer';\nimport { useAdvancedMode } from './useAdvancedMode';\nimport { useAlertQueryRunner } from './useAlertQueryRunner';\n\ninterface Props {\n  editingExistingRule: boolean;\n  onDataChange: (error: string) => void;\n  /**\n   * The mode of the rule editor.\n   * - 'edit' standard rule editor mode\n   * - 'draft' non-saveable form mode used for exporting to provisioning formats\n   */\n  mode: 'edit' | 'draft';\n}\n\nexport const QueryAndExpressionsStep = ({ editingExistingRule, onDataChange, mode }: Props) => {\n  const {\n    setValue,\n    getValues,\n    watch,\n    formState: { errors },\n    control,\n  } = useFormContext<RuleFormValues>();\n\n  const { queryPreviewData, runQueries, cancelQueries, isPreviewLoading, clearPreviewData } = useAlertQueryRunner();\n  const isSwitchModeEnabled = config.featureToggles.alertingQueryAndExpressionsStepMode ?? false;\n\n  const initialState = {\n    queries: getValues('queries'),\n  };\n\n  const [{ queries }, dispatch] = useReducer(queriesAndExpressionsReducer, initialState);\n  const isOptimizeReducerEnabled = config.featureToggles.alertingUIOptimizeReducer ?? false;\n\n  // data queries only\n  const dataQueries = useMemo(() => {\n    return queries.filter((query) => !isExpressionQuery(query.model));\n  }, [queries]);\n\n  // expression queries only\n  const expressionQueries = useMemo(() => {\n    return queries.filter((query) => isExpressionQueryInAlert(query));\n  }, [queries]);\n\n  useEffectOnce(() => {\n    // we only remove or add the reducer(optimize reducer) expression when creating a new alert.\n    // When editing an alert, we assume the user wants to manually adjust expressions and queries for more control and customization.\n\n    if (!editingExistingRule && isOptimizeReducerEnabled) {\n      dispatch(optimizeReduceExpression({ updatedQueries: dataQueries, expressionQueries }));\n    }\n  });\n\n  const [type, condition, dataSourceName, editorSettings] = watch([\n    'type',\n    'condition',\n    'dataSourceName',\n    'editorSettings',\n  ]);\n  //if its a new rule, look at the local storage\n\n  const isGrafanaAlertingType = isGrafanaAlertingRuleByType(type);\n  const isRecordingRuleType = isCloudRecordingRuleByType(type);\n  const isCloudAlertRuleType = isCloudAlertingRuleByType(type);\n  const [showResetModeModal, setShowResetModal] = useState(false);\n\n  const simplifiedQueryInForm = editorSettings?.simplifiedQueryEditor;\n\n  const { simpleCondition, setSimpleCondition } = useAdvancedMode(\n    simplifiedQueryInForm,\n    isGrafanaAlertingType,\n    dataQueries,\n    expressionQueries\n  );\n\n  const simplifiedQueryStep =\n    isSwitchModeEnabled && isGrafanaAlertingType ? editorSettings?.simplifiedQueryEditor : false;\n\n  // If we switch to simple mode we need to update the simple condition with the data in the queries reducer\n  useEffect(() => {\n    if (simplifiedQueryStep && isGrafanaAlertingType) {\n      setSimpleCondition(getSimpleConditionFromExpressions(expressionQueries));\n    }\n  }, [simplifiedQueryStep, expressionQueries, isGrafanaAlertingType, setSimpleCondition]);\n\n  const { rulesSourcesWithRuler } = useRulesSourcesWithRuler();\n\n  const runQueriesPreview = useCallback(\n    (condition?: string) => {\n      if (isCloudAlertRuleType) {\n        // we will skip preview for cloud rules, these do not have any time series preview\n        // Grafana Managed rules and recording rules do\n        return;\n      }\n\n      if (simplifiedQueryStep) {\n        const lastExpression = expressionQueries.at(-1);\n        if (!lastExpression) {\n          return;\n        }\n\n        const condition = lastExpression.refId;\n        // we need to be sure the condition is set once we switch to simple mode\n        setValue('condition', condition);\n        runQueries(getValues('queries'), condition);\n      } else {\n        runQueries(getValues('queries'), condition || (getValues('condition') ?? ''));\n      }\n    },\n    [isCloudAlertRuleType, expressionQueries, simplifiedQueryStep, setValue, runQueries, getValues]\n  );\n\n  // whenever we update the queries we have to update the form too\n  useEffect(() => {\n    setValue('queries', queries, { shouldValidate: false });\n  }, [queries, runQueries, setValue]);\n\n  const noCompatibleDataSources = getDefaultOrFirstCompatibleDataSource() === undefined;\n\n  const emptyQueries = queries.length === 0;\n\n  // apply some validations and asserts to the results of the evaluation when creating or editing\n  // Grafana-managed alert rules and Grafa-managed recording rules\n  useEffect(() => {\n    if (type && !isGrafanaManagedRuleByType(type)) {\n      return;\n    }\n\n    const currentCondition = getValues('condition');\n    if (!currentCondition) {\n      return;\n    }\n\n    const previewData = queryPreviewData[currentCondition];\n    if (!previewData) {\n      return;\n    }\n\n    const error = errorFromPreviewData(previewData) ?? errorFromCurrentCondition(previewData);\n\n    onDataChange(error?.message || '');\n  }, [queryPreviewData, getValues, onDataChange, type]);\n\n  const handleSetCondition = useCallback(\n    (refId: string | null) => {\n      if (!refId) {\n        return;\n      }\n\n      runQueriesPreview(refId); //we need to run the queries to know if the condition is valid\n\n      setValue('condition', refId);\n    },\n    [runQueriesPreview, setValue]\n  );\n\n  const onUpdateRefId = useCallback(\n    (oldRefId: string, newRefId: string) => {\n      const newRefIdExists = refIdExists(queries, newRefId);\n      // TODO we should set an error and explain what went wrong instead of just refusing to update\n      if (newRefIdExists) {\n        return;\n      }\n\n      dispatch(updateExpressionRefId({ oldRefId, newRefId }));\n\n      // update condition too if refId was updated\n      if (condition === oldRefId) {\n        setValue('condition', newRefId);\n      }\n    },\n    [condition, queries, setValue]\n  );\n\n  const updateExpressionAndDatasource = useSetExpressionAndDataSource();\n\n  const onChangeQueries = useCallback(\n    (updatedQueries: AlertQuery[]) => {\n      // Most data sources triggers onChange and onRunQueries consecutively\n      // It means our reducer state is always one step behind when runQueries is invoked\n      // Invocation cycle => onChange -> dispatch(setDataQueries) -> onRunQueries -> setDataQueries Reducer\n      // As a workaround we update form values as soon as possible to avoid stale state\n      // This way we can access up to date queries in runQueriesPreview without waiting for re-render\n      const previousQueries = getValues('queries');\n\n      const expressionQueries = previousQueries.filter<AlertQuery<ExpressionQuery>>(isExpressionQueryInAlert);\n\n      setValue('queries', [...updatedQueries, ...expressionQueries], { shouldValidate: false });\n      updateExpressionAndDatasource(updatedQueries);\n\n      // we only remove or add the reducer(optimize reducer) expression when creating a new alert.\n      // When editing an alert, we assume the user wants to manually adjust expressions and queries for more control and customization.\n      if (!editingExistingRule && isOptimizeReducerEnabled) {\n        dispatch(optimizeReduceExpression({ updatedQueries, expressionQueries }));\n      }\n\n      dispatch(setDataQueries(updatedQueries));\n      dispatch(updateExpressionTimeRange());\n\n      // check if we need to rewire expressions (and which ones)\n      const [oldRefId, newRefId] = findRenamedDataQueryReferences(queries, updatedQueries);\n      if (oldRefId && newRefId) {\n        dispatch(rewireExpressions({ oldRefId, newRefId }));\n      }\n    },\n    [queries, updateExpressionAndDatasource, getValues, setValue, editingExistingRule, isOptimizeReducerEnabled]\n  );\n\n  const onChangeRecordingRulesQueries = useCallback(\n    (updatedQueries: AlertQuery[]) => {\n      const query = updatedQueries[0];\n\n      if (!isPromOrLokiQuery(query.model)) {\n        return;\n      }\n\n      const expression = query.model.expr;\n\n      setValue('queries', updatedQueries, { shouldValidate: false });\n      updateExpressionAndDatasource(updatedQueries);\n\n      dispatch(setRecordingRulesQueries({ recordingRuleQueries: updatedQueries, expression }));\n      runQueriesPreview();\n    },\n    [runQueriesPreview, setValue, updateExpressionAndDatasource]\n  );\n\n  // Using dataSourcesWithRuler[0] gives incorrect types - no undefined\n  // Using at(0) provides a safe type with undefined\n  const recordingRuleDefaultDatasource = rulesSourcesWithRuler.at(0);\n\n  useEffect(() => {\n    clearPreviewData();\n    if (type === RuleFormType.cloudRecording) {\n      const expr = getValues('expression');\n\n      if (!recordingRuleDefaultDatasource) {\n        return;\n      }\n\n      const datasourceUid =\n        (editingExistingRule && getDataSourceSrv().getInstanceSettings(dataSourceName)?.uid) ||\n        recordingRuleDefaultDatasource.uid;\n\n      const defaultQuery = {\n        refId: 'A',\n        datasourceUid,\n        queryType: '',\n        relativeTimeRange: getDefaultRelativeTimeRange(),\n        expr,\n        instant: true,\n        model: {\n          refId: 'A',\n          hide: false,\n          expr,\n        },\n      };\n      dispatch(setRecordingRulesQueries({ recordingRuleQueries: [defaultQuery], expression: expr }));\n    }\n  }, [type, recordingRuleDefaultDatasource, editingExistingRule, getValues, dataSourceName, clearPreviewData]);\n\n  const onDuplicateQuery = useCallback((query: AlertQuery) => {\n    dispatch(duplicateQuery(query));\n  }, []);\n\n  // update the condition if it's been removed\n  useEffect(() => {\n    if (!refIdExists(queries, condition)) {\n      const lastRefId = queries.at(-1)?.refId ?? null;\n      handleSetCondition(lastRefId);\n    }\n  }, [condition, queries, handleSetCondition]);\n\n  const onClickType = useCallback(\n    (type: ExpressionQueryType) => {\n      dispatch(addNewExpression(type));\n    },\n    [dispatch]\n  );\n\n  const styles = useStyles2(getStyles);\n\n  // Cloud alerts load data from form values\n  // whereas Grafana managed alerts load data from reducer\n  //when data source is changed in the cloud selector we need to update the queries in the reducer\n\n  const onChangeCloudDatasource = useCallback(\n    (datasourceUid: string) => {\n      const newQueries = cloneDeep(queries);\n      newQueries[0].datasourceUid = datasourceUid;\n      setValue('queries', newQueries, { shouldValidate: false });\n\n      updateExpressionAndDatasource(newQueries);\n\n      dispatch(setDataQueries(newQueries));\n    },\n    [queries, setValue, updateExpressionAndDatasource, dispatch]\n  );\n\n  // ExpressionEditor for cloud query needs to update queries in the reducer and in the form\n  // otherwise the value is not updated for Grafana managed alerts\n\n  const onChangeExpression = (value: string) => {\n    const newQueries = cloneDeep(queries);\n\n    if (newQueries[0].model) {\n      if (isPromOrLokiQuery(newQueries[0].model)) {\n        newQueries[0].model.expr = value;\n      } else {\n        // first time we come from grafana-managed type\n        // we need to convert the model to PromOrLokiQuery\n        const promLoki: PromOrLokiQuery = {\n          ...cloneDeep(newQueries[0].model),\n          expr: value,\n        };\n        newQueries[0].model = promLoki;\n      }\n    }\n\n    setValue('queries', newQueries, { shouldValidate: false });\n\n    updateExpressionAndDatasource(newQueries);\n\n    dispatch(setDataQueries(newQueries));\n    runQueriesPreview();\n  };\n\n  const removeExpressionsInQueries = useCallback(() => dispatch(removeExpressions()), [dispatch]);\n\n  const addExpressionsInQueries = useCallback(\n    (expressions: AlertQuery[]) => dispatch(addExpressions(expressions)),\n    [dispatch]\n  );\n\n  // we need to keep track of the previous expressions and condition reference to be able to restore them when switching back to grafana managed\n  const [prevExpressions, setPrevExpressions] = useState<AlertQuery[]>([]);\n  const [prevCondition, setPrevCondition] = useState<string | null>(null);\n\n  const restoreExpressionsInQueries = useCallback(() => {\n    addExpressionsInQueries(prevExpressions);\n  }, [prevExpressions, addExpressionsInQueries]);\n\n  const onClickSwitch = useCallback(() => {\n    const typeInForm = getValues('type');\n    if (typeInForm === RuleFormType.cloudAlerting) {\n      setValue('type', RuleFormType.grafana);\n      setValue('dataSourceName', null); // set data source name back to \"null\"\n\n      prevExpressions.length > 0 && restoreExpressionsInQueries();\n      prevCondition && setValue('condition', prevCondition);\n    } else {\n      setValue('type', RuleFormType.cloudAlerting);\n      // dataSourceName is used only by Mimir/Loki alerting and recording rules\n      // It should be empty for Grafana managed alert rules\n      const newDsName = getDataSourceSrv().getInstanceSettings(queries[0].datasourceUid)?.name;\n      if (newDsName) {\n        setValue('dataSourceName', newDsName);\n      }\n\n      updateExpressionAndDatasource(queries);\n\n      const expressions = queries.filter((query) => query.datasourceUid === ExpressionDatasourceUID);\n      setPrevExpressions(expressions);\n      removeExpressionsInQueries();\n      setPrevCondition(condition);\n    }\n  }, [\n    getValues,\n    setValue,\n    prevExpressions.length,\n    restoreExpressionsInQueries,\n    prevCondition,\n    updateExpressionAndDatasource,\n    queries,\n    removeExpressionsInQueries,\n    condition,\n  ]);\n\n  const { sectionTitle, helpLabel, helpContent, helpLink } = DESCRIPTIONS[type ?? RuleFormType.grafana];\n\n  if (!type) {\n    return null;\n  }\n  const switchMode =\n    isGrafanaAlertingType && isSwitchModeEnabled\n      ? {\n          isAdvancedMode: !simplifiedQueryStep,\n          setAdvancedMode: (isAdvanced: boolean) => {\n            if (!getValues('editorSettings.simplifiedQueryEditor')) {\n              if (!areQueriesTransformableToSimpleCondition(dataQueries, expressionQueries)) {\n                setShowResetModal(true);\n                return;\n              }\n            }\n            setValue('editorSettings.simplifiedQueryEditor', !isAdvanced);\n          },\n        }\n      : undefined;\n\n  return (\n    <>\n      <RuleEditorSection\n        stepNo={2}\n        title={sectionTitle}\n        fullWidth={true}\n        description={\n          <Stack direction=\"row\" gap={0.5} alignItems=\"center\">\n            <Text variant=\"bodySmall\" color=\"secondary\">\n              {helpLabel}\n            </Text>\n            <NeedHelpInfo\n              contentText={helpContent}\n              externalLink={helpLink}\n              linkText={'Read more on our documentation website'}\n              title={helpLabel}\n            />\n          </Stack>\n        }\n        switchMode={switchMode}\n      >\n        {/* This is the cloud data source selector */}\n        {isDataSourceManagedRuleByType(type) && (\n          <CloudDataSourceSelector onChangeCloudDatasource={onChangeCloudDatasource} disabled={editingExistingRule} />\n        )}\n\n        {/* This is the PromQL Editor for recording rules */}\n        {isRecordingRuleType && dataSourceName && (\n          <Field error={errors.expression?.message} invalid={!!errors.expression?.message}>\n            <RecordingRuleEditor\n              dataSourceName={dataSourceName}\n              queries={queries}\n              runQueries={() => runQueriesPreview()}\n              onChangeQuery={onChangeRecordingRulesQueries}\n              panelData={queryPreviewData}\n            />\n          </Field>\n        )}\n\n        {/* This is the PromQL Editor for Cloud rules */}\n        {isCloudAlertRuleType && dataSourceName && (\n          <Stack direction=\"column\">\n            <Field error={errors.expression?.message} invalid={!!errors.expression?.message}>\n              <Controller\n                name=\"expression\"\n                render={({ field: { ref, ...field } }) => {\n                  return (\n                    <ExpressionEditor\n                      {...field}\n                      dataSourceName={dataSourceName}\n                      showPreviewAlertsButton={!isRecordingRuleType}\n                      onChange={onChangeExpression}\n                    />\n                  );\n                }}\n                control={control}\n                rules={{\n                  required: { value: true, message: 'A valid expression is required' },\n                }}\n              />\n            </Field>\n            {mode === 'edit' && (\n              <SmartAlertTypeDetector\n                editingExistingRule={editingExistingRule}\n                queries={queries}\n                rulesSourcesWithRuler={rulesSourcesWithRuler}\n                onClickSwitch={onClickSwitch}\n              />\n            )}\n          </Stack>\n        )}\n\n        {/* This is the editor for Grafana managed rules and Grafana managed recording rules */}\n        {isGrafanaManagedRuleByType(type) && (\n          <Stack direction=\"column\">\n            {/* Data Queries */}\n            <QueryEditor\n              queries={dataQueries}\n              expressions={expressionQueries}\n              onRunQueries={() => runQueriesPreview()}\n              onChangeQueries={onChangeQueries}\n              onDuplicateQuery={onDuplicateQuery}\n              panelData={queryPreviewData}\n              condition={condition}\n              onSetCondition={handleSetCondition}\n            />\n            {!simplifiedQueryStep && (\n              <Tooltip content={'You appear to have no compatible data sources'} show={noCompatibleDataSources}>\n                <Button\n                  type=\"button\"\n                  onClick={() => {\n                    dispatch(addNewDataQuery());\n                  }}\n                  variant=\"secondary\"\n                  data-testid={selectors.components.QueryTab.addQuery}\n                  disabled={noCompatibleDataSources}\n                  className={styles.addQueryButton}\n                >\n                  <Trans i18nKey=\"alerting.query-and-expressions-step.add-query\">Add query</Trans>\n                </Button>\n              </Tooltip>\n            )}\n            {/* We only show Switch for Grafana managed alerts */}\n            {isGrafanaAlertingType && !simplifiedQueryStep && mode === 'edit' && (\n              <SmartAlertTypeDetector\n                editingExistingRule={editingExistingRule}\n                rulesSourcesWithRuler={rulesSourcesWithRuler}\n                queries={queries}\n                onClickSwitch={onClickSwitch}\n              />\n            )}\n            {/* Expression Queries */}\n            {!simplifiedQueryStep && (\n              <>\n                <Stack direction=\"column\" gap={0}>\n                  <Text element=\"h5\">\n                    <Trans i18nKey=\"alerting.query-and-expressions-step.expressions\">Expressions</Trans>\n                  </Text>\n                  <Text variant=\"bodySmall\" color=\"secondary\">\n                    <Trans i18nKey=\"alerting.query-and-expressions-step.manipulate-returned-queries-other-operations\">\n                      Manipulate data returned from queries with math and other operations.\n                    </Trans>\n                  </Text>\n                </Stack>\n\n                <ExpressionsEditor\n                  queries={queries}\n                  panelData={queryPreviewData}\n                  condition={condition}\n                  onSetCondition={handleSetCondition}\n                  onRemoveExpression={(refId) => {\n                    dispatch(removeExpression(refId));\n                  }}\n                  onUpdateRefId={onUpdateRefId}\n                  onUpdateExpressionType={(refId, type) => {\n                    dispatch(updateExpressionType({ refId, type }));\n                  }}\n                  onUpdateQueryExpression={(model) => {\n                    dispatch(updateExpression(model));\n                  }}\n                />\n              </>\n            )}\n            {/* action buttons */}\n            <Stack direction=\"column\">\n              {simplifiedQueryStep && (\n                <SimpleConditionEditor\n                  simpleCondition={simpleCondition}\n                  onChange={setSimpleCondition}\n                  expressionQueriesList={expressionQueries}\n                  dispatch={dispatch}\n                  previewData={queryPreviewData[condition ?? '']}\n                />\n              )}\n              <Stack direction=\"row\">\n                {!simplifiedQueryStep && config.expressionsEnabled && <TypeSelectorButton onClickType={onClickType} />}\n\n                {isPreviewLoading && (\n                  <Button icon=\"spinner\" type=\"button\" variant=\"destructive\" onClick={cancelQueries}>\n                    <Trans i18nKey=\"alerting.common.cancel\">Cancel</Trans>\n                  </Button>\n                )}\n                {!isPreviewLoading && (\n                  <Button\n                    data-testid={selectors.components.AlertRules.previewButton}\n                    icon=\"sync\"\n                    type=\"button\"\n                    onClick={() => runQueriesPreview()}\n                    disabled={emptyQueries}\n                  >\n                    {!simplifiedQueryStep\n                      ? t('alerting.queryAndExpressionsStep.preview', 'Preview')\n                      : t('alerting.queryAndExpressionsStep.previewCondition', 'Preview alert rule condition')}\n                  </Button>\n                )}\n              </Stack>\n            </Stack>\n\n            {/* No Queries */}\n            {emptyQueries && (\n              <Alert\n                title={t(\n                  'alerting.query-and-expressions-step.title-queries-expressions-configured',\n                  'No queries or expressions have been configured'\n                )}\n                severity=\"warning\"\n              >\n                Create at least one query or expression to be alerted on\n              </Alert>\n            )}\n          </Stack>\n        )}\n      </RuleEditorSection>\n\n      <ConfirmModal\n        isOpen={showResetModeModal}\n        title={t(\n          'alerting.query-and-expressions-step.title-deactivate-advanced-options',\n          'Deactivate advanced options'\n        )}\n        body={\n          <div>\n            <Text element=\"p\">\n              <Trans i18nKey=\"alerting.queryAndExpressionsStep.disableAdvancedOptions.text\">\n                The selected queries and expressions cannot be converted to default. If you deactivate advanced options,\n                your query and condition will be reset to default settings.\n              </Trans>\n            </Text>\n            <br />\n          </div>\n        }\n        confirmText=\"Deactivate\"\n        icon=\"exclamation-triangle\"\n        onConfirm={() => {\n          setValue('editorSettings.simplifiedQueryEditor', true);\n          setShowResetModal(false);\n          dispatch(resetToSimpleCondition());\n        }}\n        onDismiss={() => setShowResetModal(false)}\n      />\n    </>\n  );\n};\n\nfunction TypeSelectorButton({ onClickType }: { onClickType: (type: ExpressionQueryType) => void }) {\n  const newMenu = (\n    <Menu>\n      {expressionTypes.map((type) => (\n        <Tooltip key={type.value} content={type.description ?? ''} placement=\"right\">\n          <MenuItem\n            key={type.value}\n            onClick={() => onClickType(type.value ?? ExpressionQueryType.math)}\n            label={type.label ?? ''}\n          />\n        </Tooltip>\n      ))}\n    </Menu>\n  );\n\n  return (\n    <Dropdown overlay={newMenu}>\n      <Button variant=\"secondary\" data-testid={'add-expression-button'}>\n        Add expression\n        <Icon name=\"angle-down\" />\n      </Button>\n    </Dropdown>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  addQueryButton: css({\n    width: 'fit-content',\n  }),\n  helpInfo: css({\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n    width: 'fit-content',\n    fontWeight: theme.typography.fontWeightMedium,\n    marginLeft: theme.spacing(1),\n    fontSize: theme.typography.size.sm,\n    cursor: 'pointer',\n  }),\n  helpInfoText: css({\n    marginLeft: theme.spacing(0.5),\n    textDecoration: 'underline',\n  }),\n  infoLink: css({\n    color: theme.colors.text.link,\n  }),\n});\n\nconst useSetExpressionAndDataSource = () => {\n  const { setValue } = useFormContext<RuleFormValues>();\n\n  return (updatedQueries: AlertQuery[]) => {\n    // update data source name and expression if it's been changed in the queries from the reducer when prom or loki query\n    const query = updatedQueries[0];\n    if (!query) {\n      return;\n    }\n\n    const dataSourceSettings = getDataSourceSrv().getInstanceSettings(query.datasourceUid);\n    if (!dataSourceSettings) {\n      throw new Error('The Data source has not been defined.');\n    }\n\n    if (isPromOrLokiQuery(query.model)) {\n      const expression = query.model.expr;\n      setValue('expression', expression);\n    }\n  };\n};\n","import { useEffect, useState } from 'react';\n\nimport { DataSourceInstanceSettings } from '@grafana/data';\n\nimport { featureDiscoveryApi } from '../api/featureDiscoveryApi';\nimport { getRulesDataSources } from '../utils/datasource';\n\nconst { useLazyDiscoverDsFeaturesQuery } = featureDiscoveryApi;\n\nexport function useRulesSourcesWithRuler(): {\n  rulesSourcesWithRuler: DataSourceInstanceSettings[];\n  isLoading: boolean;\n} {\n  const [rulesSourcesWithRuler, setRulesSourcesWithRuler] = useState<DataSourceInstanceSettings[]>([]);\n  const [discoverDsFeatures, { isLoading }] = useLazyDiscoverDsFeaturesQuery();\n\n  useEffect(() => {\n    const dataSources = getRulesDataSources();\n    dataSources.forEach(async (ds) => {\n      const { data: dsFeatures } = await discoverDsFeatures({ uid: ds.uid }, true);\n      if (dsFeatures?.rulerConfig) {\n        setRulesSourcesWithRuler((prev) => [...prev, ds]);\n      }\n    });\n  }, [discoverDsFeatures]);\n\n  return { rulesSourcesWithRuler, isLoading };\n}\n","import { css } from '@emotion/css';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, LinkButton, useStyles2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\ninterface AlertWarningProps {\n  title: string;\n  children: React.ReactNode;\n}\nexport function AlertWarning({ title, children }: AlertWarningProps) {\n  return (\n    <Alert className={useStyles2(warningStyles).warning} severity=\"warning\" title={title}>\n      <p>{children}</p>\n      <LinkButton href=\"alerting/list\">\n        <Trans i18nKey=\"alerting.alert-warning.to-rule-list\">To rule list</Trans>\n      </LinkButton>\n    </Alert>\n  );\n}\n\nconst warningStyles = (theme: GrafanaTheme2) => ({\n  warning: css({\n    margin: theme.spacing(4),\n  }),\n});\n","export interface GrafanaGroupUpdatedResponse {\n  message: string;\n  /**\n   * UIDs of rules created from this request\n   */\n  created?: string[];\n  /**\n   * UIDs of rules updated from this request\n   */\n  updated?: string[];\n}\n\nexport interface CloudGroupUpdatedResponse {\n  error: string;\n  errorType: string;\n  status: 'error' | 'success';\n}\n\nexport type RulerGroupUpdatedResponse = GrafanaGroupUpdatedResponse | CloudGroupUpdatedResponse;\n\nexport function isGrafanaGroupUpdatedResponse(\n  response: RulerGroupUpdatedResponse\n): response is GrafanaGroupUpdatedResponse {\n  return 'message' in response;\n}\n\nexport function isCloudGroupUpdatedResponse(\n  response: RulerGroupUpdatedResponse\n): response is CloudGroupUpdatedResponse {\n  return 'status' in response;\n}\n","import { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { ExportFormats, allGrafanaExportProviders } from './providers';\n\ninterface GrafanaRuleExportPreviewProps {\n  alertUid: string;\n  exportFormat: ExportFormats;\n  onClose: () => void;\n}\n\nconst GrafanaRuleExportPreview = ({ alertUid, exportFormat, onClose }: GrafanaRuleExportPreviewProps) => {\n  const { currentData: ruleTextDefinition = '', isFetching } = alertRuleApi.endpoints.exportRules.useQuery({\n    ruleUid: alertUid,\n    format: exportFormat,\n  });\n\n  const downloadFileName = `${alertUid}-${new Date().getTime()}`;\n\n  if (isFetching) {\n    return <LoadingPlaceholder text={t('alerting.grafana-rule-export-preview.text-loading', 'Loading....')} />;\n  }\n\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={ruleTextDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n};\n\ninterface GrafanaRulerExporterProps {\n  onClose: () => void;\n  alertUid: string;\n}\n\nexport const GrafanaRuleExporter = ({ onClose, alertUid }: GrafanaRulerExporterProps) => {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n\n  return (\n    <GrafanaExportDrawer\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      <GrafanaRuleExportPreview alertUid={alertUid} exportFormat={activeTab} onClose={onClose} />\n    </GrafanaExportDrawer>\n  );\n};\n","import { css } from '@emotion/css';\nimport { useMemo } from 'react';\nimport { Controller, useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Field, VirtualizedSelect, useStyles2 } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { RuleFormValues } from '../../types/rule-form';\n\nimport { useGetNameSpacesByDatasourceName } from './useAlertRuleSuggestions';\n\ninterface Props {\n  rulesSourceName: string;\n}\n\nexport const GroupAndNamespaceFields = ({ rulesSourceName }: Props) => {\n  const {\n    control,\n    watch,\n    formState: { errors },\n    setValue,\n  } = useFormContext<RuleFormValues>();\n\n  const style = useStyles2(getStyle);\n  const { namespaceGroups, isLoading } = useGetNameSpacesByDatasourceName(rulesSourceName);\n\n  const namespace = watch('namespace');\n\n  const namespaceOptions: Array<SelectableValue<string>> = useMemo(\n    () =>\n      Array.from(namespaceGroups.keys()).map((namespace) => ({\n        label: namespace,\n        value: namespace,\n      })),\n    [namespaceGroups]\n  );\n\n  const groupOptions: Array<SelectableValue<string>> = useMemo(\n    () => (namespace && namespaceGroups.get(namespace)?.map((group) => ({ label: group, value: group }))) || [],\n    [namespace, namespaceGroups]\n  );\n\n  return (\n    <div className={style.flexRow}>\n      <Field\n        data-testid=\"namespace-picker\"\n        label={t('alerting.group-and-namespace-fields.namespace-picker-label-namespace', 'Namespace')}\n        // Disable translations as we don't intend to use this dropdown longterm,\n        // so avoiding us adding translations for the sake of it\n        // eslint-disable-next-line @grafana/no-untranslated-strings\n        description=\"Type to search for an existing namespace or create a new one\"\n        error={errors.namespace?.message}\n        invalid={!!errors.namespace?.message}\n      >\n        <Controller\n          render={({ field: { onChange, ref, ...field } }) => (\n            <VirtualizedSelect\n              {...field}\n              allowCustomValue\n              className={style.input}\n              onChange={(value) => {\n                setValue('group', ''); //reset if namespace changes\n                onChange(value.value);\n              }}\n              options={namespaceOptions}\n              width={42}\n              isLoading={isLoading}\n              disabled={isLoading}\n            />\n          )}\n          name=\"namespace\"\n          control={control}\n          rules={{\n            required: { value: true, message: 'Required.' },\n          }}\n        />\n      </Field>\n      <Field\n        data-testid=\"group-picker\"\n        label={t('alerting.group-and-namespace-fields.group-picker-label-group', 'Group')}\n        // Disable translations as we don't intend to use this dropdown longterm,\n        // so avoiding us adding translations for the sake of it\n        // eslint-disable-next-line @grafana/no-untranslated-strings\n        description=\"Type to search for an existing group or create a new one\"\n        error={errors.group?.message}\n        invalid={!!errors.group?.message}\n      >\n        <Controller\n          render={({ field: { ref, ...field } }) => (\n            <VirtualizedSelect\n              {...field}\n              allowCustomValue\n              options={groupOptions}\n              width={42}\n              onChange={(value) => {\n                setValue('group', value.value ?? '');\n              }}\n              className={style.input}\n              isLoading={isLoading}\n              disabled={isLoading}\n            />\n          )}\n          name=\"group\"\n          control={control}\n          rules={{\n            required: { value: true, message: 'Required.' },\n          }}\n        />\n      </Field>\n    </div>\n  );\n};\n\nconst getStyle = (theme: GrafanaTheme2) => ({\n  flexRow: css({\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n\n    '& > * + *': {\n      marginLeft: theme.spacing(3),\n    },\n  }),\n  input: css({\n    width: '330px !important',\n  }),\n});\n","import { css } from '@emotion/css';\nimport { Controller, useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Field, Input, Select, useStyles2 } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { RuleFormType, RuleFormValues } from '../../types/rule-form';\nimport { timeOptions } from '../../utils/time';\n\nimport { GroupAndNamespaceFields } from './GroupAndNamespaceFields';\nimport { PreviewRule } from './PreviewRule';\nimport { RuleEditorSection } from './RuleEditorSection';\n\nexport const CloudEvaluationBehavior = () => {\n  const styles = useStyles2(getStyles);\n  const {\n    register,\n    control,\n    watch,\n    formState: { errors },\n  } = useFormContext<RuleFormValues>();\n\n  const type = watch('type');\n  const dataSourceName = watch('dataSourceName');\n\n  return (\n    <RuleEditorSection\n      stepNo={3}\n      title={t('alerting.cloud-evaluation-behavior.title-set-evaluation-behavior', 'Set evaluation behavior')}\n    >\n      <Field\n        label={t('alerting.cloud-evaluation-behavior.label-pending-period', 'Pending period')}\n        description='Period during which the threshold condition must be met to trigger an alert. Selecting \"None\" triggers the alert immediately once the condition is met.'\n      >\n        <div className={styles.flexRow}>\n          <Field invalid={!!errors.forTime?.message} error={errors.forTime?.message} className={styles.inlineField}>\n            <Input\n              {...register('forTime', { pattern: { value: /^\\d+$/, message: 'Must be a positive integer.' } })}\n              width={8}\n            />\n          </Field>\n          <Controller\n            name=\"forTimeUnit\"\n            render={({ field: { onChange, ref, ...field } }) => (\n              <Select\n                {...field}\n                options={timeOptions}\n                onChange={(value) => onChange(value?.value)}\n                width={15}\n                className={styles.timeUnit}\n              />\n            )}\n            control={control}\n          />\n        </div>\n      </Field>\n      {type === RuleFormType.cloudAlerting && dataSourceName && (\n        <GroupAndNamespaceFields rulesSourceName={dataSourceName} />\n      )}\n\n      <PreviewRule />\n    </RuleEditorSection>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  inlineField: css({\n    marginBottom: 0,\n  }),\n  flexRow: css({\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    alignItems: 'flex-start',\n  }),\n  timeUnit: css({\n    marginLeft: theme.spacing(0.5),\n  }),\n});\n","import { useFormContext } from 'react-hook-form';\n\nimport { t } from 'app/core/internationalization';\n\nimport { RuleFormValues } from '../../types/rule-form';\n\nimport { GroupAndNamespaceFields } from './GroupAndNamespaceFields';\nimport { RuleEditorSection } from './RuleEditorSection';\n\nexport function RecordingRulesNameSpaceAndGroupStep() {\n  const { watch } = useFormContext<RuleFormValues>();\n\n  const dataSourceName = watch('dataSourceName');\n\n  if (!dataSourceName) {\n    return null;\n  }\n\n  return (\n    <RuleEditorSection\n      stepNo={3}\n      title={t(\n        'alerting.recording-rules-name-space-and-group-step.title-add-namespace-and-group',\n        'Add namespace and group'\n      )}\n      description={t(\n        'alerting.recording-rules-name-space-and-group-step.description-select-namespace-group-recording',\n        'Select the Namespace and Group for your recording rule.'\n      )}\n    >\n      <GroupAndNamespaceFields rulesSourceName={dataSourceName} />\n    </RuleEditorSection>\n  );\n}\n","import { css } from '@emotion/css';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { FormProvider, SubmitErrorHandler, UseFormWatch, useForm } from 'react-hook-form';\nimport { useParams } from 'react-router-dom-v5-compat';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config, locationService } from '@grafana/runtime';\nimport { Alert, Button, ConfirmModal, Spinner, Stack, useStyles2 } from '@grafana/ui';\nimport { AppChromeUpdate } from 'app/core/components/AppChrome/AppChromeUpdate';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { contextSrv } from 'app/core/core';\nimport { Trans, t } from 'app/core/internationalization';\nimport InfoPausedRule from 'app/features/alerting/unified/components/InfoPausedRule';\nimport {\n  getRuleGroupLocationFromFormValues,\n  getRuleGroupLocationFromRuleWithLocation,\n  isCloudAlertingRuleByType,\n  isCloudRecordingRuleByType,\n  isGrafanaManagedRuleByType,\n  isPausedRule,\n  isRecordingRuleByType,\n  rulerRuleType,\n} from 'app/features/alerting/unified/utils/rules';\nimport { isExpressionQuery } from 'app/features/expressions/guards';\nimport { RuleGroupIdentifier, RuleIdentifier, RuleWithLocation } from 'app/types/unified-alerting';\nimport { PostableRuleGrafanaRuleDTO, RulerRuleDTO } from 'app/types/unified-alerting-dto';\n\nimport {\n  LogMessages,\n  logInfo,\n  logWarning,\n  trackAlertRuleFormCancelled,\n  trackAlertRuleFormError,\n  trackAlertRuleFormSaved,\n  trackNewGrafanaAlertRuleFormCancelled,\n  trackNewGrafanaAlertRuleFormError,\n  trackNewGrafanaAlertRuleFormSavedSuccess,\n} from '../../../Analytics';\nimport {\n  GrafanaGroupUpdatedResponse,\n  RulerGroupUpdatedResponse,\n  isGrafanaGroupUpdatedResponse,\n} from '../../../api/alertRuleModel';\nimport { shouldUseAlertingListViewV2, shouldUsePrometheusRulesPrimary } from '../../../featureToggles';\nimport { useDeleteRuleFromGroup } from '../../../hooks/ruleGroup/useDeleteRuleFromGroup';\nimport { useAddRuleToRuleGroup, useUpdateRuleInRuleGroup } from '../../../hooks/ruleGroup/useUpsertRuleFromRuleGroup';\nimport { useReturnTo } from '../../../hooks/useReturnTo';\nimport {\n  defaultFormValuesForRuleType,\n  formValuesFromExistingRule,\n  formValuesFromPrefill,\n  translateRouteParamToRuleType,\n} from '../../../rule-editor/formDefaults';\nimport {\n  areQueriesTransformableToSimpleCondition,\n  isExpressionQueryInAlert,\n} from '../../../rule-editor/formProcessing';\nimport { RuleFormType, RuleFormValues } from '../../../types/rule-form';\nimport { rulesNav } from '../../../utils/navigation';\nimport {\n  MANUAL_ROUTING_KEY,\n  SIMPLIFIED_QUERY_EDITOR_KEY,\n  formValuesToRulerGrafanaRuleDTO,\n  formValuesToRulerRuleDTO,\n} from '../../../utils/rule-form';\nimport * as ruleId from '../../../utils/rule-id';\nimport { fromRulerRule, fromRulerRuleAndRuleGroupIdentifier, stringifyIdentifier } from '../../../utils/rule-id';\nimport { createRelativeUrl } from '../../../utils/url';\nimport { GrafanaRuleExporter } from '../../export/GrafanaRuleExporter';\nimport { AlertRuleNameAndMetric } from '../AlertRuleNameInput';\nimport AnnotationsStep from '../AnnotationsStep';\nimport { CloudEvaluationBehavior } from '../CloudEvaluationBehavior';\nimport { GrafanaEvaluationBehaviorStep } from '../GrafanaEvaluationBehavior';\nimport { GrafanaFolderAndLabelsStep } from '../GrafanaFolderAndLabelsStep';\nimport { NotificationsStep } from '../NotificationsStep';\nimport { RecordingRulesNameSpaceAndGroupStep } from '../RecordingRulesNameSpaceAndGroupStep';\nimport { RuleInspector } from '../RuleInspector';\nimport { QueryAndExpressionsStep } from '../query-and-alert-condition/QueryAndExpressionsStep';\n\ntype Props = {\n  existing?: RuleWithLocation;\n  prefill?: Partial<RuleFormValues>; // Existing implies we modify existing rule. Prefill only provides default form values\n  isManualRestore?: boolean;\n};\n\nconst prometheusRulesPrimary = shouldUsePrometheusRulesPrimary();\nconst alertingListViewV2 = shouldUseAlertingListViewV2();\n\nexport const AlertRuleForm = ({ existing, prefill, isManualRestore }: Props) => {\n  const styles = useStyles2(getStyles);\n  const notifyApp = useAppNotification();\n  const { redirectToDetailsPage } = useRedirectToDetailsPage();\n  const [showEditYaml, setShowEditYaml] = useState(false);\n\n  const [deleteRuleFromGroup] = useDeleteRuleFromGroup();\n  const [addRuleToRuleGroup] = useAddRuleToRuleGroup();\n  const [updateRuleInRuleGroup] = useUpdateRuleInRuleGroup();\n\n  const { returnTo } = useReturnTo();\n  const routeParams = useParams<{ type: string; id: string }>();\n  const ruleType = translateRouteParamToRuleType(routeParams.type);\n\n  const uidFromParams = routeParams.id || '';\n\n  const [showDeleteModal, setShowDeleteModal] = useState<boolean>(false);\n\n  const defaultValues: RuleFormValues = useMemo(() => {\n    // If we have an existing AND a prefill, then we're coming from the restore dialog\n    // and we want to merge the two\n    if (existing && prefill) {\n      return { ...formValuesFromExistingRule(existing), ...formValuesFromPrefill(prefill) };\n    }\n    if (existing) {\n      return formValuesFromExistingRule(existing);\n    }\n\n    if (prefill) {\n      return formValuesFromPrefill(prefill);\n    }\n\n    const defaultRuleType = ruleType || RuleFormType.grafana;\n\n    return defaultFormValuesForRuleType(defaultRuleType);\n  }, [existing, prefill, ruleType]);\n\n  const formAPI = useForm<RuleFormValues>({\n    mode: 'onSubmit',\n    defaultValues,\n    shouldFocusError: true,\n  });\n\n  const {\n    handleSubmit,\n    watch,\n    formState: { isSubmitting },\n    trigger,\n  } = formAPI;\n\n  useEffect(() => {\n    // If the user is manually restoring an old version of a rule,\n    // we should trigger validation on the form so any problem areas are clearly highlighted for them to action\n    if (isManualRestore) {\n      trigger();\n    }\n  }, [isManualRestore, trigger]);\n  const type = watch('type');\n  const grafanaTypeRule = isGrafanaManagedRuleByType(type ?? RuleFormType.grafana);\n\n  const dataSourceName = watch('dataSourceName');\n\n  const showDataSourceDependantStep = Boolean(type && (isGrafanaManagedRuleByType(type) || !!dataSourceName));\n\n  const [conditionErrorMsg, setConditionErrorMsg] = useState('');\n\n  const checkAlertCondition = (msg = '') => {\n    setConditionErrorMsg(msg);\n  };\n\n  // @todo why is error not propagated to form?\n  const submit = async (values: RuleFormValues, exitOnSave: boolean) => {\n    const { type, evaluateEvery } = values;\n\n    if (conditionErrorMsg !== '') {\n      notifyApp.error(conditionErrorMsg);\n      if (!existing && grafanaTypeRule) {\n        // new Grafana-managed rule\n        trackNewGrafanaAlertRuleFormError();\n      }\n      return;\n    }\n\n    trackAlertRuleFormSaved({ formAction: existing ? 'update' : 'create', ruleType: type });\n\n    const ruleDefinition = grafanaTypeRule ? formValuesToRulerGrafanaRuleDTO(values) : formValuesToRulerRuleDTO(values);\n\n    const ruleGroupIdentifier = existing\n      ? getRuleGroupLocationFromRuleWithLocation(existing)\n      : getRuleGroupLocationFromFormValues(values);\n\n    const targetRuleGroupIdentifier = getRuleGroupLocationFromFormValues(values);\n\n    let saveResult: RulerGroupUpdatedResponse;\n    // @TODO move this to a hook too to make sure the logic here is tested for regressions?\n    if (!existing) {\n      // when creating a new rule, we save the manual routing setting , and editorSettings.simplifiedQueryEditor to the local storage\n      storeInLocalStorageValues(values);\n      // save the rule to the rule group\n      saveResult = await addRuleToRuleGroup.execute(ruleGroupIdentifier, ruleDefinition, evaluateEvery);\n      // track the new Grafana-managed rule creation in the analytics\n      if (grafanaTypeRule) {\n        const dataQueries = values.queries.filter((query) => !isExpressionQuery(query.model));\n        const expressionQueries = values.queries.filter((query) => isExpressionQueryInAlert(query));\n        trackNewGrafanaAlertRuleFormSavedSuccess({\n          simplifiedQueryEditor: values.editorSettings?.simplifiedQueryEditor ?? false,\n          simplifiedNotificationEditor: values.editorSettings?.simplifiedNotificationEditor ?? false,\n          canBeTransformedToSimpleQuery: areQueriesTransformableToSimpleCondition(dataQueries, expressionQueries),\n        });\n      }\n    } else {\n      // when updating an existing rule\n      const ruleIdentifier = fromRulerRuleAndRuleGroupIdentifier(ruleGroupIdentifier, existing.rule);\n      saveResult = await updateRuleInRuleGroup.execute(\n        ruleGroupIdentifier,\n        ruleIdentifier,\n        ruleDefinition,\n        targetRuleGroupIdentifier,\n        evaluateEvery\n      );\n    }\n\n    const { dataSourceName, namespaceName, groupName } = targetRuleGroupIdentifier;\n\n    // V2 list is based on eventually consistent Prometheus API.\n    // When a new rule group is created it takes a while for the new rule group to be reflected in the V2 list.\n    // To avoid user confusion we redirect to the details page which is driven by a strongly consistent Ruler API..\n    if (alertingListViewV2) {\n      redirectToDetailsPage(ruleDefinition, targetRuleGroupIdentifier, saveResult);\n      return;\n    }\n\n    if (exitOnSave) {\n      const returnToUrl = returnTo || getReturnToUrl(targetRuleGroupIdentifier, ruleDefinition);\n\n      locationService.push(returnToUrl);\n      return;\n    } else {\n      // we stay in the same page\n\n      // Cloud Ruler rules identifier changes on update due to containing rule name and hash components\n      // After successful update we need to update the URL to avoid displaying 404 errors\n      if (rulerRuleType.dataSource.rule(ruleDefinition)) {\n        const updatedRuleIdentifier = fromRulerRule(dataSourceName, namespaceName, groupName, ruleDefinition);\n        locationService.replace(`/alerting/${encodeURIComponent(stringifyIdentifier(updatedRuleIdentifier))}/edit`);\n      }\n    }\n  };\n\n  const deleteRule = async () => {\n    if (existing) {\n      const ruleGroupIdentifier = getRuleGroupLocationFromRuleWithLocation(existing);\n      const ruleIdentifier = fromRulerRuleAndRuleGroupIdentifier(ruleGroupIdentifier, existing.rule);\n\n      await deleteRuleFromGroup.execute(ruleGroupIdentifier, ruleIdentifier);\n      locationService.replace(returnTo ?? '/alerting/list');\n    }\n  };\n\n  const onInvalid: SubmitErrorHandler<RuleFormValues> = (errors): void => {\n    trackAlertRuleFormError({\n      grafana_version: config.buildInfo.version,\n      org_id: contextSrv.user.orgId,\n      user_id: contextSrv.user.id,\n      error: Object.keys(errors).toString(),\n      formAction: existing ? 'update' : 'create',\n    });\n    notifyApp.error('There are errors in the form. Please correct them and try again!');\n  };\n\n  const cancelRuleCreation = () => {\n    logInfo(LogMessages.cancelSavingAlertRule);\n    trackAlertRuleFormCancelled({ formAction: existing ? 'update' : 'create' });\n    if (!existing && grafanaTypeRule) {\n      // new Grafana-managed rule\n      trackNewGrafanaAlertRuleFormCancelled();\n    }\n    locationService.getHistory().goBack();\n  };\n\n  const actionButtons = (\n    <Stack justifyContent=\"flex-end\" alignItems=\"center\">\n      {existing && (\n        <Button\n          data-testid=\"save-rule\"\n          variant=\"primary\"\n          type=\"button\"\n          size=\"sm\"\n          onClick={handleSubmit((values) => submit(values, false), onInvalid)}\n          disabled={isSubmitting}\n        >\n          {isSubmitting && <Spinner className={styles.buttonSpinner} inline={true} />}\n          Save rule\n        </Button>\n      )}\n      <Button\n        data-testid=\"save-rule-and-exit\"\n        variant=\"primary\"\n        type=\"button\"\n        size=\"sm\"\n        onClick={handleSubmit((values) => submit(values, true), onInvalid)}\n        disabled={isSubmitting}\n      >\n        {isSubmitting && <Spinner className={styles.buttonSpinner} inline={true} />}\n        Save rule and exit\n      </Button>\n      <Button variant=\"secondary\" disabled={isSubmitting} type=\"button\" onClick={cancelRuleCreation} size=\"sm\">\n        <Trans i18nKey=\"alerting.common.cancel\">Cancel</Trans>\n      </Button>\n      {existing ? (\n        <Button fill=\"outline\" variant=\"destructive\" type=\"button\" onClick={() => setShowDeleteModal(true)} size=\"sm\">\n          <Trans i18nKey=\"alerting.alert-rule-form.action-buttons.delete\">Delete</Trans>\n        </Button>\n      ) : null}\n      {existing && isCortexLokiOrRecordingRule(watch) && (\n        <Button\n          variant=\"secondary\"\n          type=\"button\"\n          onClick={() => setShowEditYaml(true)}\n          disabled={isSubmitting}\n          size=\"sm\"\n        >\n          <Trans i18nKey=\"alerting.alert-rule-form.action-buttons.edit-yaml\">Edit YAML</Trans>\n        </Button>\n      )}\n    </Stack>\n  );\n\n  const isPaused = rulerRuleType.grafana.alertingRule(existing?.rule) && isPausedRule(existing?.rule);\n\n  if (!type) {\n    return null;\n  }\n  return (\n    <FormProvider {...formAPI}>\n      <AppChromeUpdate actions={actionButtons} />\n      <form onSubmit={(e) => e.preventDefault()} className={styles.form}>\n        <div className={styles.contentOuter}>\n          {isManualRestore && (\n            <Alert\n              severity=\"warning\"\n              title={t('alerting.alertVersionHistory.warning-restore-manually-title', 'Restoring rule manually')}\n            >\n              <Trans i18nKey=\"alerting.alertVersionHistory.warning-restore-manually\">\n                You are manually restoring an old version of this alert rule. Please review the changes carefully before\n                saving the rule definition.\n              </Trans>\n            </Alert>\n          )}\n          {isPaused && <InfoPausedRule />}\n          <Stack direction=\"column\" gap={3}>\n            {/* Step 1 */}\n            <AlertRuleNameAndMetric />\n            {/* Step 2 */}\n            <QueryAndExpressionsStep editingExistingRule={!!existing} onDataChange={checkAlertCondition} mode=\"edit\" />\n            {/* Step 3-4-5 */}\n            {showDataSourceDependantStep && (\n              <>\n                {/* Step 3 */}\n                {isGrafanaManagedRuleByType(type) && <GrafanaFolderAndLabelsStep />}\n\n                {isCloudAlertingRuleByType(type) && <CloudEvaluationBehavior />}\n\n                {isCloudRecordingRuleByType(type) && <RecordingRulesNameSpaceAndGroupStep />}\n\n                {/* Step 4 & 5 & 6*/}\n                {isGrafanaManagedRuleByType(type) && (\n                  <GrafanaEvaluationBehaviorStep existing={Boolean(existing)} enableProvisionedGroups={false} />\n                )}\n                {/* Notifications step*/}\n                <NotificationsStep alertUid={uidFromParams} />\n                {/* Annotations only for alerting rules */}\n                {!isRecordingRuleByType(type) && <AnnotationsStep />}\n              </>\n            )}\n          </Stack>\n        </div>\n      </form>\n      {showDeleteModal ? (\n        <ConfirmModal\n          isOpen={true}\n          title={t('alerting.alert-rule-form.title-delete-rule', 'Delete rule')}\n          body=\"Deleting this rule will permanently remove it. Are you sure you want to delete this rule?\"\n          confirmText=\"Yes, delete\"\n          icon=\"exclamation-triangle\"\n          onConfirm={deleteRule}\n          onDismiss={() => setShowDeleteModal(false)}\n        />\n      ) : null}\n      {showEditYaml ? (\n        isGrafanaManagedRuleByType(type) ? (\n          <GrafanaRuleExporter alertUid={uidFromParams} onClose={() => setShowEditYaml(false)} />\n        ) : (\n          <RuleInspector onClose={() => setShowEditYaml(false)} />\n        )\n      ) : null}\n    </FormProvider>\n  );\n};\n\nfunction useRedirectToDetailsPage() {\n  const notifyApp = useAppNotification();\n\n  const redirectGrafanaRule = useCallback(\n    (saveResult: GrafanaGroupUpdatedResponse) => {\n      const newOrUpdatedRuleUid = saveResult.created?.at(0) || saveResult.updated?.at(0);\n      if (newOrUpdatedRuleUid) {\n        locationService.replace(\n          rulesNav.detailsPageLink('grafana', { uid: newOrUpdatedRuleUid, ruleSourceName: 'grafana' })\n        );\n      } else {\n        notifyApp.error(\n          'Cannot navigate to the new rule details page.',\n          'The rule was created but the UID is missing.'\n        );\n        logWarning('Cannot navigate to the new rule details page. The rule was created but the UID is missing.');\n      }\n    },\n    [notifyApp]\n  );\n\n  const redirectCloudRulerRule = useCallback((rule: RulerRuleDTO, groupId: RuleGroupIdentifier) => {\n    const { dataSourceName, namespaceName, groupName } = groupId;\n    const updatedRuleIdentifier = fromRulerRule(dataSourceName, namespaceName, groupName, rule);\n    locationService.replace(rulesNav.detailsPageLink(updatedRuleIdentifier.ruleSourceName, updatedRuleIdentifier));\n  }, []);\n\n  const redirectToDetailsPage = useCallback(\n    (\n      rule: RulerRuleDTO | PostableRuleGrafanaRuleDTO,\n      groupId: RuleGroupIdentifier,\n      saveResult: RulerGroupUpdatedResponse\n    ) => {\n      if (isGrafanaGroupUpdatedResponse(saveResult)) {\n        redirectGrafanaRule(saveResult);\n        return;\n      } else if (rulerRuleType.dataSource.rule(rule)) {\n        redirectCloudRulerRule(rule, groupId);\n        return;\n      }\n\n      logWarning(\n        'Cannot navigate to the new rule details page. The response is not a GrafanaGroupUpdatedResponse and ruleDefinition is not a Cloud Ruler rule.',\n        { ruleFormType: rulerRuleType.dataSource.rule(rule) ? 'datasource' : 'grafana' }\n      );\n    },\n    [redirectGrafanaRule, redirectCloudRulerRule]\n  );\n\n  return { redirectToDetailsPage };\n}\n\nfunction getReturnToUrl(groupId: RuleGroupIdentifier, rule: RulerRuleDTO | PostableRuleGrafanaRuleDTO) {\n  const { dataSourceName, namespaceName, groupName } = groupId;\n\n  if (prometheusRulesPrimary && rulerRuleType.dataSource.rule(rule)) {\n    const ruleIdentifier = fromRulerRule(dataSourceName, namespaceName, groupName, rule);\n    return createViewLinkFromIdentifier(ruleIdentifier);\n  }\n\n  // TODO We could add namespace and group filters but for GMA the namespace = uid which doesn't work with the filters\n  return '/alerting/list';\n}\n\n// The result of this function is passed to locationService.push()\n// Hence it cannot contain the subpath prefix, so we cannot use createRelativeUrl for it\nfunction createViewLinkFromIdentifier(identifier: RuleIdentifier, returnTo?: string) {\n  const paramId = encodeURIComponent(ruleId.stringifyIdentifier(identifier));\n  const paramSource = encodeURIComponent(identifier.ruleSourceName);\n\n  return createRelativeUrl(`/alerting/${paramSource}/${paramId}/view`, returnTo ? { returnTo } : {});\n}\n\nconst isCortexLokiOrRecordingRule = (watch: UseFormWatch<RuleFormValues>) => {\n  const [ruleType, dataSourceName] = watch(['type', 'dataSourceName']);\n\n  return (ruleType === RuleFormType.cloudAlerting || ruleType === RuleFormType.cloudRecording) && dataSourceName !== '';\n};\n\nfunction storeInLocalStorageValues(values: RuleFormValues) {\n  const { manualRouting, editorSettings } = values;\n\n  if (manualRouting) {\n    localStorage.setItem(MANUAL_ROUTING_KEY, 'true');\n  } else {\n    localStorage.setItem(MANUAL_ROUTING_KEY, 'false');\n  }\n\n  if (editorSettings) {\n    if (editorSettings.simplifiedQueryEditor) {\n      localStorage.setItem(SIMPLIFIED_QUERY_EDITOR_KEY, 'true');\n    } else {\n      localStorage.setItem(SIMPLIFIED_QUERY_EDITOR_KEY, 'false');\n    }\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  buttonSpinner: css({\n    marginRight: theme.spacing(1),\n  }),\n  form: css({\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  }),\n  contentOuter: css({\n    background: theme.colors.background.primary,\n    overflow: 'hidden',\n    maxWidth: theme.breakpoints.values.xl,\n    flex: 1,\n  }),\n  flexRow: css({\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n  }),\n});\n","import { cloneDeep } from 'lodash';\n\nimport { locationService } from '@grafana/runtime';\nimport { Alert, LoadingPlaceholder } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\nimport { RuleIdentifier, RuleWithLocation } from 'app/types/unified-alerting';\nimport { RulerRuleDTO } from 'app/types/unified-alerting-dto';\n\nimport { AlertRuleForm } from '../components/rule-editor/alert-rule-form/AlertRuleForm';\nimport { useRuleWithLocation } from '../hooks/useCombinedRule';\nimport { generateCopiedName } from '../utils/duplicate';\nimport { stringifyErrorLike } from '../utils/misc';\nimport { rulerRuleToFormValues } from '../utils/rule-form';\nimport { getRuleName, rulerRuleType } from '../utils/rules';\nimport { createRelativeUrl } from '../utils/url';\n\nexport function CloneRuleEditor({ sourceRuleId }: { sourceRuleId: RuleIdentifier }) {\n  const { loading, result: rule, error } = useRuleWithLocation({ ruleIdentifier: sourceRuleId });\n\n  if (loading) {\n    return <LoadingPlaceholder text={t('alerting.clone-rule-editor.text-loading-the-rule', 'Loading the rule...')} />;\n  }\n\n  if (rule) {\n    const ruleClone = cloneRuleDefinition(rule);\n    const formPrefill = rulerRuleToFormValues(ruleClone);\n\n    return <AlertRuleForm prefill={formPrefill} />;\n  }\n\n  if (error) {\n    return (\n      <Alert title={t('alerting.clone-rule-editor.title-error', 'Error')} severity=\"error\">\n        {stringifyErrorLike(error)}\n      </Alert>\n    );\n  }\n\n  return (\n    <Alert\n      title={t('alerting.clone-rule-editor.title-cannot-exist', 'Cannot copy the rule. The rule does not exist')}\n      buttonContent=\"Go back to alert list\"\n      onRemove={() => locationService.replace(createRelativeUrl('/alerting/list'))}\n    />\n  );\n}\n\nfunction changeRuleName(rule: RulerRuleDTO, newName: string) {\n  if (rulerRuleType.grafana.rule(rule)) {\n    rule.grafana_alert.title = newName;\n  }\n  if (rulerRuleType.dataSource.alertingRule(rule)) {\n    rule.alert = newName;\n  }\n\n  if (rulerRuleType.dataSource.recordingRule(rule)) {\n    rule.record = newName;\n  }\n}\n\nexport function cloneRuleDefinition(rule: RuleWithLocation<RulerRuleDTO>) {\n  const ruleClone = cloneDeep(rule);\n  changeRuleName(\n    ruleClone.rule,\n    generateCopiedName(getRuleName(ruleClone.rule), ruleClone.group.rules.map(getRuleName))\n  );\n\n  if (rulerRuleType.grafana.rule(ruleClone.rule)) {\n    ruleClone.rule.grafana_alert.uid = '';\n\n    // Provisioned alert rules have provisioned alert group which cannot be used in UI\n    if (Boolean(ruleClone.rule.grafana_alert.provenance)) {\n      ruleClone.group = { name: '', rules: ruleClone.group.rules };\n    }\n  }\n\n  return ruleClone;\n}\n","import { Alert, LoadingPlaceholder } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { Trans, t } from 'app/core/internationalization';\nimport { RuleIdentifier } from 'app/types/unified-alerting';\n\nimport { AlertWarning } from '../AlertWarning';\nimport { AlertRuleForm } from '../components/rule-editor/alert-rule-form/AlertRuleForm';\nimport { useRuleWithLocation } from '../hooks/useCombinedRule';\nimport { useIsRuleEditable } from '../hooks/useIsRuleEditable';\nimport { RuleFormValues } from '../types/rule-form';\nimport { stringifyErrorLike } from '../utils/misc';\nimport * as ruleId from '../utils/rule-id';\n\ninterface ExistingRuleEditorProps {\n  identifier: RuleIdentifier;\n  /** Provide prefill if we are trying to restore an old version of an alert rule but we need the user to manually tweak the values */\n  prefill?: Partial<RuleFormValues>;\n}\n\nexport function ExistingRuleEditor({ identifier, prefill }: ExistingRuleEditorProps) {\n  const [queryParams] = useQueryParams();\n  const isManualRestore = Boolean(queryParams.isManualRestore);\n\n  const {\n    loading: loadingAlertRule,\n    result: ruleWithLocation,\n    error: fetchRuleError,\n  } = useRuleWithLocation({ ruleIdentifier: identifier });\n\n  const ruleSourceName = ruleId.ruleIdentifierToRuleSourceName(identifier);\n  const {\n    isEditable,\n    loading: loadingEditable,\n    error: errorEditable,\n  } = useIsRuleEditable(ruleSourceName, ruleWithLocation?.rule);\n\n  // error handling for fetching rule and rule RBAC\n  if (fetchRuleError || errorEditable) {\n    return (\n      <Alert\n        severity=\"error\"\n        title={t('alerting.existing-rule-editor.title-failed-to-load-rule', 'Failed to load rule')}\n      >\n        {stringifyErrorLike(errorEditable ?? fetchRuleError)}\n      </Alert>\n    );\n  }\n\n  const loading = loadingAlertRule || loadingEditable;\n\n  if (loading) {\n    return <LoadingPlaceholder text={t('alerting.existing-rule-editor.text-loading-rule', 'Loading rule...')} />;\n  }\n\n  if (!ruleWithLocation && !loading) {\n    return (\n      <AlertWarning title={t('alerting.existing-rule-editor.title-rule-not-found', 'Rule not found')}>\n        <Trans i18nKey=\"alerting.existing-rule-editor.sorry-this-rule-does-not-exist\">\n          Sorry! This rule does not exist.\n        </Trans>\n      </AlertWarning>\n    );\n  }\n\n  if (isEditable === false) {\n    return (\n      <AlertWarning title={t('alerting.existing-rule-editor.title-cannot-edit-rule', 'Cannot edit rule')}>\n        <Trans i18nKey=\"alerting.existing-rule-editor.sorry-permission\">\n          Sorry! You do not have permission to edit this rule.\n        </Trans>\n      </AlertWarning>\n    );\n  }\n\n  return <AlertRuleForm existing={ruleWithLocation} prefill={prefill} isManualRestore={isManualRestore} />;\n}\n","import { useCallback } from 'react';\nimport { useParams } from 'react-router-dom-v5-compat';\n\nimport { NavModelItem } from '@grafana/data';\nimport { Trans, t } from 'app/core/internationalization';\nimport { RuleIdentifier } from 'app/types/unified-alerting';\n\nimport { AlertWarning } from '../AlertWarning';\nimport { AlertingPageWrapper } from '../components/AlertingPageWrapper';\nimport { AlertRuleForm } from '../components/rule-editor/alert-rule-form/AlertRuleForm';\nimport { useURLSearchParams } from '../hooks/useURLSearchParams';\nimport { useRulesAccess } from '../utils/accessControlHooks';\nimport * as ruleId from '../utils/rule-id';\nimport { withPageErrorBoundary } from '../withPageErrorBoundary';\n\nimport { CloneRuleEditor } from './CloneRuleEditor';\nimport { ExistingRuleEditor } from './ExistingRuleEditor';\nimport { formValuesFromQueryParams, translateRouteParamToRuleType } from './formDefaults';\n\ntype RuleEditorPathParams = {\n  id?: string;\n  type?: 'recording' | 'alerting' | 'grafana-recording';\n};\n\nconst defaultPageNav: Partial<NavModelItem> = {\n  icon: 'bell',\n  id: 'alert-rule-view',\n};\n\n// sadly we only get the \"type\" when a new rule is being created, when editing an existing recording rule we can't actually know it from the URL\nconst getPageNav = (identifier?: RuleIdentifier, type?: RuleEditorPathParams['type']) => {\n  if (type === 'recording' || type === 'grafana-recording') {\n    if (identifier) {\n      // this branch should never trigger actually, the type param isn't used when editing rules\n      return { ...defaultPageNav, id: 'alert-rule-edit', text: 'Edit recording rule' };\n    } else {\n      return { ...defaultPageNav, id: 'alert-rule-add', text: 'New recording rule' };\n    }\n  }\n\n  if (identifier) {\n    // keep this one ambiguous, don't mentiond a specific alert type here\n    return { ...defaultPageNav, id: 'alert-rule-edit', text: 'Edit rule' };\n  } else {\n    return { ...defaultPageNav, id: 'alert-rule-add', text: 'New alert rule' };\n  }\n};\n\nconst RuleEditor = () => {\n  const { identifier, type } = useRuleEditorPathParams();\n  const { copyFromIdentifier, queryDefaults, isManualRestore } = useRuleEditorQueryParams();\n\n  const { canCreateGrafanaRules, canCreateCloudRules, canEditRules } = useRulesAccess();\n\n  const getContent = useCallback(() => {\n    if (!identifier && !canCreateGrafanaRules && !canCreateCloudRules) {\n      return (\n        <AlertWarning title={t('alerting.rule-editor.get-content.title-cannot-create-rules', 'Cannot create rules')}>\n          <Trans i18nKey=\"alerting.rule-editor.get-content.sorry-allowed-create-rules\">\n            Sorry! You are not allowed to create rules.\n          </Trans>\n        </AlertWarning>\n      );\n    }\n\n    if (identifier && !canEditRules(identifier.ruleSourceName)) {\n      return (\n        <AlertWarning title={t('alerting.rule-editor.get-content.title-cannot-edit-rules', 'Cannot edit rules')}>\n          <Trans i18nKey=\"alerting.rule-editor.get-content.sorry-allowed-rules\">\n            Sorry! You are not allowed to edit rules.\n          </Trans>\n        </AlertWarning>\n      );\n    }\n\n    if (identifier) {\n      return <ExistingRuleEditor key={JSON.stringify(identifier)} identifier={identifier} prefill={queryDefaults} />;\n    }\n\n    if (copyFromIdentifier) {\n      return <CloneRuleEditor sourceRuleId={copyFromIdentifier} />;\n    }\n    // new alert rule\n    return <AlertRuleForm prefill={queryDefaults} isManualRestore={isManualRestore} />;\n  }, [\n    canCreateCloudRules,\n    canCreateGrafanaRules,\n    canEditRules,\n    copyFromIdentifier,\n    identifier,\n    queryDefaults,\n    isManualRestore,\n  ]);\n\n  return (\n    <AlertingPageWrapper navId=\"alert-list\" pageNav={getPageNav(identifier, type)}>\n      {getContent()}\n    </AlertingPageWrapper>\n  );\n};\n\n// The pageNav property makes it difficult to only rely on AlertingPageWrapper\n// to catch errors.\nexport default withPageErrorBoundary(RuleEditor);\n\nfunction useRuleEditorPathParams() {\n  const params = useParams<RuleEditorPathParams>();\n  const { type } = params;\n  const id = ruleId.getRuleIdFromPathname(params);\n  const identifier = ruleId.tryParse(id, true);\n\n  return { identifier, type };\n}\n\nfunction useRuleEditorQueryParams() {\n  const { type } = useParams<RuleEditorPathParams>();\n\n  const [searchParams] = useURLSearchParams();\n  const copyFromId = searchParams.get('copyFrom') ?? undefined;\n  const copyFromIdentifier = ruleId.tryParse(copyFromId);\n  const isManualRestore = searchParams.has('isManualRestore');\n\n  const ruleType = translateRouteParamToRuleType(type);\n\n  const queryDefaults = searchParams.has('defaults')\n    ? formValuesFromQueryParams(searchParams.get('defaults') ?? '', ruleType)\n    : undefined;\n\n  return { copyFromIdentifier, queryDefaults, isManualRestore };\n}\n","import { useMemo } from 'react';\n\nimport { getRulesAccess } from './access-control';\n\nexport function useRulesAccess() {\n  return useMemo(() => getRulesAccess(), []);\n}\n","export function generateCopiedName(originalName: string, exisitingNames: string[]) {\n  const nonDuplicateName = originalName.replace(/\\(copy( [0-9]+)?\\)$/, '').trim();\n\n  let newName = `${nonDuplicateName} (copy)`;\n\n  for (let i = 2; exisitingNames.includes(newName); i++) {\n    newName = `${nonDuplicateName} (copy ${i})`;\n  }\n\n  return newName;\n}\n"],"names":["CreateNewFolder","onCreate","isCreatingFolder","setIsCreatingFolder","handleCreate","folder","FolderCreationModal","onClose","styles","getStyles","notifyApp","title","setTitle","createFolder","onSubmit","data","error","e","theme","ExportNewGrafanaRulePage","GrafanaModifyExport","id","ruleIdentifier","RuleModifyExport","loading","rulerRule","GrafanaModifyExportPage","recordingRuleNameValidationPattern","type","AlertRuleNameAndMetric","control","register","watch","errors","setValue","ruleFormType","isRecording","isGrafanaRecordingRule","isCloudRecordingRule","recordingLabel","namePlaceholder","entityName","onChange","ref","field","ds","CloudRulesSourcePicker","value","disabled","props","dataSourcesWithRuler","isLoading","dataSourceFilter","uid","FolderSelector","resetGroup","handleFolderCreation","Stack","Field","Label","NestedFolderPicker","GrafanaFolderAndLabelsStep","getValues","showLabelsEditor","setShowLabelsEditor","onCloseLabelsEditor","labelsToUpdate","SectionDescription","Text","NeedHelpInfo","RuleEditorSection","LabelsFieldInForm","LabelsEditorModal","ContactPointDetails","receivers","receiver","index","metadata","pluginMetadata","key","ContactPoint","alertManager","onSelectContactPoint","trigger","setError","contactPointInForm","handleError","err","validateContactPoint","ContactPointSelector","_","LinkToContactPoints","FieldValidationMessage","TextLink","MuteTimingFields","alertmanager","MuteTimingsSelector","RouteTimings","formStyles","routeTimingsFields","PromDurationInput","groupInterval","REQUIRED_FIELDS_IN_GROUPBY","DEFAULTS_TIMINGS","DISABLE_GROUPING","RoutingSettings","groupByOptions","setGroupByOptions","groupIntervalValue","groupWaitValue","repeatIntervalValue","overrideGrouping","overrideTimings","groupByCount","InlineField","Switch","opt","opts","MultiValue","AlertManagerManualRouting","alertManagerName","selectedContactPointWithMetadata","setSelectedContactPointWithMetadata","contactPoints","useContactPoints","contactPointWithMetadata","cp","contactPoint","hasRouteSettings","CollapsableSection","SimplifiedRouting","contactPointsInAlert","alertManagersDataSourcesWithConfigAPI","am","selectedContactPoint","alertManagerContactPoint","NotificationPreviewByAlertManager","NotificationPreview","alertQueries","customLabels","condition","alertName","alertUid","previewEndpoint","alertRuleApi","previewUninitialized","potentialInstances","label","onPreview","alertManagerDataSources","onlyOneAM","Button","LoadingPlaceholder","alertManagerSource","RoutingOptions","useHasInternalAlertmanagerEnabled","useGetGrafanaAlertingConfigurationStatusQuery","alertmanagerApi","amChoiceStatus","NotificationsStep","manualRouting","dataSourceName","isGrafanaManaged","simplifiedRoutingToggleEnabled","config","simplifiedModeInNotificationsStepEnabled","shouldRenderpreview","hasInternalAlertmanagerEnabled","shouldAllowSimplifiedRouting","step","switchMode","isAdvanced","ManualAndAutomaticRoutingSimplified","ManualAndAutomaticRouting","AutomaticRooting","routingOptions","onRoutingOptionChange","option","RadioButtonGroup","RoutingOptionDescription","labels","queries","NeedHelpInfoForNotificationPolicy","Icon","NeedHelpInfoForContactpoint","isCloudPreviewRequest","request","isGrafanaPreviewRequest","previewAlertRule","fetchAlertRulePreview","dataSourceUid","ruleType","withLoadingIndicator","createResponse","map","catchError","of","toDataQueryError","share","PreviewRuleResult","preview","fieldConfig","width","height","PanelRenderer","fields","PreviewRule","usePreview","allDataSourcesAvailable","useAlertQueriesStatus","isPreviewAvailable","Alert","setPreview","isMounted","useMountedState","values","createPreviewRequest","takeWhile","response","isCompleted","expression","dsSettings","ModifyExportRuleForm","ruleForm","defaultValuesForNewRule","defaultRuleType","formAPI","existing","returnTo","exportData","setExportData","conditionErrorMsg","setConditionErrorMsg","onInvalid","checkAlertCondition","msg","submit","actionButtons","formValues","GrafanaRuleDesignExporter","useGetGroup","nameSpaceUID","group","dsFeatures","rulerConfig","getPayloadToExport","existingGroup","ruleUid","grafanaRuleDto","updatedRule","alreadyExistsInGroup","updatedRules","rule","useGetPayloadToExport","rulerGroupDto","GrafanaRuleDesignExportPreview","exportFormat","exportValues","getExport","loadingGroup","payload","downloadFileName","exportingNewRule","initialTab","activeTab","setActiveTab","formatProviders","isOpen","initialLabels","onEditClick","text","hasLabels","mapDataFrameToAlertPreview","labelFields","stateFieldIndex","infoFieldIndex","labelIndexes","labelField","instanceStatusCount","instances","labelValues","labelIndex","state","info","CloudAlertPreview","alertPreview","instanceTags","AlertStateTag","TagList","Tooltip","ExpressionEditor","showPreviewAlertsButton","mapToValue","mapToQuery","useQueryMappers","dataQuery","dataSource","useAsync","onChangeQuery","query","onRunQueriesClick","dsi","errorMessage","previewLoaded","QueryEditor","previewDataFrame","s","previewHasAlerts","DataSourcePluginContextProvider","settings","ExpressionsEditor","onSetCondition","panelData","onUpdateRefId","onRemoveExpression","onUpdateExpressionType","onUpdateQueryExpression","expressionQueries","acc","isAlertCondition","errorFromCondition","warning","Expression","QueryOptions","queryOptions","onChangeTimeRange","onChangeQueryOptions","showOptions","setShowOptions","timeRange","Toggletip","RelativeTimeRangePicker","range","MaxDataPointsOption","options","MinIntervalOption","clearButton","DEFAULT_MAX_DATA_POINTS","DEFAULT_MIN_INTERVAL","QueryWrapper","onChangeDataSource","onRunQueries","onRemoveQuery","onDuplicateQuery","thresholds","thresholdsType","onChangeThreshold","dsInstance","setDsInstance","defaults","isAdvancedMode","queryWithDefaults","SelectingDataSourceTooltip","HeaderExtras","alertQueryOptions","ExpressionStatusIndicator","showVizualisation","editorQueries","QueryEditorRow","VizWrapper","EmptyQueryWrapper","children","onMaxDataPointsBlur","event","maxDataPointsNumber","maxDataPoints","Input","onMinIntervalBlur","minInterval","QueryRows","onQueriesChange","q","item","itemIndex","updatedQueries","previousSettings","copyModel","newModel","result","startIndex","endIndex","update","removed","expressions","thresholdByRefId","provided","isCondition","DatasourceNotFound","defaultDataSource","isInstant","newQuery","onUpdateDatasource","model","refId","showDetails","setShowDetails","toggleDetails","show","handleUpdateDatasource","QueryOperationRow","Card","onChangeQueries","RecordingRuleEditor","runQueries","setData","handleChangedQuery","changedQuery","dataSourceId","isLoki","expr","merged","QueryErrorAlert","CloudDataSourceSelector","onChangeCloudDatasource","NEW_REDUCER_REF","findDataSourceFromExpression","dag","originQuery","initialState","duplicateQuery","addNewDataQuery","setDataQueries","addNewExpression","removeExpression","removeExpressions","addExpressions","updateExpression","updateExpressionRefId","rewireExpressions","updateExpressionType","updateExpressionTimeRange","updateMaxDataPoints","updateMinInterval","resetToSimpleCondition","optimizeReduceExpression","setRecordingRulesQueries","queriesAndExpressionsReducer","builder","addQuery","datasource","recordingRuleQuery","action","queryToUpdate","originalQueries","relativeTimeRange","dataSourceAlertQuery","newRefId","oldRefId","isInstantDataQuery","reduceExpressionIndex","queryToAdd","defaultTimeRange","SimpleConditionEditor","simpleCondition","expressionQueriesList","dispatch","previewData","onReducerTypeChange","updateReduceExpression","isRange","thresholdFunction","fn","onEvalFunctionChange","updateThresholdFunction","onEvaluateValueChange","numericValue","draftCondition","updateThresholdValue","InlineFieldRow","Select","o","ThresholdSelect","ToLabel","reducer","reduceExpression","newReduceExpression","draft","evaluator","thresholdExpression","newThresholdExpression","getSimpleConditionFromExpressions","conditionsFromThreshold","whenField","params","getAvailableRuleTypes","canCreateGrafanaRules","canCreateCloudRules","enabledRuleTypes","onlyOneDSInQueries","getCanSwitch","rulesSourcesWithRuler","availableRuleTypes","onlyOneDS","dataSourceIdFromQueries","isRecordingRuleType","canSwitchToCloudRule","dsJsonData","canSwitchToGrafanaRule","grafanaTypeEnabled","cloudTypeEnabled","canSwitchFromCloudToGrafana","canSwitchFromGrafanaToCloud","SmartAlertTypeDetector","editingExistingRule","onClickSwitch","canSwitch","disabledOptions","DESCRIPTIONS","initializeSimpleCondition","isGrafanaAlertingType","dataQueries","determineAdvancedMode","simplifiedQueryEditor","useAdvancedMode","setSimpleCondition","QueryAndExpressionsStep","onDataChange","mode","queryPreviewData","cancelQueries","isPreviewLoading","clearPreviewData","useAlertQueryRunner","isSwitchModeEnabled","isOptimizeReducerEnabled","useEffectOnce","editorSettings","isCloudAlertRuleType","showResetModeModal","setShowResetModal","simplifiedQueryInForm","simplifiedQueryStep","runQueriesPreview","lastExpression","noCompatibleDataSources","emptyQueries","currentCondition","handleSetCondition","updateExpressionAndDatasource","useSetExpressionAndDataSource","onChangeRecordingRulesQueries","recordingRuleDefaultDatasource","defaultQuery","lastRefId","onClickType","datasourceUid","newQueries","onChangeExpression","promLoki","removeExpressionsInQueries","addExpressionsInQueries","prevExpressions","setPrevExpressions","prevCondition","setPrevCondition","restoreExpressionsInQueries","newDsName","sectionTitle","helpLabel","helpContent","helpLink","selectors","TypeSelectorButton","ConfirmModal","newMenu","Menu","MenuItem","Dropdown","useLazyDiscoverDsFeaturesQuery","useRulesSourcesWithRuler","setRulesSourcesWithRuler","discoverDsFeatures","prev","AlertWarning","warningStyles","isGrafanaGroupUpdatedResponse","isCloudGroupUpdatedResponse","GrafanaRuleExportPreview","ruleTextDefinition","isFetching","FileExportPreview","GrafanaRuleExporter","GrafanaExportDrawer","GroupAndNamespaceFields","rulesSourceName","style","getStyle","namespaceGroups","namespace","namespaceOptions","groupOptions","CloudEvaluationBehavior","time","RecordingRulesNameSpaceAndGroupStep","prometheusRulesPrimary","alertingListViewV2","AlertRuleForm","prefill","isManualRestore","redirectToDetailsPage","useRedirectToDetailsPage","showEditYaml","setShowEditYaml","deleteRuleFromGroup","useDeleteRuleFromGroup","addRuleToRuleGroup","updateRuleInRuleGroup","useReturnTo","routeParams","uidFromParams","showDeleteModal","setShowDeleteModal","defaultValues","handleSubmit","isSubmitting","grafanaTypeRule","showDataSourceDependantStep","exitOnSave","evaluateEvery","ruleDefinition","ruleGroupIdentifier","targetRuleGroupIdentifier","saveResult","storeInLocalStorageValues","namespaceName","groupName","returnToUrl","getReturnToUrl","updatedRuleIdentifier","deleteRule","cancelRuleCreation","Spinner","isCortexLokiOrRecordingRule","isPaused","AppChromeUpdate","InfoPausedRule","GrafanaEvaluationBehavior","AnnotationsStep","RuleInspector","redirectGrafanaRule","newOrUpdatedRuleUid","redirectCloudRulerRule","groupId","createViewLinkFromIdentifier","identifier","paramId","paramSource","CloneRuleEditor","sourceRuleId","ruleClone","cloneRuleDefinition","formPrefill","changeRuleName","newName","ExistingRuleEditor","queryParams","useQueryParams","loadingAlertRule","ruleWithLocation","fetchRuleError","ruleSourceName","isEditable","loadingEditable","errorEditable","useIsRuleEditable","defaultPageNav","getPageNav","RuleEditor","useRuleEditorPathParams","copyFromIdentifier","queryDefaults","useRuleEditorQueryParams","canEditRules","getContent","AlertingPageWrapper","withPageErrorBoundary","searchParams","useURLSearchParams","copyFromId","useRulesAccess","generateCopiedName","originalName","exisitingNames","nonDuplicateName","i"],"sourceRoot":""}