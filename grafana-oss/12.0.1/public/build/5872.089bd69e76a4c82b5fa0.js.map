{"version":3,"file":"5872.089bd69e76a4c82b5fa0.js","mappings":"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","sources":["webpack://grafana/./packages/grafana-ui/src/components/VizTooltip/VizTooltipContent.tsx","webpack://grafana/./packages/grafana-ui/src/components/VizTooltip/VizTooltipFooter.tsx","webpack://grafana/./packages/grafana-ui/src/components/VizTooltip/VizTooltipHeader.tsx","webpack://grafana/./packages/grafana-ui/src/components/VizTooltip/VizTooltipColorIndicator.tsx","webpack://grafana/./packages/grafana-ui/src/components/VizTooltip/VizTooltipRow.tsx","webpack://grafana/./public/app/features/actions/utils.ts","webpack://grafana/./public/app/plugins/panel/canvas/panelcfg.gen.ts","webpack://grafana/./public/app/plugins/panel/status-history/utils.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport { CSSProperties, ReactNode } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { useStyles2 } from '../../themes';\n\nimport { VizTooltipRow } from './VizTooltipRow';\nimport { VizTooltipItem } from './types';\n\ninterface VizTooltipContentProps {\n  items: VizTooltipItem[];\n  children?: ReactNode;\n  scrollable?: boolean;\n  isPinned: boolean;\n  maxHeight?: number;\n}\n\nexport const VizTooltipContent = ({\n  items,\n  children,\n  isPinned,\n  scrollable = false,\n  maxHeight,\n}: VizTooltipContentProps) => {\n  const styles = useStyles2(getStyles);\n\n  const scrollableStyle: CSSProperties = scrollable\n    ? {\n        maxHeight: maxHeight,\n        overflowY: 'auto',\n      }\n    : {};\n\n  return (\n    <div className={styles.wrapper} style={scrollableStyle}>\n      {items.map(({ label, value, color, colorIndicator, colorPlacement, isActive, lineStyle }, i) => (\n        <VizTooltipRow\n          key={i}\n          label={label}\n          value={value}\n          color={color}\n          colorIndicator={colorIndicator}\n          colorPlacement={colorPlacement}\n          isActive={isActive}\n          justify={'space-between'}\n          isPinned={isPinned}\n          lineStyle={lineStyle}\n          showValueScroll={!scrollable}\n        />\n      ))}\n      {children}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    display: 'flex',\n    flexDirection: 'column',\n    flex: 1,\n    gap: 2,\n    borderTop: `1px solid ${theme.colors.border.weak}`,\n    padding: theme.spacing(1),\n  }),\n});\n","import { css } from '@emotion/css';\nimport { useMemo } from 'react';\n\nimport { ActionModel, Field, GrafanaTheme2, LinkModel, ThemeSpacingTokens } from '@grafana/data';\n\nimport { Button, DataLinkButton, Icon, Stack } from '..';\nimport { useStyles2 } from '../../themes';\nimport { Trans } from '../../utils/i18n';\nimport { ActionButton } from '../Actions/ActionButton';\nimport { ResponsiveProp } from '../Layout/utils/responsiveness';\n\ninterface VizTooltipFooterProps {\n  dataLinks: Array<LinkModel<Field>>;\n  actions?: Array<ActionModel<Field>>;\n  annotate?: () => void;\n}\n\nexport const ADD_ANNOTATION_ID = 'add-annotation-button';\n\ntype RenderOneClickTrans = (title: string) => React.ReactNode;\ntype RenderItem<T extends LinkModel | ActionModel> = (\n  item: T,\n  idx: number,\n  styles: ReturnType<typeof getStyles>\n) => React.ReactNode;\n\nfunction makeRenderLinksOrActions<T extends LinkModel | ActionModel>(\n  renderOneClickTrans: RenderOneClickTrans,\n  renderItem: RenderItem<T>,\n  itemGap?: ResponsiveProp<ThemeSpacingTokens>\n) {\n  const renderLinksOrActions = (items: T[], styles: ReturnType<typeof getStyles>) => {\n    if (items.length === 0) {\n      return;\n    }\n\n    const oneClickItem = items.find((item) => item.oneClick === true);\n\n    if (oneClickItem != null) {\n      return (\n        <div className={styles.dataLinks}>\n          <Stack direction=\"column\" justifyContent=\"flex-start\" gap={0.5}>\n            <span className={styles.oneClickWrapper}>\n              <Icon name=\"info-circle\" size=\"lg\" className={styles.infoIcon} />\n              {renderOneClickTrans(oneClickItem.title)}\n            </span>\n          </Stack>\n        </div>\n      );\n    }\n\n    return (\n      <div className={styles.dataLinks}>\n        <Stack direction=\"column\" justifyContent=\"flex-start\" gap={itemGap}>\n          {items.map((item, i) => renderItem(item, i, styles))}\n        </Stack>\n      </div>\n    );\n  };\n\n  return renderLinksOrActions;\n}\n\nconst renderDataLinks = makeRenderLinksOrActions<LinkModel>(\n  (title) => (\n    <Trans i18nKey=\"grafana-ui.viz-tooltip.footer-click-to-navigate\">Click to open {{ linkTitle: title }}</Trans>\n  ),\n  (item, i, styles) => (\n    <DataLinkButton link={item} key={i} buttonProps={{ className: styles.dataLinkButton, fill: 'text' }} />\n  ),\n  0.5\n);\n\nconst renderActions = makeRenderLinksOrActions<ActionModel>(\n  (title) => <Trans i18nKey=\"grafana-ui.viz-tooltip.footer-click-to-action\">Click to {{ actionTitle: title }}</Trans>,\n  (item, i, styles) => <ActionButton key={i} action={item} variant=\"secondary\" />\n);\n\nexport const VizTooltipFooter = ({ dataLinks, actions = [], annotate }: VizTooltipFooterProps) => {\n  const styles = useStyles2(getStyles);\n  const hasOneClickLink = useMemo(() => dataLinks.some((link) => link.oneClick === true), [dataLinks]);\n  const hasOneClickAction = useMemo(() => actions.some((action) => action.oneClick === true), [actions]);\n\n  return (\n    <div className={styles.wrapper}>\n      {!hasOneClickAction && renderDataLinks(dataLinks, styles)}\n      {!hasOneClickLink && renderActions(actions, styles)}\n      {!hasOneClickLink && !hasOneClickAction && annotate != null && (\n        <div className={styles.addAnnotations}>\n          <Button icon=\"comment-alt\" variant=\"secondary\" size=\"sm\" id={ADD_ANNOTATION_ID} onClick={annotate}>\n            <Trans i18nKey=\"grafana-ui.viz-tooltip.footer-add-annotation\">Add annotation</Trans>\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    display: 'flex',\n    flexDirection: 'column',\n    flex: 1,\n    padding: theme.spacing(0),\n  }),\n  dataLinks: css({\n    borderTop: `1px solid ${theme.colors.border.medium}`,\n    padding: theme.spacing(1),\n  }),\n  addAnnotations: css({\n    borderTop: `1px solid ${theme.colors.border.medium}`,\n    padding: theme.spacing(1),\n  }),\n  dataLinkButton: css({\n    cursor: 'pointer',\n    '&:hover': {\n      textDecoration: 'underline',\n      background: 'none',\n    },\n\n    height: 'auto',\n    '& span': {\n      whiteSpace: 'normal',\n      textAlign: 'left',\n    },\n  }),\n  oneClickWrapper: css({\n    display: 'flex',\n    alignItems: 'center',\n  }),\n  infoIcon: css({\n    color: theme.colors.primary.main,\n    paddingRight: theme.spacing(0.5),\n  }),\n});\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { useStyles2 } from '../../themes';\n\nimport { VizTooltipRow } from './VizTooltipRow';\nimport { VizTooltipItem } from './types';\n\ninterface Props {\n  item: VizTooltipItem;\n  isPinned: boolean;\n}\nexport const VizTooltipHeader = ({ item, isPinned }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const { label, value, color, colorIndicator } = item;\n\n  return (\n    <div className={styles.wrapper}>\n      <VizTooltipRow\n        label={label}\n        value={value}\n        color={color}\n        colorIndicator={colorIndicator}\n        marginRight={'22px'}\n        isPinned={isPinned}\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    display: 'flex',\n    flexDirection: 'column',\n    flex: 1,\n    padding: theme.spacing(1),\n    lineHeight: 1,\n  }),\n});\n","import { css, cx } from '@emotion/css';\n\nimport { FALLBACK_COLOR, GrafanaTheme2 } from '@grafana/data';\nimport { LineStyle } from '@grafana/schema';\n\nimport { useStyles2 } from '../../themes';\nimport { SeriesIcon } from '../VizLegend/SeriesIcon';\n\nimport { ColorIndicator, DEFAULT_COLOR_INDICATOR } from './types';\nimport { getColorIndicatorClass } from './utils';\n\nexport enum ColorIndicatorPosition {\n  Leading,\n  Trailing,\n}\n\ninterface Props {\n  color?: string;\n  colorIndicator?: ColorIndicator;\n  position?: ColorIndicatorPosition;\n  lineStyle?: LineStyle;\n}\n\nexport type ColorIndicatorStyles = ReturnType<typeof getStyles>;\n\nexport const VizTooltipColorIndicator = ({\n  color = FALLBACK_COLOR,\n  colorIndicator = DEFAULT_COLOR_INDICATOR,\n  position = ColorIndicatorPosition.Leading,\n  lineStyle,\n}: Props) => {\n  const styles = useStyles2(getStyles);\n\n  if (colorIndicator === ColorIndicator.series) {\n    return (\n      <SeriesIcon\n        color={color}\n        lineStyle={lineStyle}\n        className={position === ColorIndicatorPosition.Leading ? styles.leading : styles.trailing}\n      />\n    );\n  }\n\n  return (\n    <span\n      style={{ backgroundColor: color }}\n      className={cx(\n        position === ColorIndicatorPosition.Leading ? styles.leading : styles.trailing,\n        getColorIndicatorClass(colorIndicator, styles)\n      )}\n    />\n  );\n};\n\n// @TODO Update classes/add svgs\nconst getStyles = (theme: GrafanaTheme2) => ({\n  leading: css({\n    marginRight: theme.spacing(0.5),\n  }),\n  trailing: css({\n    marginLeft: theme.spacing(0.5),\n  }),\n  value: css({\n    width: '12px',\n    height: '12px',\n    borderRadius: theme.shape.radius.default,\n    fontWeight: 500,\n    minWidth: '12px',\n  }),\n  hexagon: css({}),\n  pie_1_4: css({}),\n  pie_2_4: css({}),\n  pie_3_4: css({}),\n  marker_sm: css({\n    width: '4px',\n    height: '4px',\n    borderRadius: theme.shape.radius.circle,\n    minWidth: '4px',\n  }),\n  marker_md: css({\n    width: '8px',\n    height: '8px',\n    borderRadius: theme.shape.radius.circle,\n    minWidth: '8px',\n  }),\n  marker_lg: css({\n    width: '12px',\n    height: '12px',\n    borderRadius: theme.shape.radius.circle,\n    minWidth: '12px',\n  }),\n});\n","import { css, cx } from '@emotion/css';\nimport { CSSProperties, ReactNode, useEffect, useRef, useState } from 'react';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { useStyles2 } from '../../themes';\nimport { InlineToast } from '../InlineToast/InlineToast';\nimport { Tooltip } from '../Tooltip';\n\nimport { ColorIndicatorPosition, VizTooltipColorIndicator } from './VizTooltipColorIndicator';\nimport { ColorPlacement, VizTooltipItem } from './types';\n\ninterface VizTooltipRowProps extends Omit<VizTooltipItem, 'value'> {\n  value: string | number | null | ReactNode;\n  justify?: string;\n  isActive?: boolean; // for series list\n  marginRight?: string;\n  isPinned: boolean;\n  showValueScroll?: boolean;\n}\n\nenum LabelValueTypes {\n  label = 'label',\n  value = 'value',\n}\n\nconst SUCCESSFULLY_COPIED_TEXT = 'Copied to clipboard';\nconst SHOW_SUCCESS_DURATION = 2 * 1000;\nconst HORIZONTAL_PX_PER_CHAR = 7;\n\nexport const VizTooltipRow = ({\n  label,\n  value,\n  color,\n  colorIndicator,\n  colorPlacement = ColorPlacement.first,\n  justify = 'flex-start',\n  isActive = false,\n  marginRight = '0px',\n  isPinned,\n  lineStyle,\n  showValueScroll,\n}: VizTooltipRowProps) => {\n  const styles = useStyles2(getStyles, justify, marginRight);\n\n  const innerValueScrollStyle: CSSProperties = showValueScroll\n    ? {\n        maxHeight: 55,\n        whiteSpace: 'wrap',\n        wordBreak: 'break-word',\n        overflowY: 'auto',\n      }\n    : {\n        whiteSpace: 'wrap',\n        wordBreak: 'break-word',\n      };\n\n  const [showLabelTooltip, setShowLabelTooltip] = useState(false);\n\n  const [copiedText, setCopiedText] = useState<Record<string, string> | null>(null);\n  const [showCopySuccess, setShowCopySuccess] = useState(false);\n\n  const labelRef = useRef<null | HTMLDivElement>(null);\n  const valueRef = useRef<null | HTMLDivElement>(null);\n\n  useEffect(() => {\n    let timeoutId: ReturnType<typeof setTimeout>;\n\n    if (showCopySuccess) {\n      timeoutId = setTimeout(() => {\n        setShowCopySuccess(false);\n      }, SHOW_SUCCESS_DURATION);\n    }\n\n    return () => {\n      window.clearTimeout(timeoutId);\n    };\n  }, [showCopySuccess]);\n\n  const copyToClipboard = async (text: string, type: LabelValueTypes) => {\n    if (!(navigator?.clipboard && window.isSecureContext)) {\n      fallbackCopyToClipboard(text, type);\n      return;\n    }\n\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopiedText({ [`${type}`]: text });\n      setShowCopySuccess(true);\n    } catch (error) {\n      setCopiedText(null);\n    }\n  };\n\n  const fallbackCopyToClipboard = (text: string, type: LabelValueTypes) => {\n    // Use a fallback method for browsers/contexts that don't support the Clipboard API.\n    const textarea = document.createElement('textarea');\n    labelRef.current?.appendChild(textarea);\n    textarea.value = text;\n    textarea.focus();\n    textarea.select();\n    try {\n      const successful = document.execCommand('copy');\n      if (successful) {\n        setCopiedText({ [`${type}`]: text });\n        setShowCopySuccess(true);\n      }\n    } catch (err) {\n      console.error('Unable to copy to clipboard', err);\n    }\n\n    textarea.remove();\n  };\n\n  const onMouseEnterLabel = (event: React.MouseEvent<HTMLDivElement>) => {\n    if (event.currentTarget.offsetWidth < event.currentTarget.scrollWidth) {\n      setShowLabelTooltip(true);\n    }\n  };\n\n  const onMouseLeaveLabel = () => setShowLabelTooltip(false);\n\n  // if label is > 50% window width, try to put label/value pairs on new lines\n  if (label.length * HORIZONTAL_PX_PER_CHAR > window.innerWidth / 2) {\n    label = label.replaceAll('{', '{\\n  ').replaceAll('}', '\\n}').replaceAll(', ', ',\\n  ');\n  }\n\n  return (\n    <div className={styles.contentWrapper}>\n      {(color || label) && (\n        <div className={styles.valueWrapper}>\n          {color && colorPlacement === ColorPlacement.first && (\n            <VizTooltipColorIndicator color={color} colorIndicator={colorIndicator} lineStyle={lineStyle} />\n          )}\n          {!isPinned ? (\n            <div className={cx(styles.label, isActive && styles.activeSeries)}>{label}</div>\n          ) : (\n            <>\n              <Tooltip content={label} interactive={false} show={showLabelTooltip}>\n                <>\n                  {showCopySuccess && copiedText?.label && (\n                    <InlineToast placement=\"top\" referenceElement={labelRef.current}>\n                      {SUCCESSFULLY_COPIED_TEXT}\n                    </InlineToast>\n                  )}\n                  {/* eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions */}\n                  <div\n                    className={cx(styles.label, isActive && styles.activeSeries, navigator?.clipboard && styles.copy)}\n                    onMouseEnter={onMouseEnterLabel}\n                    onMouseLeave={onMouseLeaveLabel}\n                    onClick={() => copyToClipboard(label, LabelValueTypes.label)}\n                    ref={labelRef}\n                  >\n                    {label}\n                  </div>\n                </>\n              </Tooltip>\n            </>\n          )}\n        </div>\n      )}\n\n      <div className={styles.valueWrapper}>\n        {color && colorPlacement === ColorPlacement.leading && (\n          <VizTooltipColorIndicator\n            color={color}\n            colorIndicator={colorIndicator}\n            position={ColorIndicatorPosition.Leading}\n            lineStyle={lineStyle}\n          />\n        )}\n\n        {!isPinned ? (\n          <div className={cx(styles.value, isActive)} style={innerValueScrollStyle}>\n            {value}\n          </div>\n        ) : (\n          <>\n            {showCopySuccess && copiedText?.value && (\n              <InlineToast placement=\"top\" referenceElement={valueRef.current}>\n                {SUCCESSFULLY_COPIED_TEXT}\n              </InlineToast>\n            )}\n            {/* eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions */}\n            <div\n              className={cx(styles.value, isActive, navigator?.clipboard && styles.copy)}\n              style={innerValueScrollStyle}\n              onClick={() => copyToClipboard(value ? value.toString() : '', LabelValueTypes.value)}\n              ref={valueRef}\n            >\n              {value}\n            </div>\n          </>\n        )}\n\n        {color && colorPlacement === ColorPlacement.trailing && (\n          <VizTooltipColorIndicator\n            color={color}\n            colorIndicator={colorIndicator}\n            position={ColorIndicatorPosition.Trailing}\n            lineStyle={lineStyle}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2, justify: string, marginRight: string) => ({\n  contentWrapper: css({\n    display: 'flex',\n    alignItems: 'start',\n    justifyContent: justify,\n    marginRight: marginRight,\n  }),\n  label: css({\n    color: theme.colors.text.secondary,\n    fontWeight: 400,\n    textOverflow: 'ellipsis',\n    overflow: 'hidden',\n    marginRight: theme.spacing(2),\n  }),\n  value: css({\n    fontWeight: 500,\n    textOverflow: 'ellipsis',\n    overflow: 'hidden',\n  }),\n  valueWrapper: css({\n    display: 'flex',\n    alignItems: 'center',\n  }),\n  activeSeries: css({\n    fontWeight: theme.typography.fontWeightBold,\n    color: theme.colors.text.maxContrast,\n  }),\n  copy: css({\n    cursor: 'pointer',\n  }),\n});\n","import {\n  Action,\n  ActionModel,\n  AppEvents,\n  DataContextScopedVar,\n  DataFrame,\n  DataLink,\n  Field,\n  FieldType,\n  getFieldDataContextClone,\n  InterpolateFunction,\n  ScopedVars,\n  textUtil,\n  ValueLinkConfig,\n} from '@grafana/data';\nimport { BackendSrvRequest, getBackendSrv } from '@grafana/runtime';\nimport { appEvents } from 'app/core/core';\n\nimport { HttpRequestMethod } from '../../plugins/panel/canvas/panelcfg.gen';\nimport { createAbsoluteUrl, RelativeUrl } from '../alerting/unified/utils/url';\n\n/** @internal */\nexport const getActions = (\n  frame: DataFrame,\n  field: Field,\n  fieldScopedVars: ScopedVars,\n  replaceVariables: InterpolateFunction,\n  actions: Action[],\n  config: ValueLinkConfig\n): Array<ActionModel<Field>> => {\n  if (!actions || actions.length === 0) {\n    return [];\n  }\n\n  const actionModels = actions.map((action: Action) => {\n    const dataContext: DataContextScopedVar = getFieldDataContextClone(frame, field, fieldScopedVars);\n    const actionScopedVars = {\n      ...fieldScopedVars,\n      __dataContext: dataContext,\n    };\n\n    const boundReplaceVariables: InterpolateFunction = (value, scopedVars, format) => {\n      return replaceVariables(value, { ...actionScopedVars, ...scopedVars }, format);\n    };\n\n    // We are not displaying reduction result\n    if (config.valueRowIndex !== undefined && !isNaN(config.valueRowIndex)) {\n      dataContext.value.rowIndex = config.valueRowIndex;\n    } else {\n      dataContext.value.calculatedValue = config.calculatedValue;\n    }\n\n    const title = replaceVariables(action.title, actionScopedVars);\n    const confirmation = replaceVariables(\n      action.confirmation || `Are you sure you want to ${action.title}?`,\n      actionScopedVars\n    );\n\n    const actionModel: ActionModel<Field> = {\n      title,\n      confirmation,\n      onClick: (evt: MouseEvent, origin: Field) => {\n        buildActionOnClick(action, boundReplaceVariables);\n      },\n      oneClick: action.oneClick ?? false,\n    };\n\n    return actionModel;\n  });\n\n  return actionModels.filter((action): action is ActionModel => !!action);\n};\n\n/** @internal */\nconst buildActionOnClick = (action: Action, replaceVariables: InterpolateFunction) => {\n  try {\n    const url = new URL(getUrl(replaceVariables(action.fetch.url)));\n\n    const requestHeaders: Record<string, string> = {};\n\n    let request: BackendSrvRequest = {\n      url: url.toString(),\n      method: action.fetch.method,\n      data: getData(action, replaceVariables),\n      headers: requestHeaders,\n    };\n\n    if (action.fetch.headers) {\n      action.fetch.headers.forEach(([name, value]) => {\n        requestHeaders[replaceVariables(name)] = replaceVariables(value);\n      });\n    }\n\n    if (action.fetch.queryParams) {\n      action.fetch.queryParams?.forEach(([name, value]) => {\n        url.searchParams.append(replaceVariables(name), replaceVariables(value));\n      });\n\n      request.url = url.toString();\n    }\n\n    requestHeaders['X-Grafana-Action'] = '1';\n    request.headers = requestHeaders;\n\n    getBackendSrv()\n      .fetch(request)\n      .subscribe({\n        error: (error) => {\n          appEvents.emit(AppEvents.alertError, ['An error has occurred. Check console output for more details.']);\n          console.error(error);\n        },\n        complete: () => {\n          appEvents.emit(AppEvents.alertSuccess, ['API call was successful']);\n        },\n      });\n  } catch (error) {\n    appEvents.emit(AppEvents.alertError, ['An error has occurred. Check console output for more details.']);\n    console.error(error);\n    return;\n  }\n};\n\n/** @internal */\n// @TODO update return type\nexport const getActionsDefaultField = (dataLinks: DataLink[] = [], actions: Action[] = []) => {\n  return {\n    name: 'Default field',\n    type: FieldType.string,\n    config: { links: dataLinks, actions: actions },\n    values: [],\n  };\n};\n\n/** @internal */\nconst getUrl = (endpoint: string) => {\n  const isRelativeUrl = endpoint.startsWith('/');\n  if (isRelativeUrl) {\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    const sanitizedRelativeURL = textUtil.sanitizeUrl(endpoint) as RelativeUrl;\n    endpoint = createAbsoluteUrl(sanitizedRelativeURL, []);\n  }\n\n  return endpoint;\n};\n\n/** @internal */\nconst getData = (action: Action, replaceVariables: InterpolateFunction) => {\n  let data: string | undefined = action.fetch.body ? replaceVariables(action.fetch.body) : '{}';\n  if (action.fetch.method === HttpRequestMethod.GET) {\n    data = undefined;\n  }\n\n  return data;\n};\n","// Code generated - EDITING IS FUTILE. DO NOT EDIT.\n//\n// Generated by:\n//     public/app/plugins/gen.go\n// Using jennies:\n//     TSTypesJenny\n//     PluginTsTypesJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\nimport * as ui from '@grafana/schema';\n\nexport enum HorizontalConstraint {\n  Center = 'center',\n  Left = 'left',\n  LeftRight = 'leftright',\n  Right = 'right',\n  Scale = 'scale',\n}\n\nexport enum VerticalConstraint {\n  Bottom = 'bottom',\n  Center = 'center',\n  Scale = 'scale',\n  Top = 'top',\n  TopBottom = 'topbottom',\n}\n\nexport interface Constraint {\n  horizontal?: HorizontalConstraint;\n  vertical?: VerticalConstraint;\n}\n\nexport interface Placement {\n  bottom?: number;\n  height?: number;\n  left?: number;\n  right?: number;\n  rotation?: number;\n  top?: number;\n  width?: number;\n}\n\nexport enum BackgroundImageSize {\n  Contain = 'contain',\n  Cover = 'cover',\n  Fill = 'fill',\n  Original = 'original',\n  Tile = 'tile',\n}\n\nexport interface BackgroundConfig {\n  color?: ui.ColorDimensionConfig;\n  image?: ui.ResourceDimensionConfig;\n  size?: BackgroundImageSize;\n}\n\nexport interface LineConfig {\n  color?: ui.ColorDimensionConfig;\n  radius?: number;\n  width?: number;\n}\n\nexport enum HttpRequestMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n}\n\nexport interface ConnectionCoordinates {\n  x: number;\n  y: number;\n}\n\nexport enum ConnectionPath {\n  Straight = 'straight',\n}\n\nexport interface CanvasConnection {\n  color?: ui.ColorDimensionConfig;\n  path: ConnectionPath;\n  size?: ui.ScaleDimensionConfig;\n  source: ConnectionCoordinates;\n  sourceOriginal?: ConnectionCoordinates;\n  target: ConnectionCoordinates;\n  targetName?: string;\n  targetOriginal?: ConnectionCoordinates;\n  vertices?: Array<ConnectionCoordinates>;\n}\n\nexport const defaultCanvasConnection: Partial<CanvasConnection> = {\n  vertices: [],\n};\n\nexport interface CanvasElementOptions {\n  background?: BackgroundConfig;\n  border?: LineConfig;\n  /**\n   * TODO: figure out how to define this (element config(s))\n   */\n  config?: unknown;\n  connections?: Array<CanvasConnection>;\n  constraint?: Constraint;\n  name: string;\n  placement?: Placement;\n  type: string;\n}\n\nexport const defaultCanvasElementOptions: Partial<CanvasElementOptions> = {\n  connections: [],\n};\n\nexport interface Options {\n  /**\n   * Enable infinite pan\n   */\n  infinitePan: boolean;\n  /**\n   * Enable inline editing\n   */\n  inlineEditing: boolean;\n  /**\n   * Enable pan and zoom\n   */\n  panZoom: boolean;\n  /**\n   * The root element of canvas (frame), where all canvas elements are nested\n   * TODO: Figure out how to define a default value for this\n   */\n  root: {\n    /**\n     * Name of the root element\n     */\n    name: string;\n    /**\n     * Type of root element (frame)\n     */\n    type: 'frame';\n    /**\n     * The list of canvas elements attached to the root element\n     */\n    elements: Array<CanvasElementOptions>;\n  };\n  /**\n   * Show all available element types\n   */\n  showAdvancedTypes: boolean;\n}\n\nexport const defaultOptions: Partial<Options> = {\n  infinitePan: true,\n  inlineEditing: true,\n  panZoom: true,\n  showAdvancedTypes: true,\n};\n","import { DataFrame, ActionModel, Field, InterpolateFunction, LinkModel } from '@grafana/data';\nimport { getActions } from 'app/features/actions/utils';\n\nexport const getDataLinks = (field: Field, rowIdx: number) => {\n  const links: Array<LinkModel<Field>> = [];\n\n  if ((field.config.links?.length ?? 0) > 0 && field.getLinks != null) {\n    const v = field.values[rowIdx];\n    const disp = field.display ? field.display(v) : { text: `${v}`, numeric: +v };\n\n    const linkLookup = new Set<string>();\n\n    field.getLinks({ calculatedValue: disp, valueRowIndex: rowIdx }).forEach((link) => {\n      const key = `${link.title}/${link.href}`;\n      if (!linkLookup.has(key)) {\n        links.push(link);\n        linkLookup.add(key);\n      }\n    });\n  }\n\n  return links;\n};\n\nexport const getAllFrameActions = (dataFrame: DataFrame) => {};\n\nexport const getFieldActions = (\n  dataFrame: DataFrame,\n  field: Field,\n  replaceVars: InterpolateFunction,\n  rowIndex: number\n) => {\n  const actions: Array<ActionModel<Field>> = [];\n  const actionLookup = new Set<string>();\n\n  const actionsModel = getActions(dataFrame, field, field.state!.scopedVars!, replaceVars, field.config.actions ?? [], {\n    valueRowIndex: rowIndex,\n  });\n\n  actionsModel.forEach((action) => {\n    const key = `${action.title}`;\n    if (!actionLookup.has(key)) {\n      actions.push(action);\n      actionLookup.add(key);\n    }\n  });\n\n  return actions;\n};\n"],"names":["VizTooltipContent","items","children","isPinned","scrollable","maxHeight","styles","getStyles","scrollableStyle","label","value","color","colorIndicator","colorPlacement","isActive","lineStyle","i","theme","ADD_ANNOTATION_ID","makeRenderLinksOrActions","renderOneClickTrans","renderItem","itemGap","oneClickItem","item","renderDataLinks","title","renderActions","VizTooltipFooter","dataLinks","actions","annotate","hasOneClickLink","link","hasOneClickAction","action","VizTooltipHeader","ColorIndicatorPosition","VizTooltipColorIndicator","position","SeriesIcon","LabelValueTypes","SUCCESSFULLY_COPIED_TEXT","SHOW_SUCCESS_DURATION","HORIZONTAL_PX_PER_CHAR","VizTooltipRow","justify","marginRight","showValueScroll","innerValueScrollStyle","showLabelTooltip","setShowLabelTooltip","copiedText","setCopiedText","showCopySuccess","setShowCopySuccess","labelRef","valueRef","timeoutId","copyToClipboard","text","type","fallbackCopyToClipboard","textarea","err","onMouseEnterLabel","event","onMouseLeaveLabel","Tooltip","InlineToast","getActions","frame","field","fieldScopedVars","replaceVariables","config","dataContext","actionScopedVars","boundReplaceVariables","scopedVars","format","confirmation","evt","origin","buildActionOnClick","url","getUrl","requestHeaders","request","getData","name","error","getActionsDefaultField","endpoint","sanitizedRelativeURL","data","HorizontalConstraint","VerticalConstraint","BackgroundImageSize","HttpRequestMethod","ConnectionPath","defaultCanvasConnection","defaultCanvasElementOptions","defaultOptions","getDataLinks","rowIdx","links","v","disp","linkLookup","key","getAllFrameActions","dataFrame","getFieldActions","replaceVars","rowIndex","actionLookup"],"sourceRoot":""}