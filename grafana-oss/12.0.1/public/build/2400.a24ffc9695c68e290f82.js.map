{"version":3,"file":"2400.a24ffc9695c68e290f82.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/dashboard/DashboardQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/dashboard/datasource.ts","webpack://grafana/./public/app/plugins/datasource/dashboard/module.ts","webpack://grafana/./node_modules/rxjs/dist/esm5/internal/observable/defer.js","webpack://grafana/./node_modules/rxjs/dist/esm5/internal/operators/debounce.js","webpack://grafana/./node_modules/@grafana/plugin-ui/dist/esm/components/VisualQueryBuilder/components/OperationsEditorRow.js"],"sourcesContent":["import { css } from '@emotion/css';\nimport { useId } from '@react-aria/utils';\nimport pluralize from 'pluralize';\nimport { useCallback, useMemo } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { DataQuery, GrafanaTheme2, SelectableValue, DataTopic, QueryEditorProps } from '@grafana/data';\nimport { OperationsEditorRow } from '@grafana/plugin-ui';\nimport { Field, Select, useStyles2, Spinner, RadioButtonGroup, Stack, InlineSwitch } from '@grafana/ui';\nimport config from 'app/core/config';\nimport { getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport { DashboardScene } from 'app/features/dashboard-scene/scene/DashboardScene';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { filterPanelDataToQuery } from 'app/features/query/components/QueryEditorRow';\n\nimport { MIXED_DATASOURCE_NAME } from '../mixed/MixedDataSource';\n\nimport { SHARED_DASHBOARD_QUERY } from './constants';\nimport { DashboardDatasource } from './datasource';\nimport { DashboardQuery, ResultInfo } from './types';\n\nfunction getQueryDisplayText(query: DataQuery): string {\n  return JSON.stringify(query);\n}\n\nfunction isPanelInEdit(panelId: number, panelInEditId?: number) {\n  let idToCompareWith = panelInEditId;\n\n  if (window.__grafanaSceneContext && window.__grafanaSceneContext instanceof DashboardScene) {\n    idToCompareWith = window.__grafanaSceneContext.state.editPanel?.getPanelId();\n  }\n\n  return panelId === idToCompareWith;\n}\n\ninterface Props extends QueryEditorProps<DashboardDatasource, DashboardQuery> {}\n\nconst topics = [\n  { label: 'All data', value: false },\n  { label: 'Annotations', value: true, description: 'Include annotations as regular data' },\n];\n\nexport const INVALID_PANEL_DESCRIPTION = 'Contains a shared dashboard query';\n\nexport function DashboardQueryEditor({ data, query, onChange, onRunQuery }: Props) {\n  const { value: defaultDatasource } = useAsync(() => getDatasourceSrv().get());\n\n  const panel = useMemo(() => {\n    const dashboard = getDashboardSrv().getCurrent();\n    return dashboard?.getPanelById(query.panelId ?? -124134);\n  }, [query.panelId]);\n\n  const { value: results, loading: loadingResults } = useAsync(async (): Promise<ResultInfo[]> => {\n    if (!panel || !data) {\n      return [];\n    }\n    const mainDS = await getDatasourceSrv().get(panel.datasource);\n    return Promise.all(\n      panel.targets.map(async (query) => {\n        const ds = query.datasource ? await getDatasourceSrv().get(query.datasource) : mainDS;\n        const fmt = ds.getQueryDisplayText || getQueryDisplayText;\n        const queryData = filterPanelDataToQuery(data, query.refId) ?? data;\n        return {\n          refId: query.refId,\n          query: fmt(query),\n          name: ds.name,\n          img: ds.meta.info.logos.small,\n          data: queryData.series,\n          error: queryData.error,\n        };\n      })\n    );\n  }, [data, panel]);\n\n  const onUpdateQuery = useCallback(\n    (query: DashboardQuery) => {\n      onChange(query);\n      onRunQuery();\n    },\n    [onChange, onRunQuery]\n  );\n\n  const onPanelChanged = useCallback(\n    (id: number) => {\n      onUpdateQuery({\n        ...query,\n        panelId: id,\n      });\n    },\n    [query, onUpdateQuery]\n  );\n\n  const onTransformToggle = useCallback(() => {\n    onUpdateQuery({\n      ...query,\n      withTransforms: !query.withTransforms,\n    });\n  }, [query, onUpdateQuery]);\n\n  const onTopicChanged = useCallback(\n    (t: boolean) => {\n      onUpdateQuery({\n        ...query,\n        topic: t ? DataTopic.Annotations : undefined,\n      });\n    },\n    [query, onUpdateQuery]\n  );\n\n  const isMixedDSWithDashboardQueries = (panel: PanelModel) => {\n    return (\n      panel.datasource?.uid === MIXED_DATASOURCE_NAME &&\n      panel.targets.some((t) => t.datasource?.uid === SHARED_DASHBOARD_QUERY)\n    );\n  };\n\n  const getPanelDescription = useCallback(\n    (panel: PanelModel): string => {\n      const datasource = panel.datasource ?? defaultDatasource;\n      const dsname = getDatasourceSrv().getInstanceSettings(datasource)?.name;\n      const queryCount = panel.targets.length;\n      return `${queryCount} ${pluralize('query', queryCount)} to ${dsname}`;\n    },\n    [defaultDatasource]\n  );\n\n  const dashboard = getDashboardSrv().getCurrent();\n  const showTransforms = Boolean(query.withTransforms || panel?.transformations?.length);\n  const panels: Array<SelectableValue<number>> = useMemo(\n    () =>\n      dashboard?.panels\n        .filter(\n          (panel) => config.panels[panel.type] && panel.targets && !isPanelInEdit(panel.id, dashboard.panelInEdit?.id)\n        )\n        .map((panel) => {\n          let description = getPanelDescription(panel);\n          let isDisabled = false;\n          if (panel.datasource?.uid === SHARED_DASHBOARD_QUERY || isMixedDSWithDashboardQueries(panel)) {\n            description = INVALID_PANEL_DESCRIPTION;\n            isDisabled = true;\n          }\n\n          return {\n            value: panel.id,\n            label: panel.title ?? 'Panel ' + panel.id,\n            imgUrl: config.panels[panel.type].info.logos.small,\n            description,\n            isDisabled,\n          };\n        }) ?? [],\n    [dashboard, getPanelDescription]\n  );\n\n  const styles = useStyles2(getStyles);\n  const selectId = useId();\n\n  if (!dashboard) {\n    return null;\n  }\n\n  if (panels.length < 1) {\n    return (\n      <p className={styles.noQueriesText}>\n        This dashboard does not have any other panels. Add queries to other panels and try again.\n      </p>\n    );\n  }\n\n  const selected = panels.find((panel) => panel.value === query.panelId);\n\n  return (\n    <OperationsEditorRow>\n      <Stack direction=\"column\">\n        <Stack gap={3}>\n          <Field label=\"Source panel\" description=\"Use query results from another panel\">\n            <Select\n              inputId={selectId}\n              placeholder=\"Choose panel\"\n              isSearchable={true}\n              options={panels}\n              value={selected}\n              onChange={(item) => onPanelChanged(item.value!)}\n            />\n          </Field>\n\n          <Field label=\"Data\" description=\"Use data or annotations from the panel\">\n            <RadioButtonGroup\n              options={topics}\n              value={query.topic === DataTopic.Annotations}\n              onChange={onTopicChanged}\n            />\n          </Field>\n\n          {showTransforms && (\n            <Field label=\"Transform\" description=\"Apply transformations from the source panel\">\n              <InlineSwitch value={Boolean(query.withTransforms)} onChange={onTransformToggle} />\n            </Field>\n          )}\n        </Stack>\n\n        {loadingResults ? (\n          <Spinner />\n        ) : (\n          <>\n            {results && Boolean(results.length) && (\n              <Field label=\"Queries from panel\">\n                <Stack direction=\"column\">\n                  {results.map((target, i) => (\n                    <Stack key={i} alignItems=\"center\" gap={1}>\n                      <div>{target.refId}</div>\n                      <img src={target.img} alt={target.name} title={target.name} width={16} />\n                      <div>{target.query}</div>\n                    </Stack>\n                  ))}\n                </Stack>\n              </Field>\n            )}\n          </>\n        )}\n      </Stack>\n    </OperationsEditorRow>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    noQueriesText: css({\n      padding: theme.spacing(1.25),\n    }),\n  };\n}\n","import { Observable, debounce, defer, finalize, first, interval, map, of } from 'rxjs';\n\nimport {\n  DataSourceApi,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  TestDataSourceResponse,\n  ScopedVar,\n  DataTopic,\n  PanelData,\n  DataFrame,\n  LoadingState,\n} from '@grafana/data';\nimport { SceneDataProvider, SceneDataTransformer, SceneObject } from '@grafana/scenes';\nimport {\n  activateSceneObjectAndParentTree,\n  findOriginalVizPanelByKey,\n  getVizPanelKeyForPanelId,\n} from 'app/features/dashboard-scene/utils/utils';\n\nimport { MIXED_REQUEST_PREFIX } from '../mixed/MixedDataSource';\n\nimport { DashboardQuery } from './types';\n\n/**\n * This should not really be called\n */\nexport class DashboardDatasource extends DataSourceApi<DashboardQuery> {\n  constructor(instanceSettings: DataSourceInstanceSettings) {\n    super(instanceSettings);\n  }\n\n  getCollapsedText(query: DashboardQuery) {\n    return `Dashboard Reference: ${query.panelId}`;\n  }\n\n  query(options: DataQueryRequest<DashboardQuery>): Observable<DataQueryResponse> {\n    const sceneScopedVar: ScopedVar | undefined = options.scopedVars?.__sceneObject;\n    let scene: SceneObject | undefined = sceneScopedVar ? (sceneScopedVar.value.valueOf() as SceneObject) : undefined;\n\n    if (!scene) {\n      throw new Error('Can only be called from a scene');\n    }\n\n    const query = options.targets[0];\n    if (!query) {\n      return of({ data: [] });\n    }\n\n    const panelId = query.panelId;\n\n    if (!panelId) {\n      return of({ data: [] });\n    }\n\n    let sourcePanel = this.findSourcePanel(scene, panelId);\n\n    if (!sourcePanel) {\n      return of({ data: [], error: { message: 'Could not find source panel' } });\n    }\n\n    let sourceDataProvider: SceneDataProvider | undefined = sourcePanel.state.$data;\n\n    if (!query.withTransforms && sourceDataProvider instanceof SceneDataTransformer) {\n      sourceDataProvider = sourceDataProvider.state.$data;\n    }\n\n    if (!sourceDataProvider || !sourceDataProvider.getResultsStream) {\n      return of({ data: [] });\n    }\n\n    return defer(() => {\n      if (!sourceDataProvider!.isActive && sourceDataProvider?.setContainerWidth) {\n        sourceDataProvider?.setContainerWidth(500);\n      }\n\n      const cleanUp = activateSceneObjectAndParentTree(sourceDataProvider!);\n\n      return sourceDataProvider!.getResultsStream!().pipe(\n        map((result) => {\n          return {\n            data: this.getDataFramesForQueryTopic(result.data, query),\n            state: result.data.state,\n            errors: result.data.errors,\n            error: result.data.error,\n            key: 'source-ds-provider',\n          };\n        }),\n        this.emitFirstLoadedDataIfMixedDS(options.requestId),\n        finalize(() => cleanUp?.())\n      );\n    });\n  }\n\n  private getDataFramesForQueryTopic(data: PanelData, query: DashboardQuery): DataFrame[] {\n    const annotations = data.annotations ?? [];\n    if (query.topic === DataTopic.Annotations) {\n      return annotations.map((frame) => ({\n        ...frame,\n        meta: {\n          ...frame.meta,\n          dataTopic: DataTopic.Series,\n        },\n      }));\n    } else {\n      return [...data.series, ...annotations];\n    }\n  }\n\n  private findSourcePanel(scene: SceneObject, panelId: number) {\n    // We're trying to find the original panel, not a cloned one, since `panelId` alone cannot resolve clones\n    return findOriginalVizPanelByKey(scene, getVizPanelKeyForPanelId(panelId));\n  }\n\n  private emitFirstLoadedDataIfMixedDS(\n    requestId: string\n  ): (source: Observable<DataQueryResponse>) => Observable<DataQueryResponse> {\n    return (source: Observable<DataQueryResponse>) => {\n      if (requestId.includes(MIXED_REQUEST_PREFIX)) {\n        let count = 0;\n\n        return source.pipe(\n          /*\n           * We can have the following piped values scenarios:\n           * Loading -> Done         - initial load\n           * Done -> Loading -> Done - refresh\n           * Done                    - adding another query in editor\n           *\n           * When we see Done as a first element this is because of ReplaySubject in SceneQueryRunner\n           *\n           * we use first(...) below to emit correct result which is last value with Done/Error states\n           *\n           * to avoid emitting first Done/Error (due to ReplaySubject) we selectively debounce only first value with such states\n           */\n          debounce((val) => {\n            if ([LoadingState.Done, LoadingState.Error].includes(val.state!) && count === 0) {\n              count++;\n              // in the refresh scenario we need to debounce first Done/Error until Loading arrives\n              //   400ms here is a magic number that was sufficient enough with the 20x cpu throttle\n              //   this still might affect slower machines but the issue affects only panel view/edit modes\n              return interval(400);\n            }\n            count++;\n            return interval(0);\n          }),\n          first((val) => val.state === LoadingState.Done || val.state === LoadingState.Error)\n        );\n      }\n\n      return source;\n    };\n  }\n\n  testDatasource(): Promise<TestDataSourceResponse> {\n    return Promise.resolve({ message: '', status: '' });\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport { DashboardQueryEditor } from './DashboardQueryEditor';\nimport { DashboardDatasource } from './datasource';\n\nexport const plugin = new DataSourcePlugin(DashboardDatasource).setQueryEditor(DashboardQueryEditor);\n","import { Observable } from '../Observable';\nimport { innerFrom } from './innerFrom';\nexport function defer(observableFactory) {\n    return new Observable(function (subscriber) {\n        innerFrom(observableFactory()).subscribe(subscriber);\n    });\n}\n//# sourceMappingURL=defer.js.map","import { operate } from '../util/lift';\nimport { noop } from '../util/noop';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nexport function debounce(durationSelector) {\n    return operate(function (source, subscriber) {\n        var hasValue = false;\n        var lastValue = null;\n        var durationSubscriber = null;\n        var emit = function () {\n            durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();\n            durationSubscriber = null;\n            if (hasValue) {\n                hasValue = false;\n                var value = lastValue;\n                lastValue = null;\n                subscriber.next(value);\n            }\n        };\n        source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n            durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();\n            hasValue = true;\n            lastValue = value;\n            durationSubscriber = createOperatorSubscriber(subscriber, emit, noop);\n            innerFrom(durationSelector(value)).subscribe(durationSubscriber);\n        }, function () {\n            emit();\n            subscriber.complete();\n        }, undefined, function () {\n            lastValue = durationSubscriber = null;\n        }));\n    });\n}\n//# sourceMappingURL=debounce.js.map","import { css } from '@emotion/css';\nimport React__default from 'react';\nimport '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport '../../QueryEditor/types.js';\nimport 'lodash';\nimport '../../QueryEditor/EditorList.js';\nimport { EditorStack } from '../../QueryEditor/EditorStack.js';\nimport '../../QueryEditor/Space.js';\nimport 'react-use';\nimport '../../QueryEditor/QueryHeader.js';\nimport 'react-virtualized-auto-sizer';\nimport 'sql-formatter-plus';\nimport '../../SQLEditor/standardSql/language.js';\nimport 'uuid';\nimport '@grafana/runtime';\nimport '../../SQLEditor/utils/debugger.js';\nimport '../../SQLEditor/standardSql/macros.js';\nimport '../../QueryEditor/visual-query-builder/AwesomeQueryBuilder.js';\nimport '../../QueryEditor/visual-query-builder/WhereRow.js';\nimport '../../QueryEditor/visual-query-builder/EditorField.js';\nimport 'rxjs';\nimport 'rxjs/operators';\n\nfunction OperationsEditorRow({ children }) {\n  const styles = useStyles2(getStyles);\n  return /* @__PURE__ */ React__default.createElement(\"div\", { className: styles.root }, /* @__PURE__ */ React__default.createElement(EditorStack, { gap: 1 }, children));\n}\nconst getStyles = (theme) => {\n  return {\n    root: css({\n      padding: theme.spacing(1, 1, 0, 1),\n      backgroundColor: theme.colors.background.secondary,\n      borderRadius: theme.shape.radius.default\n    })\n  };\n};\n\nexport { OperationsEditorRow };\n//# sourceMappingURL=OperationsEditorRow.js.map\n"],"names":["getQueryDisplayText","query","isPanelInEdit","panelId","panelInEditId","idToCompareWith","DashboardScene","topics","INVALID_PANEL_DESCRIPTION","DashboardQueryEditor","data","onChange","onRunQuery","defaultDatasource","useAsync","panel","results","loadingResults","mainDS","ds","fmt","queryData","onUpdateQuery","onPanelChanged","id","onTransformToggle","onTopicChanged","t","isMixedDSWithDashboardQueries","getPanelDescription","datasource","dsname","queryCount","dashboard","showTransforms","panels","config","description","isDisabled","styles","getStyles","selectId","useId","selected","OperationsEditorRow","Stack","Field","Select","item","RadioButtonGroup","Spinner","target","i","theme","DashboardDatasource","instanceSettings","options","sceneScopedVar","scene","of","sourcePanel","sourceDataProvider","defer","cleanUp","map","result","finalize","annotations","frame","requestId","source","count","debounce","val","interval","first","observableFactory","subscriber","durationSelector","hasValue","lastValue","durationSubscriber","emit","value","children"],"sourceRoot":""}