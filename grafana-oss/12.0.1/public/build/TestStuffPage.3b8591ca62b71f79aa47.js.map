{"version":3,"file":"TestStuffPage.3b8591ca62b71f79aa47.js","mappings":"iPAOO,MAAMA,EAAgB,IAAM,CACjC,MAAMC,EAAqB,CACzB,GAAI,YACJ,KAAM,YACN,KAAM,YACN,SAAU,eACV,IAAK,cACP,EAEMC,KAAY,MAAmB,EAErC,SACE,QAAC,IAAI,CAAC,SAAU,CAAE,KAAAD,EAAY,KAAMA,CAAK,EACvC,oBAACE,EAAA,CAAe,iBAAiB,yBAA0B,MAC3D,OAAC,IAAI,CAAC,QAAQ,KACZ,mBAAC,KAAK,CAAC,QAAQ,mEAAmE,sDAElF,EACF,KACA,QAAC,IAAK,CACJ,oBAAC,KAAM,CAAC,QAAS,IAAMD,EAAU,QAAQ,gBAAiB,0BAA0B,EAAG,QAAQ,UAC7F,mBAAC,KAAK,CAAC,QAAQ,kCAAkC,mBAAO,EAC1D,KACA,OAAC,MACC,QAAS,IAAMA,EAAU,QAAQ,gBAAiB,2BAA4B,mBAAmB,EACjG,QAAQ,YAER,mBAAC,KAAK,CAAC,QAAQ,kCAAkC,mBAAO,EAC1D,KACA,OAAC,MACC,QAAS,IAAMA,EAAU,MAAM,cAAe,2BAA4B,wBAAwB,EAClG,QAAQ,cAER,mBAAC,KAAK,CAAC,QAAQ,gCAAgC,iBAAK,EACtD,GACF,GACF,CAEJ,EAEA,SAASC,EAAe,CAAE,iBAAAC,CAAiB,EAAiC,CAC1E,KAAM,CAAE,MAAAC,CAAM,KAAI,KAAe,CAAE,iBAAAD,CAAiB,CAAC,EAErD,OAAIC,EAAM,SAAW,EACZ,QAIP,OAAC,OACE,SAAAA,EAAM,IAAI,CAACC,EAAMC,OAEd,OAAC,KAAU,CAAC,KAAMD,EAAK,KAAM,MAAOA,EAAK,YACtC,SAAAA,EAAK,OADmDA,EAAK,EAEhE,CAEH,EACH,CAEJ,CAEA,QAAeN,C","sources":["webpack://grafana/./public/app/features/sandbox/TestStuffPage.tsx"],"sourcesContent":["import { NavModelItem } from '@grafana/data';\nimport { usePluginLinks } from '@grafana/runtime';\nimport { Button, LinkButton, Stack, Text } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { Trans } from 'app/core/internationalization';\n\nexport const TestStuffPage = () => {\n  const node: NavModelItem = {\n    id: 'test-page',\n    text: 'Test page',\n    icon: 'dashboard',\n    subTitle: 'FOR TESTING!',\n    url: 'sandbox/test',\n  };\n\n  const notifyApp = useAppNotification();\n\n  return (\n    <Page navModel={{ node: node, main: node }}>\n      <LinkToBasicApp extensionPointId=\"grafana/sandbox/testing\" />\n      <Text variant=\"h5\">\n        <Trans i18nKey=\"sandbox.test-stuff-page.application-notifications-toasts-testing\">\n          Application notifications (toasts) testing\n        </Trans>\n      </Text>\n      <Stack>\n        <Button onClick={() => notifyApp.success('Success toast', 'some more text goes here')} variant=\"primary\">\n          <Trans i18nKey=\"sandbox.test-stuff-page.success\">Success</Trans>\n        </Button>\n        <Button\n          onClick={() => notifyApp.warning('Warning toast', 'some more text goes here', 'bogus-trace-99999')}\n          variant=\"secondary\"\n        >\n          <Trans i18nKey=\"sandbox.test-stuff-page.warning\">Warning</Trans>\n        </Button>\n        <Button\n          onClick={() => notifyApp.error('Error toast', 'some more text goes here', 'bogus-trace-fdsfdfsfds')}\n          variant=\"destructive\"\n        >\n          <Trans i18nKey=\"sandbox.test-stuff-page.error\">Error</Trans>\n        </Button>\n      </Stack>\n    </Page>\n  );\n};\n\nfunction LinkToBasicApp({ extensionPointId }: { extensionPointId: string }) {\n  const { links } = usePluginLinks({ extensionPointId });\n\n  if (links.length === 0) {\n    return null;\n  }\n\n  return (\n    <div>\n      {links.map((link, i) => {\n        return (\n          <LinkButton href={link.path} title={link.description} key={link.id}>\n            {link.title}\n          </LinkButton>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default TestStuffPage;\n"],"names":["TestStuffPage","node","notifyApp","LinkToBasicApp","extensionPointId","links","link","i"],"sourceRoot":""}