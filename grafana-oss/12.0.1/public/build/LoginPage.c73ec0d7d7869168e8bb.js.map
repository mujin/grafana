{"version":3,"file":"LoginPage.c73ec0d7d7869168e8bb.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/Login/LoginServiceButtons.tsx","webpack://grafana/./public/app/core/components/Login/PasswordlessConfirmationForm.tsx","webpack://grafana/./public/app/core/components/Login/PasswordlessLoginForm.tsx","webpack://grafana/./public/app/core/components/Login/UserSignup.tsx","webpack://grafana/./public/app/core/components/Login/LoginPage.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport { pickBy } from 'lodash';\n\nimport { GrafanaTheme2, DEFAULT_SAML_NAME } from '@grafana/data';\nimport { Icon, IconName, LinkButton, Stack, useStyles2, useTheme2 } from '@grafana/ui';\nimport config from 'app/core/config';\nimport { Trans } from 'app/core/internationalization';\n\nexport interface LoginService {\n  bgColor: string;\n  enabled: boolean;\n  name: string;\n  hrefName?: string;\n  icon: IconName;\n}\n\nexport interface LoginServices {\n  [key: string]: LoginService;\n}\n\nconst loginServices: () => LoginServices = () => {\n  const oauthEnabled = !!config.oauth;\n\n  return {\n    saml: {\n      bgColor: '#464646',\n      enabled: config.samlEnabled,\n      name: config.samlName || DEFAULT_SAML_NAME,\n      icon: 'key-skeleton-alt',\n    },\n    google: {\n      bgColor: '#e84d3c',\n      enabled: oauthEnabled && Boolean(config.oauth.google),\n      name: config.oauth?.google?.name || 'Google',\n      icon: config.oauth?.google?.icon || ('google' as const),\n    },\n    azuread: {\n      bgColor: '#2f2f2f',\n      enabled: oauthEnabled && Boolean(config.oauth.azuread),\n      name: config.oauth?.azuread?.name || 'Microsoft',\n      icon: config.oauth?.azuread?.icon || ('microsoft' as const),\n    },\n    github: {\n      bgColor: '#464646',\n      enabled: oauthEnabled && Boolean(config.oauth.github),\n      name: config.oauth?.github?.name || 'GitHub',\n      icon: config.oauth?.github?.icon || ('github' as const),\n    },\n    gitlab: {\n      bgColor: '#fc6d26',\n      enabled: oauthEnabled && Boolean(config.oauth.gitlab),\n      name: config.oauth?.gitlab?.name || 'GitLab',\n      icon: config.oauth?.gitlab?.icon || ('gitlab' as const),\n    },\n    grafanacom: {\n      bgColor: '#262628',\n      enabled: oauthEnabled && Boolean(config.oauth.grafana_com),\n      name: config.oauth?.grafana_com?.name || 'Grafana.com',\n      icon: config.oauth?.grafana_com?.icon || ('grafana' as const),\n      hrefName: 'grafana_com',\n    },\n    okta: {\n      bgColor: '#2f2f2f',\n      enabled: oauthEnabled && Boolean(config.oauth.okta),\n      name: config.oauth?.okta?.name || 'Okta',\n      icon: config.oauth?.okta?.icon || ('okta' as const),\n    },\n    oauth: {\n      bgColor: '#262628',\n      enabled: oauthEnabled && Boolean(config.oauth.generic_oauth),\n      name: config.oauth?.generic_oauth?.name || 'OAuth',\n      icon: config.oauth?.generic_oauth?.icon || ('signin' as const),\n      hrefName: 'generic_oauth',\n    },\n  };\n};\n\nconst getServiceStyles = (theme: GrafanaTheme2) => {\n  return {\n    button: css({\n      color: '#d8d9da',\n      position: 'relative',\n    }),\n    buttonIcon: css({\n      position: 'absolute',\n      left: theme.spacing(1),\n      top: '50%',\n      transform: 'translateY(-50%)',\n    }),\n    divider: {\n      base: css({\n        color: theme.colors.text.primary,\n        display: 'flex',\n        marginBottom: theme.spacing(1),\n        justifyContent: 'space-between',\n        textAlign: 'center',\n        width: '100%',\n      }),\n      line: css({\n        width: 100,\n        height: 10,\n        borderBottom: `1px solid ${theme.colors.text}`,\n      }),\n    },\n  };\n};\n\nconst LoginDivider = () => {\n  const styles = useStyles2(getServiceStyles);\n  return (\n    <div className={styles.divider.base}>\n      <div>\n        <div className={styles.divider.line} />\n      </div>\n      <div>\n        <span>{!config.disableLoginForm && <Trans i18nKey=\"login.divider.connecting-text\">or</Trans>}</span>\n      </div>\n      <div>\n        <div className={styles.divider.line} />\n      </div>\n    </div>\n  );\n};\n\nfunction getButtonStyleFor(service: LoginService, styles: ReturnType<typeof getServiceStyles>, theme: GrafanaTheme2) {\n  return cx(\n    styles.button,\n    css({\n      backgroundColor: service.bgColor,\n      color: theme.colors.getContrastText(service.bgColor),\n\n      ['&:hover']: {\n        backgroundColor: theme.colors.emphasize(service.bgColor, 0.15),\n        boxShadow: theme.shadows.z1,\n      },\n    })\n  );\n}\n\nexport const LoginServiceButtons = () => {\n  const enabledServices = pickBy(loginServices(), (service) => service.enabled);\n  const hasServices = Object.keys(enabledServices).length > 0;\n  const theme = useTheme2();\n  const styles = useStyles2(getServiceStyles);\n\n  if (hasServices) {\n    return (\n      <Stack direction={'column'} width={'100%'}>\n        <LoginDivider />\n        {Object.entries(enabledServices).map(([key, service]) => {\n          const serviceName = service.name;\n          return (\n            <LinkButton\n              key={key}\n              className={getButtonStyleFor(service, styles, theme)}\n              href={`login/${service.hrefName ? service.hrefName : key}`}\n              target=\"_self\"\n              fullWidth\n            >\n              <Icon className={styles.buttonIcon} name={service.icon} />\n              <Trans i18nKey=\"login.services.sing-in-with-prefix\">Sign in with {{ serviceName }}</Trans>\n            </LinkButton>\n          );\n        })}\n      </Stack>\n    );\n  }\n\n  return null;\n};\n","import { css } from '@emotion/css';\nimport { useId, useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { locationService } from '@grafana/runtime';\nimport { Button, Input, Field, useStyles2 } from '@grafana/ui';\nimport { Branding } from 'app/core/components/Branding/Branding';\nimport { t } from 'app/core/internationalization';\n\nimport { PasswordlessConfirmationFormModel } from './LoginCtrl';\n\ninterface Props {\n  onSubmit: (data: PasswordlessConfirmationFormModel) => void;\n  isLoggingIn: boolean;\n}\n\nexport const PasswordlessConfirmation = ({ onSubmit, isLoggingIn }: Props) => {\n  const styles = useStyles2(getStyles);\n  const confirmationCodeId = useId();\n  const codeId = useId();\n  const usernameId = useId();\n  const nameId = useId();\n  const [signup, setSignup] = useState(false);\n\n  const {\n    handleSubmit,\n    register,\n    setValue,\n    formState: { errors },\n  } = useForm<PasswordlessConfirmationFormModel>({ mode: 'onChange' });\n\n  useEffect(() => {\n    Branding.LoginTitle = \"We've sent you an email!\";\n    Branding.GetLoginSubTitle = () =>\n      \"Check your inbox and click the confirmation link or use the confirmation code we've sent.\";\n\n    const queryValues = locationService.getSearch();\n\n    setValue('code', queryValues.get('code') || '');\n    if (queryValues.get('confirmationCode')) {\n      setValue('confirmationCode', queryValues.get('confirmationCode') || '');\n      if (!queryValues.get('signup')) {\n        handleSubmit(onSubmit)();\n      }\n    }\n    if (queryValues.get('signup')) {\n      setSignup(true);\n    }\n    if (queryValues.get('username')) {\n      setValue('username', queryValues.get('username') || '');\n    }\n    if (queryValues.get('name')) {\n      setValue('name', queryValues.get('name') || '');\n    }\n  }, [setValue, handleSubmit, onSubmit, setSignup]);\n\n  return (\n    <div className={styles.wrapper}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Field hidden={true}>\n          <Input {...register('code')} id={codeId} hidden={true} />\n        </Field>\n        <Field\n          label={t('login.form.confirmation-code-label', 'Confirmation code')}\n          invalid={!!errors.code}\n          error={errors.code?.message}\n        >\n          <Input\n            {...register('confirmationCode', {\n              required: t('login.form.confirmation-code', 'Confirmation code is required'),\n            })}\n            id={confirmationCodeId}\n            autoFocus\n            autoCapitalize=\"none\"\n            placeholder={t('login.form.confirmation-code-placeholder', 'confirmation code')}\n            data-testid={selectors.pages.PasswordlessLogin.email}\n          />\n        </Field>\n        {signup && (\n          <>\n            <Field\n              label={t('login.form.passwordless-username-label', 'Username')}\n              invalid={!!errors.code}\n              error={errors.code?.message}\n              hidden={true}\n            >\n              <Input\n                {...register('username')}\n                id={usernameId}\n                autoFocus\n                autoCapitalize=\"none\"\n                data-testid={selectors.pages.PasswordlessLogin.email}\n                hidden={true}\n              />\n            </Field>\n            <Field label={t('login.form.name-label', 'Name')} invalid={!!errors.code} error={errors.code?.message}>\n              <Input\n                {...register('name')}\n                id={nameId}\n                autoFocus\n                autoCapitalize=\"none\"\n                data-testid={selectors.pages.PasswordlessLogin.email}\n              />\n            </Field>\n          </>\n        )}\n        <Button\n          type=\"submit\"\n          data-testid={selectors.pages.Login.submit}\n          className={styles.submitButton}\n          disabled={isLoggingIn}\n        >\n          {isLoggingIn ? t('login.form.submit-loading-label', 'Logging in...') : t('login.form.submit-label', 'Log in')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css({\n      width: '100%',\n      paddingBottom: theme.spacing(2),\n    }),\n\n    submitButton: css({\n      justifyContent: 'center',\n      width: '100%',\n    }),\n\n    skipButton: css({\n      alignSelf: 'flex-start',\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport { useId } from 'react';\nimport { useForm } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button, Input, Field, useStyles2 } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { PasswordlessFormModel } from './LoginCtrl';\n\ninterface Props {\n  onSubmit: (data: PasswordlessFormModel) => void;\n  isLoggingIn: boolean;\n}\n\nexport const PasswordlessLoginForm = ({ onSubmit, isLoggingIn }: Props) => {\n  const styles = useStyles2(getStyles);\n  const emailId = useId();\n  const {\n    handleSubmit,\n    register,\n    formState: { errors },\n  } = useForm<PasswordlessFormModel>({ mode: 'onChange' });\n\n  return (\n    <div className={styles.wrapper}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Field label={t('login.form.email-label', 'Email')} invalid={!!errors.email} error={errors.email?.message}>\n          <Input\n            {...register('email', { required: t('login.form.email-required', 'Email is required') })}\n            id={emailId}\n            autoFocus\n            autoCapitalize=\"none\"\n            placeholder={t('login.form.email-placeholder', 'email')}\n            data-testid={selectors.pages.PasswordlessLogin.email}\n          />\n        </Field>\n        <Button\n          type=\"submit\"\n          data-testid={selectors.pages.Login.submit}\n          className={styles.submitButton}\n          disabled={isLoggingIn}\n        >\n          {isLoggingIn\n            ? t('login.form.verify-email-loading-label', 'Sending email...')\n            : t('login.form.verify-email-label', 'Send a verification email')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css({\n      width: '100%',\n      paddingBottom: theme.spacing(2),\n    }),\n\n    submitButton: css({\n      justifyContent: 'center',\n      width: '100%',\n    }),\n\n    skipButton: css({\n      alignSelf: 'flex-start',\n    }),\n  };\n};\n","import { css } from '@emotion/css';\n\nimport { LinkButton, Stack } from '@grafana/ui';\nimport { getConfig } from 'app/core/config';\nimport { Trans } from 'app/core/internationalization';\n\nexport const UserSignup = () => {\n  const href = getConfig().verifyEmailEnabled ? `${getConfig().appSubUrl}/verify` : `${getConfig().appSubUrl}/signup`;\n  const paddingTop = css({ paddingTop: '16px' });\n\n  return (\n    <Stack direction=\"column\">\n      <div className={paddingTop}>\n        <Trans i18nKey=\"login.signup.new-to-question\">New to Grafana?</Trans>\n      </div>\n      <LinkButton\n        className={css({\n          width: '100%',\n          justifyContent: 'center',\n        })}\n        href={href}\n        variant=\"secondary\"\n        fill=\"outline\"\n      >\n        <Trans i18nKey=\"login.signup.button-label\">Sign up</Trans>\n      </LinkButton>\n    </Stack>\n  );\n};\n","// Libraries\nimport { css } from '@emotion/css';\n\n// Components\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Alert, LinkButton, Stack, useStyles2 } from '@grafana/ui';\nimport { Branding } from 'app/core/components/Branding/Branding';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { ChangePassword } from '../ForgottenPassword/ChangePassword';\n\nimport LoginCtrl from './LoginCtrl';\nimport { LoginForm } from './LoginForm';\nimport { LoginLayout, InnerBox } from './LoginLayout';\nimport { LoginServiceButtons } from './LoginServiceButtons';\nimport { PasswordlessConfirmation } from './PasswordlessConfirmationForm';\nimport { PasswordlessLoginForm } from './PasswordlessLoginForm';\nimport { UserSignup } from './UserSignup';\n\nconst LoginPage = () => {\n  const styles = useStyles2(getStyles);\n  document.title = Branding.AppTitle;\n\n  return (\n    <LoginCtrl>\n      {({\n        loginHint,\n        passwordHint,\n        disableLoginForm,\n        disableUserSignUp,\n        login,\n        passwordlessStart,\n        passwordlessConfirm,\n        showPasswordlessConfirmation,\n        isLoggingIn,\n        changePassword,\n        skipPasswordChange,\n        isChangingPassword,\n        showDefaultPasswordWarning,\n        loginErrorMessage,\n      }) => (\n        <LoginLayout isChangingPassword={isChangingPassword}>\n          {!isChangingPassword && !showPasswordlessConfirmation && (\n            <InnerBox>\n              {loginErrorMessage && (\n                <Alert className={styles.alert} severity=\"error\" title={t('login.error.title', 'Login failed')}>\n                  {loginErrorMessage}\n                </Alert>\n              )}\n\n              {!disableLoginForm && !config.auth.passwordlessEnabled && (\n                <LoginForm onSubmit={login} loginHint={loginHint} passwordHint={passwordHint} isLoggingIn={isLoggingIn}>\n                  <Stack justifyContent=\"flex-end\">\n                    {!config.auth.disableLogin && (\n                      <LinkButton\n                        className={styles.forgottenPassword}\n                        fill=\"text\"\n                        href={`${config.appSubUrl}/user/password/send-reset-email`}\n                      >\n                        <Trans i18nKey=\"login.forgot-password\">Forgot your password?</Trans>\n                      </LinkButton>\n                    )}\n                  </Stack>\n                </LoginForm>\n              )}\n              {config.auth.passwordlessEnabled && (\n                <PasswordlessLoginForm onSubmit={passwordlessStart} isLoggingIn={isLoggingIn}></PasswordlessLoginForm>\n              )}\n              <LoginServiceButtons />\n              {!disableUserSignUp && <UserSignup />}\n            </InnerBox>\n          )}\n\n          {config.auth.passwordlessEnabled && showPasswordlessConfirmation && (\n            <InnerBox>\n              <PasswordlessConfirmation\n                onSubmit={passwordlessConfirm}\n                isLoggingIn={isLoggingIn}\n              ></PasswordlessConfirmation>\n            </InnerBox>\n          )}\n\n          {isChangingPassword && !config.auth.passwordlessEnabled && (\n            <InnerBox>\n              <ChangePassword\n                showDefaultPasswordWarning={showDefaultPasswordWarning}\n                onSubmit={changePassword}\n                onSkip={() => skipPasswordChange()}\n              />\n            </InnerBox>\n          )}\n        </LoginLayout>\n      )}\n    </LoginCtrl>\n  );\n};\n\nexport default LoginPage;\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    forgottenPassword: css({\n      padding: 0,\n      marginTop: theme.spacing(0.5),\n    }),\n\n    alert: css({\n      width: '100%',\n    }),\n  };\n};\n"],"names":["loginServices","oauthEnabled","getServiceStyles","theme","LoginDivider","styles","getButtonStyleFor","service","LoginServiceButtons","enabledServices","hasServices","Stack","key","serviceName","Icon","PasswordlessConfirmation","onSubmit","isLoggingIn","getStyles","confirmationCodeId","codeId","usernameId","nameId","signup","setSignup","handleSubmit","register","setValue","errors","Branding","queryValues","Field","Input","selectors","Button","PasswordlessLoginForm","emailId","UserSignup","href","paddingTop","LoginCtrl","loginHint","passwordHint","disableLoginForm","disableUserSignUp","login","passwordlessStart","passwordlessConfirm","showPasswordlessConfirmation","changePassword","skipPasswordChange","isChangingPassword","showDefaultPasswordWarning","loginErrorMessage","LoginLayout","Alert","config","LoginForm","ChangePassword"],"sourceRoot":""}