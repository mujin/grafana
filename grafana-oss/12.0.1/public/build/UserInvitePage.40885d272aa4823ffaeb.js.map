{"version":3,"file":"UserInvitePage.40885d272aa4823ffaeb.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/Form/Form.tsx","webpack://grafana/./public/app/features/org/UserInviteForm.tsx","webpack://grafana/./public/app/features/org/UserInvitePage.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { HTMLProps, useEffect } from 'react';\nimport * as React from 'react';\nimport {\n  useForm,\n  Mode,\n  DefaultValues,\n  SubmitHandler,\n  FieldValues,\n  UseFormReturn,\n  FieldErrors,\n  FieldPath,\n} from 'react-hook-form';\n\nexport type FormAPI<T extends FieldValues> = Omit<UseFormReturn<T>, 'handleSubmit'> & {\n  errors: FieldErrors<T>;\n};\n\ninterface FormProps<T extends FieldValues> extends Omit<HTMLProps<HTMLFormElement>, 'onSubmit' | 'children'> {\n  validateOn?: Mode;\n  validateOnMount?: boolean;\n  validateFieldsOnMount?: FieldPath<T> | Array<FieldPath<T>>;\n  defaultValues?: DefaultValues<T>;\n  onSubmit: SubmitHandler<T>;\n  children: (api: FormAPI<T>) => React.ReactNode;\n  /** Sets max-width for container. Use it instead of setting individual widths on inputs.*/\n  maxWidth?: number | 'none';\n}\n\nexport function Form<T extends FieldValues>({\n  defaultValues,\n  onSubmit,\n  validateOnMount = false,\n  validateFieldsOnMount,\n  children,\n  validateOn = 'onSubmit',\n  maxWidth = 600,\n  ...htmlProps\n}: FormProps<T>) {\n  const { handleSubmit, trigger, formState, ...rest } = useForm<T>({\n    mode: validateOn,\n    defaultValues,\n  });\n\n  useEffect(() => {\n    if (validateOnMount) {\n      trigger(validateFieldsOnMount);\n    }\n  }, [trigger, validateFieldsOnMount, validateOnMount]);\n\n  return (\n    <form\n      className={css({\n        maxWidth: maxWidth !== 'none' ? maxWidth + 'px' : maxWidth,\n        width: '100%',\n      })}\n      onSubmit={handleSubmit(onSubmit)}\n      {...htmlProps}\n    >\n      {children({ errors: formState.errors, formState, trigger, ...rest })}\n    </form>\n  );\n}\n","import { Controller } from 'react-hook-form';\n\nimport { locationUtil, SelectableValue } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport {\n  Button,\n  LinkButton,\n  Input,\n  Switch,\n  RadioButtonGroup,\n  Field,\n  FieldSet,\n  Icon,\n  TextLink,\n  Tooltip,\n  Label,\n  Stack,\n} from '@grafana/ui';\nimport { getConfig } from 'app/core/config';\nimport { t, Trans } from 'app/core/internationalization';\nimport { OrgRole, useDispatch } from 'app/types';\n\nimport { Form } from '../../core/components/Form/Form';\nimport { addInvitee } from '../invites/state/actions';\n\nconst tooltipMessage = (\n  <>\n    You can now select the &quot;No basic role&quot; option and add permissions to your custom needs. You can find more\n    information in&nbsp;\n    <TextLink\n      href=\"https://grafana.com/docs/grafana/latest/administration/roles-and-permissions/#organization-roles\"\n      variant=\"bodySmall\"\n      external\n    >\n      our documentation\n    </TextLink>\n    .\n  </>\n);\n\nconst roles: Array<SelectableValue<OrgRole>> = Object.values(OrgRole).map((r) => ({\n  label: r === OrgRole.None ? 'No basic role' : r,\n  value: r,\n}));\n\nexport interface FormModel {\n  role: OrgRole;\n  name: string;\n  loginOrEmail?: string;\n  sendEmail: boolean;\n  email: string;\n}\n\nconst defaultValues: FormModel = {\n  name: '',\n  email: '',\n  role: OrgRole.Editor,\n  sendEmail: true,\n};\n\nexport const UserInviteForm = () => {\n  const dispatch = useDispatch();\n\n  const onSubmit = async (formData: FormModel) => {\n    await dispatch(addInvitee(formData)).unwrap();\n    locationService.push('/admin/users/');\n  };\n\n  return (\n    <Form defaultValues={defaultValues} onSubmit={onSubmit}>\n      {({ register, control, errors }) => {\n        return (\n          <>\n            <FieldSet>\n              <Field\n                invalid={!!errors.loginOrEmail}\n                error={!!errors.loginOrEmail ? 'Email or username is required' : undefined}\n                label={t('org.user-invite-form.label-email-or-username', 'Email or username')}\n              >\n                {/* eslint-disable-next-line @grafana/no-untranslated-strings */}\n                <Input {...register('loginOrEmail', { required: true })} placeholder=\"email@example.com\" />\n              </Field>\n              <Field invalid={!!errors.name} label={t('org.user-invite-form.label-name', 'Name')}>\n                <Input\n                  {...register('name')}\n                  placeholder={t('org.user-invite-form.placeholder-optional', '(optional)')}\n                />\n              </Field>\n              <Field\n                invalid={!!errors.role}\n                label={\n                  <Label>\n                    <Stack gap={0.5}>\n                      <span>\n                        <Trans i18nKey=\"org.user-invite-form.role\">Role</Trans>\n                      </span>\n                      {tooltipMessage && (\n                        <Tooltip placement=\"right-end\" interactive={true} content={tooltipMessage}>\n                          <Icon name=\"info-circle\" size=\"xs\" />\n                        </Tooltip>\n                      )}\n                    </Stack>\n                  </Label>\n                }\n              >\n                <Controller\n                  render={({ field: { ref, ...field } }) => <RadioButtonGroup {...field} options={roles} />}\n                  control={control}\n                  name=\"role\"\n                />\n              </Field>\n              <Field label={t('org.user-invite-form.label-send-invite-email', 'Send invite email')}>\n                <Switch id=\"send-email-switch\" {...register('sendEmail')} />\n              </Field>\n            </FieldSet>\n            <Stack>\n              <Button type=\"submit\">\n                <Trans i18nKey=\"org.user-invite-form.submit\">Submit</Trans>\n              </Button>\n              <LinkButton href={locationUtil.assureBaseUrl(getConfig().appSubUrl + '/admin/users')} variant=\"secondary\">\n                <Trans i18nKey=\"org.user-invite-form.back\">Back</Trans>\n              </LinkButton>\n            </Stack>\n          </>\n        );\n      }}\n    </Form>\n  );\n};\n\nexport default UserInviteForm;\n","import { Page } from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\n\nimport UserInviteForm from './UserInviteForm';\n\nexport function UserInvitePage() {\n  const subTitle = (\n    <>\n      Send invitation or add existing Grafana user to the organization.\n      <span className=\"highlight-word\"> {contextSrv.user.orgName}</span>\n    </>\n  );\n\n  return (\n    <Page navId=\"global-users\" pageNav={{ text: 'Invite user' }} subTitle={subTitle}>\n      <Page.Contents>\n        <UserInviteForm />\n      </Page.Contents>\n    </Page>\n  );\n}\n\nexport default UserInvitePage;\n"],"names":["Form","defaultValues","onSubmit","validateOnMount","validateFieldsOnMount","children","validateOn","maxWidth","htmlProps","handleSubmit","trigger","formState","rest","tooltipMessage","TextLink","roles","r","dispatch","formData","register","control","errors","FieldSet","Field","Input","Label","Stack","Tooltip","Icon","ref","field","RadioButtonGroup","Switch","Button","UserInvitePage","subTitle","Page"],"sourceRoot":""}