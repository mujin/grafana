{"version":3,"file":"stateTimelinePanel.6a53d25819c4c9e70c58.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/GraphNG/GraphNG.tsx","webpack://grafana/./packages/grafana-data/src/transformations/transformers/nulls/nullToUndefThreshold.ts","webpack://grafana/./public/app/core/components/GraphNG/utils.ts","webpack://grafana/./public/app/core/components/TimelineChart/TimelineChart.tsx","webpack://grafana/./public/app/plugins/panel/state-timeline/StateTimelineTooltip2.tsx","webpack://grafana/./public/app/plugins/panel/state-timeline/StateTimelinePanel.tsx","webpack://grafana/./public/app/plugins/panel/state-timeline/migrations.ts","webpack://grafana/./public/app/plugins/panel/state-timeline/suggestions.ts","webpack://grafana/./public/app/plugins/panel/state-timeline/module.tsx","webpack://grafana/./public/app/plugins/panel/state-timeline/panelcfg.gen.ts","webpack://grafana/./public/app/plugins/panel/state-timeline/utils.tsx"],"sourcesContent":["import { Component } from 'react';\nimport * as React from 'react';\nimport uPlot, { AlignedData } from 'uplot';\n\nimport {\n  DataFrame,\n  DataLinkPostProcessor,\n  Field,\n  FieldMatcherID,\n  fieldMatchers,\n  FieldType,\n  getLinksSupplier,\n  InterpolateFunction,\n  TimeRange,\n  TimeZone,\n} from '@grafana/data';\nimport { DashboardCursorSync, VizLegendOptions } from '@grafana/schema';\nimport { Themeable2, VizLayout } from '@grafana/ui';\nimport { UPlotChart, AxisProps, Renderers, UPlotConfigBuilder, ScaleProps, pluginLog } from '@grafana/ui/internal';\n\nimport { GraphNGLegendEvent, XYFieldMatchers } from './types';\nimport { preparePlotFrame as defaultPreparePlotFrame } from './utils';\n\n/**\n * @internal -- not a public API\n */\nexport type PropDiffFn<T extends Record<string, unknown> = {}> = (prev: T, next: T) => boolean;\n\nexport interface GraphNGProps extends Themeable2 {\n  frames: DataFrame[];\n  structureRev?: number; // a number that will change when the frames[] structure changes\n  width: number;\n  height: number;\n  timeRange: TimeRange;\n  timeZone: TimeZone[] | TimeZone;\n  legend: VizLegendOptions;\n  fields?: XYFieldMatchers; // default will assume timeseries data\n  renderers?: Renderers;\n  tweakScale?: (opts: ScaleProps, forField: Field) => ScaleProps;\n  tweakAxis?: (opts: AxisProps, forField: Field) => AxisProps;\n  onLegendClick?: (event: GraphNGLegendEvent) => void;\n  children?: (builder: UPlotConfigBuilder, alignedFrame: DataFrame) => React.ReactNode;\n  prepConfig: (alignedFrame: DataFrame, allFrames: DataFrame[], getTimeRange: () => TimeRange) => UPlotConfigBuilder;\n  propsToDiff?: Array<string | PropDiffFn>;\n  preparePlotFrame?: (frames: DataFrame[], dimFields: XYFieldMatchers) => DataFrame | null;\n  renderLegend: (config: UPlotConfigBuilder) => React.ReactElement | null;\n  replaceVariables: InterpolateFunction;\n  dataLinkPostProcessor?: DataLinkPostProcessor;\n  cursorSync?: DashboardCursorSync;\n\n  // Remove fields that are hidden from the visualization before rendering\n  // The fields will still be available for other things like data links\n  // this is a temporary hack that only works when:\n  // 1. renderLegend (above) does not render <PlotLegend>\n  // 2. does not have legend series toggle\n  // 3. passes through all fields required for link/action gen (including those with hideFrom.viz)\n  omitHideFromViz?: boolean;\n\n  /**\n   * needed for propsToDiff to re-init the plot & config\n   * this is a generic approach to plot re-init, without having to specify which panel-level options\n   * should cause invalidation. we can drop this in favor of something like panelOptionsRev that gets passed in\n   * similar to structureRev. then we can drop propsToDiff entirely.\n   */\n  options?: Record<string, any>;\n}\n\nfunction sameProps<T extends Record<string, unknown>>(\n  prevProps: T,\n  nextProps: T,\n  propsToDiff: Array<string | PropDiffFn> = []\n) {\n  for (const propName of propsToDiff) {\n    if (typeof propName === 'function') {\n      if (!propName(prevProps, nextProps)) {\n        return false;\n      }\n    } else if (nextProps[propName] !== prevProps[propName]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @internal -- not a public API\n */\nexport interface GraphNGState {\n  alignedFrame: DataFrame;\n  alignedData?: AlignedData;\n  config?: UPlotConfigBuilder;\n}\n\nconst defaultMatchers = {\n  x: fieldMatchers.get(FieldMatcherID.firstTimeField).get({}),\n  y: fieldMatchers.get(FieldMatcherID.byTypes).get(new Set([FieldType.number, FieldType.enum])),\n};\n\n/**\n * \"Time as X\" core component, expects ascending x\n */\nexport class GraphNG extends Component<GraphNGProps, GraphNGState> {\n  private plotInstance: React.RefObject<uPlot>;\n\n  constructor(props: GraphNGProps) {\n    super(props);\n    let state = this.prepState(props);\n    state.alignedData = state.config!.prepData!([state.alignedFrame]) as AlignedData;\n    this.state = state;\n    this.plotInstance = React.createRef();\n  }\n\n  getTimeRange = () => this.props.timeRange;\n\n  prepState(props: GraphNGProps, withConfig = true) {\n    let state: GraphNGState = null as any;\n\n    const { frames, fields = defaultMatchers, preparePlotFrame, replaceVariables, dataLinkPostProcessor } = props;\n\n    const preparePlotFrameFn = preparePlotFrame ?? defaultPreparePlotFrame;\n\n    const withLinks = frames.some((frame) => frame.fields.some((field) => (field.config.links?.length ?? 0) > 0));\n\n    const alignedFrame = preparePlotFrameFn(\n      frames,\n      {\n        ...fields,\n        // if there are data links, keep all fields during join so they're index-matched\n        y: withLinks ? () => true : fields.y,\n      },\n      props.timeRange\n    );\n\n    pluginLog('GraphNG', false, 'data aligned', alignedFrame);\n\n    if (alignedFrame) {\n      let alignedFrameFinal = alignedFrame;\n\n      if (withLinks) {\n        const timeZone = Array.isArray(this.props.timeZone) ? this.props.timeZone[0] : this.props.timeZone;\n\n        // for links gen we need to use original frames but with the aligned/joined data values\n        let linkFrames = frames.map((frame, frameIdx) => ({\n          ...frame,\n          fields: alignedFrame.fields.filter(\n            (field, fieldIdx) => fieldIdx === 0 || field.state?.origin?.frameIndex === frameIdx\n          ),\n          length: alignedFrame.length,\n        }));\n\n        linkFrames.forEach((linkFrame, frameIndex) => {\n          linkFrame.fields.forEach((field) => {\n            field.getLinks = getLinksSupplier(\n              linkFrame,\n              field,\n              {\n                ...field.state?.scopedVars,\n                __dataContext: {\n                  value: {\n                    data: linkFrames,\n                    field: field,\n                    frame: linkFrame,\n                    frameIndex,\n                  },\n                },\n              },\n              replaceVariables,\n              timeZone,\n              dataLinkPostProcessor\n            );\n          });\n        });\n\n        // filter join field and fields.y\n        alignedFrameFinal = {\n          ...alignedFrame,\n          fields: alignedFrame.fields.filter((field, i) => i === 0 || fields.y(field, alignedFrame, [alignedFrame])),\n        };\n      }\n\n      if (props.omitHideFromViz) {\n        const nonHiddenFields = alignedFrameFinal.fields.filter((field) => field.config.custom?.hideFrom?.viz !== true);\n        alignedFrameFinal = {\n          ...alignedFrameFinal,\n          fields: nonHiddenFields,\n          length: nonHiddenFields.length,\n        };\n      }\n\n      let config = this.state?.config;\n\n      if (withConfig) {\n        config = props.prepConfig(alignedFrameFinal, this.props.frames, this.getTimeRange);\n        pluginLog('GraphNG', false, 'config prepared', config);\n      }\n\n      state = {\n        alignedFrame: alignedFrameFinal,\n        config,\n      };\n\n      pluginLog('GraphNG', false, 'data prepared', state.alignedData);\n    }\n\n    return state;\n  }\n\n  componentDidUpdate(prevProps: GraphNGProps) {\n    const { frames, structureRev, timeZone, cursorSync, propsToDiff } = this.props;\n\n    const propsChanged = !sameProps(prevProps, this.props, propsToDiff);\n\n    if (\n      frames !== prevProps.frames ||\n      propsChanged ||\n      timeZone !== prevProps.timeZone ||\n      cursorSync !== prevProps.cursorSync\n    ) {\n      let newState = this.prepState(this.props, false);\n\n      if (newState) {\n        const shouldReconfig =\n          this.state.config === undefined ||\n          timeZone !== prevProps.timeZone ||\n          cursorSync !== prevProps.cursorSync ||\n          structureRev !== prevProps.structureRev ||\n          !structureRev ||\n          propsChanged;\n\n        if (shouldReconfig) {\n          newState.config = this.props.prepConfig(newState.alignedFrame, this.props.frames, this.getTimeRange);\n          pluginLog('GraphNG', false, 'config recreated', newState.config);\n        }\n\n        newState.alignedData = newState.config!.prepData!([newState.alignedFrame]) as AlignedData;\n\n        this.setState(newState);\n      }\n    }\n  }\n\n  render() {\n    const { width, height, children, renderLegend } = this.props;\n    const { config, alignedFrame, alignedData } = this.state;\n\n    if (!config) {\n      return null;\n    }\n\n    return (\n      <VizLayout width={width} height={height} legend={renderLegend(config)}>\n        {(vizWidth: number, vizHeight: number) => (\n          <UPlotChart\n            config={config}\n            data={alignedData!}\n            width={vizWidth}\n            height={vizHeight}\n            plotRef={(u) => ((this.plotInstance as React.MutableRefObject<uPlot>).current = u)}\n          >\n            {children ? children(config, alignedFrame) : null}\n          </UPlotChart>\n        )}\n      </VizLayout>\n    );\n  }\n}\n","// mutates all nulls -> undefineds in the fieldValues array for value-less refValues ranges below maxThreshold\n// refValues is typically a time array and maxThreshold is the allowable distance between in time\nexport function nullToUndefThreshold(refValues: number[], fieldValues: unknown[], maxThreshold: number) {\n  let prevRef;\n  let nullIdx;\n\n  for (let i = 0; i < fieldValues.length; i++) {\n    let fieldVal = fieldValues[i];\n\n    if (fieldVal == null) {\n      if (nullIdx == null && prevRef != null) {\n        nullIdx = i;\n      }\n    } else {\n      if (nullIdx != null && prevRef != null) {\n        if (refValues[i] - prevRef < maxThreshold) {\n          while (nullIdx < i) {\n            fieldValues[nullIdx++] = undefined;\n          }\n        }\n\n        nullIdx = null;\n      }\n\n      prevRef = refValues[i];\n    }\n  }\n\n  return fieldValues;\n}\n","import { DataFrame, Field, FieldType, outerJoinDataFrames, TimeRange, applyNullInsertThreshold } from '@grafana/data';\nimport { NULL_EXPAND, NULL_REMOVE, NULL_RETAIN, nullToUndefThreshold } from '@grafana/data/internal';\nimport { GraphDrawStyle } from '@grafana/schema';\n\nimport { XYFieldMatchers } from './types';\n\nfunction isVisibleBarField(f: Field) {\n  return (\n    f.type === FieldType.number && f.config.custom?.drawStyle === GraphDrawStyle.Bars && !f.config.custom?.hideFrom?.viz\n  );\n}\n\nexport function getRefField(frame: DataFrame, refFieldName?: string | null) {\n  return frame.fields.find((field) => {\n    // note: getFieldDisplayName() would require full DF[]\n    return refFieldName != null ? field.name === refFieldName : field.type === FieldType.time;\n  });\n}\n\n// will mutate the DataFrame's fields' values\nfunction applySpanNullsThresholds(frame: DataFrame, refFieldName?: string | null) {\n  const refField = getRefField(frame, refFieldName);\n\n  let refValues = refField?.values;\n\n  for (let i = 0; i < frame.fields.length; i++) {\n    let field = frame.fields[i];\n\n    if (field === refField || isVisibleBarField(field)) {\n      continue;\n    }\n\n    let spanNulls = field.config.custom?.spanNulls;\n\n    if (typeof spanNulls === 'number') {\n      if (spanNulls !== -1 && refValues) {\n        field.values = nullToUndefThreshold(refValues, field.values, spanNulls);\n      }\n    }\n  }\n\n  return frame;\n}\n\nexport function preparePlotFrame(frames: DataFrame[], dimFields: XYFieldMatchers, timeRange?: TimeRange | null) {\n  let xField: Field;\n  loop: for (let frame of frames) {\n    for (let field of frame.fields) {\n      if (dimFields.x(field, frame, frames)) {\n        xField = field;\n        break loop;\n      }\n    }\n  }\n\n  // apply null insertions at interval\n  frames = frames.map((frame) => {\n    if (!xField?.state?.nullThresholdApplied) {\n      return applyNullInsertThreshold({\n        frame,\n        refFieldName: xField.name,\n        refFieldPseudoMin: timeRange?.from.valueOf(),\n        refFieldPseudoMax: timeRange?.to.valueOf(),\n      });\n    } else {\n      return frame;\n    }\n  });\n\n  let numBarSeries = frames.reduce(\n    (acc, frame) => acc + frame.fields.reduce((acc, field) => acc + (isVisibleBarField(field) ? 1 : 0), 0),\n    0\n  );\n\n  // to make bar widths of all series uniform (equal to narrowest bar series), find smallest distance between x points\n  let minXDelta = Infinity;\n\n  if (numBarSeries > 1) {\n    frames.forEach((frame) => {\n      if (!frame.fields.some(isVisibleBarField)) {\n        return;\n      }\n\n      const xVals = xField.values;\n\n      for (let i = 0; i < xVals.length; i++) {\n        if (i > 0) {\n          minXDelta = Math.min(minXDelta, xVals[i] - xVals[i - 1]);\n        }\n      }\n    });\n  }\n\n  let alignedFrame = outerJoinDataFrames({\n    frames,\n    joinBy: dimFields.x,\n    keep: dimFields.y,\n    keepOriginIndices: true,\n\n    // the join transformer force-deletes our state.displayName cache unless keepDisplayNames: true\n    // https://github.com/grafana/grafana/pull/31121\n    // https://github.com/grafana/grafana/pull/71806\n    keepDisplayNames: true,\n\n    // prevent minesweeper-expansion of nulls (gaps) when joining bars\n    // since bar width is determined from the minimum distance between non-undefined values\n    // (this strategy will still retain any original pre-join nulls, though)\n    nullMode: (field) => {\n      if (isVisibleBarField(field)) {\n        return NULL_RETAIN;\n      }\n\n      let spanNulls = field.config.custom?.spanNulls;\n      return spanNulls === true ? NULL_REMOVE : spanNulls === -1 ? NULL_RETAIN : NULL_EXPAND;\n    },\n  });\n\n  if (alignedFrame) {\n    alignedFrame = applySpanNullsThresholds(alignedFrame, xField!.name);\n\n    // append 2 null vals at minXDelta to bar series\n    if (minXDelta !== Infinity) {\n      alignedFrame.fields.forEach((f, fi) => {\n        let vals = f.values;\n\n        if (fi === 0) {\n          let lastVal = vals[vals.length - 1];\n          vals.push(lastVal + minXDelta, lastVal + 2 * minXDelta);\n        } else if (isVisibleBarField(f)) {\n          vals.push(null, null);\n        } else {\n          vals.push(undefined, undefined);\n        }\n      });\n\n      alignedFrame.length += 2;\n    }\n\n    return alignedFrame;\n  }\n\n  return null;\n}\n","import { Component } from 'react';\n\nimport { DataFrame, FALLBACK_COLOR, FieldType, TimeRange } from '@grafana/data';\nimport { VisibilityMode, TimelineValueAlignment, TooltipDisplayMode, VizTooltipOptions } from '@grafana/schema';\nimport { UPlotConfigBuilder, VizLayout, VizLegend, VizLegendItem } from '@grafana/ui';\n\nimport { GraphNG, GraphNGProps } from '../GraphNG/GraphNG';\n\nimport { preparePlotConfigBuilder, TimelineMode } from './utils';\n\n/**\n * @alpha\n */\nexport interface TimelineProps extends Omit<GraphNGProps, 'prepConfig' | 'propsToDiff' | 'renderLegend'> {\n  mode: TimelineMode;\n  rowHeight?: number;\n  showValue: VisibilityMode;\n  alignValue?: TimelineValueAlignment;\n  colWidth?: number;\n  legendItems?: VizLegendItem[];\n  tooltip?: VizTooltipOptions;\n  // Whenever `paginationRev` changes, the graph will be fully re-configured/rendered.\n  paginationRev?: string;\n}\n\nconst propsToDiff = ['rowHeight', 'colWidth', 'showValue', 'mergeValues', 'alignValue', 'tooltip', 'paginationRev'];\n\nexport class TimelineChart extends Component<TimelineProps> {\n  getValueColor = (frameIdx: number, fieldIdx: number, value: unknown) => {\n    const field = this.props.frames[frameIdx]?.fields[fieldIdx];\n\n    if (field?.display) {\n      const disp = field.display(value); // will apply color modes\n      if (disp.color) {\n        return disp.color;\n      }\n    }\n\n    return FALLBACK_COLOR;\n  };\n\n  prepConfig = (alignedFrame: DataFrame, allFrames: DataFrame[], getTimeRange: () => TimeRange) => {\n    return preparePlotConfigBuilder({\n      frame: alignedFrame,\n      getTimeRange,\n      allFrames: this.props.frames,\n      ...this.props,\n\n      // Ensure timezones is passed as an array\n      timeZones: Array.isArray(this.props.timeZone) ? this.props.timeZone : [this.props.timeZone],\n\n      // When there is only one row, use the full space\n      rowHeight: alignedFrame.fields.length > 2 ? this.props.rowHeight : 1,\n      getValueColor: this.getValueColor,\n\n      hoverMulti: this.props.tooltip?.mode === TooltipDisplayMode.Multi,\n    });\n  };\n\n  renderLegend = (config: UPlotConfigBuilder) => {\n    const { legend, legendItems } = this.props;\n\n    if (!config || !legendItems || !legend || legend.showLegend === false) {\n      return null;\n    }\n\n    return (\n      <VizLayout.Legend placement={legend.placement}>\n        <VizLegend placement={legend.placement} items={legendItems} displayMode={legend.displayMode} readonly />\n      </VizLayout.Legend>\n    );\n  };\n\n  render() {\n    return (\n      <GraphNG\n        {...this.props}\n        fields={{\n          x: (f) => f.type === FieldType.time,\n          y: (f) =>\n            f.type === FieldType.number ||\n            f.type === FieldType.boolean ||\n            f.type === FieldType.string ||\n            f.type === FieldType.enum,\n        }}\n        prepConfig={this.prepConfig}\n        propsToDiff={propsToDiff}\n        renderLegend={this.renderLegend}\n        omitHideFromViz={true}\n      />\n    );\n  }\n}\n","import { ReactNode } from 'react';\n\nimport { FieldType, TimeRange } from '@grafana/data';\nimport { SortOrder } from '@grafana/schema/dist/esm/common/common.gen';\nimport { TooltipDisplayMode } from '@grafana/ui';\nimport {\n  VizTooltipContent,\n  VizTooltipFooter,\n  VizTooltipHeader,\n  VizTooltipWrapper,\n  getContentItems,\n  VizTooltipItem,\n} from '@grafana/ui/internal';\nimport { findNextStateIndex, fmtDuration } from 'app/core/components/TimelineChart/utils';\n\nimport { getFieldActions } from '../status-history/utils';\nimport { TimeSeriesTooltipProps } from '../timeseries/TimeSeriesTooltip';\nimport { isTooltipScrollable } from '../timeseries/utils';\n\ninterface StateTimelineTooltip2Props extends TimeSeriesTooltipProps {\n  timeRange: TimeRange;\n  withDuration: boolean;\n}\n\nexport const StateTimelineTooltip2 = ({\n  series,\n  dataIdxs,\n  seriesIdx,\n  mode = TooltipDisplayMode.Single,\n  sortOrder = SortOrder.None,\n  isPinned,\n  annotate,\n  timeRange,\n  withDuration,\n  maxHeight,\n  replaceVariables,\n  dataLinks,\n}: StateTimelineTooltip2Props) => {\n  const xField = series.fields[0];\n\n  const dataIdx = seriesIdx != null ? dataIdxs[seriesIdx] : dataIdxs.find((idx) => idx != null);\n\n  const xVal = xField.display!(xField.values[dataIdx!]).text;\n\n  mode = isPinned ? TooltipDisplayMode.Single : mode;\n\n  const contentItems = getContentItems(series.fields, xField, dataIdxs, seriesIdx, mode, sortOrder);\n\n  // append duration in single mode\n  if (withDuration && mode === TooltipDisplayMode.Single) {\n    const field = series.fields[seriesIdx!];\n    const nextStateIdx = findNextStateIndex(field, dataIdx!);\n    let nextStateTs;\n    if (nextStateIdx) {\n      nextStateTs = xField.values[nextStateIdx!];\n    }\n\n    const stateTs = xField.values[dataIdx!];\n    let duration: string;\n\n    if (nextStateTs) {\n      duration = nextStateTs && fmtDuration(nextStateTs - stateTs);\n    } else {\n      const to = timeRange.to.valueOf();\n      duration = fmtDuration(to - stateTs);\n    }\n\n    contentItems.push({ label: 'Duration', value: duration });\n  }\n\n  let footer: ReactNode;\n\n  if (seriesIdx != null) {\n    const field = series.fields[seriesIdx];\n    const hasOneClickLink = dataLinks.some((dataLink) => dataLink.oneClick === true);\n\n    if (isPinned || hasOneClickLink) {\n      const dataIdx = dataIdxs[seriesIdx]!;\n      const actions = getFieldActions(series, field, replaceVariables!, dataIdx);\n\n      footer = <VizTooltipFooter dataLinks={dataLinks} actions={actions} annotate={annotate} />;\n    }\n  }\n\n  const headerItem: VizTooltipItem = {\n    label: xField.type === FieldType.time ? '' : (xField.state?.displayName ?? xField.name),\n    value: xVal,\n  };\n\n  return (\n    <VizTooltipWrapper>\n      <VizTooltipHeader item={headerItem} isPinned={isPinned} />\n      <VizTooltipContent\n        items={contentItems}\n        isPinned={isPinned}\n        scrollable={isTooltipScrollable({ mode, maxHeight })}\n        maxHeight={maxHeight}\n      />\n      {footer}\n    </VizTooltipWrapper>\n  );\n};\n","import { useMemo, useState } from 'react';\n\nimport { DashboardCursorSync, PanelProps } from '@grafana/data';\nimport {\n  AxisPlacement,\n  EventBusPlugin,\n  TooltipDisplayMode,\n  TooltipPlugin2,\n  usePanelContext,\n  useTheme2,\n} from '@grafana/ui';\nimport { TimeRange2, TooltipHoverMode } from '@grafana/ui/internal';\nimport { TimelineChart } from 'app/core/components/TimelineChart/TimelineChart';\nimport {\n  prepareTimelineFields,\n  prepareTimelineLegendItems,\n  TimelineMode,\n} from 'app/core/components/TimelineChart/utils';\n\nimport { AnnotationsPlugin2 } from '../timeseries/plugins/AnnotationsPlugin2';\nimport { OutsideRangePlugin } from '../timeseries/plugins/OutsideRangePlugin';\nimport { getTimezones } from '../timeseries/utils';\n\nimport { StateTimelineTooltip2 } from './StateTimelineTooltip2';\nimport { Options } from './panelcfg.gen';\nimport { containerStyles, usePagination } from './utils';\n\ninterface TimelinePanelProps extends PanelProps<Options> {}\n\n/**\n * @alpha\n */\nexport const StateTimelinePanel = ({\n  data,\n  timeRange,\n  timeZone,\n  options,\n  width,\n  height,\n  replaceVariables,\n  onChangeTimeRange,\n}: TimelinePanelProps) => {\n  const theme = useTheme2();\n\n  // temp range set for adding new annotation set by TooltipPlugin2, consumed by AnnotationPlugin2\n  const [newAnnotationRange, setNewAnnotationRange] = useState<TimeRange2 | null>(null);\n  const { sync, eventsScope, canAddAnnotations, dataLinkPostProcessor, eventBus } = usePanelContext();\n  const cursorSync = sync?.() ?? DashboardCursorSync.Off;\n\n  const { frames, warn } = useMemo(\n    () => prepareTimelineFields(data.series, options.mergeValues ?? true, timeRange, theme),\n    [data.series, options.mergeValues, timeRange, theme]\n  );\n\n  const { paginatedFrames, paginationRev, paginationElement, paginationHeight } = usePagination(\n    frames,\n    options.perPage\n  );\n\n  const legendItems = useMemo(\n    () => prepareTimelineLegendItems(paginatedFrames, options.legend, theme),\n    [paginatedFrames, options.legend, theme]\n  );\n\n  const timezones = useMemo(() => getTimezones(options.timezone, timeZone), [options.timezone, timeZone]);\n\n  if (!paginatedFrames || warn) {\n    return (\n      <div className=\"panel-empty\">\n        <p>{warn ?? 'No data found in response'}</p>\n      </div>\n    );\n  }\n\n  const enableAnnotationCreation = Boolean(canAddAnnotations && canAddAnnotations());\n\n  return (\n    <div className={containerStyles.container}>\n      <TimelineChart\n        theme={theme}\n        frames={paginatedFrames}\n        structureRev={data.structureRev}\n        paginationRev={paginationRev}\n        timeRange={timeRange}\n        timeZone={timezones}\n        width={width}\n        height={height - paginationHeight}\n        legendItems={legendItems}\n        {...options}\n        mode={TimelineMode.Changes}\n        replaceVariables={replaceVariables}\n        dataLinkPostProcessor={dataLinkPostProcessor}\n        cursorSync={cursorSync}\n      >\n        {(builder, alignedFrame) => {\n          return (\n            <>\n              {cursorSync !== DashboardCursorSync.Off && (\n                <EventBusPlugin config={builder} eventBus={eventBus} frame={alignedFrame} />\n              )}\n              {options.tooltip.mode !== TooltipDisplayMode.None && (\n                <TooltipPlugin2\n                  config={builder}\n                  hoverMode={\n                    options.tooltip.mode === TooltipDisplayMode.Multi ? TooltipHoverMode.xAll : TooltipHoverMode.xOne\n                  }\n                  queryZoom={onChangeTimeRange}\n                  syncMode={cursorSync}\n                  syncScope={eventsScope}\n                  getDataLinks={(seriesIdx, dataIdx) =>\n                    alignedFrame.fields[seriesIdx].getLinks?.({ valueRowIndex: dataIdx }) ?? []\n                  }\n                  render={(u, dataIdxs, seriesIdx, isPinned, dismiss, timeRange2, viaSync, dataLinks) => {\n                    if (enableAnnotationCreation && timeRange2 != null) {\n                      setNewAnnotationRange(timeRange2);\n                      dismiss();\n                      return;\n                    }\n\n                    const annotate = () => {\n                      let xVal = u.posToVal(u.cursor.left!, 'x');\n\n                      setNewAnnotationRange({ from: xVal, to: xVal });\n                      dismiss();\n                    };\n\n                    return (\n                      <StateTimelineTooltip2\n                        series={alignedFrame}\n                        dataIdxs={dataIdxs}\n                        seriesIdx={seriesIdx}\n                        mode={viaSync ? TooltipDisplayMode.Multi : options.tooltip.mode}\n                        sortOrder={options.tooltip.sort}\n                        isPinned={isPinned}\n                        timeRange={timeRange}\n                        annotate={enableAnnotationCreation ? annotate : undefined}\n                        withDuration={true}\n                        maxHeight={options.tooltip.maxHeight}\n                        replaceVariables={replaceVariables}\n                        dataLinks={dataLinks}\n                      />\n                    );\n                  }}\n                  maxWidth={options.tooltip.maxWidth}\n                />\n              )}\n              {alignedFrame.fields[0].config.custom?.axisPlacement !== AxisPlacement.Hidden && (\n                <AnnotationsPlugin2\n                  annotations={data.annotations ?? []}\n                  config={builder}\n                  timeZone={timeZone}\n                  newRange={newAnnotationRange}\n                  setNewRange={setNewAnnotationRange}\n                  canvasRegionRendering={false}\n                />\n              )}\n              <OutsideRangePlugin config={builder} onChangeTimeRange={onChangeTimeRange} />\n            </>\n          );\n        }}\n      </TimelineChart>\n      {paginationElement}\n    </div>\n  );\n};\n","import { isArray } from 'lodash';\n\nimport { FieldConfigSource, MappingType, PanelModel, ValueMap } from '@grafana/data';\n\nimport { FieldConfig, Options } from './panelcfg.gen';\n\n// This is called when the panel changes from another panel\nexport const timelinePanelChangedHandler = (\n  panel: PanelModel<Partial<Options>> | any,\n  prevPluginId: string,\n  prevOptions: any\n) => {\n  let options: Options = panel.options ?? {};\n\n  // Changing from angular singlestat\n  if (prevPluginId === 'natel-discrete-panel' && prevOptions.angular) {\n    const oldOptions = prevOptions.angular;\n    const fieldConfig: FieldConfigSource = panel.fieldConfig ?? { defaults: {}, overrides: [] };\n\n    if (oldOptions.units) {\n      fieldConfig.defaults.unit = oldOptions.units;\n    }\n\n    const custom: FieldConfig = {\n      fillOpacity: 100,\n      lineWidth: 0,\n    };\n    fieldConfig.defaults.custom = custom;\n    options.mergeValues = true;\n\n    // Convert mappings\n    const valuemap: ValueMap = { type: MappingType.ValueToText, options: {} };\n    fieldConfig.defaults.mappings = [valuemap];\n\n    if (isArray(oldOptions.colorMaps)) {\n      for (const p of oldOptions.colorMaps) {\n        const color: string = p.color;\n        if (color) {\n          valuemap.options[p.text] = { color };\n        }\n      }\n    }\n\n    if (isArray(oldOptions.valueMaps)) {\n      for (const p of oldOptions.valueMaps) {\n        const text: string = p.text;\n        const value: string = p.value;\n        if (text && value) {\n          let old = valuemap.options[value];\n          if (old) {\n            old.text = text;\n          } else {\n            valuemap.options[value] = { text };\n          }\n        }\n      }\n    }\n\n    if (isArray(oldOptions.rangeMaps)) {\n      for (const p of oldOptions.rangeMaps) {\n        let from = +p.from;\n        let to = +p.to;\n        const text: string = p.text;\n        if (text) {\n          fieldConfig.defaults.mappings.push({\n            type: MappingType.RangeToText,\n            options: {\n              from,\n              to,\n              result: { text },\n            },\n          });\n        }\n      }\n    }\n\n    // mutates the input\n    panel.fieldConfig = fieldConfig;\n  }\n\n  return options;\n};\n","import { VisualizationSuggestionsBuilder } from '@grafana/data';\nimport { SuggestionName } from 'app/types/suggestions';\n\nimport { FieldConfig, Options } from './panelcfg.gen';\n\nexport class StatTimelineSuggestionsSupplier {\n  getSuggestionsForData(builder: VisualizationSuggestionsBuilder) {\n    const { dataSummary: ds } = builder;\n\n    if (!ds.hasData) {\n      return;\n    }\n\n    // This panel needs a time field and a string or number field\n    if (!ds.hasTimeField || (!ds.hasStringField && !ds.hasNumberField)) {\n      return;\n    }\n\n    // If there are many series then they won't fit on y-axis so this panel is not good fit\n    if (ds.numberFieldCount >= 30) {\n      return;\n    }\n\n    // Probably better ways to filter out this by inspecting the types of string values so view this as temporary\n    if (ds.preferredVisualisationType === 'logs') {\n      return;\n    }\n\n    const list = builder.getListAppender<Options, FieldConfig>({\n      name: '',\n      pluginId: 'state-timeline',\n      options: {},\n      fieldConfig: {\n        defaults: {\n          custom: {},\n        },\n        overrides: [],\n      },\n    });\n\n    list.append({ name: SuggestionName.StateTimeline });\n  }\n}\n","import {\n  FieldColorModeId,\n  FieldConfigProperty,\n  FieldType,\n  identityOverrideProcessor,\n  PanelPlugin,\n} from '@grafana/data';\nimport { AxisPlacement, VisibilityMode } from '@grafana/schema';\nimport { commonOptionsBuilder } from '@grafana/ui';\n\nimport { InsertNullsEditor } from '../timeseries/InsertNullsEditor';\nimport { SpanNullsEditor } from '../timeseries/SpanNullsEditor';\nimport { NullEditorSettings } from '../timeseries/config';\n\nimport { StateTimelinePanel } from './StateTimelinePanel';\nimport { timelinePanelChangedHandler } from './migrations';\nimport { defaultFieldConfig, defaultOptions, FieldConfig, Options } from './panelcfg.gen';\nimport { StatTimelineSuggestionsSupplier } from './suggestions';\n\nexport const plugin = new PanelPlugin<Options, FieldConfig>(StateTimelinePanel)\n  .setPanelChangeHandler(timelinePanelChangedHandler)\n  .useFieldConfig({\n    standardOptions: {\n      [FieldConfigProperty.Color]: {\n        settings: {\n          byValueSupport: true,\n        },\n        defaultValue: {\n          mode: FieldColorModeId.ContinuousGrYlRd,\n        },\n      },\n      [FieldConfigProperty.Links]: {\n        settings: {\n          showOneClick: true,\n        },\n      },\n      [FieldConfigProperty.Actions]: {\n        hideFromDefaults: false,\n      },\n    },\n    useCustomConfig: (builder) => {\n      builder\n        .addSliderInput({\n          path: 'lineWidth',\n          name: 'Line width',\n          defaultValue: defaultFieldConfig.lineWidth,\n          settings: {\n            min: 0,\n            max: 10,\n            step: 1,\n          },\n        })\n        .addSliderInput({\n          path: 'fillOpacity',\n          name: 'Fill opacity',\n          defaultValue: defaultFieldConfig.fillOpacity,\n          settings: {\n            min: 0,\n            max: 100,\n            step: 1,\n          },\n        })\n        .addCustomEditor<NullEditorSettings, boolean>({\n          id: 'spanNulls',\n          path: 'spanNulls',\n          name: 'Connect null values',\n          defaultValue: false,\n          editor: SpanNullsEditor,\n          override: SpanNullsEditor,\n          shouldApply: (field) => field.type !== FieldType.time,\n          process: identityOverrideProcessor,\n          settings: { isTime: true },\n        })\n        .addCustomEditor<NullEditorSettings, boolean>({\n          id: 'insertNulls',\n          path: 'insertNulls',\n          name: 'Disconnect values',\n          defaultValue: false,\n          editor: InsertNullsEditor,\n          override: InsertNullsEditor,\n          shouldApply: (field) => field.type !== FieldType.time,\n          process: identityOverrideProcessor,\n          settings: { isTime: true },\n        });\n\n      commonOptionsBuilder.addHideFrom(builder);\n      commonOptionsBuilder.addAxisPlacement(\n        builder,\n        (placement) => placement === AxisPlacement.Auto || placement === AxisPlacement.Hidden\n      );\n      commonOptionsBuilder.addAxisWidth(builder);\n    },\n  })\n  .setPanelOptions((builder) => {\n    builder\n      .addBooleanSwitch({\n        path: 'mergeValues',\n        name: 'Merge equal consecutive values',\n        defaultValue: defaultOptions.mergeValues,\n      })\n      .addRadio({\n        path: 'showValue',\n        name: 'Show values',\n        settings: {\n          options: [\n            { value: VisibilityMode.Auto, label: 'Auto' },\n            { value: VisibilityMode.Always, label: 'Always' },\n            { value: VisibilityMode.Never, label: 'Never' },\n          ],\n        },\n        defaultValue: defaultOptions.showValue,\n      })\n      .addRadio({\n        path: 'alignValue',\n        name: 'Align values',\n        settings: {\n          options: [\n            { value: 'left', label: 'Left' },\n            { value: 'center', label: 'Center' },\n            { value: 'right', label: 'Right' },\n          ],\n        },\n        defaultValue: defaultOptions.alignValue,\n      })\n      .addSliderInput({\n        path: 'rowHeight',\n        name: 'Row height',\n        settings: {\n          min: 0,\n          max: 1,\n          step: 0.01,\n        },\n        defaultValue: defaultOptions.rowHeight,\n      })\n      .addNumberInput({\n        path: 'perPage',\n        name: 'Page size (enable pagination)',\n        settings: {\n          min: 1,\n          step: 1,\n          integer: true,\n        },\n      });\n\n    commonOptionsBuilder.addLegendOptions(builder, false);\n    commonOptionsBuilder.addTooltipOptions(builder);\n  })\n  .setSuggestionsSupplier(new StatTimelineSuggestionsSupplier())\n  .setDataSupport({ annotations: true });\n","// Code generated - EDITING IS FUTILE. DO NOT EDIT.\n//\n// Generated by:\n//     public/app/plugins/gen.go\n// Using jennies:\n//     TSTypesJenny\n//     PluginTsTypesJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\nimport * as ui from '@grafana/schema';\n\nexport interface Options extends ui.OptionsWithLegend, ui.OptionsWithTooltip, ui.OptionsWithTimezones {\n  /**\n   * Controls value alignment on the timelines\n   */\n  alignValue?: ui.TimelineValueAlignment;\n  /**\n   * Merge equal consecutive values\n   */\n  mergeValues?: boolean;\n  /**\n   * Enables pagination when > 0\n   */\n  perPage?: number;\n  /**\n   * Controls the row height\n   */\n  rowHeight: number;\n  /**\n   * Show timeline values on chart\n   */\n  showValue: ui.VisibilityMode;\n}\n\nexport const defaultOptions: Partial<Options> = {\n  alignValue: 'left',\n  mergeValues: true,\n  perPage: 20,\n  rowHeight: 0.9,\n  showValue: ui.VisibilityMode.Auto,\n};\n\nexport interface FieldConfig extends ui.AxisConfig, ui.HideableFieldConfig {\n  fillOpacity?: number;\n  lineWidth?: number;\n}\n\nexport const defaultFieldConfig: Partial<FieldConfig> = {\n  fillOpacity: 70,\n  lineWidth: 0,\n};\n","import { css } from '@emotion/css';\nimport { useMemo, useState } from 'react';\nimport { useMeasure } from 'react-use';\n\nimport { DataFrame } from '@grafana/data';\nimport { Pagination } from '@grafana/ui';\nimport { makeFramePerSeries } from 'app/core/components/TimelineChart/utils';\n\nimport { defaultOptions } from './panelcfg.gen';\n\nexport const containerStyles = {\n  container: css({\n    display: 'flex',\n    flexDirection: 'column',\n  }),\n};\n\nconst styles = {\n  paginationContainer: css({\n    display: 'flex',\n    justifyContent: 'center',\n    width: '100%',\n  }),\n  paginationElement: css({\n    marginTop: '8px',\n  }),\n};\n\nexport function usePagination(frames?: DataFrame[], perPage?: number) {\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const [paginationWrapperRef, { height: paginationHeight, width: paginationWidth }] = useMeasure<HTMLDivElement>();\n\n  const pagedFrames = useMemo(\n    () => (!perPage || frames == null ? frames : makeFramePerSeries(frames)),\n    [frames, perPage]\n  );\n\n  if (!perPage || pagedFrames == null) {\n    return {\n      paginatedFrames: pagedFrames,\n      paginationRev: 'disabled',\n      paginationElement: undefined,\n      paginationHeight: 0,\n    };\n  }\n\n  perPage ||= defaultOptions.perPage!;\n\n  const numberOfPages = Math.ceil(pagedFrames.length / perPage);\n  // `perPage` changing might lead to temporarily too large values of `currentPage`.\n  const currentPageCapped = Math.min(currentPage, numberOfPages);\n  const pageOffset = (currentPageCapped - 1) * perPage;\n  const currentPageFrames = pagedFrames.slice(pageOffset, pageOffset + perPage);\n\n  // `paginationRev` needs to change value whenever any of the pagination settings changes.\n  // It's used in to trigger a reconfiguration of the underlying graphs (which is cached,\n  // hence an explicit nudge is required).\n  const paginationRev = `${currentPageCapped}/${perPage}`;\n\n  const showSmallVersion = paginationWidth < 550;\n  const paginationElement = (\n    <div className={styles.paginationContainer} ref={paginationWrapperRef}>\n      <Pagination\n        className={styles.paginationElement}\n        currentPage={currentPageCapped}\n        numberOfPages={numberOfPages}\n        showSmallVersion={showSmallVersion}\n        onNavigate={setCurrentPage}\n      />\n    </div>\n  );\n\n  return { paginatedFrames: currentPageFrames, paginationRev, paginationElement, paginationHeight };\n}\n"],"names":["sameProps","prevProps","nextProps","propsToDiff","propName","defaultMatchers","GraphNG","props","state","withConfig","frames","fields","preparePlotFrame","replaceVariables","dataLinkPostProcessor","preparePlotFrameFn","withLinks","frame","field","alignedFrame","alignedFrameFinal","timeZone","linkFrames","frameIdx","fieldIdx","linkFrame","frameIndex","i","nonHiddenFields","config","structureRev","cursorSync","propsChanged","newState","width","height","children","renderLegend","alignedData","vizWidth","vizHeight","u","nullToUndefThreshold","refValues","fieldValues","maxThreshold","prevRef","nullIdx","isVisibleBarField","f","getRefField","refFieldName","applySpanNullsThresholds","refField","spanNulls","dimFields","timeRange","xField","loop","numBarSeries","acc","minXDelta","xVals","fi","vals","lastVal","TimelineChart","value","disp","allFrames","getTimeRange","legend","legendItems","StateTimelineTooltip2","series","dataIdxs","seriesIdx","mode","sortOrder","isPinned","annotate","withDuration","maxHeight","dataLinks","dataIdx","idx","xVal","contentItems","nextStateIdx","nextStateTs","stateTs","duration","to","footer","hasOneClickLink","dataLink","actions","headerItem","StateTimelinePanel","data","options","onChangeTimeRange","theme","newAnnotationRange","setNewAnnotationRange","sync","eventsScope","canAddAnnotations","eventBus","warn","paginatedFrames","paginationRev","paginationElement","paginationHeight","timezones","enableAnnotationCreation","builder","EventBusPlugin","TooltipPlugin2","dismiss","timeRange2","viaSync","AnnotationsPlugin2","OutsideRangePlugin","timelinePanelChangedHandler","panel","prevPluginId","prevOptions","oldOptions","fieldConfig","custom","valuemap","p","color","text","old","from","StatTimelineSuggestionsSupplier","ds","PanelPlugin","SpanNullsEditor","InsertNullsEditor","placement","defaultOptions","defaultFieldConfig","containerStyles","styles","usePagination","perPage","currentPage","setCurrentPage","paginationWrapperRef","paginationWidth","pagedFrames","numberOfPages","currentPageCapped","pageOffset","currentPageFrames","showSmallVersion"],"sourceRoot":""}