{"version":3,"file":"4564.90eb0197c959a7f2c817.js","mappings":"0KAuCO,MAAMA,CAAwF,CAGnG,YAAmBC,EAAoC,CAApC,aAAAA,EAFnB,qBAAkB,CAAC,KAAc,SAAU,KAAc,YAAa,KAAc,cAAc,EA4DlG,cAAY,GAAyB,CAC9B,OAAO,qBAIR,MAAgB,CAAC,GACnB,OAAO,gBAAgB,OAAO,KAG5B,MAAmB,CAAC,GACtB,OAAO,gBAAgB,QAAQ,EAAE,QAAQ,gBAAiB,EAAE,QAAQ,UAAU,KAG5E,MAAsB,CAAC,GACzB,OAAO,gBAAgB,QAAQ,oBAAqB,CAClD,cAAe,EAAE,QAAQ,aACzB,iBAAkB,EAAE,QAAQ,gBAC5B,mBAAoB,EAAE,QAAQ,iBAChC,CAAC,EAEL,EAGA,WAAQ,IAAM,CAAC,EAhFb,MAAMC,EAAMD,EAAQ,QAAU,2DAC9B,MAAWC,CAAG,EAEd,MAAMC,EAAoB,OAAe,gBAAkB,CAAC,EAEtDC,EAAU,CACd,OACA,OACA,QACA,WACA,QACA,QACA,QACA,QACA,iBACA,gBACF,EAEA,QAASC,EAAI,EAAGA,EAAID,EAAQ,OAAQC,IAAK,CACvC,MAAMC,EAASF,EAAQC,CAAC,EACvBF,EAAwCG,CAAM,EAAK,SAAUC,EAAY,CACxE,OAAO,UAAY,CAEjBJ,EAAgB,KAAK,CAACI,CAAU,EAAE,OAAO,MAAM,UAAU,MAAM,KAAK,SAAS,CAAC,CAAC,CACjF,CACF,EAAGD,CAAM,CACX,CAOA,GALA,OAAO,iBAAiB,OAAOL,EAAQ,SAAUA,EAAQ,aAAc,CACrE,UAAWA,EAAQ,UACnB,eAAgBA,EAAQ,eAC1B,CAAC,EAEGA,EAAQ,KAAM,CAChB,KAAM,CAAE,WAAAO,EAAY,mBAAAC,CAAmB,EAAIR,EAAQ,KAAK,UAClDS,EAAyB,CAAC,EAE5BD,IACFC,EAAW,SAAW,CACpB,UAAWD,CACb,GAGF,OAAO,iBAAiB,WACtBD,EACA,CACE,MAAOP,EAAQ,KAAK,MACpB,MAAOA,EAAQ,KAAK,MACpB,SAAUA,EAAQ,KAAK,SACvB,QAASA,EAAQ,UAAU,QAC3B,QAASA,EAAQ,UAAU,OAC7B,EACAS,CACF,CACF,CACF,CA0BF,C","sources":["webpack://grafana/./public/app/core/services/echo/backends/analytics/RudderstackBackend.ts"],"sourcesContent":["import type { apiOptions, identify, load, page, track } from 'rudder-sdk-js'; // SDK is loaded dynamically from config, so we only import types from the SDK package\n\nimport { BuildInfo, CurrentUserDTO } from '@grafana/data';\nimport {\n  EchoBackend,\n  EchoEventType,\n  isExperimentViewEvent,\n  isInteractionEvent,\n  isPageviewEvent,\n  PageviewEchoEvent,\n} from '@grafana/runtime';\n\nimport { loadScript } from '../../utils';\n\ninterface Rudderstack {\n  identify: typeof identify;\n  load: typeof load;\n  page: typeof page;\n  track: typeof track;\n}\n\ndeclare global {\n  interface Window {\n    // We say all methods are undefined because we can't be sure they're there\n    // and we should be extra cautious\n    rudderanalytics?: Partial<Rudderstack>;\n  }\n}\n\nexport interface RudderstackBackendOptions {\n  writeKey: string;\n  dataPlaneUrl: string;\n  buildInfo: BuildInfo;\n  user?: CurrentUserDTO;\n  sdkUrl?: string;\n  configUrl?: string;\n  integrationsUrl?: string;\n}\n\nexport class RudderstackBackend implements EchoBackend<PageviewEchoEvent, RudderstackBackendOptions> {\n  supportedEvents = [EchoEventType.Pageview, EchoEventType.Interaction, EchoEventType.ExperimentView];\n\n  constructor(public options: RudderstackBackendOptions) {\n    const url = options.sdkUrl || `https://cdn.rudderlabs.com/v1/rudder-analytics.min.js`;\n    loadScript(url);\n\n    const tempRudderstack = ((window as any).rudderanalytics = []);\n\n    const methods = [\n      'load',\n      'page',\n      'track',\n      'identify',\n      'alias',\n      'group',\n      'ready',\n      'reset',\n      'getAnonymousId',\n      'setAnonymousId',\n    ];\n\n    for (let i = 0; i < methods.length; i++) {\n      const method = methods[i];\n      (tempRudderstack as Record<string, any>)[method] = (function (methodName) {\n        return function () {\n          // @ts-ignore\n          tempRudderstack.push([methodName].concat(Array.prototype.slice.call(arguments)));\n        };\n      })(method);\n    }\n\n    window.rudderanalytics?.load?.(options.writeKey, options.dataPlaneUrl, {\n      configUrl: options.configUrl,\n      destSDKBaseURL: options.integrationsUrl,\n    });\n\n    if (options.user) {\n      const { identifier, intercomIdentifier } = options.user.analytics;\n      const apiOptions: apiOptions = {};\n\n      if (intercomIdentifier) {\n        apiOptions.Intercom = {\n          user_hash: intercomIdentifier,\n        };\n      }\n\n      window.rudderanalytics?.identify?.(\n        identifier,\n        {\n          email: options.user.email,\n          orgId: options.user.orgId,\n          language: options.user.language,\n          version: options.buildInfo.version,\n          edition: options.buildInfo.edition,\n        },\n        apiOptions\n      );\n    }\n  }\n\n  addEvent = (e: PageviewEchoEvent) => {\n    if (!window.rudderanalytics) {\n      return;\n    }\n\n    if (isPageviewEvent(e)) {\n      window.rudderanalytics.page?.();\n    }\n\n    if (isInteractionEvent(e)) {\n      window.rudderanalytics.track?.(e.payload.interactionName, e.payload.properties);\n    }\n\n    if (isExperimentViewEvent(e)) {\n      window.rudderanalytics.track?.('experiment_viewed', {\n        experiment_id: e.payload.experimentId,\n        experiment_group: e.payload.experimentGroup,\n        experiment_variant: e.payload.experimentVariant,\n      });\n    }\n  };\n\n  // Not using Echo buffering, addEvent above sends events to GA as soon as they appear\n  flush = () => {};\n}\n"],"names":["RudderstackBackend","options","url","tempRudderstack","methods","i","method","methodName","identifier","intercomIdentifier","apiOptions"],"sourceRoot":""}