{"version":3,"file":"MigrateToCloud.059463bffe0909df8143.js","mappings":"kOAWO,MAAMA,EAAW,CAAC,CAAE,SAAAC,EAAU,MAAAC,EAAO,SAAAC,EAAU,UAAAC,CAAU,OAE5D,QAACC,EAAA,EAAK,CAAC,IAAK,EAAG,UAAU,SACvB,oBAAC,IAAI,CAAC,QAAQ,KAAM,SAAAH,CAAA,CAAM,KAC1B,OAAC,IAAI,CAAC,MAAM,YAAa,SAAAD,CAAA,CAAS,EACjCE,MACC,OAACG,EAAA,EAAQ,CAAC,KAAMH,EAAU,SAAQ,GAC/B,SAAAC,GAAaD,CAAA,CAChB,GAEJ,ECjBSI,GAAW,OAEpB,OAACP,EAAQ,CAAC,SAAO,KAAE,+CAAgD,uCAAuC,EACxG,mBAAC,KAAK,CAAC,QAAQ,8CAA8C,oQAI7D,EACF,E,0BCJG,MAAMQ,GAAqB,IAAM,CACtC,MAAMC,KAAS,MAAWC,EAAS,EAEnC,SACE,QAACC,EAAA,EAAG,CAAC,WAAW,aAAa,QAAQ,OAAO,UAAU,SAAS,IAAK,EAClE,oBAACX,EAAA,CACC,SAAO,KAAE,qCAAsC,wBAAwB,EACvE,aAAW,KAAE,0CAA2C,8CAA8C,EACtG,SAAS,+FAET,oBAACK,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,EAC7B,oBAAC,KAAK,CAAC,QAAQ,oCAAoC,0FAEnD,KACA,QAAC,MAAG,UAAWI,EAAO,KACpB,oBAAC,MACC,mBAAC,KAAK,CAAC,QAAQ,sCAAsC,qHAGrD,EACF,KACA,OAAC,MACC,mBAAC,KAAK,CAAC,QAAQ,sCAAsC,oDAErD,EACF,KACA,OAAC,MACC,mBAAC,KAAK,CAAC,QAAQ,sCAAsC,wIAGrD,EACF,KACA,OAAC,MACC,mBAAC,KAAK,CAAC,QAAQ,sCAAsC,2HAGrD,EACF,KACA,OAAC,MACC,mBAAC,KAAK,CAAC,QAAQ,sCAAsC,2GAGrD,EACF,KACA,OAAC,MACC,mBAAC,KAAK,CAAC,QAAQ,sCAAsC,0KAGrD,EACF,GACF,GACF,EACF,KACA,OAACH,EAAA,EAAQ,CAAC,KAAK,+CAA+C,SAAQ,GACnE,iBAAE,kDAAmD,8BAA8B,EACtF,KACA,OAACA,EAAA,EAAQ,CAAC,KAAK,4EAA4E,SAAQ,GAChG,iBAAE,oDAAqD,+BAA+B,EACzF,GACF,CAEJ,EAEMI,GAAaE,IAA0B,CAC3C,QAAM,OAAI,CACR,QAAS,QACX,CAAC,CACH,G,2DCxEO,SAASC,EAAcC,EAAc,CAC1C,GAAI,IAAC,OAAsBA,CAAG,GAAK,OAAOA,EAAI,MAAS,UAAY,CAACA,EAAI,KACtE,OAAO,KAGT,MAAMC,EAAOD,GAAK,KACZE,EAAU,YAAaD,GAAQ,OAAOA,EAAK,SAAY,SAAWA,EAAK,QAAU,KACjFE,EAAY,cAAeF,GAAQ,OAAOA,EAAK,WAAc,SAAWA,EAAK,UAAY,KACzFG,EAAa,eAAgBH,GAAQ,OAAOA,EAAK,YAAe,SAAWA,EAAK,WAAa,KAEnG,MAAI,CAACC,GAAW,CAACC,GAAa,CAACC,EACtB,KAGF,CAAE,QAAAF,EAAS,UAAAC,EAAW,WAAAC,CAAW,CAC1C,C,eCfO,SAASC,IAAkB,CAChC,SACE,OAACC,EAAA,EAAK,CAAC,SAAS,QAAQ,SAAO,KAAE,+CAAgD,sBAAsB,EACrG,mBAAC,KAAK,CAAC,QAAQ,8CAA8C,yEAE7D,EACF,CAEJ,C,mDCEO,MAAMC,GAAmB,CAAC,CAAE,OAAAC,EAAQ,UAAAC,EAAW,eAAAC,CAAe,OAEjE,QAACC,EAAA,GACC,OAAAH,EACA,SAAO,KAAE,+CAAgD,yBAAyB,EAClF,UAAWC,EAEV,UAAAC,KAAiB,OAACE,GAAA,CAAoB,eAAAF,CAAA,CAAgC,KAAK,OAACL,GAAe,EAAC,KAE7F,QAACM,EAAA,EAAM,UAAN,CACC,oBAAC,KAAM,CAAC,QAAQ,YAAY,QAASF,EACnC,mBAAC,KAAK,CAAC,QAAQ,+CAA+C,iBAAK,EACrE,EAECC,MACC,OAACG,GAAA,EAAe,CAAC,QAAQ,UAAU,QAAS,IAAMH,EAAgB,gBAAiBD,EACjF,mBAAC,KAAK,CAAC,QAAQ,wDAAwD,uCAA2B,EACpG,GAEJ,GACF,EAIJ,SAASG,GAAoB,CAAE,eAAAF,CAAe,EAA+B,CAC3E,MAAMI,KAAU,SAAM,EACtB,SACE,OAACC,GAAA,GACC,eAAa,KACX,2DACA,6GACF,EACA,QAASD,EACT,SAAO,KAAE,qDAAsD,OAAO,EAEtE,oBAACvB,EAAA,EAAK,CACJ,oBAACyB,GAAA,EAAK,CAAC,GAAIF,EAAS,MAAOJ,EAAgB,SAAQ,GAAC,KACpD,OAACG,GAAA,EAAe,CAAC,KAAK,gBAAgB,QAAS,IAAMH,EACnD,mBAAC,KAAK,CAAC,QAAQ,qDAAqD,6BAAiB,EACvF,GACF,EACF,CAEJ,C,gBC9CO,SAASO,GAA6BC,EAA0C,CACrF,KAAM,CAAE,OAAAV,EAAQ,SAAAW,EAAU,UAAAC,EAAW,UAAAC,CAAU,EAAIH,EAE7CI,KACJ,oBACE,oBAAC,KACC,mBAAC,KAAK,CAAC,QAAQ,uDAAuD,2IAGtE,EACF,EAECH,MACC,OAACb,EAAA,GACC,SAAS,QACT,SAAO,KAAE,8DAA+D,sBAAsB,EAChG,GAEJ,EAGF,SACE,OAACiB,GAAA,GACC,OAAAf,EACA,SAAO,KAAE,wDAAyD,wBAAwB,EAC1F,KAAAc,EACA,eAAa,KAAE,iEAAkE,cAAc,EAC/F,UAAAF,EACA,UAAAC,CAAA,CACF,CAEJ,C,eC9BO,MAAMG,GAAc,CAAC,CAAE,SAAAC,EAAU,eAAAC,EAAgB,WAAAC,CAAW,IAC7DA,KACK,OAAC,IAAQ,CAAC,MAAO,IAAK,EACpBF,KAEP,OAAC,IAAI,CAAC,MAAM,UACV,mBAAC,KAAK,CAAC,QAAQ,uCAAuC,oCAAwB,EAChF,EAEOC,IAAmB,mCACrB,OAAC,KAAK,CAAC,QAAQ,0CAA0C,2BAAe,EACtEA,KAEP,OAAC,IAAI,CAAC,MAAM,QACV,mBAAC,KAAK,CAAC,QAAQ,8CAA8C,kCAAsB,EACrF,KAKF,OAAC,IAAI,CAAC,MAAM,UACV,mBAAC,KAAK,CAAC,QAAQ,wCAAwC,mBAAO,EAChE,ECfSE,GAAqB,IAAM,CACtC,KAAM,CAACC,EAAiBC,CAAkB,KAAI,YAAS,EAAK,EACtD,CAACC,EAAiBC,CAAkB,KAAI,YAAS,EAAK,EAEtDC,KAAgB,MAA+B,EAC/C,CAACC,EAAqBC,CAAmB,KAAI,MAAqC,EAClF,CAACC,EAAqBC,CAAmB,KAAI,MAAqC,EAElFC,EAAqBvC,EAAckC,EAAc,KAAK,EAMtDR,EAAW,EAAQQ,EAAc,MAAM,IAAOK,GAAoB,aAAe,IACjFC,EAAYN,EAAc,YAAcE,EAAoB,UAE5DK,KAAsB,eAAY,SAAY,IAClD,MAAkB,oCAAoC,EAIhD,UAFO,MAAMN,EAAoB,GAGrCJ,EAAmB,EAAI,CAE3B,EAAG,CAACI,CAAmB,CAAC,EAElBO,KAAoB,eAAY,SAAY,CAChD,GAAI,CAACR,EAAc,MAAM,GACvB,UAGF,MAAkB,kCAAkC,EAE9C,UADO,MAAMG,EAAoB,CAAE,IAAKH,EAAc,KAAK,EAAG,CAAC,GAEnED,EAAmB,EAAK,CAE5B,EAAG,CAACI,EAAqBH,EAAc,IAAI,CAAC,EAE5C,SACE,oBACE,qBAACpC,EAAA,EAAG,CAAC,QAAQ,OAAO,WAAW,aAAa,UAAU,SAAS,IAAK,EACjE,UAAAsC,GAAqB,WACpB,OAAC9B,GAAe,EAAC,KAEjB,OAAC,IAAI,CAAC,MAAM,YACV,oBAAC,KAAK,CAAC,QAAQ,0CAA0C,4BACvC,OAChB,OAACmB,GAAW,CAAC,SAAAC,EAAoB,WAAYc,EAAW,eAAgBD,GAAoB,UAAW,GACzG,EACF,EAGDb,KACC,OAAC,KAAM,CAAC,QAAS,IAAMO,EAAmB,EAAI,EAAG,QAAQ,cACtD,iBAAE,iDAAkD,cAAc,EACrE,KAEA,OAAC,KAAM,CAAC,SAAUO,EAAW,QAASC,EACnC,SAAAL,EAAoB,aACjB,KAAE,2DAA4D,iCAAiC,KAC/F,KAAE,mDAAoD,4BAA4B,EACxF,GAEJ,KAEA,OAAC5B,GAAA,CACC,OAAQsB,EACR,UAAW,IAAM,IACf,MAAkB,6CAA6C,EAC/DC,EAAmB,EAAK,CAC1B,EACA,eAAgBK,EAAoB,MAAM,MAC5C,KAEA,OAAClB,GAAA,CACC,OAAQc,EACR,UAAWU,EACX,UAAW,IAAMT,EAAmB,EAAK,EACzC,SAAU,EAAQK,EAAoB,KAAK,CAC7C,GACF,CAEJ,EC/Fa,GAAO,OAEhB,OAACxC,EAAA,EAAG,CAAC,gBAAgB,YAAY,QAAQ,OAAO,WAAW,SAAS,UAAU,SAC5E,oBAACA,EAAA,EAAG,CAAC,SAAU,GAAI,SAAU,EAAG,SAAU,EAAG,IAAK,EAAG,UAAU,SAAS,QAAQ,OAC9E,qBAACN,EAAA,EAAK,CAAC,IAAK,EAAG,UAAU,SACvB,oBAACE,GAAQ,EAAC,KACV,OAACmC,GAAkB,EAAC,GACtB,KAEA,OAAClC,GAAkB,EAAC,GACtB,EACF,E,eCTG,SAASgD,GAAiBxB,EAA8B,CAC7D,KAAM,CAAE,MAAAyB,EAAO,SAAAxD,EAAU,GAAGyD,CAAK,EAAI1B,EAC/B2B,EAAUC,GAAgBH,CAAK,EAErC,SACE,OAACrC,EAAA,EAAK,CAAE,GAAGsC,EACT,oBAACrD,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,EAC5B,UAAAJ,EAEA0D,MAGC,QAAC,IAAI,CAAC,QAAQ,IAAI,MAAM,YAAY,QAAQ,YAAY,uBAC3CA,CAAA,EACb,GAEJ,EACF,CAEJ,CAEA,SAASC,GAAgB9C,EAAc,CACrC,MAAMC,KAAO,OAAsBD,CAAG,EAAIA,EAAI,KAAOA,EAErD,GAAI,OAAOC,GAAS,UAAYA,GAAQ,YAAaA,GAAQ,OAAOA,EAAK,SAAY,SACnF,OAAOA,EAAK,OAIhB,C,kDCvBO,SAAS8C,GAAoBC,EAA+C,CACjF,MAAMC,EAAgB,IAAI,IACpBC,EAAe,IAAI,IAEzB,UAAWC,KAAcH,EAAsB,CAC7C,MAAMI,EAAeD,EAAW,aAC1BE,EAAgBF,EAAW,cAAgB,CAAC,EAElDF,EAAc,IAAIG,EAAcC,CAAY,EAG5C,UAAWC,KAAOD,EACXH,EAAa,IAAII,CAAG,GACvBJ,EAAa,IAAII,EAAK,CAAC,CAAC,EAG1BJ,EAAa,IAAII,CAAG,GAAG,KAAKF,CAAY,CAE5C,CAEA,MAAO,CAAE,cAAAH,EAAe,aAAAC,CAAa,CACvC,CAEO,SAASK,GACdN,EACAO,EACAC,EACqB,CACrB,MAAMC,EAAS,IAAI,IAAIF,CAAa,EAEpC,SAASG,EAAuBP,EAA8BQ,EAA8B,CACtFA,EAAQ,IAAIR,CAAY,IAI5BQ,EAAQ,IAAIR,CAAY,EACxBM,EAAO,IAAIN,CAAY,EAEvBH,EAAc,IAAIG,CAAY,GAAG,QAASE,GAAQK,EAAuBL,EAAKM,CAAO,CAAC,EACxF,CAEA,OAAAD,EAAuBF,EAAkB,IAAI,GAAK,EAE3CC,CACT,CAEO,SAASG,GACdX,EACAM,EACAM,EACqB,CACrB,MAAMJ,EAAS,IAAI,IAAIF,CAAa,EAEpC,SAASO,EAAmBX,EAA8BQ,EAA8B,CAClFA,EAAQ,IAAIR,CAAY,IAI5BQ,EAAQ,IAAIR,CAAY,EACxBM,EAAO,OAAON,CAAY,EAE1BF,EAAa,IAAIE,CAAY,GAAG,QAASE,GAAQS,EAAmBT,EAAKM,CAAO,CAAC,EACnF,CAEA,OAAAG,EAAmBD,EAAoB,IAAI,GAAK,EAEzCJ,CACT,CC7EO,SAASM,GAAoBC,EAAqC,CACvE,OAAQA,EAAU,CAChB,IAAK,YACH,MAAO,YACT,IAAK,SACH,MAAO,SACT,IAAK,aACH,MAAO,WACT,IAAK,kBACH,MAAO,gBACT,IAAK,cACH,MAAO,aACT,IAAK,wBACH,MAAO,WACT,IAAK,gBACH,MAAO,KACT,IAAK,sBACH,MAAO,cACT,IAAK,aACH,MAAO,OACT,IAAK,mBACH,MAAO,OACT,IAAK,SACH,MAAO,OACT,QACE,MACJ,CACF,CAEO,SAASC,GAAsBD,EAAqC,CACzE,OAAQA,EAAU,CAChB,IAAK,YACH,SAAO,KAAE,4CAA6C,YAAY,EACpE,IAAK,SACH,SAAO,KAAE,yCAA0C,SAAS,EAC9D,IAAK,aACH,SAAO,KAAE,6CAA8C,cAAc,EACvE,IAAK,kBACH,SAAO,KAAE,kDAAmD,kBAAkB,EAChF,IAAK,cACH,SAAO,KAAE,8CAA+C,cAAc,EACxE,IAAK,wBACH,SAAO,KAAE,wDAAyD,wBAAwB,EAC5F,IAAK,gBACH,SAAO,KAAE,gDAAiD,gBAAgB,EAC5E,IAAK,sBACH,SAAO,KAAE,sDAAuD,uBAAuB,EACzF,IAAK,aACH,SAAO,KAAE,6CAA8C,aAAa,EACtE,IAAK,mBACH,SAAO,KAAE,mDAAoD,mBAAmB,EAClF,IAAK,SACH,SAAO,KAAE,yCAA0C,SAAS,EAC9D,QACE,MACJ,CACF,CC1CA,MAAME,GAAqB,CACzB,aACA,sBACA,wBACA,gBACA,aACF,EAEMC,GAAe,CACnB,YACA,kBACA,aACA,SACA,SACA,mBACA,GAAGD,EACL,EAIME,GAAoC,GAE1C,SAASC,GAAkBC,EAAmD,CAC5E,OAAOF,IAAuBD,GAAa,OAAQI,GAASD,EAAc,SAASC,CAAI,CAAC,CAC1F,CAEO,SAASC,GAAkBvD,EAA+B,CAC/D,KAAM,CAAE,SAAAwD,EAAU,UAAAnC,EAAW,QAAAoC,EAAS,qBAAA3B,CAAqB,EAAI9B,EACzD,CAACsC,EAAeoB,CAAgB,KAAI,YAA8B,IAAI,GAAK,EAC3E,CAACC,EAAYC,CAAa,KAAI,YAAS,EAAI,EAE3C,CAAE,cAAA7B,EAAe,aAAAC,CAAa,EAAIH,GAAoBC,CAAoB,EAC1EuB,EAAgBD,GAAkB,MAAM,KAAKrB,EAAc,KAAK,CAAC,CAAC,KAGxE,aAAU,IAAM,CACd2B,EAAiB,IAAI,IAAIL,CAAa,CAAC,CACzC,EAAG,CAAC,CAAC,EAEL,MAAMQ,EAA0BC,GAAqC,CACnE,MAAMC,EAAUD,EAAE,OAAO,QAEzBF,EAAcG,CAAO,EAGnBL,EAFEK,EAEe,IAAI,IAAIV,CAAa,EAGrB,IAAI,GAHkB,CAK3C,EAEMW,EAAoBC,GAAwBH,GAAqC,CACrF,MAAMI,EAAcJ,EAAE,OAAO,QACzBzB,GAAgBN,EAAeO,EAAe2B,CAAE,EAChDtB,GAAkBX,EAAcM,EAAe2B,CAAE,EAErDP,EAAiBQ,CAAW,EAC5BN,EAAcM,EAAY,OAASb,EAAc,MAAM,CACzD,EAEMc,EAAsB,IAAM,CAChCV,EAAQ,MAAM,KAAKnB,CAAa,CAAC,CACnC,EAEA,SACE,QAACjE,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,EAC7B,qBAACA,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,EAC7B,oBAAC,IAAI,CAAC,QAAQ,KACZ,oBAACA,EAAA,EAAK,CAAC,UAAU,MAAM,IAAK,EAAG,WAAW,SACxC,oBAAC,IAAI,CAAC,KAAK,MAAM,KAAK,IAAK,MAC3B,OAAC,KAAK,CAAC,QAAQ,4CAA4C,8BAAkB,GAC/E,EACF,KACA,QAAC,IAAI,CAAC,MAAM,YACV,oBAAC,KAAK,CAAC,QAAQ,kDAAkD,kFAEjE,KACA,OAAC,OAAG,KACJ,OAAC,IAAI,CAAC,OAAO,OACX,mBAAC,KAAK,CAAC,QAAQ,2DAA2D,iGAE1E,EACF,GACF,GACF,KAEA,QAACA,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,EAAG,WAAW,aAC3C,qBAACA,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,EAAG,WAAW,aAC3C,oBAACA,EAAA,EAAK,CAAmB,WAAW,aAClC,mBAAC+F,GAAA,GACC,cAAe9B,EAAc,KAAO,GAAK,CAACqB,EAC1C,MAAOA,EACP,SAAUE,EACV,cAAY,oEAEZ,SACE,OAAC,IAAI,CAAC,QAAQ,KACZ,mBAAC,KAAK,CAAC,QAAQ,2DAA2D,uBAAW,EACvF,EAEJ,GAZS,aAaX,EAECR,EAAc,IAAKC,MAClB,QAACjF,EAAA,EAAK,CAAY,IAAK,EAAG,WAAW,SACnC,oBAACgG,EAAA,EAAK,CAAC,EAAGpB,GAAmB,SAASK,CAA2C,EAAI,EAAI,IAAM,KAC/F,OAACc,GAAA,GACC,MAAO9B,EAAc,IAAIgB,CAAI,EAC7B,SAAUU,EAAiBV,CAAI,EAC/B,cAAa,yDAAyDA,EAAK,YAAY,CAAC,GAExF,SACE,QAACjF,EAAA,EAAK,CAAC,IAAK,EAAG,WAAW,SACxB,oBAAC,IAAI,CAAC,KAAMyE,GAAoBQ,CAAI,EAAe,KAAK,IAAK,MAC7D,OAAC,IAAI,CAAC,QAAQ,KAAM,SAAAN,GAAsBM,CAAI,GAAKA,CAAA,CAAK,GAC1D,EAEJ,IAbUA,CAcZ,CACD,GACH,KAEA,QAAC3E,EAAA,EAAG,CAAC,QAAQ,OAAO,eAAe,aAAa,WAAW,SAAS,IAAK,EACvE,oBAAC,MACC,SAAU6E,GAAYlB,EAAc,OAAS,EAC7C,QAAS6B,EACT,KAAM9C,EAAY,UAAY,OAC9B,cAAY,4DAEZ,mBAAC,KAAK,CAAC,QAAQ,2CAA2C,0BAAc,EAC1E,KAEA,OAACiD,GAAA,GACC,WACE,OAAC,KAAK,CAAC,QAAQ,qDAAqD,sEAEpE,EAEF,UAAU,QACV,YAAa,GAEb,mBAAC,IAAI,CAAC,KAAK,cAAc,KAAK,IAAK,GACrC,GACF,GACF,GACF,CAEJ,C,4BC9IA,SAASC,GAAYtF,EAA2B,CAC9C,OAAQA,EAAW,CACjB,IAAK,+CACH,SAAO,KACL,4DACA,gFACF,EACF,IAAK,oDACH,SAAO,KACL,kEACA,uFACF,EACF,IAAK,yDACH,SAAO,KACL,uEACA,iGACF,EACF,IAAK,sDACH,SAAO,KACL,mEACA,wFACF,EACF,IAAK,uDACH,SAAO,KACL,qEACA,6IACF,EACF,IAAK,yDACH,SAAO,KACL,uEACA,8DACF,EACF,IAAK,oDACH,SAAO,KACL,iEACA,iDACF,EACF,QACE,SAAO,KACL,8DACA,oFACF,CACJ,CACF,CAEO,MAAMuF,GAAe,CAAC,CAAE,OAAAlF,EAAQ,UAAA+B,EAAW,MAAAI,EAAO,UAAAlC,EAAW,UAAAW,CAAU,IAAa,CACzF,MAAMuE,KAAU,SAAM,EAChBhG,KAAS,MAAW,EAAS,EAE7B,CACJ,aAAAiG,EACA,SAAAC,EACA,UAAW,CAAE,OAAAC,CAAO,EACpB,MAAAC,CACF,KAAI,OAAkB,CACpB,cAAe,CACb,MAAO,EACT,CACF,CAAC,EAEKC,EAAQD,EAAM,OAAO,EAErBE,EAA6CC,GAAa,CAC9D9E,EAAU,CACR,gCAAiC,CAC/B,UAAW8E,EAAS,KACtB,CACF,CAAC,EAAE,KAAMC,GAAS,CACC,OAAOA,GAAS,UAAYA,GAAQ,UAAWA,GAE9D1F,EAAU,CAEd,CAAC,CACH,EAEA,SACE,OAACE,EAAA,GACC,OAAAH,EACA,SAAO,KAAE,uCAAwC,0BAA0B,EAC3E,UAAWC,EAEX,oBAAC,QAAK,SAAUmF,EAAaK,CAAgB,EAC3C,oBAAC,IAAI,CAAC,MAAM,YACV,oBAAC1G,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,EAC7B,oBAAC,KAAK,CAAC,QAAQ,kDAAkD,8DAEjE,KAEA,OAAC,OACC,mBAACC,EAAA,EAAQ,CAAC,KAAK,6DAA6D,SAAQ,GACjF,iBAAE,8CAA+C,mCAAmC,EACvF,EACF,KAEA,OAAC,KAAK,CAAC,QAAQ,kDAAkD,gLAGjE,KAEA,OAAC,OACC,mBAACA,EAAA,EAAQ,CAAC,KAAK,oCAAoC,SAAQ,GACxD,iBAAE,kDAAmD,sBAAsB,EAC9E,EACF,KAEA,OAAC,OACC,mBAAC,KAAK,CAAC,QAAQ,4CAA4C,wKAG3D,EACF,KAEA,OAAC,OACC,mBAAC,KAAK,CAAC,QAAQ,yDAAyD,4KAGxE,EACF,EAECmD,KACC,OAACD,GAAA,CACC,MAAAC,EACA,SAAS,QACT,SAAO,KAAE,mDAAoD,oBAAoB,EAEjF,mBAAC,IAAI,CAAC,QAAQ,IACX,SAAA8C,GAAY1F,EAAc4C,CAAK,GAAG,WAAa,EAAE,GAChD,qFACJ,EACF,EACE,UAEJ,OAAC5B,GAAA,GACC,UAAWpB,EAAO,MAClB,QAAS,CAAC,CAACmG,EAAO,MAClB,MAAOA,EAAO,OAAO,QACrB,SAAO,KAAE,kDAAmD,iBAAiB,EAC7E,SAAQ,GAER,mBAAC9E,GAAA,GACE,GAAG6E,EAAS,QAAS,CACpB,YAAU,KAAE,sDAAuD,6BAA6B,CAClG,CAAC,EACD,GAAIF,EACJ,eAAa,KAAE,8DAA+D,kBAAkB,EAChG,cAAY,qDACd,EACF,GACF,EACF,KAEA,QAAChF,EAAA,EAAM,UAAN,CACC,oBAAC,KAAM,CAAC,QAAQ,YAAY,QAASF,EACnC,mBAAC,KAAK,CAAC,QAAQ,wCAAwC,kBAAM,EAC/D,KACA,OAAC,MACC,KAAK,SACL,SAAU8B,GAAa,CAACyD,EACxB,cAAY,wDAEX,SAAAzD,KACG,KAAE,4CAA6C,6BAA6B,KAC5E,KAAE,yCAA0C,uBAAuB,EACzE,GACF,GACF,EACF,CAEJ,EAEM,GAAazC,IAA0B,CAC3C,SAAO,OAAI,CACT,UAAW,SACb,CAAC,CACH,GC7LasG,GAAe,IAAM,CAChC,KAAM,CAACC,EAAWC,CAAY,KAAI,YAAS,EAAK,EAC1C,CAACC,EAAiBC,CAAuB,KAAI,MAAyB,EAE5E,SACE,oBACE,qBAAC3G,EAAA,EAAG,CAAC,QAAQ,OAAO,IAAK,EAAG,UAAU,SAAS,WAAW,SAAS,gBAAgB,YACjF,oBAAC,IAAI,CAAC,QAAQ,KAAK,cAAc,SAC/B,mBAAC,KAAK,CAAC,QAAQ,8BAA8B,4CAAgC,EAC/E,KAEA,OAAC,MACC,cAAY,gDACZ,SAAU2G,EAAwB,UAClC,QAAS,IAAMF,EAAa,EAAI,EAEhC,mBAAC,KAAK,CAAC,QAAQ,8BAA8B,0CAA8B,EAC7E,GACF,KAEA,OAACZ,GAAA,CACC,OAAQW,EACR,UAAWG,EAAwB,UACnC,MAAOA,EAAwB,MAC/B,UAAWD,EACX,UAAW,IAAMD,EAAa,EAAK,EACrC,GACF,CAEJ,ECjCaG,GAAe,OAExB,QAAClH,EAAA,EAAK,CAAC,IAAK,EAAG,UAAU,SACvB,oBAACL,EAAA,CACC,SAAO,KAAE,uCAAwC,wBAAwB,EACzE,aAAW,KAAE,4CAA6C,4BAA4B,EACtF,SAAS,qCAET,mBAAC,KAAK,CAAC,QAAQ,sCAAsC,4OAIrD,EACF,KAEA,OAACA,EAAA,CACC,SAAO,KAAE,kCAAmC,wBAAwB,EACpE,aAAW,KAAE,uCAAwC,mCAAmC,EACxF,SAAS,8BAET,mBAAC,KAAK,CAAC,QAAQ,iCAAiC,8MAGhD,EACF,KAEA,OAACA,EAAA,CACC,SAAO,KAAE,sCAAuC,eAAe,EAC/D,aAAW,KAAE,2CAA4C,2BAA2B,EACpF,SAAS,4BAET,mBAAC,KAAK,CAAC,QAAQ,qCAAqC,kQAIpD,EACF,GACF,ECrCSwH,GAAgB,OAEzB,QAACnH,EAAA,EAAK,CAAC,IAAK,EAAG,UAAU,SACvB,oBAACL,EAAA,CACC,SAAO,KAAE,6BAA8B,6DAA6D,EACpG,aAAW,KAAE,kCAAmC,iBAAiB,EACjE,SAAS,+FAET,mBAAC,KAAK,CAAC,QAAQ,4BAA4B,6MAG3C,EACF,KACA,OAACA,EAAA,CACC,SAAO,KAAE,iCAAkC,wBAAwB,EACnE,aAAW,KAAE,sCAAuC,uBAAuB,EAC3E,SAAS,8BAET,mBAAC,KAAK,CAAC,QAAQ,gCAAgC,2KAG/C,EACF,KACA,OAACA,EAAA,CACC,SAAO,KAAE,oCAAqC,0DAA0D,EACxG,aAAW,KAAE,yCAA0C,wCAAwC,EAC/F,SAAS,4EAET,mBAAC,KAAK,CAAC,QAAQ,mCAAmC,wGAElD,EACF,GACF,EC/BSyH,GAAa,OAEtB,OAAC9G,EAAA,EAAG,CAAC,gBAAgB,YAAY,QAAQ,OAAO,WAAW,SAAS,UAAU,SAC5E,mBAACA,EAAA,EAAG,CAAC,SAAU,IAAK,SAAU,EAAG,SAAU,EACzC,oBAACN,EAAA,EAAK,CAAC,IAAK,EAAG,UAAU,SACvB,oBAAC6G,GAAY,EAAC,KAEd,QAACQ,GAAA,GACC,WAAW,aACX,IAAK,EACL,QAAS,CACP,GAAI,EACJ,GAAI,CACN,EAEA,oBAACH,GAAY,EAAC,KACd,OAACC,GAAa,EAAC,GACjB,GACF,EACF,EACF,E,4BCjBG,SAASG,EAAc,CAAE,MAAAzH,EAAO,SAAAD,CAAS,EAAuB,CACrE,SACE,QAACU,EAAA,EAAG,CAAC,SAAU,CAAE,GAAI,EAAG,IAAK,EAAG,EAAG,QAAQ,OAAO,UAAU,SAC1D,oBAAC,IAAI,CAAC,QAAQ,YAAY,MAAM,YAC7B,SAAAT,CAAA,CACH,KACA,OAAC,IAAI,CAAC,QAAQ,KAAM,SAAAD,CAAA,CAAS,GAC/B,CAEJ,CCUA,MAAM2H,GAA0C,CAC9C,UAAW,SACX,UAAW,OACb,EAEO,SAASC,GAAiB7F,EAA8B,CAC7D,KAAM,CACJ,QAAA8F,EACA,SAAAC,EACA,OAAAC,EACA,oBAAAC,EACA,aAAAC,EAEA,mBAAAC,EACA,wBAAAC,EACA,iBAAAC,EAEA,oBAAAC,EACA,kBAAAC,EAEA,kBAAAC,EACA,kBAAAC,EACA,qBAAAC,CACF,EAAI1G,EAEE2G,EAAaZ,GAAU,OAAO,OAAS,EACvCa,EAAab,GAAU,OAAO,UAAW,OAAY,EACrDc,EAAed,GAAU,OAAO,UAAW,IAAS,EACpDe,EAAef,GAAU,OAAO,UAAW,SAAc,EAEzDgB,KAAc,KAAE,uCAAwC,kBAAkB,EAEhF,SACE,QAACpI,EAAA,GACC,YAAY,OACZ,YAAY,QACZ,QAAS,EACT,QAAQ,OACR,IAAK,EACL,WAAW,SACX,eAAe,gBAEf,qBAACN,EAAA,EAAK,CAAC,IAAK,EAAG,KAAI,GACjB,oBAACsH,EAAa,CAAC,SAAO,KAAE,yCAA0C,oBAAoB,EACnF,SAAAI,GAAU,WACT,MAAWA,EAAS,QAASH,EAAW,KAExC,OAAC,IAAI,CAAC,MAAM,YACV,mBAAC,KAAK,CAAC,QAAQ,gDAAgD,2BAAe,EAChF,EAEJ,KAEA,OAACD,EAAa,CAAC,SAAO,KAAE,gDAAiD,iBAAiB,EACvF,SAAAgB,CAAA,CACH,KAEA,OAAChB,EAAa,CAAC,SAAO,KAAE,qDAAsD,uBAAuB,EAClG,SAAAkB,EAAeC,CAAA,CAClB,KAEA,OAACnB,EAAa,CAAC,SAAO,KAAE,kDAAmD,QAAQ,EACjF,oBAACtH,EAAA,EAAK,CAAC,UAAU,MAAM,WAAW,SAC/B,UAAAuI,KACD,OAACvC,EAAA,EAAK,CAAC,EAAG,EAAG,OAAO,QAAS,GAC5BqC,MACC,QAACrI,EAAA,EAAK,CACJ,oBAAC2I,GAAA,EAAM,CAAC,MAAOD,EAAa,MAAOP,EAAmB,SAAUC,CAAA,CAAmB,KACnF,OAAC,IAAI,CAAC,QAAQ,YAAY,MAAM,YAC7B,SAAAM,CAAA,CACH,GACF,GAEJ,EACF,KAEA,QAACpB,EAAa,CAAC,SAAO,KAAE,8CAA+C,cAAc,EAClF,UAAAG,EAAQ,QACT,OAACzB,EAAA,EAAK,CAAC,EAAG,EAAG,OAAO,QAAS,MAC7B,OAAC,MACC,SAAU2B,EACV,QAASE,EACT,QAAQ,YACR,KAAK,KACL,KAAMD,EAAsB,UAAY,OACxC,cAAY,6CAEZ,mBAAC,KAAK,CAAC,QAAQ,sCAAsC,sBAAU,EACjE,GACF,GACF,KAEA,QAAC5H,EAAA,EAAK,CAAC,IAAK,EAAG,KAAI,GAAC,eAAe,WAChC,UAAAiI,MACC,OAAC,MACC,SAAUN,GAAUI,EACpB,QAASG,EACT,QAAQ,YACR,cAAY,uDAEZ,mBAAC,KAAK,CAAC,QAAQ,4CAA4C,gCAAoB,EACjF,EAGDJ,MACC,OAAC,MACC,SAAUH,GAAUI,EACpB,QAASC,EACT,KAAMD,EAA0B,UAAY,OAC5C,cAAY,kDAEZ,mBAAC,KAAK,CAAC,QAAQ,4CAA4C,2BAAe,EAC5E,GAEJ,GACF,CAEJ,C,oDChIO,SAASa,GAASjH,EAAqC,CAC5D,MAAMjB,EAAOiB,EAAM,IAAI,SAEvB,SACE,QAAC3B,EAAA,EAAK,CAAC,UAAU,MAAM,IAAK,EAAG,WAAW,SACxC,oBAAC6I,GAAA,CAAa,SAAUnI,CAAA,CAAM,KAE9B,OAACV,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,EAC7B,mBAAC8I,GAAA,CAAa,KAAApI,CAAA,CAAY,EAC5B,GACF,CAEJ,CAEA,SAASoI,GAAa,CAAE,KAAApI,CAAK,EAAgC,CAC3D,OAAQA,EAAK,KAAM,CACjB,IAAK,YACH,SAAO,OAACqI,GAAA,CAAc,KAAArI,CAAA,CAAY,EACpC,IAAK,aACH,SAAO,OAACsI,GAAA,CAAe,KAAAtI,CAAA,CAAY,EACrC,IAAK,SACH,SAAO,OAACuI,GAAA,CAAW,KAAAvI,CAAA,CAAY,EACjC,IAAK,kBACH,SAAO,OAACwI,GAAA,CAAmB,KAAAxI,CAAA,CAAY,EAEzC,QACE,SAAO,OAACyI,GAAA,CAAkB,KAAAzI,CAAA,CAAY,CAC1C,CACF,CAEA,SAASsI,GAAe,CAAE,KAAAtI,CAAK,EAAgC,CAC7D,MAAM0I,EAAgB1I,EAAK,MACrB2I,EAAaC,GAAcF,CAAa,EAE9C,OAAKC,KAgBH,oBACE,oBAAC,QAAM,SAAAA,EAAW,KAAK,KACvB,OAAC,IAAI,CAAC,MAAM,YAAa,SAAAA,EAAW,KAAK,GAC3C,KAjBE,oBACE,oBAAC,IAAI,CACH,oBAAC,KAAK,CAAC,QAAQ,2DAA2D,yBAC3D,CAAE,cAAAD,CAAc,GAC/B,EACF,KACA,OAAC,IAAI,CAAC,MAAM,YACV,mBAAC,KAAK,CAAC,QAAQ,0DAA0D,+BAAmB,EAC9F,GACF,CAUN,CAEA,SAASG,GAA0BC,EAAkD,CACnF,OAAIA,GAAiB,UAAWA,GAAiB,OAAOA,EAAc,OAAU,SACvEA,EAAc,MAGhB,IACT,CAEA,SAAST,GAAc,CAAE,KAAArI,CAAK,EAAgC,CAC5D,MAAM+I,EAAe/I,EAAK,MACpBgJ,EAAc,CAAC,CAAChJ,EAAK,MAAQ,CAAC,CAACA,EAAK,WACpC,CACJ,KAAM8I,EACN,UAAAxG,EACA,QAAA2G,CACF,KAAI,MAA0B,CAAE,IAAKF,CAAa,EAAG,CAAE,KAAMC,CAAY,CAAC,EAEpEE,EAAgBlJ,EAAK,MAAQ6I,GAA0BC,GAAe,SAAS,GAAKC,EACpFI,EAAsBnJ,EAAK,YAAc8I,GAAe,MAAM,aAAe,aAEnF,OAAIG,KAEA,oBACE,oBAAC,IAAI,CAAC,OAAM,GACV,mBAAC,KAAK,CAAC,QAAQ,uDAAuD,oCAAwB,EAChG,KACA,QAAC,IAAI,CAAC,MAAM,YAAY,uBAAWF,CAAA,EAAa,GAClD,EAIAzG,KACK,OAAC8G,GAAA,EAAa,KAIrB,oBACE,oBAAC,QAAM,SAAAF,CAAA,CAAc,KACrB,OAAC,IAAI,CAAC,MAAM,YAAa,SAAAC,CAAA,CAAoB,GAC/C,CAEJ,CAEA,SAASZ,GAAW,CAAE,KAAAvI,CAAK,EAAgC,CACzD,MAAMqJ,EAAYrJ,EAAK,MACjBgJ,EAAc,CAAC,CAAChJ,EAAK,MAAQ,CAAC,CAACA,EAAK,WAEpC,CAAE,KAAMsJ,EAAY,UAAAhH,EAAW,QAAA2G,CAAQ,KAAI,OAAkBI,EAAW,CAAE,KAAML,CAAY,CAAC,EAE7FO,EAAavJ,EAAK,MAAQsJ,GAAY,MACtCE,EAAmBxJ,EAAK,YAAcsJ,GAAY,UAAUA,EAAW,QAAQ,OAAS,CAAC,GAAG,MAElG,OAAIL,KAEA,oBACE,oBAAC,IAAI,CAAC,OAAM,GACV,mBAAC,KAAK,CAAC,QAAQ,qDAAqD,iCAAqB,EAC3F,KACA,QAAC,IAAI,CAAC,MAAM,YAAY,oBAAQjJ,EAAK,OAAM,GAC7C,EAIAsC,KACK,OAAC8G,GAAA,EAAa,KAIrB,oBACE,oBAAC,QAAM,SAAAG,CAAA,CAAW,KAClB,OAAC,IAAI,CAAC,MAAM,YAAa,SAAAC,GAAoB,aAAa,GAC5D,CAEJ,CAEA,SAAShB,GAAmB,CAAE,KAAAxI,CAAK,EAAgC,CACjE,MAAMyJ,EAAMzJ,EAAK,MACXgJ,EAAc,CAAC,CAAChJ,EAAK,MAAQ,CAAC,CAACA,EAAK,WAEpC,CACJ,KAAM0J,EACN,QAAAT,EACA,UAAA3G,CACF,KAAI,MAA+B,CAAE,kBAAmBmH,CAAI,EAAG,CAAE,KAAMT,CAAY,CAAC,EAE9EW,EAAO3J,EAAK,MAAQ0J,GAAoB,QAAQ,MAAQD,EACxDG,EAAa5J,EAAK,YAAc0J,GAAoB,QAAQ,MAAM,YAAc,UAEtF,OAAIT,KAEA,oBACE,oBAAC,IAAI,CAAC,OAAM,GACV,mBAAC,KAAK,CAAC,QAAQ,8DAA8D,0CAE7E,EACF,KAEA,OAAC,IAAI,CAAC,MAAM,YACV,oBAAC,KAAK,CAAC,QAAQ,4DAA4D,6BAAiBQ,CAAA,EAAI,EAClG,GACF,EAIAnH,KACK,OAAC8G,GAAA,EAAa,KAIrB,oBACE,oBAAC,QAAM,SAAAO,CAAA,CAAK,KACZ,OAAC,IAAI,CAAC,MAAM,YAAa,SAAAC,CAAA,CAAW,GACtC,CAEJ,CAEA,SAASR,IAAe,CACtB,SACE,oBACE,oBAAC,IAAQ,CAAC,MAAO,IAAK,KACtB,OAAC,IAAQ,CAAC,MAAO,IAAK,GACxB,CAEJ,CAEA,SAASX,GAAkB,CAAE,KAAAzI,CAAK,EAAgC,CAChE,SACE,oBACE,oBAAC,QAAM,SAAAA,EAAK,KAAK,EAChBA,EAAK,eAAc,OAAC,IAAI,CAAC,MAAM,YAAa,SAAAA,EAAK,WAAW,GAC/D,CAEJ,CAEA,SAASmI,GAAa,CAAE,SAAAnE,CAAS,EAAoC,CACnE,MAAMtE,KAAS,MAAWmK,EAAa,EACjClB,EAAaC,GAAc5E,EAAS,OAAS,aAAeA,EAAS,MAAQ,MAAS,EACtF8F,EAAaC,GAAc/F,EAAS,OAAS,SAAWA,EAAS,OAAS,MAAS,EAGzF,GAAIA,EAAS,OAAS,cAAgB2E,GAAY,MAAM,MAAM,OAAO,MACnE,SAAO,OAAC,OAAI,UAAWjJ,EAAO,KAAM,IAAKiJ,EAAW,KAAK,KAAK,MAAM,MAAO,IAAI,EAAG,GAC7E,GAAI3E,EAAS,OAAS,UAAY8F,EACvC,SAAO,OAAC,OAAI,UAAWpK,EAAO,KAAM,IAAKoK,EAAY,IAAI,EAAG,GACvD,CAEL,MAAME,EAAWjG,GAAoBC,EAAS,IAAI,EAClD,GAAIgG,EACF,SAAO,OAAC,IAAI,CAAC,KAAK,KAAK,KAAMA,CAAA,CAAU,CAE3C,CAGF,CAEA,SAASH,IAAgB,CACvB,MAAO,CACL,QAAM,OAAI,CACR,QAAS,QACT,SAAO,OAAW,IAAI,EACtB,UAAQ,OAAW,IAAI,CACzB,CAAC,CACH,CACF,CAEA,SAASjB,GAAcF,EAA2E,CAWhG,SAVmB,WAAQ,IAAM,CAC/B,GAAKA,EAIL,OACEuB,EAAA,EAAO,YAAYvB,CAAa,GAAK,OAAO,OAAOuB,EAAA,EAAO,WAAW,EAAE,KAAMC,GAAOA,EAAG,MAAQxB,CAAa,CAEhH,EAAG,CAACA,CAAa,CAAC,CAGpB,CAEA,SAASqB,GAAcI,EAAqD,CAQ1E,SAPc,WAAQ,IAAM,CAC1B,GAAKA,EAGL,OAAOA,GAAQ,MAAM,KACvB,EAAG,CAACA,CAAM,CAAC,GAEG,KAChB,CCjQO,SAASC,GAAe7F,EAAiC,CAC9D,OAAQA,EAAM,CACZ,IAAK,aACH,SAAO,KAAE,4CAA6C,aAAa,EACrE,IAAK,YACH,SAAO,KAAE,2CAA4C,WAAW,EAClE,IAAK,SACH,SAAO,KAAE,wCAAyC,QAAQ,EAC5D,IAAK,kBACH,SAAO,KAAE,iDAAkD,iBAAiB,EAC9E,IAAK,cACH,SAAO,KAAE,6CAA8C,aAAa,EACtE,IAAK,wBACH,SAAO,KAAE,uDAAwD,uBAAuB,EAC1F,IAAK,gBACH,SAAO,KAAE,+CAAgD,eAAe,EAC1E,IAAK,sBACH,SAAO,KAAE,qDAAsD,qBAAqB,EACtF,IAAK,aACH,SAAO,KAAE,4CAA6C,YAAY,EACpE,IAAK,mBACH,SAAO,KAAE,kDAAmD,kBAAkB,EAChF,IAAK,SACH,SAAO,KAAE,wCAAyC,QAAQ,EAC5D,QACE,SAAO,KAAE,yCAA0C,SAAS,CAChE,CACF,CAEO,SAAS8F,GAASpJ,EAAqC,CAC5D,KAAM,CAAE,KAAAsD,CAAK,EAAItD,EAAM,IAAI,SAC3B,SAAO,mBAAG,SAAAmJ,GAAe7F,CAAI,EAAE,CACjC,CCxBA,SAAS,GAAY+F,EAA4D,CAC/E,OAAQA,EAAW,CACjB,IAAK,2BACH,SAAO,KACL,4EACA,qGACF,EACF,IAAK,yBACH,SAAO,KACL,0EACA,qFACF,EACF,IAAK,6BACH,SAAO,KACL,8EACA,kJACF,EACF,IAAK,uBACH,SAAO,KACL,wEACA,gGACF,EACF,IAAK,4BACH,SAAO,KACL,6EACA,qSACF,EACF,IAAK,gCACH,SAAO,KACL,iFACA,yGACF,EACF,IAAK,wBACH,SAAO,KACL,yEACA,yDACF,EACF,IAAK,oBACH,SAAO,KACL,qEACA,+GACF,EACF,IAAK,yBACH,SAAO,KACL,oEACA,iGACF,EACF,IAAK,yBACH,SAAO,KACL,0EACA,iGACF,EACF,IAAK,gBACH,SAAO,KACL,iEACA,sGACF,EAEF,QACE,MAAO,EACX,CACF,CAEO,SAASC,GAAqBtJ,EAAkC,CACrE,KAAM,CAAE,SAAA+C,EAAU,QAAAwG,CAAQ,EAAIvJ,EAExBwJ,EAAQzG,GAAU,MAClB0G,EAAW1G,GAAYoG,GAAepG,EAAS,IAAI,EACnD9C,EAAW8C,GAAU,WAAaA,GAAU,QAElD,IAAI2G,KAAW,KAAE,kDAAmD,6BAA6B,EACjG,OAAI3G,GAAU,SAAW,QACvB2G,KAAW,KAAE,gDAAiD,kCAAkC,EACvF3G,GAAU,SAAW,YAC9B2G,KAAW,KAAE,kDAAmD,mCAAmC,MAInG,OAACjK,EAAA,GACC,SAAO,KAAE,0CAA2C,4BAA4B,EAChF,OAAQ,EAAQsD,EAChB,UAAWwG,EAEV,SAAAxG,MACC,QAAC1E,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,EAAG,WAAW,aAC3C,oBAAC,IAAI,CAAC,QAAQ,IAAI,OAAO,OACvB,oBAAC,KAAK,CAAC,QAAQ,qDACZ,WAAE,MAAAmL,CAAM,EAAE,KAAG,CAAE,SAAAC,CAAS,EAAE,KAC7B,EACF,EAECxJ,KACC,oBACE,oBAAC,IAAI,CAAC,QAAQ,IAAK,SAAAyJ,CAAA,CAAS,KAC5B,OAAC,IAAI,CAAC,QAAQ,IACX,YAAY3G,GAAU,SAAS,GAC9BA,GAAU,SACV,uGACJ,GACF,KAEA,OAAC,IAAI,CAAC,QAAQ,IACZ,mBAAC,KAAK,CAAC,QAAQ,oDAAoD,gCAAoB,EACzF,KAGF,OAAC,KAAM,CAAC,QAASwG,EACf,mBAAC,KAAK,CAAC,QAAQ,mDAAmD,cAAE,EACtE,GACF,EAEJ,CAEJ,CCzHO,SAASI,GAAW3J,EAAqC,CAC9D,MAAM4J,EAAO5J,EAAM,IAAI,SAKvB,OAAI4J,EAAK,SAAW,aACX,OAAC,IAAI,CAAC,MAAM,YAAa,iBAAE,gDAAiD,kBAAkB,EAAE,EAC9FA,EAAK,SAAW,QAClB,OAAC,IAAI,CAAC,MAAM,UAAW,iBAAE,4CAA6C,mBAAmB,EAAE,EACzFA,EAAK,SAAW,aAClB,OAACC,GAAA,CAAY,KAAAD,CAAA,CAAY,EACvBA,EAAK,SAAW,WAClB,OAACE,GAAA,CAAU,KAAAF,CAAA,CAAY,KAGzB,OAAC,IAAI,CAAC,MAAM,YAAa,iBAAE,2CAA4C,SAAS,EAAE,CAC3F,CAEA,SAASE,GAAU,CAAE,KAAAF,CAAK,EAAgC,CACxD,SACE,QAACvL,EAAA,EAAK,CAAC,WAAW,SAChB,oBAAC,IAAI,CAAC,MAAM,QAAS,iBAAE,0CAA2C,OAAO,EAAE,EAE1EuL,EAAK,YACJ,OAAC,KAAM,CAAC,KAAK,KAAK,QAAQ,YAAY,QAAS,IAAMA,EAAK,YAAYA,CAAI,EACvE,iBAAE,wDAAyD,SAAS,EACvE,GAEJ,CAEJ,CAEA,SAASC,GAAY,CAAE,KAAAD,CAAK,EAAgC,CAC1D,SACE,QAACvL,EAAA,EAAK,CAAC,WAAW,SAChB,oBAAC,IAAI,CAAC,MAAM,UAAW,iBAAE,2CAA4C,uBAAuB,EAAE,EAE7FuL,EAAK,YACJ,OAAC,KAAM,CAAC,KAAK,KAAK,QAAQ,YAAY,QAAS,IAAMA,EAAK,YAAYA,CAAI,EACvE,iBAAE,0DAA2D,SAAS,EACzE,GAEJ,CAEJ,CC5BA,MAAMG,GAA4C,CAChD,CAAE,GAAI,OAAQ,OAAQ,OAAQ,KAAM9C,GAAU,SAAU,cAAe,EACvE,CAAE,GAAI,gBAAiB,OAAQ,OAAQ,KAAMmC,GAAU,SAAU,cAAe,EAChF,CAAE,GAAI,SAAU,OAAQ,SAAU,KAAMO,GAAY,SAAU,cAAe,CAC/E,EAEO,SAASK,GAAe,CAC7B,UAAAC,EACA,aAAAC,EACA,cAAAC,EAAgB,EAChB,aAAAC,EACA,aAAAC,EACA,KAAAC,EAAO,CACT,EAAwB,CACtB,MAAMC,KAAgB,WAAQ,IAAM,CAAC,CAAE,GAAI,gBAAiB,KAAM,EAAK,CAAC,EAAG,CAAC,CAAC,EACvE,CAACC,EAAiBC,CAAkB,KAAI,YAAwC,EAEhFC,KAAyB,eAAa3H,GAAgC,CAC1E0H,EAAmB1H,CAAQ,CAC7B,EAAG,CAAC,CAAC,EAEChE,KAAO,WAAQ,IACZkL,EAAU,IAAKU,GAAM,CAC1B,MAAMzB,EAAS0B,GAAUD,EAAGT,CAAY,EAExC,MAAO,CACL,GAAGS,EACH,YAAaD,EACb,OAAAxB,CACF,CACF,CAAC,EACA,CAACe,EAAWS,EAAwBR,CAAY,CAAC,EAEpD,SACE,oBACE,qBAAC7L,EAAA,EAAK,CAAC,WAAW,WAAW,UAAU,SACrC,oBAACwM,GAAA,GACC,QAAAd,GACA,KAAAhL,EACA,SAAW4L,GAAMA,EAAE,MACnB,UAAWN,EACX,cAAAE,CAAA,CACD,KAED,OAACO,GAAA,EAAU,CAAC,cAAAX,EAA8B,YAAaG,EAAM,WAAYF,CAAA,CAAc,GACzF,KAEA,OAACd,GAAoB,CAAC,SAAUkB,EAAiB,QAAS,IAAMC,EAAmB,MAAS,EAAG,GACjG,CAEJ,CAEA,SAASG,GACPD,EACAI,EACyB,CACzB,GAAI,GAACJ,GAAK,CAACI,GAAWJ,EAAE,OAAS,UAIjC,OAAOI,EAAQ,KAAM7B,GAAWA,EAAO,KAAOyB,EAAE,KAAK,CACvD,C,gBCzEO,SAAS,GAAQ3K,EAAqB,CAC3C,KAAM,CAAE,MAAA9B,EAAO,UAAA8M,EAAW,SAAA/M,CAAS,EAAI+B,EAEvC,SACE,QAACrB,EAAA,EAAG,CAAC,SAAU,GAAI,QAAQ,OAAO,UAAU,MAAM,IAAK,EAAG,WAAW,aAClE,UAAAqM,MAAa,OAACrM,EAAA,EAAG,CAAE,SAAAqM,CAAA,CAAU,KAE9B,QAAC3M,EAAA,EAAK,CAAC,IAAK,EAAG,UAAU,SAAS,WAAW,aAC3C,oBAAC,IAAI,CAAC,QAAQ,KAAK,QAAQ,KACxB,SAAAH,CAAA,CACH,EAECD,CAAA,EACH,GACF,CAEJ,CCdO,SAASgN,GAAiBjL,EAAyB,CACxD,KAAM,CAAE,SAAAwD,EAAU,UAAAnC,EAAW,QAAAoC,CAAQ,EAAIzD,EAEzC,OACE,KAAC,SACC,MAAO,EAAE,wCAAyC,oBAAoB,EACtE,UAAW,IAAC,MAAK,KAAK,MAAM,KAAK,IAAK,GAEtC,cAAC,MAAK,QAAQ,IAAI,QAAQ,OAAO,MAAM,YACrC,aAAC,OAAM,QAAQ,8CAA8C,0RAI7D,EACF,EAEA,IAAC,MAAK,QAAQ,IAAI,QAAQ,OAAO,MAAM,YACrC,aAAC,OAAM,QAAQ,gDAAgD,6FAE/D,EACF,EAEA,IAAC,QACC,SAAAwD,EACA,QAAAC,EACA,KAAMpC,EAAY,UAAY,OAC9B,cAAY,4DAEZ,aAAC,OAAM,QAAQ,2CAA2C,0BAAc,EAC1E,GACF,CAEJ,CAEO,SAAS6J,GAAoBlL,EAAyB,CAC3D,KAAM,CAAE,SAAAwD,EAAU,UAAAnC,EAAW,QAAAoC,CAAQ,EAAIzD,EAEzC,SACE,QAAC,GAAO,CAAC,SAAO,KAAE,2CAA4C,mBAAmB,EAAG,aAAW,OAACmL,GAAA,EAAO,CAAC,OAAM,GAAC,EAC7G,oBAAC,IAAI,CAAC,QAAQ,IAAI,QAAQ,OAAO,MAAM,YACrC,mBAAC,KAAK,CAAC,QAAQ,iDAAiD,0GAEhE,EACF,KAEA,OAAC,KAAM,CAAC,SAAA3H,EAAoB,QAAAC,EAAkB,KAAMpC,EAAY,UAAY,OAAW,QAAQ,YAC7F,mBAAC,KAAK,CAAC,QAAQ,2CAA2C,2BAAe,EAC3E,GACF,CAEJ,CC3DO,SAAS+J,IAA2B,CACzC,SACE,OAAC,IAAI,CAAC,MAAM,YAAY,cAAc,SACpC,oBAAC,KAAK,CAAC,QAAQ,iDAAiD,8DACZ,OAClD,OAAC9M,EAAA,GACC,SAAQ,GACR,KAAK,0FACN,sBAED,EAAY,IAAI,2EAElB,EACF,CAEJ,C,gBCPA,MAAM+M,GAAuC,EAEtC,SAASC,GAAoBvF,EAA8C,CAChF,MAAMwF,KAAoB,UAA8B,MAAS,EAC3DC,KAAY,OAAmB,KAErC,aAAU,IAAM,CACd,MAAMC,EAAS1F,GAAU,OACnB2F,EACJH,EAAkB,UAAY,YAAcA,EAAkB,UAAY,QAAaE,IAAW,WAIpG,GAFAF,EAAkB,QAAUE,EAExB,EAACC,GAID3F,EAAU,CACZ,MAAM7H,KAAQ,KAAE,wCAAyC,sBAAsB,EACzEc,EAAU2M,GAAqB5F,CAAQ,EAE7CyF,EAAU,QAAQtN,EAAOc,CAAO,CAClC,CACF,EAAG,CAACwM,EAAWzF,CAAQ,CAAC,CAC1B,CAEA,SAAS4F,GAAqB5F,EAAkC,CAC9D,MAAM6F,EAAkB,CAAC,EAEzB,IAAIC,EAAgB,EAEpB,SAAW,CAACvI,EAAMwI,CAAK,IAAK,OAAO,QAAQ/F,EAAS,OAAO,OAAS,CAAC,CAAC,EAAG,CACvE,GAAI+F,GAAS,EACX,SAKF,MAAM5J,EAAec,GAAsBM,CAAiC,EACvEpB,IAIL0J,EAAM,KAAK1J,CAAY,EAEvB2J,GAAiB,EACnB,CAEA,MAAMhF,EAAed,GAAU,OAAO,UAAW,IAAS,EAE1D,OAAI8F,EAAgBR,MACX,KACL,kDACA,mFACA,CAAE,aAAAxE,CAAa,CACjB,KAGK,KACL,0CACA,yFACA,CAAE,aAAAA,EAAc,MAAA+E,CAAM,CACxB,CACF,CCzBA,SAASG,IAAsB,CAC7B,MAAMvJ,KAAS,MAAuB,EAChCwJ,EAAkBxJ,EAAO,MAAM,UAAU,GAAG,EAAE,EAEpD,MAAO,CACL,GAAGA,EACH,KAAMwJ,CACR,CACF,CAEA,MAAMC,GAAqD,CACzD,eACA,WACA,YACA,qBACA,YACF,EAEMC,GAAY,GAElB,SAASC,GAAqBC,EAAqB9B,EAAO,EAAG+B,EAAyBC,EAAa,GAAO,CACxG,KAAM,CAACC,EAAYC,CAAa,KAAI,YAAS,EAAK,EAE5CC,KAAa,MACjBL,EAAa,CAAE,IAAKA,EAAY,KAAM,EAAG,MAAO,EAAG,KAAM,QAAS,EAAI,IACxE,EACMM,EAAWD,EAAW,aAAa,WAAW,GAAG,CAAC,EAElDE,EACJP,GAAcM,GAAU,IACpB,CACE,IAAKN,EACL,YAAaM,EAAS,IACtB,YAAaR,GACb,WAAY5B,EACZ,iBAAkB+B,GAAY,OAASA,EAAW,OAAS,OAC3D,gBAAiBA,GAAY,MAC7B,WAAYC,CACd,EACA,KAEAM,KAAiB,MAAoBD,EAAsB,CAC/D,gBAAiBJ,EAAavD,EAAA,EAAO,6BAA+B,EACpE,uBAAwB,EAC1B,CAAC,EAEKhB,EAAUyE,EAAW,SAAWG,EAAe,QAErD,sBAAU,IAAM,CACd,MAAML,EAAa,CAACvE,GAAWiE,GAAqB,SAASW,EAAe,MAAM,MAAM,EACxFJ,EAAcD,CAAU,CAC1B,EAAG,CAACK,GAAgB,MAAM,OAAQ5E,CAAO,CAAC,EAEnC,CACL,GAAG4E,EAOH,KAAMD,IAAyB,KAAY,OAAYC,EAAe,KAEtE,MAAOH,EAAW,OAASG,EAAe,MAI1C,QAAA5E,EACA,UAAWyE,EAAW,WAAaG,EAAe,UAClD,WAAYH,EAAW,YAAcG,EAAe,UACtD,CACF,CAOO,MAAM,GAAO,IAAM,CACxB,KAAM,CAACtC,EAAMuC,CAAO,KAAI,YAAS,CAAC,EAC5B,CAACR,EAAYS,CAAa,KAAI,YAAqB,CACvD,OAAQ,GACR,MAAO,MACT,CAAC,EACK,CAACC,EAAiBC,CAAkB,KAAI,YAAS,EAAK,EAEtD,CAAE,KAAMlL,EAAuB,CAAE,qBAAsB,CAAC,CAAE,CAAE,KAAI,MAAgC,EAChG,CAACmL,EAAeC,CAAgB,KAAI,YAAS,EAAK,EAClD,CAACC,EAAiBC,CAAkB,KAAI,YAA6B,MAAS,EAE9E,CAACC,EAAuBC,CAAoB,KAAI,MAA0B,EAC1E,CAACC,EAAuBC,CAAoB,KAAI,MAA0B,EAC1E,CAACC,EAAuBC,CAAoB,KAAI,MAA0B,EAC1E,CAACC,EAAmBC,CAAgB,KAAI,MAAyB,EAEjE,CAAE,YAAa1D,GAAe,CAAC,CAAE,KAAI,KAA2B,EAEhEpE,EAAUiG,GAAoB,EAC9BhG,EAAWoG,GAAqBrG,EAAQ,MAAM,IAAKwE,EAAM+B,EAAYU,CAAe,EACpFc,EAAW,KAAK,MACnBd,EAAkBhH,GAAU,MAAM,OAAO,UAAW,OAAY,EAAIA,GAAU,MAAM,OAAO,OAAS,GAAKmG,EAC5G,KACA,aAAU,IAAM,CACV2B,EAAW,GAAKvD,EAAOuD,GACzBhB,EAAQgB,CAAQ,CAEpB,EAAG,CAACA,EAAUvD,CAAI,CAAC,EAEnB,KAAM,CAACwD,EAASC,CAAU,KAAI,YAC5B,SACF,EAEAzC,GAAoBvF,EAAS,IAAI,EAEjC,MAAMqG,EAAatG,EAAQ,MAAM,IAC3BkI,EAAcjI,EAAS,MAAM,IAC7BkI,EAAiBlI,EAAS,MAAM,OAGhCC,EACJsH,EAAqB,WACrBE,EAAqB,WACrBE,EAAqB,WACrB5H,EAAQ,WACRC,EAAS,WACT6H,EAAiB,aAKnB,aAAU,IAAM,CAEZX,GACAE,IAAoBpH,EAAS,MAAM,KACnCuH,EAAqB,WACrBA,EAAqB,MAAM,MAE3BF,EAAmBE,EAAqB,KAAK,GAAG,EAChDJ,EAAiB,EAAK,EAE1B,EAAG,CACDI,EAAqB,UACrBA,EAAqB,MAAM,IAC3BH,EACApH,EAAS,MAAM,IACfqH,EACAF,EACAD,CACF,CAAC,KAGD,aAAU,IAAM,CAEd,GAAI,GAACb,GAAcrG,EAAS,WAAaA,EAAS,YAKlD,IAAI+H,IAAY,UAAW,CAEzB,GAAIG,IAAmB,WAAY,CACjCF,EAAW,UAAU,EACrB,MACF,CAGA,GAAIE,IAAmB,iBAAkB,CACvCF,EAAW,OAAO,EAClB,MACF,CAGA,GAAI,CAAC,YAAa,qBAAsB,YAAY,EAAE,SAASE,GAAkB,EAAE,EAAG,CACpFF,EAAW,WAAW,EACtB,MACF,CAGA,GAAIE,IAAmB,WAAY,CACjCF,EAAW,UAAU,EACrB,MACF,CAGA,GAAI,CAACE,GAAkBA,IAAmB,QAAS,CACjDF,EAAW,WAAW,EACtB,MACF,CACF,CAGA,GAAID,IAAY,aAAeG,IAAmB,WAAY,CAC5DF,EAAW,UAAU,EACrB,MACF,CAKA,GAAI,CAACd,GAAiBa,IAAY,YAAcG,IAAmB,iBAAkB,CACnFF,EAAW,OAAO,EAClB,MACF,CAGA,GAAID,IAAY,UAAYG,IAAmB,cAAgBA,IAAmB,aAAc,CAC9FF,EAAW,WAAW,EACtB,MACF,CAGA,GAAID,IAAY,aAAeG,IAAmB,WAAY,CAC5DF,EAAW,UAAU,EACrB,MACF,CAGA,GACE,CAACd,IACAa,IAAY,SAAWA,IAAY,aACpCG,IAAmB,aAClBlI,EAAS,MAAM,SAAS,SAAW,GAAKA,EAAS,iBAClD,CACAmH,EAAiB,EAAI,EACrBa,EAAW,WAAW,EACtB,MACF,CAIA,GAAID,IAAY,aAAeR,EAAqB,OAASvH,EAAS,SAAU,CAC9EgI,EAAW,WAAW,EACtB,MACF,CAIA,GAAID,IAAY,cAAgBN,EAAqB,OAASS,IAAmB,SAAU,CACzFF,EAAW,UAAU,EACrB,MACF,EACF,EAAG,CACD3B,EACA6B,EACAlI,EAAS,UACTA,EAAS,WACTA,EAAS,gBACTA,EAAS,QACTmH,EACAa,EACAD,EACAb,EACAlH,EAAS,MAAM,SAAS,OACxBuH,EAAqB,MACrBE,EAAqB,KACvB,CAAC,EAED,MAAM/L,EAAQyM,GAAS,CACrB,SAAUnI,EAAS,KACnB,iBAAkBA,EAAS,MAC3B,gBAAiBD,EAAQ,MACzB,oBAAqBwH,EAAqB,MAC1C,oBAAqBE,EAAqB,MAC1C,oBAAqBE,EAAqB,MAC1C,wBAAyBE,EAAiB,KAC5C,CAAC,EAGKO,MAAuB,eAC1B9K,GAAoD,CAC/C+I,IACF2B,EAAW,UAAU,EAErBV,EAAsB,CACpB,IAAKjB,EACL,yBAA0B,CACxB,cAAA/I,CACF,CACF,CAAC,EAEL,EACA,CAACgK,EAAuBjB,CAAU,CACpC,EAEMgC,MAAuB,eAAY,IAAM,CACzChC,GAAc4B,GAChBT,EAAsB,CAAE,IAAKnB,EAAY,YAAA4B,CAAyB,CAAC,CAEvE,EAAG,CAACT,EAAuBnB,EAAY4B,CAAW,CAAC,EAE7CK,MAAwB,eAAY,IAAM,CAC1CjC,GAAc4B,IAChBd,EAAiB,EAAI,EACrBa,EAAW,WAAW,EAE1B,EAAG,CAACA,EAAYb,EAAkBd,EAAY4B,CAAW,CAAC,EAEpDM,MAAuB,eAAY,IAAM,CACzClC,GAAc4B,IAChBD,EAAW,WAAW,EAEtBN,EAAsB,CAAE,IAAKrB,EAAY,YAAA4B,CAAyB,CAAC,EAEvE,EAAG,CAACP,EAAuBM,EAAY3B,EAAY4B,CAAW,CAAC,EAEzDO,MAAmB,eAAY,SAAY,CAC3CnC,IACF2B,EAAW,SAAS,EAEpBJ,EAAkB,CAAE,IAAKvB,CAAW,CAAC,EAEzC,EAAG,CAACuB,EAAmBI,EAAY3B,CAAU,CAAC,EAG9C,OAAItG,EAAQ,aAER,OAAC,OACC,mBAAC,KAAK,CAAC,QAAQ,wCAAwC,sBAAU,EACnE,EAEQA,EAAQ,QAKlB,mBACE,oBAACzH,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,EAC7B,oBAACwH,GAAA,CACC,QAASC,EAAQ,KACjB,SAAUC,EAAS,KACnB,OAAAC,EACA,oBAAqB4H,EAAiB,UACtC,aAAcW,GACd,mBAAoB,CAAC,QAAS,WAAW,EAAE,SAAST,CAAO,EAC3D,wBAAyBN,EAAqB,WAAaM,IAAY,YACvE,iBAAkBM,GAClB,oBAAqB,CAAC,QAAS,YAAa,UAAU,EAAE,SAASN,CAAO,EACxE,kBAAmBO,GACnB,kBAAmB,IAAMrB,EAAmB,CAACD,CAAe,EAC5D,kBAAmBA,EACnB,qBAAsB,CAAC,YAAa,UAAU,EAAE,SAASe,CAAO,EAClE,GAEE,CAAC,QAAS,UAAU,EAAE,SAASA,CAAO,GAAK,CAAC,CAACR,GAAsB,QAAU7L,MAC7E,OAACD,GAAgB,CAAC,SAAUC,EAAM,SAAU,MAAOA,EAAM,MAAO,MAAOA,EAAM,MAC3E,mBAAC,IAAI,CAAC,QAAQ,IAAK,SAAAA,EAAM,KAAK,EAChC,EAGDqM,IAAY,gBACX,OAACvK,GAAA,CACC,SAAUyC,EACV,UAAWA,EACX,QAASmI,GACT,qBAAsBrM,EAAqB,sBAAwB,CAAC,EACtE,EAGDgM,IAAY,eACX,OAACnP,EAAA,EAAG,CAAC,QAAQ,OAAO,eAAe,SAAS,SAAU,GACpD,mBAACuM,GAAA,CACC,SAAUlF,EACV,UAAW0H,EAAqB,UAChC,QAASY,EAAA,CACX,EACF,EAGD,CAAC,QAAS,YAAa,UAAU,EAAE,SAASR,CAAO,GAClD/H,EAAS,MAAM,SACfA,EAAS,MAAM,QAAQ,OAAS,MAC9B,QAAC1H,EAAA,EAAK,CAAC,IAAK,EAAG,UAAU,SACvB,oBAAC2L,GAAA,CACC,UAAWjE,EAAS,KAAK,QACzB,aAAAmE,GACA,aAAc2C,EACd,cAAegB,EACf,KAAAvD,EACA,aAAekE,GAAM,CACnB,MAAMC,GAAQD,EAAE,OAAO,CAAC,GAAG,OAAS,OAAY,OAAYA,EAAE,OAAO,CAAC,GAAG,KAAO,OAAS,OACrFnC,EAAW,SAAWmC,EAAE,OAAO,CAAC,GAAG,IAAMC,KAAUpC,EAAW,QAChES,EAAc,CACZ,OAAQ0B,EAAE,OAAO,CAAC,GAAG,GACrB,MAAAC,EACF,CAAC,CAEL,EACF,KACA,OAACrD,GAAwB,EAAC,GAC5B,GAEN,EACF,KAvEO,OAAC3F,GAAU,EAAC,CAyEvB,EAmBA,SAASyI,GAASlO,EAAoD,CACpE,KAAM,CACJ,SAAA+F,EACA,iBAAA2I,EACA,gBAAAC,EACA,oBAAAC,EACA,oBAAAC,EACA,oBAAAC,EACA,wBAAAC,CACF,EAAI/O,EAEEgP,KAAU,KAAE,gDAAiD,8CAA8C,EAEjH,GAAIL,EACF,MAAO,CACL,SAAU,QACV,SAAO,KAAE,kDAAmD,uCAAuC,EACnG,KAAMK,EACN,MAAOL,CACT,EAGF,GAAID,EACF,MAAO,CACL,SAAU,QACV,SAAO,KAAE,mDAAoD,wBAAwB,EACrF,KAAMM,EACN,MAAON,CACT,EAGF,GAAIK,EACF,MAAO,CACL,SAAU,UACV,SAAO,KAAE,iDAAkD,qBAAqB,EAChF,KAAMC,EACN,MAAOD,CACT,EAGF,GAAIH,EACF,OAAOK,GAA0BL,EAAqBI,CAAO,EAG/D,GAAIH,EACF,MAAO,CACL,SAAU,UACV,SAAO,KAAE,sDAAuD,0BAA0B,EAC1F,KAAMG,EACN,MAAOH,CACT,EAGF,GAAIC,EACF,MAAO,CACL,SAAU,UACV,SAAO,KAAE,sDAAuD,oCAAoC,EACpG,KAAME,EACN,MAAOF,CACT,EAGF,GAAI/I,GAAU,SAAW,QACvB,MAAO,CACL,SAAU,UACV,SAAO,KAAE,sDAAuD,2BAA2B,EAC3F,QAAM,KACJ,qDACA,0HACF,CACF,EAGF,MAAMa,EAAab,GAAU,OAAO,UAAW,OAAY,EACrDe,EAAef,GAAU,OAAO,UAAW,SAAc,EAC/D,GAAIA,GAAU,SAAW,YAAca,EAAaE,EAAe,EAAG,CACpE,IAAIoI,EAAU,GAGd,OAAItI,EAAa,EACfsI,KAAU,KACR,8DACA,oIACF,EACSpI,EAAe,IACxBoI,KAAU,KACR,gEACA,6FACF,GAGK,CACL,SAAU,UACV,SAAO,KAAE,+DAAgE,6BAA6B,EACtG,KAAMA,CACR,CACF,CAGF,CAEA,SAASD,GAA0BL,EAA8BI,EAA+C,CAC9G,MAAMG,EAAWtQ,EAAc+P,CAAmB,EAElD,IAAIQ,EAAyB,UACzBhP,EAAO,KAEX,OAAQ+O,GAAU,UAAW,CAC3B,IAAK,qCACHC,EAAW,QACXhP,KAAO,KACL,qEACA,sEACF,EACA,MAEF,IAAK,sCACHgP,EAAW,QACXhP,KAAO,KACL,sEACA,qEACF,EACA,MAEF,IAAK,wCACHgP,EAAW,QACXhP,KAAO,KACL,wEACA,uEACF,EACA,MAEF,IAAK,oCACHgP,EAAW,QACXhP,KAAO,KACL,mEACA,kEACF,EACA,KACJ,CAEA,MAAO,CACL,SAAAgP,EACA,SAAO,KAAE,sDAAuD,yBAAyB,EACzF,KAAMhP,GAAQ4O,EACd,MAAOJ,CACT,CACF,CC3lBe,SAASS,IAAiB,CACvC,SAAO,OAACC,GAAA,EAAI,CAAC,MAAM,mBAAoB,SAAAtG,EAAA,EAAO,0BAAyB,OAAC,GAAS,EAAC,KAAK,OAAC,GAAU,EAAC,EAAG,CACxG,C","sources":["webpack://grafana/./public/app/features/migrate-to-cloud/shared/InfoItem.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/cloud/EmptyState/InfoPane.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/cloud/EmptyState/MigrationStepsPane.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/api/errors.ts","webpack://grafana/./public/app/features/migrate-to-cloud/cloud/TokenErrorAlert.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/cloud/MigrationTokenPane/CreateTokenModal.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/cloud/MigrationTokenPane/DeleteTokenConfirmationModal.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/cloud/MigrationTokenPane/TokenStatus.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/cloud/MigrationTokenPane/MigrationTokenPane.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/cloud/Page.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/shared/AlertWithTraceID.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/resourceDependency.ts","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/resourceInfo.ts","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/ConfigureSnapshot.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/EmptyState/CallToAction/ConnectModal.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/EmptyState/CallToAction/CallToAction.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/EmptyState/InfoPaneLeft.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/EmptyState/InfoPaneRight.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/EmptyState/EmptyState.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/MigrationInfo.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/MigrationSummary.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/NameCell.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/TypeCell.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/ResourceDetailsModal.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/StatusCell.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/ResourcesTable.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/CTAInfo.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/SnapshotCTAs.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/SupportedTypesDisclosure.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/useNotifyOnSuccess.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/Page.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/MigrateToCloud.tsx"],"sourcesContent":["import { ReactNode } from 'react';\n\nimport { Stack, Text, TextLink } from '@grafana/ui';\n\ninterface Props {\n  children: NonNullable<ReactNode>;\n  title: string;\n  linkTitle?: string;\n  linkHref?: string;\n}\n\nexport const InfoItem = ({ children, title, linkHref, linkTitle }: Props) => {\n  return (\n    <Stack gap={2} direction=\"column\">\n      <Text element=\"h4\">{title}</Text>\n      <Text color=\"secondary\">{children}</Text>\n      {linkHref && (\n        <TextLink href={linkHref} external>\n          {linkTitle ?? linkHref}\n        </TextLink>\n      )}\n    </Stack>\n  );\n};\n","import { t, Trans } from 'app/core/internationalization';\n\nimport { InfoItem } from '../../shared/InfoItem';\n\nexport const InfoPane = () => {\n  return (\n    <InfoItem title={t('migrate-to-cloud.migrate-to-this-stack.title', 'Let us help you migrate to this stack')}>\n      <Trans i18nKey=\"migrate-to-cloud.migrate-to-this-stack.body\">\n        You can securely migrate some resources from your self-managed Grafana installation to this cloud stack. To get\n        started, you&apos;ll need to generate a migration token. Your self-managed instance will use the token to\n        authenticate with this cloud stack.\n      </Trans>\n    </InfoItem>\n  );\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Box, Stack, TextLink, useStyles2 } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { InfoItem } from '../../shared/InfoItem';\n\nexport const MigrationStepsPane = () => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Box alignItems=\"flex-start\" display=\"flex\" direction=\"column\" gap={2}>\n      <InfoItem\n        title={t('migrate-to-cloud.get-started.title', 'Performing a migration')}\n        linkTitle={t('migrate-to-cloud.get-started.link-title', 'Learn more about Private Data Source Connect')}\n        linkHref=\"https://grafana.com/docs/grafana-cloud/connect-externally-hosted/private-data-source-connect\"\n      >\n        <Stack direction=\"column\" gap={2}>\n          <Trans i18nKey=\"migrate-to-cloud.get-started.body\">\n            The migration process must be started from your self-managed Grafana instance.\n          </Trans>\n          <ol className={styles.list}>\n            <li>\n              <Trans i18nKey=\"migrate-to-cloud.get-started.step-1\">\n                Log in to your self-managed instance and navigate to Administration &gt; General &gt; Migrate to Grafana\n                Cloud.\n              </Trans>\n            </li>\n            <li>\n              <Trans i18nKey=\"migrate-to-cloud.get-started.step-2\">\n                Select &quot;Migrate this instance to Cloud&quot;.\n              </Trans>\n            </li>\n            <li>\n              <Trans i18nKey=\"migrate-to-cloud.get-started.step-3\">\n                You&apos;ll be prompted for a migration token. Generate one from this screen. Enter your token and click\n                &quot;Connect to this stack&quot;.\n              </Trans>\n            </li>\n            <li>\n              <Trans i18nKey=\"migrate-to-cloud.get-started.step-4\">\n                After connecting to the cloud stack, click &quot;Build snapshot&quot; to create a snapshot of your\n                self-managed instance.\n              </Trans>\n            </li>\n            <li>\n              <Trans i18nKey=\"migrate-to-cloud.get-started.step-5\">\n                After a snapshot is created, click &quot;Upload snapshot&quot; to copy the resources to your cloud\n                stack.\n              </Trans>\n            </li>\n            <li>\n              <Trans i18nKey=\"migrate-to-cloud.get-started.step-6\">\n                If some of your data sources will not work over the public internet, you’ll need to install Private Data\n                Source Connect in your self-managed environment.\n              </Trans>\n            </li>\n          </ol>\n        </Stack>\n      </InfoItem>\n      <TextLink href=\"/connections/private-data-source-connections\" external>\n        {t('migrate-to-cloud.get-started.configure-pdc-link', 'Configure PDC for this stack')}\n      </TextLink>\n      <TextLink href=\"https://grafana.com/docs/grafana-cloud/account-management/migration-guide\" external>\n        {t('migrate-to-cloud.migrate-to-this-stack.link-title', 'View the full migration guide')}\n      </TextLink>\n    </Box>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  list: css({\n    padding: 'revert',\n  }),\n});\n","import { isFetchError } from '@grafana/runtime';\n\n// TODO: candidate to hoist and share\nexport function maybeAPIError(err: unknown) {\n  if (!isFetchError<unknown>(err) || typeof err.data !== 'object' || !err.data) {\n    return null;\n  }\n\n  const data = err?.data;\n  const message = 'message' in data && typeof data.message === 'string' ? data.message : null;\n  const messageId = 'messageId' in data && typeof data.messageId === 'string' ? data.messageId : null;\n  const statusCode = 'statusCode' in data && typeof data.statusCode === 'number' ? data.statusCode : null;\n\n  if (!message || !messageId || !statusCode) {\n    return null;\n  }\n\n  return { message, messageId, statusCode };\n}\n","import { Alert } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nexport function TokenErrorAlert() {\n  return (\n    <Alert severity=\"error\" title={t('migrate-to-cloud.migration-token.error-title', 'Something went wrong')}>\n      <Trans i18nKey=\"migrate-to-cloud.migration-token.error-body\">\n        Unable to generate a migration token. Please try again later.\n      </Trans>\n    </Alert>\n  );\n}\n","import { useId } from 'react';\n\nimport { Modal, Button, Input, Stack, ClipboardButton, Field } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { TokenErrorAlert } from '../TokenErrorAlert';\n\ninterface Props {\n  isOpen: boolean;\n  hideModal: () => void;\n  migrationToken?: string;\n}\n\nexport const CreateTokenModal = ({ isOpen, hideModal, migrationToken }: Props) => {\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={t('migrate-to-cloud.migration-token.modal-title', 'Migration token created')}\n      onDismiss={hideModal}\n    >\n      {migrationToken ? <TokenSuccessContent migrationToken={migrationToken} /> : <TokenErrorAlert />}\n\n      <Modal.ButtonRow>\n        <Button variant=\"secondary\" onClick={hideModal}>\n          <Trans i18nKey=\"migrate-to-cloud.migration-token.modal-close\">Close</Trans>\n        </Button>\n\n        {migrationToken && (\n          <ClipboardButton variant=\"primary\" getText={() => migrationToken} onClipboardCopy={hideModal}>\n            <Trans i18nKey=\"migrate-to-cloud.migration-token.modal-copy-and-close\">Copy to clipboard and close</Trans>\n          </ClipboardButton>\n        )}\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n\nfunction TokenSuccessContent({ migrationToken }: { migrationToken: string }) {\n  const inputId = useId();\n  return (\n    <Field\n      description={t(\n        'migrate-to-cloud.migration-token.modal-field-description',\n        'Copy the token now, as you will not be able to see it again. Losing this token requires creating a new one.'\n      )}\n      htmlFor={inputId}\n      label={t('migrate-to-cloud.migration-token.modal-field-label', 'Token')}\n    >\n      <Stack>\n        <Input id={inputId} value={migrationToken} readOnly />\n        <ClipboardButton icon=\"clipboard-alt\" getText={() => migrationToken}>\n          <Trans i18nKey=\"migrate-to-cloud.migration-token.modal-copy-button\">Copy to clipboard</Trans>\n        </ClipboardButton>\n      </Stack>\n    </Field>\n  );\n}\n","import { Alert, ConfirmModal } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\ninterface DeleteTokenConfirmationModalProps {\n  isOpen: boolean;\n  hasError: boolean;\n  onConfirm: () => void;\n  onDismiss: () => void;\n}\n\nexport function DeleteTokenConfirmationModal(props: DeleteTokenConfirmationModalProps) {\n  const { isOpen, hasError, onConfirm, onDismiss } = props;\n\n  const body = (\n    <>\n      <p>\n        <Trans i18nKey=\"migrate-to-cloud.delete-migration-token-confirm.body\">\n          If you&apos;ve already used this token with a self-managed installation, that installation will no longer be\n          able to upload content.\n        </Trans>\n      </p>\n\n      {hasError && (\n        <Alert\n          severity=\"error\"\n          title={t('migrate-to-cloud.delete-migration-token-confirm.error-title', 'Error deleting token')}\n        />\n      )}\n    </>\n  );\n\n  return (\n    <ConfirmModal\n      isOpen={isOpen}\n      title={t('migrate-to-cloud.delete-migration-token-confirm.title', 'Delete migration token')}\n      body={body}\n      confirmText={t('migrate-to-cloud.delete-migration-token-confirm.confirm-button', 'Delete token')}\n      onConfirm={onConfirm}\n      onDismiss={onDismiss}\n    />\n  );\n}\n","import Skeleton from 'react-loading-skeleton';\n\nimport { Text } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\ninterface Props {\n  hasToken: boolean;\n  isFetching: boolean;\n  errorMessageId: string | undefined;\n}\n\nexport const TokenStatus = ({ hasToken, errorMessageId, isFetching }: Props) => {\n  if (isFetching) {\n    return <Skeleton width={100} />;\n  } else if (hasToken) {\n    return (\n      <Text color=\"success\">\n        <Trans i18nKey=\"migrate-to-cloud.token-status.active\">Token created and active</Trans>\n      </Text>\n    );\n  } else if (errorMessageId === 'cloudmigrations.tokenNotFound') {\n    return <Trans i18nKey=\"migrate-to-cloud.token-status.no-active\">No active token</Trans>;\n  } else if (errorMessageId) {\n    return (\n      <Text color=\"error\">\n        <Trans i18nKey=\"migrate-to-cloud.token-status.unknown-error\">Error retrieving token</Trans>\n      </Text>\n    );\n  }\n\n  return (\n    <Text color=\"warning\">\n      <Trans i18nKey=\"migrate-to-cloud.token-status.unknown\">Unknown</Trans>\n    </Text>\n  );\n};\n","import { useCallback, useState } from 'react';\n\nimport { reportInteraction } from '@grafana/runtime';\nimport { Box, Button, Text } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport {\n  useCreateCloudMigrationTokenMutation,\n  useDeleteCloudMigrationTokenMutation,\n  useGetCloudMigrationTokenQuery,\n} from '../../api';\nimport { maybeAPIError } from '../../api/errors';\nimport { TokenErrorAlert } from '../TokenErrorAlert';\n\nimport { CreateTokenModal } from './CreateTokenModal';\nimport { DeleteTokenConfirmationModal } from './DeleteTokenConfirmationModal';\nimport { TokenStatus } from './TokenStatus';\n\nexport const MigrationTokenPane = () => {\n  const [showCreateModal, setShowCreateModal] = useState(false);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n\n  const getTokenQuery = useGetCloudMigrationTokenQuery();\n  const [createTokenMutation, createTokenResponse] = useCreateCloudMigrationTokenMutation();\n  const [deleteTokenMutation, deleteTokenResponse] = useDeleteCloudMigrationTokenMutation();\n\n  const getTokenQueryError = maybeAPIError(getTokenQuery.error);\n\n  // GetCloudMigrationToken returns a 404 error if no token exists.\n  // When a token is deleted and the GetCloudMigrationToken query is refreshed, RTKQ will retain\n  // both the last successful data (\"we have a token!\") AND the new error. So we need to explicitly\n  // check that we don't have an error AND that we have a token.\n  const hasToken = Boolean(getTokenQuery.data?.id) && getTokenQueryError?.statusCode !== 404;\n  const isLoading = getTokenQuery.isFetching || createTokenResponse.isLoading;\n\n  const handleGenerateToken = useCallback(async () => {\n    reportInteraction('grafana_e2c_generate_token_clicked');\n\n    const resp = await createTokenMutation();\n\n    if (!('error' in resp)) {\n      setShowCreateModal(true);\n    }\n  }, [createTokenMutation]);\n\n  const handleDeleteToken = useCallback(async () => {\n    if (!getTokenQuery.data?.id) {\n      return;\n    }\n\n    reportInteraction('grafana_e2c_delete_token_clicked');\n    const resp = await deleteTokenMutation({ uid: getTokenQuery.data.id });\n    if (!('error' in resp)) {\n      setShowDeleteModal(false);\n    }\n  }, [deleteTokenMutation, getTokenQuery.data]);\n\n  return (\n    <>\n      <Box display=\"flex\" alignItems=\"flex-start\" direction=\"column\" gap={2}>\n        {createTokenResponse?.isError ? (\n          <TokenErrorAlert />\n        ) : (\n          <Text color=\"secondary\">\n            <Trans i18nKey=\"migrate-to-cloud.migration-token.status\">\n              Current status:{' '}\n              <TokenStatus hasToken={hasToken} isFetching={isLoading} errorMessageId={getTokenQueryError?.messageId} />\n            </Trans>\n          </Text>\n        )}\n\n        {hasToken ? (\n          <Button onClick={() => setShowDeleteModal(true)} variant=\"destructive\">\n            {t('migrate-to-cloud.migration-token.delete-button', 'Delete token')}\n          </Button>\n        ) : (\n          <Button disabled={isLoading} onClick={handleGenerateToken}>\n            {createTokenResponse.isLoading\n              ? t('migrate-to-cloud.migration-token.generate-button-loading', 'Generating a migration token...')\n              : t('migrate-to-cloud.migration-token.generate-button', 'Generate a migration token')}\n          </Button>\n        )}\n      </Box>\n\n      <CreateTokenModal\n        isOpen={showCreateModal}\n        hideModal={() => {\n          reportInteraction('grafana_e2c_generated_token_modal_dismissed');\n          setShowCreateModal(false);\n        }}\n        migrationToken={createTokenResponse.data?.token}\n      />\n\n      <DeleteTokenConfirmationModal\n        isOpen={showDeleteModal}\n        onConfirm={handleDeleteToken}\n        onDismiss={() => setShowDeleteModal(false)}\n        hasError={Boolean(deleteTokenResponse.error)}\n      />\n    </>\n  );\n};\n","import { Box, Stack } from '@grafana/ui';\n\nimport { InfoPane } from './EmptyState/InfoPane';\nimport { MigrationStepsPane } from './EmptyState/MigrationStepsPane';\nimport { MigrationTokenPane } from './MigrationTokenPane/MigrationTokenPane';\n\nexport const Page = () => {\n  return (\n    <Box backgroundColor=\"secondary\" display=\"flex\" alignItems=\"center\" direction=\"column\">\n      <Box maxWidth={90} paddingY={6} paddingX={2} gap={6} direction=\"column\" display=\"flex\">\n        <Stack gap={2} direction=\"column\">\n          <InfoPane />\n          <MigrationTokenPane />\n        </Stack>\n\n        <MigrationStepsPane />\n      </Box>\n    </Box>\n  );\n};\n","import { isFetchError } from '@grafana/runtime';\nimport { Alert, Stack, Text } from '@grafana/ui';\nimport { AlertProps } from '@grafana/ui/internal';\n\ninterface AlertWithTraceIDProps extends AlertProps {\n  error?: unknown;\n}\n\nexport function AlertWithTraceID(props: AlertWithTraceIDProps) {\n  const { error, children, ...rest } = props;\n  const traceID = maybeGetTraceID(error);\n\n  return (\n    <Alert {...rest}>\n      <Stack direction=\"column\" gap={1}>\n        {children}\n\n        {traceID && (\n          /* Deliberately don't want to translate 'Trace ID' */\n          /* eslint-disable-next-line @grafana/no-untranslated-strings */\n          <Text element=\"p\" color=\"secondary\" variant=\"bodySmall\">\n            Trace ID: {traceID}\n          </Text>\n        )}\n      </Stack>\n    </Alert>\n  );\n}\n\nfunction maybeGetTraceID(err: unknown) {\n  const data = isFetchError<unknown>(err) ? err.data : err;\n\n  if (typeof data === 'object' && data && 'traceID' in data && typeof data.traceID === 'string') {\n    return data.traceID;\n  }\n\n  return undefined;\n}\n","import { IconName } from '@grafana/ui';\n\nimport { ResourceDependencyDto } from '../api';\n\nimport { ResourceTableItem } from './types';\n\nexport type ResourceTypeId = ResourceTableItem['type'];\n\nexport interface ResourceType {\n  id: ResourceTypeId;\n  name: string;\n  icon: IconName;\n}\n\nexport function buildDependencyMaps(resourceDependencies: ResourceDependencyDto[]) {\n  const dependencyMap = new Map<ResourceTypeId, ResourceTypeId[]>();\n  const dependentMap = new Map<ResourceTypeId, ResourceTypeId[]>();\n\n  for (const dependency of resourceDependencies) {\n    const resourceType = dependency.resourceType as ResourceTypeId;\n    const dependencies = (dependency.dependencies || []) as ResourceTypeId[];\n\n    dependencyMap.set(resourceType, dependencies);\n\n    // Build reverse mapping (what depends on what)\n    for (const dep of dependencies) {\n      if (!dependentMap.has(dep)) {\n        dependentMap.set(dep, []);\n      }\n\n      dependentMap.get(dep)?.push(resourceType);\n    }\n  }\n\n  return { dependencyMap, dependentMap };\n}\n\nexport function handleSelection(\n  dependencyMap: Map<ResourceTypeId, ResourceTypeId[]>,\n  selectedTypes: Set<ResourceTypeId>,\n  resourceToSelect: ResourceTypeId\n): Set<ResourceTypeId> {\n  const result = new Set(selectedTypes);\n\n  function selectWithDependencies(resourceType: ResourceTypeId, visited: Set<ResourceTypeId>) {\n    if (visited.has(resourceType)) {\n      return;\n    }\n\n    visited.add(resourceType);\n    result.add(resourceType);\n\n    dependencyMap.get(resourceType)?.forEach((dep) => selectWithDependencies(dep, visited));\n  }\n\n  selectWithDependencies(resourceToSelect, new Set());\n\n  return result;\n}\n\nexport function handleDeselection(\n  dependentMap: Map<ResourceTypeId, ResourceTypeId[]>,\n  selectedTypes: Set<ResourceTypeId>,\n  resourceToDeselect: ResourceTypeId\n): Set<ResourceTypeId> {\n  const result = new Set(selectedTypes);\n\n  function processDeselection(resourceType: ResourceTypeId, visited: Set<ResourceTypeId>) {\n    if (visited.has(resourceType)) {\n      return;\n    }\n\n    visited.add(resourceType);\n    result.delete(resourceType);\n\n    dependentMap.get(resourceType)?.forEach((dep) => processDeselection(dep, visited));\n  }\n\n  processDeselection(resourceToDeselect, new Set());\n\n  return result;\n}\n","import { t } from 'app/core/internationalization';\n\nimport { ResourceTableItem } from './types';\n\nexport function iconNameForResource(resource: ResourceTableItem['type']) {\n  switch (resource) {\n    case 'DASHBOARD':\n      return 'dashboard';\n    case 'FOLDER':\n      return 'folder';\n    case 'DATASOURCE':\n      return 'database';\n    case 'LIBRARY_ELEMENT':\n      return 'library-panel';\n    case 'MUTE_TIMING':\n      return 'clock-nine';\n    case 'NOTIFICATION_TEMPLATE':\n      return 'file-alt';\n    case 'CONTACT_POINT':\n      return 'at';\n    case 'NOTIFICATION_POLICY':\n      return 'comment-alt';\n    case 'ALERT_RULE':\n      return 'bell';\n    case 'ALERT_RULE_GROUP':\n      return 'bell';\n    case 'PLUGIN':\n      return 'plug';\n    default:\n      return undefined;\n  }\n}\n\nexport function pluralizeResourceName(resource: ResourceTableItem['type']) {\n  switch (resource) {\n    case 'DASHBOARD':\n      return t('migrate-to-cloud.resource-types.dashboard', 'Dashboards');\n    case 'FOLDER':\n      return t('migrate-to-cloud.resource-types.folder', 'Folders');\n    case 'DATASOURCE':\n      return t('migrate-to-cloud.resource-types.datasource', 'Data Sources');\n    case 'LIBRARY_ELEMENT':\n      return t('migrate-to-cloud.resource-types.library_element', 'Library Elements');\n    case 'MUTE_TIMING':\n      return t('migrate-to-cloud.resource-types.mute_timing', 'Mute Timings');\n    case 'NOTIFICATION_TEMPLATE':\n      return t('migrate-to-cloud.resource-types.notification_template', 'Notification Templates');\n    case 'CONTACT_POINT':\n      return t('migrate-to-cloud.resource-types.contact_point', 'Contact Points');\n    case 'NOTIFICATION_POLICY':\n      return t('migrate-to-cloud.resource-types.notification_policy', 'Notification Policies');\n    case 'ALERT_RULE':\n      return t('migrate-to-cloud.resource-types.alert_rule', 'Alert Rules');\n    case 'ALERT_RULE_GROUP':\n      return t('migrate-to-cloud.resource-types.alert_rule_group', 'Alert Rule Groups');\n    case 'PLUGIN':\n      return t('migrate-to-cloud.resource-types.plugin', 'Plugins');\n    default:\n      return undefined;\n  }\n}\n","import { useState, ChangeEvent, useEffect } from 'react';\n\nimport { Button, Icon, Stack, Checkbox, Text, Box, IconName, Space, Tooltip } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nimport { ResourceDependencyDto } from '../api';\n\nimport { ResourceTypeId, buildDependencyMaps, handleSelection, handleDeselection } from './resourceDependency';\nimport { iconNameForResource, pluralizeResourceName } from './resourceInfo';\n\ninterface ConfigureSnapshotProps {\n  disabled: boolean;\n  isLoading: boolean;\n  onClick: (resourceTypes: ResourceTypeId[]) => void;\n  resourceDependencies: ResourceDependencyDto[] | never[];\n}\n\n// Manual order of resource types to display in the UI for better UX.\nconst alertsSubResources = [\n  'ALERT_RULE',\n  'NOTIFICATION_POLICY',\n  'NOTIFICATION_TEMPLATE',\n  'CONTACT_POINT',\n  'MUTE_TIMING',\n] as const;\n\nconst displayOrder = [\n  'DASHBOARD',\n  'LIBRARY_ELEMENT',\n  'DATASOURCE',\n  'PLUGIN',\n  'FOLDER',\n  'ALERT_RULE_GROUP',\n  ...alertsSubResources,\n] as const;\n\n// This guarantees that displayOrder includes all ResourceTypeId values.\ntype IsExhaustive = Exclude<ResourceTypeId, (typeof displayOrder)[number]> extends never ? true : false;\nconst hasAllResourceTypes: IsExhaustive = true; // prettier-ignore\n\nfunction resourceTypeOrder(resourceTypes: ResourceTypeId[]): ResourceTypeId[] {\n  return hasAllResourceTypes && displayOrder.filter((type) => resourceTypes.includes(type));\n}\n\nexport function ConfigureSnapshot(props: ConfigureSnapshotProps) {\n  const { disabled, isLoading, onClick, resourceDependencies } = props;\n  const [selectedTypes, setSelectedTypes] = useState<Set<ResourceTypeId>>(new Set());\n  const [includeAll, setIncludeAll] = useState(true);\n\n  const { dependencyMap, dependentMap } = buildDependencyMaps(resourceDependencies);\n  const resourceTypes = resourceTypeOrder(Array.from(dependencyMap.keys()));\n\n  // Initialize with all items selected when component mounts once.\n  useEffect(() => {\n    setSelectedTypes(new Set(resourceTypes));\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const handleIncludeAllChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const checked = e.target.checked;\n\n    setIncludeAll(checked);\n    if (checked) {\n      // When directly checking include all, select all other items as well.\n      setSelectedTypes(new Set(resourceTypes));\n    } else {\n      // When directly unchecking include all, clear all other items as well.\n      setSelectedTypes(new Set());\n    }\n  };\n\n  const handleTypeChange = (id: ResourceTypeId) => (e: ChangeEvent<HTMLInputElement>) => {\n    const updatedList = e.target.checked\n      ? handleSelection(dependencyMap, selectedTypes, id)\n      : handleDeselection(dependentMap, selectedTypes, id);\n\n    setSelectedTypes(updatedList);\n    setIncludeAll(updatedList.size === resourceTypes.length);\n  };\n\n  const handleBuildSnapshot = () => {\n    onClick(Array.from(selectedTypes));\n  };\n\n  return (\n    <Stack direction=\"column\" gap={3}>\n      <Stack direction=\"column\" gap={1}>\n        <Text variant=\"h4\">\n          <Stack direction=\"row\" gap={1} alignItems=\"center\">\n            <Icon name=\"cog\" size=\"lg\" />\n            <Trans i18nKey=\"migrate-to-cloud.configure-snapshot.title\">Configure snapshot</Trans>\n          </Stack>\n        </Text>\n        <Text color=\"secondary\">\n          <Trans i18nKey=\"migrate-to-cloud.configure-snapshot.description\">\n            Select which resources you want to include in the snapshot to migrate.\n          </Trans>\n          <br />\n          <Text weight=\"bold\">\n            <Trans i18nKey=\"migrate-to-cloud.configure-snapshot.description-sub-line\">\n              Some resources may depend on others and will be automatically selected or deselected.\n            </Trans>\n          </Text>\n        </Text>\n      </Stack>\n\n      <Stack direction=\"column\" gap={2} alignItems=\"flex-start\">\n        <Stack direction=\"column\" gap={1} alignItems=\"flex-start\">\n          <Stack key=\"include-all\" alignItems=\"flex-start\">\n            <Checkbox\n              indeterminate={selectedTypes.size > 0 && !includeAll}\n              value={includeAll}\n              onChange={handleIncludeAllChange}\n              data-testid=\"migrate-to-cloud-configure-snapshot-checkbox-resource-include-all\"\n              //@ts-ignore\n              label={\n                <Text variant=\"h5\">\n                  <Trans i18nKey=\"migrate-to-cloud.configure-snapshot.resource-include-all\">Include all</Trans>\n                </Text>\n              }\n            />\n          </Stack>\n\n          {resourceTypes.map((type) => (\n            <Stack key={type} gap={1} alignItems=\"center\">\n              <Space h={alertsSubResources.includes(type as (typeof alertsSubResources)[number]) ? 2 : 0.25} />\n              <Checkbox\n                value={selectedTypes.has(type)}\n                onChange={handleTypeChange(type)}\n                data-testid={`migrate-to-cloud-configure-snapshot-checkbox-resource-${type.toLowerCase()}`}\n                //@ts-ignore\n                label={\n                  <Stack gap={1} alignItems=\"center\">\n                    <Icon name={iconNameForResource(type) as IconName} size=\"xl\" />\n                    <Text variant=\"h5\">{pluralizeResourceName(type) ?? type}</Text>\n                  </Stack>\n                }\n              />\n            </Stack>\n          ))}\n        </Stack>\n\n        <Box display=\"flex\" justifyContent=\"flex-start\" alignItems=\"center\" gap={1}>\n          <Button\n            disabled={disabled || selectedTypes.size === 0}\n            onClick={handleBuildSnapshot}\n            icon={isLoading ? 'spinner' : undefined}\n            data-testid=\"migrate-to-cloud-configure-snapshot-build-snapshot-button\"\n          >\n            <Trans i18nKey=\"migrate-to-cloud.summary.start-migration\">Build snapshot</Trans>\n          </Button>\n\n          <Tooltip\n            content={\n              <Trans i18nKey=\"migrate-to-cloud.building-snapshot.description-eta\">\n                Creating a snapshot typically takes less than two minutes.\n              </Trans>\n            }\n            placement=\"right\"\n            interactive={true}\n          >\n            <Icon name=\"info-circle\" size=\"lg\" />\n          </Tooltip>\n        </Box>\n      </Stack>\n    </Stack>\n  );\n}\n","import { css } from '@emotion/css';\nimport { useId } from 'react';\nimport { SubmitHandler, useForm } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Modal, Button, Stack, TextLink, Field, Input, Text, useStyles2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { AlertWithTraceID } from 'app/features/migrate-to-cloud/shared/AlertWithTraceID';\n\nimport { CreateSessionApiArg } from '../../../api';\nimport { maybeAPIError } from '../../../api/errors';\n\ninterface Props {\n  isOpen: boolean;\n  isLoading: boolean;\n  error: unknown;\n  hideModal: () => void;\n  onConfirm: (connectStackData: CreateSessionApiArg) => Promise<unknown>;\n}\n\ninterface FormData {\n  token: string;\n}\n\nfunction getTMessage(messageId: string): string {\n  switch (messageId) {\n    case 'cloudmigrations.createMigration.tokenInvalid':\n      return t(\n        'migrate-to-cloud.connect-modal.token-errors.token-invalid',\n        'Token is not valid. Generate a new token on your cloud instance and try again.'\n      );\n    case 'cloudmigrations.createMigration.tokenRequestError':\n      return t(\n        'migrate-to-cloud.connect-modal.token-errors.token-request-error',\n        'An error occurred while validating the token. Please check the Grafana instance logs.'\n      );\n    case 'cloudmigrations.createMigration.tokenValidationFailure':\n      return t(\n        'migrate-to-cloud.connect-modal.token-errors.token-validation-failure',\n        'Token is not valid. Please ensure the token matches the migration token on your cloud instance.'\n      );\n    case 'cloudmigrations.createMigration.instanceUnreachable':\n      return t(\n        'migrate-to-cloud.connect-modal.token-errors.instance-unreachable',\n        'The cloud instance cannot be reached. Make sure the instance is running and try again.'\n      );\n    case 'cloudmigrations.createMigration.instanceRequestError':\n      return t(\n        'migrate-to-cloud.connect-modal.token-errors.instance-request-error',\n        \"An error occurred while attempting to verify the cloud instance's connectivity. Please check the network settings or cloud instance status.\"\n      );\n    case 'cloudmigrations.createMigration.sessionCreationFailure':\n      return t(\n        'migrate-to-cloud.connect-modal.token-errors.session-creation-failure',\n        'There was an error creating the migration. Please try again.'\n      );\n    case 'cloudmigrations.createMigration.migrationDisabled':\n      return t(\n        'migrate-to-cloud.connect-modal.token-errors.migration-disabled',\n        'Cloud migrations are disabled on this instance.'\n      );\n    default:\n      return t(\n        'migrate-to-cloud.connect-modal.token-errors.token-not-saved',\n        'There was an error saving the token. See the Grafana server logs for more details.'\n      );\n  }\n}\n\nexport const ConnectModal = ({ isOpen, isLoading, error, hideModal, onConfirm }: Props) => {\n  const tokenId = useId();\n  const styles = useStyles2(getStyles);\n\n  const {\n    handleSubmit,\n    register,\n    formState: { errors },\n    watch,\n  } = useForm<FormData>({\n    defaultValues: {\n      token: '',\n    },\n  });\n\n  const token = watch('token');\n\n  const onConfirmConnect: SubmitHandler<FormData> = (formData) => {\n    onConfirm({\n      cloudMigrationSessionRequestDto: {\n        authToken: formData.token,\n      },\n    }).then((resp) => {\n      const didError = typeof resp === 'object' && resp && 'error' in resp;\n      if (!didError) {\n        hideModal();\n      }\n    });\n  };\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={t('migrate-to-cloud.connect-modal.title', 'Connect to a cloud stack')}\n      onDismiss={hideModal}\n    >\n      <form onSubmit={handleSubmit(onConfirmConnect)}>\n        <Text color=\"secondary\">\n          <Stack direction=\"column\" gap={2}>\n            <Trans i18nKey=\"migrate-to-cloud.connect-modal.body-get-started\">\n              To get started, you&apos;ll need a Grafana.com account.\n            </Trans>\n\n            <div>\n              <TextLink href=\"https://grafana.com/auth/sign-up/create-user?pg=prod-cloud\" external>\n                {t('migrate-to-cloud.connect-modal.body-sign-up', 'Sign up for a Grafana.com account')}\n              </TextLink>\n            </div>\n\n            <Trans i18nKey=\"migrate-to-cloud.connect-modal.body-cloud-stack\">\n              You&apos;ll also need a cloud stack. If you just signed up, we&apos;ll automatically create your first\n              stack. If you have an account, you&apos;ll need to select or create a stack.\n            </Trans>\n\n            <div>\n              <TextLink href=\"https://grafana.com/auth/sign-in/\" external>\n                {t('migrate-to-cloud.connect-modal.body-view-stacks', 'View my cloud stacks')}\n              </TextLink>\n            </div>\n\n            <div>\n              <Trans i18nKey=\"migrate-to-cloud.connect-modal.body-token\">\n                Your self-managed Grafana installation needs special access to securely migrate content. You&apos;ll\n                need to create a migration token on your chosen cloud stack.\n              </Trans>\n            </div>\n\n            <div>\n              <Trans i18nKey=\"migrate-to-cloud.connect-modal.body-token-instructions\">\n                Log into your cloud stack and navigate to Administration &gt; General &gt; Migrate to Grafana Cloud.\n                Create a migration token on that screen and paste the token here.\n              </Trans>\n            </div>\n\n            {error ? (\n              <AlertWithTraceID\n                error={error}\n                severity=\"error\"\n                title={t('migrate-to-cloud.connect-modal.token-error-title', 'Error saving token')}\n              >\n                <Text element=\"p\">\n                  {getTMessage(maybeAPIError(error)?.messageId || '') ||\n                    'There was an error saving the token. See the Grafana server logs for more details.'}\n                </Text>\n              </AlertWithTraceID>\n            ) : undefined}\n\n            <Field\n              className={styles.field}\n              invalid={!!errors.token}\n              error={errors.token?.message}\n              label={t('migrate-to-cloud.connect-modal.body-token-field', 'Migration token')}\n              required\n            >\n              <Input\n                {...register('token', {\n                  required: t('migrate-to-cloud.connect-modal.token-required-error', 'Migration token is required'),\n                })}\n                id={tokenId}\n                placeholder={t('migrate-to-cloud.connect-modal.body-token-field-placeholder', 'Paste token here')}\n                data-testid=\"migrate-to-cloud-connect-session-modal-token-input\"\n              />\n            </Field>\n          </Stack>\n        </Text>\n\n        <Modal.ButtonRow>\n          <Button variant=\"secondary\" onClick={hideModal}>\n            <Trans i18nKey=\"migrate-to-cloud.connect-modal.cancel\">Cancel</Trans>\n          </Button>\n          <Button\n            type=\"submit\"\n            disabled={isLoading || !token}\n            data-testid=\"migrate-to-cloud-connect-session-modal-connect-button\"\n          >\n            {isLoading\n              ? t('migrate-to-cloud.connect-modal.connecting', 'Connecting to this stack...')\n              : t('migrate-to-cloud.connect-modal.connect', 'Connect to this stack')}\n          </Button>\n        </Modal.ButtonRow>\n      </form>\n    </Modal>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  field: css({\n    alignSelf: 'stretch',\n  }),\n});\n","import { useState } from 'react';\n\nimport { Box, Button, Text } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nimport { useCreateSessionMutation } from '../../../api';\n\nimport { ConnectModal } from './ConnectModal';\n\nexport const CallToAction = () => {\n  const [modalOpen, setModalOpen] = useState(false);\n  const [createMigration, createMigrationResponse] = useCreateSessionMutation();\n\n  return (\n    <>\n      <Box display=\"flex\" gap={2} direction=\"column\" alignItems=\"center\" backgroundColor=\"secondary\">\n        <Text variant=\"h3\" textAlignment=\"center\">\n          <Trans i18nKey=\"migrate-to-cloud.cta.header\">Let us manage your Grafana stack</Trans>\n        </Text>\n\n        <Button\n          data-testid=\"migrate-to-cloud-connect-session-modal-button\"\n          disabled={createMigrationResponse.isLoading}\n          onClick={() => setModalOpen(true)}\n        >\n          <Trans i18nKey=\"migrate-to-cloud.cta.button\">Migrate this instance to Cloud</Trans>\n        </Button>\n      </Box>\n\n      <ConnectModal\n        isOpen={modalOpen}\n        isLoading={createMigrationResponse.isLoading}\n        error={createMigrationResponse.error}\n        onConfirm={createMigration}\n        hideModal={() => setModalOpen(false)}\n      />\n    </>\n  );\n};\n","import { Stack } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { InfoItem } from '../../shared/InfoItem';\n\nexport const InfoPaneLeft = () => {\n  return (\n    <Stack gap={4} direction=\"column\">\n      <InfoItem\n        title={t('migrate-to-cloud.what-is-cloud.title', 'What is Grafana Cloud?')}\n        linkTitle={t('migrate-to-cloud.what-is-cloud.link-title', 'Learn about cloud features')}\n        linkHref=\"https://grafana.com/products/cloud\"\n      >\n        <Trans i18nKey=\"migrate-to-cloud.what-is-cloud.body\">\n          Grafana cloud is a fully managed cloud-hosted observability platform ideal for cloud native environments.\n          It&apos;s everything you love about Grafana without the overhead of maintaining, upgrading, and supporting an\n          installation.\n        </Trans>\n      </InfoItem>\n\n      <InfoItem\n        title={t('migrate-to-cloud.why-host.title', 'Why host with Grafana?')}\n        linkTitle={t('migrate-to-cloud.why-host.link-title', 'More questions? Talk to an expert')}\n        linkHref=\"https://grafana.com/contact\"\n      >\n        <Trans i18nKey=\"migrate-to-cloud.why-host.body\">\n          In addition to the convenience of managed hosting, Grafana Cloud includes many cloud-exclusive features like\n          SLOs, incident management, machine learning, and powerful observability integrations.\n        </Trans>\n      </InfoItem>\n\n      <InfoItem\n        title={t('migrate-to-cloud.is-it-secure.title', 'Is it secure?')}\n        linkTitle={t('migrate-to-cloud.is-it-secure.link-title', 'Grafana Labs Trust Center')}\n        linkHref=\"https://trust.grafana.com\"\n      >\n        <Trans i18nKey=\"migrate-to-cloud.is-it-secure.body\">\n          Grafana Labs is committed to maintaining the highest standards of data privacy and security. By implementing\n          industry-standard security technologies and procedures, we help protect our customers&apos; data from\n          unauthorized access, use, or disclosure.\n        </Trans>\n      </InfoItem>\n    </Stack>\n  );\n};\n","import { Stack } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { InfoItem } from '../../shared/InfoItem';\n\nexport const InfoPaneRight = () => {\n  return (\n    <Stack gap={4} direction=\"column\">\n      <InfoItem\n        title={t('migrate-to-cloud.pdc.title', 'What if not all my data sources are on the public internet?')}\n        linkTitle={t('migrate-to-cloud.pdc.link-title', 'Learn about PDC')}\n        linkHref=\"https://grafana.com/docs/grafana-cloud/connect-externally-hosted/private-data-source-connect\"\n      >\n        <Trans i18nKey=\"migrate-to-cloud.pdc.body\">\n          Exposing your data sources to the internet can raise security concerns. Private data source connect (PDC)\n          allows Grafana Cloud to access your existing data sources over a secure network tunnel.\n        </Trans>\n      </InfoItem>\n      <InfoItem\n        title={t('migrate-to-cloud.pricing.title', 'How much does it cost?')}\n        linkTitle={t('migrate-to-cloud.pricing.link-title', 'Grafana Cloud pricing')}\n        linkHref=\"https://grafana.com/pricing\"\n      >\n        <Trans i18nKey=\"migrate-to-cloud.pricing.body\">\n          Grafana Cloud has a generous free plan and a 14 day unlimited usage trial. After your trial expires,\n          you&apos;ll be billed based on usage over the free plan limits.\n        </Trans>\n      </InfoItem>\n      <InfoItem\n        title={t('migrate-to-cloud.can-i-move.title', 'Where can I learn more about migrating to Grafana Cloud?')}\n        linkTitle={t('migrate-to-cloud.can-i-move.link-title', 'Learn about migrating to Grafana Cloud')}\n        linkHref=\"https://grafana.com/docs/grafana-cloud/account-management/migration-guide\"\n      >\n        <Trans i18nKey=\"migrate-to-cloud.can-i-move.body\">\n          You can use the migration assistant to migrate a large proportion of your Grafana resources.\n        </Trans>\n      </InfoItem>\n    </Stack>\n  );\n};\n","import { Box, Grid, Stack } from '@grafana/ui';\n\nimport { CallToAction } from './CallToAction/CallToAction';\nimport { InfoPaneLeft } from './InfoPaneLeft';\nimport { InfoPaneRight } from './InfoPaneRight';\n\nexport const EmptyState = () => {\n  return (\n    <Box backgroundColor=\"secondary\" display=\"flex\" alignItems=\"center\" direction=\"column\">\n      <Box maxWidth={180} paddingY={6} paddingX={2}>\n        <Stack gap={5} direction=\"column\">\n          <CallToAction />\n\n          <Grid\n            alignItems=\"flex-start\"\n            gap={4}\n            columns={{\n              xs: 1,\n              lg: 2,\n            }}\n          >\n            <InfoPaneLeft />\n            <InfoPaneRight />\n          </Grid>\n        </Stack>\n      </Box>\n    </Box>\n  );\n};\n","import { ReactNode } from 'react';\n\nimport { Box, Text } from '@grafana/ui';\n\ninterface MigrationInfoProps {\n  title: NonNullable<ReactNode>;\n  children: NonNullable<ReactNode>;\n}\n\nexport function MigrationInfo({ title, children }: MigrationInfoProps) {\n  return (\n    <Box minWidth={{ xs: 0, xxl: 16 }} display=\"flex\" direction=\"column\">\n      <Text variant=\"bodySmall\" color=\"secondary\">\n        {title}\n      </Text>\n      <Text variant=\"h4\">{children}</Text>\n    </Box>\n  );\n}\n","import { Box, Button, Switch, Space, Stack, Text } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { formatDate } from 'app/core/internationalization/dates';\n\nimport { GetSessionApiResponse, GetSnapshotResponseDto } from '../api';\n\nimport { MigrationInfo } from './MigrationInfo';\n\ninterface MigrationSummaryProps {\n  snapshot: GetSnapshotResponseDto | undefined;\n  session: GetSessionApiResponse;\n  isBusy: boolean;\n\n  disconnectIsLoading: boolean;\n  onDisconnect: () => void;\n\n  showUploadSnapshot: boolean;\n  uploadSnapshotIsLoading: boolean;\n  onUploadSnapshot: () => void;\n\n  showRebuildSnapshot: boolean;\n  onRebuildSnapshot: () => void;\n\n  onHighlightErrors: () => void;\n  isHighlightErrors: boolean;\n  showOnlyErrorsSwitch: boolean;\n}\n\nconst DATE_FORMAT: Intl.DateTimeFormatOptions = {\n  dateStyle: 'medium',\n  timeStyle: 'short',\n};\n\nexport function MigrationSummary(props: MigrationSummaryProps) {\n  const {\n    session,\n    snapshot,\n    isBusy,\n    disconnectIsLoading,\n    onDisconnect,\n\n    showUploadSnapshot,\n    uploadSnapshotIsLoading,\n    onUploadSnapshot,\n\n    showRebuildSnapshot,\n    onRebuildSnapshot,\n\n    isHighlightErrors,\n    onHighlightErrors,\n    showOnlyErrorsSwitch,\n  } = props;\n\n  const totalCount = snapshot?.stats?.total ?? 0;\n  const errorCount = snapshot?.stats?.statuses?.['ERROR'] ?? 0;\n  const successCount = snapshot?.stats?.statuses?.['OK'] ?? 0;\n  const warningCount = snapshot?.stats?.statuses?.['WARNING'] ?? 0;\n\n  const switchLabel = t('migrate-to-cloud.summary.show-errors', 'Only view errors');\n\n  return (\n    <Box\n      borderColor=\"weak\"\n      borderStyle=\"solid\"\n      padding={2}\n      display=\"flex\"\n      gap={4}\n      alignItems=\"center\"\n      justifyContent=\"space-between\"\n    >\n      <Stack gap={4} wrap>\n        <MigrationInfo title={t('migrate-to-cloud.summary.snapshot-date', 'Snapshot timestamp')}>\n          {snapshot?.created ? (\n            formatDate(snapshot.created, DATE_FORMAT)\n          ) : (\n            <Text color=\"secondary\">\n              <Trans i18nKey=\"migrate-to-cloud.summary.snapshot-not-created\">Not yet created</Trans>\n            </Text>\n          )}\n        </MigrationInfo>\n\n        <MigrationInfo title={t('migrate-to-cloud.summary.total-resource-count', 'Total resources')}>\n          {totalCount}\n        </MigrationInfo>\n\n        <MigrationInfo title={t('migrate-to-cloud.summary.successful-resource-count', 'Successfully migrated')}>\n          {successCount + warningCount}\n        </MigrationInfo>\n\n        <MigrationInfo title={t('migrate-to-cloud.summary.errored-resource-count', 'Errors')}>\n          <Stack direction=\"row\" alignItems=\"center\">\n            {errorCount}\n            <Space h={1} layout=\"inline\" />\n            {showOnlyErrorsSwitch && (\n              <Stack>\n                <Switch label={switchLabel} value={isHighlightErrors} onChange={onHighlightErrors} />\n                <Text variant=\"bodySmall\" color=\"secondary\">\n                  {switchLabel}\n                </Text>\n              </Stack>\n            )}\n          </Stack>\n        </MigrationInfo>\n\n        <MigrationInfo title={t('migrate-to-cloud.summary.target-stack-title', 'Uploading to')}>\n          {session.slug}\n          <Space h={1} layout=\"inline\" />\n          <Button\n            disabled={isBusy}\n            onClick={onDisconnect}\n            variant=\"secondary\"\n            size=\"sm\"\n            icon={disconnectIsLoading ? 'spinner' : undefined}\n            data-testid=\"migrate-to-cloud-summary-disconnect-button\"\n          >\n            <Trans i18nKey=\"migrate-to-cloud.summary.disconnect\">Disconnect</Trans>\n          </Button>\n        </MigrationInfo>\n      </Stack>\n\n      <Stack gap={2} wrap justifyContent=\"flex-end\">\n        {showRebuildSnapshot && (\n          <Button\n            disabled={isBusy || uploadSnapshotIsLoading}\n            onClick={onRebuildSnapshot}\n            variant=\"secondary\"\n            data-testid=\"migrate-to-cloud-summary-reconfigure-snapshot-button\"\n          >\n            <Trans i18nKey=\"migrate-to-cloud.summary.rebuild-snapshot\">Reconfigure snapshot</Trans>\n          </Button>\n        )}\n\n        {showUploadSnapshot && (\n          <Button\n            disabled={isBusy || uploadSnapshotIsLoading}\n            onClick={onUploadSnapshot}\n            icon={uploadSnapshotIsLoading ? 'spinner' : undefined}\n            data-testid=\"migrate-to-cloud-summary-upload-snapshot-button\"\n          >\n            <Trans i18nKey=\"migrate-to-cloud.summary.upload-migration\">Upload snapshot</Trans>\n          </Button>\n        )}\n      </Stack>\n    </Box>\n  );\n}\n","import { css } from '@emotion/css';\nimport { useMemo } from 'react';\nimport Skeleton from 'react-loading-skeleton';\n\nimport { DataSourceInstanceSettings } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { CellProps, Stack, Text, Icon, useStyles2 } from '@grafana/ui';\nimport { getSvgSize } from '@grafana/ui/internal';\nimport { Trans } from 'app/core/internationalization';\nimport { useGetFolderQuery } from 'app/features/browse-dashboards/api/browseDashboardsAPI';\n\nimport { LocalPlugin } from '../../plugins/admin/types';\nimport { useGetDashboardByUidQuery, useGetLibraryElementByUidQuery } from '../api';\n\nimport { iconNameForResource } from './resourceInfo';\nimport { ResourceTableItem } from './types';\n\nexport function NameCell(props: CellProps<ResourceTableItem>) {\n  const data = props.row.original;\n\n  return (\n    <Stack direction=\"row\" gap={2} alignItems=\"center\">\n      <ResourceIcon resource={data} />\n\n      <Stack direction=\"column\" gap={0}>\n        <ResourceInfo data={data} />\n      </Stack>\n    </Stack>\n  );\n}\n\nfunction ResourceInfo({ data }: { data: ResourceTableItem }) {\n  switch (data.type) {\n    case 'DASHBOARD':\n      return <DashboardInfo data={data} />;\n    case 'DATASOURCE':\n      return <DatasourceInfo data={data} />;\n    case 'FOLDER':\n      return <FolderInfo data={data} />;\n    case 'LIBRARY_ELEMENT':\n      return <LibraryElementInfo data={data} />;\n    // Starting from 11.4.x, new resources have both `name` and optionally a `parentName`, so we can use this catch-all component.\n    default:\n      return <BasicResourceInfo data={data} />;\n  }\n}\n\nfunction DatasourceInfo({ data }: { data: ResourceTableItem }) {\n  const datasourceUID = data.refId;\n  const datasource = useDatasource(datasourceUID);\n\n  if (!datasource) {\n    return (\n      <>\n        <Text>\n          <Trans i18nKey=\"migrate-to-cloud.resource-table.unknown-datasource-title\">\n            Data source {{ datasourceUID }}\n          </Trans>\n        </Text>\n        <Text color=\"secondary\">\n          <Trans i18nKey=\"migrate-to-cloud.resource-table.unknown-datasource-type\">Unknown data source</Trans>\n        </Text>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <span>{datasource.name}</span>\n      <Text color=\"secondary\">{datasource.type}</Text>\n    </>\n  );\n}\n\nfunction getTitleFromDashboardJSON(dashboardData: object | undefined): string | null {\n  if (dashboardData && 'title' in dashboardData && typeof dashboardData.title === 'string') {\n    return dashboardData.title;\n  }\n\n  return null;\n}\n\nfunction DashboardInfo({ data }: { data: ResourceTableItem }) {\n  const dashboardUID = data.refId;\n  const skipApiCall = !!data.name && !!data.parentName;\n  const {\n    data: dashboardData,\n    isLoading,\n    isError,\n  } = useGetDashboardByUidQuery({ uid: dashboardUID }, { skip: skipApiCall });\n\n  const dashboardName = data.name || getTitleFromDashboardJSON(dashboardData?.dashboard) || dashboardUID;\n  const dashboardParentName = data.parentName || dashboardData?.meta?.folderTitle || 'Dashboards';\n\n  if (isError) {\n    return (\n      <>\n        <Text italic>\n          <Trans i18nKey=\"migrate-to-cloud.resource-table.dashboard-load-error\">Unable to load dashboard</Trans>\n        </Text>\n        <Text color=\"secondary\">Dashboard {dashboardUID}</Text>\n      </>\n    );\n  }\n\n  if (isLoading) {\n    return <InfoSkeleton />;\n  }\n\n  return (\n    <>\n      <span>{dashboardName}</span>\n      <Text color=\"secondary\">{dashboardParentName}</Text>\n    </>\n  );\n}\n\nfunction FolderInfo({ data }: { data: ResourceTableItem }) {\n  const folderUID = data.refId;\n  const skipApiCall = !!data.name && !!data.parentName;\n\n  const { data: folderData, isLoading, isError } = useGetFolderQuery(folderUID, { skip: skipApiCall });\n\n  const folderName = data.name || folderData?.title;\n  const folderParentName = data.parentName || folderData?.parents?.[folderData.parents.length - 1]?.title;\n\n  if (isError) {\n    return (\n      <>\n        <Text italic>\n          <Trans i18nKey=\"migrate-to-cloud.folder-info.unable-to-load-folder\">Unable to load folder</Trans>\n        </Text>\n        <Text color=\"secondary\">Folder {data.refId}</Text>\n      </>\n    );\n  }\n\n  if (isLoading) {\n    return <InfoSkeleton />;\n  }\n\n  return (\n    <>\n      <span>{folderName}</span>\n      <Text color=\"secondary\">{folderParentName ?? 'Dashboards'}</Text>\n    </>\n  );\n}\n\nfunction LibraryElementInfo({ data }: { data: ResourceTableItem }) {\n  const uid = data.refId;\n  const skipApiCall = !!data.name && !!data.parentName;\n\n  const {\n    data: libraryElementData,\n    isError,\n    isLoading,\n  } = useGetLibraryElementByUidQuery({ libraryElementUid: uid }, { skip: skipApiCall });\n\n  const name = data.name || libraryElementData?.result?.name || uid;\n  const parentName = data.parentName || libraryElementData?.result?.meta?.folderName || 'General';\n\n  if (isError) {\n    return (\n      <>\n        <Text italic>\n          <Trans i18nKey=\"migrate-to-cloud.resource-table.error-library-element-title\">\n            Unable to load library element\n          </Trans>\n        </Text>\n\n        <Text color=\"secondary\">\n          <Trans i18nKey=\"migrate-to-cloud.resource-table.error-library-element-sub\">Library Element {uid}</Trans>\n        </Text>\n      </>\n    );\n  }\n\n  if (isLoading) {\n    return <InfoSkeleton />;\n  }\n\n  return (\n    <>\n      <span>{name}</span>\n      <Text color=\"secondary\">{parentName}</Text>\n    </>\n  );\n}\n\nfunction InfoSkeleton() {\n  return (\n    <>\n      <Skeleton width={250} />\n      <Skeleton width={130} />\n    </>\n  );\n}\n\nfunction BasicResourceInfo({ data }: { data: ResourceTableItem }) {\n  return (\n    <>\n      <span>{data.name}</span>\n      {data.parentName && <Text color=\"secondary\">{data.parentName}</Text>}\n    </>\n  );\n}\n\nfunction ResourceIcon({ resource }: { resource: ResourceTableItem }) {\n  const styles = useStyles2(getIconStyles);\n  const datasource = useDatasource(resource.type === 'DATASOURCE' ? resource.refId : undefined);\n  const pluginLogo = usePluginLogo(resource.type === 'PLUGIN' ? resource.plugin : undefined);\n\n  // Handle special cases for icons.\n  if (resource.type === 'DATASOURCE' && datasource?.meta?.info?.logos?.small) {\n    return <img className={styles.icon} src={datasource.meta.info.logos.small} alt=\"\" />;\n  } else if (resource.type === 'PLUGIN' && pluginLogo) {\n    return <img className={styles.icon} src={pluginLogo} alt=\"\" />;\n  } else {\n    // Generic icons for all other resource types.\n    const iconName = iconNameForResource(resource.type);\n    if (iconName) {\n      return <Icon size=\"xl\" name={iconName} />;\n    }\n  }\n\n  return undefined;\n}\n\nfunction getIconStyles() {\n  return {\n    icon: css({\n      display: 'block',\n      width: getSvgSize('xl'),\n      height: getSvgSize('xl'),\n    }),\n  };\n}\n\nfunction useDatasource(datasourceUID: string | undefined): DataSourceInstanceSettings | undefined {\n  const datasource = useMemo(() => {\n    if (!datasourceUID) {\n      return undefined;\n    }\n\n    return (\n      config.datasources[datasourceUID] || Object.values(config.datasources).find((ds) => ds.uid === datasourceUID)\n    );\n  }, [datasourceUID]);\n\n  return datasource;\n}\n\nfunction usePluginLogo(plugin: LocalPlugin | undefined): string | undefined {\n  const logos = useMemo(() => {\n    if (!plugin) {\n      return undefined;\n    }\n    return plugin?.info?.logos;\n  }, [plugin]);\n\n  return logos?.small;\n}\n","import { CellProps } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { ResourceTableItem } from './types';\n\nexport function prettyTypeName(type: ResourceTableItem['type']) {\n  switch (type) {\n    case 'DATASOURCE':\n      return t('migrate-to-cloud.resource-type.datasource', 'Data source');\n    case 'DASHBOARD':\n      return t('migrate-to-cloud.resource-type.dashboard', 'Dashboard');\n    case 'FOLDER':\n      return t('migrate-to-cloud.resource-type.folder', 'Folder');\n    case 'LIBRARY_ELEMENT':\n      return t('migrate-to-cloud.resource-type.library_element', 'Library Element');\n    case 'MUTE_TIMING':\n      return t('migrate-to-cloud.resource-type.mute_timing', 'Mute Timing');\n    case 'NOTIFICATION_TEMPLATE':\n      return t('migrate-to-cloud.resource-type.notification_template', 'Notification Template');\n    case 'CONTACT_POINT':\n      return t('migrate-to-cloud.resource-type.contact_point', 'Contact Point');\n    case 'NOTIFICATION_POLICY':\n      return t('migrate-to-cloud.resource-type.notification_policy', 'Notification Policy');\n    case 'ALERT_RULE':\n      return t('migrate-to-cloud.resource-type.alert_rule', 'Alert Rule');\n    case 'ALERT_RULE_GROUP':\n      return t('migrate-to-cloud.resource-type.alert_rule_group', 'Alert Rule Group');\n    case 'PLUGIN':\n      return t('migrate-to-cloud.resource-type.plugin', 'Plugin');\n    default:\n      return t('migrate-to-cloud.resource-type.unknown', 'Unknown');\n  }\n}\n\nexport function TypeCell(props: CellProps<ResourceTableItem>) {\n  const { type } = props.row.original;\n  return <>{prettyTypeName(type)}</>;\n}\n","import { Button, Modal, Stack, Text } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { MigrateDataResponseItemDto } from '../api';\n\nimport { prettyTypeName } from './TypeCell';\nimport { ResourceTableItem } from './types';\n\ninterface ResourceDetailsModalProps {\n  resource: ResourceTableItem | undefined;\n  onClose: () => void;\n}\n\nfunction getTMessage(errorCode: MigrateDataResponseItemDto['errorCode']): string {\n  switch (errorCode) {\n    case 'DATASOURCE_NAME_CONFLICT':\n      return t(\n        'migrate-to-cloud.resource-details.error-messages.datasource-name-conflict',\n        'There is a data source with the same name in the target instance. Rename one of them and try again.'\n      );\n    case 'DATASOURCE_INVALID_URL':\n      return t(\n        'migrate-to-cloud.resource-details.error-messages.datasource-invalid-url',\n        'There is a data source which has an invalid URL. Provide a valid URL and try again.'\n      );\n    case 'DATASOURCE_ALREADY_MANAGED':\n      return t(\n        'migrate-to-cloud.resource-details.error-messages.datasource-already-managed',\n        'Data source is already provisioned and managed by Grafana in the cloud instance. If this is a different resource, set another UID and try again.'\n      );\n    case 'FOLDER_NAME_CONFLICT':\n      return t(\n        'migrate-to-cloud.resource-details.error-messages.folder-name-conflict',\n        'There is a folder with the same name in the target instance. Rename one of them and try again.'\n      );\n    case 'DASHBOARD_ALREADY_MANAGED':\n      return t(\n        'migrate-to-cloud.resource-details.error-messages.dashboard-already-managed',\n        'Dashboard is already provisioned and managed by Grafana in the cloud instance. We recommend using the provisioned dashboard going forward. If you still wish to copy the dashboard to the cloud instance, then change the dashboard ID in the dashboard JSON, save a new snapshot and upload again.'\n      );\n    case 'LIBRARY_ELEMENT_NAME_CONFLICT':\n      return t(\n        'migrate-to-cloud.resource-details.error-messages.library-element-name-conflict',\n        'There is a library element with the same name in the target instance. Rename one of them and try again.'\n      );\n    case 'UNSUPPORTED_DATA_TYPE':\n      return t(\n        'migrate-to-cloud.resource-details.error-messages.unsupported-data-type',\n        'Migration of this data type is not currently supported.'\n      );\n    case 'RESOURCE_CONFLICT':\n      return t(\n        'migrate-to-cloud.resource-details.error-messages.resource-conflict',\n        'There is a resource conflict with the target instance. Please check the Grafana server logs for more details.'\n      );\n    case 'UNEXPECTED_STATUS_CODE':\n      return t(\n        'migrate-to-cloud.resource-details.error-messages.unexpected-error',\n        'There has been an error while migrating. Please check the Grafana server logs for more details.'\n      );\n    case 'INTERNAL_SERVICE_ERROR':\n      return t(\n        'migrate-to-cloud.resource-details.error-messages.internal-service-error',\n        'There has been an error while migrating. Please check the Grafana server logs for more details.'\n      );\n    case 'GENERIC_ERROR':\n      return t(\n        'migrate-to-cloud.resource-details.error-messages.generic-error',\n        'There has been an error while migrating. Please check the cloud migration logs for more information.'\n      );\n    // Handle new errors here\n    default:\n      return '';\n  }\n}\n\nexport function ResourceDetailsModal(props: ResourceDetailsModalProps) {\n  const { resource, onClose } = props;\n\n  const refId = resource?.refId;\n  const typeName = resource && prettyTypeName(resource.type);\n  const hasError = resource?.errorCode || resource?.message;\n\n  let msgTitle = t('migrate-to-cloud.resource-details.generic-title', 'Resource migration details:');\n  if (resource?.status === 'ERROR') {\n    msgTitle = t('migrate-to-cloud.resource-details.error-title', 'Unable to migrate this resource:');\n  } else if (resource?.status === 'WARNING') {\n    msgTitle = t('migrate-to-cloud.resource-details.warning-title', 'Resource migrated with a warning:');\n  }\n\n  return (\n    <Modal\n      title={t('migrate-to-cloud.resource-details.title', 'Migration resource details')}\n      isOpen={Boolean(resource)}\n      onDismiss={onClose}\n    >\n      {resource && (\n        <Stack direction=\"column\" gap={2} alignItems=\"flex-start\">\n          <Text element=\"p\" weight=\"bold\">\n            <Trans i18nKey=\"migrate-to-cloud.resource-details.resource-summary\">\n              {{ refId }} ({{ typeName }})\n            </Trans>\n          </Text>\n\n          {hasError ? (\n            <>\n              <Text element=\"p\">{msgTitle}</Text>\n              <Text element=\"p\">\n                {getTMessage(resource?.errorCode) ||\n                  resource?.message ||\n                  'There has been an error while migrating. Please check the cloud migration logs for more information.'}\n              </Text>\n            </>\n          ) : (\n            <Text element=\"p\">\n              <Trans i18nKey=\"migrate-to-cloud.resource-details.missing-message\">No message provided.</Trans>\n            </Text>\n          )}\n\n          <Button onClick={onClose}>\n            <Trans i18nKey=\"migrate-to-cloud.resource-details.dismiss-button\">OK</Trans>\n          </Button>\n        </Stack>\n      )}\n    </Modal>\n  );\n}\n","import { CellProps, Text, Stack, Button } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { ResourceTableItem } from './types';\n\nexport function StatusCell(props: CellProps<ResourceTableItem>) {\n  const item = props.row.original;\n\n  // Keep these here to preserve the translations\n  // t('migrate-to-cloud.resource-status.migrating', 'Uploading...')\n\n  if (item.status === 'PENDING') {\n    return <Text color=\"secondary\">{t('migrate-to-cloud.resource-status.not-migrated', 'Not yet uploaded')}</Text>;\n  } else if (item.status === 'OK') {\n    return <Text color=\"success\">{t('migrate-to-cloud.resource-status.migrated', 'Uploaded to cloud')}</Text>;\n  } else if (item.status === 'WARNING') {\n    return <WarningCell item={item} />;\n  } else if (item.status === 'ERROR') {\n    return <ErrorCell item={item} />;\n  }\n\n  return <Text color=\"secondary\">{t('migrate-to-cloud.resource-status.unknown', 'Unknown')}</Text>;\n}\n\nfunction ErrorCell({ item }: { item: ResourceTableItem }) {\n  return (\n    <Stack alignItems=\"center\">\n      <Text color=\"error\">{t('migrate-to-cloud.resource-status.failed', 'Error')}</Text>\n\n      {item.message && (\n        <Button size=\"sm\" variant=\"secondary\" onClick={() => item.showDetails(item)}>\n          {t('migrate-to-cloud.resource-status.error-details-button', 'Details')}\n        </Button>\n      )}\n    </Stack>\n  );\n}\n\nfunction WarningCell({ item }: { item: ResourceTableItem }) {\n  return (\n    <Stack alignItems=\"center\">\n      <Text color=\"warning\">{t('migrate-to-cloud.resource-status.warning', 'Uploaded with warning')}</Text>\n\n      {item.message && (\n        <Button size=\"sm\" variant=\"secondary\" onClick={() => item.showDetails(item)}>\n          {t('migrate-to-cloud.resource-status.warning-details-button', 'Details')}\n        </Button>\n      )}\n    </Stack>\n  );\n}\n","import { useCallback, useMemo, useState } from 'react';\n\nimport { InteractiveTable, Pagination, Stack, Column, type FetchDataFunc } from '@grafana/ui';\n\nimport { LocalPlugin } from '../../plugins/admin/types';\nimport { MigrateDataResponseItemDto } from '../api';\n\nimport { NameCell } from './NameCell';\nimport { ResourceDetailsModal } from './ResourceDetailsModal';\nimport { StatusCell } from './StatusCell';\nimport { TypeCell } from './TypeCell';\nimport { ResourceTableItem } from './types';\n\nexport interface ResourcesTableProps {\n  resources: MigrateDataResponseItemDto[];\n  localPlugins: LocalPlugin[];\n  page: number;\n  numberOfPages: number;\n  onChangePage: (page: number) => void;\n  onChangeSort: FetchDataFunc<ResourceTableItem>;\n}\n\nconst columns: Array<Column<ResourceTableItem>> = [\n  { id: 'name', header: 'Name', cell: NameCell, sortType: 'alphanumeric' },\n  { id: 'resource_type', header: 'Type', cell: TypeCell, sortType: 'alphanumeric' },\n  { id: 'status', header: 'Status', cell: StatusCell, sortType: 'alphanumeric' },\n];\n\nexport function ResourcesTable({\n  resources,\n  localPlugins,\n  numberOfPages = 0,\n  onChangePage,\n  onChangeSort,\n  page = 1,\n}: ResourcesTableProps) {\n  const initialSortBy = useMemo(() => [{ id: 'resource_type', desc: true }], []);\n  const [focusedResource, setfocusedResource] = useState<ResourceTableItem | undefined>();\n\n  const handleShowDetailsModal = useCallback((resource: ResourceTableItem) => {\n    setfocusedResource(resource);\n  }, []);\n\n  const data = useMemo(() => {\n    return resources.map((r) => {\n      const plugin = getPlugin(r, localPlugins);\n\n      return {\n        ...r,\n        showDetails: handleShowDetailsModal,\n        plugin: plugin,\n      };\n    });\n  }, [resources, handleShowDetailsModal, localPlugins]);\n\n  return (\n    <>\n      <Stack alignItems=\"flex-end\" direction=\"column\">\n        <InteractiveTable\n          columns={columns}\n          data={data}\n          getRowId={(r) => r.refId}\n          fetchData={onChangeSort}\n          initialSortBy={initialSortBy}\n        ></InteractiveTable>\n\n        <Pagination numberOfPages={numberOfPages} currentPage={page} onNavigate={onChangePage} />\n      </Stack>\n\n      <ResourceDetailsModal resource={focusedResource} onClose={() => setfocusedResource(undefined)} />\n    </>\n  );\n}\n\nfunction getPlugin(\n  r: MigrateDataResponseItemDto | undefined,\n  plugins: LocalPlugin[] | undefined\n): LocalPlugin | undefined {\n  if (!r || !plugins || r.type !== 'PLUGIN') {\n    return undefined;\n  }\n\n  return plugins.find((plugin) => plugin.id === r.refId);\n}\n","import { ReactNode } from 'react';\n\nimport { Stack, Box, Text } from '@grafana/ui';\n\ninterface CTAInfoProps {\n  title: NonNullable<ReactNode>;\n  accessory?: ReactNode;\n  children: ReactNode;\n}\n\nexport function CTAInfo(props: CTAInfoProps) {\n  const { title, accessory, children } = props;\n\n  return (\n    <Box maxWidth={44} display=\"flex\" direction=\"row\" gap={1} alignItems=\"flex-start\">\n      {accessory && <Box>{accessory}</Box>}\n\n      <Stack gap={2} direction=\"column\" alignItems=\"flex-start\">\n        <Text element=\"h3\" variant=\"h5\">\n          {title}\n        </Text>\n\n        {children}\n      </Stack>\n    </Box>\n  );\n}\n","import { Button, Icon, Spinner, Text } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { CTAInfo } from './CTAInfo';\n\ninterface SnapshotCTAProps {\n  disabled: boolean;\n  isLoading: boolean;\n  onClick: () => void;\n}\n\n// TODO: this can be removed with the new configuration flow merged.\nexport function BuildSnapshotCTA(props: SnapshotCTAProps) {\n  const { disabled, isLoading, onClick } = props;\n\n  return (\n    <CTAInfo\n      title={t('migrate-to-cloud.build-snapshot.title', 'No snapshot exists')}\n      accessory={<Icon name=\"cog\" size=\"lg\" />}\n    >\n      <Text element=\"p\" variant=\"body\" color=\"secondary\">\n        <Trans i18nKey=\"migrate-to-cloud.build-snapshot.description\">\n          This tool can migrate some resources from this installation to your cloud stack. To get started, you&apos;ll\n          need to create a snapshot of this installation. Creating a snapshot typically takes less than two minutes. The\n          snapshot is stored alongside this Grafana installation.\n        </Trans>\n      </Text>\n\n      <Text element=\"p\" variant=\"body\" color=\"secondary\">\n        <Trans i18nKey=\"migrate-to-cloud.build-snapshot.when-complete\">\n          Once the snapshot is complete, you will be able to upload it to your cloud stack.\n        </Trans>\n      </Text>\n\n      <Button\n        disabled={disabled}\n        onClick={onClick}\n        icon={isLoading ? 'spinner' : undefined}\n        data-testid=\"migrate-to-cloud-configure-snapshot-build-snapshot-button\"\n      >\n        <Trans i18nKey=\"migrate-to-cloud.summary.start-migration\">Build snapshot</Trans>\n      </Button>\n    </CTAInfo>\n  );\n}\n\nexport function CreatingSnapshotCTA(props: SnapshotCTAProps) {\n  const { disabled, isLoading, onClick } = props;\n\n  return (\n    <CTAInfo title={t('migrate-to-cloud.building-snapshot.title', 'Building snapshot')} accessory={<Spinner inline />}>\n      <Text element=\"p\" variant=\"body\" color=\"secondary\">\n        <Trans i18nKey=\"migrate-to-cloud.building-snapshot.description\">\n          We&apos;re gathering your resources for migration to Grafana Cloud. This should only take a moment.\n        </Trans>\n      </Text>\n\n      <Button disabled={disabled} onClick={onClick} icon={isLoading ? 'spinner' : undefined} variant=\"secondary\">\n        <Trans i18nKey=\"migrate-to-cloud.summary.cancel-snapshot\">Cancel snapshot</Trans>\n      </Button>\n    </CTAInfo>\n  );\n}\n","import { Text, TextLink } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nexport function SupportedTypesDisclosure() {\n  return (\n    <Text color=\"secondary\" textAlignment=\"center\">\n      <Trans i18nKey=\"migrate-to-cloud.support-types-disclosure.text\">\n        Resources are copied to your Grafana Cloud stack.{' '}\n        <TextLink\n          external\n          href=\"https://grafana.com/docs/grafana-cloud/security-and-account-management/migration-guide/\"\n        >\n          Learn more\n        </TextLink>{' '}\n        about the full set of supported resources and migrating other settings.\n      </Trans>\n    </Text>\n  );\n}\n","import { useRef, useEffect } from 'react';\n\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { t } from 'app/core/internationalization';\n\nimport { GetSnapshotResponseDto, SnapshotDto } from '../api';\n\nimport { pluralizeResourceName } from './resourceInfo';\nimport { ResourceTableItem } from './types';\n\n// After the number of distinct resource types migrated exceeeds this value, we display a generic success message.\nconst SUCCESS_MESSAGE_ITEM_TYPES_THRESHOLD = 4;\n\nexport function useNotifySuccessful(snapshot: GetSnapshotResponseDto | undefined) {\n  const previousStatusRef = useRef<SnapshotDto['status']>(undefined);\n  const notifyApp = useAppNotification();\n\n  useEffect(() => {\n    const status = snapshot?.status;\n    const didJustFinish =\n      previousStatusRef.current !== 'FINISHED' && previousStatusRef.current !== undefined && status === 'FINISHED';\n\n    previousStatusRef.current = status; // must be AFTER the check above\n\n    if (!didJustFinish) {\n      return;\n    }\n\n    if (snapshot) {\n      const title = t('migrate-to-cloud.onprem.success-title', 'Migration completed!');\n      const message = getTranslatedMessage(snapshot);\n\n      notifyApp.success(title, message);\n    }\n  }, [notifyApp, snapshot]);\n}\n\nfunction getTranslatedMessage(snapshot: GetSnapshotResponseDto) {\n  const types: string[] = [];\n\n  let distinctItems = 0;\n\n  for (const [type, count] of Object.entries(snapshot.stats?.types ?? {})) {\n    if (count <= 0) {\n      continue;\n    }\n\n    // We don't have per-resource status counts, so there's no way to accurately pluralize these\n    // so we just don't :)\n    const resourceType = pluralizeResourceName(type as ResourceTableItem['type']);\n    if (!resourceType) {\n      continue;\n    }\n\n    types.push(resourceType);\n\n    distinctItems += 1;\n  }\n\n  const successCount = snapshot?.stats?.statuses?.['OK'] ?? 0;\n\n  if (distinctItems > SUCCESS_MESSAGE_ITEM_TYPES_THRESHOLD) {\n    return t(\n      'migrate-to-cloud.onprem.success-message-generic',\n      'Successfully migrated {{successCount}} resources to your Grafana Cloud instance.',\n      { successCount }\n    );\n  }\n\n  return t(\n    'migrate-to-cloud.onprem.success-message',\n    'Successfully migrated {{successCount}} {{types, list}} to your Grafana Cloud instance.',\n    { successCount, types }\n  );\n}\n","import { skipToken } from '@reduxjs/toolkit/query/react';\nimport { useCallback, useEffect, useState } from 'react';\n\nimport { config } from '@grafana/runtime';\nimport { AlertVariant, Box, Stack, Text } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport {\n  GetSnapshotResponseDto,\n  SnapshotDto,\n  useCancelSnapshotMutation,\n  useCreateSnapshotMutation,\n  useDeleteSessionMutation,\n  useGetResourceDependenciesQuery,\n  useGetSessionListQuery,\n  useGetShapshotListQuery,\n  useGetSnapshotQuery,\n  useUploadSnapshotMutation,\n  useGetLocalPluginListQuery,\n} from '../api';\nimport { maybeAPIError } from '../api/errors';\nimport { AlertWithTraceID } from '../shared/AlertWithTraceID';\n\nimport { ConfigureSnapshot } from './ConfigureSnapshot';\nimport { EmptyState } from './EmptyState/EmptyState';\nimport { MigrationSummary } from './MigrationSummary';\nimport { ResourcesTable } from './ResourcesTable';\nimport { CreatingSnapshotCTA } from './SnapshotCTAs';\nimport { SupportedTypesDisclosure } from './SupportedTypesDisclosure';\nimport { ResourceTableItem } from './types';\nimport { useNotifySuccessful } from './useNotifyOnSuccess';\n\n/**\n * Here's how migrations work:\n *\n * A single on-prem instance can be configured to be migrated to multiple cloud instances. We call these 'sessions'.\n *  - GetSessionList returns this the list of migration targets for the on prem instance\n *  - If GetMigrationList returns an empty list, then an empty state to prompt for token should be shown\n *  - The UI (at the moment) only shows the most recently created migration target (the last one returned from the API)\n *    and doesn't allow for others to be created\n *\n * A single on-prem migration 'target' (CloudMigrationSession) can have multiple snapshots.\n * A snapshot represents a copy of all migratable resources at a fixed point in time.\n * A snapshots are created asynchronously in the background, so GetSnapshot must be polled to get the current status.\n *\n * After a snapshot has been created, it will be PENDING_UPLOAD. UploadSnapshot is then called which asynchronously\n * uploads and migrates the snapshot to the cloud instance.\n */\n\nfunction useGetLatestSession() {\n  const result = useGetSessionListQuery();\n  const latestMigration = result.data?.sessions?.at(-1);\n\n  return {\n    ...result,\n    data: latestMigration,\n  };\n}\n\nconst SHOULD_POLL_STATUSES: Array<SnapshotDto['status']> = [\n  'INITIALIZING',\n  'CREATING',\n  'UPLOADING',\n  'PENDING_PROCESSING',\n  'PROCESSING',\n];\n\nconst PAGE_SIZE = 50;\n\nfunction useGetLatestSnapshot(sessionUid?: string, page = 1, sortParams?: SortParams, showErrors = false) {\n  const [shouldPoll, setShouldPoll] = useState(false);\n\n  const listResult = useGetShapshotListQuery(\n    sessionUid ? { uid: sessionUid, page: 1, limit: 1, sort: 'latest' } : skipToken\n  );\n  const lastItem = listResult.currentData?.snapshots?.at(0);\n\n  const getSnapshotQueryArgs =\n    sessionUid && lastItem?.uid\n      ? {\n          uid: sessionUid,\n          snapshotUid: lastItem.uid,\n          resultLimit: PAGE_SIZE,\n          resultPage: page,\n          resultSortColumn: sortParams?.column ? sortParams.column : undefined,\n          resultSortOrder: sortParams?.order,\n          errorsOnly: showErrors,\n        }\n      : skipToken;\n\n  const snapshotResult = useGetSnapshotQuery(getSnapshotQueryArgs, {\n    pollingInterval: shouldPoll ? config.cloudMigrationPollIntervalMs : 0,\n    skipPollingIfUnfocused: true,\n  });\n\n  const isError = listResult.isError || snapshotResult.isError;\n\n  useEffect(() => {\n    const shouldPoll = !isError && SHOULD_POLL_STATUSES.includes(snapshotResult.data?.status);\n    setShouldPoll(shouldPoll);\n  }, [snapshotResult?.data?.status, isError]);\n\n  return {\n    ...snapshotResult,\n\n    // RTK Query will retain old data if a new request has been skipped.\n    // This meant that if you loaded a snapshot, disconnected, and then reconnected, we would\n    // show the old snapshot.\n    // This ensures that if the query has been skipped (because GetSessionList returned nothing)\n    // we don't return stale data\n    data: getSnapshotQueryArgs === skipToken ? undefined : snapshotResult.data,\n\n    error: listResult.error || snapshotResult.error,\n\n    // isSuccess and isUninitialised should always be from snapshotResult\n    // as only the 'final' values from those are important\n    isError,\n    isLoading: listResult.isLoading || snapshotResult.isLoading,\n    isFetching: listResult.isFetching || snapshotResult.isFetching,\n  };\n}\n\ninterface SortParams {\n  column: string;\n  order: string | undefined;\n}\n\nexport const Page = () => {\n  const [page, setPage] = useState(1);\n  const [sortParams, setSortParams] = useState<SortParams>({\n    column: '',\n    order: undefined,\n  });\n  const [highlightErrors, setHighlightErrors] = useState(false);\n\n  const { data: resourceDependencies = { resourceDependencies: [] } } = useGetResourceDependenciesQuery();\n  const [reconfiguring, setReconfiguring] = useState(false);\n  const [lastSnapshotUid, setLastSnapshotUid] = useState<string | undefined>(undefined);\n\n  const [performCreateSnapshot, createSnapshotResult] = useCreateSnapshotMutation();\n  const [performUploadSnapshot, uploadSnapshotResult] = useUploadSnapshotMutation();\n  const [performCancelSnapshot, cancelSnapshotResult] = useCancelSnapshotMutation();\n  const [performDisconnect, disconnectResult] = useDeleteSessionMutation();\n\n  const { currentData: localPlugins = [] } = useGetLocalPluginListQuery();\n\n  const session = useGetLatestSession();\n  const snapshot = useGetLatestSnapshot(session.data?.uid, page, sortParams, highlightErrors);\n  const numPages = Math.ceil(\n    (highlightErrors ? snapshot?.data?.stats?.statuses?.['ERROR'] || 0 : snapshot?.data?.stats?.total || 0) / PAGE_SIZE\n  );\n  useEffect(() => {\n    if (numPages > 0 && page > numPages) {\n      setPage(numPages);\n    }\n  }, [numPages, page]);\n\n  const [uiState, setUiState] = useState<'loading' | 'configure' | 'building' | 'built' | 'uploading' | 'uploaded'>(\n    'loading'\n  );\n\n  useNotifySuccessful(snapshot.data);\n\n  const sessionUid = session.data?.uid;\n  const snapshotUid = snapshot.data?.uid;\n  const snapshotStatus = snapshot.data?.status;\n\n  // isBusy is not a loading state, but indicates that the system is doing *something* and all buttons should be disabled.\n  const isBusy =\n    createSnapshotResult.isLoading ||\n    uploadSnapshotResult.isLoading ||\n    cancelSnapshotResult.isLoading ||\n    session.isLoading ||\n    snapshot.isLoading ||\n    disconnectResult.isLoading;\n\n  // Because we don't delete the previous snapshot if it exists, we need to keep track of the last snapshot.\n  // When reconfiguring a snapshot, we need to pause the state machine until a new snapshot is created.\n  // Reconfiguration is triggered by the user clicking the \"Reconfigure snapshot\" button at the end of the migration.\n  useEffect(() => {\n    if (\n      reconfiguring &&\n      lastSnapshotUid !== snapshot.data?.uid &&\n      createSnapshotResult.isSuccess &&\n      createSnapshotResult.data?.uid\n    ) {\n      setLastSnapshotUid(createSnapshotResult.data.uid);\n      setReconfiguring(false);\n    }\n  }, [\n    createSnapshotResult.isSuccess,\n    createSnapshotResult.data?.uid,\n    lastSnapshotUid,\n    snapshot.data?.uid,\n    setLastSnapshotUid,\n    setReconfiguring,\n    reconfiguring,\n  ]);\n\n  // UI State Machine\n  useEffect(() => {\n    // If we don't have a session or the snapshot is still loading, don't do anything yet!\n    if (!sessionUid || snapshot.isLoading || snapshot.isFetching) {\n      return;\n    }\n\n    // When loading the page for the first time, we might already have a snapshot in a workable state.\n    if (uiState === 'loading') {\n      // Snapshot is being created.\n      if (snapshotStatus === 'CREATING') {\n        setUiState('building');\n        return;\n      }\n\n      // Ready to upload.\n      if (snapshotStatus === 'PENDING_UPLOAD') {\n        setUiState('built');\n        return;\n      }\n\n      // Snapshot is uploaded but still being processed by the backend.\n      if (['UPLOADING', 'PENDING_PROCESSING', 'PROCESSING'].includes(snapshotStatus ?? '')) {\n        setUiState('uploading');\n        return;\n      }\n\n      // Already uploaded with results, can reupload or reconfigure.\n      if (snapshotStatus === 'FINISHED') {\n        setUiState('uploaded');\n        return;\n      }\n\n      // Either the snapshot does not exist or is in an error state. In either case, we need to reconfigure.\n      if (!snapshotStatus || snapshotStatus === 'ERROR') {\n        setUiState('configure');\n        return;\n      }\n    }\n\n    // When the snapshot is being created, go to the building (spinner) state.\n    if (uiState === 'configure' && snapshotStatus === 'CREATING') {\n      setUiState('building');\n      return;\n    }\n\n    // When the snapshot has finished building, go to the built state (ready to upload + resource table \"not yet uploaded\").\n    // If we are reconfiguring, we pause the state machine until the new snapshot is actually set to PENDING_UPLOAD.\n    // That in turn will cause `reconfiguring` to be set to `false` which will resume the state machine.\n    if (!reconfiguring && uiState === 'building' && snapshotStatus === 'PENDING_UPLOAD') {\n      setUiState('built');\n      return;\n    }\n\n    // When the snapshot is being uploaded, go to the uploading state (spinner + resource table \"in progress\").\n    if (uiState === 'built' && (snapshotStatus === 'PROCESSING' || snapshotStatus === 'UPLOADING')) {\n      setUiState('uploading');\n      return;\n    }\n\n    // When the snapshot has finished uploading, go to the uploaded state (resource table \"success/error\").\n    if (uiState === 'uploading' && snapshotStatus === 'FINISHED') {\n      setUiState('uploaded');\n      return;\n    }\n\n    // Special case: if there's nothing to choose in the snapshot, go back to reconfiguring.\n    if (\n      !reconfiguring &&\n      (uiState === 'built' || uiState === 'uploaded') &&\n      snapshotStatus !== 'FINISHED' &&\n      (snapshot.data?.results?.length === 0 || snapshot.isUninitialized)\n    ) {\n      setReconfiguring(true);\n      setUiState('configure');\n      return;\n    }\n\n    // Error handling: if we are building a snapshot and there's an error, go back to the configure state.\n    // Also display the error in the UI.\n    if (uiState === 'building' && (createSnapshotResult.error || snapshot.isError)) {\n      setUiState('configure');\n      return;\n    }\n\n    // Error handling: if we are uploading a snapshot and there's an error, force move to the uploaded state.\n    // Also display the error in the UI, so the user can reconfigure it.\n    if (uiState === 'uploading' && (uploadSnapshotResult.error || snapshotStatus === 'ERROR')) {\n      setUiState('uploaded');\n      return;\n    }\n  }, [\n    sessionUid,\n    snapshotStatus,\n    snapshot.isLoading,\n    snapshot.isFetching,\n    snapshot.isUninitialized,\n    snapshot.isError,\n    setReconfiguring,\n    setUiState,\n    uiState,\n    reconfiguring,\n    snapshot.data?.results?.length,\n    createSnapshotResult.error,\n    uploadSnapshotResult.error,\n  ]);\n\n  const error = getError({\n    snapshot: snapshot.data,\n    getSnapshotError: snapshot.error,\n    getSessionError: session.error,\n    createSnapshotError: createSnapshotResult.error,\n    uploadSnapshotError: uploadSnapshotResult.error,\n    cancelSnapshotError: cancelSnapshotResult.error,\n    disconnectSnapshotError: disconnectResult.error,\n  });\n\n  // Action Callbacks\n  const handleCreateSnapshot = useCallback(\n    (resourceTypes: Array<ResourceTableItem['type']>) => {\n      if (sessionUid) {\n        setUiState('building');\n\n        performCreateSnapshot({\n          uid: sessionUid,\n          createSnapshotRequestDto: {\n            resourceTypes,\n          },\n        });\n      }\n    },\n    [performCreateSnapshot, sessionUid]\n  );\n\n  const handleUploadSnapshot = useCallback(() => {\n    if (sessionUid && snapshotUid) {\n      performUploadSnapshot({ uid: sessionUid, snapshotUid: snapshotUid });\n    }\n  }, [performUploadSnapshot, sessionUid, snapshotUid]);\n\n  const handleRebuildSnapshot = useCallback(() => {\n    if (sessionUid && snapshotUid) {\n      setReconfiguring(true);\n      setUiState('configure');\n    }\n  }, [setUiState, setReconfiguring, sessionUid, snapshotUid]);\n\n  const handleCancelSnapshot = useCallback(() => {\n    if (sessionUid && snapshotUid) {\n      setUiState('configure');\n\n      performCancelSnapshot({ uid: sessionUid, snapshotUid: snapshotUid });\n    }\n  }, [performCancelSnapshot, setUiState, sessionUid, snapshotUid]);\n\n  const handleDisconnect = useCallback(async () => {\n    if (sessionUid) {\n      setUiState('loading');\n\n      performDisconnect({ uid: sessionUid });\n    }\n  }, [performDisconnect, setUiState, sessionUid]);\n\n  // Component Rendering\n  if (session.isLoading) {\n    return (\n      <div>\n        <Trans i18nKey=\"migrate-to-cloud.summary.page-loading\">Loading...</Trans>\n      </div>\n    );\n  } else if (!session.data) {\n    return <EmptyState />;\n  }\n\n  return (\n    <>\n      <Stack direction=\"column\" gap={2}>\n        <MigrationSummary\n          session={session.data}\n          snapshot={snapshot.data}\n          isBusy={isBusy}\n          disconnectIsLoading={disconnectResult.isLoading}\n          onDisconnect={handleDisconnect}\n          showUploadSnapshot={['built', 'uploading'].includes(uiState)}\n          uploadSnapshotIsLoading={uploadSnapshotResult.isLoading || uiState === 'uploading'}\n          onUploadSnapshot={handleUploadSnapshot}\n          showRebuildSnapshot={['built', 'uploading', 'uploaded'].includes(uiState)}\n          onRebuildSnapshot={handleRebuildSnapshot}\n          onHighlightErrors={() => setHighlightErrors(!highlightErrors)}\n          isHighlightErrors={highlightErrors}\n          showOnlyErrorsSwitch={['uploading', 'uploaded'].includes(uiState)}\n        />\n\n        {(['built', 'uploaded'].includes(uiState) || !!createSnapshotResult?.error) && error && (\n          <AlertWithTraceID severity={error.severity} title={error.title} error={error.error}>\n            <Text element=\"p\">{error.body}</Text>\n          </AlertWithTraceID>\n        )}\n\n        {uiState === 'configure' && (\n          <ConfigureSnapshot\n            disabled={isBusy}\n            isLoading={isBusy}\n            onClick={handleCreateSnapshot}\n            resourceDependencies={resourceDependencies.resourceDependencies || []}\n          />\n        )}\n\n        {uiState === 'building' && (\n          <Box display=\"flex\" justifyContent=\"center\" paddingY={10}>\n            <CreatingSnapshotCTA\n              disabled={isBusy}\n              isLoading={cancelSnapshotResult.isLoading}\n              onClick={handleCancelSnapshot}\n            />\n          </Box>\n        )}\n\n        {['built', 'uploading', 'uploaded'].includes(uiState) &&\n          snapshot.data?.results &&\n          snapshot.data?.results.length > 0 && (\n            <Stack gap={4} direction=\"column\">\n              <ResourcesTable\n                resources={snapshot.data.results}\n                localPlugins={localPlugins}\n                onChangePage={setPage}\n                numberOfPages={numPages}\n                page={page}\n                onChangeSort={(a) => {\n                  const order = a.sortBy[0]?.desc === undefined ? undefined : a.sortBy[0]?.desc ? 'desc' : 'asc';\n                  if (sortParams.column !== a.sortBy[0]?.id || order !== sortParams.order) {\n                    setSortParams({\n                      column: a.sortBy[0]?.id,\n                      order: order,\n                    });\n                  }\n                }}\n              />\n              <SupportedTypesDisclosure />\n            </Stack>\n          )}\n      </Stack>\n    </>\n  );\n};\n\ninterface GetErrorProps {\n  snapshot: GetSnapshotResponseDto | undefined;\n  getSessionError: unknown; // From getLatestSessionQuery\n  getSnapshotError: unknown; // From getLatestSnapshotQuery\n  createSnapshotError: unknown; // From createSnapshotMutation\n  uploadSnapshotError: unknown; // From uploadSnapshotMutation\n  cancelSnapshotError: unknown; // From cancelSnapshotMutation\n  disconnectSnapshotError: unknown; // From disconnectMutation\n}\n\ninterface ErrorDescription {\n  title: string;\n  body: string;\n  severity: AlertVariant;\n  error?: unknown;\n}\n\nfunction getError(props: GetErrorProps): ErrorDescription | undefined {\n  const {\n    snapshot,\n    getSnapshotError,\n    getSessionError,\n    createSnapshotError,\n    uploadSnapshotError,\n    cancelSnapshotError,\n    disconnectSnapshotError,\n  } = props;\n\n  const seeLogs = t('migrate-to-cloud.onprem.error-see-server-logs', 'See the Grafana server logs for more details');\n\n  if (getSessionError) {\n    return {\n      severity: 'error',\n      title: t('migrate-to-cloud.onprem.get-session-error-title', 'Error loading migration configuration'),\n      body: seeLogs,\n      error: getSessionError,\n    };\n  }\n\n  if (getSnapshotError) {\n    return {\n      severity: 'error',\n      title: t('migrate-to-cloud.onprem.get-snapshot-error-title', 'Error loading snapshot'),\n      body: seeLogs,\n      error: getSnapshotError,\n    };\n  }\n\n  if (disconnectSnapshotError) {\n    return {\n      severity: 'warning',\n      title: t('migrate-to-cloud.onprem.disconnect-error-title', 'Error disconnecting'),\n      body: seeLogs,\n      error: disconnectSnapshotError,\n    };\n  }\n\n  if (createSnapshotError) {\n    return handleCreateSnapshotError(createSnapshotError, seeLogs);\n  }\n\n  if (uploadSnapshotError) {\n    return {\n      severity: 'warning',\n      title: t('migrate-to-cloud.onprem.upload-snapshot-error-title', 'Error uploading snapshot'),\n      body: seeLogs,\n      error: uploadSnapshotError,\n    };\n  }\n\n  if (cancelSnapshotError) {\n    return {\n      severity: 'warning',\n      title: t('migrate-to-cloud.onprem.cancel-snapshot-error-title', 'Error cancelling creating snapshot'),\n      body: seeLogs,\n      error: cancelSnapshotError,\n    };\n  }\n\n  if (snapshot?.status === 'ERROR') {\n    return {\n      severity: 'warning',\n      title: t('migrate-to-cloud.onprem.snapshot-error-status-title', 'Error migrating resources'),\n      body: t(\n        'migrate-to-cloud.onprem.snapshot-error-status-body',\n        'There was an error creating the snapshot or starting the migration process. See the Grafana server logs for more details'\n      ),\n    };\n  }\n\n  const errorCount = snapshot?.stats?.statuses?.['ERROR'] ?? 0;\n  const warningCount = snapshot?.stats?.statuses?.['WARNING'] ?? 0;\n  if (snapshot?.status === 'FINISHED' && errorCount + warningCount > 0) {\n    let msgBody = '';\n\n    // If there are any errors, that's the most pressing info. If there are no errors but warnings, show the warning text instead.\n    if (errorCount > 0) {\n      msgBody = t(\n        'migrate-to-cloud.onprem.migration-finished-with-errors-body',\n        'The migration has completed, but some items could not be migrated to the cloud stack. Check the failed resources for more details.'\n      );\n    } else if (warningCount > 0) {\n      msgBody = t(\n        'migrate-to-cloud.onprem.migration-finished-with-warnings-body',\n        'The migration has completed with some warnings. Check individual resources for more details'\n      );\n    }\n\n    return {\n      severity: 'warning',\n      title: t('migrate-to-cloud.onprem.migration-finished-with-caveat-title', 'Resource migration complete'),\n      body: msgBody,\n    };\n  }\n\n  return undefined;\n}\n\nfunction handleCreateSnapshotError(createSnapshotError: unknown, seeLogs: string): ErrorDescription | undefined {\n  const apiError = maybeAPIError(createSnapshotError);\n\n  let severity: AlertVariant = 'warning';\n  let body = null;\n\n  switch (apiError?.messageId) {\n    case 'cloudmigrations.emptyResourceTypes':\n      severity = 'error';\n      body = t(\n        'migrate-to-cloud.onprem.create-snapshot-error-empty-resource-types',\n        'You need to provide at least one resource type for snapshot creation'\n      );\n      break;\n\n    case 'cloudmigrations.unknownResourceType':\n      severity = 'error';\n      body = t(\n        'migrate-to-cloud.onprem.create-snapshot-error-unknown-resource-type',\n        'Unknown resource type. See the Grafana server logs for more details'\n      );\n      break;\n\n    case 'cloudmigrations.duplicateResourceType':\n      severity = 'error';\n      body = t(\n        'migrate-to-cloud.onprem.create-snapshot-error-duplicate-resource-type',\n        'Duplicate resource type. See the Grafana server logs for more details'\n      );\n      break;\n\n    case 'cloudmigrations.missingDependency':\n      severity = 'error';\n      body = t(\n        'migrate-to-cloud.onprem.create-snapshot-error-missing-dependency',\n        'Missing dependency. See the Grafana server logs for more details'\n      );\n      break;\n  }\n\n  return {\n    severity,\n    title: t('migrate-to-cloud.onprem.create-snapshot-error-title', 'Error creating snapshot'),\n    body: body || seeLogs,\n    error: createSnapshotError,\n  };\n}\n","import { config } from '@grafana/runtime';\nimport { Page } from 'app/core/components/Page/Page';\n\nimport { Page as CloudPage } from './cloud/Page';\nimport { Page as OnPremPage } from './onprem/Page';\n\nexport default function MigrateToCloud() {\n  return <Page navId=\"migrate-to-cloud\">{config.cloudMigrationIsTarget ? <CloudPage /> : <OnPremPage />}</Page>;\n}\n"],"names":["InfoItem","children","title","linkHref","linkTitle","Stack","TextLink","InfoPane","MigrationStepsPane","styles","getStyles","Box","theme","maybeAPIError","err","data","message","messageId","statusCode","TokenErrorAlert","Alert","CreateTokenModal","isOpen","hideModal","migrationToken","Modal","TokenSuccessContent","ClipboardButton","inputId","Field","Input","DeleteTokenConfirmationModal","props","hasError","onConfirm","onDismiss","body","ConfirmModal","TokenStatus","hasToken","errorMessageId","isFetching","MigrationTokenPane","showCreateModal","setShowCreateModal","showDeleteModal","setShowDeleteModal","getTokenQuery","createTokenMutation","createTokenResponse","deleteTokenMutation","deleteTokenResponse","getTokenQueryError","isLoading","handleGenerateToken","handleDeleteToken","AlertWithTraceID","error","rest","traceID","maybeGetTraceID","buildDependencyMaps","resourceDependencies","dependencyMap","dependentMap","dependency","resourceType","dependencies","dep","handleSelection","selectedTypes","resourceToSelect","result","selectWithDependencies","visited","handleDeselection","resourceToDeselect","processDeselection","iconNameForResource","resource","pluralizeResourceName","alertsSubResources","displayOrder","hasAllResourceTypes","resourceTypeOrder","resourceTypes","type","ConfigureSnapshot","disabled","onClick","setSelectedTypes","includeAll","setIncludeAll","handleIncludeAllChange","e","checked","handleTypeChange","id","updatedList","handleBuildSnapshot","Checkbox","Space","Tooltip","getTMessage","ConnectModal","tokenId","handleSubmit","register","errors","watch","token","onConfirmConnect","formData","resp","CallToAction","modalOpen","setModalOpen","createMigration","createMigrationResponse","InfoPaneLeft","InfoPaneRight","EmptyState","Grid","MigrationInfo","DATE_FORMAT","MigrationSummary","session","snapshot","isBusy","disconnectIsLoading","onDisconnect","showUploadSnapshot","uploadSnapshotIsLoading","onUploadSnapshot","showRebuildSnapshot","onRebuildSnapshot","isHighlightErrors","onHighlightErrors","showOnlyErrorsSwitch","totalCount","errorCount","successCount","warningCount","switchLabel","Switch","NameCell","ResourceIcon","ResourceInfo","DashboardInfo","DatasourceInfo","FolderInfo","LibraryElementInfo","BasicResourceInfo","datasourceUID","datasource","useDatasource","getTitleFromDashboardJSON","dashboardData","dashboardUID","skipApiCall","isError","dashboardName","dashboardParentName","InfoSkeleton","folderUID","folderData","folderName","folderParentName","uid","libraryElementData","name","parentName","getIconStyles","pluginLogo","usePluginLogo","iconName","config","ds","plugin","prettyTypeName","TypeCell","errorCode","ResourceDetailsModal","onClose","refId","typeName","msgTitle","StatusCell","item","WarningCell","ErrorCell","columns","ResourcesTable","resources","localPlugins","numberOfPages","onChangePage","onChangeSort","page","initialSortBy","focusedResource","setfocusedResource","handleShowDetailsModal","r","getPlugin","InteractiveTable","Pagination","plugins","accessory","BuildSnapshotCTA","CreatingSnapshotCTA","Spinner","SupportedTypesDisclosure","SUCCESS_MESSAGE_ITEM_TYPES_THRESHOLD","useNotifySuccessful","previousStatusRef","notifyApp","status","didJustFinish","getTranslatedMessage","types","distinctItems","count","useGetLatestSession","latestMigration","SHOULD_POLL_STATUSES","PAGE_SIZE","useGetLatestSnapshot","sessionUid","sortParams","showErrors","shouldPoll","setShouldPoll","listResult","lastItem","getSnapshotQueryArgs","snapshotResult","setPage","setSortParams","highlightErrors","setHighlightErrors","reconfiguring","setReconfiguring","lastSnapshotUid","setLastSnapshotUid","performCreateSnapshot","createSnapshotResult","performUploadSnapshot","uploadSnapshotResult","performCancelSnapshot","cancelSnapshotResult","performDisconnect","disconnectResult","numPages","uiState","setUiState","snapshotUid","snapshotStatus","getError","handleCreateSnapshot","handleUploadSnapshot","handleRebuildSnapshot","handleCancelSnapshot","handleDisconnect","a","order","getSnapshotError","getSessionError","createSnapshotError","uploadSnapshotError","cancelSnapshotError","disconnectSnapshotError","seeLogs","handleCreateSnapshotError","msgBody","apiError","severity","MigrateToCloud","Page"],"sourceRoot":""}