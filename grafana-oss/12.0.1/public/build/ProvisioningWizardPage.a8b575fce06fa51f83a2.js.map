{"version":3,"file":"ProvisioningWizardPage.a8b575fce06fa51f83a2.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/FormPrompt/FormPrompt.tsx","webpack://grafana/./public/app/core/components/FormPrompt/Prompt.tsx","webpack://grafana/./public/app/features/provisioning/Config/defaults.ts","webpack://grafana/./public/app/features/provisioning/Job/JobSummary.tsx","webpack://grafana/./public/app/features/provisioning/Shared/TokenPermissionsInfo.tsx","webpack://grafana/./public/app/features/provisioning/utils/getFormErrors.ts","webpack://grafana/./public/app/features/provisioning/Wizard/actions.ts","webpack://grafana/./public/app/features/provisioning/Wizard/BootstrapStep.tsx","webpack://grafana/./public/app/features/provisioning/Wizard/ConnectStep.tsx","webpack://grafana/./public/app/features/provisioning/Wizard/FinishStep.tsx","webpack://grafana/./public/app/features/provisioning/Wizard/Stepper.tsx","webpack://grafana/./public/app/features/provisioning/Repository/RepositoryLink.tsx","webpack://grafana/./public/app/features/provisioning/Shared/ProgressBar.tsx","webpack://grafana/./public/app/features/provisioning/Job/JobContent.tsx","webpack://grafana/./public/app/features/provisioning/Job/FinishedJobStatus.tsx","webpack://grafana/./public/app/features/provisioning/Job/JobStatus.tsx","webpack://grafana/./public/app/features/provisioning/Wizard/SynchronizeStep.tsx","webpack://grafana/./public/app/features/provisioning/Wizard/ProvisioningWizard.tsx","webpack://grafana/./public/app/features/provisioning/Wizard/ConnectPage.tsx","webpack://grafana/./public/app/features/provisioning/hooks/useCreateOrUpdateRepository.ts","webpack://grafana/./public/app/features/provisioning/utils/data.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport history from 'history';\nimport { useEffect, useState } from 'react';\nimport { Navigate } from 'react-router-dom-v5-compat';\n\nimport { Button, Modal } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { Prompt } from './Prompt';\n\nexport interface Props {\n  confirmRedirect?: boolean;\n  onDiscard: () => void;\n  /** Extra check to invoke when location changes.\n   * Could be useful in multistep forms where each step has a separate URL\n   */\n  onLocationChange?: (location: history.Location) => void;\n}\n\n/**\n * Component handling redirects when a form has unsaved changes.\n * Page reloads are handled in useEffect via beforeunload event.\n * URL navigation is handled by react-router's components since it does not trigger beforeunload event.\n */\nexport const FormPrompt = ({ confirmRedirect, onDiscard, onLocationChange }: Props) => {\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [blockedLocation, setBlockedLocation] = useState<history.Location | null>(null);\n  const [changesDiscarded, setChangesDiscarded] = useState(false);\n\n  useEffect(() => {\n    const onBeforeUnload = (e: BeforeUnloadEvent) => {\n      if (confirmRedirect) {\n        e.preventDefault();\n        e.returnValue = '';\n      }\n    };\n    window.addEventListener('beforeunload', onBeforeUnload);\n    return () => {\n      window.removeEventListener('beforeunload', onBeforeUnload);\n    };\n  }, [confirmRedirect]);\n\n  // Returning 'false' from this function will prevent navigation to the next URL\n  const handleRedirect = (location: history.Location) => {\n    // Do not show the unsaved changes modal if only the URL params have changed\n    const currentPath = window.location.pathname;\n    const nextPath = location.pathname;\n    if (currentPath === nextPath) {\n      return true;\n    }\n\n    const locationChangeCheck = onLocationChange?.(location);\n\n    let blockRedirect = confirmRedirect && !changesDiscarded;\n    if (locationChangeCheck !== undefined) {\n      blockRedirect = blockRedirect && locationChangeCheck;\n    }\n\n    if (blockRedirect) {\n      setModalIsOpen(true);\n      setBlockedLocation(location);\n      return false;\n    }\n\n    if (locationChangeCheck) {\n      onDiscard();\n    }\n\n    return true;\n  };\n\n  const onBackToForm = () => {\n    setModalIsOpen(false);\n    setBlockedLocation(null);\n  };\n\n  const onDiscardChanges = () => {\n    setModalIsOpen(false);\n    setChangesDiscarded(true);\n    onDiscard();\n  };\n\n  return (\n    <>\n      <Prompt when={true} message={handleRedirect} />\n      {blockedLocation && changesDiscarded && <Navigate replace to={blockedLocation} />}\n      <UnsavedChangesModal isOpen={modalIsOpen} onDiscard={onDiscardChanges} onBackToForm={onBackToForm} />\n    </>\n  );\n};\n\ninterface UnsavedChangesModalProps {\n  onDiscard: () => void;\n  onBackToForm: () => void;\n  isOpen: boolean;\n}\n\nconst UnsavedChangesModal = ({ onDiscard, onBackToForm, isOpen }: UnsavedChangesModalProps) => {\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={t('form-prompt.title', 'Leave page?')}\n      onDismiss={onBackToForm}\n      icon=\"exclamation-triangle\"\n      className={css({ width: '500px' })}\n    >\n      <h5>\n        <Trans i18nKey=\"form-prompt.description\">Changes that you made may not be saved.</Trans>\n      </h5>\n      <Modal.ButtonRow>\n        <Button variant=\"secondary\" onClick={onBackToForm} fill=\"outline\">\n          <Trans i18nKey=\"form-prompt.continue-button\">Continue editing</Trans>\n        </Button>\n        <Button variant=\"destructive\" onClick={onDiscard}>\n          <Trans i18nKey=\"form-prompt.discard-button\">Discard unsaved changes</Trans>\n        </Button>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n","import * as H from 'history';\nimport { useEffect } from 'react';\n\nimport { locationService } from '@grafana/runtime';\n\ninterface PromptProps {\n  when?: boolean;\n  message: string | ((location: H.Location) => string | boolean);\n}\n\nexport const Prompt = ({ message, when = true }: PromptProps) => {\n  const history = locationService.getHistory();\n\n  useEffect(() => {\n    if (!when) {\n      return undefined;\n    }\n    //@ts-expect-error TODO Update the history package to fix types\n    const unblock = history.block(message);\n\n    return () => {\n      unblock();\n    };\n  }, [when, message, history]);\n\n  return null;\n};\n","import { RepositorySpec } from '../../../api/clients/provisioning';\nimport { RepositoryFormData } from '../types';\nimport { specToData } from '../utils/data';\n\nexport function getDefaultValues(repository?: RepositorySpec): RepositoryFormData {\n  if (!repository) {\n    return {\n      type: 'github',\n      title: 'Repository',\n      token: '',\n      url: '',\n      branch: 'main',\n      generateDashboardPreviews: false,\n      readOnly: false,\n      prWorkflow: true,\n      path: 'grafana/',\n      sync: {\n        enabled: false,\n        target: 'instance',\n        intervalSeconds: 60,\n      },\n    };\n  }\n  return specToData(repository);\n}\n","import { InteractiveTable, Stack } from '@grafana/ui';\nimport { JobResourceSummary } from 'app/api/clients/provisioning';\n\ntype SummaryCell<T extends keyof JobResourceSummary = keyof JobResourceSummary> = {\n  row: {\n    original: JobResourceSummary;\n  };\n};\n\nconst getSummaryColumns = () => [\n  {\n    id: 'resource',\n    header: 'Resource',\n    cell: ({ row: { original: item } }: SummaryCell) => item.resource,\n  },\n  {\n    id: 'created',\n    header: 'Created',\n    cell: ({ row: { original: item } }: SummaryCell) => item.create?.toString() || '-',\n  },\n  {\n    id: 'deleted',\n    header: 'Deleted',\n    cell: ({ row: { original: item } }: SummaryCell) => item.delete?.toString() || '-',\n  },\n  {\n    id: 'updated',\n    header: 'Updated',\n    cell: ({ row: { original: item } }: SummaryCell) => item.update?.toString() || '-',\n  },\n  {\n    id: 'unchanged',\n    header: 'Unchanged',\n    cell: ({ row: { original: item } }: SummaryCell) => item.noop?.toString() || '-',\n  },\n  {\n    id: 'errors',\n    header: 'Errors',\n    cell: ({ row: { original: item } }: SummaryCell) => item.error?.toString() || '-',\n  },\n  {\n    id: 'total',\n    header: 'Total',\n    cell: ({ row: { original: item } }: SummaryCell) => {\n      const total = (item.create || 0) + (item.delete || 0) + (item.update || 0) + (item.noop || 0) + (item.error || 0);\n      return total.toString();\n    },\n  },\n];\n\ninterface Props {\n  summary: JobResourceSummary[];\n}\n\nexport function JobSummary({ summary }: Props) {\n  return (\n    <Stack direction=\"column\" gap={2}>\n      <InteractiveTable\n        data={summary}\n        columns={getSummaryColumns()}\n        getRowId={(item) => item.resource || ''}\n        pageSize={10}\n      />\n    </Stack>\n  );\n}\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack, TextLink, useStyles2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nexport function TokenPermissionsInfo() {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.container}>\n      {/* GitHub UI is English only, so these strings are not translated */}\n      {/* eslint-disable-next-line @grafana/no-untranslated-strings */}\n      <Stack gap={0.5} wrap={'wrap'}>\n        <Trans i18nKey=\"provisioning.token-permissions-info.go-to\">Go to</Trans>\n        <TextLink external href=\"https://github.com/settings/personal-access-tokens/new\">\n          GitHub Personal Access Tokens\n        </TextLink>\n        <Trans i18nKey=\"provisioning.token-permissions-info.and-click\">and click</Trans>\n        <strong>\"Fine-grained token\".</strong>\n        <Trans i18nKey=\"provisioning.token-permissions-info.make-sure\">Make sure to include these permissions</Trans>:\n      </Stack>\n\n      <ul className={styles.permissionsList}>\n        {/* eslint-disable-next-line @grafana/no-untranslated-strings */}\n        <li>\n          Content: <span className={styles.accessLevel}>Read and write</span>\n        </li>\n        {/* eslint-disable-next-line @grafana/no-untranslated-strings */}\n        <li>\n          Metadata: <span className={styles.accessLevel}>Read only</span>\n        </li>\n        {/* eslint-disable-next-line @grafana/no-untranslated-strings */}\n        <li>\n          Pull requests: <span className={styles.accessLevel}>Read and write</span>\n        </li>\n        {/* eslint-disable-next-line @grafana/no-untranslated-strings */}\n        <li>\n          Webhooks: <span className={styles.accessLevel}>Read and write</span>\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      marginBottom: theme.spacing(1),\n      position: 'relative',\n      width: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n      flex: '1 1 0',\n      padding: theme.spacing(theme.components.panel.padding),\n    }),\n    permissionsList: css({\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(1),\n      paddingLeft: theme.spacing(3),\n\n      li: css({\n        marginBottom: theme.spacing(1),\n      }),\n    }),\n    accessLevel: css({\n      fontFamily: theme.typography.fontFamilyMonospace,\n      background: '#22262B',\n      borderRadius: theme.shape.radius.default,\n      padding: theme.spacing(0.25, 0.5),\n    }),\n  };\n}\n","import { ErrorDetails } from 'app/api/clients/provisioning';\n\nimport { WizardFormData } from '../Wizard/types';\n\nexport type RepositoryField = keyof WizardFormData['repository'];\nexport type RepositoryFormPath = `repository.${RepositoryField}`;\nexport type FormErrorTuple = [RepositoryFormPath | null, { message: string } | null];\n\n/**\n * Maps API error details to form error fields for React Hook Form\n *\n * @param errors Array of error details from the API response\n * @returns Tuple with form field path and error message\n */\nexport const getFormErrors = (errors: ErrorDetails[]): FormErrorTuple => {\n  const fieldsToValidate = ['local.path', 'github.branch', 'github.url', 'github.token'];\n  const fieldMap: Record<string, RepositoryFormPath> = {\n    path: 'repository.path',\n    branch: 'repository.branch',\n    url: 'repository.url',\n    token: 'repository.token',\n  };\n\n  for (const error of errors) {\n    if (error.field) {\n      const cleanField = error.field.replace('spec.', '');\n      if (fieldsToValidate.includes(cleanField)) {\n        const fieldParts = cleanField.split('.');\n        const lastPart = fieldParts[fieldParts.length - 1];\n\n        if (lastPart in fieldMap) {\n          return [fieldMap[lastPart], { message: error.detail || `Invalid ${lastPart}` }];\n        }\n      }\n    }\n  }\n\n  return [null, null];\n};\n","import { useMemo } from 'react';\n\nimport {\n  GetRepositoryFilesApiResponse,\n  GetResourceStatsApiResponse,\n  RepositoryViewList,\n} from 'app/api/clients/provisioning';\nimport { t } from 'app/core/internationalization';\n\nimport { ModeOption } from './types';\n\n/**\n * Filters available mode options based on system state\n */\nfunction filterModeOptions(modeOptions: ModeOption[], repoName: string, settings?: RepositoryViewList): ModeOption[] {\n  const folderConnected = settings?.items?.some((item) => item.target === 'folder' && item.name !== repoName);\n\n  return modeOptions.filter((option) => {\n    if (settings?.legacyStorage) {\n      return option.target === 'instance';\n    }\n\n    if (option.target === 'folder') {\n      return true;\n    }\n\n    if (option.target === 'instance') {\n      return !folderConnected;\n    }\n\n    return false;\n  });\n}\n\n/**\n * Hook that provides filtered mode options\n * This needs to be a hook, so we can add translations\n */\nexport function useModeOptions(repoName: string, settings?: RepositoryViewList) {\n  return useMemo(() => {\n    const modeOptions: ModeOption[] = [\n      {\n        target: 'instance',\n        label: t('provisioning.mode-options.instance.label', 'Sync all resources with external storage'),\n        description: t(\n          'provisioning.mode-options.instance.description',\n          'Resources will be synced with external storage and provisioned into this instance. Existing Grafana resources will be migrated and merged if needed. After setup, all new resources and changes will be saved to external storage and automatically provisioned back into the instance.'\n        ),\n        subtitle: t(\n          'provisioning.mode-options.instance.subtitle',\n          'Use this option if you want to sync and manage your entire Grafana instance through external storage.'\n        ),\n      },\n      {\n        target: 'folder',\n        label: t('provisioning.mode-options.folder.label', 'Sync external storage to a new Grafana folder'),\n        description: t(\n          'provisioning.mode-options.folder.description',\n          'After setup, a new Grafana folder will be created and synced with external storage. If any resources are present in external storage, they will be provisioned to this new folder. All new resources created in this folder will be stored and versioned in external storage.'\n        ),\n        subtitle: t(\n          'provisioning.mode-options.folder.subtitle',\n          'Use this option to sync external resources into a new folder without affecting the rest of your instance. You can repeat this process for up to 10 folders.'\n        ),\n      },\n    ];\n\n    return filterModeOptions(modeOptions, repoName, settings);\n  }, [repoName, settings]);\n}\n\nexport function getResourceStats(files?: GetRepositoryFilesApiResponse, stats?: GetResourceStatsApiResponse) {\n  const fileCount =\n    files?.items?.reduce((count, file) => {\n      const path = file.path ?? '';\n      return path.endsWith('.json') || path.endsWith('.yaml') ? count + 1 : count;\n    }, 0) ?? 0;\n\n  let counts: string[] = [];\n  let resourceCount = 0;\n\n  stats?.instance?.forEach((stat) => {\n    switch (stat.group) {\n      case 'folders':\n      case 'folder.grafana.app':\n        resourceCount += stat.count;\n        counts.push(`${stat.count} ${stat.count > 1 ? 'folders' : 'folder'}`);\n        break;\n      case 'dashboard.grafana.app':\n        resourceCount += stat.count;\n        counts.push(`${stat.count} ${stat.count > 1 ? 'dashboards' : 'dashboard'}`);\n        break;\n    }\n  });\n\n  return {\n    fileCount,\n    resourceCount,\n    resourceCountString: counts.join(',\\n'),\n  };\n}\n","import { useEffect, useMemo } from 'react';\nimport { Controller, useFormContext } from 'react-hook-form';\n\nimport { Box, Card, Field, Input, LoadingPlaceholder, Stack, Text } from '@grafana/ui';\nimport { RepositoryViewList, useGetRepositoryFilesQuery, useGetResourceStatsQuery } from 'app/api/clients/provisioning';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { getResourceStats, useModeOptions } from './actions';\nimport { StepStatusInfo, WizardFormData } from './types';\n\ninterface Props {\n  onOptionSelect: (requiresMigration: boolean) => void;\n  onStepStatusUpdate: (info: StepStatusInfo) => void;\n  settingsData?: RepositoryViewList;\n  repoName: string;\n}\n\nexport function BootstrapStep({ onOptionSelect, settingsData, repoName, onStepStatusUpdate }: Props) {\n  const {\n    register,\n    control,\n    setValue,\n    watch,\n    getValues,\n    formState: { errors },\n  } = useFormContext<WizardFormData>();\n\n  const resourceStats = useGetResourceStatsQuery();\n  const filesQuery = useGetRepositoryFilesQuery({ name: repoName });\n  const selectedTarget = watch('repository.sync.target');\n  const options = useModeOptions(repoName, settingsData);\n  const { resourceCount, resourceCountString, fileCount } = useMemo(\n    () => getResourceStats(filesQuery.data, resourceStats.data),\n    [filesQuery.data, resourceStats.data]\n  );\n\n  useEffect(() => {\n    // Pick a name nice name based on type+settings\n    const repository = getValues('repository');\n    switch (repository.type) {\n      case 'github':\n        const name = repository.url ?? 'github';\n        setValue('repository.title', name.replace('https://github.com/', ''));\n        break;\n      case 'local':\n        setValue('repository.title', repository.path ?? 'local');\n        break;\n    }\n  }, [getValues, setValue]);\n\n  useEffect(() => {\n    const isLoading = resourceStats.isLoading || filesQuery.isLoading;\n    onStepStatusUpdate({ status: isLoading ? 'running' : 'idle' });\n  }, [filesQuery.isLoading, onStepStatusUpdate, resourceStats.isLoading]);\n\n  // Auto select the first option on mount\n  useEffect(() => {\n    const { target } = options[0];\n    setValue('repository.sync.target', target);\n    onOptionSelect(settingsData?.legacyStorage || resourceCount > 0);\n    // Only run this effect on mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (resourceStats.isLoading || filesQuery.isLoading) {\n    return (\n      <Box padding={4}>\n        <LoadingPlaceholder\n          text={t('provisioning.bootstrap-step.text-loading-resource-information', 'Loading resource information...')}\n        />\n      </Box>\n    );\n  }\n\n  return (\n    <Stack direction=\"column\" gap={2}>\n      <Stack direction=\"column\" gap={2}>\n        <Box alignItems=\"center\" padding={4}>\n          <Stack direction=\"row\" gap={4} alignItems=\"flex-start\" justifyContent=\"center\">\n            <Stack direction=\"column\" gap={1} alignItems=\"center\">\n              <Text color=\"secondary\">\n                <Trans i18nKey=\"provisioning.bootstrap-step.grafana\">Grafana instance</Trans>\n              </Text>\n              <Stack direction=\"row\" gap={2}>\n                <Text variant=\"h4\">\n                  {resourceCount > 0 ? resourceCountString : t('provisioning.bootstrap-step.empty', 'Empty')}\n                </Text>\n              </Stack>\n            </Stack>\n            <Stack direction=\"column\" gap={1} alignItems=\"center\">\n              <Text color=\"secondary\">\n                <Trans i18nKey=\"provisioning.bootstrap-step.ext-storage\">External storage</Trans>\n              </Text>\n              <Text variant=\"h4\">\n                {fileCount > 0\n                  ? t('provisioning.bootstrap-step.files-count', '{{count}} files', { count: fileCount })\n                  : t('provisioning.bootstrap-step.empty', 'Empty')}\n              </Text>\n            </Stack>\n          </Stack>\n        </Box>\n\n        <Controller\n          name=\"repository.sync.target\"\n          control={control}\n          render={({ field: { ref, onChange, ...field } }) => (\n            <>\n              {options.map((action, index) => (\n                <Card\n                  key={action.target}\n                  isSelected={action.target === selectedTarget}\n                  onClick={() => {\n                    onChange(action.target);\n                  }}\n                  {...field}\n                >\n                  <Card.Heading>{action.label}</Card.Heading>\n                  <Card.Description>\n                    <Stack direction=\"column\" gap={3}>\n                      {action.description}\n                      <Text color=\"primary\">{action.subtitle}</Text>\n                    </Stack>\n                  </Card.Description>\n                </Card>\n              ))}\n            </>\n          )}\n        />\n\n        {/* Only show title field if folder sync */}\n        {selectedTarget === 'folder' && (\n          <Field\n            label={t('provisioning.bootstrap-step.label-display-name', 'Display name')}\n            description={t(\n              'provisioning.bootstrap-step.description-clear-repository-connection',\n              'Add a clear name for this repository connection'\n            )}\n            error={errors.repository?.title?.message}\n            invalid={!!errors.repository?.title}\n            required\n          >\n            <Input\n              {...register('repository.title', {\n                required: t('provisioning.bootstrap-step.error-field-required', 'This field is required.'),\n              })}\n              placeholder={t(\n                'provisioning.bootstrap-step.placeholder-my-repository-connection',\n                'My repository connection'\n              )}\n              // Autofocus the title field if it's the only available option\n              autoFocus={options.length === 1 && options[0].target === 'folder'}\n            />\n          </Field>\n        )}\n      </Stack>\n    </Stack>\n  );\n}\n","import { useState } from 'react';\nimport { Controller, useFormContext } from 'react-hook-form';\n\nimport { Field, Input, SecretInput, Stack } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { TokenPermissionsInfo } from '../Shared/TokenPermissionsInfo';\n\nimport { WizardFormData } from './types';\n\nexport function ConnectStep() {\n  const {\n    register,\n    control,\n    setValue,\n    formState: { errors },\n    getValues,\n  } = useFormContext<WizardFormData>();\n\n  const [tokenConfigured, setTokenConfigured] = useState(false);\n  const type = getValues('repository.type');\n  const isGithub = type === 'github';\n\n  return (\n    <Stack direction=\"column\">\n      {isGithub && (\n        <>\n          <TokenPermissionsInfo />\n          <Field\n            label={t('provisioning.connect-step.label-access-token', 'GitHub access token')}\n            required\n            description={t(\n              'provisioning.connect-step.description-paste-your-git-hub-personal-access-token',\n              'Paste your GitHub personal access token'\n            )}\n            error={errors.repository?.token?.message}\n            invalid={!!errors.repository?.token}\n          >\n            <Controller\n              name={'repository.token'}\n              control={control}\n              rules={{ required: t('provisioning.connect-step.error-field-required', 'This field is required.') }}\n              render={({ field: { ref, ...field } }) => {\n                return (\n                  <SecretInput\n                    {...field}\n                    id={'token'}\n                    placeholder={t(\n                      'provisioning.connect-step.placeholder-github-token',\n                      'github_pat_yourTokenHere1234567890abcdEFGHijklMNOP'\n                    )}\n                    isConfigured={tokenConfigured}\n                    onReset={() => {\n                      setValue('repository.token', '');\n                      setTokenConfigured(false);\n                    }}\n                  />\n                );\n              }}\n            />\n          </Field>\n\n          <Field\n            label={t('provisioning.connect-step.label-repository-url', 'GitHub repository URL')}\n            error={errors.repository?.url?.message}\n            invalid={!!errors.repository?.url}\n            description={t(\n              'provisioning.connect-step.description-repository-url',\n              'Paste the URL of your GitHub repository'\n            )}\n            required\n          >\n            <Input\n              {...register('repository.url', {\n                required: t('provisioning.connect-step.error-field-required', 'This field is required.'),\n                pattern: {\n                  // TODO: The regex is not correct when we support GHES.\n                  value: /^(?:https:\\/\\/github\\.com\\/)?[^/]+\\/[^/]+$/,\n                  message: t(\n                    'provisioning.connect-step.error-invalid-github-url',\n                    'Please enter a valid GitHub repository URL'\n                  ),\n                },\n              })}\n              placeholder={t('provisioning.connect-step.placeholder-github-url', 'https://github.com/username/repo')}\n            />\n          </Field>\n\n          <Field\n            label={t('provisioning.connect-step.label-branch', 'Branch name')}\n            description={t('provisioning.connect-step.description-branch', 'Branch to use for the GitHub repository')}\n            error={errors.repository?.branch?.message}\n            invalid={!!errors.repository?.branch}\n          >\n            <Input\n              {...register('repository.branch')}\n              placeholder={t('provisioning.connect-step.placeholder-branch', 'main')}\n            />\n          </Field>\n\n          <Field\n            label={t('provisioning.connect-step.label-path', 'Path to subdirectory in repository')}\n            error={errors.repository?.path?.message}\n            invalid={!!errors.repository?.path}\n            description={t(\n              'provisioning.connect-step.description-github-path',\n              'This is the path to a subdirectory in your GitHub repository where dashboards will be stored and provisioned from'\n            )}\n          >\n            <Input {...register('repository.path')} />\n          </Field>\n        </>\n      )}\n\n      {type === 'local' && (\n        <Field\n          label={t('provisioning.connect-step.label-local-path', 'Local path')}\n          error={errors.repository?.path?.message}\n          invalid={!!errors.repository?.path}\n        >\n          <Input\n            {...register('repository.path', {\n              required: t('provisioning.connect-step.error-field-required', 'This field is required.'),\n            })}\n            placeholder={t('provisioning.connect-step.placeholder-local-path', '/path/to/repo')}\n          />\n        </Field>\n      )}\n    </Stack>\n  );\n}\n","import { useEffect } from 'react';\nimport { useFormContext } from 'react-hook-form';\n\nimport { Checkbox, Field, Input, Stack, Text, TextLink } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { checkPublicAccess, checkImageRenderer } from '../GettingStarted/features';\n\nimport { WizardFormData } from './types';\n\nexport function FinishStep() {\n  const { register, watch, setValue } = useFormContext<WizardFormData>();\n\n  const [type, readOnly] = watch(['repository.type', 'repository.readOnly']);\n  const isGithub = type === 'github';\n  const isPublic = checkPublicAccess();\n  const hasImageRenderer = checkImageRenderer();\n\n  // Set sync enabled by default\n  useEffect(() => {\n    setValue('repository.sync.enabled', true);\n  }, [setValue]);\n\n  return (\n    <Stack direction=\"column\">\n      {isGithub && (\n        <Field\n          label={t(\n            'provisioning.finish-step.label-update-instance-interval-seconds',\n            'Update instance interval (seconds)'\n          )}\n          description={t(\n            'provisioning.finish-step.description-often-shall-instance-updates-git-hub',\n            'How often shall the instance pull updates from GitHub?'\n          )}\n          required\n        >\n          <Input\n            {...register('repository.sync.intervalSeconds', { valueAsNumber: true })}\n            type=\"number\"\n            placeholder={t('provisioning.finish-step.placeholder', '60')}\n          />\n        </Field>\n      )}\n\n      <Field>\n        <Checkbox\n          {...register('repository.readOnly', {\n            onChange: (e) => {\n              if (e.target.checked) {\n                setValue('repository.prWorkflow', false);\n              }\n            },\n          })}\n          label={t('provisioning.finish-step.label-read-only', 'Read only')}\n          description={t(\n            'provisioning.finish-step.description-read-only',\n            \"Resources can't be modified through Grafana.\"\n          )}\n        />\n      </Field>\n\n      {isGithub && (\n        <>\n          <Field>\n            <Checkbox\n              {...register('repository.prWorkflow')}\n              disabled={readOnly}\n              label={t('provisioning.finish-step.label-pr-workflow', 'Enable pull request option when saving')}\n              description={\n                <Trans i18nKey=\"provisioning.finish-step.description-pr-enable-description\">\n                  Allows users to choose whether to open a pull request when saving changes. If the repository does not\n                  allow direct changes to the main branch, a pull request may still be required.\n                </Trans>\n              }\n            />\n          </Field>\n\n          <Stack direction=\"column\" gap={2}>\n            <Stack direction=\"column\" gap={0}>\n              <Text element=\"h4\">\n                <Trans i18nKey=\"provisioning.finish-step.title-enhance-github\">Enhance your GitHub experience</Trans>\n              </Text>\n              <Text color=\"secondary\" variant=\"bodySmall\">\n                <Trans i18nKey=\"provisioning.finish-step.text-setup-later\">You can always set this up later</Trans>\n              </Text>\n            </Stack>\n            <Field>\n              <Checkbox\n                disabled={!hasImageRenderer || !isPublic}\n                label={t(\n                  'provisioning.finish-step.label-enable-previews',\n                  'Enable dashboard previews in pull requests'\n                )}\n                description={\n                  <>\n                    <Trans i18nKey=\"provisioning.finish-step.description-enable-previews\">\n                      Adds an image preview of dashboard changes in pull requests. Images of your Grafana dashboards\n                      will be shared in your Git repository and visible to anyone with repository access.\n                    </Trans>{' '}\n                    <Text italic>\n                      <Trans i18nKey=\"provisioning.finish-step.description-image-rendering\">\n                        Requires image rendering.{' '}\n                        <TextLink\n                          variant=\"bodySmall\"\n                          external\n                          href=\"https://grafana.com/grafana/plugins/grafana-image-renderer\"\n                        >\n                          Set up image rendering\n                        </TextLink>\n                      </Trans>\n                    </Text>\n                  </>\n                }\n                {...register('repository.generateDashboardPreviews')}\n              />\n            </Field>\n          </Stack>\n        </>\n      )}\n    </Stack>\n  );\n}\n","import { css, cx } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, Icon } from '@grafana/ui';\n\nexport interface Step<T> {\n  id: T;\n  name: string;\n  title: string;\n  submitOnNext?: boolean;\n}\n\nexport interface Props<T extends string | number> {\n  activeStep?: T;\n  reportId?: string;\n  visitedSteps?: T[];\n  steps: Array<Step<T>>;\n}\n\nexport function Stepper<T extends string | number>({ visitedSteps = [], steps, activeStep = steps[0]?.id }: Props<T>) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <ol className={styles.container}>\n      {steps.map((step, index) => {\n        const isActive = step.id === activeStep;\n        const isCompleted = visitedSteps.includes(step.id) && !isActive;\n        const isLast = index === steps.length - 1;\n\n        const stepTextClass = cx(styles.stepText, {\n          [styles.activeStepText]: isActive,\n        });\n\n        return (\n          <li key={step.id} className={styles.stepContainer}>\n            <div className={styles.stepContent}>\n              {isCompleted ? (\n                <div className={cx(styles.stepNumber, styles.completedStepNumber)}>\n                  <Icon name=\"check\" size=\"sm\" />\n                </div>\n              ) : (\n                <div className={styles.stepNumber}>{index + 1}</div>\n              )}\n              <div className={stepTextClass}>{step.name}</div>\n            </div>\n            {!isLast && <div className={styles.connector} />}\n          </li>\n        );\n      })}\n    </ol>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      display: 'flex',\n      flexDirection: 'column',\n      margin: theme.spacing(2, 0),\n      padding: 0,\n      listStyle: 'none',\n      width: 200,\n    }),\n    stepContainer: css({\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'flex-start',\n      position: 'relative',\n    }),\n    stepContent: css({\n      display: 'flex',\n      alignItems: 'center',\n      padding: theme.spacing(0.5, 0),\n    }),\n    stepNumber: css({\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      height: theme.spacing(3),\n      width: theme.spacing(3),\n      color: theme.colors.text.secondary,\n      fontSize: theme.typography.size.sm,\n      fontWeight: theme.typography.fontWeightMedium,\n      marginRight: theme.spacing(1),\n    }),\n    completedStepNumber: css({\n      color: theme.colors.success.main,\n    }),\n    stepText: css({\n      color: theme.colors.text.secondary,\n      fontSize: theme.typography.size.md,\n    }),\n    activeStepText: css({\n      color: theme.colors.text.primary,\n      fontWeight: theme.typography.fontWeightMedium,\n    }),\n    connector: css({\n      width: '1px',\n      backgroundColor: theme.colors.border.medium,\n      height: theme.spacing(2),\n      marginLeft: theme.spacing(1.5),\n      marginTop: theme.spacing(0.5),\n    }),\n  };\n};\n","import { skipToken } from '@reduxjs/toolkit/query';\n\nimport { Stack, Text, TextLink } from '@grafana/ui';\nimport { useGetRepositoryQuery } from 'app/api/clients/provisioning';\nimport { Trans } from 'app/core/internationalization';\n\nimport { getRepoHref } from '../utils/git';\n\ntype RepositoryLinkProps = {\n  name?: string;\n};\n\nexport function RepositoryLink({ name }: RepositoryLinkProps) {\n  const repoQuery = useGetRepositoryQuery(name ? { name } : skipToken);\n  const repo = repoQuery.data;\n\n  if (!repo || repoQuery.isLoading) {\n    return null;\n  }\n\n  const repoHref = getRepoHref(repo.spec?.github);\n\n  return (\n    <Stack direction=\"column\" gap={1}>\n      <Text>\n        <Trans i18nKey=\"provisioning.repository-link.grafana-repository-synced\">\n          Your resources are now in your external storage and provisioned into your instance. From now on, your instance\n          and the external storage will be synchronized.\n        </Trans>\n      </Text>\n      {repoHref && (\n        <Stack direction=\"row\" gap={2}>\n          <TextLink href={repoHref} external>\n            <Trans i18nKey=\"provisioning.repository-link.view-repository\">View repository</Trans>\n          </TextLink>\n        </Stack>\n      )}\n    </Stack>\n  );\n}\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\ninterface ProgressBarProps {\n  progress?: number;\n}\nconst ProgressBar = ({ progress }: ProgressBarProps) => {\n  const styles = useStyles2(getStyles);\n\n  if (progress === undefined) {\n    return null;\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.filler} style={{ width: `${progress}%` }}></div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    height: '10px',\n    width: '400px',\n    backgroundColor: theme.colors.background.secondary,\n    borderRadius: theme.shape.radius.pill,\n    overflow: 'hidden',\n    margin: theme.spacing(2, 0),\n  }),\n  filler: css({\n    height: '100%',\n    background: theme.colors.success.text,\n    [theme.transitions.handleMotion('no-preference', 'reduce')]: {\n      transition: 'width 0.5s ease-in-out',\n    },\n  }),\n});\n\nexport default ProgressBar;\n","import { Alert, ControlledCollapse, Spinner, Stack, Text } from '@grafana/ui';\nimport { Job } from 'app/api/clients/provisioning';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { RepositoryLink } from '../Repository/RepositoryLink';\nimport ProgressBar from '../Shared/ProgressBar';\n\nimport { JobSummary } from './JobSummary';\n\nexport interface JobContentProps {\n  job?: Job;\n  isFinishedJob?: boolean;\n}\n\nexport function JobContent({ job, isFinishedJob = false }: JobContentProps) {\n  if (!job?.status) {\n    return null;\n  }\n\n  const { state, message, progress, summary, errors } = job.status;\n  const repoName = job.metadata?.labels?.['provisioning.grafana.app/repository'];\n\n  const getStatusDisplay = () => {\n    switch (state) {\n      case 'success':\n        return (\n          <Alert\n            severity=\"success\"\n            title={t('provisioning.job-status.status.title-job-completed-successfully', 'Job completed successfully')}\n          />\n        );\n      case 'error':\n        return (\n          <Alert\n            severity=\"error\"\n            title={t('provisioning.job-status.status.title-error-running-job', 'Error running job')}\n          >\n            {message ?? errors?.join('\\n')}\n          </Alert>\n        );\n    }\n    return (\n      <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"center\" gap={2}>\n        {['working', 'pending'].includes(state ?? '') && <Spinner size={24} />}\n        <Text element=\"h4\" color=\"secondary\">\n          {message ?? state ?? ''}\n        </Text>\n      </Stack>\n    );\n  };\n\n  return (\n    <Stack direction=\"column\" gap={2}>\n      <Stack direction=\"column\" gap={2}>\n        {getStatusDisplay()}\n        {state && !['success', 'error'].includes(state) && (\n          <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"center\" gap={2}>\n            <ProgressBar progress={progress ?? 0} />\n          </Stack>\n        )}\n        {isFinishedJob && summary && (\n          <Stack direction=\"column\" gap={2}>\n            <Text variant=\"h3\">\n              <Trans i18nKey=\"provisioning.job-status.summary\">Summary</Trans>\n            </Text>\n            <JobSummary summary={summary} />\n          </Stack>\n        )}\n        {state === 'success' ? (\n          <RepositoryLink name={repoName} />\n        ) : (\n          <ControlledCollapse label={t('provisioning.job-status.label-view-details', 'View details')} isOpen={false}>\n            <pre>{JSON.stringify(job, null, 2)}</pre>\n          </ControlledCollapse>\n        )}\n      </Stack>\n    </Stack>\n  );\n}\n","import { useEffect, useRef } from 'react';\n\nimport { Alert, Spinner, Stack, Text } from '@grafana/ui';\nimport { useGetRepositoryJobsWithPathQuery } from 'app/api/clients/provisioning';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { StepStatusInfo } from '../Wizard/types';\n\nimport { JobContent } from './JobContent';\n\nexport interface FinishedJobProps {\n  jobUid: string;\n  repositoryName: string;\n  onStatusChange: (status: StepStatusInfo, error?: string) => void;\n}\n\nexport function FinishedJobStatus({ jobUid, repositoryName, onStatusChange }: FinishedJobProps) {\n  const hasRetried = useRef(false);\n  const finishedQuery = useGetRepositoryJobsWithPathQuery({\n    name: repositoryName,\n    uid: jobUid,\n  });\n  const retryFailed = hasRetried.current && finishedQuery.isError;\n\n  const job = finishedQuery.data;\n\n  useEffect(() => {\n    const shouldRetry = !job && !hasRetried.current && !finishedQuery.isFetching;\n    let timeoutId: ReturnType<typeof setTimeout>;\n\n    if (shouldRetry) {\n      hasRetried.current = true;\n      timeoutId = setTimeout(() => {\n        finishedQuery.refetch();\n      }, 1000);\n    }\n\n    if (finishedQuery.isSuccess) {\n      onStatusChange({ status: 'success' });\n    }\n\n    return () => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    };\n  }, [finishedQuery, job, onStatusChange]);\n\n  if (retryFailed) {\n    onStatusChange({ status: 'error' });\n    return (\n      <Alert severity=\"error\" title={t('provisioning.job-status.no-job-found', 'No job found')}>\n        <Trans i18nKey=\"provisioning.job-status.no-job-found-message\">\n          The job may have been deleted or could not be retrieved. Cancel the current process and start again.\n        </Trans>\n      </Alert>\n    );\n  }\n\n  if (!job || finishedQuery.isLoading || finishedQuery.isFetching) {\n    return (\n      <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"center\" gap={2}>\n        <Spinner size={24} />\n        <Text element=\"h4\" color=\"secondary\">\n          <Trans i18nKey=\"provisioning.job-status.loading-finished-job\">Loading finished job...</Trans>\n        </Text>\n      </Stack>\n    );\n  }\n\n  return <JobContent job={job} isFinishedJob={true} />;\n}\n","import { Spinner, Stack, Text } from '@grafana/ui';\nimport { Job, useListJobQuery } from 'app/api/clients/provisioning';\nimport { Trans } from 'app/core/internationalization';\n\nimport { StepStatusInfo } from '../Wizard/types';\n\nimport { FinishedJobStatus } from './FinishedJobStatus';\nimport { JobContent } from './JobContent';\n\nexport interface JobStatusProps {\n  watch: Job;\n  onStatusChange: (status: StepStatusInfo, error?: string) => void;\n}\n\nexport function JobStatus({ watch, onStatusChange }: JobStatusProps) {\n  const activeQuery = useListJobQuery({\n    fieldSelector: `metadata.name=${watch.metadata?.name}`,\n    watch: true,\n  });\n  const activeJob = activeQuery?.data?.items?.[0];\n  const repoLabel = watch.metadata?.labels?.['provisioning.grafana.app/repository'];\n\n  // Only initialize finished query if we've checked active jobs and found none\n  const activeQueryCompleted = !activeQuery.isUninitialized && !activeQuery.isLoading;\n  const shouldCheckFinishedJobs = activeQueryCompleted && !activeJob && !!repoLabel;\n\n  if (activeQuery.isLoading) {\n    return (\n      <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"center\" gap={2}>\n        <Spinner size={24} />\n        <Text element=\"h4\" color=\"secondary\">\n          <Trans i18nKey=\"provisioning.job-status.starting\">Starting...</Trans>\n        </Text>\n      </Stack>\n    );\n  }\n\n  if (activeQuery.isError) {\n    onStatusChange({ status: 'error', error: 'Error fetching active job' });\n    return null;\n  }\n\n  if (activeJob) {\n    return <JobContent job={activeJob} isFinishedJob={false} />;\n  }\n\n  if (shouldCheckFinishedJobs) {\n    return (\n      <FinishedJobStatus jobUid={watch.metadata?.uid!} repositoryName={repoLabel} onStatusChange={onStatusChange} />\n    );\n  }\n\n  return (\n    <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"center\" gap={2}>\n      <Spinner size={24} />\n      <Text element=\"h4\" weight=\"bold\">\n        <Trans i18nKey=\"provisioning.job-status.starting\">Starting...</Trans>\n      </Text>\n    </Stack>\n  );\n}\n","import { useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\n\nimport { Button, Text, Stack, Alert, TextLink, Field, Checkbox } from '@grafana/ui';\nimport { Job, useCreateRepositoryJobsMutation } from 'app/api/clients/provisioning';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { JobStatus } from '../Job/JobStatus';\n\nimport { StepStatusInfo, WizardFormData } from './types';\n\nexport interface SynchronizeStepProps {\n  onStepStatusUpdate: (info: StepStatusInfo) => void;\n  requiresMigration: boolean;\n}\n\nexport function SynchronizeStep({ onStepStatusUpdate, requiresMigration }: SynchronizeStepProps) {\n  const [createJob] = useCreateRepositoryJobsMutation();\n  const { getValues, register, watch } = useFormContext<WizardFormData>();\n  const target = watch('repository.sync.target');\n  const [job, setJob] = useState<Job>();\n\n  const startSynchronization = async () => {\n    const [history, repoName] = getValues(['migrate.history', 'repositoryName']);\n    if (!repoName) {\n      onStepStatusUpdate({\n        status: 'error',\n        error: t('provisioning.synchronize-step.error-no-repository-name', 'No repository name provided'),\n      });\n      return;\n    }\n\n    try {\n      onStepStatusUpdate({ status: 'running' });\n      const jobSpec = requiresMigration\n        ? {\n            migrate: {\n              history,\n            },\n          }\n        : {\n            pull: {\n              incremental: false, // will queue a full resync job\n            },\n          };\n\n      const response = await createJob({\n        name: repoName,\n        jobSpec,\n      }).unwrap();\n\n      if (!response?.metadata?.name) {\n        return onStepStatusUpdate({\n          status: 'error',\n          error: t('provisioning.synchronize-step.error-no-job-id', 'Failed to start job'),\n        });\n      }\n      setJob(response);\n    } catch (error) {\n      onStepStatusUpdate({\n        status: 'error',\n        error: t('provisioning.synchronize-step.error-starting-job', 'Error starting job'),\n      });\n    }\n  };\n\n  if (job) {\n    return <JobStatus watch={job} onStatusChange={onStepStatusUpdate} />;\n  }\n\n  return (\n    <Stack direction=\"column\" gap={3} alignItems=\"flex-start\">\n      <Text color=\"secondary\">\n        <Trans i18nKey=\"provisioning.wizard.sync-description\">\n          Sync resources with external storage. After this one-time step, all future updates will be automatically saved\n          to the repository and provisioned back into the instance.\n        </Trans>\n      </Text>\n      <Alert\n        title={t(\n          'provisioning.wizard.alert-title',\n          'Important: No data or configuration will be lost, but dashboards will be temporarily unavailable for a few minutes.'\n        )}\n        severity={'info'}\n      >\n        <ul style={{ marginLeft: '16px' }}>\n          <li>\n            <Trans i18nKey=\"provisioning.wizard.alert-point-1\">\n              Resources won't be able to be created, edited, or deleted during this process. In the last step, they will\n              disappear.\n            </Trans>\n          </li>\n          <li>\n            <Trans i18nKey=\"provisioning.wizard.alert-point-2\">\n              Once provisioning is complete, resources will reappear and be managed through external storage.\n            </Trans>\n          </li>\n          <li>\n            <Trans i18nKey=\"provisioning.wizard.alert-point-3\">\n              The duration of this process depends on the number of resources involved.\n            </Trans>\n          </li>\n          <li>\n            <Trans i18nKey=\"provisioning.wizard.alert-point-4\">\n              Enterprise instance administrators can display an announcement banner to users. See{' '}\n              <TextLink external href=\"https://grafana.com/docs/grafana/latest/administration/announcement-banner/\">\n                this guide\n              </TextLink>{' '}\n              for step-by-step instructions.\n            </Trans>\n          </li>\n        </ul>\n      </Alert>\n      {requiresMigration && target !== 'folder' && (\n        <>\n          <Text element=\"h3\">\n            <Trans i18nKey=\"provisioning.synchronize-step.synchronization-options\">Synchronization options</Trans>\n          </Text>\n          <Field>\n            <Checkbox\n              {...register('migrate.history')}\n              label={t('provisioning.wizard.sync-option-history', 'History')}\n              description={\n                <Trans i18nKey=\"provisioning.synchronize-step.synchronization-description\">\n                  Include commits for each historical value\n                </Trans>\n              }\n            />\n          </Field>\n        </>\n      )}\n\n      <Button variant=\"primary\" onClick={startSynchronization}>\n        <Trans i18nKey=\"provisioning.wizard.button-start\">Begin synchronization</Trans>\n      </Button>\n    </Stack>\n  );\n}\n","import { css } from '@emotion/css';\nimport { useCallback, useEffect, useState } from 'react';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport { useNavigate } from 'react-router-dom-v5-compat';\n\nimport { AppEvents, GrafanaTheme2 } from '@grafana/data';\nimport { getAppEvents, isFetchError } from '@grafana/runtime';\nimport { Alert, Box, Button, Stack, Text, useStyles2 } from '@grafana/ui';\nimport { useDeleteRepositoryMutation, useGetFrontendSettingsQuery } from 'app/api/clients/provisioning';\nimport { FormPrompt } from 'app/core/components/FormPrompt/FormPrompt';\nimport { t } from 'app/core/internationalization';\n\nimport { getDefaultValues } from '../Config/defaults';\nimport { PROVISIONING_URL } from '../constants';\nimport { useCreateOrUpdateRepository } from '../hooks/useCreateOrUpdateRepository';\nimport { dataToSpec } from '../utils/data';\nimport { getFormErrors } from '../utils/getFormErrors';\n\nimport { BootstrapStep } from './BootstrapStep';\nimport { ConnectStep } from './ConnectStep';\nimport { FinishStep } from './FinishStep';\nimport { Step, Stepper } from './Stepper';\nimport { SynchronizeStep } from './SynchronizeStep';\nimport { RepoType, StepStatusInfo, WizardFormData, WizardStep } from './types';\n\nconst appEvents = getAppEvents();\n\nconst getSteps = (): Array<Step<WizardStep>> => {\n  return [\n    {\n      id: 'connection',\n      name: t('provisioning.wizard.step-connect', 'Connect'),\n      title: t('provisioning.wizard.title-connect', 'Connect to external storage'),\n      submitOnNext: true,\n    },\n    {\n      id: 'bootstrap',\n      name: t('provisioning.wizard.step-bootstrap', 'Choose what to synchronize'),\n      title: t('provisioning.wizard.title-bootstrap', 'Choose what to synchronize'),\n      submitOnNext: true,\n    },\n    {\n      id: 'synchronize',\n      name: t('provisioning.wizard.step-synchronize', 'Synchronize with external storage'),\n      title: t('provisioning.wizard.title-synchronize', 'Synchronize with external storage'),\n      submitOnNext: false,\n    },\n    {\n      id: 'finish',\n      name: t('provisioning.wizard.step-finish', 'Choose additional settings'),\n      title: t('provisioning.wizard.title-finish', 'Choose additional settings'),\n      submitOnNext: true,\n    },\n  ];\n};\n\nexport function ProvisioningWizard({ type }: { type: RepoType }) {\n  const [activeStep, setActiveStep] = useState<WizardStep>('connection');\n  const [completedSteps, setCompletedSteps] = useState<WizardStep[]>([]);\n  const [requiresMigration, setRequiresMigration] = useState(false);\n  const [stepStatusInfo, setStepStatusInfo] = useState<StepStatusInfo>({ status: 'idle' });\n\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isCancelling, setIsCancelling] = useState(false);\n\n  const settingsQuery = useGetFrontendSettingsQuery();\n  const navigate = useNavigate();\n  const steps = getSteps();\n  const styles = useStyles2(getStyles);\n\n  const values = getDefaultValues();\n  const methods = useForm<WizardFormData>({\n    defaultValues: {\n      repository: { ...values, type },\n      migrate: {\n        history: true,\n      },\n    },\n  });\n\n  const {\n    watch,\n    setValue,\n    getValues,\n    trigger,\n    setError,\n    formState: { isDirty },\n    handleSubmit,\n  } = methods;\n\n  const repoName = watch('repositoryName');\n  const [submitData] = useCreateOrUpdateRepository(repoName);\n  const [deleteRepository] = useDeleteRepositoryMutation();\n\n  const currentStepIndex = steps.findIndex((s) => s.id === activeStep);\n  const currentStepConfig = steps[currentStepIndex];\n  const isStepSuccess = stepStatusInfo.status === 'success';\n\n  // A different repository is marked with instance target -- nothing will succeed\n  useEffect(() => {\n    if (settingsQuery.data?.items.some((item) => item.target === 'instance' && item.name !== repoName)) {\n      appEvents.publish({\n        type: AppEvents.alertError.name,\n        payload: [\n          t('provisioning.wizard-content.error-instance-repository-exists', 'Instance repository already exists'),\n        ],\n      });\n\n      navigate(PROVISIONING_URL);\n    }\n  }, [navigate, repoName, settingsQuery.data?.items]);\n\n  const handleRepositoryDeletion = async (name: string) => {\n    try {\n      await deleteRepository({ name });\n      // Wait before redirecting to ensure deletion is processed\n      setTimeout(() => {\n        navigate(PROVISIONING_URL);\n      }, 1000);\n    } catch (error) {\n      setIsCancelling(false);\n    }\n  };\n\n  const handleCancel = async () => {\n    // For the first step, do not delete anything — just go back.\n    if (activeStep === 'connection' || !repoName) {\n      navigate(PROVISIONING_URL);\n      return;\n    }\n    setIsCancelling(true);\n    handleRepositoryDeletion(repoName);\n  };\n\n  // Calculate button text based on current step position\n  const getNextButtonText = useCallback(\n    (currentStep: WizardStep) => {\n      const stepIndex = steps.findIndex((s) => s.id === currentStep);\n\n      // Guard against index out of bounds\n      if (stepIndex === -1 || stepIndex >= steps.length - 1) {\n        return t('provisioning.wizard.button-next', 'Finish');\n      }\n\n      return steps[stepIndex + 1].name;\n    },\n    [steps]\n  );\n\n  const handleNext = async () => {\n    const isLastStep = currentStepIndex === steps.length - 1;\n\n    // Only navigate to provisioning URL if we're on the actual last step\n    if (isLastStep) {\n      navigate(PROVISIONING_URL);\n    } else {\n      setActiveStep(steps[currentStepIndex + 1].id);\n      setCompletedSteps((prev) => [...new Set([...prev, activeStep])]);\n      setStepStatusInfo({ status: 'idle' });\n    }\n  };\n\n  const onSubmit = async () => {\n    if (currentStepConfig?.submitOnNext) {\n      // Validate form data before proceeding\n      if (activeStep === 'connection' || activeStep === 'bootstrap') {\n        const isValid = await trigger(['repository', 'repository.title']);\n        if (!isValid) {\n          return;\n        }\n      }\n\n      setIsSubmitting(true);\n      try {\n        const formData = getValues();\n        const spec = dataToSpec(formData.repository);\n        const rsp = await submitData(spec);\n        if (rsp.error) {\n          setStepStatusInfo({\n            status: 'error',\n            error: 'Repository request failed',\n          });\n          return;\n        }\n\n        // Fill in the k8s name from the initial POST response\n        const name = rsp.data?.metadata?.name;\n        if (name) {\n          setValue('repositoryName', name);\n          setStepStatusInfo({ status: 'success' });\n          handleNext();\n        } else {\n          console.error('Saved repository without a name:', rsp);\n        }\n      } catch (error) {\n        if (isFetchError(error)) {\n          const [field, errorMessage] = getFormErrors(error.data.errors);\n          if (field && errorMessage) {\n            setError(field, errorMessage);\n          }\n        } else {\n          setStepStatusInfo({\n            status: 'error',\n            error: 'Repository connection failed',\n          });\n        }\n      } finally {\n        setIsSubmitting(false);\n      }\n    } else {\n      // only proceed if the job was successful\n      if (isStepSuccess) {\n        handleNext();\n      }\n    }\n  };\n\n  const isNextButtonDisabled = () => {\n    if (activeStep === 'synchronize') {\n      return stepStatusInfo.status !== 'success';\n    }\n    return (\n      isSubmitting ||\n      isCancelling ||\n      stepStatusInfo.status === 'running' ||\n      (activeStep !== 'connection' && stepStatusInfo.status === 'error')\n    );\n  };\n\n  return (\n    <FormProvider {...methods}>\n      <Stack gap={6} direction=\"row\" alignItems=\"flex-start\">\n        <Stepper steps={steps} activeStep={activeStep} visitedSteps={completedSteps} />\n        <div className={styles.divider} />\n        <form onSubmit={handleSubmit(onSubmit)} className={styles.form}>\n          <FormPrompt onDiscard={handleCancel} confirmRedirect={isDirty && activeStep !== 'finish' && !isCancelling} />\n          <Stack direction=\"column\">\n            <Box marginBottom={2}>\n              {/* eslint-disable-next-line @grafana/no-untranslated-strings */}\n              <Text element=\"h2\">\n                {currentStepIndex + 1}. {currentStepConfig?.title}\n              </Text>\n            </Box>\n\n            {stepStatusInfo.status === 'error' && (\n              <Alert severity=\"error\" title={'error' in stepStatusInfo ? stepStatusInfo.error : ''} />\n            )}\n\n            <div className={styles.content}>\n              {activeStep === 'connection' && <ConnectStep />}\n              {activeStep === 'bootstrap' && (\n                <BootstrapStep\n                  onOptionSelect={setRequiresMigration}\n                  onStepStatusUpdate={setStepStatusInfo}\n                  settingsData={settingsQuery.data}\n                  repoName={repoName ?? ''}\n                />\n              )}\n              {activeStep === 'synchronize' && (\n                <SynchronizeStep onStepStatusUpdate={setStepStatusInfo} requiresMigration={requiresMigration} />\n              )}\n              {activeStep === 'finish' && <FinishStep />}\n            </div>\n\n            <Stack gap={2} justifyContent=\"flex-end\">\n              <Button variant={'secondary'} onClick={handleCancel} disabled={isSubmitting || isCancelling}>\n                {isCancelling\n                  ? t('provisioning.wizard-content.button-cancelling', 'Cancelling...')\n                  : t('provisioning.wizard-content.button-cancel', 'Cancel')}\n              </Button>\n              <Button type={'submit'} disabled={isNextButtonDisabled()}>\n                {isSubmitting\n                  ? t('provisioning.wizard-content.button-submitting', 'Submitting...')\n                  : getNextButtonText(activeStep)}\n              </Button>\n            </Stack>\n          </Stack>\n        </form>\n      </Stack>\n    </FormProvider>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  form: css({\n    maxWidth: '900px',\n    flexGrow: 1,\n  }),\n  divider: css({\n    width: 1,\n    alignSelf: 'stretch',\n    backgroundColor: theme.colors.border.weak,\n    // align with the button row\n    marginBottom: theme.spacing(13),\n  }),\n  content: css({\n    borderBottom: `1px solid ${theme.colors.border.weak}`,\n    paddingBottom: theme.spacing(4),\n    marginBottom: theme.spacing(4),\n  }),\n});\n","import { useParams } from 'react-router-dom-v5-compat';\n\nimport { Page } from 'app/core/components/Page/Page';\n\nimport { ProvisioningWizard } from './ProvisioningWizard';\nimport { RepoType } from './types';\n\nexport default function ConnectPage() {\n  const { type } = useParams<{ type: RepoType }>();\n\n  if (!type) {\n    return null;\n  }\n\n  return (\n    <Page\n      navId=\"provisioning\"\n      pageNav={{\n        text: type === 'github' ? 'Configure Git Sync' : 'Configure local file path',\n        subTitle: 'Connect to an external storage to manage your resources',\n      }}\n    >\n      <Page.Contents>\n        <ProvisioningWizard type={type} />\n      </Page.Contents>\n    </Page>\n  );\n}\n","import { useCallback } from 'react';\n\nimport {\n  RepositorySpec,\n  useCreateRepositoryMutation,\n  useCreateRepositoryTestMutation,\n  useReplaceRepositoryMutation,\n} from 'app/api/clients/provisioning';\n\nexport function useCreateOrUpdateRepository(name?: string) {\n  const [create, createRequest] = useCreateRepositoryMutation();\n  const [update, updateRequest] = useReplaceRepositoryMutation();\n  const [testConfig, testRequest] = useCreateRepositoryTestMutation();\n\n  const updateOrCreate = useCallback(\n    async (data: RepositorySpec) => {\n      // First test the config and wait for the result\n      // unwrap will throw an error if the test fails\n      await testConfig({\n        // HACK: we need to provide a name to the test configuration\n        name: name || 'new',\n        body: {\n          spec: data,\n        },\n      }).unwrap();\n\n      // If test passes, proceed with create/update\n      if (name) {\n        return update({\n          name,\n          repository: {\n            metadata: {\n              name,\n              // TODO? -- replace with patch spec, so the rest of the metadata is not replaced?\n              // Can that support optimistic locking? (eg, make sure the RV is the same?)\n              finalizers: ['cleanup', 'remove-orphan-resources'],\n            },\n            spec: data,\n          },\n        });\n      }\n      return create({ repository: { metadata: generateRepositoryMetadata(data), spec: data } });\n    },\n    [create, name, update, testConfig]\n  );\n\n  return [updateOrCreate, name ? updateRequest : createRequest, testRequest] as const;\n}\n\nconst generateRepositoryMetadata = (data: RepositorySpec) => {\n  // We don't know for sure that we can use a normalised name. If we can't, we'll ask the server to generate one for us.\n  const normalisedName = data.title.toLowerCase().replaceAll(/[^a-z0-9\\-_]+/g, '');\n\n  if (\n    crypto.randomUUID && // we might not be in a secure context\n    normalisedName && // we need a non-empty string before we check the first character\n    normalisedName.charAt(0) >= 'a' && // required to start with a letter to be a valid k8s name\n    normalisedName.charAt(0) <= 'z' &&\n    normalisedName.replaceAll(/[^a-z]/g, '').length >= 3 // must look sensible to a human\n  ) {\n    // We still want a suffix, to avoid name collisions.\n    const randomBit = crypto.randomUUID().substring(0, 7);\n    const shortenedName = normalisedName.substring(0, 63 - 1 - randomBit.length);\n    return { name: `${shortenedName}-${randomBit}` };\n  } else {\n    return { generateName: 'r' };\n  }\n};\n","import { RepositorySpec } from 'app/api/clients/provisioning';\n\nimport { RepositoryFormData } from '../types';\n\nconst getWorkflows = (data: RepositoryFormData): RepositorySpec['workflows'] => {\n  if (data.readOnly) {\n    return [];\n  }\n  const workflows: RepositorySpec['workflows'] = ['write'];\n\n  if (!data.prWorkflow) {\n    return workflows;\n  }\n\n  return [...workflows, 'branch'];\n};\n\nexport const dataToSpec = (data: RepositoryFormData): RepositorySpec => {\n  const spec: RepositorySpec = {\n    type: data.type,\n    sync: data.sync,\n    title: data.title || '',\n    workflows: getWorkflows(data),\n  };\n  switch (data.type) {\n    case 'github':\n      spec.github = {\n        generateDashboardPreviews: data.generateDashboardPreviews,\n        url: data.url || '',\n        branch: data.branch,\n        token: data.token,\n        path: data.path,\n      };\n      break;\n    case 'local':\n      spec.local = {\n        path: data.path,\n      };\n      spec.workflows = spec.workflows.filter((v) => v !== 'branch'); // branch only supported by github\n      break;\n  }\n\n  // We need to deep clone the data, so it doesn't become immutable\n  return structuredClone(spec);\n};\n\nexport const specToData = (spec: RepositorySpec): RepositoryFormData => {\n  return structuredClone({\n    ...spec,\n    ...spec.github,\n    ...spec.local,\n    branch: spec.github?.branch || '',\n    url: spec.github?.url || '',\n    generateDashboardPreviews: spec.github?.generateDashboardPreviews || false,\n    readOnly: !spec.workflows.length,\n    prWorkflow: spec.workflows.includes('write'),\n  });\n};\n"],"names":["FormPrompt","confirmRedirect","onDiscard","onLocationChange","modalIsOpen","setModalIsOpen","blockedLocation","setBlockedLocation","changesDiscarded","setChangesDiscarded","onBeforeUnload","e","handleRedirect","location","currentPath","nextPath","locationChangeCheck","blockRedirect","onBackToForm","onDiscardChanges","UnsavedChangesModal","isOpen","Prompt","message","when","history","unblock","getDefaultValues","repository","getSummaryColumns","item","JobSummary","summary","TokenPermissionsInfo","styles","getStyles","theme","getFormErrors","errors","fieldsToValidate","fieldMap","error","cleanField","fieldParts","lastPart","filterModeOptions","modeOptions","repoName","settings","folderConnected","option","useModeOptions","getResourceStats","files","stats","fileCount","count","file","path","counts","resourceCount","stat","BootstrapStep","onOptionSelect","settingsData","onStepStatusUpdate","register","control","setValue","watch","getValues","resourceStats","filesQuery","selectedTarget","options","resourceCountString","name","isLoading","target","Box","LoadingPlaceholder","Stack","Text","ref","onChange","field","action","index","Card","Field","Input","ConnectStep","tokenConfigured","setTokenConfigured","type","isGithub","SecretInput","FinishStep","readOnly","isPublic","hasImageRenderer","Checkbox","TextLink","Stepper","visitedSteps","steps","activeStep","step","isActive","isCompleted","isLast","stepTextClass","Icon","RepositoryLink","repoQuery","repo","repoHref","ProgressBar","progress","JobContent","job","isFinishedJob","state","getStatusDisplay","Alert","Spinner","FinishedJobStatus","jobUid","repositoryName","onStatusChange","hasRetried","finishedQuery","retryFailed","shouldRetry","timeoutId","JobStatus","activeQuery","activeJob","repoLabel","shouldCheckFinishedJobs","SynchronizeStep","requiresMigration","createJob","setJob","startSynchronization","response","Button","getSteps","ProvisioningWizard","setActiveStep","completedSteps","setCompletedSteps","setRequiresMigration","stepStatusInfo","setStepStatusInfo","isSubmitting","setIsSubmitting","isCancelling","setIsCancelling","settingsQuery","navigate","values","methods","trigger","setError","isDirty","handleSubmit","submitData","useCreateOrUpdateRepository","deleteRepository","currentStepIndex","s","currentStepConfig","isStepSuccess","handleRepositoryDeletion","handleCancel","getNextButtonText","currentStep","stepIndex","handleNext","prev","onSubmit","formData","spec","data","rsp","errorMessage","isNextButtonDisabled","ConnectPage","Page","create","createRequest","update","updateRequest","testConfig","testRequest","generateRepositoryMetadata","normalisedName","randomBit","getWorkflows","workflows","dataToSpec","v","specToData"],"sourceRoot":""}