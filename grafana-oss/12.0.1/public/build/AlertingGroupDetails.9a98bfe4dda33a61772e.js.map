{"version":3,"file":"AlertingGroupDetails.9a98bfe4dda33a61772e.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/export/FileExportPreview.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaExportDrawer.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/providers.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/RuleInspector.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaRuleGroupExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/group-details/Title.tsx","webpack://grafana/./public/app/features/alerting/unified/group-details/GroupDetailsPage.tsx","webpack://grafana/./public/app/features/alerting/unified/utils/accessControlHooks.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport saveAs from 'file-saver';\nimport { useCallback, useMemo } from 'react';\nimport * as React from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, ClipboardButton, CodeEditor, TextLink, useStyles2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nimport { ExportFormats, ExportProvider, ProvisioningType, allGrafanaExportProviders } from './providers';\n\ninterface FileExportPreviewProps {\n  format: ExportFormats;\n  textDefinition: string;\n\n  /*** Filename without extension ***/\n  downloadFileName: string;\n  onClose: () => void;\n}\n\nexport function FileExportPreview({ format, textDefinition, downloadFileName, onClose }: FileExportPreviewProps) {\n  const styles = useStyles2(fileExportPreviewStyles);\n  const provider = allGrafanaExportProviders[format];\n\n  const onDownload = useCallback(() => {\n    const blob = new Blob([textDefinition], {\n      type: `application/${format};charset=utf-8`,\n    });\n    saveAs(blob, `${downloadFileName}.${format}`);\n  }, [textDefinition, downloadFileName, format]);\n\n  const formattedTextDefinition = useMemo(() => {\n    return provider.formatter ? provider.formatter(textDefinition) : textDefinition;\n  }, [provider, textDefinition]);\n\n  return (\n    // TODO Handle empty content\n    <div className={styles.container}>\n      <FileExportInlineDocumentation exportProvider={provider} />\n      <div className={styles.content}>\n        <AutoSizer disableWidth>\n          {({ height }) => (\n            <CodeEditor\n              width=\"100%\"\n              height={height}\n              language={format}\n              value={formattedTextDefinition}\n              monacoOptions={{\n                minimap: {\n                  enabled: false,\n                },\n                scrollBeyondLastLine: false,\n                lineNumbers: 'on',\n                readOnly: true,\n              }}\n            />\n          )}\n        </AutoSizer>\n      </div>\n      <div className={styles.actions}>\n        <Button variant=\"secondary\" onClick={onClose}>\n          <Trans i18nKey=\"alerting.common.cancel\">Cancel</Trans>\n        </Button>\n        <ClipboardButton icon=\"copy\" getText={() => textDefinition}>\n          <Trans i18nKey=\"alerting.file-export-preview.copy-code\">Copy code</Trans>\n        </ClipboardButton>\n        <Button icon=\"download-alt\" onClick={onDownload}>\n          <Trans i18nKey=\"alerting.file-export-preview.download\">Download</Trans>\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nconst fileExportPreviewStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    display: 'flex',\n    flexDirection: 'column',\n    height: '100%',\n    gap: theme.spacing(2),\n  }),\n  content: css({\n    flex: '1 1 100%',\n  }),\n  actions: css({\n    flex: 0,\n    justifyContent: 'flex-end',\n    display: 'flex',\n    gap: theme.spacing(1),\n  }),\n});\n\nfunction FileExportInlineDocumentation({ exportProvider }: { exportProvider: ExportProvider<unknown> }) {\n  const { name, type } = exportProvider;\n\n  const exportInlineDoc: Record<ProvisioningType, { title: string; component: React.ReactNode }> = {\n    file: {\n      title: 'File-provisioning format',\n      component: (\n        <>\n          {name} format is only valid for File Provisioning.{' '}\n          <TextLink\n            href=\"https://grafana.com/docs/grafana/latest/alerting/set-up/provision-alerting-resources/file-provisioning/\"\n            external\n          >\n            Read more in the docs.\n          </TextLink>\n        </>\n      ),\n    },\n    api: {\n      title: 'API-provisioning format',\n      component: (\n        <>\n          {name} format is only valid for API Provisioning.{' '}\n          <TextLink\n            href=\"https://grafana.com/docs/grafana/latest/alerting/set-up/provision-alerting-resources/http-api-provisioning/\"\n            external\n          >\n            Read more in the docs.\n          </TextLink>\n        </>\n      ),\n    },\n    terraform: {\n      title: 'Terraform-provisioning format',\n      component: (\n        <>\n          {name} format is only valid for Terraform Provisioning.{' '}\n          <TextLink\n            href=\"https://grafana.com/docs/grafana/latest/alerting/set-up/provision-alerting-resources/terraform-provisioning/\"\n            external\n          >\n            Read more in the docs.\n          </TextLink>\n        </>\n      ),\n    },\n  };\n\n  const { title, component } = exportInlineDoc[type];\n\n  return (\n    <Alert title={title} severity=\"info\" bottomSpacing={0} topSpacing={0}>\n      {component}\n    </Alert>\n  );\n}\n","import * as React from 'react';\n\nimport { Drawer } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { RuleInspectorTabs } from '../rule-editor/RuleInspector';\n\nimport { ExportFormats, ExportProvider } from './providers';\n\ninterface GrafanaExportDrawerProps {\n  activeTab: ExportFormats;\n  onTabChange: (tab: ExportFormats) => void;\n  children: React.ReactNode;\n  onClose: () => void;\n  formatProviders: Array<ExportProvider<ExportFormats>>;\n  title?: string;\n}\n\nexport function GrafanaExportDrawer({\n  activeTab,\n  onTabChange,\n  children,\n  onClose,\n  formatProviders,\n  title = 'Export',\n}: GrafanaExportDrawerProps) {\n  const grafanaRulesTabs = Object.values(formatProviders).map((provider) => ({\n    label: provider.name,\n    value: provider.exportFormat,\n  }));\n  const subtitle =\n    formatProviders.length > 1\n      ? t(\n          'alerting.export.subtitle.formats',\n          'Select the format and download the file or copy the contents to clipboard'\n        )\n      : t('alerting.export.subtitle.one-format', 'Download the file or copy the contents to clipboard');\n  return (\n    <Drawer\n      title={title}\n      subtitle={subtitle}\n      tabs={\n        <RuleInspectorTabs<ExportFormats> tabs={grafanaRulesTabs} setActiveTab={onTabChange} activeTab={activeTab} />\n      }\n      onClose={onClose}\n      size=\"md\"\n    >\n      {children}\n    </Drawer>\n  );\n}\n","export type ProvisioningType = 'file' | 'api' | 'terraform';\n\nexport interface ExportProvider<TFormat> {\n  name: string;\n  exportFormat: TFormat;\n  type: ProvisioningType;\n  formatter?: (raw: string) => string;\n}\n\nexport const JsonExportProvider: ExportProvider<'json'> = {\n  name: 'JSON',\n  exportFormat: 'json',\n  type: 'file',\n  formatter: (raw: string) => {\n    try {\n      return JSON.stringify(JSON.parse(raw), null, 4);\n    } catch (e) {\n      return raw;\n    }\n  },\n};\n\nexport const YamlExportProvider: ExportProvider<'yaml'> = {\n  name: 'YAML',\n  exportFormat: 'yaml',\n  type: 'file',\n};\n\nexport const HclExportProvider: ExportProvider<'hcl'> = {\n  name: 'Terraform (HCL)',\n  exportFormat: 'hcl',\n  type: 'terraform',\n};\n\nexport const allGrafanaExportProviders = {\n  [JsonExportProvider.exportFormat]: JsonExportProvider,\n  [YamlExportProvider.exportFormat]: YamlExportProvider,\n  [HclExportProvider.exportFormat]: HclExportProvider,\n} as const;\n\nexport const jsonAndYamlGrafanaExportProviders = [JsonExportProvider, YamlExportProvider];\n\nexport type ExportFormats = keyof typeof allGrafanaExportProviders;\n","import { css } from '@emotion/css';\nimport { dump, load } from 'js-yaml';\nimport { useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, CodeEditor, Drawer, Icon, Tab, TabsBar, Tooltip, useStyles2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { RulerRuleDTO } from '../../../../../types/unified-alerting-dto';\nimport { RuleFormValues } from '../../types/rule-form';\nimport {\n  alertingRulerRuleToRuleForm,\n  formValuesToRulerRuleDTO,\n  recordingRulerRuleToRuleForm,\n} from '../../utils/rule-form';\nimport { rulerRuleType } from '../../utils/rules';\n\ninterface Props {\n  onClose: () => void;\n}\n\nconst cloudRulesTabs = [{ label: 'Yaml', value: 'yaml' }];\n\nexport const RuleInspector = ({ onClose }: Props) => {\n  const [activeTab, setActiveTab] = useState('yaml');\n  const { setValue } = useFormContext<RuleFormValues>();\n  const styles = useStyles2(drawerStyles);\n\n  const onApply = (formValues: RuleFormValues) => {\n    // Need to loop through all values and set them individually\n    // TODO this is not type-safe :(\n    for (const key in formValues) {\n      // @ts-ignore\n      setValue(key, formValues[key]);\n    }\n    onClose();\n  };\n\n  return (\n    <Drawer\n      title={t('alerting.rule-inspector.title-inspect-alert-rule', 'Inspect Alert rule')}\n      subtitle={\n        <div className={styles.subtitle}>\n          <RuleInspectorTabs tabs={cloudRulesTabs} setActiveTab={setActiveTab} activeTab={activeTab} />\n        </div>\n      }\n      onClose={onClose}\n    >\n      {activeTab === 'yaml' && <InspectorYamlTab onSubmit={onApply} />}\n    </Drawer>\n  );\n};\n\ninterface RuleInspectorTabsProps<T = string> {\n  tabs: Array<{ label: string; value: T }>;\n  activeTab: T;\n  setActiveTab: (tab: T) => void;\n}\n\nexport function RuleInspectorTabs<T extends string>({ tabs, activeTab, setActiveTab }: RuleInspectorTabsProps<T>) {\n  return (\n    <TabsBar>\n      {tabs.map((tab, index) => {\n        return (\n          <Tab\n            key={`${tab.value}-${index}`}\n            label={tab.label}\n            value={tab.value}\n            onChangeTab={() => setActiveTab(tab.value)}\n            active={activeTab === tab.value}\n          />\n        );\n      })}\n    </TabsBar>\n  );\n}\n\ninterface YamlTabProps {\n  onSubmit: (newModel: RuleFormValues) => void;\n}\n\nconst InspectorYamlTab = ({ onSubmit }: YamlTabProps) => {\n  const styles = useStyles2(yamlTabStyle);\n  const { getValues } = useFormContext<RuleFormValues>();\n\n  const yamlValues = formValuesToRulerRuleDTO(getValues());\n  const [alertRuleAsYaml, setAlertRuleAsYaml] = useState(dump(yamlValues));\n\n  const onApply = () => {\n    const rulerRule = load(alertRuleAsYaml) as RulerRuleDTO;\n    const currentFormValues = getValues();\n\n    const yamlFormValues = rulerRuleToRuleFormValues(rulerRule);\n    onSubmit({ ...currentFormValues, ...yamlFormValues });\n  };\n\n  return (\n    <>\n      <div className={styles.applyButton}>\n        <Button type=\"button\" onClick={onApply}>\n          <Trans i18nKey=\"alerting.inspector-yaml-tab.apply\">Apply</Trans>\n        </Button>\n        <Tooltip content={<YamlContentInfo />} theme=\"info\" placement=\"left-start\" interactive={true}>\n          <Icon name=\"exclamation-triangle\" size=\"xl\" />\n        </Tooltip>\n      </div>\n\n      <div className={styles.content}>\n        <AutoSizer disableWidth>\n          {({ height }) => (\n            <CodeEditor\n              width=\"100%\"\n              height={height}\n              language=\"yaml\"\n              value={alertRuleAsYaml}\n              onBlur={setAlertRuleAsYaml}\n              monacoOptions={{\n                minimap: {\n                  enabled: false,\n                },\n              }}\n            />\n          )}\n        </AutoSizer>\n      </div>\n    </>\n  );\n};\n\nfunction YamlContentInfo() {\n  return (\n    <div>\n      The YAML content in the editor only contains alert rule configuration <br />\n      To configure Prometheus, you need to provide the rest of the{' '}\n      <a\n        href=\"https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        configuration file content.\n      </a>\n    </div>\n  );\n}\n\nfunction rulerRuleToRuleFormValues(rulerRule: RulerRuleDTO): Partial<RuleFormValues> {\n  if (rulerRuleType.dataSource.alertingRule(rulerRule)) {\n    return alertingRulerRuleToRuleForm(rulerRule);\n  } else if (rulerRuleType.dataSource.recordingRule(rulerRule)) {\n    return recordingRulerRuleToRuleForm(rulerRule);\n  }\n\n  return {};\n}\n\nexport const yamlTabStyle = (theme: GrafanaTheme2) => ({\n  content: css({\n    flexGrow: 1,\n    height: '100%',\n    paddingBottom: '16px',\n    marginBottom: theme.spacing(2),\n  }),\n  applyButton: css({\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    flexGrow: 0,\n    marginBottom: theme.spacing(2),\n  }),\n});\n\nexport const drawerStyles = () => ({\n  subtitle: css({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  }),\n});\n","import { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { ExportFormats, allGrafanaExportProviders } from './providers';\n\ninterface GrafanaRuleGroupExporterProps {\n  folderUid: string;\n  groupName: string;\n  onClose: () => void;\n}\n\nexport function GrafanaRuleGroupExporter({ folderUid, groupName, onClose }: GrafanaRuleGroupExporterProps) {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n\n  return (\n    <GrafanaExportDrawer\n      title={`Export ${groupName} rules`}\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      <GrafanaRuleGroupExportPreview\n        folderUid={folderUid}\n        groupName={groupName}\n        exportFormat={activeTab}\n        onClose={onClose}\n      />\n    </GrafanaExportDrawer>\n  );\n}\n\ninterface GrafanaRuleGroupExportPreviewProps {\n  folderUid: string;\n  groupName: string;\n  exportFormat: ExportFormats;\n  onClose: () => void;\n}\n\nfunction GrafanaRuleGroupExportPreview({\n  folderUid,\n  groupName,\n  exportFormat,\n  onClose,\n}: GrafanaRuleGroupExportPreviewProps) {\n  const { currentData: ruleGroupTextDefinition = '', isFetching } = alertRuleApi.endpoints.exportRules.useQuery({\n    folderUid,\n    group: groupName,\n    format: exportFormat,\n  });\n\n  if (isFetching) {\n    return <LoadingPlaceholder text={t('alerting.grafana-rule-group-export-preview.text-loading', 'Loading....')} />;\n  }\n\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={ruleGroupTextDefinition}\n      downloadFileName={groupName}\n      onClose={onClose}\n    />\n  );\n}\n","import { LinkButton, Stack, Text } from '@grafana/ui';\n\nimport { useReturnTo } from '../hooks/useReturnTo';\n\nexport const Title = ({ name }: { name: string }) => {\n  const { returnTo } = useReturnTo('/alerting/list');\n\n  return (\n    <Stack direction=\"row\" gap={1} minWidth={0} alignItems=\"center\">\n      <LinkButton variant=\"secondary\" icon=\"angle-left\" href={returnTo} />\n      <Text element=\"h1\" truncate>\n        {name}\n      </Text>\n    </Stack>\n  );\n};\n","import { skipToken } from '@reduxjs/toolkit/query';\nimport { useMemo, useState } from 'react';\nimport { useParams } from 'react-router-dom-v5-compat';\n\nimport { Alert, Badge, Button, LinkButton, Text, TextLink, withErrorBoundary } from '@grafana/ui';\nimport { EntityNotFound } from 'app/core/components/PageNotFound/EntityNotFound';\nimport { Trans, t } from 'app/core/internationalization';\nimport { FolderDTO } from 'app/types';\nimport { GrafanaRulesSourceSymbol, RuleGroup } from 'app/types/unified-alerting';\nimport { PromRuleType, RulerRuleGroupDTO } from 'app/types/unified-alerting-dto';\n\nimport { alertRuleApi } from '../api/alertRuleApi';\nimport { RulesSourceFeatures, featureDiscoveryApi } from '../api/featureDiscoveryApi';\nimport { AlertingPageWrapper } from '../components/AlertingPageWrapper';\nimport { DynamicTable, DynamicTableColumnProps } from '../components/DynamicTable';\nimport { GrafanaRuleGroupExporter } from '../components/export/GrafanaRuleGroupExporter';\nimport { useFolder } from '../hooks/useFolder';\nimport { DEFAULT_GROUP_EVALUATION_INTERVAL } from '../rule-editor/formDefaults';\nimport { useRulesAccess } from '../utils/accessControlHooks';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\nimport { makeFolderLink, stringifyErrorLike } from '../utils/misc';\nimport { createListFilterLink, groups } from '../utils/navigation';\nimport {\n  calcRuleEvalsToStartAlerting,\n  getRuleName,\n  isFederatedRuleGroup,\n  isProvisionedRuleGroup,\n  rulerRuleType,\n} from '../utils/rules';\nimport { formatPrometheusDuration, safeParsePrometheusDuration } from '../utils/time';\n\nimport { Title } from './Title';\n\ntype GroupPageRouteParams = {\n  dataSourceUid?: string;\n  namespaceId?: string;\n  groupName?: string;\n};\n\nconst { useDiscoverDsFeaturesQuery } = featureDiscoveryApi;\nconst { usePrometheusRuleNamespacesQuery, useGetRuleGroupForNamespaceQuery } = alertRuleApi;\n\nfunction GroupDetailsPage() {\n  const { dataSourceUid = '', namespaceId = '', groupName = '' } = useParams<GroupPageRouteParams>();\n  const isGrafanaRuleGroup = dataSourceUid === GRAFANA_RULES_SOURCE_NAME;\n\n  const { folder, loading: isFolderLoading } = useFolder(isGrafanaRuleGroup ? namespaceId : '');\n  const {\n    data: dsFeatures,\n    isLoading: isDsFeaturesLoading,\n    error: dsFeaturesError,\n  } = useDiscoverDsFeaturesQuery({ uid: isGrafanaRuleGroup ? GrafanaRulesSourceSymbol : dataSourceUid });\n\n  const {\n    data: promGroup,\n    isLoading: isRuleNamespacesLoading,\n    error: ruleNamespacesError,\n  } = usePrometheusRuleNamespacesQuery(\n    dsFeatures && !dsFeatures.rulerConfig\n      ? { ruleSourceName: dsFeatures?.name ?? '', namespace: namespaceId, groupName: groupName }\n      : skipToken,\n    {\n      selectFromResult: (result) => ({\n        ...result,\n        data: result.data?.[0]?.groups.find((g) => g.name === groupName),\n      }),\n    }\n  );\n\n  const {\n    data: rulerGroup,\n    isLoading: isRuleGroupLoading,\n    error: ruleGroupError,\n  } = useGetRuleGroupForNamespaceQuery(\n    dsFeatures?.rulerConfig\n      ? { rulerConfig: dsFeatures?.rulerConfig, namespace: namespaceId, group: groupName }\n      : skipToken\n  );\n\n  const isLoading = isFolderLoading || isDsFeaturesLoading || isRuleNamespacesLoading || isRuleGroupLoading;\n\n  const groupInterval = promGroup?.interval\n    ? formatPrometheusDuration(promGroup.interval * 1000)\n    : (rulerGroup?.interval ?? DEFAULT_GROUP_EVALUATION_INTERVAL);\n\n  const namespaceName = folder?.title ?? namespaceId;\n  const namespaceUrl = createListFilterLink([['namespace', namespaceName]]);\n\n  const namespaceLabel = isGrafanaRuleGroup\n    ? t('alerting.group-details.folder', 'Folder')\n    : t('alerting.group-details.namespace', 'Namespace');\n\n  const namespaceValue = folder ? (\n    <TextLink href={makeFolderLink(folder.uid)} inline={false}>\n      {folder.title}\n    </TextLink>\n  ) : (\n    namespaceId\n  );\n\n  return (\n    <AlertingPageWrapper\n      pageNav={{\n        text: groupName,\n        parentItem: {\n          text: namespaceName,\n          url: namespaceUrl,\n        },\n      }}\n      renderTitle={(title) => <Title name={title} />}\n      info={[\n        { label: namespaceLabel, value: namespaceValue },\n        { label: t('alerting.group-details.interval', 'Interval'), value: groupInterval },\n      ]}\n      navId=\"alert-list\"\n      isLoading={isLoading}\n      actions={\n        <>\n          {dsFeatures && (\n            <GroupActions\n              dsFeatures={dsFeatures}\n              namespaceId={namespaceId}\n              groupName={groupName}\n              folder={folder}\n              rulerGroup={rulerGroup}\n            />\n          )}\n        </>\n      }\n    >\n      <>\n        {Boolean(dsFeaturesError) && (\n          <Alert\n            title={t('alerting.group-details.ds-features-error', 'Error loading data source details')}\n            bottomSpacing={0}\n            topSpacing={2}\n          >\n            <div>{stringifyErrorLike(dsFeaturesError)}</div>\n          </Alert>\n        )}\n        {Boolean(ruleNamespacesError || ruleGroupError) && (\n          <Alert\n            title={t('alerting.group-details.group-loading-error', 'Error loading the group')}\n            bottomSpacing={0}\n            topSpacing={2}\n          >\n            <div>{stringifyErrorLike(ruleNamespacesError || ruleGroupError)}</div>\n          </Alert>\n        )}\n        {promGroup && <GroupDetails group={promRuleGroupToRuleGroupDetails(promGroup)} />}\n        {rulerGroup && <GroupDetails group={rulerRuleGroupToRuleGroupDetails(rulerGroup)} />}\n        {!promGroup && !rulerGroup && <EntityNotFound entity={`${namespaceId}/${groupName}`} />}\n      </>\n    </AlertingPageWrapper>\n  );\n}\n\ninterface GroupActionsProps {\n  dsFeatures: RulesSourceFeatures;\n  namespaceId: string;\n  groupName: string;\n  rulerGroup: RulerRuleGroupDTO | undefined;\n  folder: FolderDTO | undefined;\n}\n\nfunction GroupActions({ dsFeatures, namespaceId, groupName, folder, rulerGroup }: GroupActionsProps) {\n  const { canEditRules } = useRulesAccess();\n  const [isExporting, setIsExporting] = useState<boolean>(false);\n\n  const isGrafanaSource = dsFeatures.uid === GRAFANA_RULES_SOURCE_NAME;\n  const canSaveInFolder = isGrafanaSource ? Boolean(folder?.canSave) : true;\n\n  const isFederated = rulerGroup ? isFederatedRuleGroup(rulerGroup) : false;\n  const isProvisioned = rulerGroup ? isProvisionedRuleGroup(rulerGroup) : false;\n\n  const canEdit =\n    Boolean(dsFeatures.rulerConfig) &&\n    canEditRules(dsFeatures.name) &&\n    canSaveInFolder &&\n    !isFederated &&\n    !isProvisioned;\n\n  return (\n    <>\n      {isGrafanaSource && (\n        <Button onClick={() => setIsExporting(true)} icon=\"file-download\" variant=\"secondary\">\n          <Trans i18nKey=\"alerting.group-details.export\">Export</Trans>\n        </Button>\n      )}\n      {canEdit && (\n        <LinkButton\n          icon=\"pen\"\n          href={groups.editPageLink(dsFeatures.uid, namespaceId, groupName, { includeReturnTo: true })}\n          variant=\"secondary\"\n        >\n          <Trans i18nKey=\"alerting.group-details.edit\">Edit</Trans>\n        </LinkButton>\n      )}\n      {folder && isExporting && (\n        <GrafanaRuleGroupExporter folderUid={folder.uid} groupName={groupName} onClose={() => setIsExporting(false)} />\n      )}\n    </>\n  );\n}\n\n/** An common interface for both Prometheus and Ruler rule groups */\ninterface RuleGroupDetails {\n  name: string;\n  interval: string;\n  rules: RuleDetails[];\n}\n\ninterface AlertingRuleDetails {\n  name: string;\n  type: 'alerting';\n  pendingPeriod: string;\n  evaluationsToFire: number;\n}\ninterface RecordingRuleDetails {\n  name: string;\n  type: 'recording';\n}\n\ntype RuleDetails = AlertingRuleDetails | RecordingRuleDetails;\n\ninterface GroupDetailsProps {\n  group: RuleGroupDetails;\n}\n\nfunction GroupDetails({ group }: GroupDetailsProps) {\n  return (\n    <div>\n      <RulesTable rules={group.rules} />\n    </div>\n  );\n}\n\nfunction RulesTable({ rules }: { rules: RuleDetails[] }) {\n  const rows = rules.map((rule: RuleDetails, index) => ({\n    id: index,\n    data: rule,\n  }));\n\n  const columns: Array<DynamicTableColumnProps<RuleDetails>> = useMemo(() => {\n    return [\n      {\n        id: 'alertName',\n        label: t('alerting.group-details.rule-name', 'Rule name'),\n        renderCell: ({ data }) => {\n          return <Text truncate>{data.name}</Text>;\n        },\n        size: 0.4,\n      },\n      {\n        id: 'for',\n        label: t('alerting.group-details.pending-period', 'Pending period'),\n        renderCell: ({ data }) => {\n          switch (data.type) {\n            case 'alerting':\n              return <>{data.pendingPeriod}</>;\n            case 'recording':\n              return <Badge text={t('alerting.group-details.recording', 'Recording')} color=\"purple\" />;\n          }\n        },\n        size: 0.3,\n      },\n      {\n        id: 'numberEvaluations',\n        label: t('alerting.group-details.evaluations-to-fire', 'Evaluation cycles to fire'),\n        renderCell: ({ data }) => {\n          switch (data.type) {\n            case 'alerting':\n              return <>{data.evaluationsToFire}</>;\n            case 'recording':\n              return null;\n          }\n        },\n        size: 0.3,\n      },\n    ];\n  }, []);\n\n  return <DynamicTable items={rows} cols={columns} />;\n}\n\nfunction promRuleGroupToRuleGroupDetails(group: RuleGroup): RuleGroupDetails {\n  const groupIntervalMs = group.interval * 1000;\n\n  return {\n    name: group.name,\n    interval: formatPrometheusDuration(group.interval * 1000),\n    rules: group.rules.map<RuleDetails>((rule) => {\n      switch (rule.type) {\n        case PromRuleType.Alerting:\n          return {\n            name: rule.name,\n            type: 'alerting',\n            pendingPeriod: formatPrometheusDuration(rule.duration ? rule.duration * 1000 : 0),\n            evaluationsToFire: calcRuleEvalsToStartAlerting(rule.duration ? rule.duration * 1000 : 0, groupIntervalMs),\n          };\n        case PromRuleType.Recording:\n          return { name: rule.name, type: 'recording' };\n      }\n    }),\n  };\n}\n\nfunction rulerRuleGroupToRuleGroupDetails(group: RulerRuleGroupDTO): RuleGroupDetails {\n  const groupIntervalMs = safeParsePrometheusDuration(group.interval ?? DEFAULT_GROUP_EVALUATION_INTERVAL);\n\n  return {\n    name: group.name,\n    interval: group.interval ?? DEFAULT_GROUP_EVALUATION_INTERVAL,\n    rules: group.rules.map<RuleDetails>((rule) => {\n      const name = getRuleName(rule);\n\n      if (rulerRuleType.any.alertingRule(rule)) {\n        return {\n          name,\n          type: 'alerting',\n          pendingPeriod: rule.for ?? '0s',\n          evaluationsToFire: calcRuleEvalsToStartAlerting(\n            rule.for ? safeParsePrometheusDuration(rule.for) : 0,\n            groupIntervalMs\n          ),\n        };\n      }\n\n      return { name, type: 'recording' };\n    }),\n  };\n}\n\nexport default withErrorBoundary(GroupDetailsPage, { style: 'page' });\n","import { useMemo } from 'react';\n\nimport { getRulesAccess } from './access-control';\n\nexport function useRulesAccess() {\n  return useMemo(() => getRulesAccess(), []);\n}\n"],"names":["FileExportPreview","format","textDefinition","downloadFileName","onClose","styles","fileExportPreviewStyles","provider","onDownload","blob","formattedTextDefinition","FileExportInlineDocumentation","height","theme","exportProvider","name","type","exportInlineDoc","title","component","GrafanaExportDrawer","activeTab","onTabChange","children","formatProviders","grafanaRulesTabs","subtitle","JsonExportProvider","raw","YamlExportProvider","HclExportProvider","allGrafanaExportProviders","jsonAndYamlGrafanaExportProviders","cloudRulesTabs","RuleInspector","setActiveTab","setValue","drawerStyles","onApply","formValues","key","RuleInspectorTabs","InspectorYamlTab","tabs","tab","index","onSubmit","yamlTabStyle","getValues","yamlValues","alertRuleAsYaml","setAlertRuleAsYaml","rulerRule","currentFormValues","yamlFormValues","rulerRuleToRuleFormValues","YamlContentInfo","GrafanaRuleGroupExporter","folderUid","groupName","GrafanaRuleGroupExportPreview","exportFormat","ruleGroupTextDefinition","isFetching","alertRuleApi","LoadingPlaceholder","Title","returnTo","useReturnTo","Stack","Text","useDiscoverDsFeaturesQuery","featureDiscoveryApi","usePrometheusRuleNamespacesQuery","useGetRuleGroupForNamespaceQuery","GroupDetailsPage","dataSourceUid","namespaceId","isGrafanaRuleGroup","folder","isFolderLoading","useFolder","dsFeatures","isDsFeaturesLoading","dsFeaturesError","promGroup","isRuleNamespacesLoading","ruleNamespacesError","result","g","rulerGroup","isRuleGroupLoading","ruleGroupError","isLoading","groupInterval","namespaceName","namespaceUrl","namespaceLabel","namespaceValue","TextLink","AlertingPageWrapper","GroupActions","Alert","GroupDetails","promRuleGroupToRuleGroupDetails","rulerRuleGroupToRuleGroupDetails","EntityNotFound","canEditRules","isExporting","setIsExporting","isGrafanaSource","canSaveInFolder","isFederated","isProvisioned","canEdit","Button","group","RulesTable","rules","rows","rule","columns","data","Badge","DynamicTable","groupIntervalMs","useRulesAccess"],"sourceRoot":""}