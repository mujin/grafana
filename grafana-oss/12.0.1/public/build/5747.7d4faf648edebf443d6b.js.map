{"version":3,"file":"5747.7d4faf648edebf443d6b.js","mappings":"kKAUO,MAAMA,CAAyE,CAIpF,aAAc,CAHd,aAAU,CAAC,EACX,qBAAkB,CAAC,KAAc,SAAU,KAAc,YAAa,KAAc,cAAc,EAIlG,cAAY,GAAyB,CAKnC,MAJI,MAAgB,CAAC,GACnB,QAAQ,IAAI,qBAAsB,EAAE,QAAQ,IAAI,KAG9C,MAAmB,CAAC,EAAG,CACzB,MAAMC,EAAY,EAAE,QAAQ,gBAC5B,QAAQ,IAAI,kBAAmBA,EAAW,EAAE,QAAQ,UAAU,EAG9D,MAAMC,EAAwB,OAAO,QAAQ,EAAE,QAAQ,YAAc,CAAC,CAAC,EAAE,OAAO,CAAC,CAACC,EAAGC,CAAK,IAAM,CAC9F,MAAMC,EAAY,OAAOD,EAGzB,MAAO,EADLC,IAAc,UAAYA,IAAc,UAAYA,IAAc,WAAaA,IAAc,YAEjG,CAAC,EAEGH,EAAsB,OAAS,GACjC,QAAQ,KACN,QACAD,EACA,6GACA,OAAO,YAAYC,CAAqB,CAC1C,CAEJ,IAEI,MAAsB,CAAC,GACzB,QAAQ,IAAI,uBAAwB,EAAE,OAAO,CAEjD,EAEA,WAAQ,IAAM,CAAC,CAlCA,CAmCjB,C","sources":["webpack://grafana/./public/app/core/services/echo/backends/analytics/BrowseConsoleBackend.ts"],"sourcesContent":["/* eslint-disable no-console */\nimport {\n  EchoBackend,\n  EchoEventType,\n  isExperimentViewEvent,\n  isInteractionEvent,\n  isPageviewEvent,\n  PageviewEchoEvent,\n} from '@grafana/runtime';\n\nexport class BrowserConsoleBackend implements EchoBackend<PageviewEchoEvent, unknown> {\n  options = {};\n  supportedEvents = [EchoEventType.Pageview, EchoEventType.Interaction, EchoEventType.ExperimentView];\n\n  constructor() {}\n\n  addEvent = (e: PageviewEchoEvent) => {\n    if (isPageviewEvent(e)) {\n      console.log('[EchoSrv:pageview]', e.payload.page);\n    }\n\n    if (isInteractionEvent(e)) {\n      const eventName = e.payload.interactionName;\n      console.log('[EchoSrv:event]', eventName, e.payload.properties);\n\n      // Warn for non-scalar property values. We're not yet making this a hard a\n      const invalidTypeProperties = Object.entries(e.payload.properties ?? {}).filter(([_, value]) => {\n        const valueType = typeof value;\n        const isValidType =\n          valueType === 'string' || valueType === 'number' || valueType === 'boolean' || valueType === 'undefined';\n        return !isValidType;\n      });\n\n      if (invalidTypeProperties.length > 0) {\n        console.warn(\n          'Event',\n          eventName,\n          'has invalid property types. Event properties should only be string, number or boolean. Invalid properties:',\n          Object.fromEntries(invalidTypeProperties)\n        );\n      }\n    }\n\n    if (isExperimentViewEvent(e)) {\n      console.log('[EchoSrv:experiment]', e.payload);\n    }\n  };\n\n  flush = () => {};\n}\n"],"names":["BrowserConsoleBackend","eventName","invalidTypeProperties","_","value","valueType"],"sourceRoot":""}