{"version":3,"file":"heatmapPanel.396a0b0d72b46a9ae69b.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/ColorScale/ColorScale.tsx","webpack://grafana/./public/app/features/visualization/data-hover/DataHoverView.tsx","webpack://grafana/./public/app/plugins/panel/heatmap/renderHistogram.tsx","webpack://grafana/./public/app/plugins/panel/heatmap/tooltip/utils.ts","webpack://grafana/./public/app/plugins/panel/heatmap/HeatmapTooltip.tsx","webpack://grafana/./public/app/plugins/panel/heatmap/fields.ts","webpack://grafana/./public/app/plugins/panel/heatmap/palettes.ts","webpack://grafana/./public/app/plugins/panel/heatmap/HeatmapPanel.tsx","webpack://grafana/./public/app/plugins/panel/heatmap/migrations.ts","webpack://grafana/./public/app/plugins/panel/heatmap/suggestions.ts","webpack://grafana/./public/app/plugins/panel/heatmap/module.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { useState, useEffect } from 'react';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useTheme2 } from '@grafana/ui';\n\ntype Props = {\n  colorPalette: string[];\n  min: number;\n  max: number;\n\n  // Show a value as string -- when not defined, the raw values will not be shown\n  display?: (v: number) => string;\n  hoverValue?: number;\n  useStopsPercentage?: boolean;\n};\n\ntype HoverState = {\n  isShown: boolean;\n  value: number;\n};\n\nconst GRADIENT_STOPS = 10;\n\nexport const ColorScale = ({ colorPalette, min, max, display, hoverValue, useStopsPercentage }: Props) => {\n  const [colors, setColors] = useState<string[]>([]);\n  const [scaleHover, setScaleHover] = useState<HoverState>({ isShown: false, value: 0 });\n  const [percent, setPercent] = useState<number | null>(null); // 0-100 for CSS percentage\n\n  const theme = useTheme2();\n  const styles = getStyles(theme, colors);\n\n  useEffect(() => {\n    setColors(getGradientStops({ colorArray: colorPalette, stops: GRADIENT_STOPS, useStopsPercentage }));\n  }, [colorPalette, useStopsPercentage]);\n\n  const onScaleMouseMove = (event: React.MouseEvent<HTMLDivElement>) => {\n    const divOffset = event.nativeEvent.offsetX;\n    const offsetWidth = event.currentTarget.offsetWidth;\n    const normPercentage = Math.floor((divOffset * 100) / offsetWidth + 1);\n    const scaleValue = Math.floor(((max - min) * normPercentage) / 100 + min);\n\n    setScaleHover({ isShown: true, value: scaleValue });\n    setPercent(normPercentage);\n  };\n\n  const onScaleMouseLeave = () => {\n    setScaleHover({ isShown: false, value: 0 });\n  };\n\n  useEffect(() => {\n    setPercent(hoverValue == null ? null : clampPercent100((hoverValue - min) / (max - min)));\n  }, [hoverValue, min, max]);\n\n  return (\n    <div className={styles.scaleWrapper} onMouseMove={onScaleMouseMove} onMouseLeave={onScaleMouseLeave}>\n      <div className={styles.scaleGradient}>\n        {display && (scaleHover.isShown || hoverValue !== undefined) && (\n          <div className={styles.followerContainer}>\n            <div className={styles.follower} style={{ left: `${percent}%` }} />\n          </div>\n        )}\n      </div>\n      {display && (\n        <div className={styles.followerContainer}>\n          <div className={styles.legendValues}>\n            <span className={styles.disabled}>{display(min)}</span>\n            <span className={styles.disabled}>{display(max)}</span>\n          </div>\n          {percent != null && (scaleHover.isShown || hoverValue !== undefined) && (\n            <span className={styles.hoverValue} style={{ left: `${percent}%` }}>\n              {display(hoverValue ?? scaleHover.value)}\n            </span>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst getGradientStops = ({\n  colorArray,\n  stops,\n  useStopsPercentage = true,\n}: {\n  colorArray: string[];\n  stops: number;\n  useStopsPercentage?: boolean;\n}): string[] => {\n  const colorCount = colorArray.length;\n  if (useStopsPercentage && colorCount <= 20) {\n    const incr = (1 / colorCount) * 100;\n    let per = 0;\n    const stops: string[] = [];\n    for (const color of colorArray) {\n      if (per > 0) {\n        stops.push(`${color} ${per}%`);\n      } else {\n        stops.push(color);\n      }\n      per += incr;\n      stops.push(`${color} ${per}%`);\n    }\n    return stops;\n  }\n\n  const gradientEnd = colorArray[colorCount - 1];\n  const skip = Math.ceil(colorCount / stops);\n  const gradientStops = new Set<string>();\n\n  for (let i = 0; i < colorCount; i += skip) {\n    gradientStops.add(colorArray[i]);\n  }\n\n  gradientStops.add(gradientEnd);\n\n  return [...gradientStops];\n};\n\nfunction clampPercent100(v: number) {\n  if (v > 1) {\n    return 100;\n  }\n  if (v < 0) {\n    return 0;\n  }\n  return v * 100;\n}\n\nconst getStyles = (theme: GrafanaTheme2, colors: string[]) => ({\n  scaleWrapper: css({\n    width: '100%',\n    fontSize: '11px',\n    opacity: 1,\n  }),\n  scaleGradient: css({\n    background: `linear-gradient(90deg, ${colors.join()})`,\n    height: '9px',\n    pointerEvents: 'none',\n    borderRadius: theme.shape.radius.default,\n  }),\n  legendValues: css({\n    display: 'flex',\n    justifyContent: 'space-between',\n    pointerEvents: 'none',\n  }),\n  hoverValue: css({\n    position: 'absolute',\n    marginTop: '-14px',\n    padding: '3px 15px',\n    transform: 'translateX(-50%)',\n  }),\n  followerContainer: css({\n    position: 'relative',\n    pointerEvents: 'none',\n    whiteSpace: 'nowrap',\n  }),\n  follower: css({\n    position: 'absolute',\n    height: '13px',\n    width: '13px',\n    borderRadius: theme.shape.radius.default,\n    transform: 'translateX(-50%) translateY(-50%)',\n    border: `2px solid ${theme.colors.text.primary}`,\n    top: '5px',\n  }),\n  disabled: css({\n    color: theme.colors.text.disabled,\n  }),\n});\n","import { css } from '@emotion/css';\n\nimport {\n  arrayUtils,\n  DataFrame,\n  Field,\n  formattedValueToString,\n  getFieldDisplayName,\n  GrafanaTheme2,\n  LinkModel,\n} from '@grafana/data';\nimport { SortOrder, TooltipDisplayMode } from '@grafana/schema';\nimport { TextLink, useStyles2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\nimport { renderValue } from 'app/plugins/panel/geomap/utils/uiUtils';\n\nimport { ExemplarHoverView } from './ExemplarHoverView';\n\nexport interface Props {\n  data?: DataFrame; // source data\n  rowIndex?: number | null; // the hover row\n  columnIndex?: number | null; // the hover column\n  sortOrder?: SortOrder;\n  mode?: TooltipDisplayMode | null;\n  header?: string;\n  padding?: number;\n  maxHeight?: number;\n}\n\nexport interface DisplayValue {\n  name: string;\n  value: unknown;\n  valueString: string;\n  highlight: boolean;\n}\n\nexport function getDisplayValuesAndLinks(\n  data: DataFrame,\n  rowIndex: number,\n  columnIndex?: number | null,\n  sortOrder?: SortOrder,\n  mode?: TooltipDisplayMode | null\n) {\n  const fields = data.fields;\n  const hoveredField = columnIndex != null ? fields[columnIndex] : null;\n\n  const visibleFields = fields.filter((f) => !Boolean(f.config.custom?.hideFrom?.tooltip));\n  const traceIDField = visibleFields.find((field) => field.name === 'traceID') || fields[0];\n  const orderedVisibleFields = [];\n  // Only include traceID if it's visible and put it in front.\n  if (visibleFields.filter((field) => traceIDField === field).length > 0) {\n    orderedVisibleFields.push(traceIDField);\n  }\n  orderedVisibleFields.push(...visibleFields.filter((field) => traceIDField !== field));\n\n  if (orderedVisibleFields.length === 0) {\n    return null;\n  }\n\n  const displayValues: DisplayValue[] = [];\n  const links: Array<LinkModel<Field>> = [];\n  const linkLookup = new Set<string>();\n\n  for (const field of orderedVisibleFields) {\n    if (mode === TooltipDisplayMode.Single && field !== hoveredField) {\n      continue;\n    }\n\n    const value = field.values[rowIndex];\n    const fieldDisplay = field.display ? field.display(value) : { text: `${value}`, numeric: +value };\n\n    if (field.getLinks) {\n      field.getLinks({ calculatedValue: fieldDisplay, valueRowIndex: rowIndex }).forEach((link) => {\n        const key = `${link.title}/${link.href}`;\n        if (!linkLookup.has(key)) {\n          links.push(link);\n          linkLookup.add(key);\n        }\n      });\n    }\n\n    displayValues.push({\n      name: getFieldDisplayName(field, data),\n      value,\n      valueString: formattedValueToString(fieldDisplay),\n      highlight: field === hoveredField,\n    });\n  }\n\n  if (sortOrder && sortOrder !== SortOrder.None) {\n    displayValues.sort((a, b) => arrayUtils.sortValues(sortOrder)(a.value, b.value));\n  }\n\n  return { displayValues, links };\n}\n\nexport const DataHoverView = ({\n  data,\n  rowIndex,\n  columnIndex,\n  sortOrder,\n  mode,\n  header,\n  padding = 0,\n  maxHeight,\n}: Props) => {\n  const styles = useStyles2(getStyles, padding);\n\n  if (!data || rowIndex == null) {\n    return null;\n  }\n\n  const dispValuesAndLinks = getDisplayValuesAndLinks(data, rowIndex, columnIndex, sortOrder, mode);\n\n  if (dispValuesAndLinks == null) {\n    return null;\n  }\n\n  const { displayValues, links } = dispValuesAndLinks;\n\n  if (header === 'Exemplar') {\n    return <ExemplarHoverView displayValues={displayValues} links={links} header={header} maxHeight={maxHeight} />;\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      {header && (\n        <div className={styles.header}>\n          <span className={styles.title}>{header}</span>\n        </div>\n      )}\n      <table className={styles.infoWrap}>\n        <tbody>\n          {displayValues.map((displayValue, i) => (\n            <tr key={`${i}/${rowIndex}`}>\n              <th>{displayValue.name}</th>\n              <td>{renderValue(displayValue.valueString)}</td>\n            </tr>\n          ))}\n          {links.map((link, i) => (\n            <tr key={i}>\n              <th>\n                <Trans i18nKey=\"visualization.data-hover-view.link\">Link</Trans>\n              </th>\n              <td colSpan={2}>\n                <TextLink href={link.href} external={link.target === '_blank'} weight={'medium'} inline={false}>\n                  {link.title}\n                </TextLink>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\nconst getStyles = (theme: GrafanaTheme2, padding = 0) => {\n  return {\n    wrapper: css({\n      padding: `${padding}px`,\n      background: theme.components.tooltip.background,\n      borderRadius: theme.shape.borderRadius(2),\n    }),\n    header: css({\n      background: theme.colors.background.secondary,\n      alignItems: 'center',\n      alignContent: 'center',\n      display: 'flex',\n      paddingBottom: theme.spacing(1),\n    }),\n    title: css({\n      fontWeight: theme.typography.fontWeightMedium,\n      overflow: 'hidden',\n      display: 'inline-block',\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      flexGrow: 1,\n    }),\n    infoWrap: css({\n      padding: theme.spacing(1),\n      background: 'transparent',\n      border: 'none',\n      th: {\n        fontWeight: theme.typography.fontWeightMedium,\n        padding: theme.spacing(0.25, 2, 0.25, 0),\n      },\n\n      tr: {\n        borderBottom: `1px solid ${theme.colors.border.weak}`,\n        '&:last-child': {\n          borderBottom: 'none',\n        },\n      },\n    }),\n    link: css({\n      color: theme.colors.text.link,\n    }),\n  };\n};\n","export function renderHistogram(\n  can: React.RefObject<HTMLCanvasElement>,\n  histCanWidth: number,\n  histCanHeight: number,\n  xVals: number[],\n  countVals: number[],\n  index: number,\n  yBucketCount: number\n) {\n  let histCtx = can.current?.getContext('2d');\n\n  if (histCtx != null) {\n    const barsGap = 1;\n    let fromIdx = index;\n\n    while (xVals[fromIdx - 1] === xVals[index]) {\n      fromIdx--;\n    }\n\n    let toIdx = fromIdx + yBucketCount;\n\n    let maxCount = 0;\n\n    let i = fromIdx;\n    while (i < toIdx) {\n      let c = countVals[i];\n      maxCount = Math.max(maxCount, c);\n      i++;\n    }\n\n    let pHov = new Path2D();\n    let pRest = new Path2D();\n\n    i = fromIdx;\n    let j = 0;\n    while (i < toIdx) {\n      let c = countVals[i];\n\n      if (c > 0) {\n        let pctY = c / maxCount;\n        let pctX = j / yBucketCount;\n\n        let p = i === index ? pHov : pRest;\n\n        const xCoord = histCanWidth * pctX + barsGap;\n        const width = histCanWidth / yBucketCount - barsGap;\n\n        p.rect(xCoord, Math.round(histCanHeight * (1 - pctY)), width, Math.round(histCanHeight * pctY));\n      }\n\n      i++;\n      j++;\n    }\n\n    histCtx.clearRect(0, 0, histCanWidth, histCanHeight);\n\n    histCtx.fillStyle = '#2E3036';\n    histCtx.fill(pRest);\n\n    histCtx.fillStyle = '#5794F2';\n    histCtx.fill(pHov);\n  }\n}\n","import { DataFrame, Field } from '@grafana/data';\n\nimport { HeatmapData } from '../fields';\n\ntype BucketsMinMax = {\n  xBucketMin: number;\n  xBucketMax: number;\n  yBucketMin: string;\n  yBucketMax: string;\n};\n\nexport const getHoverCellColor = (data: HeatmapData, index: number) => {\n  const colorPalette = data.heatmapColors?.palette!;\n  const colorIndex = data.heatmapColors?.values[index];\n\n  let cellColor: string | undefined = undefined;\n\n  if (colorIndex != null) {\n    cellColor = colorPalette[colorIndex];\n  }\n\n  return { cellColor, colorPalette };\n};\n\nconst conversions: Record<string, number> = {\n  year: 1000 * 60 * 60 * 24 * 365,\n  month: 1000 * 60 * 60 * 24 * 30,\n  week: 1000 * 60 * 60 * 24 * 7,\n  day: 1000 * 60 * 60 * 24,\n  h: 1000 * 60 * 60,\n  m: 1000 * 60,\n  s: 1000,\n  ms: 1,\n};\n\nconst noPluralize = new Set(['ms', 's', 'm', 'h']);\n\n// @TODO: display \"~ 1 year/month\"?\nexport const formatMilliseconds = (milliseconds: number) => {\n  let value = 1;\n  let unit = 'ms';\n\n  for (unit in conversions) {\n    if (milliseconds >= conversions[unit]) {\n      value = Math.floor(milliseconds / conversions[unit]);\n      break;\n    }\n  }\n\n  const plural = value !== 1 && !noPluralize.has(unit);\n  const unitString = plural ? unit + 's' : unit;\n\n  return `${value} ${unitString}`;\n};\n\nexport const getFieldFromData = (data: DataFrame, fieldType: string, isSparse: boolean) => {\n  let field: Field | undefined;\n\n  switch (fieldType) {\n    case 'x':\n      field = isSparse\n        ? data?.fields.find(({ name }) => name === 'x' || name === 'xMin' || name === 'xMax')\n        : data?.fields[0];\n      break;\n    case 'y':\n      field = isSparse\n        ? data?.fields.find(({ name }) => name === 'y' || name === 'yMin' || name === 'yMax')\n        : data?.fields[1];\n      break;\n    case 'count':\n      field = isSparse ? data?.fields.find(({ name }) => name === 'count') : data?.fields[2];\n      break;\n  }\n\n  return field;\n};\n\nexport const getSparseCellMinMax = (data: HeatmapData, index: number): BucketsMinMax => {\n  let fields = data.heatmap!.fields;\n\n  let xMax = fields.find((f) => f.name === 'xMax')!;\n  let yMin = fields.find((f) => f.name === 'yMin')!;\n  let yMax = fields.find((f) => f.name === 'yMax')!;\n\n  let interval = xMax.config.interval!;\n\n  return {\n    xBucketMin: xMax.values[index] - interval,\n    xBucketMax: xMax.values[index],\n    yBucketMin: yMin.values[index],\n    yBucketMax: yMax.values[index],\n  };\n};\n","import { ReactElement, useEffect, useRef, useState, ReactNode } from 'react';\nimport * as React from 'react';\nimport uPlot from 'uplot';\n\nimport {\n  ActionModel,\n  DataFrameType,\n  Field,\n  FieldType,\n  formattedValueToString,\n  getFieldDisplayName,\n  InterpolateFunction,\n  LinkModel,\n  PanelData,\n} from '@grafana/data';\nimport { HeatmapCellLayout } from '@grafana/schema';\nimport { TooltipDisplayMode, useTheme2 } from '@grafana/ui';\nimport {\n  VizTooltipContent,\n  VizTooltipFooter,\n  VizTooltipHeader,\n  VizTooltipWrapper,\n  VizTooltipItem,\n  ColorIndicator,\n  ColorPlacement,\n} from '@grafana/ui/internal';\nimport { ColorScale } from 'app/core/components/ColorScale/ColorScale';\nimport { getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { isHeatmapCellsDense, readHeatmapRowsCustomMeta } from 'app/features/transformers/calculateHeatmap/heatmap';\nimport { DataHoverView } from 'app/features/visualization/data-hover/DataHoverView';\n\nimport { getDataLinks, getFieldActions } from '../status-history/utils';\nimport { isTooltipScrollable } from '../timeseries/utils';\n\nimport { HeatmapData } from './fields';\nimport { renderHistogram } from './renderHistogram';\nimport { formatMilliseconds, getFieldFromData, getHoverCellColor, getSparseCellMinMax } from './tooltip/utils';\n\ninterface HeatmapTooltipProps {\n  mode: TooltipDisplayMode;\n  dataIdxs: Array<number | null>;\n  seriesIdx: number | null | undefined;\n  dataRef: React.MutableRefObject<HeatmapData>;\n  showHistogram?: boolean;\n  showColorScale?: boolean;\n  isPinned: boolean;\n  dismiss: () => void;\n  panelData: PanelData;\n  annotate?: () => void;\n  maxHeight?: number;\n  maxWidth?: number;\n  replaceVariables: InterpolateFunction;\n}\n\nexport const HeatmapTooltip = (props: HeatmapTooltipProps) => {\n  if (props.seriesIdx === 2) {\n    return (\n      <DataHoverView\n        data={props.dataRef.current!.exemplars}\n        rowIndex={props.dataIdxs[2]}\n        header={'Exemplar'}\n        padding={8}\n        maxHeight={props.maxHeight}\n      />\n    );\n  }\n\n  return <HeatmapHoverCell {...props} />;\n};\n\nconst defaultHistogramWidth = 264;\nconst defaultHistogramHeight = 64;\n\nconst HeatmapHoverCell = ({\n  dataIdxs,\n  dataRef,\n  showHistogram,\n  isPinned,\n  showColorScale = false,\n  mode,\n  annotate,\n  maxHeight,\n  maxWidth,\n  replaceVariables,\n}: HeatmapTooltipProps) => {\n  const index = dataIdxs[1]!;\n  const data = dataRef.current;\n\n  const [isSparse] = useState(\n    () => data.heatmap?.meta?.type === DataFrameType.HeatmapCells && !isHeatmapCellsDense(data.heatmap)\n  );\n\n  const xField = getFieldFromData(data.heatmap!, 'x', isSparse)!;\n  const yField = getFieldFromData(data.heatmap!, 'y', isSparse)!;\n  const countField = getFieldFromData(data.heatmap!, 'count', isSparse)!;\n\n  const xDisp = (v: number) => {\n    if (xField?.display) {\n      return formattedValueToString(xField.display(v));\n    }\n    if (xField?.type === FieldType.time) {\n      const tooltipTimeFormat = 'YYYY-MM-DD HH:mm:ss';\n      const dashboard = getDashboardSrv().getCurrent();\n      return dashboard?.formatDate(v, tooltipTimeFormat);\n    }\n    return `${v}`;\n  };\n\n  const xVals = xField.values;\n  const yVals = yField.values;\n  const countVals = countField.values;\n\n  // labeled buckets\n  const meta = readHeatmapRowsCustomMeta(data.heatmap);\n  const yDisp = yField?.display ? (v: string) => formattedValueToString(yField.display!(v)) : (v: string) => `${v}`;\n\n  let interval = xField?.config.interval;\n\n  let yBucketMin: string;\n  let yBucketMax: string;\n\n  let xBucketMin: number;\n  let xBucketMax: number;\n\n  let nonNumericOrdinalDisplay: string | undefined = undefined;\n\n  let contentItems: VizTooltipItem[] = [];\n\n  const getYValueIndex = (idx: number) => {\n    return idx % (data.yBucketCount ?? 1);\n  };\n\n  let yValueIdx = getYValueIndex(index);\n  const xValueIdx = Math.floor(index / (data.yBucketCount ?? 1));\n\n  const getData = (idx: number = index) => {\n    if (meta.yOrdinalDisplay) {\n      const yMinIdx = data.yLayout === HeatmapCellLayout.le ? yValueIdx - 1 : yValueIdx;\n      const yMaxIdx = data.yLayout === HeatmapCellLayout.le ? yValueIdx : yValueIdx + 1;\n      yBucketMin = yMinIdx < 0 ? meta.yMinDisplay! : `${meta.yOrdinalDisplay[yMinIdx]}`;\n      yBucketMax = `${meta.yOrdinalDisplay[yMaxIdx]}`;\n\n      // e.g. \"pod-xyz123\"\n      if (!meta.yOrdinalLabel || Number.isNaN(+meta.yOrdinalLabel[0])) {\n        nonNumericOrdinalDisplay = data.yLayout === HeatmapCellLayout.le ? yBucketMax : yBucketMin;\n      }\n    } else {\n      const value = yVals?.[yValueIdx];\n\n      if (data.yLayout === HeatmapCellLayout.le) {\n        yBucketMax = `${value}`;\n\n        if (data.yLog) {\n          let logFn = data.yLog === 2 ? Math.log2 : Math.log10;\n          let exp = logFn(value) - 1 / data.yLogSplit!;\n          yBucketMin = `${data.yLog ** exp}`;\n        } else {\n          yBucketMin = `${value - data.yBucketSize!}`;\n        }\n      } else {\n        yBucketMin = `${value}`;\n\n        if (data.yLog) {\n          let logFn = data.yLog === 2 ? Math.log2 : Math.log10;\n          let exp = logFn(value) + 1 / data.yLogSplit!;\n          yBucketMax = `${data.yLog ** exp}`;\n        } else {\n          yBucketMax = `${value + data.yBucketSize!}`;\n        }\n      }\n    }\n\n    if (data.xLayout === HeatmapCellLayout.le) {\n      xBucketMax = xVals[idx];\n      xBucketMin = xBucketMax - data.xBucketSize!;\n    } else {\n      xBucketMin = xVals[idx];\n      xBucketMax = xBucketMin + data.xBucketSize!;\n    }\n  };\n\n  if (isSparse) {\n    ({ xBucketMin, xBucketMax, yBucketMin, yBucketMax } = getSparseCellMinMax(data!, index));\n  } else {\n    getData();\n  }\n\n  const { cellColor, colorPalette } = getHoverCellColor(data, index);\n\n  const getDisplayData = (fromIdx: number, toIdx: number) => {\n    let vals = [];\n    for (let idx = fromIdx; idx <= toIdx; idx++) {\n      if (!countVals?.[idx]) {\n        continue;\n      }\n\n      const color = getHoverCellColor(data, idx).cellColor;\n      count = getCountValue(idx);\n\n      if (isSparse) {\n        ({ xBucketMin, xBucketMax, yBucketMin, yBucketMax } = getSparseCellMinMax(data!, idx));\n      } else {\n        yValueIdx = getYValueIndex(idx);\n        getData(idx);\n      }\n\n      const { label, value } = getContentLabels()[0];\n\n      vals.push({\n        label,\n        value,\n        color: color ?? '#FFF',\n        isActive: index === idx,\n      });\n    }\n\n    return vals;\n  };\n\n  const getContentLabels = (): VizTooltipItem[] => {\n    const isMulti = mode === TooltipDisplayMode.Multi && !isPinned;\n\n    if (nonNumericOrdinalDisplay) {\n      return isMulti\n        ? [{ label: `Name ${nonNumericOrdinalDisplay}`, value: data.display!(count) }]\n        : [{ label: 'Name', value: nonNumericOrdinalDisplay }];\n    }\n\n    switch (data.yLayout) {\n      case HeatmapCellLayout.unknown:\n        return isMulti\n          ? [{ label: yDisp(yBucketMin), value: data.display!(count) }]\n          : [{ label: '', value: yDisp(yBucketMin) }];\n    }\n\n    return isMulti\n      ? [\n          {\n            label: `Bucket ${yDisp(yBucketMin)}` + '-' + `${yDisp(yBucketMax)}`,\n            value: data.display!(count),\n          },\n        ]\n      : [\n          {\n            label: 'Bucket',\n            value: `${yDisp(yBucketMin)}` + '-' + `${yDisp(yBucketMax)}`,\n          },\n        ];\n  };\n\n  const getCountValue = (idx: number) => {\n    return countVals?.[idx];\n  };\n\n  let count = getCountValue(index);\n\n  if (mode === TooltipDisplayMode.Single || isPinned) {\n    const fromToInt: VizTooltipItem[] = interval ? [{ label: 'Duration', value: formatMilliseconds(interval) }] : [];\n\n    contentItems = [\n      {\n        label: getFieldDisplayName(countField, data.heatmap),\n        value: data.display!(count),\n        color: cellColor ?? '#FFF',\n        colorPlacement: ColorPlacement.trailing,\n        colorIndicator: ColorIndicator.value,\n      },\n      ...getContentLabels(),\n      ...fromToInt,\n    ];\n  }\n\n  if (mode === TooltipDisplayMode.Multi && !isPinned) {\n    let xVal = xField.values[index];\n    let fromIdx = index;\n    let toIdx = index;\n\n    while (xField.values[fromIdx - 1] === xVal) {\n      fromIdx--;\n    }\n\n    while (xField.values[toIdx + 1] === xVal) {\n      toIdx++;\n    }\n\n    const vals: VizTooltipItem[] = getDisplayData(fromIdx, toIdx);\n    vals.forEach((val) => {\n      contentItems.push({\n        label: val.label,\n        value: val.value,\n        color: val.color ?? '#FFF',\n        colorIndicator: ColorIndicator.value,\n        colorPlacement: ColorPlacement.trailing,\n        isActive: val.isActive,\n      });\n    });\n  }\n\n  let footer: ReactNode;\n\n  if (isPinned) {\n    let links: Array<LinkModel<Field>> = [];\n    let actions: Array<ActionModel<Field>> = [];\n\n    const linksField = data.series?.fields[yValueIdx + 1];\n\n    if (linksField != null) {\n      const visible = !Boolean(linksField.config.custom?.hideFrom?.tooltip);\n      const hasLinks = (linksField.config.links?.length ?? 0) > 0;\n\n      if (visible && hasLinks) {\n        links = getDataLinks(linksField, xValueIdx);\n      }\n\n      actions = getFieldActions(data.series!, linksField, replaceVariables, xValueIdx);\n    }\n\n    footer = <VizTooltipFooter dataLinks={links} annotate={annotate} actions={actions} />;\n  }\n\n  let can = useRef<HTMLCanvasElement>(null);\n\n  const theme = useTheme2();\n  const themeSpacing = parseInt(theme.spacing(1), 10);\n\n  let histCssWidth = Math.min(defaultHistogramWidth, maxWidth ? maxWidth - themeSpacing * 2 : defaultHistogramWidth);\n  let histCssHeight = defaultHistogramHeight;\n  let histCanWidth = Math.round(histCssWidth * uPlot.pxRatio);\n  let histCanHeight = Math.round(histCssHeight * uPlot.pxRatio);\n\n  useEffect(\n    () => {\n      if (showHistogram && xVals != null && countVals != null && mode === TooltipDisplayMode.Single) {\n        renderHistogram(can, histCanWidth, histCanHeight, xVals, countVals, index, data.yBucketCount!);\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [index]\n  );\n\n  const headerItem: VizTooltipItem = {\n    label: '',\n    value: xDisp(xBucketMax!)!,\n  };\n\n  let customContent: ReactElement[] = [];\n\n  if (mode === TooltipDisplayMode.Single) {\n    // Histogram\n    if (showHistogram && !isSparse) {\n      customContent.push(\n        <canvas\n          width={histCanWidth}\n          height={histCanHeight}\n          ref={can}\n          style={{ width: histCssWidth + 'px', height: histCssHeight + 'px' }}\n        />\n      );\n    }\n\n    // Color scale\n    if (colorPalette && showColorScale) {\n      customContent.push(\n        <ColorScale\n          colorPalette={colorPalette}\n          min={data.heatmapColors?.minValue!}\n          max={data.heatmapColors?.maxValue!}\n          display={data.display}\n          hoverValue={count}\n        />\n      );\n    }\n  }\n\n  return (\n    <VizTooltipWrapper>\n      <VizTooltipHeader item={headerItem} isPinned={isPinned} />\n      <VizTooltipContent\n        items={contentItems}\n        isPinned={isPinned}\n        scrollable={isTooltipScrollable({ mode, maxHeight })}\n        maxHeight={maxHeight}\n      >\n        {customContent?.map((content, i) => (\n          <div key={i} style={{ padding: `${theme.spacing(1)} 0` }}>\n            {content}\n          </div>\n        ))}\n      </VizTooltipContent>\n      {footer}\n    </VizTooltipWrapper>\n  );\n};\n","import {\n  cacheFieldDisplayNames,\n  DataFrame,\n  DataFrameType,\n  Field,\n  FieldType,\n  formattedValueToString,\n  getDisplayProcessor,\n  getLinksSupplier,\n  GrafanaTheme2,\n  InterpolateFunction,\n  outerJoinDataFrames,\n  TimeRange,\n  ValueFormatter,\n} from '@grafana/data';\nimport { parseSampleValue, sortSeriesByLabel } from '@grafana/prometheus';\nimport {\n  HeatmapCalculationMode,\n  HeatmapCalculationOptions,\n  HeatmapCellLayout,\n  ScaleDistribution,\n} from '@grafana/schema';\nimport {\n  calculateHeatmapFromData,\n  isHeatmapCellsDense,\n  readHeatmapRowsCustomMeta,\n  rowsToCellsHeatmap,\n} from 'app/features/transformers/calculateHeatmap/heatmap';\n\nimport { CellValues, Options } from './types';\nimport { boundedMinMax, valuesToFills } from './utils';\n\nexport interface HeatmapData {\n  heatmap?: DataFrame; // data we will render\n  heatmapColors?: {\n    // quantized palette\n    palette: string[];\n    // indices into palette\n    values: number[];\n\n    // color scale range\n    minValue: number;\n    maxValue: number;\n  };\n\n  series?: DataFrame; // the joined single frame for nonNumericOrdinalY data links\n\n  exemplars?: DataFrame; // optionally linked exemplars\n  exemplarColor?: string;\n\n  xBucketSize?: number;\n  yBucketSize?: number;\n\n  xBucketCount?: number;\n  yBucketCount?: number;\n\n  xLayout?: HeatmapCellLayout;\n  yLayout?: HeatmapCellLayout;\n\n  xLog?: number;\n  yLog?: number;\n\n  xLogSplit?: number;\n  yLogSplit?: number;\n\n  // Print a heatmap cell value\n  display?: (v: number) => string;\n\n  // Errors\n  warning?: string;\n}\n\ninterface PrepareHeatmapDataOptions {\n  frames: DataFrame[];\n  annotations?: DataFrame[];\n  options: Options;\n  palette: string[];\n  theme: GrafanaTheme2;\n  replaceVariables?: InterpolateFunction;\n  timeRange?: TimeRange;\n}\n\nexport function prepareHeatmapData({\n  frames,\n  annotations,\n  options,\n  palette,\n  theme,\n  replaceVariables = (v) => v,\n  timeRange,\n}: PrepareHeatmapDataOptions): HeatmapData {\n  if (!frames?.length) {\n    return {};\n  }\n\n  cacheFieldDisplayNames(frames);\n\n  const exemplars = annotations?.find((f) => f.name === 'exemplar');\n\n  exemplars?.fields.forEach((field) => {\n    field.getLinks = getLinksSupplier(exemplars, field, field.state?.scopedVars ?? {}, replaceVariables);\n  });\n\n  if (options.calculate) {\n    // if calculate is true, we need to have the default values for the calculation if they don't exist\n    let calculation = getCalculationObjectWithDefaults(options.calculation);\n\n    calculation.xBuckets.value = replaceVariables(calculation.xBuckets.value ?? '');\n    calculation.yBuckets.value = replaceVariables(calculation.yBuckets.value ?? '');\n\n    return getDenseHeatmapData(\n      calculateHeatmapFromData(frames, { ...calculation, timeRange }),\n      exemplars,\n      { ...options, calculation },\n      palette,\n      theme\n    );\n  }\n\n  // Check for known heatmap types\n  let rowsHeatmap: DataFrame | undefined = undefined;\n  for (const frame of frames) {\n    switch (frame.meta?.type) {\n      case DataFrameType.HeatmapCells:\n        return isHeatmapCellsDense(frame)\n          ? getDenseHeatmapData(frame, exemplars, options, palette, theme)\n          : getSparseHeatmapData(frame, exemplars, options, palette, theme);\n\n      case DataFrameType.HeatmapRows:\n        rowsHeatmap = frame; // the default format\n    }\n  }\n\n  // Everything past here assumes a field for each row in the heatmap (buckets)\n  if (rowsHeatmap == null) {\n    if (frames.length > 1) {\n      let allNamesNumeric = frames.every(\n        (frame) => !Number.isNaN(parseSampleValue(frame.fields[1].state?.displayName!))\n      );\n\n      if (allNamesNumeric) {\n        frames.sort(sortSeriesByLabel);\n      }\n\n      rowsHeatmap = outerJoinDataFrames({\n        frames,\n        keepDisplayNames: true,\n      })!;\n    } else {\n      let frame = frames[0];\n      let numberFields = frame.fields.filter((field) => field.type === FieldType.number);\n      let allNamesNumeric = numberFields.every((field) => !Number.isNaN(parseSampleValue(field.state?.displayName!)));\n\n      if (allNamesNumeric) {\n        numberFields.sort((a, b) => parseSampleValue(a.state?.displayName!) - parseSampleValue(b.state?.displayName!));\n\n        rowsHeatmap = {\n          ...frame,\n          fields: [frame.fields.find((f) => f.type === FieldType.time)!, ...numberFields],\n        };\n      } else {\n        rowsHeatmap = frame;\n      }\n    }\n  }\n\n  // config data links\n  rowsHeatmap.fields.forEach((field) => {\n    if ((field.config.links?.length ?? 0) === 0) {\n      return;\n    }\n\n    // this expects that the tooltip is able to identify the field and rowIndex from a dense hovered index\n    field.getLinks = getLinksSupplier(rowsHeatmap!, field, field.state?.scopedVars ?? {}, replaceVariables);\n  });\n\n  return {\n    ...getDenseHeatmapData(\n      rowsToCellsHeatmap({\n        unit: options.yAxis?.unit, // used to format the ordinal lookup values\n        decimals: options.yAxis?.decimals,\n        ...options.rowsFrame,\n        frame: rowsHeatmap,\n      }),\n      exemplars,\n      options,\n      palette,\n      theme\n    ),\n    series: rowsHeatmap,\n  };\n}\n\nconst getCalculationObjectWithDefaults = (calculation?: HeatmapCalculationOptions) => {\n  return {\n    xBuckets: {\n      ...calculation?.xBuckets,\n      mode: calculation?.xBuckets?.mode ?? HeatmapCalculationMode.Size,\n    },\n    yBuckets: {\n      ...calculation?.yBuckets,\n      mode: calculation?.yBuckets?.mode ?? HeatmapCalculationMode.Size,\n      scale: {\n        ...calculation?.yBuckets?.scale,\n        type: calculation?.yBuckets?.scale?.type ?? ScaleDistribution.Linear,\n      },\n    },\n  };\n};\n\nconst getSparseHeatmapData = (\n  frame: DataFrame,\n  exemplars: DataFrame | undefined,\n  options: Options,\n  palette: string[],\n  theme: GrafanaTheme2\n): HeatmapData => {\n  if (frame.meta?.type !== DataFrameType.HeatmapCells || isHeatmapCellsDense(frame)) {\n    return {\n      warning: 'Expected sparse heatmap format',\n      heatmap: frame,\n    };\n  }\n\n  // y axis tick label display\n  updateFieldDisplay(frame.fields[1], options.yAxis, theme);\n\n  const valueField = frame.fields[3];\n\n  // cell value display\n  const disp = updateFieldDisplay(valueField, options.cellValues, theme);\n\n  let [minValue, maxValue] = boundedMinMax(\n    valueField.values,\n    options.color.min,\n    options.color.max,\n    options.filterValues?.le,\n    options.filterValues?.ge\n  );\n\n  return {\n    heatmap: frame,\n    heatmapColors: {\n      palette,\n      values: valuesToFills(valueField.values, palette, minValue, maxValue),\n      minValue,\n      maxValue,\n    },\n    exemplars,\n    display: (v) => formattedValueToString(disp(v)),\n  };\n};\n\nconst getDenseHeatmapData = (\n  frame: DataFrame,\n  exemplars: DataFrame | undefined,\n  options: Options,\n  palette: string[],\n  theme: GrafanaTheme2\n): HeatmapData => {\n  if (frame.meta?.type !== DataFrameType.HeatmapCells) {\n    return {\n      warning: 'Expected heatmap scanlines format',\n      heatmap: frame,\n    };\n  }\n\n  if (frame.fields.length < 2 || frame.length < 2) {\n    return { heatmap: frame };\n  }\n\n  const meta = readHeatmapRowsCustomMeta(frame);\n  let xName: string | undefined = undefined;\n  let yName: string | undefined = undefined;\n  let valueField: Field | undefined = undefined;\n\n  // validate field display properties\n  for (const field of frame.fields) {\n    switch (field.name) {\n      case 'y':\n        yName = field.name;\n\n      case 'yMin':\n      case 'yMax': {\n        if (!yName) {\n          yName = field.name;\n        }\n        if (meta.yOrdinalDisplay == null) {\n          updateFieldDisplay(field, options.yAxis, theme);\n        }\n        break;\n      }\n\n      case 'x':\n      case 'xMin':\n      case 'xMax':\n        xName = field.name;\n        break;\n\n      default: {\n        if (field.type === FieldType.number && !valueField) {\n          valueField = field;\n        }\n      }\n    }\n  }\n\n  if (!yName) {\n    return { warning: 'Missing Y field', heatmap: frame };\n  }\n  if (!yName) {\n    return { warning: 'Missing X field', heatmap: frame };\n  }\n  if (!valueField) {\n    return { warning: 'Missing value field', heatmap: frame };\n  }\n\n  const disp = updateFieldDisplay(valueField, options.cellValues, theme);\n\n  // infer bucket sizes from data (for now)\n  // the 'heatmap-scanlines' dense frame format looks like:\n  // x:      1,1,1,1,2,2,2,2\n  // y:      3,4,5,6,3,4,5,6\n  // count:  0,0,0,7,0,3,0,1\n\n  const xs = frame.fields[0].values;\n  const ys = frame.fields[1].values;\n  const dlen = xs.length;\n\n  // below is literally copy/paste from the pathBuilder code in utils.ts\n  // detect x and y bin qtys by detecting layout repetition in x & y data\n  let yBinQty = dlen - ys.lastIndexOf(ys[0]);\n  let xBinQty = dlen / yBinQty;\n  let yBinIncr = ys[1] - ys[0];\n  let xBinIncr = xs[yBinQty] - xs[0];\n\n  let [minValue, maxValue] = boundedMinMax(\n    valueField.values,\n    options.color.min,\n    options.color.max,\n    options.filterValues?.le,\n    options.filterValues?.ge\n  );\n\n  let calcX = options.calculation?.xBuckets;\n  let calcY = options.calculation?.yBuckets;\n\n  const data: HeatmapData = {\n    heatmap: frame,\n    heatmapColors: {\n      palette,\n      values: valuesToFills(valueField.values, palette, minValue, maxValue),\n      minValue,\n      maxValue,\n    },\n\n    exemplars: exemplars?.length ? exemplars : undefined,\n    xBucketSize: xBinIncr,\n    yBucketSize: yBinIncr,\n    xBucketCount: xBinQty,\n    yBucketCount: yBinQty,\n\n    yLog: calcY?.scale?.log ?? 0,\n    xLog: calcX?.scale?.log ?? 0,\n\n    xLogSplit: calcX?.scale?.log ? +(calcX?.value ?? '1') : 1,\n    yLogSplit: calcY?.scale?.log ? +(calcY?.value ?? '1') : 1,\n\n    // TODO: improve heuristic\n    xLayout:\n      xName === 'xMax' ? HeatmapCellLayout.le : xName === 'xMin' ? HeatmapCellLayout.ge : HeatmapCellLayout.unknown,\n    yLayout:\n      yName === 'yMax' ? HeatmapCellLayout.le : yName === 'yMin' ? HeatmapCellLayout.ge : HeatmapCellLayout.unknown,\n\n    display: (v) => formattedValueToString(disp(v)),\n  };\n\n  return data;\n};\n\nfunction updateFieldDisplay(field: Field, opts: CellValues | undefined, theme: GrafanaTheme2): ValueFormatter {\n  if (opts?.unit?.length || opts?.decimals != null) {\n    const { unit, decimals } = opts;\n    field.display = undefined;\n    field.config = { ...field.config };\n    if (unit?.length) {\n      field.config.unit = unit;\n    }\n    if (decimals != null) {\n      field.config.decimals = decimals;\n    }\n  }\n  if (!field.display) {\n    field.display = getDisplayProcessor({ field, theme });\n  }\n  return field.display;\n}\n","import * as d3 from 'd3';\nimport * as d3ScaleChromatic from 'd3-scale-chromatic';\nimport tinycolor from 'tinycolor2';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { HeatmapColorOptions, defaultOptions, HeatmapColorMode, HeatmapColorScale } from './types';\n\n// https://observablehq.com/@d3/color-schemes?collection=@d3/d3-scale-chromatic\n\n// the previous heatmap panel used d3 deps and some code to interpolate to static 9-color palettes. here we just hard-code them for clarity.\n// if the need arises for configurable-sized palettes, we can bring back the deps & variable interpolation (see simplified code at end)\n\n// Schemes from d3-scale-chromatic\n// https://github.com/d3/d3-scale-chromatic\nexport const colorSchemes = [\n  // Diverging\n  { name: 'BrBG', invert: 'always' },\n  { name: 'PiYG', invert: 'always' },\n  { name: 'PRGn', invert: 'always' },\n  { name: 'PuOr', invert: 'always' },\n  { name: 'RdBu', invert: 'always' },\n  { name: 'RdGy', invert: 'always' },\n  { name: 'RdYlBu', invert: 'always' },\n  { name: 'RdYlGn', invert: 'always' },\n  { name: 'Spectral', invert: 'always' },\n\n  // Sequential (Single Hue)\n  { name: 'Blues', invert: 'dark' },\n  { name: 'Greens', invert: 'dark' },\n  { name: 'Greys', invert: 'dark' },\n  { name: 'Oranges', invert: 'dark' },\n  { name: 'Purples', invert: 'dark' },\n  { name: 'Reds', invert: 'dark' },\n\n  // Sequential (Multi-Hue)\n  { name: 'Turbo', invert: 'light' },\n  { name: 'Cividis', invert: 'light' },\n  { name: 'Viridis', invert: 'light' },\n  { name: 'Magma', invert: 'light' },\n  { name: 'Inferno', invert: 'light' },\n  { name: 'Plasma', invert: 'light' },\n  { name: 'Warm', invert: 'light' },\n  { name: 'Cool', invert: 'light' },\n  { name: 'Cubehelix', invert: 'light', name2: 'CubehelixDefault' },\n  { name: 'BuGn', invert: 'dark' },\n  { name: 'BuPu', invert: 'dark' },\n  { name: 'GnBu', invert: 'dark' },\n  { name: 'OrRd', invert: 'dark' },\n  { name: 'PuBuGn', invert: 'dark' },\n  { name: 'PuBu', invert: 'dark' },\n  { name: 'PuRd', invert: 'dark' },\n  { name: 'RdPu', invert: 'dark' },\n  { name: 'YlGnBu', invert: 'dark' },\n  { name: 'YlGn', invert: 'dark' },\n  { name: 'YlOrBr', invert: 'dark' },\n  { name: 'YlOrRd', invert: 'dark' },\n\n  // Cyclical\n  { name: 'Rainbow', invert: 'always' },\n  { name: 'Sinebow', invert: 'always' },\n];\n\ntype Interpolator = (t: number) => string;\n\nconst DEFAULT_SCHEME = colorSchemes.find((scheme) => scheme.name === 'Spectral');\n\nexport function quantizeScheme(opts: HeatmapColorOptions, theme: GrafanaTheme2): string[] {\n  const options = { ...defaultOptions.color, ...opts };\n  const palette = [];\n  const steps = (options.steps ?? 128) - 1;\n\n  if (opts.mode === HeatmapColorMode.Opacity) {\n    const fill = tinycolor(theme.visualization.getColorByName(opts.fill)).toPercentageRgb();\n\n    const scale =\n      options.scale === HeatmapColorScale.Exponential\n        ? d3.scalePow().exponent(options.exponent).domain([0, 1]).range([0, 1])\n        : d3.scaleLinear().domain([0, 1]).range([0, 1]);\n\n    for (let i = 0; i <= steps; i++) {\n      fill.a = scale(i / steps);\n      palette.push(tinycolor(fill).toString('hex8'));\n    }\n  } else {\n    const scheme = colorSchemes.find((scheme) => scheme.name === options.scheme) ?? DEFAULT_SCHEME!;\n    let fnName = 'interpolate' + (scheme.name2 ?? scheme.name);\n    const interpolate: Interpolator = (d3ScaleChromatic as any)[fnName];\n\n    for (let i = 0; i <= steps; i++) {\n      let rgbStr = interpolate(i / steps);\n      let rgb =\n        rgbStr.indexOf('rgb') === 0\n          ? '#' + [...rgbStr.matchAll(/\\d+/g)].map((v) => (+v[0]).toString(16).padStart(2, '0')).join('')\n          : rgbStr;\n      palette.push(rgb);\n    }\n\n    if (\n      scheme.invert === 'always' ||\n      (scheme.invert === 'dark' && theme.isDark) ||\n      (scheme.invert === 'light' && theme.isLight)\n    ) {\n      palette.reverse();\n    }\n\n    if (opts.reverse) {\n      palette.reverse();\n    }\n  }\n\n  return palette;\n}\n","import { css } from '@emotion/css';\nimport { useMemo, useRef, useState } from 'react';\n\nimport { DashboardCursorSync, PanelProps, TimeRange } from '@grafana/data';\nimport { PanelDataErrorView } from '@grafana/runtime';\nimport { ScaleDistributionConfig } from '@grafana/schema';\nimport {\n  ScaleDistribution,\n  TooltipPlugin2,\n  TooltipDisplayMode,\n  UPlotChart,\n  usePanelContext,\n  useStyles2,\n  useTheme2,\n  VizLayout,\n  EventBusPlugin,\n} from '@grafana/ui';\nimport { TimeRange2, TooltipHoverMode } from '@grafana/ui/internal';\nimport { ColorScale } from 'app/core/components/ColorScale/ColorScale';\nimport { readHeatmapRowsCustomMeta } from 'app/features/transformers/calculateHeatmap/heatmap';\n\nimport { AnnotationsPlugin2 } from '../timeseries/plugins/AnnotationsPlugin2';\nimport { OutsideRangePlugin } from '../timeseries/plugins/OutsideRangePlugin';\n\nimport { HeatmapTooltip } from './HeatmapTooltip';\nimport { prepareHeatmapData } from './fields';\nimport { quantizeScheme } from './palettes';\nimport { Options } from './types';\nimport { prepConfig } from './utils';\n\ninterface HeatmapPanelProps extends PanelProps<Options> {}\n\nexport const HeatmapPanel = ({\n  data,\n  id,\n  timeRange,\n  timeZone,\n  width,\n  height,\n  options,\n  fieldConfig,\n  eventBus,\n  onChangeTimeRange,\n  replaceVariables,\n}: HeatmapPanelProps) => {\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n  const { sync, eventsScope, canAddAnnotations, onSelectRange } = usePanelContext();\n  const cursorSync = sync?.() ?? DashboardCursorSync.Off;\n\n  // temp range set for adding new annotation set by TooltipPlugin2, consumed by AnnotationPlugin2\n  const [newAnnotationRange, setNewAnnotationRange] = useState<TimeRange2 | null>(null);\n\n  // ugh\n  let timeRangeRef = useRef<TimeRange>(timeRange);\n  timeRangeRef.current = timeRange;\n\n  const palette = useMemo(() => quantizeScheme(options.color, theme), [options.color, theme]);\n\n  const info = useMemo(() => {\n    try {\n      return prepareHeatmapData({\n        frames: data.series,\n        annotations: data.annotations,\n        options,\n        palette,\n        theme,\n        replaceVariables,\n        timeRange,\n      });\n    } catch (ex) {\n      return { warning: `${ex}` };\n    }\n  }, [data.series, data.annotations, options, palette, theme, replaceVariables, timeRange]);\n\n  const facets = useMemo(() => {\n    let exemplarsXFacet: number[] | undefined = []; // \"Time\" field\n    let exemplarsYFacet: Array<number | undefined> = [];\n\n    const meta = readHeatmapRowsCustomMeta(info.heatmap);\n\n    if (info.exemplars?.length) {\n      exemplarsXFacet = info.exemplars?.fields[0].values;\n\n      // render by match on ordinal y label\n      if (meta.yMatchWithLabel) {\n        // ordinal/labeled heatmap-buckets?\n        const hasLabeledY = meta.yOrdinalDisplay != null;\n\n        if (hasLabeledY) {\n          let matchExemplarsBy = info.exemplars?.fields.find((field) => field.name === meta.yMatchWithLabel)!.values;\n          exemplarsYFacet = matchExemplarsBy.map((label) => meta.yOrdinalLabel?.indexOf(label));\n        } else {\n          exemplarsYFacet = info.exemplars?.fields[1].values; // \"Value\" field\n        }\n      }\n      // render by raw value\n      else {\n        exemplarsYFacet = info.exemplars?.fields[1].values; // \"Value\" field\n      }\n    }\n\n    return [null, info.heatmap?.fields.map((f) => f.values), [exemplarsXFacet, exemplarsYFacet]];\n  }, [info.heatmap, info.exemplars]);\n\n  // ugh\n  const dataRef = useRef(info);\n  dataRef.current = info;\n\n  const builder = useMemo(() => {\n    const scaleConfig: ScaleDistributionConfig = dataRef.current?.heatmap?.fields[1].config?.custom?.scaleDistribution;\n\n    return prepConfig({\n      dataRef,\n      theme,\n      timeZone,\n      getTimeRange: () => timeRangeRef.current,\n      cellGap: options.cellGap,\n      hideLE: options.filterValues?.le,\n      hideGE: options.filterValues?.ge,\n      exemplarColor: options.exemplars?.color ?? 'rgba(255,0,255,0.7)',\n      yAxisConfig: options.yAxis,\n      ySizeDivisor: scaleConfig?.type === ScaleDistribution.Log ? +(options.calculation?.yBuckets?.value || 1) : 1,\n      selectionMode: options.selectionMode,\n    });\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [options, timeZone, data.structureRev, cursorSync]);\n\n  const renderLegend = () => {\n    if (!info.heatmap || !options.legend.show) {\n      return null;\n    }\n\n    let hoverValue: number | undefined = undefined;\n\n    // let heatmapType = dataRef.current?.heatmap?.meta?.type;\n    // let isSparseHeatmap = heatmapType === DataFrameType.HeatmapCells && !isHeatmapCellsDense(dataRef.current?.heatmap!);\n    // let countFieldIdx = !isSparseHeatmap ? 2 : 3;\n    // const countField = info.heatmap.fields[countFieldIdx];\n\n    // seriesIdx: 1 is heatmap layer; 2 is exemplar layer\n    // if (hover && info.heatmap.fields && hover.seriesIdx === 1) {\n    //   hoverValue = countField.values[hover.dataIdx];\n    // }\n\n    return (\n      <VizLayout.Legend placement=\"bottom\" maxHeight=\"20%\">\n        <div className={styles.colorScaleWrapper}>\n          <ColorScale\n            hoverValue={hoverValue}\n            colorPalette={palette}\n            min={dataRef.current.heatmapColors?.minValue!}\n            max={dataRef.current.heatmapColors?.maxValue!}\n            display={info.display}\n          />\n        </div>\n      </VizLayout.Legend>\n    );\n  };\n\n  if (info.warning || !info.heatmap) {\n    return (\n      <PanelDataErrorView\n        panelId={id}\n        fieldConfig={fieldConfig}\n        data={data}\n        needsNumberField={true}\n        message={info.warning}\n      />\n    );\n  }\n\n  const enableAnnotationCreation = Boolean(canAddAnnotations && canAddAnnotations());\n\n  return (\n    <>\n      <VizLayout width={width} height={height} legend={renderLegend()}>\n        {(vizWidth: number, vizHeight: number) => (\n          <UPlotChart key={builder.uid} config={builder} data={facets as any} width={vizWidth} height={vizHeight}>\n            {cursorSync !== DashboardCursorSync.Off && (\n              <EventBusPlugin config={builder} eventBus={eventBus} frame={info.series ?? info.heatmap} />\n            )}\n            {options.tooltip.mode !== TooltipDisplayMode.None && (\n              <TooltipPlugin2\n                config={builder}\n                hoverMode={\n                  options.tooltip.mode === TooltipDisplayMode.Single ? TooltipHoverMode.xOne : TooltipHoverMode.xAll\n                }\n                queryZoom={onChangeTimeRange}\n                onSelectRange={onSelectRange}\n                syncMode={cursorSync}\n                syncScope={eventsScope}\n                render={(u, dataIdxs, seriesIdx, isPinned, dismiss, timeRange2, viaSync) => {\n                  if (enableAnnotationCreation && timeRange2 != null) {\n                    setNewAnnotationRange(timeRange2);\n                    dismiss();\n                    return;\n                  }\n\n                  const annotate = () => {\n                    let xVal = u.posToVal(u.cursor.left!, 'x');\n\n                    setNewAnnotationRange({ from: xVal, to: xVal });\n                    dismiss();\n                  };\n\n                  return (\n                    <HeatmapTooltip\n                      mode={viaSync ? TooltipDisplayMode.Multi : options.tooltip.mode}\n                      dataIdxs={dataIdxs}\n                      seriesIdx={seriesIdx}\n                      dataRef={dataRef}\n                      isPinned={isPinned}\n                      dismiss={dismiss}\n                      showHistogram={options.tooltip.yHistogram}\n                      showColorScale={options.tooltip.showColorScale}\n                      panelData={data}\n                      annotate={enableAnnotationCreation ? annotate : undefined}\n                      maxHeight={options.tooltip.maxHeight}\n                      maxWidth={options.tooltip.maxWidth}\n                      replaceVariables={replaceVariables}\n                    />\n                  );\n                }}\n                maxWidth={options.tooltip.maxWidth}\n              />\n            )}\n            <AnnotationsPlugin2\n              annotations={data.annotations ?? []}\n              config={builder}\n              timeZone={timeZone}\n              newRange={newAnnotationRange}\n              setNewRange={setNewAnnotationRange}\n              canvasRegionRendering={false}\n            />\n            <OutsideRangePlugin config={builder} onChangeTimeRange={onChangeTimeRange} />\n          </UPlotChart>\n        )}\n      </VizLayout>\n    </>\n  );\n};\n\nconst getStyles = () => ({\n  colorScaleWrapper: css({\n    marginLeft: '25px',\n    padding: '10px 0',\n    maxWidth: '300px',\n  }),\n});\n","import { FieldConfigSource, PanelModel, PanelTypeChangedHandler } from '@grafana/data';\nimport {\n  AxisPlacement,\n  ScaleDistribution,\n  VisibilityMode,\n  HeatmapCellLayout,\n  HeatmapCalculationMode,\n  HeatmapCalculationOptions,\n} from '@grafana/schema';\nimport { TooltipDisplayMode } from '@grafana/ui';\n\nimport { colorSchemes } from './palettes';\nimport { Options, defaultOptions, HeatmapColorMode } from './types';\n\n/** Called when the version number changes */\nexport const heatmapMigrationHandler = (panel: PanelModel): Partial<Options> => {\n  // Migrating from angular\n  if (Object.keys(panel.options ?? {}).length === 0) {\n    return heatmapChangedHandler(panel, 'heatmap', { angular: panel }, panel.fieldConfig);\n  }\n\n  // multi tooltip mode in 10.3+\n  let showTooltip = panel.options?.tooltip?.show;\n  if (showTooltip !== undefined) {\n    if (showTooltip === true) {\n      panel.options.tooltip.mode = TooltipDisplayMode.Single;\n    } else if (showTooltip === false) {\n      panel.options.tooltip.mode = TooltipDisplayMode.None;\n    }\n\n    // Remove old tooltip option\n    delete panel.options.tooltip?.show;\n  }\n\n  return panel.options;\n};\n\n/**\n * This is called when the panel changes from another panel\n */\nexport const heatmapChangedHandler: PanelTypeChangedHandler = (panel, prevPluginId, prevOptions, prevFieldConfig) => {\n  if (prevPluginId === 'heatmap' && prevOptions.angular) {\n    const { fieldConfig, options } = angularToReactHeatmap({\n      ...prevOptions.angular,\n      fieldConfig: prevFieldConfig,\n    });\n    panel.fieldConfig = fieldConfig; // Mutates the incoming panel\n    return options;\n  }\n  // alpha for 8.5+, then beta at 9.0.1\n  if (prevPluginId === 'heatmap-new') {\n    const { bucketFrame, ...options } = panel.options;\n    if (bucketFrame) {\n      return { ...options, rowsFrame: bucketFrame };\n    }\n    return panel.options;\n  }\n  return {};\n};\n\nexport function angularToReactHeatmap(angular: any): { fieldConfig: FieldConfigSource; options: Options } {\n  const fieldConfig: FieldConfigSource = {\n    defaults: {},\n    overrides: [],\n  };\n\n  const calculate = angular.dataFormat === 'tsbuckets' ? false : true;\n  const calculation: HeatmapCalculationOptions = {\n    ...defaultOptions.calculation,\n  };\n\n  const oldYAxis = { logBase: 1, ...angular.yAxis };\n\n  if (calculate) {\n    if (angular.xBucketSize) {\n      calculation.xBuckets = { mode: HeatmapCalculationMode.Size, value: `${angular.xBucketSize}` };\n    } else if (angular.xBucketNumber) {\n      calculation.xBuckets = { mode: HeatmapCalculationMode.Count, value: `${angular.xBucketNumber}` };\n    }\n\n    if (angular.yBucketSize) {\n      calculation.yBuckets = { mode: HeatmapCalculationMode.Size, value: `${angular.yBucketSize}` };\n    } else if (angular.xBucketNumber) {\n      calculation.yBuckets = { mode: HeatmapCalculationMode.Count, value: `${angular.yBucketNumber}` };\n    }\n\n    if (oldYAxis.logBase > 1) {\n      calculation.yBuckets = {\n        mode: HeatmapCalculationMode.Count,\n        value: +oldYAxis.splitFactor > 0 ? `${oldYAxis.splitFactor}` : undefined,\n        scale: {\n          type: ScaleDistribution.Log,\n          log: oldYAxis.logBase,\n        },\n      };\n    }\n  }\n\n  const cellGap = asNumber(angular.cards?.cardPadding, 2);\n  const options: Options = {\n    calculate,\n    calculation,\n    color: {\n      ...defaultOptions.color,\n      steps: 128, // best match with existing colors\n    },\n    cellGap: cellGap ? cellGap : 1, // default to size 1\n    cellRadius: asNumber(angular.cards?.cardRound), // just to keep it\n    yAxis: {\n      axisPlacement: oldYAxis.show === false ? AxisPlacement.Hidden : AxisPlacement.Left,\n      reverse: Boolean(angular.reverseYBuckets),\n      axisWidth: asNumber(oldYAxis.width),\n      min: oldYAxis.min,\n      max: oldYAxis.max,\n      unit: oldYAxis.format,\n      decimals: oldYAxis.decimals,\n    },\n    cellValues: {\n      decimals: asNumber(angular.tooltipDecimals),\n    },\n    rowsFrame: {\n      layout: getHeatmapCellLayout(angular.yBucketBound),\n    },\n    legend: {\n      show: Boolean(angular.legend?.show),\n    },\n    showValue: VisibilityMode.Never,\n    tooltip: {\n      mode: Boolean(angular.tooltip?.show) ? TooltipDisplayMode.Single : TooltipDisplayMode.None,\n      yHistogram: Boolean(angular.tooltip?.showHistogram),\n    },\n    exemplars: {\n      ...defaultOptions.exemplars,\n    },\n  };\n\n  if (angular.hideZeroBuckets) {\n    options.filterValues = { ...defaultOptions.filterValues }; // min: 1e-9\n  }\n\n  // Migrate color options\n  const color = angular.color ?? {};\n  switch (color?.mode) {\n    case 'spectrum': {\n      options.color.mode = HeatmapColorMode.Scheme;\n\n      const current: string = color.colorScheme;\n      let scheme = colorSchemes.find((v) => v.name === current);\n      if (!scheme) {\n        scheme = colorSchemes.find((v) => current.indexOf(v.name) >= 0);\n      }\n      options.color.scheme = scheme ? scheme.name : defaultOptions.color.scheme;\n      break;\n    }\n    case 'opacity': {\n      options.color.mode = HeatmapColorMode.Opacity;\n      options.color.scale = color.scale;\n      break;\n    }\n  }\n  options.color.fill = color.cardColor;\n  options.color.min = color.min;\n  options.color.max = color.max;\n\n  if (typeof color.min === 'number' && typeof color.max === 'number' && color.min > color.max) {\n    options.color.min = color.max;\n    options.color.max = color.min;\n    options.color.reverse = true;\n  }\n\n  return { fieldConfig, options };\n}\n\nfunction getHeatmapCellLayout(v?: string): HeatmapCellLayout {\n  switch (v) {\n    case 'upper':\n      return HeatmapCellLayout.ge;\n    case 'lower':\n      return HeatmapCellLayout.le;\n    case 'middle':\n      return HeatmapCellLayout.unknown;\n  }\n  return HeatmapCellLayout.auto;\n}\n\nfunction asNumber(v: unknown, defaultValue?: number): number | undefined {\n  if (v == null || v === '') {\n    return defaultValue;\n  }\n  const num = +v;\n  return isNaN(num) ? defaultValue : num;\n}\n","import { VisualizationSuggestionsBuilder } from '@grafana/data';\nimport { config } from '@grafana/runtime';\n\nimport { prepareHeatmapData } from './fields';\nimport { quantizeScheme } from './palettes';\nimport { Options, defaultOptions } from './types';\n\nexport class HeatmapSuggestionsSupplier {\n  getSuggestionsForData(builder: VisualizationSuggestionsBuilder) {\n    const { dataSummary } = builder;\n\n    if (\n      !builder.data?.series ||\n      !dataSummary.hasData ||\n      dataSummary.timeFieldCount < 1 ||\n      dataSummary.numberFieldCount < 2 ||\n      dataSummary.numberFieldCount > 10\n    ) {\n      return;\n    }\n\n    const palette = quantizeScheme(defaultOptions.color, config.theme2);\n    const info = prepareHeatmapData({\n      frames: builder.data.series,\n      options: defaultOptions,\n      palette,\n      theme: config.theme2,\n    });\n    if (!info || info.warning) {\n      return;\n    }\n\n    builder.getListAppender<Options, {}>({\n      name: '',\n      pluginId: 'heatmap',\n      options: {},\n      fieldConfig: {\n        defaults: {\n          custom: {},\n        },\n        overrides: [],\n      },\n    });\n  }\n}\n","import { DataFrame, FieldConfigProperty, FieldType, identityOverrideProcessor, PanelPlugin } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport {\n  AxisPlacement,\n  GraphFieldConfig,\n  ScaleDistribution,\n  ScaleDistributionConfig,\n  HeatmapCellLayout,\n} from '@grafana/schema';\nimport { TooltipDisplayMode } from '@grafana/ui';\nimport { addHideFrom, ScaleDistributionEditor } from '@grafana/ui/internal';\nimport { ColorScale } from 'app/core/components/ColorScale/ColorScale';\nimport { addHeatmapCalculationOptions } from 'app/features/transformers/calculateHeatmap/editor/helper';\nimport { readHeatmapRowsCustomMeta } from 'app/features/transformers/calculateHeatmap/heatmap';\n\nimport { HeatmapPanel } from './HeatmapPanel';\nimport { prepareHeatmapData } from './fields';\nimport { heatmapChangedHandler, heatmapMigrationHandler } from './migrations';\nimport { colorSchemes, quantizeScheme } from './palettes';\nimport { HeatmapSuggestionsSupplier } from './suggestions';\nimport { Options, defaultOptions, HeatmapColorMode, HeatmapColorScale } from './types';\n\nexport const plugin = new PanelPlugin<Options, GraphFieldConfig>(HeatmapPanel)\n  .useFieldConfig({\n    disableStandardOptions: Object.values(FieldConfigProperty).filter((v) => v !== FieldConfigProperty.Links),\n    standardOptions: {\n      [FieldConfigProperty.Links]: {\n        settings: {\n          showOneClick: true,\n        },\n      },\n    },\n    useCustomConfig: (builder) => {\n      builder.addCustomEditor<void, ScaleDistributionConfig>({\n        id: 'scaleDistribution',\n        path: 'scaleDistribution',\n        name: 'Y axis scale',\n        category: ['Heatmap'],\n        editor: ScaleDistributionEditor,\n        override: ScaleDistributionEditor,\n        defaultValue: { type: ScaleDistribution.Linear },\n        shouldApply: (f) => f.type === FieldType.number,\n        process: identityOverrideProcessor,\n        hideFromDefaults: true,\n      });\n      addHideFrom(builder); // for tooltip etc\n    },\n  })\n  .setPanelChangeHandler(heatmapChangedHandler)\n  .setMigrationHandler(heatmapMigrationHandler)\n  .setPanelOptions((builder, context) => {\n    const opts = context.options ?? defaultOptions;\n\n    let isOrdinalY = false;\n\n    if (context.data.length > 0) {\n      try {\n        // NOTE: this feels like overkill/expensive just to assert if we have an ordinal y\n        // can probably simplify without doing full dataprep\n        const palette = quantizeScheme(opts.color, config.theme2);\n        const v = prepareHeatmapData({\n          frames: context.data,\n          options: opts,\n          palette,\n          theme: config.theme2,\n        });\n        isOrdinalY = readHeatmapRowsCustomMeta(v.heatmap).yOrdinalDisplay != null;\n      } catch {}\n    }\n\n    let category = ['Heatmap'];\n\n    builder.addRadio({\n      path: 'calculate',\n      name: 'Calculate from data',\n      defaultValue: defaultOptions.calculate,\n      category,\n      settings: {\n        options: [\n          { label: 'Yes', value: true },\n          { label: 'No', value: false },\n        ],\n      },\n    });\n\n    if (opts.calculate) {\n      addHeatmapCalculationOptions('calculation.', builder, opts.calculation, category);\n    }\n\n    category = ['Y Axis'];\n\n    builder\n      .addRadio({\n        path: 'yAxis.axisPlacement',\n        name: 'Placement',\n        defaultValue: defaultOptions.yAxis.axisPlacement ?? AxisPlacement.Left,\n        category,\n        settings: {\n          options: [\n            { label: 'Left', value: AxisPlacement.Left },\n            { label: 'Right', value: AxisPlacement.Right },\n            { label: 'Hidden', value: AxisPlacement.Hidden },\n          ],\n        },\n      })\n      .addUnitPicker({\n        category,\n        path: 'yAxis.unit',\n        name: 'Unit',\n        defaultValue: undefined,\n        settings: {\n          isClearable: true,\n        },\n      })\n      .addNumberInput({\n        category,\n        path: 'yAxis.decimals',\n        name: 'Decimals',\n        settings: {\n          placeholder: 'Auto',\n        },\n      });\n\n    if (!isOrdinalY) {\n      // if undefined, then show the min+max\n      builder\n        .addNumberInput({\n          path: 'yAxis.min',\n          name: 'Min value',\n          settings: {\n            placeholder: 'Auto',\n          },\n          category,\n        })\n        .addTextInput({\n          path: 'yAxis.max',\n          name: 'Max value',\n          settings: {\n            placeholder: 'Auto',\n          },\n          category,\n        });\n    }\n\n    builder\n      .addNumberInput({\n        path: 'yAxis.axisWidth',\n        name: 'Axis width',\n        defaultValue: defaultOptions.yAxis.axisWidth,\n        settings: {\n          placeholder: 'Auto',\n          min: 5, // smaller should just be hidden\n        },\n        category,\n      })\n      .addTextInput({\n        path: 'yAxis.axisLabel',\n        name: 'Axis label',\n        defaultValue: defaultOptions.yAxis.axisLabel,\n        settings: {\n          placeholder: 'Auto',\n        },\n        category,\n      });\n\n    if (!opts.calculate) {\n      builder.addRadio({\n        path: 'rowsFrame.layout',\n        name: 'Tick alignment',\n        defaultValue: defaultOptions.rowsFrame?.layout ?? HeatmapCellLayout.auto,\n        category,\n        settings: {\n          options: [\n            { label: 'Auto', value: HeatmapCellLayout.auto },\n            { label: 'Top (LE)', value: HeatmapCellLayout.le },\n            { label: 'Middle', value: HeatmapCellLayout.unknown },\n            { label: 'Bottom (GE)', value: HeatmapCellLayout.ge },\n          ],\n        },\n      });\n    }\n    builder.addBooleanSwitch({\n      path: 'yAxis.reverse',\n      name: 'Reverse',\n      defaultValue: defaultOptions.yAxis.reverse === true,\n      category,\n    });\n\n    category = ['Colors'];\n\n    builder.addRadio({\n      path: `color.mode`,\n      name: 'Mode',\n      defaultValue: defaultOptions.color.mode,\n      category,\n      settings: {\n        options: [\n          { label: 'Scheme', value: HeatmapColorMode.Scheme },\n          { label: 'Opacity', value: HeatmapColorMode.Opacity },\n        ],\n      },\n    });\n\n    builder.addColorPicker({\n      path: `color.fill`,\n      name: 'Color',\n      defaultValue: defaultOptions.color.fill,\n      category,\n      showIf: (opts) => opts.color.mode === HeatmapColorMode.Opacity,\n    });\n\n    builder.addRadio({\n      path: `color.scale`,\n      name: 'Scale',\n      defaultValue: defaultOptions.color.scale,\n      category,\n      settings: {\n        options: [\n          { label: 'Exponential', value: HeatmapColorScale.Exponential },\n          { label: 'Linear', value: HeatmapColorScale.Linear },\n        ],\n      },\n      showIf: (opts) => opts.color.mode === HeatmapColorMode.Opacity,\n    });\n\n    builder.addSliderInput({\n      path: 'color.exponent',\n      name: 'Exponent',\n      defaultValue: defaultOptions.color.exponent,\n      category,\n      settings: {\n        min: 0.1, // 1 for on/off?\n        max: 2,\n        step: 0.1,\n      },\n      showIf: (opts) =>\n        opts.color.mode === HeatmapColorMode.Opacity && opts.color.scale === HeatmapColorScale.Exponential,\n    });\n\n    builder.addSelect({\n      path: `color.scheme`,\n      name: 'Scheme',\n      description: '',\n      defaultValue: defaultOptions.color.scheme,\n      category,\n      settings: {\n        options: colorSchemes.map((scheme) => ({\n          value: scheme.name,\n          label: scheme.name,\n          //description: 'Set a geometry field based on the results of other fields',\n        })),\n      },\n      showIf: (opts) => opts.color.mode !== HeatmapColorMode.Opacity,\n    });\n\n    builder\n      .addSliderInput({\n        path: 'color.steps',\n        name: 'Steps',\n        defaultValue: defaultOptions.color.steps,\n        category,\n        settings: {\n          min: 2,\n          max: 128,\n          step: 1,\n        },\n      })\n      .addBooleanSwitch({\n        path: 'color.reverse',\n        name: 'Reverse',\n        defaultValue: defaultOptions.color.reverse,\n        category,\n      })\n      .addCustomEditor({\n        id: '__scale__',\n        path: `__scale__`,\n        name: '',\n        category,\n        editor: () => {\n          const palette = quantizeScheme(opts.color, config.theme2);\n          return (\n            <div>\n              <ColorScale colorPalette={palette} min={1} max={100} />\n            </div>\n          );\n        },\n      });\n\n    builder\n      .addNumberInput({\n        path: 'color.min',\n        name: 'Start color scale from value',\n        defaultValue: defaultOptions.color.min,\n        settings: {\n          placeholder: 'Auto (min)',\n        },\n        category,\n      })\n      .addNumberInput({\n        path: 'color.max',\n        name: 'End color scale at value',\n        defaultValue: defaultOptions.color.max,\n        settings: {\n          placeholder: 'Auto (max)',\n        },\n        category,\n      });\n\n    category = ['Cell display'];\n\n    if (!opts.calculate) {\n      builder.addTextInput({\n        path: 'rowsFrame.value',\n        name: 'Value name',\n        defaultValue: defaultOptions.rowsFrame?.value,\n        settings: {\n          placeholder: 'Value',\n        },\n        category,\n      });\n    }\n\n    builder\n      .addUnitPicker({\n        category,\n        path: 'cellValues.unit',\n        name: 'Unit',\n        defaultValue: undefined,\n        settings: {\n          isClearable: true,\n        },\n      })\n      .addNumberInput({\n        category,\n        path: 'cellValues.decimals',\n        name: 'Decimals',\n        settings: {\n          placeholder: 'Auto',\n        },\n      });\n\n    builder\n      // .addRadio({\n      //   path: 'showValue',\n      //   name: 'Show values',\n      //   defaultValue: defaultOptions.showValue,\n      //   category,\n      //   settings: {\n      //     options: [\n      //       { value: VisibilityMode.Auto, label: 'Auto' },\n      //       { value: VisibilityMode.Always, label: 'Always' },\n      //       { value: VisibilityMode.Never, label: 'Never' },\n      //     ],\n      //   },\n      // })\n      .addSliderInput({\n        name: 'Cell gap',\n        path: 'cellGap',\n        defaultValue: defaultOptions.cellGap,\n        category,\n        settings: {\n          min: 0,\n          max: 25,\n        },\n      })\n      .addNumberInput({\n        path: 'filterValues.le',\n        name: 'Hide cells with values <=',\n        defaultValue: defaultOptions.filterValues?.le,\n        settings: {\n          placeholder: 'None',\n        },\n        category,\n      })\n      .addNumberInput({\n        path: 'filterValues.ge',\n        name: 'Hide cells with values >=',\n        defaultValue: defaultOptions.filterValues?.ge,\n        settings: {\n          placeholder: 'None',\n        },\n        category,\n      });\n    // .addSliderInput({\n    //   name: 'Cell radius',\n    //   path: 'cellRadius',\n    //   defaultValue: defaultOptions.cellRadius,\n    //   category,\n    //   settings: {\n    //     min: 0,\n    //     max: 100,\n    //   },\n    // })\n\n    category = ['Tooltip'];\n\n    builder.addRadio({\n      path: 'tooltip.mode',\n      name: 'Tooltip mode',\n      category,\n      defaultValue: TooltipDisplayMode.Single,\n      settings: {\n        options: [\n          { value: TooltipDisplayMode.Single, label: 'Single' },\n          { value: TooltipDisplayMode.Multi, label: 'All' },\n          { value: TooltipDisplayMode.None, label: 'Hidden' },\n        ],\n      },\n    });\n\n    builder.addBooleanSwitch({\n      path: 'tooltip.yHistogram',\n      name: 'Show histogram (Y axis)',\n      defaultValue: defaultOptions.tooltip.yHistogram,\n      category,\n      showIf: (opts) => opts.tooltip.mode === TooltipDisplayMode.Single,\n    });\n\n    builder.addBooleanSwitch({\n      path: 'tooltip.showColorScale',\n      name: 'Show color scale',\n      defaultValue: defaultOptions.tooltip.showColorScale,\n      category,\n      showIf: (opts) => opts.tooltip.mode === TooltipDisplayMode.Single,\n    });\n\n    builder.addNumberInput({\n      path: 'tooltip.maxWidth',\n      name: 'Max width',\n      category,\n      settings: {\n        integer: true,\n      },\n      showIf: (opts) => opts.tooltip.mode !== TooltipDisplayMode.None,\n    });\n\n    builder.addNumberInput({\n      path: 'tooltip.maxHeight',\n      name: 'Max height',\n      category,\n      defaultValue: undefined,\n      settings: {\n        integer: true,\n      },\n      showIf: (options: Options, data: DataFrame[] | undefined, annotations: DataFrame[] | undefined) =>\n        options.tooltip?.mode === TooltipDisplayMode.Multi ||\n        annotations?.some((df) => df.meta?.custom?.resultType === 'exemplar'),\n    });\n\n    category = ['Legend'];\n    builder.addBooleanSwitch({\n      path: 'legend.show',\n      name: 'Show legend',\n      defaultValue: defaultOptions.legend.show,\n      category,\n    });\n\n    category = ['Exemplars'];\n    builder.addColorPicker({\n      path: 'exemplars.color',\n      name: 'Color',\n      defaultValue: defaultOptions.exemplars.color,\n      category,\n      showIf: (options: Options, data: DataFrame[] | undefined, annotations: DataFrame[] | undefined) =>\n        annotations?.some((df) => df.meta?.custom?.resultType === 'exemplar'),\n    });\n  })\n  .setSuggestionsSupplier(new HeatmapSuggestionsSupplier())\n  .setDataSupport({ annotations: true });\n"],"names":["GRADIENT_STOPS","ColorScale","colorPalette","min","max","display","hoverValue","useStopsPercentage","colors","setColors","scaleHover","setScaleHover","percent","setPercent","theme","styles","getStyles","getGradientStops","onScaleMouseMove","event","divOffset","offsetWidth","normPercentage","scaleValue","onScaleMouseLeave","clampPercent100","colorArray","stops","colorCount","incr","per","color","gradientEnd","skip","gradientStops","i","v","getDisplayValuesAndLinks","data","rowIndex","columnIndex","sortOrder","mode","fields","hoveredField","visibleFields","f","traceIDField","field","orderedVisibleFields","displayValues","links","linkLookup","value","fieldDisplay","link","key","a","b","DataHoverView","header","padding","maxHeight","dispValuesAndLinks","displayValue","renderHistogram","can","histCanWidth","histCanHeight","xVals","countVals","index","yBucketCount","histCtx","fromIdx","toIdx","maxCount","c","pHov","pRest","j","pctY","pctX","p","xCoord","width","getHoverCellColor","colorIndex","cellColor","conversions","noPluralize","formatMilliseconds","milliseconds","unit","unitString","getFieldFromData","fieldType","isSparse","name","getSparseCellMinMax","xMax","yMin","yMax","interval","HeatmapTooltip","props","HeatmapHoverCell","defaultHistogramWidth","defaultHistogramHeight","dataIdxs","dataRef","showHistogram","isPinned","showColorScale","annotate","maxWidth","replaceVariables","xField","yField","countField","xDisp","yVals","meta","yDisp","yBucketMin","yBucketMax","xBucketMin","xBucketMax","nonNumericOrdinalDisplay","contentItems","getYValueIndex","idx","yValueIdx","xValueIdx","getData","yMinIdx","yMaxIdx","exp","getDisplayData","vals","count","getCountValue","label","getContentLabels","isMulti","fromToInt","xVal","val","footer","actions","linksField","visible","hasLinks","VizTooltipFooter","themeSpacing","histCssWidth","histCssHeight","headerItem","customContent","VizTooltipWrapper","VizTooltipHeader","VizTooltipContent","content","prepareHeatmapData","frames","annotations","options","palette","timeRange","exemplars","calculation","getCalculationObjectWithDefaults","getDenseHeatmapData","rowsHeatmap","frame","getSparseHeatmapData","numberFields","updateFieldDisplay","valueField","disp","minValue","maxValue","xName","yName","xs","ys","dlen","yBinQty","xBinQty","yBinIncr","xBinIncr","calcX","calcY","opts","decimals","colorSchemes","DEFAULT_SCHEME","scheme","quantizeScheme","steps","fill","tinycolor","scale","fnName","interpolate","rgbStr","rgb","HeatmapPanel","id","timeZone","height","fieldConfig","eventBus","onChangeTimeRange","sync","eventsScope","canAddAnnotations","onSelectRange","cursorSync","newAnnotationRange","setNewAnnotationRange","timeRangeRef","info","ex","facets","exemplarsXFacet","exemplarsYFacet","builder","scaleConfig","renderLegend","VizLayout","PanelDataErrorView","enableAnnotationCreation","vizWidth","vizHeight","EventBusPlugin","TooltipPlugin2","u","seriesIdx","dismiss","timeRange2","viaSync","AnnotationsPlugin2","OutsideRangePlugin","heatmapMigrationHandler","panel","heatmapChangedHandler","showTooltip","prevPluginId","prevOptions","prevFieldConfig","angularToReactHeatmap","bucketFrame","angular","calculate","oldYAxis","cellGap","asNumber","getHeatmapCellLayout","current","defaultValue","num","HeatmapSuggestionsSupplier","dataSummary","config","PanelPlugin","context","isOrdinalY","category","df"],"sourceRoot":""}