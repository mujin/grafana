{"version":3,"file":"ServiceAccountCreatePage.6ac1ebaf1cc20c02428e.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/Form/Form.tsx","webpack://grafana/./public/app/core/components/RolePicker/UserRolePicker.tsx","webpack://grafana/./public/app/core/components/RolePickerDrawer/RolePickerDrawer.tsx","webpack://grafana/./public/app/features/admin/OrgRolePicker.tsx","webpack://grafana/./public/app/core/components/RolePickerDrawer/RolePickerSelect.tsx","webpack://grafana/./public/app/features/serviceaccounts/ServiceAccountCreatePage.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { HTMLProps, useEffect } from 'react';\nimport * as React from 'react';\nimport {\n  useForm,\n  Mode,\n  DefaultValues,\n  SubmitHandler,\n  FieldValues,\n  UseFormReturn,\n  FieldErrors,\n  FieldPath,\n} from 'react-hook-form';\n\nexport type FormAPI<T extends FieldValues> = Omit<UseFormReturn<T>, 'handleSubmit'> & {\n  errors: FieldErrors<T>;\n};\n\ninterface FormProps<T extends FieldValues> extends Omit<HTMLProps<HTMLFormElement>, 'onSubmit' | 'children'> {\n  validateOn?: Mode;\n  validateOnMount?: boolean;\n  validateFieldsOnMount?: FieldPath<T> | Array<FieldPath<T>>;\n  defaultValues?: DefaultValues<T>;\n  onSubmit: SubmitHandler<T>;\n  children: (api: FormAPI<T>) => React.ReactNode;\n  /** Sets max-width for container. Use it instead of setting individual widths on inputs.*/\n  maxWidth?: number | 'none';\n}\n\nexport function Form<T extends FieldValues>({\n  defaultValues,\n  onSubmit,\n  validateOnMount = false,\n  validateFieldsOnMount,\n  children,\n  validateOn = 'onSubmit',\n  maxWidth = 600,\n  ...htmlProps\n}: FormProps<T>) {\n  const { handleSubmit, trigger, formState, ...rest } = useForm<T>({\n    mode: validateOn,\n    defaultValues,\n  });\n\n  useEffect(() => {\n    if (validateOnMount) {\n      trigger(validateFieldsOnMount);\n    }\n  }, [trigger, validateFieldsOnMount, validateOnMount]);\n\n  return (\n    <form\n      className={css({\n        maxWidth: maxWidth !== 'none' ? maxWidth + 'px' : maxWidth,\n        width: '100%',\n      })}\n      onSubmit={handleSubmit(onSubmit)}\n      {...htmlProps}\n    >\n      {children({ errors: formState.errors, formState, trigger, ...rest })}\n    </form>\n  );\n}\n","import { useEffect } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { contextSrv } from 'app/core/core';\nimport { Role, OrgRole, AccessControlAction } from 'app/types';\n\nimport { RolePicker } from './RolePicker';\nimport { fetchUserRoles, updateUserRoles } from './api';\n\nexport interface Props {\n  basicRole: OrgRole;\n  roles?: Role[];\n  userId: number;\n  orgId?: number;\n  onBasicRoleChange: (newRole: OrgRole) => void;\n  roleOptions: Role[];\n  disabled?: boolean;\n  basicRoleDisabled?: boolean;\n  basicRoleDisabledMessage?: string;\n  /**\n   * Set whether the component should send a request with the new roles to the\n   * backend in UserRolePicker.onRolesChange (apply=false), or call {@link onApplyRoles}\n   * with the updated list of roles (apply=true).\n   *\n   * Besides it sets the RolePickerMenu's Button title to\n   *   * `Update` in case apply equals false\n   *   * `Apply` in case apply equals true\n   *\n   * @default false\n   */\n  apply?: boolean;\n  onApplyRoles?: (newRoles: Role[], userId: number, orgId: number | undefined) => void;\n  pendingRoles?: Role[];\n  maxWidth?: string | number;\n  width?: string | number;\n  isLoading?: boolean;\n}\n\nexport const UserRolePicker = ({\n  basicRole,\n  roles,\n  userId,\n  orgId,\n  onBasicRoleChange,\n  roleOptions,\n  disabled,\n  basicRoleDisabled,\n  basicRoleDisabledMessage,\n  apply = false,\n  onApplyRoles,\n  pendingRoles,\n  maxWidth,\n  width,\n  isLoading,\n}: Props) => {\n  const [{ loading, value: appliedRoles = roles || [] }, getUserRoles] = useAsyncFn(async () => {\n    try {\n      if (roles) {\n        return roles;\n      }\n      if (apply && Boolean(pendingRoles?.length)) {\n        return pendingRoles;\n      }\n\n      if (contextSrv.hasPermission(AccessControlAction.ActionUserRolesList) && userId > 0) {\n        return await fetchUserRoles(userId, orgId);\n      }\n    } catch (e) {\n      // TODO handle error\n      console.error('Error loading options');\n    }\n    return [];\n  }, [orgId, userId, pendingRoles, roles]);\n\n  useEffect(() => {\n    // only load roles when there is an Org selected\n    if (orgId) {\n      getUserRoles();\n    }\n  }, [getUserRoles, orgId]);\n\n  const onRolesChange = async (roles: Role[]) => {\n    if (!apply) {\n      await updateUserRoles(roles, userId, orgId);\n      await getUserRoles();\n    } else if (onApplyRoles) {\n      onApplyRoles(roles, userId, orgId);\n    }\n  };\n\n  const canUpdateRoles =\n    contextSrv.hasPermission(AccessControlAction.ActionUserRolesAdd) &&\n    contextSrv.hasPermission(AccessControlAction.ActionUserRolesRemove);\n\n  return (\n    <RolePicker\n      appliedRoles={appliedRoles}\n      basicRole={basicRole}\n      onRolesChange={onRolesChange}\n      onBasicRoleChange={onBasicRoleChange}\n      roleOptions={roleOptions}\n      isLoading={loading || isLoading}\n      disabled={disabled}\n      basicRoleDisabled={basicRoleDisabled}\n      basicRoleDisabledMessage={basicRoleDisabledMessage}\n      showBasicRole\n      apply={apply}\n      canUpdateRoles={canUpdateRoles}\n      maxWidth={maxWidth}\n      width={width}\n    />\n  );\n};\n","import { Controller, useFormContext } from 'react-hook-form';\n\nimport { toOption } from '@grafana/data';\nimport { Drawer, Field, RadioButtonGroup, TextLink } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\nimport { OrgRole } from 'app/types';\n\nconst roleOptions = Object.keys(OrgRole).map(toOption);\n\nconst drawerSubtitle = (\n  <Trans i18nKey=\"role-picker.title.description\">\n    Assign roles to users to ensure granular control over access to Grafana&lsquo;s features and resources. Find out\n    more in our{' '}\n    <TextLink\n      external\n      href=\"https://grafana.com/docs/grafana/latest/administration/roles-and-permissions/#organization-roles\"\n    >\n      documentation\n    </TextLink>\n    .\n  </Trans>\n);\n\nexport interface Props {\n  onClose: () => void;\n}\n\nexport const RolePickerDrawer = ({ onClose }: Props) => {\n  const methods = useFormContext();\n  const { control, getValues, setValue } = methods;\n  const [name, roles] = getValues(['name', 'roles']);\n  return (\n    <Drawer title={name} subtitle={drawerSubtitle} onClose={onClose}>\n      <Field label={t('role-picker-drawer.basic-roles.label', 'Basic Roles')}>\n        <Controller\n          name=\"role\"\n          control={control}\n          render={({ field: { onChange, ref, ...fields } }) => (\n            <RadioButtonGroup\n              {...fields}\n              options={roleOptions}\n              onChange={(v) => {\n                setValue('roleCollection', [v, ...roles]);\n                onChange(v);\n              }}\n            />\n          )}\n        />\n      </Field>\n    </Drawer>\n  );\n};\n","import { OrgRole } from '@grafana/data';\nimport { Select } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\ninterface Props {\n  value: OrgRole;\n  disabled?: boolean;\n  'aria-label'?: string;\n  inputId?: string;\n  onChange: (role: OrgRole) => void;\n  autoFocus?: boolean;\n  width?: number | 'auto';\n}\n\nconst basicRoles = Object.values(OrgRole).filter((r) => r !== OrgRole.None);\nconst options = basicRoles.map((r) => ({ label: r, value: r }));\n\nexport function OrgRolePicker({ value, onChange, 'aria-label': ariaLabel, inputId, autoFocus, ...restProps }: Props) {\n  return (\n    <Select\n      inputId={inputId}\n      value={value}\n      options={options}\n      onChange={(val) => onChange(val.value ?? OrgRole.None)}\n      placeholder={t('admin.org-role-picker.placeholder-choose-role', 'Choose role...')}\n      aria-label={ariaLabel}\n      autoFocus={autoFocus}\n      {...restProps}\n    />\n  );\n}\n","import { useState } from 'react';\nimport { Controller, useFormContext } from 'react-hook-form';\n\nimport { toOption } from '@grafana/data';\nimport { MultiSelect } from '@grafana/ui';\n\nimport { RolePickerDrawer } from './RolePickerDrawer';\n\nexport interface Props {}\n\nexport const RolePickerSelect = ({}: Props) => {\n  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n  const { control } = useFormContext();\n\n  const toggleDrawer = () => setIsDrawerOpen(!isDrawerOpen);\n\n  return (\n    <>\n      <Controller\n        name=\"role-collection\"\n        control={control}\n        render={({ field: { ref, value, ...field } }) => (\n          <MultiSelect\n            {...field}\n            onOpenMenu={toggleDrawer}\n            onChange={() => {\n              // TODO cannnot remove basic roles\n              // TODO open drawer instead\n            }}\n            value={value?.map(toOption)}\n          />\n        )}\n      />\n      {isDrawerOpen && <RolePickerDrawer onClose={toggleDrawer} />}\n    </>\n  );\n};\n","import { useCallback, useEffect, useState } from 'react';\nimport { FormProvider, useForm } from 'react-hook-form';\n\nimport { config, getBackendSrv, locationService } from '@grafana/runtime';\nimport { Button, Input, Field, FieldSet } from '@grafana/ui';\nimport { Form } from 'app/core/components/Form/Form';\nimport { Page } from 'app/core/components/Page/Page';\nimport { UserRolePicker } from 'app/core/components/RolePicker/UserRolePicker';\nimport { fetchRoleOptions, updateUserRoles } from 'app/core/components/RolePicker/api';\nimport { RolePickerSelect } from 'app/core/components/RolePickerDrawer/RolePickerSelect';\nimport { contextSrv } from 'app/core/core';\nimport { t, Trans } from 'app/core/internationalization';\nimport { AccessControlAction, OrgRole, Role, ServiceAccountCreateApiResponse, ServiceAccountDTO } from 'app/types';\n\nimport { OrgRolePicker } from '../admin/OrgRolePicker';\n\nexport interface Props {}\n\nconst createServiceAccount = async (sa: ServiceAccountDTO) => {\n  const result = await getBackendSrv().post('/api/serviceaccounts/', sa);\n  await contextSrv.fetchUserPermissions();\n  return result;\n};\n\nconst updateServiceAccount = async (uid: string, sa: ServiceAccountDTO) =>\n  getBackendSrv().patch(`/api/serviceaccounts/${uid}`, sa);\n\nconst defaultServiceAccount = {\n  id: 0,\n  uid: '',\n  orgId: contextSrv.user.orgId,\n  role: contextSrv.licensedAccessControlEnabled() ? OrgRole.None : OrgRole.Viewer,\n  tokens: 0,\n  name: '',\n  login: '',\n  isDisabled: false,\n  createdAt: '',\n  teams: [],\n};\n\nexport const ServiceAccountCreatePage = ({}: Props): JSX.Element => {\n  const [roleOptions, setRoleOptions] = useState<Role[]>([]);\n  const [pendingRoles, setPendingRoles] = useState<Role[]>([]);\n\n  const methods = useForm({\n    defaultValues: {\n      name: '',\n      role: defaultServiceAccount.role,\n      roleCollection: [defaultServiceAccount.role],\n      roles: [],\n    },\n  });\n  const {\n    formState: { errors },\n    register,\n  } = methods;\n\n  const currentOrgId = contextSrv.user.orgId;\n  const [serviceAccount, setServiceAccount] = useState<ServiceAccountDTO>(defaultServiceAccount);\n\n  useEffect(() => {\n    async function fetchOptions() {\n      try {\n        if (contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n          let options = await fetchRoleOptions(currentOrgId);\n          setRoleOptions(options);\n        }\n      } catch (e) {\n        console.error('Error loading options', e); // TODO: handle error\n      }\n    }\n    if (contextSrv.licensedAccessControlEnabled()) {\n      fetchOptions();\n    }\n  }, [currentOrgId]);\n\n  const onSubmit = useCallback(\n    async (data: ServiceAccountDTO) => {\n      data.role = serviceAccount.role;\n      const response = await createServiceAccount(data);\n      try {\n        const newAccount: ServiceAccountCreateApiResponse = {\n          avatarUrl: response.avatarUrl,\n          id: response.id,\n          uid: response.uid,\n          isDisabled: response.isDisabled,\n          login: response.login,\n          name: response.name,\n          orgId: response.orgId,\n          role: response.role,\n          tokens: response.tokens,\n        };\n        await updateServiceAccount(newAccount.uid, data);\n        if (\n          contextSrv.licensedAccessControlEnabled() &&\n          contextSrv.hasPermission(AccessControlAction.ActionUserRolesAdd) &&\n          contextSrv.hasPermission(AccessControlAction.ActionUserRolesRemove)\n        ) {\n          await updateUserRoles(pendingRoles, newAccount.id, newAccount.orgId);\n        }\n      } catch (e) {\n        console.error(e); // TODO: handle error\n      }\n      locationService.push(`/org/serviceaccounts/${response.uid}`);\n    },\n    [serviceAccount.role, pendingRoles]\n  );\n\n  const onRoleChange = (role: OrgRole) => {\n    setServiceAccount({\n      ...serviceAccount,\n      role: role,\n    });\n  };\n\n  const onPendingRolesUpdate = (roles: Role[], userId: number, orgId: number | undefined) => {\n    // keep the new role assignments for user\n    setPendingRoles(roles);\n  };\n\n  return (\n    <Page\n      navId=\"serviceaccounts\"\n      pageNav={{ text: t('service-account-create-page.page-nav.label', 'Create service account') }}\n    >\n      <Page.Contents>\n        {config.featureToggles.rolePickerDrawer && (\n          <FormProvider {...methods}>\n            <form>\n              <FieldSet>\n                <Field\n                  label={t('service-account-create-page.name.label', 'Display name')}\n                  required\n                  invalid={!!errors.name}\n                  error={\n                    errors.name\n                      ? t('service-account-create-page.name.required-error', 'Display name is required')\n                      : undefined\n                  }\n                >\n                  <Input id=\"name\" {...register('name', { required: true })} autoFocus />\n                </Field>\n                <Field label={t('service-account-create-page.role.label', 'Role')}>\n                  <RolePickerSelect />\n                </Field>\n              </FieldSet>\n              <Button type=\"submit\">\n                <Trans i18nKey=\"service-account-create-page.create.button\">Create</Trans>\n              </Button>\n            </form>\n          </FormProvider>\n        )}\n        {!config.featureToggles.rolePickerDrawer && (\n          <Form onSubmit={onSubmit} validateOn=\"onSubmit\">\n            {({ register, errors }) => {\n              return (\n                <>\n                  <FieldSet>\n                    <Field\n                      label={t('service-account-create-page.name.label', 'Display name')}\n                      required\n                      invalid={!!errors.name}\n                      error={\n                        errors.name\n                          ? t('service-account-create-page.name.required-error', 'Display name is required')\n                          : undefined\n                      }\n                    >\n                      <Input id=\"display-name-input\" {...register('name', { required: true })} autoFocus />\n                    </Field>\n                    <Field label={t('service-account-create-page.role.label', 'Role')}>\n                      {contextSrv.licensedAccessControlEnabled() ? (\n                        <UserRolePicker\n                          apply\n                          userId={serviceAccount.id || 0}\n                          orgId={serviceAccount.orgId}\n                          basicRole={serviceAccount.role}\n                          onBasicRoleChange={onRoleChange}\n                          roleOptions={roleOptions}\n                          onApplyRoles={onPendingRolesUpdate}\n                          pendingRoles={pendingRoles}\n                          maxWidth=\"100%\"\n                        />\n                      ) : (\n                        <OrgRolePicker\n                          aria-label={t('service-account-create-page.role.label', 'Role')}\n                          value={serviceAccount.role}\n                          onChange={onRoleChange}\n                        />\n                      )}\n                    </Field>\n                  </FieldSet>\n                  <Button type=\"submit\">\n                    <Trans i18nKey=\"service-account-create-page.create.button\">Create</Trans>\n                  </Button>\n                </>\n              );\n            }}\n          </Form>\n        )}\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default ServiceAccountCreatePage;\n"],"names":["Form","defaultValues","onSubmit","validateOnMount","validateFieldsOnMount","children","validateOn","maxWidth","htmlProps","handleSubmit","trigger","formState","rest","UserRolePicker","basicRole","roles","userId","orgId","onBasicRoleChange","roleOptions","disabled","basicRoleDisabled","basicRoleDisabledMessage","apply","onApplyRoles","pendingRoles","width","isLoading","loading","appliedRoles","getUserRoles","onRolesChange","canUpdateRoles","drawerSubtitle","RolePickerDrawer","onClose","methods","control","getValues","setValue","name","onChange","ref","fields","v","options","r","OrgRolePicker","value","ariaLabel","inputId","autoFocus","restProps","val","RolePickerSelect","isDrawerOpen","setIsDrawerOpen","toggleDrawer","field","createServiceAccount","sa","result","updateServiceAccount","uid","defaultServiceAccount","ServiceAccountCreatePage","setRoleOptions","setPendingRoles","errors","register","currentOrgId","serviceAccount","setServiceAccount","fetchOptions","e","data","response","newAccount","onRoleChange","role","onPendingRolesUpdate","Page","config","FieldSet","Field","Input","Button"],"sourceRoot":""}