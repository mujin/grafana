{"version":3,"file":"sql-query-editor.e58e085116050d22952e.js","mappings":"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","sources":["webpack://grafana/./packages/grafana-sql/src/components/ConfirmModal.tsx","webpack://grafana/./packages/grafana-sql/src/components/DatasetSelector.tsx","webpack://grafana/./packages/grafana-sql/src/components/TableSelector.tsx","webpack://grafana/./packages/grafana-sql/src/components/QueryHeader.tsx","webpack://grafana/./packages/grafana-sql/src/components/query-editor-raw/QueryEditorRaw.tsx","webpack://grafana/./packages/grafana-sql/src/components/query-editor-raw/QueryValidator.tsx","webpack://grafana/./packages/grafana-sql/src/components/query-editor-raw/QueryToolbox.tsx","webpack://grafana/./packages/grafana-sql/src/components/query-editor-raw/RawEditor.tsx","webpack://grafana/./packages/grafana-sql/src/utils/useSqlChange.ts","webpack://grafana/./packages/grafana-sql/src/components/visual-query-builder/GroupByRow.tsx","webpack://grafana/./packages/grafana-sql/src/components/visual-query-builder/SQLGroupByRow.tsx","webpack://grafana/./packages/grafana-sql/src/components/visual-query-builder/OrderByRow.tsx","webpack://grafana/./packages/grafana-sql/src/components/visual-query-builder/SQLOrderByRow.tsx","webpack://grafana/./packages/grafana-sql/src/components/visual-query-builder/AwesomeQueryBuilder.tsx","webpack://grafana/./packages/grafana-sql/src/components/visual-query-builder/WhereRow.tsx","webpack://grafana/./packages/grafana-sql/src/components/visual-query-builder/SQLWhereRow.tsx","webpack://grafana/./packages/grafana-sql/src/components/visual-query-builder/SelectColumn.tsx","webpack://grafana/./packages/grafana-sql/src/components/visual-query-builder/SelectCustomFunctionParameters.tsx","webpack://grafana/./packages/grafana-sql/src/components/visual-query-builder/SelectFunctionParameters.tsx","webpack://grafana/./packages/grafana-sql/src/components/visual-query-builder/SelectRow.tsx","webpack://grafana/./packages/grafana-sql/src/components/visual-query-builder/VisualEditor.tsx","webpack://grafana/./packages/grafana-sql/src/components/QueryEditor.tsx","webpack://grafana/./node_modules/react-use/lib/useDebounce.js","webpack://grafana/./node_modules/react-use/lib/useTimeoutFn.js","webpack://grafana/./node_modules/@grafana/plugin-ui/dist/esm/components/QueryEditor/EditorHeader.js","webpack://grafana/./node_modules/@grafana/plugin-ui/dist/esm/components/QueryEditor/FlexItem.js","webpack://grafana/./node_modules/@grafana/plugin-ui/dist/esm/components/QueryEditor/InlineSelect.js"],"sourcesContent":["import { css } from '@emotion/css';\nimport { useRef, useEffect } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Icon, Modal, useStyles2 } from '@grafana/ui';\n\ntype ConfirmModalProps = {\n  isOpen: boolean;\n  onCancel?: () => void;\n  onDiscard?: () => void;\n  onCopy?: () => void;\n};\nexport function ConfirmModal({ isOpen, onCancel, onDiscard, onCopy }: ConfirmModalProps) {\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const styles = useStyles2(getStyles);\n\n  // Moved from grafana/ui\n  useEffect(() => {\n    // for some reason autoFocus property did no work on this button, but this does\n    if (isOpen) {\n      buttonRef.current?.focus();\n    }\n  }, [isOpen]);\n\n  return (\n    <Modal\n      title={\n        <div className={styles.modalHeaderTitle}>\n          <Icon name=\"exclamation-triangle\" size=\"lg\" />\n          <span className={styles.titleText}>Warning</span>\n        </div>\n      }\n      onDismiss={onCancel}\n      isOpen={isOpen}\n    >\n      <p>\n        Builder mode does not display changes made in code. The query builder will display the last changes you made in\n        builder mode.\n      </p>\n      <p>Do you want to copy your code to the clipboard?</p>\n      <Modal.ButtonRow>\n        <Button type=\"button\" variant=\"secondary\" onClick={onCancel} fill=\"outline\">\n          Cancel\n        </Button>\n        <Button variant=\"destructive\" type=\"button\" onClick={onDiscard} ref={buttonRef}>\n          Discard code and switch\n        </Button>\n        <Button variant=\"primary\" onClick={onCopy}>\n          Copy code and switch\n        </Button>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  titleText: css({\n    paddingLeft: theme.spacing(2),\n  }),\n  modalHeaderTitle: css({\n    fontSize: theme.typography.size.lg,\n    float: 'left',\n    paddingTop: theme.spacing(1),\n    margin: theme.spacing(0, 2),\n  }),\n});\n","import { useEffect } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { DB, ResourceSelectorProps, SQLDialect, toOption } from '../types';\n\nimport { isSqlDatasourceDatabaseSelectionFeatureFlagEnabled } from './QueryEditorFeatureFlag.utils';\n\nexport interface DatasetSelectorProps extends ResourceSelectorProps {\n  db: DB;\n  dataset: string | undefined;\n  preconfiguredDataset: string;\n  dialect: SQLDialect;\n  onChange: (v: SelectableValue) => void;\n  inputId?: string | undefined;\n}\n\nexport const DatasetSelector = ({\n  dataset,\n  db,\n  dialect,\n  onChange,\n  inputId,\n  preconfiguredDataset,\n}: DatasetSelectorProps) => {\n  /*\n    The behavior of this component - for MSSQL and MySQL datasources - is based on whether the user chose to create a datasource\n    with or without a default database (preconfiguredDataset). If the user configured a default database, this selector\n    should only allow that single preconfigured database option to be selected. If the user chose to NOT assign/configure a default database,\n    then the user should be able to use this component to choose between multiple databases available to the datasource.\n  */\n  // `hasPreconfigCondition` is true if either 1) the sql datasource has a preconfigured default database,\n  // OR if 2) the datasource is Postgres. In either case the only option available to the user is the preconfigured database.\n  const hasPreconfigCondition = !!preconfiguredDataset || dialect === 'postgres';\n\n  const state = useAsync(async () => {\n    if (isSqlDatasourceDatabaseSelectionFeatureFlagEnabled()) {\n      // If a default database is already configured for a MSSQL or MySQL data source, OR the data source is Postgres, no need to fetch other databases.\n      if (hasPreconfigCondition) {\n        // Set the current database to the preconfigured database.\n        onChange(toOption(preconfiguredDataset));\n        return [toOption(preconfiguredDataset)];\n      }\n    }\n\n    // If there is no preconfigured database, but there is a selected dataset, set the current database to the selected dataset.\n    if (dataset) {\n      onChange(toOption(dataset));\n    }\n\n    // Otherwise, fetch all databases available to the datasource.\n    const datasets = await db.datasets();\n    return datasets.map(toOption);\n  }, []);\n\n  useEffect(() => {\n    if (!isSqlDatasourceDatabaseSelectionFeatureFlagEnabled()) {\n      // Set default dataset when values are fetched\n      if (!dataset) {\n        if (state.value && state.value[0]) {\n          onChange(state.value[0]);\n        }\n      } else {\n        if (state.value && state.value.find((v) => v.value === dataset) === undefined) {\n          // if value is set and newly fetched values does not contain selected value\n          if (state.value.length > 0) {\n            onChange(state.value[0]);\n          }\n        }\n      }\n    }\n  }, [state.value, onChange, dataset]);\n\n  return (\n    <Select\n      aria-label=\"Dataset selector\"\n      inputId={inputId}\n      value={dataset}\n      options={state.value}\n      onChange={onChange}\n      disabled={state.loading}\n      isLoading={state.loading}\n      menuShouldPortal={true}\n    />\n  );\n};\n","import { useAsync } from 'react-use';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Select } from '@grafana/ui';\n\nimport { DB, ResourceSelectorProps } from '../types';\n\nexport interface TableSelectorProps extends ResourceSelectorProps {\n  db: DB;\n  table: string | undefined;\n  dataset: string | undefined;\n  onChange: (v: SelectableValue) => void;\n  inputId?: string | undefined;\n}\n\nexport const TableSelector = ({ db, dataset, table, className, onChange, inputId }: TableSelectorProps) => {\n  const state = useAsync(async () => {\n    // No need to attempt to fetch tables for an unknown dataset.\n    if (!dataset) {\n      return [];\n    }\n\n    const tables = await db.tables(dataset);\n    return tables.map(toOption);\n  }, [dataset]);\n\n  return (\n    <Select\n      className={className}\n      disabled={state.loading}\n      aria-label=\"Table selector\"\n      inputId={inputId}\n      data-testid={selectors.components.SQLQueryEditor.headerTableSelector}\n      value={table}\n      options={state.value}\n      onChange={onChange}\n      isLoading={state.loading}\n      menuShouldPortal={true}\n      placeholder={state.loading ? 'Loading tables' : 'Select table'}\n    />\n  );\n};\n","import { useCallback, useId, useState } from 'react';\nimport { useCopyToClipboard } from 'react-use';\n\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorField, EditorHeader, EditorMode, EditorRow, FlexItem, InlineSelect } from '@grafana/plugin-ui';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, InlineSwitch, RadioButtonGroup, Tooltip, Space } from '@grafana/ui';\n\nimport { QueryWithDefaults } from '../defaults';\nimport { SQLQuery, QueryFormat, QueryRowFilter, QUERY_FORMAT_OPTIONS, DB, SQLDialect } from '../types';\n\nimport { ConfirmModal } from './ConfirmModal';\nimport { DatasetSelector } from './DatasetSelector';\nimport { isSqlDatasourceDatabaseSelectionFeatureFlagEnabled } from './QueryEditorFeatureFlag.utils';\nimport { TableSelector } from './TableSelector';\n\nexport interface QueryHeaderProps {\n  db: DB;\n  dialect: SQLDialect;\n  isQueryRunnable: boolean;\n  onChange: (query: SQLQuery) => void;\n  onQueryRowChange: (queryRowFilter: QueryRowFilter) => void;\n  onRunQuery: () => void;\n  preconfiguredDataset: string;\n  query: QueryWithDefaults;\n  queryRowFilter: QueryRowFilter;\n}\n\nconst editorModes = [\n  { label: 'Builder', value: EditorMode.Builder },\n  { label: 'Code', value: EditorMode.Code },\n];\n\nexport function QueryHeader({\n  db,\n  dialect,\n  isQueryRunnable,\n  onChange,\n  onQueryRowChange,\n  onRunQuery,\n  preconfiguredDataset,\n  query,\n  queryRowFilter,\n}: QueryHeaderProps) {\n  const { editorMode } = query;\n  const [_, copyToClipboard] = useCopyToClipboard();\n  const [showConfirm, setShowConfirm] = useState(false);\n  const toRawSql = db.toRawSql;\n\n  const htmlId = useId();\n\n  const onEditorModeChange = useCallback(\n    (newEditorMode: EditorMode) => {\n      if (newEditorMode === EditorMode.Code) {\n        reportInteraction('grafana_sql_editor_mode_changed', {\n          datasource: query.datasource?.type,\n          selectedEditorMode: EditorMode.Code,\n        });\n      }\n\n      if (editorMode === EditorMode.Code) {\n        setShowConfirm(true);\n        return;\n      }\n      onChange({ ...query, editorMode: newEditorMode });\n    },\n    [editorMode, onChange, query]\n  );\n\n  const onFormatChange = (e: SelectableValue) => {\n    const next = { ...query, format: e.value !== undefined ? e.value : QueryFormat.Table };\n\n    reportInteraction('grafana_sql_format_changed', {\n      datasource: query.datasource?.type,\n      selectedFormat: next.format,\n    });\n    onChange(next);\n  };\n\n  const onDatasetChange = (e: SelectableValue) => {\n    if (e.value === query.dataset) {\n      return;\n    }\n\n    const next = {\n      ...query,\n      dataset: e.value,\n      table: undefined,\n      sql: undefined,\n      rawSql: '',\n    };\n\n    onChange(next);\n  };\n\n  const onTableChange = (e: SelectableValue) => {\n    if (e.value === query.table) {\n      return;\n    }\n\n    const next: SQLQuery = {\n      ...query,\n      table: e.value,\n      sql: undefined,\n      rawSql: '',\n    };\n\n    onChange(next);\n  };\n\n  const datasetDropdownIsAvailable = () => {\n    if (dialect === 'influx') {\n      return false;\n    }\n    // If the feature flag is DISABLED, && the datasource is Postgres (`dialect = 'postgres`),\n    // we want to hide the dropdown - as per previous behavior.\n    if (!isSqlDatasourceDatabaseSelectionFeatureFlagEnabled() && dialect === 'postgres') {\n      return false;\n    }\n\n    return true;\n  };\n\n  return (\n    <>\n      <EditorHeader>\n        <InlineSelect\n          label=\"Format\"\n          value={query.format}\n          placeholder=\"Select format\"\n          menuShouldPortal\n          onChange={onFormatChange}\n          options={QUERY_FORMAT_OPTIONS}\n        />\n\n        {editorMode === EditorMode.Builder && (\n          <>\n            <InlineSwitch\n              id={`sql-filter-${htmlId}`}\n              label=\"Filter\"\n              data-testid={selectors.components.SQLQueryEditor.headerFilterSwitch}\n              transparent={true}\n              showLabel={true}\n              value={queryRowFilter.filter}\n              onChange={(ev) => {\n                if (!(ev.target instanceof HTMLInputElement)) {\n                  return;\n                }\n\n                reportInteraction('grafana_sql_filter_toggled', {\n                  datasource: query.datasource?.type,\n                  displayed: ev.target.checked,\n                });\n\n                onQueryRowChange({ ...queryRowFilter, filter: ev.target.checked });\n              }}\n            />\n\n            <InlineSwitch\n              id={`sql-group-${htmlId}`}\n              label=\"Group\"\n              data-testid={selectors.components.SQLQueryEditor.headerGroupSwitch}\n              transparent={true}\n              showLabel={true}\n              value={queryRowFilter.group}\n              onChange={(ev) => {\n                if (!(ev.target instanceof HTMLInputElement)) {\n                  return;\n                }\n\n                reportInteraction('grafana_sql_group_toggled', {\n                  datasource: query.datasource?.type,\n                  displayed: ev.target.checked,\n                });\n\n                onQueryRowChange({ ...queryRowFilter, group: ev.target.checked });\n              }}\n            />\n\n            <InlineSwitch\n              id={`sql-order-${htmlId}`}\n              label=\"Order\"\n              data-testid={selectors.components.SQLQueryEditor.headerOrderSwitch}\n              transparent={true}\n              showLabel={true}\n              value={queryRowFilter.order}\n              onChange={(ev) => {\n                if (!(ev.target instanceof HTMLInputElement)) {\n                  return;\n                }\n\n                reportInteraction('grafana_sql_order_toggled', {\n                  datasource: query.datasource?.type,\n                  displayed: ev.target.checked,\n                });\n\n                onQueryRowChange({ ...queryRowFilter, order: ev.target.checked });\n              }}\n            />\n\n            <InlineSwitch\n              id={`sql-preview-${htmlId}`}\n              label=\"Preview\"\n              data-testid={selectors.components.SQLQueryEditor.headerPreviewSwitch}\n              transparent={true}\n              showLabel={true}\n              value={queryRowFilter.preview}\n              onChange={(ev) => {\n                if (!(ev.target instanceof HTMLInputElement)) {\n                  return;\n                }\n\n                reportInteraction('grafana_sql_preview_toggled', {\n                  datasource: query.datasource?.type,\n                  displayed: ev.target.checked,\n                });\n\n                onQueryRowChange({ ...queryRowFilter, preview: ev.target.checked });\n              }}\n            />\n          </>\n        )}\n\n        <FlexItem grow={1} />\n\n        {isQueryRunnable ? (\n          <Button icon=\"play\" variant=\"primary\" size=\"sm\" onClick={() => onRunQuery()}>\n            Run query\n          </Button>\n        ) : (\n          <Tooltip\n            theme=\"error\"\n            content={\n              <>\n                Your query is invalid. Check below for details. <br />\n                However, you can still run this query.\n              </>\n            }\n            placement=\"top\"\n          >\n            <Button icon=\"exclamation-triangle\" variant=\"secondary\" size=\"sm\" onClick={() => onRunQuery()}>\n              Run query\n            </Button>\n          </Tooltip>\n        )}\n\n        <RadioButtonGroup options={editorModes} size=\"sm\" value={editorMode} onChange={onEditorModeChange} />\n\n        <ConfirmModal\n          isOpen={showConfirm}\n          onCopy={() => {\n            reportInteraction('grafana_sql_editor_mode_changed', {\n              datasource: query.datasource?.type,\n              selectedEditorMode: EditorMode.Builder,\n              type: 'copy',\n            });\n\n            setShowConfirm(false);\n            copyToClipboard(query.rawSql!);\n            onChange({\n              ...query,\n              rawSql: toRawSql(query),\n              editorMode: EditorMode.Builder,\n            });\n          }}\n          onDiscard={() => {\n            reportInteraction('grafana_sql_editor_mode_changed', {\n              datasource: query.datasource?.type,\n              selectedEditorMode: EditorMode.Builder,\n              type: 'discard',\n            });\n\n            setShowConfirm(false);\n            onChange({\n              ...query,\n              rawSql: toRawSql(query),\n              editorMode: EditorMode.Builder,\n            });\n          }}\n          onCancel={() => {\n            reportInteraction('grafana_sql_editor_mode_changed', {\n              datasource: query.datasource?.type,\n              selectedEditorMode: EditorMode.Builder,\n              type: 'cancel',\n            });\n\n            setShowConfirm(false);\n          }}\n        />\n      </EditorHeader>\n\n      {editorMode === EditorMode.Builder && (\n        <>\n          <Space v={0.5} />\n          <EditorRow>\n            {datasetDropdownIsAvailable() && (\n              <EditorField label=\"Dataset\" width={25}>\n                <DatasetSelector\n                  db={db}\n                  inputId={`sql-dataset-${htmlId}`}\n                  dataset={query.dataset}\n                  dialect={dialect}\n                  preconfiguredDataset={preconfiguredDataset}\n                  onChange={onDatasetChange}\n                />\n              </EditorField>\n            )}\n            <EditorField label=\"Table\" width={25}>\n              <TableSelector\n                db={db}\n                inputId={`sql-tableselect-${htmlId}`}\n                dataset={query.dataset || preconfiguredDataset}\n                table={query.table}\n                onChange={onTableChange}\n              />\n            </EditorField>\n          </EditorRow>\n        </>\n      )}\n    </>\n  );\n}\n","import { useCallback, useEffect, useRef } from 'react';\nimport * as React from 'react';\n\nimport { LanguageDefinition, SQLEditor } from '@grafana/plugin-ui';\n\nimport { SQLQuery } from '../../types';\n\ntype Props = {\n  query: SQLQuery;\n  onChange: (value: SQLQuery, processQuery: boolean) => void;\n  children?: (props: { formatQuery: () => void }) => React.ReactNode;\n  width?: number;\n  height?: number;\n  editorLanguageDefinition: LanguageDefinition;\n};\n\nexport function QueryEditorRaw({ children, onChange, query, width, height, editorLanguageDefinition }: Props) {\n  // We need to pass query via ref to SQLEditor as onChange is executed via monacoEditor.onDidChangeModelContent callback, not onChange property\n  const queryRef = useRef<SQLQuery>(query);\n  useEffect(() => {\n    queryRef.current = query;\n  }, [query]);\n\n  const onRawQueryChange = useCallback(\n    (rawSql: string, processQuery: boolean) => {\n      const newQuery = {\n        ...queryRef.current,\n        rawQuery: true,\n        rawSql,\n      };\n      onChange(newQuery, processQuery);\n    },\n    [onChange]\n  );\n\n  return (\n    <SQLEditor\n      width={width}\n      height={height}\n      query={query.rawSql!}\n      onChange={onRawQueryChange}\n      language={editorLanguageDefinition}\n    >\n      {children}\n    </SQLEditor>\n  );\n}\n","import { css } from '@emotion/css';\nimport { useState, useMemo, useEffect } from 'react';\nimport { useAsyncFn } from 'react-use';\nimport useDebounce from 'react-use/lib/useDebounce';\n\nimport { formattedValueToString, getValueFormat, TimeRange } from '@grafana/data';\nimport { Icon, Spinner, useTheme2 } from '@grafana/ui';\n\nimport { DB, SQLQuery, ValidationResults } from '../../types';\n\nexport interface QueryValidatorProps {\n  db: DB;\n  query: SQLQuery;\n  range?: TimeRange;\n  onValidate: (isValid: boolean) => void;\n}\n\nexport function QueryValidator({ db, query, onValidate, range }: QueryValidatorProps) {\n  const [validationResult, setValidationResult] = useState<ValidationResults | null>();\n  const theme = useTheme2();\n  const valueFormatter = useMemo(() => getValueFormat('bytes'), []);\n\n  const styles = useMemo(() => {\n    return {\n      error: css({\n        color: theme.colors.error.text,\n        fontSize: theme.typography.bodySmall.fontSize,\n        fontFamily: theme.typography.fontFamilyMonospace,\n      }),\n      valid: css({\n        color: theme.colors.success.text,\n      }),\n      info: css({\n        color: theme.colors.text.secondary,\n      }),\n    };\n  }, [theme]);\n\n  const [state, validateQuery] = useAsyncFn(\n    async (q: SQLQuery) => {\n      if (q.rawSql?.trim() === '') {\n        return null;\n      }\n\n      return await db.validateQuery(q, range);\n    },\n    [db]\n  );\n\n  const [,] = useDebounce(\n    async () => {\n      const result = await validateQuery(query);\n      if (result) {\n        setValidationResult(result);\n      }\n\n      return null;\n    },\n    1000,\n    [query, validateQuery]\n  );\n\n  useEffect(() => {\n    if (validationResult?.isError) {\n      onValidate(false);\n    }\n    if (validationResult?.isValid) {\n      onValidate(true);\n    }\n  }, [validationResult, onValidate]);\n\n  if (!state.value && !state.loading) {\n    return null;\n  }\n\n  const error = state.value?.error ? processErrorMessage(state.value.error) : '';\n\n  return (\n    <>\n      {state.loading && (\n        <div className={styles.info}>\n          <Spinner inline={true} size=\"xs\" /> Validating query...\n        </div>\n      )}\n      {!state.loading && state.value && (\n        <>\n          <>\n            {state.value.isValid && state.value.statistics && (\n              <div className={styles.valid}>\n                <Icon name=\"check\" /> This query will process{' '}\n                <strong>{formattedValueToString(valueFormatter(state.value.statistics.TotalBytesProcessed))}</strong>{' '}\n                when run.\n              </div>\n            )}\n          </>\n\n          <>{state.value.isError && <div className={styles.error}>{error}</div>}</>\n        </>\n      )}\n    </>\n  );\n}\n\nfunction processErrorMessage(error: string) {\n  const splat = error.split(':');\n  if (splat.length > 2) {\n    return splat.slice(2).join(':');\n  }\n  return error;\n}\n","import { css } from '@emotion/css';\nimport { useMemo, useState } from 'react';\n\nimport { reportInteraction } from '@grafana/runtime';\nimport { HorizontalGroup, Icon, IconButton, Tooltip, useTheme2 } from '@grafana/ui';\n\nimport { QueryValidator, QueryValidatorProps } from './QueryValidator';\n\ninterface QueryToolboxProps extends Omit<QueryValidatorProps, 'onValidate'> {\n  showTools?: boolean;\n  isExpanded?: boolean;\n  onFormatCode?: () => void;\n  onExpand?: (expand: boolean) => void;\n  onValidate?: (isValid: boolean) => void;\n}\n\nexport function QueryToolbox({ showTools, onFormatCode, onExpand, isExpanded, ...validatorProps }: QueryToolboxProps) {\n  const theme = useTheme2();\n  const [validationResult, setValidationResult] = useState<boolean>();\n\n  const styles = useMemo(() => {\n    return {\n      container: css({\n        border: `1px solid ${theme.colors.border.medium}`,\n        borderTop: 'none',\n        padding: theme.spacing(0.5, 0.5, 0.5, 0.5),\n        display: 'flex',\n        flexGrow: 1,\n        justifyContent: 'space-between',\n        fontSize: theme.typography.bodySmall.fontSize,\n      }),\n      error: css({\n        color: theme.colors.error.text,\n        fontSize: theme.typography.bodySmall.fontSize,\n        fontFamily: theme.typography.fontFamilyMonospace,\n      }),\n      valid: css({\n        color: theme.colors.success.text,\n      }),\n      info: css({\n        color: theme.colors.text.secondary,\n      }),\n      hint: css({\n        color: theme.colors.text.disabled,\n        whiteSpace: 'nowrap',\n        cursor: 'help',\n      }),\n    };\n  }, [theme]);\n\n  let style = {};\n\n  if (!showTools && validationResult === undefined) {\n    style = { height: 0, padding: 0, visibility: 'hidden' };\n  }\n\n  return (\n    <div className={styles.container} style={style}>\n      <div>\n        {validatorProps.onValidate && (\n          <QueryValidator\n            {...validatorProps}\n            onValidate={(result: boolean) => {\n              setValidationResult(result);\n              validatorProps.onValidate!(result);\n            }}\n          />\n        )}\n      </div>\n      {showTools && (\n        <div>\n          <HorizontalGroup spacing=\"sm\">\n            {onFormatCode && (\n              <IconButton\n                onClick={() => {\n                  reportInteraction('grafana_sql_query_formatted', {\n                    datasource: validatorProps.query.datasource?.type,\n                  });\n                  onFormatCode();\n                }}\n                name=\"brackets-curly\"\n                size=\"xs\"\n                tooltip=\"Format query\"\n              />\n            )}\n            {onExpand && (\n              <IconButton\n                onClick={() => {\n                  reportInteraction('grafana_sql_editor_expand', {\n                    datasource: validatorProps.query.datasource?.type,\n                    expanded: !isExpanded,\n                  });\n\n                  onExpand(!isExpanded);\n                }}\n                name={isExpanded ? 'angle-up' : 'angle-down'}\n                size=\"xs\"\n                tooltip={isExpanded ? 'Collapse editor' : 'Expand editor'}\n              />\n            )}\n            <Tooltip content=\"Hit CTRL/CMD+Return to run query\">\n              <Icon className={styles.hint} name=\"keyboard\" />\n            </Tooltip>\n          </HorizontalGroup>\n        </div>\n      )}\n    </div>\n  );\n}\n","import { css } from '@emotion/css';\nimport { useMemo, useState } from 'react';\nimport { useMeasure } from 'react-use';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Modal, useStyles2, useTheme2 } from '@grafana/ui';\n\nimport { SQLQuery, QueryEditorProps } from '../../types';\n\nimport { QueryEditorRaw } from './QueryEditorRaw';\nimport { QueryToolbox } from './QueryToolbox';\n\ninterface RawEditorProps extends Omit<QueryEditorProps, 'onChange'> {\n  onRunQuery: () => void;\n  onChange: (q: SQLQuery, processQuery: boolean) => void;\n  onValidate: (isValid: boolean) => void;\n  queryToValidate: SQLQuery;\n}\n\nexport function RawEditor({ db, query, onChange, onRunQuery, onValidate, queryToValidate, range }: RawEditorProps) {\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [toolboxRef, toolboxMeasure] = useMeasure<HTMLDivElement>();\n  const [editorRef, editorMeasure] = useMeasure<HTMLDivElement>();\n\n  const editorLanguageDefinition = useMemo(() => db.getEditorLanguageDefinition(), [db]);\n\n  const renderQueryEditor = (width?: number, height?: number) => {\n    return (\n      <QueryEditorRaw\n        editorLanguageDefinition={editorLanguageDefinition}\n        query={query}\n        width={width}\n        height={height ? height - toolboxMeasure.height : undefined}\n        onChange={onChange}\n      >\n        {({ formatQuery }) => {\n          return (\n            <div ref={toolboxRef}>\n              <QueryToolbox\n                db={db}\n                query={queryToValidate}\n                onValidate={onValidate}\n                onFormatCode={formatQuery}\n                showTools\n                range={range}\n                onExpand={setIsExpanded}\n                isExpanded={isExpanded}\n              />\n            </div>\n          );\n        }}\n      </QueryEditorRaw>\n    );\n  };\n\n  const renderEditor = (standalone = false) => {\n    return standalone ? (\n      <AutoSizer>\n        {({ width, height }) => {\n          return renderQueryEditor(width, height);\n        }}\n      </AutoSizer>\n    ) : (\n      <div ref={editorRef}>{renderQueryEditor()}</div>\n    );\n  };\n\n  const renderPlaceholder = () => {\n    return (\n      <div\n        style={{\n          width: editorMeasure.width,\n          height: editorMeasure.height,\n          background: theme.colors.background.primary,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        Editing in expanded code editor\n      </div>\n    );\n  };\n\n  return (\n    <>\n      {isExpanded ? renderPlaceholder() : renderEditor()}\n      {isExpanded && (\n        <Modal\n          title={`Query ${query.refId}`}\n          closeOnBackdropClick={false}\n          closeOnEscape={false}\n          className={styles.modal}\n          contentClassName={styles.modalContent}\n          isOpen={isExpanded}\n          onDismiss={() => {\n            reportInteraction('grafana_sql_editor_expand', {\n              datasource: query.datasource?.type,\n              expanded: false,\n            });\n            setIsExpanded(false);\n          }}\n        >\n          {renderEditor(true)}\n        </Modal>\n      )}\n    </>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    modal: css({\n      width: '95vw',\n      height: '95vh',\n    }),\n    modalContent: css({\n      height: '100%',\n      paddingTop: 0,\n    }),\n  };\n}\n","import { useCallback } from 'react';\n\nimport { DB, SQLExpression, SQLQuery } from '../types';\n\ninterface UseSqlChange {\n  db: DB;\n  query: SQLQuery;\n  onQueryChange: (query: SQLQuery) => void;\n}\n\nexport function useSqlChange({ query, onQueryChange, db }: UseSqlChange) {\n  const onSqlChange = useCallback(\n    (sql: SQLExpression) => {\n      const toRawSql = db.toRawSql;\n      const rawSql = toRawSql({ sql, dataset: query.dataset, table: query.table, refId: query.refId });\n      const newQuery: SQLQuery = { ...query, sql, rawSql };\n      onQueryChange(newQuery);\n    },\n    [db, onQueryChange, query]\n  );\n\n  return { onSqlChange };\n}\n","import { useCallback } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { AccessoryButton, EditorList, InputGroup } from '@grafana/plugin-ui';\nimport { Select } from '@grafana/ui';\n\nimport { QueryEditorGroupByExpression } from '../../expressions';\nimport { SQLExpression } from '../../types';\nimport { setGroupByField } from '../../utils/sql.utils';\n\ninterface GroupByRowProps {\n  sql: SQLExpression;\n  onSqlChange: (sql: SQLExpression) => void;\n  columns?: Array<SelectableValue<string>>;\n}\n\nexport function GroupByRow({ sql, columns, onSqlChange }: GroupByRowProps) {\n  const onGroupByChange = useCallback(\n    (item: Array<Partial<QueryEditorGroupByExpression>>) => {\n      // As new (empty object) items come in, we need to make sure they have the correct type\n      const cleaned = item.map((v) => setGroupByField(v.property?.name));\n      const newSql = { ...sql, groupBy: cleaned };\n      onSqlChange(newSql);\n    },\n    [onSqlChange, sql]\n  );\n\n  return (\n    <EditorList\n      items={sql.groupBy!}\n      onChange={onGroupByChange}\n      renderItem={makeRenderColumn({\n        options: columns,\n      })}\n    />\n  );\n}\n\nfunction makeRenderColumn({ options }: { options?: Array<SelectableValue<string>> }) {\n  const renderColumn = function (\n    item: Partial<QueryEditorGroupByExpression>,\n    onChangeItem: (item: QueryEditorGroupByExpression) => void,\n    onDeleteItem: () => void\n  ) {\n    return (\n      <InputGroup>\n        <Select\n          value={item.property?.name ? toOption(item.property.name) : null}\n          aria-label=\"Group by\"\n          options={options}\n          menuShouldPortal\n          onChange={({ value }) => value && onChangeItem(setGroupByField(value))}\n        />\n        <AccessoryButton title=\"Remove group by column\" icon=\"times\" variant=\"secondary\" onClick={onDeleteItem} />\n      </InputGroup>\n    );\n  };\n  return renderColumn;\n}\n","import { SelectableValue } from '@grafana/data';\n\nimport { QueryWithDefaults } from '../../defaults';\nimport { DB, SQLQuery } from '../../types';\nimport { useSqlChange } from '../../utils/useSqlChange';\n\nimport { GroupByRow } from './GroupByRow';\n\ninterface SQLGroupByRowProps {\n  fields: SelectableValue[];\n  query: QueryWithDefaults;\n  onQueryChange: (query: SQLQuery) => void;\n  db: DB;\n}\n\nexport function SQLGroupByRow({ fields, query, onQueryChange, db }: SQLGroupByRowProps) {\n  const { onSqlChange } = useSqlChange({ query, onQueryChange, db });\n\n  return <GroupByRow columns={fields} sql={query.sql!} onSqlChange={onSqlChange} />;\n}\n","import { uniqueId } from 'lodash';\nimport { useCallback } from 'react';\nimport * as React from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { EditorField, InputGroup } from '@grafana/plugin-ui';\nimport { Input, RadioButtonGroup, Select, Space } from '@grafana/ui';\n\nimport { SQLExpression } from '../../types';\nimport { setPropertyField } from '../../utils/sql.utils';\n\ntype OrderByRowProps = {\n  sql: SQLExpression;\n  onSqlChange: (sql: SQLExpression) => void;\n  columns?: Array<SelectableValue<string>>;\n  showOffset?: boolean;\n};\n\nconst sortOrderOptions = [\n  { description: 'Sort by ascending', value: 'ASC', icon: 'sort-amount-up' } as const,\n  { description: 'Sort by descending', value: 'DESC', icon: 'sort-amount-down' } as const,\n];\n\nexport function OrderByRow({ sql, onSqlChange, columns, showOffset }: OrderByRowProps) {\n  const onSortOrderChange = useCallback(\n    (item: 'ASC' | 'DESC') => {\n      const newSql: SQLExpression = { ...sql, orderByDirection: item };\n      onSqlChange(newSql);\n    },\n    [onSqlChange, sql]\n  );\n\n  const onLimitChange = useCallback(\n    (event: React.FormEvent<HTMLInputElement>) => {\n      const newSql: SQLExpression = { ...sql, limit: Number.parseInt(event.currentTarget.value, 10) };\n      onSqlChange(newSql);\n    },\n    [onSqlChange, sql]\n  );\n\n  const onOffsetChange = useCallback(\n    (event: React.FormEvent<HTMLInputElement>) => {\n      const newSql: SQLExpression = { ...sql, offset: Number.parseInt(event.currentTarget.value, 10) };\n      onSqlChange(newSql);\n    },\n    [onSqlChange, sql]\n  );\n\n  const onOrderByChange = useCallback(\n    (item: SelectableValue<string>) => {\n      const newSql: SQLExpression = { ...sql, orderBy: setPropertyField(item?.value) };\n      if (item === null) {\n        newSql.orderByDirection = undefined;\n      }\n      onSqlChange(newSql);\n    },\n    [onSqlChange, sql]\n  );\n\n  return (\n    <>\n      <EditorField label=\"Order by\" width={25}>\n        <InputGroup>\n          <Select\n            aria-label=\"Order by\"\n            options={columns}\n            value={sql.orderBy?.property.name ? toOption(sql.orderBy.property.name) : null}\n            isClearable\n            menuShouldPortal\n            onChange={onOrderByChange}\n          />\n\n          <Space h={1.5} />\n\n          <RadioButtonGroup\n            options={sortOrderOptions}\n            disabled={!sql?.orderBy?.property.name}\n            value={sql.orderByDirection}\n            onChange={onSortOrderChange}\n          />\n        </InputGroup>\n      </EditorField>\n      <EditorField label=\"Limit\" optional width={25}>\n        <Input type=\"number\" min={0} id={uniqueId('limit-')} value={sql.limit || ''} onChange={onLimitChange} />\n      </EditorField>\n      {showOffset && (\n        <EditorField label=\"Offset\" optional width={25}>\n          <Input type=\"number\" id={uniqueId('offset-')} value={sql.offset || ''} onChange={onOffsetChange} />\n        </EditorField>\n      )}\n    </>\n  );\n}\n","import { SelectableValue } from '@grafana/data';\n\nimport { QueryWithDefaults } from '../../defaults';\nimport { DB, SQLQuery } from '../../types';\nimport { useSqlChange } from '../../utils/useSqlChange';\n\nimport { OrderByRow } from './OrderByRow';\n\ntype SQLOrderByRowProps = {\n  fields: SelectableValue[];\n  query: QueryWithDefaults;\n  onQueryChange: (query: SQLQuery) => void;\n  db: DB;\n};\n\nexport function SQLOrderByRow({ fields, query, onQueryChange, db }: SQLOrderByRowProps) {\n  const { onSqlChange } = useSqlChange({ query, onQueryChange, db });\n  let columnsWithIndices: SelectableValue[] = [];\n\n  if (fields) {\n    const options = query.sql?.columns?.map((c, i) => {\n      const value = c.name ? `${c.name}(${c.parameters?.map((p) => p.name)})` : c.parameters?.map((p) => p.name);\n      return {\n        value,\n        label: `${i + 1} - ${value}`,\n      };\n    });\n    columnsWithIndices = [\n      {\n        value: '',\n        label: 'Selected columns',\n        options,\n        expanded: true,\n      },\n      ...fields,\n    ];\n  }\n\n  return <OrderByRow sql={query.sql!} onSqlChange={onSqlChange} columns={columnsWithIndices} />;\n}\n","import {\n  BaseOperator,\n  BasicConfig,\n  Config,\n  Field,\n  ImmutableList,\n  JsonTree,\n  Operator,\n  OperatorOptionsI,\n  Settings,\n  Utils,\n  ValueSource,\n  WidgetProps,\n  Widgets,\n} from '@react-awesome-query-builder/ui';\nimport { isString } from 'lodash';\n\nimport { dateTime, toOption } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button, DateTimePicker, Input, Select } from '@grafana/ui';\n\nconst buttonLabels = {\n  add: 'Add',\n  remove: 'Remove',\n};\n\nexport const emptyInitTree: JsonTree = {\n  id: Utils.uuid(),\n  type: 'group',\n};\n\nconst TIME_FILTER = 'timeFilter';\nconst macros = [TIME_FILTER];\n\n// Widgets are the components rendered for each field type see the docs for more info\n// https://github.com/ukrbublik/react-awesome-query-builder/blob/master/CONFIG.adoc#configwidgets\nexport const widgets: Widgets = {\n  ...BasicConfig.widgets,\n  text: {\n    ...BasicConfig.widgets.text,\n    factory: function TextInput(props: WidgetProps) {\n      return (\n        <Input\n          value={props?.value || ''}\n          placeholder={props?.placeholder}\n          onChange={(e) => props?.setValue(e.currentTarget.value)}\n        />\n      );\n    },\n  },\n  number: {\n    ...BasicConfig.widgets.number,\n    factory: function NumberInput(props: WidgetProps) {\n      return (\n        <Input\n          value={props?.value}\n          placeholder={props?.placeholder}\n          type=\"number\"\n          onChange={(e) => props?.setValue(Number.parseInt(e.currentTarget.value, 10))}\n        />\n      );\n    },\n  },\n  datetime: {\n    ...BasicConfig.widgets.datetime,\n    factory: function DateTimeInput(props: WidgetProps) {\n      if (props?.operator === Op.MACROS) {\n        return (\n          <Select\n            id={props.id}\n            aria-label=\"Macros value selector\"\n            menuShouldPortal\n            options={macros.map(toOption)}\n            value={props?.value}\n            onChange={(val) => props.setValue(val.value)}\n          />\n        );\n      }\n      const dateValue = dateTime(props?.value).isValid() ? dateTime(props?.value).utc() : undefined;\n      return (\n        <DateTimePicker\n          onChange={(e) => {\n            props?.setValue(e?.format(BasicConfig.widgets.datetime.valueFormat));\n          }}\n          date={dateValue}\n        />\n      );\n    },\n    // Function for formatting widget’s value in SQL WHERE query.\n    sqlFormatValue: (val, field, widget, operator, operatorDefinition, rightFieldDef) => {\n      if (operator === Op.MACROS) {\n        if (macros.includes(val)) {\n          return val;\n        }\n        return undefined;\n      }\n\n      // This is just satisfying the type checker, this should never happen\n      if (\n        typeof BasicConfig.widgets.datetime.sqlFormatValue === 'string' ||\n        typeof BasicConfig.widgets.datetime.sqlFormatValue === 'object'\n      ) {\n        return undefined;\n      }\n      const func = BasicConfig.widgets.datetime.sqlFormatValue;\n      // We need to pass the ctx to this function this way so *this* is correct\n      return func?.call(BasicConfig.ctx, val, field, widget, operator, operatorDefinition, rightFieldDef) || '';\n    },\n  },\n};\n\n// Settings are the configuration options for the query builder see the docs for more info\n// https://github.com/ukrbublik/react-awesome-query-builder/blob/master/CONFIG.adoc#configsettings\nexport const settings: Settings = {\n  ...BasicConfig.settings,\n  canRegroup: false,\n  maxNesting: 1,\n  canReorder: false,\n  showNot: false,\n  addRuleLabel: buttonLabels.add,\n  deleteLabel: buttonLabels.remove,\n  // This is the component that renders conjunctions (logical operators)\n  renderConjs: function Conjunctions(conjProps) {\n    return (\n      <Select\n        id={conjProps?.id}\n        aria-label=\"Conjunction\"\n        data-testid={selectors.components.SQLQueryEditor.filterConjunction}\n        menuShouldPortal\n        options={conjProps?.conjunctionOptions ? Object.keys(conjProps?.conjunctionOptions).map(toOption) : undefined}\n        value={conjProps?.selectedConjunction}\n        onChange={(val) => conjProps?.setConjunction(val.value!)}\n      />\n    );\n  },\n  // This is the component that renders fields\n  renderField: function Field(fieldProps) {\n    const fields = fieldProps?.config?.fields || {};\n    return (\n      <Select\n        id={fieldProps?.id}\n        width={25}\n        aria-label=\"Field\"\n        data-testid={selectors.components.SQLQueryEditor.filterField}\n        menuShouldPortal\n        options={fieldProps?.items.map((f) => {\n          // @ts-ignore\n          const icon = fields[f.key].mainWidgetProps?.customProps?.icon;\n          return {\n            label: f.label,\n            value: f.key,\n            icon,\n          };\n        })}\n        value={fieldProps?.selectedKey}\n        onChange={(val) => {\n          fieldProps?.setField(val.label!);\n        }}\n      />\n    );\n  },\n  // This is the component used for the Add/Remove buttons\n  renderButton: function RAQBButton(buttonProps) {\n    return (\n      <Button\n        type=\"button\"\n        title={`${buttonProps?.label} filter`}\n        onClick={buttonProps?.onClick}\n        variant=\"secondary\"\n        size=\"md\"\n        icon={buttonProps?.label === buttonLabels.add ? 'plus' : 'times'}\n      />\n    );\n  },\n  // This is the component used for the fields operator selector\n  renderOperator: function Operator(operatorProps) {\n    return (\n      <Select\n        options={operatorProps?.items.map((op) => ({ label: op.label, value: op.key }))}\n        aria-label=\"Operator\"\n        data-testid={selectors.components.SQLQueryEditor.filterOperator}\n        menuShouldPortal\n        value={operatorProps?.selectedKey}\n        onChange={(val) => {\n          operatorProps?.setField(val.value || '');\n        }}\n      />\n    );\n  },\n};\n\n// add IN / NOT IN operators to text to support multi-value variables\nconst enum Op {\n  IN = 'select_any_in',\n  NOT_IN = 'select_not_any_in',\n  MACROS = 'macros',\n}\nconst customOperators = getCustomOperators(BasicConfig);\nconst textWidget = BasicConfig.types.text.widgets.text;\nconst opers = [...(textWidget.operators || []), Op.IN, Op.NOT_IN];\nconst customTextWidget = {\n  ...textWidget,\n  operators: opers,\n};\n\nconst customTypes = {\n  ...BasicConfig.types,\n  text: {\n    ...BasicConfig.types.text,\n    widgets: {\n      ...BasicConfig.types.text.widgets,\n      text: customTextWidget,\n    },\n  },\n  datetime: {\n    ...BasicConfig.types.datetime,\n    widgets: {\n      ...BasicConfig.types.datetime.widgets,\n      datetime: {\n        ...BasicConfig.types.datetime.widgets.datetime,\n        operators: [Op.MACROS, ...(BasicConfig.types.datetime.widgets.datetime.operators || [])],\n      },\n    },\n  },\n};\n\n// This is the configuration for the query builder that doesn't include the fields but all the other configuration for the UI\n// Fields should be added dynamically based on returned data\n// See the doc for more info https://github.com/ukrbublik/react-awesome-query-builder/blob/master/CONFIG.adoc\nexport const raqbConfig: Config = {\n  ...BasicConfig,\n  widgets,\n  settings,\n  operators: customOperators,\n  types: customTypes,\n};\n\nexport type { Config };\n\nconst noop = () => '';\n\nfunction getCustomOperators(config: BasicConfig) {\n  const { ...supportedOperators } = config.operators;\n\n  // IN operator expects array, override IN formatter for multi-value variables\n  const sqlFormatInOp = supportedOperators[Op.IN].sqlFormatOp?.bind(config.ctx) || noop;\n  const formatInOp = supportedOperators[Op.IN].formatOp?.bind(config.ctx) || noop;\n  const customSqlInFormatter = (\n    field: string,\n    op: string,\n    value: string | string[] | ImmutableList<string>,\n    valueSrc: ValueSource | undefined,\n    valueType: string | undefined,\n    opDef: Operator | undefined,\n    operatorOptions: OperatorOptionsI | undefined,\n    fieldDef: Field | undefined\n  ) => {\n    return sqlFormatInOp(field, op, splitIfString(value), valueSrc, valueType, opDef, operatorOptions, fieldDef);\n  };\n\n  // NOT IN operator expects array, override NOT IN formatter for multi-value variables\n  const sqlFormatNotInOp = supportedOperators[Op.NOT_IN].sqlFormatOp?.bind(config.ctx) || noop;\n  const formatNotInOp = supportedOperators[Op.NOT_IN].formatOp?.bind(config.ctx) || noop;\n  const customSqlNotInFormatter = (\n    field: string,\n    op: string,\n    value: string | string[] | ImmutableList<string>,\n    valueSrc: ValueSource | undefined,\n    valueType: string | undefined,\n    opDef: Operator | undefined,\n    operatorOptions: OperatorOptionsI | undefined,\n    fieldDef: Field | undefined\n  ) => {\n    return sqlFormatNotInOp(field, op, splitIfString(value), valueSrc, valueType, opDef, operatorOptions, fieldDef);\n  };\n\n  const customOperators: Record<string, BaseOperator> = {\n    ...supportedOperators,\n    [Op.IN]: {\n      ...supportedOperators[Op.IN],\n      formatOp: (\n        field: string,\n        op: string,\n        value: string | string[] | ImmutableList<string>,\n        valueSrc?: ValueSource\n      ) => {\n        return formatInOp(field, op, splitIfString(value), valueSrc);\n      },\n      sqlFormatOp: customSqlInFormatter,\n    },\n    [Op.NOT_IN]: {\n      ...supportedOperators[Op.NOT_IN],\n      formatOp: (\n        field: string,\n        op: string,\n        value: string | string[] | ImmutableList<string>,\n        valueSrc?: ValueSource\n      ) => {\n        return formatNotInOp(field, op, splitIfString(value), valueSrc);\n      },\n      sqlFormatOp: customSqlNotInFormatter,\n    },\n    [Op.MACROS]: {\n      label: 'Macros',\n      sqlFormatOp: (field: string, _operator: string, value: string | string[] | ImmutableList<string>) => {\n        if (value === TIME_FILTER) {\n          return `$__timeFilter(${field})`;\n        }\n        throw new Error('Invalid macro');\n      },\n    },\n  };\n\n  return customOperators;\n}\n\n// value: string | List<string> but AQB uses a different version of Immutable\nfunction splitIfString(value: string | string[] | ImmutableList<string>) {\n  if (isString(value)) {\n    return value.split(',');\n  }\n  return value;\n}\n","import { injectGlobal } from '@emotion/css';\nimport { Builder, Config, ImmutableTree, Query, Utils } from '@react-awesome-query-builder/ui';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { SQLExpression } from '../../types';\n\nimport { emptyInitTree, raqbConfig } from './AwesomeQueryBuilder';\n\ninterface SQLBuilderWhereRowProps {\n  sql: SQLExpression;\n  onSqlChange: (sql: SQLExpression) => void;\n  config?: Partial<Config>;\n}\n\nexport function WhereRow({ sql, config, onSqlChange }: SQLBuilderWhereRowProps) {\n  const [tree, setTree] = useState<ImmutableTree>();\n  const configWithDefaults = useMemo(() => ({ ...raqbConfig, ...config }), [config]);\n\n  useEffect(() => {\n    // Set the initial tree\n    if (!tree) {\n      const initTree = Utils.checkTree(Utils.loadTree(sql.whereJsonTree ?? emptyInitTree), configWithDefaults);\n      setTree(initTree);\n    }\n  }, [configWithDefaults, sql.whereJsonTree, tree]);\n\n  useEffect(() => {\n    if (!sql.whereJsonTree) {\n      setTree(Utils.checkTree(Utils.loadTree(emptyInitTree), configWithDefaults));\n    }\n  }, [configWithDefaults, sql.whereJsonTree]);\n\n  const onTreeChange = useCallback(\n    (changedTree: ImmutableTree, config: Config) => {\n      setTree(changedTree);\n      const newSql = {\n        ...sql,\n        whereJsonTree: Utils.getTree(changedTree),\n        whereString: Utils.sqlFormat(changedTree, config),\n      };\n\n      onSqlChange(newSql);\n    },\n    [onSqlChange, sql]\n  );\n\n  if (!tree) {\n    return null;\n  }\n\n  return (\n    <Query\n      {...configWithDefaults}\n      value={tree}\n      onChange={onTreeChange}\n      renderBuilder={(props) => <Builder {...props} />}\n    />\n  );\n}\n\nfunction flex(direction: string) {\n  return `\n    display: flex;\n    gap: 8px;\n    flex-direction: ${direction};`;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-expressions\ninjectGlobal`\n  .group--header {\n    ${flex('row')}\n  }\n\n  .group-or-rule {\n    ${flex('column')}\n    .rule {\n      flex-direction: row;\n    }\n  }\n\n  .rule--body {\n    ${flex('row')}\n  }\n\n  .group--children {\n    ${flex('column')}\n  }\n\n  .group--conjunctions:empty {\n    display: none;\n  }\n`;\n","import useAsync from 'react-use/lib/useAsync';\n\nimport { SelectableValue, TypedVariableModel } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\n\nimport { QueryWithDefaults } from '../../defaults';\nimport { DB, SQLExpression, SQLQuery, SQLSelectableValue } from '../../types';\nimport { useSqlChange } from '../../utils/useSqlChange';\n\nimport { Config } from './AwesomeQueryBuilder';\nimport { WhereRow } from './WhereRow';\n\ninterface WhereRowProps {\n  query: QueryWithDefaults;\n  fields: SelectableValue[];\n  onQueryChange: (query: SQLQuery) => void;\n  db: DB;\n}\n\nexport function SQLWhereRow({ query, fields, onQueryChange, db }: WhereRowProps) {\n  const state = useAsync(async () => {\n    return mapFieldsToTypes(fields);\n  }, [fields]);\n\n  const { onSqlChange } = useSqlChange({ query, onQueryChange, db });\n\n  return (\n    <WhereRow\n      // TODO: fix key that's used to force clean render or SQLWhereRow - otherwise it doesn't render operators correctly\n      key={JSON.stringify(state.value)}\n      config={{ fields: state.value || {} }}\n      sql={query.sql!}\n      onSqlChange={(val: SQLExpression) => {\n        const templateVars = getTemplateSrv().getVariables();\n\n        removeQuotesForMultiVariables(val, templateVars);\n\n        onSqlChange(val);\n      }}\n    />\n  );\n}\n\n// needed for awesome query builder\nfunction mapFieldsToTypes(columns: SQLSelectableValue[]) {\n  const fields: Config['fields'] = {};\n  for (const col of columns) {\n    fields[col.value] = {\n      type: col.raqbFieldType || 'text',\n      valueSources: ['value'],\n      mainWidgetProps: { customProps: { icon: col.icon } },\n    };\n  }\n  return fields;\n}\n\nexport function removeQuotesForMultiVariables(val: SQLExpression, templateVars: TypedVariableModel[]) {\n  const multiVariableInWhereString = (tv: TypedVariableModel) =>\n    'multi' in tv &&\n    tv.multi &&\n    (val.whereString?.includes(`\\${${tv.name}}`) || val.whereString?.includes(`$${tv.name}`));\n\n  if (templateVars.some((tv) => multiVariableInWhereString(tv))) {\n    val.whereString = val.whereString?.replaceAll(\"')\", ')');\n    val.whereString = val.whereString?.replaceAll(\"('\", '(');\n  }\n}\n","import { useId } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorField } from '@grafana/plugin-ui';\nimport { Select } from '@grafana/ui';\n\ninterface Props {\n  columns: Array<SelectableValue<string>>;\n  onParameterChange: (value?: string) => void;\n  value: SelectableValue<string> | null;\n}\n\nexport function SelectColumn({ columns, onParameterChange, value }: Props) {\n  const selectInputId = useId();\n\n  return (\n    <EditorField label=\"Column\" width={25}>\n      <Select\n        value={value}\n        data-testid={selectors.components.SQLQueryEditor.selectColumn}\n        inputId={selectInputId}\n        menuShouldPortal\n        options={[{ label: '*', value: '*' }, ...columns]}\n        allowCustomValue\n        onChange={(s) => onParameterChange(s.value)}\n      />\n    </EditorField>\n  );\n}\n","import { css } from '@emotion/css';\nimport { useCallback } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button, InlineLabel, Input, Stack, useStyles2 } from '@grafana/ui';\n\nimport { QueryEditorExpressionType } from '../../expressions';\nimport { SQLExpression, SQLQuery } from '../../types';\nimport { getColumnValue } from '../../utils/sql.utils';\n\nimport { SelectColumn } from './SelectColumn';\n\ninterface Props {\n  columns: Array<SelectableValue<string>>;\n  query: SQLQuery;\n  onSqlChange: (sql: SQLExpression) => void;\n  onParameterChange: (index: number) => (value?: string) => void;\n  currentColumnIndex: number;\n}\n\nexport function SelectCustomFunctionParameters({\n  columns,\n  query,\n  onSqlChange,\n  onParameterChange,\n  currentColumnIndex,\n}: Props) {\n  const styles = useStyles2(getStyles);\n  const macroOrFunction = query.sql?.columns?.[currentColumnIndex];\n\n  const addParameter = useCallback(\n    (index: number) => {\n      const item = query.sql?.columns?.[index];\n      if (!item) {\n        return;\n      }\n\n      item.parameters = item.parameters\n        ? [...item.parameters, { type: QueryEditorExpressionType.FunctionParameter, name: '' }]\n        : [];\n\n      const newSql: SQLExpression = {\n        ...query.sql,\n        columns: query.sql?.columns?.map((c, i) => (i === index ? item : c)),\n      };\n\n      onSqlChange(newSql);\n    },\n    [onSqlChange, query.sql]\n  );\n\n  const removeParameter = useCallback(\n    (columnIndex: number, index: number) => {\n      const item = query.sql?.columns?.[columnIndex];\n      if (!item?.parameters) {\n        return;\n      }\n      item.parameters = item.parameters?.filter((_, i) => i !== index);\n\n      const newSql: SQLExpression = {\n        ...query.sql,\n        columns: query.sql?.columns?.map((c, i) => (i === columnIndex ? item : c)),\n      };\n\n      onSqlChange(newSql);\n    },\n    [onSqlChange, query.sql]\n  );\n\n  function renderParameters(columnIndex: number) {\n    if (!macroOrFunction?.parameters || macroOrFunction.parameters.length <= 1) {\n      return null;\n    }\n\n    const paramComponents = macroOrFunction.parameters.map((param, index) => {\n      // Skip the first parameter as it is the column name\n      if (index === 0) {\n        return null;\n      }\n\n      return (\n        <Stack key={index} gap={2}>\n          <InlineLabel className={styles.label}>,</InlineLabel>\n          <Input\n            onChange={(e) => onParameterChange(index)(e.currentTarget.value)}\n            value={param.name}\n            aria-label={`Parameter ${index} for column ${columnIndex}`}\n            data-testid={selectors.components.SQLQueryEditor.selectInputParameter}\n            addonAfter={\n              <Button\n                title=\"Remove parameter\"\n                type=\"button\"\n                icon=\"times\"\n                variant=\"secondary\"\n                size=\"md\"\n                onClick={() => removeParameter(columnIndex, index)}\n              />\n            }\n          />\n        </Stack>\n      );\n    });\n    return paramComponents;\n  }\n\n  return (\n    <>\n      <InlineLabel className={styles.label}>(</InlineLabel>\n      <SelectColumn\n        columns={columns}\n        onParameterChange={(s) => onParameterChange(0)(s)}\n        value={getColumnValue(macroOrFunction?.parameters?.[0])}\n      />\n      {renderParameters(currentColumnIndex)}\n      <Button\n        type=\"button\"\n        onClick={() => addParameter(currentColumnIndex)}\n        variant=\"secondary\"\n        size=\"md\"\n        icon=\"plus\"\n        title=\"Add parameter\"\n      />\n      <InlineLabel className={styles.label}>)</InlineLabel>\n    </>\n  );\n}\n\nconst getStyles = () => {\n  return {\n    label: css({\n      padding: 0,\n      margin: 0,\n      width: 'unset',\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport { useCallback, useEffect, useId, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorField } from '@grafana/plugin-ui';\nimport { InlineLabel, Input, Select, Stack, useStyles2 } from '@grafana/ui';\n\nimport { QueryEditorExpressionType } from '../../expressions';\nimport { DB, SQLExpression, SQLQuery } from '../../types';\nimport { getColumnValue } from '../../utils/sql.utils';\n\nimport { SelectColumn } from './SelectColumn';\nimport { SelectCustomFunctionParameters } from './SelectCustomFunctionParameters';\n\ninterface Props {\n  query: SQLQuery;\n  onSqlChange: (sql: SQLExpression) => void;\n  currentColumnIndex: number;\n  db: DB;\n  columns: Array<SelectableValue<string>>;\n}\n\nexport function SelectFunctionParameters({ query, onSqlChange, currentColumnIndex, db, columns }: Props) {\n  const selectInputId = useId();\n  const macroOrFunction = query.sql?.columns?.[currentColumnIndex];\n  const styles = useStyles2(getStyles);\n  const func = db.functions().find((f) => f.name === macroOrFunction?.name);\n\n  const [fieldsFromFunction, setFieldsFromFunction] = useState<Array<Array<SelectableValue<string>>>>([]);\n\n  useEffect(() => {\n    const getFieldsFromFunction = async () => {\n      if (!func) {\n        return;\n      }\n      const options: Array<Array<SelectableValue<string>>> = [];\n      for (const param of func.parameters ?? []) {\n        if (param.options) {\n          options.push(await param.options(query));\n        } else {\n          options.push([]);\n        }\n      }\n      setFieldsFromFunction(options);\n    };\n    getFieldsFromFunction();\n\n    // It is fine to ignore the warning here and omit the query object\n    // only table property is used in the query object and whenever table changes the component is re-rendered\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [macroOrFunction?.name]);\n\n  const onParameterChange = useCallback(\n    (index: number, keepIndex?: boolean) => (s: string | undefined) => {\n      const item = query.sql?.columns?.[currentColumnIndex];\n      if (!item) {\n        return;\n      }\n      if (!item.parameters) {\n        item.parameters = [];\n      }\n      if (item.parameters[index] === undefined) {\n        item.parameters[index] = { type: QueryEditorExpressionType.FunctionParameter, name: s };\n      } else if (s == null && keepIndex) {\n        // Remove value from index\n        item.parameters = item.parameters.map((p, i) => (i === index ? { ...p, name: '' } : p));\n        // Remove the last empty parameter\n        if (item.parameters[item.parameters.length - 1]?.name === '') {\n          item.parameters = item.parameters.filter((p) => p.name !== '');\n        }\n      } else if (s == null) {\n        item.parameters = item.parameters.filter((_, i) => i !== index);\n      } else {\n        item.parameters = item.parameters.map((p, i) => (i === index ? { ...p, name: s } : p));\n      }\n\n      const newSql: SQLExpression = {\n        ...query.sql,\n        columns: query.sql?.columns?.map((c, i) => (i === currentColumnIndex ? item : c)),\n      };\n\n      onSqlChange(newSql);\n    },\n    [currentColumnIndex, onSqlChange, query.sql]\n  );\n\n  function renderParametersWithFunctions() {\n    if (!func?.parameters) {\n      return null;\n    }\n\n    return func?.parameters.map((funcParam, index) => {\n      return (\n        <Stack key={index} alignItems=\"flex-end\" gap={2}>\n          <EditorField label={funcParam.name} width={25} optional={!funcParam.required}>\n            <>\n              {funcParam.options ? (\n                <Select\n                  value={getColumnValue(macroOrFunction?.parameters![index])}\n                  options={fieldsFromFunction?.[index]}\n                  data-testid={selectors.components.SQLQueryEditor.selectFunctionParameter(funcParam.name)}\n                  inputId={selectInputId}\n                  menuShouldPortal\n                  allowCustomValue\n                  isClearable\n                  onChange={(s) => onParameterChange(index, true)(s?.value)}\n                />\n              ) : (\n                <Input\n                  onChange={(e) => onParameterChange(index, true)(e.currentTarget.value)}\n                  value={macroOrFunction?.parameters![index]?.name}\n                  data-testid={selectors.components.SQLQueryEditor.selectInputParameter}\n                />\n              )}\n            </>\n          </EditorField>\n          {func.parameters!.length !== index + 1 && <InlineLabel className={styles.label}>,</InlineLabel>}\n        </Stack>\n      );\n    });\n  }\n\n  // This means that no function is selected, we render a column selector\n  if (macroOrFunction?.name === undefined) {\n    return (\n      <SelectColumn\n        columns={columns}\n        onParameterChange={(s) => onParameterChange(0)(s)}\n        value={getColumnValue(macroOrFunction?.parameters?.[0])}\n      />\n    );\n  }\n\n  // If the function is not found, that means that it might be a custom value\n  // we let the user add any number of parameters\n  if (!func) {\n    return (\n      <SelectCustomFunctionParameters\n        query={query}\n        onSqlChange={onSqlChange}\n        currentColumnIndex={currentColumnIndex}\n        columns={columns}\n        onParameterChange={onParameterChange}\n      />\n    );\n  }\n\n  // Else we render the function parameters based on the provided settings\n  return (\n    <>\n      <InlineLabel className={styles.label}>(</InlineLabel>\n      {renderParametersWithFunctions()}\n      <InlineLabel className={styles.label}>)</InlineLabel>\n    </>\n  );\n}\n\nconst getStyles = () => {\n  return {\n    label: css({\n      padding: 0,\n      margin: 0,\n      width: 'unset',\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport { uniqueId } from 'lodash';\nimport { useCallback } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorField } from '@grafana/plugin-ui';\nimport { Button, Select, Stack, useStyles2 } from '@grafana/ui';\n\nimport { QueryEditorExpressionType, QueryEditorFunctionExpression } from '../../expressions';\nimport { DB, QueryFormat, SQLExpression, SQLQuery } from '../../types';\nimport { createFunctionField } from '../../utils/sql.utils';\nimport { useSqlChange } from '../../utils/useSqlChange';\n\nimport { SelectFunctionParameters } from './SelectFunctionParameters';\n\ninterface SelectRowProps {\n  query: SQLQuery;\n  onQueryChange: (sql: SQLQuery) => void;\n  db: DB;\n  columns: Array<SelectableValue<string>>;\n}\n\nexport function SelectRow({ query, onQueryChange, db, columns }: SelectRowProps) {\n  const styles = useStyles2(getStyles);\n  const { onSqlChange } = useSqlChange({ query, onQueryChange, db });\n  const timeSeriesAliasOpts: Array<SelectableValue<string>> = [];\n\n  // Add necessary alias options for time series format\n  // when that format has been selected\n  if (query.format === QueryFormat.Timeseries) {\n    timeSeriesAliasOpts.push({ label: 'time', value: 'time' });\n    timeSeriesAliasOpts.push({ label: 'value', value: 'value' });\n  }\n\n  const onAggregationChange = useCallback(\n    (item: QueryEditorFunctionExpression, index: number) => (aggregation: SelectableValue<string>) => {\n      const newItem = {\n        ...item,\n        name: aggregation?.value,\n        parameters: [\n          { type: QueryEditorExpressionType.FunctionParameter as const, name: item.parameters?.[0]?.name || '' },\n        ],\n      };\n      const newSql: SQLExpression = {\n        ...query.sql,\n        columns: query.sql?.columns?.map((c, i) => (i === index ? newItem : c)),\n      };\n\n      onSqlChange(newSql);\n    },\n    [onSqlChange, query.sql]\n  );\n\n  const onAliasChange = useCallback(\n    (item: QueryEditorFunctionExpression, index: number) => (alias: SelectableValue<string>) => {\n      let newItem = { ...item };\n\n      if (alias !== null) {\n        newItem = { ...item, alias: `\"${alias?.value?.trim()}\"` };\n      } else {\n        delete newItem.alias;\n      }\n\n      const newSql: SQLExpression = {\n        ...query.sql,\n        columns: query.sql?.columns?.map((c, i) => (i === index ? newItem : c)),\n      };\n\n      onSqlChange(newSql);\n    },\n    [onSqlChange, query.sql]\n  );\n\n  const removeColumn = useCallback(\n    (index: number) => () => {\n      const clone = [...(query.sql?.columns || [])];\n      clone.splice(index, 1);\n      const newSql: SQLExpression = {\n        ...query.sql,\n        columns: clone,\n      };\n      onSqlChange(newSql);\n    },\n    [onSqlChange, query.sql]\n  );\n\n  const addColumn = useCallback(() => {\n    const newSql: SQLExpression = { ...query.sql, columns: [...(query.sql?.columns || []), createFunctionField()] };\n    onSqlChange(newSql);\n  }, [onSqlChange, query.sql]);\n\n  const aggregateOptions = () => {\n    const options: Array<SelectableValue<string>> = [\n      { label: 'Aggregations', options: [] },\n      { label: 'Macros', options: [] },\n    ];\n    for (const func of db.functions()) {\n      // Create groups for macros\n      if (func.name.startsWith('$__')) {\n        options[1].options.push({ label: func.name, value: func.name });\n      } else {\n        options[0].options.push({ label: func.name, value: func.name });\n      }\n    }\n    return options;\n  };\n\n  return (\n    <Stack gap={2} wrap=\"wrap\" direction=\"column\">\n      {query.sql?.columns?.map((item, index) => (\n        <div key={index}>\n          <Stack gap={2} alignItems=\"end\">\n            <EditorField label=\"Data operations\" optional width={25}>\n              <Select\n                value={item.name ? toOption(item.name) : null}\n                inputId={`select-aggregation-${index}-${uniqueId()}`}\n                data-testid={selectors.components.SQLQueryEditor.selectAggregation}\n                isClearable\n                menuShouldPortal\n                allowCustomValue\n                options={aggregateOptions()}\n                onChange={onAggregationChange(item, index)}\n              />\n            </EditorField>\n\n            <SelectFunctionParameters\n              currentColumnIndex={index}\n              columns={columns}\n              onSqlChange={onSqlChange}\n              query={query}\n              db={db}\n            />\n\n            <EditorField label=\"Alias\" optional width={15}>\n              <Select\n                value={item.alias ? toOption(item.alias) : null}\n                inputId={`select-alias-${index}-${uniqueId()}`}\n                data-testid={selectors.components.SQLQueryEditor.selectAlias}\n                options={timeSeriesAliasOpts}\n                onChange={onAliasChange(item, index)}\n                isClearable\n                menuShouldPortal\n                allowCustomValue\n              />\n            </EditorField>\n            <Button\n              title=\"Remove column\"\n              type=\"button\"\n              icon=\"trash-alt\"\n              variant=\"secondary\"\n              size=\"md\"\n              onClick={removeColumn(index)}\n            />\n          </Stack>\n        </div>\n      ))}\n      <Button\n        type=\"button\"\n        onClick={addColumn}\n        variant=\"secondary\"\n        title=\"Add column\"\n        size=\"md\"\n        icon=\"plus\"\n        className={styles.addButton}\n      />\n    </Stack>\n  );\n}\n\nconst getStyles = () => {\n  return {\n    addButton: css({ alignSelf: 'flex-start' }),\n    label: css({\n      padding: 0,\n      margin: 0,\n      width: 'unset',\n    }),\n  };\n};\n","import { useAsync } from 'react-use';\n\nimport { EditorRows, EditorRow, EditorField } from '@grafana/plugin-ui';\n\nimport { DB, QueryEditorProps, QueryRowFilter } from '../../types';\nimport { QueryToolbox } from '../query-editor-raw/QueryToolbox';\n\nimport { Preview } from './Preview';\nimport { SQLGroupByRow } from './SQLGroupByRow';\nimport { SQLOrderByRow } from './SQLOrderByRow';\nimport { SQLWhereRow } from './SQLWhereRow';\nimport { SelectRow } from './SelectRow';\n\ninterface VisualEditorProps extends QueryEditorProps {\n  db: DB;\n  queryRowFilter: QueryRowFilter;\n  onValidate: (isValid: boolean) => void;\n}\n\nexport const VisualEditor = ({ query, db, queryRowFilter, onChange, onValidate, range }: VisualEditorProps) => {\n  const state = useAsync(async () => {\n    const fields = await db.fields(query);\n    return fields;\n  }, [db, query.dataset, query.table]);\n\n  return (\n    <>\n      <EditorRows>\n        <EditorRow>\n          <SelectRow columns={state.value || []} query={query} onQueryChange={onChange} db={db} />\n        </EditorRow>\n        {queryRowFilter.filter && (\n          <EditorRow>\n            <EditorField label=\"Filter by column value\" optional>\n              <SQLWhereRow fields={state.value || []} query={query} onQueryChange={onChange} db={db} />\n            </EditorField>\n          </EditorRow>\n        )}\n        {queryRowFilter.group && (\n          <EditorRow>\n            <EditorField label=\"Group by column\">\n              <SQLGroupByRow fields={state.value || []} query={query} onQueryChange={onChange} db={db} />\n            </EditorField>\n          </EditorRow>\n        )}\n        {queryRowFilter.order && (\n          <EditorRow>\n            <SQLOrderByRow fields={state.value || []} query={query} onQueryChange={onChange} db={db} />\n          </EditorRow>\n        )}\n        {queryRowFilter.preview && query.rawSql && (\n          <EditorRow>\n            <Preview rawSql={query.rawSql} datasourceType={query.datasource?.type} />\n          </EditorRow>\n        )}\n      </EditorRows>\n      <QueryToolbox db={db} query={query} onValidate={onValidate} range={range} />\n    </>\n  );\n};\n","import { useCallback, useEffect, useState } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { QueryEditorProps } from '@grafana/data';\nimport { EditorMode } from '@grafana/plugin-ui';\nimport { Space } from '@grafana/ui';\n\nimport { SqlDatasource } from '../datasource/SqlDatasource';\nimport { applyQueryDefaults } from '../defaults';\nimport { SQLQuery, QueryRowFilter, SQLOptions } from '../types';\nimport { haveColumns } from '../utils/sql.utils';\n\nimport { QueryHeader, QueryHeaderProps } from './QueryHeader';\nimport { RawEditor } from './query-editor-raw/RawEditor';\nimport { VisualEditor } from './visual-query-builder/VisualEditor';\n\nexport interface SqlQueryEditorProps extends QueryEditorProps<SqlDatasource, SQLQuery, SQLOptions> {\n  queryHeaderProps?: Pick<QueryHeaderProps, 'dialect'>;\n}\n\nexport default function SqlQueryEditor({\n  datasource,\n  query,\n  onChange,\n  onRunQuery,\n  range,\n  queryHeaderProps,\n}: SqlQueryEditorProps) {\n  const [isQueryRunnable, setIsQueryRunnable] = useState(true);\n  const db = datasource.getDB();\n\n  const { preconfiguredDatabase } = datasource;\n  const dialect = queryHeaderProps?.dialect ?? 'other';\n  const { loading, error } = useAsync(async () => {\n    return () => {\n      if (datasource.getDB(datasource.id).init !== undefined) {\n        datasource.getDB(datasource.id).init!();\n      }\n    };\n  }, [datasource]);\n\n  const queryWithDefaults = applyQueryDefaults(query);\n  const [queryRowFilter, setQueryRowFilter] = useState<QueryRowFilter>({\n    filter: !!queryWithDefaults.sql?.whereString,\n    group: !!queryWithDefaults.sql?.groupBy?.[0]?.property.name,\n    order: !!queryWithDefaults.sql?.orderBy?.property.name,\n    preview: true,\n  });\n  const [queryToValidate, setQueryToValidate] = useState(queryWithDefaults);\n\n  useEffect(() => {\n    return () => {\n      if (datasource.getDB(datasource.id).dispose !== undefined) {\n        datasource.getDB(datasource.id).dispose!();\n      }\n    };\n  }, [datasource]);\n\n  const processQuery = useCallback(\n    (q: SQLQuery) => {\n      if (isQueryValid(q) && onRunQuery) {\n        onRunQuery();\n      }\n    },\n    [onRunQuery]\n  );\n\n  const onQueryChange = (q: SQLQuery, process = true) => {\n    setQueryToValidate(q);\n    onChange(q);\n\n    if (haveColumns(q.sql?.columns) && q.sql?.columns.some((c) => c.name) && !queryRowFilter.group) {\n      setQueryRowFilter({ ...queryRowFilter, group: true });\n    }\n\n    if (process) {\n      processQuery(q);\n    }\n  };\n\n  const onQueryHeaderChange = (q: SQLQuery) => {\n    setQueryToValidate(q);\n    onChange(q);\n  };\n\n  if (loading || error) {\n    return null;\n  }\n\n  return (\n    <>\n      <QueryHeader\n        db={db}\n        preconfiguredDataset={preconfiguredDatabase}\n        onChange={onQueryHeaderChange}\n        onRunQuery={onRunQuery}\n        onQueryRowChange={setQueryRowFilter}\n        queryRowFilter={queryRowFilter}\n        query={queryWithDefaults}\n        isQueryRunnable={isQueryRunnable}\n        dialect={dialect}\n      />\n\n      <Space v={0.5} />\n\n      {queryWithDefaults.editorMode !== EditorMode.Code && (\n        <VisualEditor\n          db={db}\n          query={queryWithDefaults}\n          onChange={(q: SQLQuery) => onQueryChange(q, false)}\n          queryRowFilter={queryRowFilter}\n          onValidate={setIsQueryRunnable}\n          range={range}\n        />\n      )}\n\n      {queryWithDefaults.editorMode === EditorMode.Code && (\n        <RawEditor\n          db={db}\n          query={queryWithDefaults}\n          queryToValidate={queryToValidate}\n          onChange={onQueryChange}\n          onRunQuery={onRunQuery}\n          onValidate={setIsQueryRunnable}\n          range={range}\n        />\n      )}\n    </>\n  );\n}\n\nconst isQueryValid = (q: SQLQuery) => {\n  return Boolean(q.rawSql);\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar react_1 = require(\"react\");\nvar useTimeoutFn_1 = tslib_1.__importDefault(require(\"./useTimeoutFn\"));\nfunction useDebounce(fn, ms, deps) {\n    if (ms === void 0) { ms = 0; }\n    if (deps === void 0) { deps = []; }\n    var _a = useTimeoutFn_1.default(fn, ms), isReady = _a[0], cancel = _a[1], reset = _a[2];\n    react_1.useEffect(reset, deps);\n    return [isReady, cancel];\n}\nexports.default = useDebounce;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar react_1 = require(\"react\");\nfunction useTimeoutFn(fn, ms) {\n    if (ms === void 0) { ms = 0; }\n    var ready = react_1.useRef(false);\n    var timeout = react_1.useRef();\n    var callback = react_1.useRef(fn);\n    var isReady = react_1.useCallback(function () { return ready.current; }, []);\n    var set = react_1.useCallback(function () {\n        ready.current = false;\n        timeout.current && clearTimeout(timeout.current);\n        timeout.current = setTimeout(function () {\n            ready.current = true;\n            callback.current();\n        }, ms);\n    }, [ms]);\n    var clear = react_1.useCallback(function () {\n        ready.current = null;\n        timeout.current && clearTimeout(timeout.current);\n    }, []);\n    // update ref when function changes\n    react_1.useEffect(function () {\n        callback.current = fn;\n    }, [fn]);\n    // set on mount, clear on unmount\n    react_1.useEffect(function () {\n        set();\n        return clear;\n    }, [ms]);\n    return [isReady, clear, set];\n}\nexports.default = useTimeoutFn;\n","import { css } from '@emotion/css';\nimport React__default from 'react';\nimport '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nconst EditorHeader = ({ children }) => {\n  const styles = useStyles2(getStyles);\n  return /* @__PURE__ */ React__default.createElement(\"div\", { className: styles.root }, children);\n};\nconst getStyles = (theme) => ({\n  root: css({\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    alignItems: \"center\",\n    gap: theme.spacing(3),\n    minHeight: theme.spacing(4)\n  })\n});\n\nexport { EditorHeader };\n//# sourceMappingURL=EditorHeader.js.map\n","import React__default from 'react';\n\nconst FlexItem = ({ grow, shrink }) => {\n  return /* @__PURE__ */ React__default.createElement(\"div\", { style: { display: \"block\", flexGrow: grow, flexShrink: shrink } });\n};\n\nexport { FlexItem };\n//# sourceMappingURL=FlexItem.js.map\n","import { css, cx } from '@emotion/css';\nimport React__default, { useState } from 'react';\nimport '@grafana/data';\nimport { useStyles2, Select, SelectContainer as SelectContainer$1 } from '@grafana/ui';\n\nfunction InlineSelect({ label: labelProp, ...props }) {\n  const [id] = useState(() => Math.random().toString(16).slice(2));\n  const styles = useStyles2(getSelectStyles);\n  const components = {\n    SelectContainer,\n    ValueContainer,\n    SingleValue: ValueContainer\n  };\n  return /* @__PURE__ */ React__default.createElement(\"div\", { className: styles.root }, labelProp && /* @__PURE__ */ React__default.createElement(\"label\", { className: styles.label, htmlFor: id }, labelProp, \":\", \"\\xA0\"), /* @__PURE__ */ React__default.createElement(Select, { openMenuOnFocus: true, inputId: id, ...props, components }));\n}\nconst SelectContainer = (props) => {\n  const { children } = props;\n  const styles = useStyles2(getSelectStyles);\n  return /* @__PURE__ */ React__default.createElement(SelectContainer$1, { ...props, className: cx(props.className, styles.container) }, children);\n};\nconst ValueContainer = (props) => {\n  const { className, children } = props;\n  const styles = useStyles2(getSelectStyles);\n  return /* @__PURE__ */ React__default.createElement(\"div\", { className: cx(className, styles.valueContainer) }, children);\n};\nconst getSelectStyles = (theme) => ({\n  root: css({\n    display: \"flex\",\n    fontSize: 12,\n    alignItems: \"center\"\n  }),\n  label: css({\n    color: theme.colors.text.secondary,\n    whiteSpace: \"nowrap\"\n  }),\n  container: css({\n    background: \"none\",\n    borderColor: \"transparent\"\n  }),\n  valueContainer: css({\n    display: \"flex\",\n    alignItems: \"center\",\n    flex: \"initial\",\n    color: theme.colors.text.secondary,\n    fontSize: 12\n  })\n});\n\nexport { InlineSelect };\n//# sourceMappingURL=InlineSelect.js.map\n"],"names":["ConfirmModal","isOpen","onCancel","onDiscard","onCopy","buttonRef","styles","getStyles","Modal","Icon","Button","theme","DatasetSelector","dataset","db","dialect","onChange","inputId","preconfiguredDataset","hasPreconfigCondition","state","useAsync","v","Select","TableSelector","table","className","selectors","editorModes","QueryHeader","isQueryRunnable","onQueryRowChange","onRunQuery","query","queryRowFilter","editorMode","_","copyToClipboard","useCopyToClipboard","showConfirm","setShowConfirm","toRawSql","htmlId","onEditorModeChange","newEditorMode","onFormatChange","e","next","onDatasetChange","onTableChange","datasetDropdownIsAvailable","EditorHeader","InlineSelect","ev","FlexItem","Tooltip","RadioButtonGroup","Space","EditorRow","EditorField","QueryEditorRaw","children","width","height","editorLanguageDefinition","queryRef","onRawQueryChange","rawSql","processQuery","newQuery","SQLEditor","QueryValidator","onValidate","range","validationResult","setValidationResult","valueFormatter","validateQuery","useAsyncFn","q","useDebounce","result","error","processErrorMessage","Spinner","splat","QueryToolbox","showTools","onFormatCode","onExpand","isExpanded","validatorProps","style","IconButton","RawEditor","queryToValidate","setIsExpanded","toolboxRef","toolboxMeasure","useMeasure","editorRef","editorMeasure","renderQueryEditor","formatQuery","renderEditor","standalone","renderPlaceholder","useSqlChange","onQueryChange","sql","GroupByRow","columns","onSqlChange","onGroupByChange","item","cleaned","newSql","EditorList","makeRenderColumn","options","onChangeItem","onDeleteItem","InputGroup","value","AccessoryButton","SQLGroupByRow","fields","sortOrderOptions","OrderByRow","showOffset","onSortOrderChange","onLimitChange","event","onOffsetChange","onOrderByChange","Input","SQLOrderByRow","columnsWithIndices","c","i","p","buttonLabels","emptyInitTree","TIME_FILTER","macros","widgets","props","val","dateValue","DateTimePicker","field","widget","operator","operatorDefinition","rightFieldDef","settings","conjProps","fieldProps","f","icon","buttonProps","operatorProps","op","Op","customOperators","getCustomOperators","textWidget","opers","customTextWidget","customTypes","raqbConfig","noop","config","supportedOperators","sqlFormatInOp","formatInOp","customSqlInFormatter","valueSrc","valueType","opDef","operatorOptions","fieldDef","splitIfString","sqlFormatNotInOp","formatNotInOp","customSqlNotInFormatter","_operator","WhereRow","tree","setTree","configWithDefaults","initTree","onTreeChange","changedTree","flex","direction","SQLWhereRow","mapFieldsToTypes","templateVars","removeQuotesForMultiVariables","col","multiVariableInWhereString","tv","SelectColumn","onParameterChange","selectInputId","s","SelectCustomFunctionParameters","currentColumnIndex","macroOrFunction","addParameter","index","removeParameter","columnIndex","renderParameters","param","Stack","InlineLabel","SelectFunctionParameters","func","fieldsFromFunction","setFieldsFromFunction","keepIndex","renderParametersWithFunctions","funcParam","SelectRow","timeSeriesAliasOpts","onAggregationChange","aggregation","newItem","onAliasChange","alias","removeColumn","clone","addColumn","aggregateOptions","VisualEditor","EditorRows","Preview","SqlQueryEditor","datasource","queryHeaderProps","setIsQueryRunnable","preconfiguredDatabase","loading","queryWithDefaults","setQueryRowFilter","setQueryToValidate","isQueryValid","process","onQueryHeaderChange","tslib_1","react_1","useTimeoutFn_1","fn","ms","deps","_a","isReady","cancel","reset","exports","useTimeoutFn","ready","timeout","callback","set","clear","grow","shrink","labelProp","id","getSelectStyles","components","SelectContainer","ValueContainer"],"sourceRoot":""}