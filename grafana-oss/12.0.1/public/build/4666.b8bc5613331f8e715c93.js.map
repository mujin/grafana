{"version":3,"file":"4666.b8bc5613331f8e715c93.js","mappings":"gLAQO,SAASA,EAAmB,CAAE,MAAAC,EAAO,QAAAC,EAAS,GAAAC,CAAG,EAAU,CAChE,MAAMC,MAAS,MAAWC,CAAkB,EAE5C,SACE,QAAC,OAAI,UAAWD,GAAO,UACrB,oBAAC,IAAK,CAAC,UAAWA,GAAO,MAAO,GAAAD,EAC7B,SAAAF,CAAA,CACH,KACA,OAAC,IAAK,CAAC,UAAU,MAAM,IAAK,EACzB,SAAAC,CAAA,CACH,GACF,CAEJ,CAEA,MAAMG,EAAsBC,IAA0B,CACpD,aAAW,OAAI,CACb,QAAS,OACT,cAAe,MACf,eAAgB,gBAChB,WAAY,SACZ,QAASA,EAAM,QAAQ,EAAG,CAAC,EAC3B,gBAAiBA,EAAM,OAAO,WAAW,UACzC,aAAc,aAAaA,EAAM,OAAO,OAAO,MAAM,EACvD,CAAC,EACD,SAAO,OAAI,CACT,OAAQ,CACV,CAAC,CACH,E,qFCXO,SAASC,EAAQC,EAAMC,EAAQC,EAAS,CAC7C,SAAOC,EAAA,GAAQH,EAAM,CAACC,EAAQC,CAAO,CACvC,CAGA,QAAe,K,0BCDR,SAASE,EAAWJ,EAAMC,EAAQC,EAAS,CAChD,MAAMG,KAAQC,EAAA,GAAON,EAAME,GAAS,EAAE,EACtC,OAAAG,EAAM,QAAQA,EAAM,QAAQ,EAAIJ,EAAS,IAAoB,EACtDI,CACT,CAGA,QAAe,K,eCPR,SAASE,GAASP,EAAMC,EAAQC,EAAS,CAC9C,SAAOM,EAAA,GAAgBR,EAAMC,EAAS,KAAoBC,CAAO,CACnE,CAGA,SAAe,KCNR,SAASO,GAAST,EAAMC,EAAQC,EAAS,CAC9C,OAAOK,GAASP,EAAM,CAACC,EAAQC,CAAO,CACxC,CAGA,SAAe,K,qdCRR,SAASQ,GAA2B,CACzC,SAAAC,EACA,OAAAC,EACA,QAAAC,CACF,EAIG,CACD,MAAMjB,KAAS,MAAWkB,EAAS,EAE7B,CAACC,EAAcC,CAAe,KAAI,YAAiB,EACnD,CAACC,EAAmBC,CAAoB,KAAI,YAAqC,IAAI,EACrF,CAAE,8BAAAC,CAA8B,EAAIC,GAAA,EAEpC,CACJ,YAAaC,EAAS,CAAC,EACvB,WAAYC,EACZ,QAASC,CACX,EAAIJ,EAA8B,CAChC,aAAc,MACd,OAAQ,CACN,UAAW,GACX,SAAU,GACV,OAAQ,EACV,CACF,CAAC,EAEK,CAACK,EAAYC,CAAa,KAAI,YAAS,EAAE,EAEzCC,KAA0D,WAAQ,IAAM,CAC5E,MAAMC,EAA6C,CAAC,EACpD,MAAI,CAACL,GAAWD,GACdA,EAAO,QAASO,GAAa,CACtBD,EAAMC,EAAS,OAAO,SAAS,IAClCD,EAAMC,EAAS,OAAO,SAAS,EAAI,CAAC,GAEtC,MAAMC,EAAsB,OAAO,YACjC,OAAO,QAAQD,EAAS,WAAW,EAAE,OAAO,CAAC,CAACE,CAAG,IAAM,CAACA,EAAI,WAAW,IAAI,CAAC,CAC9E,EACMC,EAAiB,OAAO,YAC5B,OAAO,QAAQH,EAAS,MAAM,EAAE,OAAO,CAAC,CAACE,CAAG,IAAM,CAACA,EAAI,WAAW,IAAI,CAAC,CACzE,EACAF,EAAW,CAAE,GAAGA,EAAU,YAAaC,EAAqB,OAAQE,CAAe,EACnFJ,EAAMC,EAAS,OAAO,SAAS,EAAE,KAAKA,CAAQ,CAChD,CAAC,EAEID,CACT,EAAG,CAACL,EAASD,CAAM,CAAC,EAEdW,KAAmB,eAAaC,GAAiB,CACrDjB,EAAgBiB,CAAI,EACpBf,EAAqB,IAAI,CAC3B,EAAG,CAAC,CAAC,EAECgB,KAAqD,WAAQ,IAAM,CACvE,MAAMA,EAAgB,OAAO,KAAKR,CAAkB,EAAE,OAAQO,GAC5DA,EAAK,YAAY,EAAE,SAAST,EAAW,YAAY,CAAC,CACtD,EACMW,EAA2D,CAAC,EAClED,OAAAA,EAAc,QAASD,GAAS,CAC9BE,EAAoBF,CAAI,EAAIP,EAAmBO,CAAI,CACrD,CAAC,EACME,CACT,EAAG,CAACT,EAAoBF,CAAU,CAAC,EAEnC,GAAID,EACF,OAAO,KAGT,MAAMa,EAAoB,OAAO,KAAKF,GAAiB,CAAC,CAAC,EAEnDG,EAAU,CAAC,CAAE,MAAAC,EAAO,MAAAC,CAAM,IAAgD,CAC9E,GAAI,CAACL,EACH,OAAO,KAET,MAAMM,EAAWJ,EAAkBE,CAAK,EAElCG,EAAaD,IAAazB,EAEhC,SACE,QAAC,UACC,KAAK,SACL,MAAOyB,EACP,MAAAD,EACA,aAAW,MAAG3C,EAAO,UAAW,CAAE,CAACA,EAAO,MAAM,EAAG0C,EAAQ,IAAM,EAAG,CAAC1C,EAAO,WAAW,EAAG6C,CAAW,CAAC,EACtG,QAAS,IAAMT,EAAiBQ,CAAQ,EAExC,oBAAC,OAAI,aAAW,MAAG5C,EAAO,UAAWA,EAAO,cAAc,EAAI,SAAA4C,CAAA,CAAS,KACvE,QAAC,OAAI,UAAW5C,EAAO,YACrB,oBAAC8C,GAAA,EAAI,CAAC,KAAK,QAAS,GAAE,IAAER,EAAcM,CAAQ,EAAE,CAAC,EAAE,OAAO,gBAAkB,IAC9E,GACF,CAEJ,EAEMG,EAAuB,CAACC,EAAgCC,IAAoC,CAEhG,MAAMC,EADYF,EAAU,IAAKG,GAAUA,EAAM,MAAM,EACvB,IAAI,KAAmB,EAEjDC,KAAmB,MAAoBF,CAAa,EACpDG,KAAoB,SAAW,OAAoBJ,EAAa,MAAM,EAAGG,CAAgB,EAM/F,OAJaC,EAAkB,UAC3BC,GAAA,OAAa,OAAoBD,CAAiB,CAAC,KACnDC,GAAA,IAAaL,EAAa,MAAM,CAGtC,EAEMM,GAAc,CAAC,CAAE,MAAAb,EAAO,MAAAC,CAAM,IAA+C,CACjF,MAAMa,KAAS,WAAQ,IAAOrC,EAAeW,EAAmBX,CAAY,EAAI,CAAC,EAAI,CAAC,CAAC,EACjFgC,EAAQK,EAAOd,CAAK,EACpBG,EAAaxB,GAAmB,SAAS8B,CAAK,EAC9CM,KAAO,WAAQ,IAAMV,EAAqBS,EAAQL,CAAK,EAAG,CAACK,EAAQL,CAAK,CAAC,EAEzEO,GAAwB,IAAM,CAClC,GAAIb,GAAcxB,EAAmB,CACnCC,EAAqBD,EAAkB,OAAQW,GAAaA,IAAamB,CAAK,CAAC,EAC/E,MACF,CACA7B,EAAqB,CAAC,GAAID,GAAqB,CAAC,EAAI8B,CAAK,CAAC,CAC5D,EAEA,SACE,OAAC,UACC,KAAK,SACL,MAAAR,EACA,aAAW,MAAG3C,EAAO,UAAWA,EAAO,eAAgB,CACrD,CAACA,EAAO,MAAM,EAAG0C,EAAQ,IAAM,EAC/B,CAAC1C,EAAO,WAAW,EAAG6C,CACxB,CAAC,EACD,QAASa,GAET,mBAAC,OAAI,UAAW1D,EAAO,eAAgB,MAAOmD,EAAM,OAAO,UACzD,mBAACQ,GAAA,EAAO,CAAC,UAAU,SAAS,WAAS,OAAC,OAAK,cAAK,UAAUR,EAAO,KAAM,CAAC,EAAE,EAAQ,MAAO,OACvF,mBAAC,OACE,SAAAM,EAAK,IAAI,CAACG,EAAKlB,OACd,OAACmB,GAAA,EAAG,CAAa,KAAMD,EAAK,UAAW5D,EAAO,KAApC0C,CAAyC,CACpD,EACH,EACF,EACF,EACF,CAEJ,EAEMoB,GAAgB,IAAM,CAC1B,MAAMC,EACJ1C,GAAmB,IAAKW,IACW,CAC/B,OAAQ,SACR,YAAaA,EAAS,YACtB,OAAQA,EAAS,OACjB,SAAUA,EAAS,SACnB,OAAQA,EAAS,OACjB,aAAcA,EAAS,aACvB,YAAaA,EAAS,WACxB,EAED,GAAK,CAAC,EAETjB,EAASgD,CAAS,EAClBC,EAAW,CACb,EAEMA,EAAa,IAAM,CACvB5C,EAAgB,MAAS,EACzBE,EAAqB,IAAI,EACzBO,EAAc,EAAE,EAChBoC,GAAkB,EAAE,CACtB,EAEMC,GAAY,IAAM,CACtBF,EAAW,EACX/C,EAAQ,CACV,EAEMgD,GAAqBE,GAAmB,CAC5CtC,EAAcsC,CAAM,CACtB,EAEA,SACE,OAAC,OACC,oBAACC,GAAA,GACC,SAAO,KAAE,sEAAuE,wBAAwB,EACxG,UAAWpE,EAAO,MAClB,cAAa,GACb,OAAAgB,EACA,UAAAkD,GACA,iBAAkBlE,EAAO,aAEzB,qBAAC,OAAI,UAAWA,EAAO,UACrB,oBAACqE,GAAA,GACC,MAAOzC,EACP,SAAUqC,GACV,SAAO,KAAE,iEAAkE,mBAAmB,EAC9F,eAAa,KAAE,uEAAwE,mBAAmB,EAC1G,UAAS,GACX,KACA,OAAC,OAAM,SAAA9C,GAAgB,oDAAuD,GAAG,KAEjF,QAAC,OAAI,UAAWnB,EAAO,OACpB,UAAA0B,MACC,OAAC4C,GAAA,GACC,QAAM,KAAE,4DAA6D,kBAAkB,EACvF,UAAWtE,EAAO,mBACpB,EAGD,CAAC0B,MACA,OAAC,WAAS,CACP,UAAC,CAAE,OAAA6C,EAAQ,MAAAC,CAAM,OAChB,OAAC,MAAa,CAAC,SAAU,GAAI,OAAAD,EAAgB,MAAAC,EAAc,UAAWhC,EAAkB,OACrF,SAAAC,CAAA,CACH,EAEJ,GAEJ,KAEA,QAAC,OAAI,UAAWzC,EAAO,OACpB,WAACmB,GAAgB,CAACO,MACjB,OAAC,OAAI,UAAW1B,EAAO,wBACrB,mBAAC,OAAI,4EAAgE,EACvE,EAED0B,MACC,OAAC4C,GAAA,GACC,QAAM,KAAE,2DAA4D,iBAAiB,EACrF,UAAWtE,EAAO,mBACpB,EAGDmB,GAAgBW,EAAmBX,CAAY,EAAE,QAAU,CAACO,MAC3D,OAAC,WAAS,CACP,UAAC,CAAE,MAAA8C,EAAO,OAAAD,CAAO,OAChB,OAAC,OACC,SAAU,GACV,OAAAA,EACA,MAAAC,EACA,UAAW1C,EAAmBX,CAAY,EAAE,QAAU,EAErD,SAAAoC,EAAA,CACH,EAEJ,GAEJ,GACF,KACA,QAACa,GAAA,EAAM,UAAN,CACC,oBAACK,EAAA,GAAM,CAAC,KAAK,SAAS,QAAQ,YAAY,QAASP,GACjD,mBAAC,KAAK,CAAC,QAAQ,yBAAyB,kBAAM,EAChD,KACA,OAACO,EAAA,IACC,KAAK,SACL,QAAQ,UACR,SAAU,EAAEtD,GAAgBE,GAC5B,QAAS,IAAM,CACTF,GAAgBE,GAClByC,GAAc,CAElB,EAEA,mBAAC,KAAK,CAAC,QAAQ,mEAAmE,qCAElF,EACF,GACF,GACF,EACF,CAEJ,CAEA,MAAM5C,GAAahB,GAAyB,CAC1C,MAAMwE,KAAc,MAAkBxE,CAAK,EAE3C,MAAO,CACL,aAAW,OAAI,CACb,QAAS,OACT,oBAAqB,YACrB,iBAAkB,mBAClB,IAAKA,EAAM,QAAQ,CAAC,EACpB,KAAM,CACR,CAAC,EAED,OAAK,OAAI,CACP,OAAQ,KACV,CAAC,EAED,UAAQ,OAAI,CACV,KAAM,UACR,CAAC,EAED,eAAa,OAAI,CACf,UAAW,OACX,OAAQ,MACV,CAAC,EACD,aAAW,OAAI,CACb,OAAQ,OACR,WAAYA,EAAM,WAAW,cAC/B,CAAC,EACD,aAAW,OAAIwE,EAAa,CAC1B,QAASxE,EAAM,QAAQ,EAAG,EAC1B,SAAU,SACV,aAAc,WACd,UAAW,OACX,WAAY,SACZ,OAAQ,UACR,OAAQ,wBAER,aAAc,CACZ,OAAQ,cACR,MAAOA,EAAM,OAAO,KAAK,QAC3B,CACF,CAAC,EACD,kBAAgB,OAAI,CAClB,UAAW,MACb,CAAC,EACD,eAAa,OAAI,CACf,YAAaA,EAAM,OAAO,QAAQ,MACpC,CAAC,EACD,UAAQ,OAAI,CACV,gBAAiBA,EAAM,OAAO,WAAW,SAC3C,CAAC,EACD,kBAAgB,OAAI,CAClB,QAAS,OACT,IAAKA,EAAM,QAAQ,CAAC,EACpB,eAAgB,gBAChB,WAAY,QACd,CAAC,EACD,sBAAoB,OAAI,CACtB,OAAQ,OACR,QAAS,OACT,eAAgB,SAChB,WAAY,QACd,CAAC,EACD,2BAAyB,OAAI,CAC3B,MAAO,OACP,OAAQ,OACR,QAAS,OACT,cAAe,SACf,eAAgB,SAChB,UAAW,SACX,WAAYA,EAAM,WAAW,cAC/B,CAAC,EACD,SAAO,OAAI,CACT,OAAQ,MACV,CAAC,EACD,gBAAc,OAAI,CAChB,KAAM,EACN,QAAS,OACT,cAAe,QACjB,CAAC,EACD,cAAY,OAAI,CACd,SAAU,CACZ,CAAC,EACD,YAAU,OAAI,CACZ,KAAMA,EAAM,OAAO,QAAQ,IAC7B,CAAC,EACD,UAAQ,OAAI,CACV,eAAgB,YAClB,CAAC,EACD,eAAa,OAAI,CACf,OAAQ,OACR,SAAUA,EAAM,WAAW,UAAU,SACrC,MAAOA,EAAM,OAAO,KAAK,UACzB,QAAS,OACT,cAAe,MACf,eAAgB,aAChB,UAAWA,EAAM,QAAQ,CAAC,EAC1B,WAAY,QACd,CAAC,CACH,CACF,EClYayE,GAAyC,CACpD,CACE,KAAM,WACN,KAAM,SACN,MAAO,mEACT,EACA,CACE,KAAM,SACN,KAAM,SACN,MAAO,4DACT,EACA,CACE,KAAM,SACN,KAAM,UACN,MAAO,+DACT,EACA,CACE,KAAM,gBACN,KAAM,UACN,MAAO,uBACT,EACA,CACE,KAAM,kBACN,KAAM,UACN,MAAO,yBACT,EACA,CACE,KAAM,cACN,KAAM,WACN,MAAO,sCACT,EACA,CACE,KAAM,eACN,KAAM,WACN,MAAO,gEACT,EACA,CACE,KAAM,oBACN,KAAM,WACN,MAAO,qEACT,EACA,CACE,KAAM,cACN,KAAM,SACN,MAAO,sDACT,CACF,EAEaC,GAA+C,CAC1D,CACE,KAAM,SACN,KAAM,WACN,MAAO,sCACT,EACA,CACE,KAAM,cACN,KAAM,WACN,MAAO,2CACT,EACA,CACE,KAAM,WACN,KAAM,mBACN,MAAO,gCACT,EACA,CACE,KAAM,SACN,KAAM,mBACN,MAAO,6BACT,CACF,EAEaC,GAAwC,CACnD,CACE,KAAM,SACN,KAAM,SACN,MAAO,qBACT,EACA,CACE,KAAM,SACN,KAAM,WACN,MAAO,sCACT,EACA,CACE,KAAM,cACN,KAAM,WACN,MAAO,2CACT,EACA,CACE,KAAM,SACN,KAAM,WACN,MACE,6IACJ,EACA,CACE,KAAM,WACN,KAAM,YACN,MAAO,gCACT,EACA,CACE,KAAM,SACN,KAAM,YACN,MACE,gJACJ,EACA,CACE,KAAM,eACN,KAAM,SACN,MAAO,kDACT,EACA,CACE,KAAM,aACN,KAAM,SACN,MAAO,qGACT,EACA,CACE,KAAM,eACN,KAAM,SACN,MAAO,2FACT,EACA,CACE,KAAM,WACN,KAAM,SACN,MAAO,iGACT,EACA,CACE,KAAM,cACN,KAAM,SACN,MAAO,qDACT,EACA,CACE,KAAM,cACN,KAAM,SACN,MAAO,oFACT,CACF,EAEaC,GAAoD,CAC/D,CACE,KAAM,cACN,QAAS,WACT,MAAO,iDACT,EACA,CACE,KAAM,SACN,KAAM,WACN,QAAS,WACT,MAAO,6DACT,EACA,CACE,KAAM,QACN,QAAS,WACT,MAAO,qBACT,EACA,CACE,KAAM,SACN,QAAS,WACT,MAAO,sBACT,CACF,EAEaC,GAAsB;AAAA;AAAA;AAAA;AAAA,E,gBC5J5B,SAASC,IAAmB,CACjC,MAAMhF,KAAS,MAAWiF,EAAyB,EAE7CC,KACJ,OAACC,GAAA,CACC,WACE,QAAC,MAAG,UAAWnF,EAAO,OAAQ,oCACR,OAAC,QAAK,qFAAyE,GACrG,EAEF,UAAW6E,EAAA,CACb,EAGF,SACE,OAACO,EAAA,EAAK,CAAC,IAAK,EACV,mBAACD,GAAA,CACC,WACE,QAAC,M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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/contact-points/templates/EditorColumnHeader.tsx","webpack://grafana/./node_modules/date-fns/subDays.js","webpack://grafana/./node_modules/date-fns/addMinutes.js","webpack://grafana/./node_modules/date-fns/addHours.js","webpack://grafana/./node_modules/date-fns/subHours.js","webpack://grafana/./public/app/features/alerting/unified/components/receivers/AlertInstanceModalSelector.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/TemplateData.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/TemplateDataDocs.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/form/GenerateAlertDataModal.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/PayloadEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/TemplateDataExamples.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/TemplateForm.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/usePreviewTemplate.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/TemplatePreview.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/state-history/common.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Label, Stack, useStyles2 } from '@grafana/ui';\n\ntype Props = { label: string; actions?: React.ReactNode; id?: string };\n\nexport function EditorColumnHeader({ label, actions, id }: Props) {\n  const styles = useStyles2(editorColumnStyles);\n\n  return (\n    <div className={styles.container}>\n      <Label className={styles.label} id={id}>\n        {label}\n      </Label>\n      <Stack direction=\"row\" gap={1}>\n        {actions}\n      </Stack>\n    </div>\n  );\n}\n\nconst editorColumnStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: theme.spacing(1, 2),\n    backgroundColor: theme.colors.background.secondary,\n    borderBottom: `1px solid ${theme.colors.border.medium}`,\n  }),\n  label: css({\n    margin: 0,\n  }),\n});\n","import { addDays } from \"./addDays.js\";\n\n/**\n * The {@link subDays} function options.\n */\n\n/**\n * @name subDays\n * @category Day Helpers\n * @summary Subtract the specified number of days from the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of days to be subtracted.\n * @param options - An object with options\n *\n * @returns The new date with the days subtracted\n *\n * @example\n * // Subtract 10 days from 1 September 2014:\n * const result = subDays(new Date(2014, 8, 1), 10)\n * //=> Fri Aug 22 2014 00:00:00\n */\nexport function subDays(date, amount, options) {\n  return addDays(date, -amount, options);\n}\n\n// Fallback for modularized imports:\nexport default subDays;\n","import { millisecondsInMinute } from \"./constants.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link addMinutes} function options.\n */\n\n/**\n * @name addMinutes\n * @category Minute Helpers\n * @summary Add the specified number of minutes to the given date.\n *\n * @description\n * Add the specified number of minutes to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of minutes to be added.\n * @param options - An object with options\n *\n * @returns The new date with the minutes added\n *\n * @example\n * // Add 30 minutes to 10 July 2014 12:00:00:\n * const result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)\n * //=> Thu Jul 10 2014 12:30:00\n */\nexport function addMinutes(date, amount, options) {\n  const _date = toDate(date, options?.in);\n  _date.setTime(_date.getTime() + amount * millisecondsInMinute);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default addMinutes;\n","import { addMilliseconds } from \"./addMilliseconds.js\";\nimport { millisecondsInHour } from \"./constants.js\";\n\n/**\n * The {@link addHours} function options.\n */\n\n/**\n * @name addHours\n * @category Hour Helpers\n * @summary Add the specified number of hours to the given date.\n *\n * @description\n * Add the specified number of hours to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of hours to be added\n * @param options - An object with options\n *\n * @returns The new date with the hours added\n *\n * @example\n * // Add 2 hours to 10 July 2014 23:00:00:\n * const result = addHours(new Date(2014, 6, 10, 23, 0), 2)\n * //=> Fri Jul 11 2014 01:00:00\n */\nexport function addHours(date, amount, options) {\n  return addMilliseconds(date, amount * millisecondsInHour, options);\n}\n\n// Fallback for modularized imports:\nexport default addHours;\n","import { addHours } from \"./addHours.js\";\n\n/**\n * The {@link subHours} function options.\n */\n\n/**\n * @name subHours\n * @category Hour Helpers\n * @summary Subtract the specified number of hours from the given date.\n *\n * @description\n * Subtract the specified number of hours from the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of hours to be subtracted.\n * @param options - The options\n *\n * @returns The new date with the hours subtracted\n *\n * @example\n * // Subtract 2 hours from 11 July 2014 01:00:00:\n * const result = subHours(new Date(2014, 6, 11, 1, 0), 2)\n * //=> Thu Jul 10 2014 23:00:00\n */\nexport function subHours(date, amount, options) {\n  return addHours(date, -amount, options);\n}\n\n// Fallback for modularized imports:\nexport default subHours;\n","import { css, cx } from '@emotion/css';\nimport { CSSProperties, useCallback, useMemo, useState } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { FixedSizeList } from 'react-window';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport {\n  Button,\n  FilterInput,\n  Icon,\n  LoadingPlaceholder,\n  Modal,\n  Tag,\n  Tooltip,\n  clearButtonStyles,\n  useStyles2,\n} from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { AlertmanagerAlert, TestTemplateAlert } from 'app/plugins/datasource/alertmanager/types';\n\nimport { alertmanagerApi } from '../../api/alertmanagerApi';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { arrayLabelsToObject, labelsToTags, objectLabelsToArray } from '../../utils/labels';\nimport { extractCommonLabels, omitLabels } from '../rules/state-history/common';\n\nexport function AlertInstanceModalSelector({\n  onSelect,\n  isOpen,\n  onClose,\n}: {\n  onSelect: (alerts: TestTemplateAlert[]) => void;\n  isOpen: boolean;\n  onClose: () => void;\n}) {\n  const styles = useStyles2(getStyles);\n\n  const [selectedRule, setSelectedRule] = useState<string>();\n  const [selectedInstances, setSelectedInstances] = useState<AlertmanagerAlert[] | null>(null);\n  const { useGetAlertmanagerAlertsQuery } = alertmanagerApi;\n\n  const {\n    currentData: result = [],\n    isFetching: loading,\n    isError: error,\n  } = useGetAlertmanagerAlertsQuery({\n    amSourceName: GRAFANA_RULES_SOURCE_NAME,\n    filter: {\n      inhibited: true,\n      silenced: true,\n      active: true,\n    },\n  });\n\n  const [ruleFilter, setRuleFilter] = useState('');\n\n  const rulesWithInstances: Record<string, AlertmanagerAlert[]> = useMemo(() => {\n    const rules: Record<string, AlertmanagerAlert[]> = {};\n    if (!loading && result) {\n      result.forEach((instance) => {\n        if (!rules[instance.labels.alertname]) {\n          rules[instance.labels.alertname] = [];\n        }\n        const filteredAnnotations = Object.fromEntries(\n          Object.entries(instance.annotations).filter(([key]) => !key.startsWith('__'))\n        );\n        const filteredLabels = Object.fromEntries(\n          Object.entries(instance.labels).filter(([key]) => !key.startsWith('__'))\n        );\n        instance = { ...instance, annotations: filteredAnnotations, labels: filteredLabels };\n        rules[instance.labels.alertname].push(instance);\n      });\n    }\n    return rules;\n  }, [loading, result]);\n\n  const handleRuleChange = useCallback((rule: string) => {\n    setSelectedRule(rule);\n    setSelectedInstances(null);\n  }, []);\n\n  const filteredRules: Record<string, AlertmanagerAlert[]> = useMemo(() => {\n    const filteredRules = Object.keys(rulesWithInstances).filter((rule) =>\n      rule.toLowerCase().includes(ruleFilter.toLowerCase())\n    );\n    const filteredRulesObject: Record<string, AlertmanagerAlert[]> = {};\n    filteredRules.forEach((rule) => {\n      filteredRulesObject[rule] = rulesWithInstances[rule];\n    });\n    return filteredRulesObject;\n  }, [rulesWithInstances, ruleFilter]);\n\n  if (error) {\n    return null;\n  }\n\n  const filteredRulesKeys = Object.keys(filteredRules || []);\n\n  const RuleRow = ({ index, style }: { index: number; style?: CSSProperties }) => {\n    if (!filteredRules) {\n      return null;\n    }\n    const ruleName = filteredRulesKeys[index];\n\n    const isSelected = ruleName === selectedRule;\n\n    return (\n      <button\n        type=\"button\"\n        title={ruleName}\n        style={style}\n        className={cx(styles.rowButton, { [styles.rowOdd]: index % 2 === 1, [styles.rowSelected]: isSelected })}\n        onClick={() => handleRuleChange(ruleName)}\n      >\n        <div className={cx(styles.ruleTitle, styles.rowButtonTitle)}>{ruleName}</div>\n        <div className={styles.alertFolder}>\n          <Icon name=\"folder\" /> {filteredRules[ruleName][0].labels.grafana_folder ?? ''}\n        </div>\n      </button>\n    );\n  };\n\n  const getAlertUniqueLabels = (allAlerts: AlertmanagerAlert[], currentAlert: AlertmanagerAlert) => {\n    const allLabels = allAlerts.map((alert) => alert.labels);\n    const labelsAsArray = allLabels.map(objectLabelsToArray);\n\n    const ruleCommonLabels = extractCommonLabels(labelsAsArray);\n    const alertUniqueLabels = omitLabels(objectLabelsToArray(currentAlert.labels), ruleCommonLabels);\n\n    const tags = alertUniqueLabels.length\n      ? labelsToTags(arrayLabelsToObject(alertUniqueLabels))\n      : labelsToTags(currentAlert.labels);\n\n    return tags;\n  };\n\n  const InstanceRow = ({ index, style }: { index: number; style: CSSProperties }) => {\n    const alerts = useMemo(() => (selectedRule ? rulesWithInstances[selectedRule] : []), []);\n    const alert = alerts[index];\n    const isSelected = selectedInstances?.includes(alert);\n    const tags = useMemo(() => getAlertUniqueLabels(alerts, alert), [alerts, alert]);\n\n    const handleSelectInstances = () => {\n      if (isSelected && selectedInstances) {\n        setSelectedInstances(selectedInstances.filter((instance) => instance !== alert));\n        return;\n      }\n      setSelectedInstances([...(selectedInstances || []), alert]);\n    };\n\n    return (\n      <button\n        type=\"button\"\n        style={style}\n        className={cx(styles.rowButton, styles.instanceButton, {\n          [styles.rowOdd]: index % 2 === 1,\n          [styles.rowSelected]: isSelected,\n        })}\n        onClick={handleSelectInstances}\n      >\n        <div className={styles.rowButtonTitle} title={alert.labels.alertname}>\n          <Tooltip placement=\"bottom\" content={<pre>{JSON.stringify(alert, null, 2)}</pre>} theme={'info'}>\n            <div>\n              {tags.map((tag, index) => (\n                <Tag key={index} name={tag} className={styles.tag} />\n              ))}\n            </div>\n          </Tooltip>\n        </div>\n      </button>\n    );\n  };\n\n  const handleConfirm = () => {\n    const instances: TestTemplateAlert[] =\n      selectedInstances?.map((instance: AlertmanagerAlert) => {\n        const alert: TestTemplateAlert = {\n          status: 'firing',\n          annotations: instance.annotations,\n          labels: instance.labels,\n          startsAt: instance.startsAt,\n          endsAt: instance.endsAt,\n          generatorURL: instance.generatorURL,\n          fingerprint: instance.fingerprint,\n        };\n        return alert;\n      }) || [];\n\n    onSelect(instances);\n    resetState();\n  };\n\n  const resetState = () => {\n    setSelectedRule(undefined);\n    setSelectedInstances(null);\n    setRuleFilter('');\n    handleSearchRules('');\n  };\n\n  const onDismiss = () => {\n    resetState();\n    onClose();\n  };\n\n  const handleSearchRules = (filter: string) => {\n    setRuleFilter(filter);\n  };\n\n  return (\n    <div>\n      <Modal\n        title={t('alerting.alert-instance-modal-selector.title-select-alert-instances', 'Select alert instances')}\n        className={styles.modal}\n        closeOnEscape\n        isOpen={isOpen}\n        onDismiss={onDismiss}\n        contentClassName={styles.modalContent}\n      >\n        <div className={styles.container}>\n          <FilterInput\n            value={ruleFilter}\n            onChange={handleSearchRules}\n            title={t('alerting.alert-instance-modal-selector.title-search-alert-rule', 'Search alert rule')}\n            placeholder={t('alerting.alert-instance-modal-selector.placeholder-search-alert-rule', 'Search alert rule')}\n            autoFocus\n          />\n          <div>{(selectedRule && 'Select one or more instances from the list below') || ''}</div>\n\n          <div className={styles.column}>\n            {loading && (\n              <LoadingPlaceholder\n                text={t('alerting.alert-instance-modal-selector.text-loading-rules', 'Loading rules...')}\n                className={styles.loadingPlaceholder}\n              />\n            )}\n\n            {!loading && (\n              <AutoSizer>\n                {({ height, width }) => (\n                  <FixedSizeList itemSize={50} height={height} width={width} itemCount={filteredRulesKeys.length}>\n                    {RuleRow}\n                  </FixedSizeList>\n                )}\n              </AutoSizer>\n            )}\n          </div>\n\n          <div className={styles.column}>\n            {!selectedRule && !loading && (\n              <div className={styles.selectedRulePlaceholder}>\n                <div>Select an alert rule to get a list of available firing instances</div>\n              </div>\n            )}\n            {loading && (\n              <LoadingPlaceholder\n                text={t('alerting.alert-instance-modal-selector.text-loading-rule', 'Loading rule...')}\n                className={styles.loadingPlaceholder}\n              />\n            )}\n\n            {selectedRule && rulesWithInstances[selectedRule].length && !loading && (\n              <AutoSizer>\n                {({ width, height }) => (\n                  <FixedSizeList\n                    itemSize={32}\n                    height={height}\n                    width={width}\n                    itemCount={rulesWithInstances[selectedRule].length || 0}\n                  >\n                    {InstanceRow}\n                  </FixedSizeList>\n                )}\n              </AutoSizer>\n            )}\n          </div>\n        </div>\n        <Modal.ButtonRow>\n          <Button type=\"button\" variant=\"secondary\" onClick={onDismiss}>\n            <Trans i18nKey=\"alerting.common.cancel\">Cancel</Trans>\n          </Button>\n          <Button\n            type=\"button\"\n            variant=\"primary\"\n            disabled={!(selectedRule && selectedInstances)}\n            onClick={() => {\n              if (selectedRule && selectedInstances) {\n                handleConfirm();\n              }\n            }}\n          >\n            <Trans i18nKey=\"alerting.alert-instance-modal-selector.add-alert-data-to-payload\">\n              Add alert data to payload\n            </Trans>\n          </Button>\n        </Modal.ButtonRow>\n      </Modal>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const clearButton = clearButtonStyles(theme);\n\n  return {\n    container: css({\n      display: 'grid',\n      gridTemplateColumns: '1fr 1.5fr',\n      gridTemplateRows: 'min-content auto',\n      gap: theme.spacing(2),\n      flex: 1,\n    }),\n\n    tag: css({\n      margin: '5px',\n    }),\n\n    column: css({\n      flex: '1 1 auto',\n    }),\n\n    alertLabels: css({\n      overflowX: 'auto',\n      height: '32px',\n    }),\n    ruleTitle: css({\n      height: '22px',\n      fontWeight: theme.typography.fontWeightBold,\n    }),\n    rowButton: css(clearButton, {\n      padding: theme.spacing(0.5),\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      textAlign: 'left',\n      whiteSpace: 'nowrap',\n      cursor: 'pointer',\n      border: '2px solid transparent',\n\n      '&:disabled': {\n        cursor: 'not-allowed',\n        color: theme.colors.text.disabled,\n      },\n    }),\n    rowButtonTitle: css({\n      overflowX: 'auto',\n    }),\n    rowSelected: css({\n      borderColor: theme.colors.primary.border,\n    }),\n    rowOdd: css({\n      backgroundColor: theme.colors.background.secondary,\n    }),\n    instanceButton: css({\n      display: 'flex',\n      gap: theme.spacing(1),\n      justifyContent: 'space-between',\n      alignItems: 'center',\n    }),\n    loadingPlaceholder: css({\n      height: '100%',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n    }),\n    selectedRulePlaceholder: css({\n      width: '100%',\n      height: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      textAlign: 'center',\n      fontWeight: theme.typography.fontWeightBold,\n    }),\n    modal: css({\n      height: '100%',\n    }),\n    modalContent: css({\n      flex: 1,\n      display: 'flex',\n      flexDirection: 'column',\n    }),\n    modalAlert: css({\n      flexGrow: 0,\n    }),\n    warnIcon: css({\n      fill: theme.colors.warning.main,\n    }),\n    labels: css({\n      justifyContent: 'flex-start',\n    }),\n    alertFolder: css({\n      height: '20px',\n      fontSize: theme.typography.bodySmall.fontSize,\n      color: theme.colors.text.secondary,\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'flex-start',\n      columnGap: theme.spacing(1),\n      alignItems: 'center',\n    }),\n  };\n};\n","export interface TemplateDataItem {\n  name: string;\n  type: string;\n  notes: string;\n}\n\ninterface TemplateFunctionItem {\n  name: string;\n  args?: '[]string';\n  returns: 'KeyValue' | '[]string';\n  notes?: string;\n}\n\nexport const GlobalTemplateData: TemplateDataItem[] = [\n  {\n    name: 'Receiver',\n    type: 'string',\n    notes: 'Name of the contact point that the notification is being sent to.',\n  },\n  {\n    name: 'Status',\n    type: 'string',\n    notes: 'firing if at least one alert is firing, otherwise resolved',\n  },\n  {\n    name: 'Alerts',\n    type: '[]Alert',\n    notes: 'List of alert objects that are included in this notification.',\n  },\n  {\n    name: 'Alerts.Firing',\n    type: '[]Alert',\n    notes: 'List of firing alerts',\n  },\n  {\n    name: 'Alerts.Resolved',\n    type: '[]Alert',\n    notes: 'List of resolved alerts',\n  },\n  {\n    name: 'GroupLabels',\n    type: 'KeyValue',\n    notes: 'Labels these alerts were grouped by.',\n  },\n  {\n    name: 'CommonLabels',\n    type: 'KeyValue',\n    notes: 'Labels common to all the alerts included in this notification.',\n  },\n  {\n    name: 'CommonAnnotations',\n    type: 'KeyValue',\n    notes: 'Annotations common to all the alerts included in this notification.',\n  },\n  {\n    name: 'ExternalURL',\n    type: 'string',\n    notes: 'Back link to the Grafana that sent the notification.',\n  },\n];\n\nexport const AlertTemplatePreviewData: TemplateDataItem[] = [\n  {\n    name: 'labels',\n    type: 'Object{}',\n    notes: 'Set of labels attached to the alert.',\n  },\n  {\n    name: 'annotations',\n    type: 'Object{}',\n    notes: 'Set of annotations attached to the alert.',\n  },\n  {\n    name: 'startsAt',\n    type: 'string (ISO8601)',\n    notes: 'Time the alert started firing.',\n  },\n  {\n    name: 'endsAt',\n    type: 'string (ISO8601)',\n    notes: 'Time the alert ends firing.',\n  },\n];\n\nexport const AlertTemplateData: TemplateDataItem[] = [\n  {\n    name: 'Status',\n    type: 'string',\n    notes: 'firing or resolved.',\n  },\n  {\n    name: 'Labels',\n    type: 'KeyValue',\n    notes: 'Set of labels attached to the alert.',\n  },\n  {\n    name: 'Annotations',\n    type: 'KeyValue',\n    notes: 'Set of annotations attached to the alert.',\n  },\n  {\n    name: 'Values',\n    type: 'KeyValue',\n    notes:\n      'The values of all instant queries, reduce and math expressions, and classic conditions for the alert. It does not contain time series data.',\n  },\n  {\n    name: 'StartsAt',\n    type: 'time.Time',\n    notes: 'Time the alert started firing.',\n  },\n  {\n    name: 'EndsAt',\n    type: 'time.Time',\n    notes:\n      'Only set if the end time of an alert is known. Otherwise set to a configurable timeout period from the time since the last alert was received.',\n  },\n  {\n    name: 'GeneratorURL',\n    type: 'string',\n    notes: 'A back link to Grafana or external Alertmanager.',\n  },\n  {\n    name: 'SilenceURL',\n    type: 'string',\n    notes: 'Link to Grafana silence for with labels for this alert pre-filled. Only for Grafana managed alerts.',\n  },\n  {\n    name: 'DashboardURL',\n    type: 'string',\n    notes: 'Link to Grafana dashboard, if alert rule belongs to one. Only for Grafana managed alerts.',\n  },\n  {\n    name: 'PanelURL',\n    type: 'string',\n    notes: 'Link to Grafana dashboard panel, if alert rule belongs to one. Only for Grafana managed alerts.',\n  },\n  {\n    name: 'Fingerprint',\n    type: 'string',\n    notes: 'Fingerprint that can be used to identify the alert.',\n  },\n  {\n    name: 'ValueString',\n    type: 'string',\n    notes: 'String that contains the labels and value of each reduced expression in the alert.',\n  },\n];\n\nexport const KeyValueTemplateFunctions: TemplateFunctionItem[] = [\n  {\n    name: 'SortedPairs',\n    returns: 'KeyValue',\n    notes: 'Returns sorted list of key & value string pairs',\n  },\n  {\n    name: 'Remove',\n    args: '[]string',\n    returns: 'KeyValue',\n    notes: 'Returns a copy of the Key/Value map without the given keys.',\n  },\n  {\n    name: 'Names',\n    returns: '[]string',\n    notes: 'List of label names',\n  },\n  {\n    name: 'Values',\n    returns: '[]string',\n    notes: 'List of label values',\n  },\n];\n\nexport const KeyValueCodeSnippet = `{\n  \"summary\": \"alert summary\",\n  \"description\": \"alert description\"\n}\n`;\n","import { css } from '@emotion/css';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack, useStyles2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nimport { PopupCard } from '../HoverCard';\n\nimport {\n  AlertTemplateData,\n  GlobalTemplateData,\n  KeyValueCodeSnippet,\n  KeyValueTemplateFunctions,\n  TemplateDataItem,\n} from './TemplateData';\n\nexport function TemplateDataDocs() {\n  const styles = useStyles2(getTemplateDataDocsStyles);\n\n  const AlertTemplateDataTable = (\n    <TemplateDataTable\n      caption={\n        <h4 className={styles.header}>\n          Alert template data <span>Available only when in the context of an Alert (e.g. inside .Alerts loop)</span>\n        </h4>\n      }\n      dataItems={AlertTemplateData}\n    />\n  );\n\n  return (\n    <Stack gap={2}>\n      <TemplateDataTable\n        caption={\n          <h4 className={styles.header}>\n            Notification template data <span>Available in the context of a notification.</span>{' '}\n          </h4>\n        }\n        dataItems={GlobalTemplateData}\n        typeRenderer={(type) =>\n          type === '[]Alert' ? (\n            <PopupCard content={AlertTemplateDataTable}>\n              <div className={styles.interactiveType}>{type}</div>\n            </PopupCard>\n          ) : type === 'KeyValue' ? (\n            <PopupCard content={<KeyValueTemplateDataTable />}>\n              <div className={styles.interactiveType}>{type}</div>\n            </PopupCard>\n          ) : (\n            type\n          )\n        }\n      />\n    </Stack>\n  );\n}\n\nexport const getTemplateDataDocsStyles = (theme: GrafanaTheme2) => ({\n  header: css({\n    color: theme.colors.text.primary,\n\n    span: {\n      color: theme.colors.text.secondary,\n      fontSize: theme.typography.bodySmall.fontSize,\n    },\n  }),\n  interactiveType: css({\n    color: theme.colors.text.link,\n  }),\n});\n\ninterface TemplateDataTableProps {\n  dataItems: TemplateDataItem[];\n  caption?: JSX.Element | string;\n  typeRenderer?: (type: TemplateDataItem['type']) => React.ReactNode;\n}\n\nexport function TemplateDataTable({ dataItems, caption, typeRenderer }: TemplateDataTableProps) {\n  const styles = useStyles2(getTemplateDataTableStyles);\n\n  return (\n    <table className={styles.table}>\n      {caption && <caption>{caption}</caption>}\n      <thead>\n        <tr>\n          <th>\n            <Trans i18nKey=\"alerting.template-data-table.name\">Name</Trans>\n          </th>\n          <th>\n            <Trans i18nKey=\"alerting.template-data-table.type\">Type</Trans>\n          </th>\n          <th>\n            <Trans i18nKey=\"alerting.template-data-table.notes\">Notes</Trans>\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        {dataItems.map(({ name, type, notes }, index) => (\n          <tr key={index}>\n            <td>{name}</td>\n            <td>{typeRenderer ? typeRenderer(type) : type}</td>\n            <td>{notes}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nfunction KeyValueTemplateDataTable() {\n  const tableStyles = useStyles2(getTemplateDataTableStyles);\n\n  return (\n    <div>\n      KeyValue is a set of key/value string pairs that represent labels and annotations.\n      <pre>\n        <code>{KeyValueCodeSnippet}</code>\n      </pre>\n      <table className={tableStyles.table}>\n        <caption>\n          <Trans i18nKey=\"alerting.key-value-template-data-table.keyvalue-methods\">Key-value methods</Trans>\n        </caption>\n        <thead>\n          <tr>\n            <th>\n              <Trans i18nKey=\"alerting.key-value-template-data-table.name\">Name</Trans>\n            </th>\n            <th>\n              <Trans i18nKey=\"alerting.key-value-template-data-table.arguments\">Arguments</Trans>\n            </th>\n            <th>\n              <Trans i18nKey=\"alerting.key-value-template-data-table.returns\">Returns</Trans>\n            </th>\n            <th>\n              <Trans i18nKey=\"alerting.key-value-template-data-table.notes\">Notes</Trans>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {KeyValueTemplateFunctions.map(({ name, args, returns, notes }) => (\n            <tr key={name}>\n              <td>{name}</td>\n              <td>{args}</td>\n              <td>{returns}</td>\n              <td>{notes}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport const getTemplateDataTableStyles = (theme: GrafanaTheme2) => ({\n  table: css({\n    borderCollapse: 'collapse',\n    width: '100%',\n\n    caption: {\n      captionSide: 'top',\n    },\n\n    'td, th': {\n      padding: theme.spacing(1, 1),\n    },\n\n    thead: {\n      fontWeight: theme.typography.fontWeightBold,\n    },\n\n    'tbody tr:nth-child(2n + 1)': {\n      backgroundColor: theme.colors.background.secondary,\n    },\n\n    'tbody td:nth-child(1)': {\n      fontWeight: theme.typography.fontWeightBold,\n    },\n\n    'tbody td:nth-child(2)': {\n      fontStyle: 'italic',\n    },\n  }),\n});\n","import { css } from '@emotion/css';\nimport { addDays, subDays } from 'date-fns';\nimport { uniqueId } from 'lodash';\nimport { useState } from 'react';\nimport { FormProvider, useForm } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Card, Modal, RadioButtonGroup, Stack, useStyles2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { TestTemplateAlert } from 'app/plugins/datasource/alertmanager/types';\n\nimport { KeyValueField } from '../../../api/templateApi';\nimport AnnotationsStep from '../../rule-editor/AnnotationsStep';\nimport LabelsField from '../../rule-editor/labels/LabelsField';\n\ninterface Props {\n  isOpen: boolean;\n  onDismiss: () => void;\n  onAccept: (alerts: TestTemplateAlert[]) => void;\n}\n\ninterface FormFields {\n  annotations: KeyValueField[];\n  labels: KeyValueField[];\n  status: 'firing' | 'resolved';\n}\n\nconst defaultValues: FormFields = {\n  annotations: [{ key: '', value: '' }],\n  labels: [{ key: '', value: '' }],\n  status: 'firing',\n};\n\nexport const GenerateAlertDataModal = ({ isOpen, onDismiss, onAccept }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const [alerts, setAlerts] = useState<TestTemplateAlert[]>([]);\n\n  const formMethods = useForm<FormFields>({ defaultValues, mode: 'onBlur' });\n  const annotations = formMethods.watch('annotations');\n  const labels = formMethods.watch('labels');\n  const [status, setStatus] = useState<'firing' | 'resolved'>('firing');\n\n  const onAdd = () => {\n    const alert: TestTemplateAlert = {\n      annotations: annotations\n        .filter(({ key, value }) => !!key && !!value)\n        .reduce((acc, { key, value }) => {\n          return { ...acc, [key]: value };\n        }, {}),\n      labels: labels\n        .filter(({ key, value }) => !!key && !!value)\n        .reduce((acc, { key, value }) => {\n          return { ...acc, [key]: value };\n        }, {}),\n      startsAt: '2023-04-01T00:00:00Z',\n      endsAt: status === 'firing' ? addDays(new Date(), 1).toISOString() : subDays(new Date(), 1).toISOString(),\n      status,\n      fingerprint: uniqueId('fingerprint_'),\n    };\n    setAlerts((alerts) => [...alerts, alert]);\n    formMethods.reset();\n  };\n\n  const onSubmit = () => {\n    onAccept(alerts);\n    setAlerts([]);\n    formMethods.reset();\n    setStatus('firing');\n  };\n\n  const labelsOrAnnotationsAdded = () => {\n    const someLabels = labels.some((lb) => lb.key !== '' && lb.value !== '');\n    const someAnnotations = annotations.some((ann) => ann.key !== '' && ann.value !== '');\n    return someLabels || someAnnotations;\n  };\n\n  type AlertOption = {\n    label: string;\n    value: 'firing' | 'resolved';\n  };\n  const alertOptions: AlertOption[] = [\n    {\n      label: 'Firing',\n      value: 'firing',\n    },\n    { label: 'Resolved', value: 'resolved' },\n  ];\n\n  return (\n    <Modal\n      onDismiss={onDismiss}\n      isOpen={isOpen}\n      title={t('alerting.generate-alert-data-modal.title-add-custom-alerts', 'Add custom alerts')}\n    >\n      <FormProvider {...formMethods}>\n        <form\n          onSubmit={(e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            formMethods.reset();\n            setStatus('firing');\n          }}\n        >\n          <Card>\n            <Stack direction=\"column\" gap={1}>\n              <div className={styles.section}>\n                <AnnotationsStep />\n              </div>\n              <div className={styles.section}>\n                <LabelsField />\n              </div>\n              <div className={styles.flexWrapper}>\n                <RadioButtonGroup value={status} options={alertOptions} onChange={(value) => setStatus(value)} />\n                <Button\n                  onClick={onAdd}\n                  className={styles.onAddButton}\n                  icon=\"plus-circle\"\n                  type=\"button\"\n                  variant=\"secondary\"\n                  disabled={!labelsOrAnnotationsAdded()}\n                >\n                  <Trans i18nKey=\"alerting.generate-alert-data-modal.add-alert-data\">Add alert data</Trans>\n                </Button>\n              </div>\n            </Stack>\n          </Card>\n          <div className={styles.onSubmitWrapper} />\n          {alerts.length > 0 && (\n            <Stack direction=\"column\" gap={1}>\n              <h5>\n                <Trans i18nKey=\"alerting.generate-alert-data-modal.review-alert-payload\">\n                  {' '}\n                  Review alert data to add to the payload:\n                </Trans>\n              </h5>\n              <pre className={styles.result} data-testid=\"payloadJSON\">\n                {JSON.stringify(alerts, null, 2)}\n              </pre>\n            </Stack>\n          )}\n          <div className={styles.onSubmitWrapper}>\n            <Modal.ButtonRow>\n              <Button onClick={onSubmit} disabled={alerts.length === 0} className={styles.onSubmitButton}>\n                <Trans i18nKey=\"alerting.generate-alert-data-modal.add-alert-data-to-payload\">\n                  Add alert data to payload\n                </Trans>\n              </Button>\n            </Modal.ButtonRow>\n          </div>\n        </form>\n      </FormProvider>\n    </Modal>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  section: css({\n    marginBottom: theme.spacing(2),\n  }),\n  onAddButton: css({\n    flex: 'none',\n    width: 'fit-content',\n    paddingRight: theme.spacing(1),\n    marginLeft: 'auto',\n  }),\n  flexWrapper: css({\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  }),\n  onSubmitWrapper: css({\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'baseline',\n    justifyContent: 'flex-end',\n  }),\n  onSubmitButton: css({\n    marginLeft: theme.spacing(2),\n  }),\n  result: css({\n    width: '570px',\n    height: '363px',\n  }),\n});\n","import { css, cx } from '@emotion/css';\nimport { useState } from 'react';\nimport * as React from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, CodeEditor, Dropdown, Menu, Stack, Toggletip, useStyles2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { TestTemplateAlert } from 'app/plugins/datasource/alertmanager/types';\n\nimport { EditorColumnHeader } from '../contact-points/templates/EditorColumnHeader';\n\nimport { AlertInstanceModalSelector } from './AlertInstanceModalSelector';\nimport { AlertTemplatePreviewData } from './TemplateData';\nimport { TemplateDataTable } from './TemplateDataDocs';\nimport { GenerateAlertDataModal } from './form/GenerateAlertDataModal';\n\nexport const RESET_TO_DEFAULT = 'Reset to defaults';\n\nexport function PayloadEditor({\n  payload,\n  setPayload,\n  defaultPayload,\n  setPayloadFormatError,\n  payloadFormatError,\n  className,\n}: {\n  payload: string;\n  defaultPayload: string;\n  setPayload: React.Dispatch<React.SetStateAction<string>>;\n  setPayloadFormatError: (value: React.SetStateAction<string | null>) => void;\n  payloadFormatError: string | null;\n  className?: string;\n}) {\n  const styles = useStyles2(getStyles);\n  const onReset = () => {\n    setPayload(defaultPayload);\n  };\n\n  const [isEditingAlertData, setIsEditingAlertData] = useState(false);\n\n  const onCloseEditAlertModal = () => {\n    setIsEditingAlertData(false);\n  };\n\n  const errorInPayloadJson = payloadFormatError !== null;\n\n  const validatePayload = () => {\n    try {\n      const payloadObj = JSON.parse(payload);\n      JSON.stringify([...payloadObj]); // check if it's iterable, in order to be able to add more data\n      setPayloadFormatError(null);\n    } catch (e) {\n      setPayloadFormatError(e instanceof Error ? e.message : 'Invalid JSON.');\n      throw e;\n    }\n  };\n\n  const onOpenEditAlertModal = () => {\n    try {\n      validatePayload();\n      setIsEditingAlertData(true);\n    } catch (e) {}\n  };\n\n  const onOpenAlertSelectorModal = () => {\n    try {\n      validatePayload();\n      setIsAlertSelectorOpen(true);\n    } catch (e) {}\n  };\n\n  const onAddAlertList = (alerts: TestTemplateAlert[]) => {\n    onCloseEditAlertModal();\n    setIsAlertSelectorOpen(false);\n    setPayload((payload) => {\n      const payloadObj = JSON.parse(payload);\n      return JSON.stringify([...payloadObj, ...alerts], undefined, 2);\n    });\n  };\n\n  const [isAlertSelectorOpen, setIsAlertSelectorOpen] = useState(false);\n\n  return (\n    <>\n      <div className={cx(styles.wrapper, className)}>\n        <EditorColumnHeader\n          label={t('alerting.payload-editor.label-payload', 'Payload')}\n          actions={\n            <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n              <Dropdown\n                overlay={\n                  <Menu>\n                    <Menu.Item\n                      label={t(\n                        'alerting.payload-editor.label-use-existing-alert-instances',\n                        'Use existing alert instances'\n                      )}\n                      disabled={errorInPayloadJson}\n                      onClick={onOpenAlertSelectorModal}\n                    />\n                    <Menu.Item\n                      label={t('alerting.payload-editor.label-add-custom-alert-instance', 'Add custom alert instance')}\n                      disabled={errorInPayloadJson}\n                      onClick={onOpenEditAlertModal}\n                    />\n                    <Menu.Divider />\n                    <Menu.Item label={RESET_TO_DEFAULT} onClick={onReset} destructive />\n                  </Menu>\n                }\n              >\n                <Button variant=\"secondary\" size=\"sm\" icon=\"angle-down\">\n                  <Trans i18nKey=\"alerting.payload-editor.edit-payload\">Edit payload</Trans>\n                </Button>\n              </Dropdown>\n              <Toggletip content={<AlertTemplateDataTable />} placement=\"top\" fitContent>\n                <Button variant=\"secondary\" fill=\"outline\" size=\"sm\" icon=\"question-circle\">\n                  <Trans i18nKey=\"alerting.payload-editor.reference\">Reference</Trans>\n                </Button>\n              </Toggletip>\n            </Stack>\n          }\n        />\n\n        <div className={styles.editorWrapper}>\n          <AutoSizer>\n            {({ width, height }) => (\n              <CodeEditor\n                containerStyles={styles.editorContainer}\n                width={width}\n                height={height}\n                language={'json'}\n                showLineNumbers={true}\n                showMiniMap={false}\n                value={payload}\n                readOnly={false}\n                onBlur={setPayload}\n                monacoOptions={{\n                  scrollBeyondLastLine: false,\n                }}\n              />\n            )}\n          </AutoSizer>\n        </div>\n      </div>\n\n      <GenerateAlertDataModal isOpen={isEditingAlertData} onDismiss={onCloseEditAlertModal} onAccept={onAddAlertList} />\n\n      <AlertInstanceModalSelector\n        onSelect={onAddAlertList}\n        isOpen={isAlertSelectorOpen}\n        onClose={() => setIsAlertSelectorOpen(false)}\n      />\n    </>\n  );\n}\nconst AlertTemplateDataTable = () => {\n  return <TemplateDataTable dataItems={AlertTemplatePreviewData} />;\n};\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    display: 'flex',\n    flexDirection: 'column',\n    height: '100%',\n  }),\n  tooltip: css({\n    paddingLeft: theme.spacing(1),\n  }),\n  label: css({\n    margin: 0,\n  }),\n  editorWrapper: css({\n    flex: 1,\n  }),\n  editorContainer: css({\n    width: 'fit-content',\n    border: 'none',\n  }),\n  templateDataDocsHeader: css({\n    color: theme.colors.text.primary,\n\n    span: {\n      color: theme.colors.text.secondary,\n      fontSize: theme.typography.bodySmall.fontSize,\n    },\n  }),\n});\n","export interface TemplateExampleItem {\n  description: string;\n  example: string;\n}\n\nexport const GlobalTemplateDataExamples: TemplateExampleItem[] = [\n  {\n    description: 'Default templates for notification titles',\n    example: `{{- /* This is a copy of the \"default.title\" template. */ -}}\n{{- /* Edit the template name and template content as needed. */ -}}\n{{ define \"default.title.copy\" }}\n  [{{ .Status | toUpper }}{{ if eq .Status \"firing\" }}:{{ .Alerts.Firing | len }}{{ if gt (.Alerts.Resolved | len) 0 }}, RESOLVED:{{ .Alerts.Resolved | len }}{{ end }}{{ end }}] {{ .GroupLabels.SortedPairs.Values | join \" \" }} {{ if gt (len .CommonLabels) (len .GroupLabels) }}({{ with .CommonLabels.Remove .GroupLabels.Names }}{{ .Values | join \" \" }}{{ end }}){{ end }}\n{{ end }}`,\n  },\n  {\n    description: 'Default templates for notification messages',\n    example: `{{- /* This is a copy of the \"default.message\" template. */ -}}\n{{- /* Edit the template name and template content as needed. */ -}}\n{{ define \"default.message.copy\" }}{{ if gt (len .Alerts.Firing) 0 }}**Firing**\n{{ template \"__text_alert_list.copy\" .Alerts.Firing }}{{ if gt (len .Alerts.Resolved) 0 }}\n\n{{ end }}{{ end }}{{ if gt (len .Alerts.Resolved) 0 }}**Resolved**\n{{ template \"__text_alert_list.copy\" .Alerts.Resolved }}{{ end }}{{ end }}\n\n{{ define \"__text_alert_list.copy\" }}{{ range . }}\nValue: {{ template \"__text_values_list.copy\" . }}\nLabels:\n{{ range .Labels.SortedPairs }} - {{ .Name }} = {{ .Value }}\n{{ end }}Annotations:\n{{ range .Annotations.SortedPairs }} - {{ .Name }} = {{ .Value }}\n{{ end }}{{ if gt (len .GeneratorURL) 0 }}Source: {{ .GeneratorURL }}\n{{ end }}{{ if gt (len .SilenceURL) 0 }}Silence: {{ .SilenceURL }}\n{{ end }}{{ if gt (len .DashboardURL) 0 }}Dashboard: {{ .DashboardURL }}\n{{ end }}{{ if gt (len .PanelURL) 0 }}Panel: {{ .PanelURL }}\n{{ end }}{{ end }}{{ end }}\n\n{{ define \"__text_values_list.copy\" }}{{ if len .Values }}{{ $first := true }}{{ range $refID, $value := .Values -}}\n{{ if $first }}{{ $first = false }}{{ else }}, {{ end }}{{ $refID }}={{ $value }}{{ end -}}\n{{ else }}[no value]{{ end }}{{ end }}`,\n  },\n  {\n    description: 'Print alerts with summary and description',\n    example: `{{- /* Example displaying the summary and description annotations of each alert in the notification. */ -}}\n{{- /* Edit the template name and template content as needed. */ -}}\n{{ define \"custom.alerts\" -}}\n{{ len .Alerts }} alert(s)\n{{ range .Alerts -}}\n  {{ template \"alert.summary_and_description\" . -}}\n{{ end -}}\n{{ end -}}\n\n{{ define \"alert.summary_and_description\" }}\n  Summary: {{.Annotations.summary}}\n  Status: {{ .Status }}\n  Description: {{.Annotations.description}}\n{{ end -}}`,\n  },\n  {\n    description: 'Print firing and resolved alerts',\n    example: `{{- /* Example displaying firing and resolved alerts separately in the notification. */ -}}\n{{- /* Edit the template name and template content as needed. */ -}}\n{{ define \"custom.firing_and_resolved_alerts\" -}}\n{{ len .Alerts.Resolved }} resolved alert(s)\n{{ range .Alerts.Resolved -}}\n  {{ template \"alert.summary_and_description\" . -}}\n{{ end }}\n{{ len .Alerts.Firing }} firing alert(s)\n{{ range .Alerts.Firing -}}\n  {{ template \"alert.summary_and_description\" . -}}\n{{ end -}}\n{{ end -}}\n\n{{ define \"alert.summary_and_description\" }}\n  Summary: {{.Annotations.summary}}\n  Status: {{ .Status }}\n  Description: {{.Annotations.description}}\n{{ end -}}`,\n  },\n  {\n    description: 'Print common labels and annotations',\n    example: `{{- /* Example displaying labels and annotations that are common to all alerts in the notification.*/ -}}\n{{- /* Edit the template name and template content as needed. */ -}}\n{{ define \"custom.common_labels_and_annotations\" -}}\n{{ len .Alerts.Resolved }} resolved alert(s)\n{{ len .Alerts.Firing }} firing alert(s)\n\nCommon labels: {{ len .CommonLabels.SortedPairs }}\n{{ range .CommonLabels.SortedPairs -}}\n- {{ .Name }} = {{ .Value }}\n{{ end }}\n\nCommon annotations: {{ len .CommonAnnotations.SortedPairs }}\n{{ range .CommonAnnotations.SortedPairs }}\n- {{ .Name }} = {{ .Value }}\n{{ end }}\n\n{{ end -}}`,\n  },\n  {\n    description: 'Print individual labels and annotations',\n    example: `{{- /* Example displaying all labels and annotations for each alert in the notification.*/ -}}\n{{- /* Edit the template name and template content as needed. */ -}}\n{{ define \"custom.alert_labels_and_annotations\" -}}\n{{ len .Alerts.Resolved }} resolved alert(s)\n{{ range .Alerts.Resolved -}}\n  {{ template \"alert.labels_and_annotations\" . -}}\n{{ end }}\n{{ len .Alerts.Firing }} firing alert(s)\n{{ range .Alerts.Firing -}}\n  {{ template \"alert.labels_and_annotations\" . -}}\n{{ end -}}\n{{ end -}}\n\n{{ define \"alert.labels_and_annotations\" }}\nAlert labels: {{ len .Labels.SortedPairs }}\n{{ range .Labels.SortedPairs -}}\n- {{ .Name }} = {{ .Value }}\n{{ end -}}\nAlert annotations: {{ len .Annotations.SortedPairs }}\n{{ range .Annotations.SortedPairs -}}\n- {{ .Name }} = {{ .Value }}\n{{ end -}}\n{{ end -}}`,\n  },\n  {\n    description: 'Print URLs for runbook and alert data in Grafana',\n    example: `{{- /* Example displaying additional information, such as runbook link, DashboardURL and SilenceURL, for each alert in the notification.*/ -}}\n{{- /* Edit the template name and template content as needed. */ -}}\n{{ define \"custom.alert_additional_details\" -}}\n{{ len .Alerts.Resolved }} resolved alert(s)\n{{ range .Alerts.Resolved -}}\n  {{ template \"alert.additional_details\" . -}}\n{{ end }}\n{{ len .Alerts.Firing }} firing alert(s)\n{{ range .Alerts.Firing -}}\n  {{ template \"alert.additional_details\" . -}}\n{{ end -}}\n{{ end -}}\n\n{{ define \"alert.additional_details\" }}\n- Dashboard: {{ .DashboardURL }}\n- Panel: {{ .PanelURL }}\n- AlertGenerator: {{ .GeneratorURL }}\n- Silence: {{ .SilenceURL }}\n- RunbookURL: {{ .Annotations.runbook_url}}\n{{ end -}}`,\n  },\n  {\n    description: 'Create JSON payload for webhook contact point',\n    example: `{{- /* Example displaying a custom JSON payload for a webhook contact point.*/ -}}\n{{- /* Edit the template name and template content as needed. */ -}}\n{{- /* Variables defined in the webhook contact point can be accessed in .Vars but will not be previewable. */ -}}\n{{ define \"webhook.custom.payload\" -}}\n  {{ coll.Dict\n  \"receiver\" .Receiver\n  \"status\" .Status\n  \"alerts\" (tmpl.Exec \"webhook.custom.simple_alerts\" .Alerts | data.JSON)\n  \"groupLabels\" .GroupLabels\n  \"commonLabels\" .CommonLabels\n  \"commonAnnotations\" .CommonAnnotations\n  \"externalURL\" .ExternalURL\n  \"version\" \"1\"\n  \"orgId\"  (index .Alerts 0).OrgID\n  \"truncatedAlerts\"  .TruncatedAlerts\n  \"groupKey\" .GroupKey\n  \"state\"  (tmpl.Inline \"{{ if eq .Status \\\\\"resolved\\\\\" }}ok{{ else }}alerting{{ end }}\" . )\n  \"allVariables\"  .Vars\n  \"title\" (tmpl.Exec \"default.title\" . )\n  \"message\" (tmpl.Exec \"default.message\" . )\n  | data.ToJSONPretty \" \"}}\n{{- end }}\n\n{{- /* Example showcasing embedding json templates in other json templates. */ -}}\n{{ define \"webhook.custom.simple_alerts\" -}}\n  {{- $alerts := coll.Slice -}}\n  {{- range . -}}\n    {{ $alerts = coll.Append (coll.Dict\n    \"status\" .Status\n    \"labels\" .Labels\n    \"startsAt\" .StartsAt\n    \"endsAt\" .EndsAt\n    ) $alerts}}\n  {{- end -}}\n  {{- $alerts | data.ToJSON -}}\n{{- end }}`,\n  },\n];\n","import { css, cx } from '@emotion/css';\nimport { addMinutes, subDays, subHours } from 'date-fns';\nimport { Location } from 'history';\nimport { useRef, useState } from 'react';\nimport { FormProvider, useForm } from 'react-hook-form';\nimport { useToggle } from 'react-use';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { isFetchError, locationService } from '@grafana/runtime';\nimport {\n  Alert,\n  Box,\n  Button,\n  Drawer,\n  Dropdown,\n  FieldSet,\n  InlineField,\n  Input,\n  LinkButton,\n  Menu,\n  Stack,\n  Text,\n  useSplitter,\n  useStyles2,\n} from '@grafana/ui';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { Trans, t } from 'app/core/internationalization';\nimport { ActiveTab as ContactPointsActiveTabs } from 'app/features/alerting/unified/components/contact-points/ContactPoints';\nimport { TestTemplateAlert } from 'app/plugins/datasource/alertmanager/types';\n\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { makeAMLink, stringifyErrorLike } from '../../utils/misc';\nimport { ProvisionedResource, ProvisioningAlert } from '../Provisioning';\nimport { Spacer } from '../Spacer';\nimport { EditorColumnHeader } from '../contact-points/templates/EditorColumnHeader';\nimport {\n  NotificationTemplate,\n  useCreateNotificationTemplate,\n  useNotificationTemplateMetadata,\n  useUpdateNotificationTemplate,\n  useValidateNotificationTemplate,\n} from '../contact-points/useNotificationTemplates';\n\nimport { PayloadEditor } from './PayloadEditor';\nimport { TemplateDataDocs } from './TemplateDataDocs';\nimport { GlobalTemplateDataExamples } from './TemplateDataExamples';\nimport { TemplateEditor } from './TemplateEditor';\nimport { TemplatePreview } from './TemplatePreview';\nimport { snippets } from './editor/templateDataSuggestions';\n\nexport interface TemplateFormValues {\n  title: string;\n  content: string;\n}\n\nexport const defaults: TemplateFormValues = Object.freeze({\n  title: '',\n  content: '',\n});\n\ninterface Props {\n  originalTemplate?: NotificationTemplate;\n  prefill?: TemplateFormValues;\n  alertmanager: string;\n}\n\nexport const isDuplicating = (location: Location) => location.pathname.endsWith('/duplicate');\n\n/**\n * We're going for this type of layout, but with the ability to resize the columns.\n * To achieve this, we're using the useSplitter hook from Grafana UI twice.\n * The first hook is for the vertical splitter between the template editor and the payload editor.\n * The second hook is for the horizontal splitter between the template editor and the preview.\n * If we're using a vanilla Alertmanager source, we don't show the payload editor nor the preview but we still use the splitter at 100/0.\n *\n * ┌───────────────────┐┌───────────┐\n * │ Template          ││ Preview   │\n * │                   ││           │\n * │                   ││           │\n * │                   ││           │\n * └───────────────────┘│           │\n * ┌───────────────────┐│           │\n * │ Payload           ││           │\n * │                   ││           │\n * │                   ││           │\n * │                   ││           │\n * └───────────────────┘└───────────┘\n */\nexport const TemplateForm = ({ originalTemplate, prefill, alertmanager }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const appNotification = useAppNotification();\n\n  const [createNewTemplate, { error: createTemplateError }] = useCreateNotificationTemplate({ alertmanager });\n  const [updateTemplate, { error: updateTemplateError }] = useUpdateNotificationTemplate({ alertmanager });\n  const { titleIsUnique } = useValidateNotificationTemplate({ alertmanager, originalTemplate });\n\n  const formRef = useRef<HTMLFormElement>(null);\n  const isGrafanaAlertManager = alertmanager === GRAFANA_RULES_SOURCE_NAME;\n\n  const error = updateTemplateError ?? createTemplateError;\n\n  const [cheatsheetOpened, toggleCheatsheetOpened] = useToggle(false);\n\n  const [payload, setPayload] = useState(defaultPayloadString);\n  const [payloadFormatError, setPayloadFormatError] = useState<string | null>(null);\n\n  const { isProvisioned } = useNotificationTemplateMetadata(originalTemplate);\n  const originalTemplatePrefill: TemplateFormValues | undefined = originalTemplate\n    ? { title: originalTemplate.title, content: originalTemplate.content }\n    : undefined;\n\n  // splitter for template and payload editor\n  const columnSplitter = useSplitter({\n    direction: 'column',\n    // if Grafana Alertmanager, split 50/50, otherwise 100/0 because there is no payload editor\n    initialSize: isGrafanaAlertManager ? 0.5 : 1,\n    dragPosition: 'middle',\n  });\n\n  // splitter for template editor and preview\n  const rowSplitter = useSplitter({\n    direction: 'row',\n    // if Grafana Alertmanager, split 60/40, otherwise 100/0 because there is no preview\n    initialSize: isGrafanaAlertManager ? 0.6 : 1,\n    dragPosition: 'middle',\n  });\n\n  const formApi = useForm<TemplateFormValues>({\n    mode: 'onSubmit',\n    defaultValues: prefill ?? originalTemplatePrefill ?? defaults,\n  });\n  const {\n    handleSubmit,\n    register,\n    formState: { errors, isSubmitting },\n    getValues,\n    setValue,\n    watch,\n  } = formApi;\n\n  const submit = async (values: TemplateFormValues) => {\n    const returnLink = makeAMLink('/alerting/notifications', alertmanager, {\n      tab: ContactPointsActiveTabs.NotificationTemplates,\n    });\n\n    try {\n      if (!originalTemplate) {\n        await createNewTemplate.execute({ templateValues: values });\n      } else {\n        await updateTemplate.execute({ template: originalTemplate, patch: values });\n      }\n      appNotification.success('Template saved', `Template ${values.title} has been saved`);\n      locationService.push(returnLink);\n    } catch (error) {\n      appNotification.error('Error saving template', stringifyErrorLike(error));\n    }\n  };\n\n  const appendExample = (example: string) => {\n    const content = getValues('content'),\n      newValue = !content ? example : `${content}\\n${example}`;\n    setValue('content', newValue);\n  };\n\n  return (\n    <>\n      <FormProvider {...formApi}>\n        <form\n          onSubmit={handleSubmit(submit)}\n          ref={formRef}\n          className={styles.form}\n          aria-label={t('alerting.template-form.aria-label-template-form', 'Template form')}\n        >\n          {/* error message */}\n          {error && (\n            <Alert\n              severity=\"error\"\n              title={t('alerting.template-form.title-error-saving-template', 'Error saving template')}\n            >\n              {error.message || (isFetchError(error) && error.data?.message) || String(error)}\n            </Alert>\n          )}\n          {/* warning about provisioned template */}\n          {isProvisioned && (\n            <Box grow={0}>\n              <ProvisioningAlert resource={ProvisionedResource.Template} />\n            </Box>\n          )}\n\n          {/* name field for the template */}\n          <FieldSet disabled={isProvisioned} className={styles.fieldset}>\n            <Stack direction=\"column\" gap={1} alignItems=\"stretch\" minHeight=\"100%\">\n              {/* name and save buttons */}\n              <Stack direction=\"row\" alignItems=\"center\">\n                <InlineField\n                  label={t('alerting.template-form.label-template-group-name', 'Template group name')}\n                  error={errors?.title?.message}\n                  invalid={!!errors.title?.message}\n                  required\n                >\n                  <Input\n                    {...register('title', {\n                      required: { value: true, message: 'Required.' },\n                      validate: { titleIsUnique },\n                    })}\n                    placeholder={t(\n                      'alerting.template-form.new-template-name-placeholder-give-your-template-group-a-name',\n                      'Give your template group a name'\n                    )}\n                    width={42}\n                    autoFocus={true}\n                    id=\"new-template-name\"\n                  />\n                </InlineField>\n                <Spacer />\n                <Stack>\n                  <Button onClick={() => formRef.current?.requestSubmit()} variant=\"primary\" disabled={isSubmitting}>\n                    <Trans i18nKey=\"common.save\">Save</Trans>\n                  </Button>\n                  <LinkButton\n                    disabled={isSubmitting}\n                    href={makeAMLink('alerting/notifications', alertmanager, {\n                      tab: ContactPointsActiveTabs.NotificationTemplates,\n                    })}\n                    variant=\"secondary\"\n                  >\n                    <Trans i18nKey=\"common.cancel\">Cancel</Trans>\n                  </LinkButton>\n                </Stack>\n              </Stack>\n\n              {/* editor layout */}\n              <div {...rowSplitter.containerProps} className={styles.contentContainer}>\n                <div {...rowSplitter.primaryProps}>\n                  {/* template content and payload editor column – full height and half-width */}\n                  <div {...columnSplitter.containerProps} className={styles.contentField}>\n                    {/* template editor */}\n                    <div {...columnSplitter.primaryProps}>\n                      {/* primaryProps will set \"minHeight: min-content;\" so we have to make sure to apply minHeight to the child */}\n                      <div className={cx(styles.flexColumn, styles.containerWithBorderAndRadius, styles.minEditorSize)}>\n                        <div>\n                          <EditorColumnHeader\n                            label={t('alerting.template-form.label-template-group', 'Template group')}\n                            actions={\n                              <>\n                                {/* examples dropdown – only available for Grafana Alertmanager */}\n                                {isGrafanaAlertManager && (\n                                  <Dropdown\n                                    overlay={\n                                      <Menu>\n                                        {GlobalTemplateDataExamples.map((item, index) => (\n                                          <Menu.Item\n                                            key={index}\n                                            label={item.description}\n                                            onClick={() => appendExample(item.example)}\n                                          />\n                                        ))}\n                                        <Menu.Divider />\n                                        <Menu.Item\n                                          label={t(\n                                            'alerting.template-form.label-examples-documentation',\n                                            'Examples documentation'\n                                          )}\n                                          url=\"https://grafana.com/docs/grafana/latest/alerting/configure-notifications/template-notifications/examples/\"\n                                          target=\"_blank\"\n                                          icon=\"external-link-alt\"\n                                        />\n                                      </Menu>\n                                    }\n                                  >\n                                    <Button variant=\"secondary\" size=\"sm\" icon=\"angle-down\">\n                                      <Trans i18nKey=\"alerting.templates.editor.add-example\">Add example</Trans>\n                                    </Button>\n                                  </Dropdown>\n                                )}\n                                <Button\n                                  icon=\"question-circle\"\n                                  size=\"sm\"\n                                  fill=\"outline\"\n                                  variant=\"secondary\"\n                                  onClick={toggleCheatsheetOpened}\n                                >\n                                  <Trans i18nKey=\"common.help\">Help</Trans>\n                                </Button>\n                              </>\n                            }\n                          />\n                        </div>\n                        <Box flex={1}>\n                          <AutoSizer>\n                            {({ width, height }) => (\n                              <TemplateEditor\n                                value={getValues('content')}\n                                onBlur={(value) => setValue('content', value)}\n                                containerStyles={styles.editorContainer}\n                                width={width}\n                                height={height}\n                              />\n                            )}\n                          </AutoSizer>\n                        </Box>\n                      </div>\n                    </div>\n                    {/* payload editor – only available for Grafana Alertmanager */}\n                    {isGrafanaAlertManager && (\n                      <>\n                        <div {...columnSplitter.splitterProps} />\n                        <div {...columnSplitter.secondaryProps}>\n                          <div\n                            className={cx(\n                              styles.containerWithBorderAndRadius,\n                              styles.minEditorSize,\n                              styles.payloadEditor,\n                              styles.flexFull\n                            )}\n                          >\n                            <PayloadEditor\n                              payload={payload}\n                              defaultPayload={defaultPayloadString}\n                              setPayload={setPayload}\n                              setPayloadFormatError={setPayloadFormatError}\n                              payloadFormatError={payloadFormatError}\n                            />\n                          </div>\n                        </div>\n                      </>\n                    )}\n                  </div>\n                </div>\n                {/* preview column – full height and half-width */}\n                {isGrafanaAlertManager && (\n                  <div {...rowSplitter.secondaryProps}>\n                    <div {...rowSplitter.splitterProps} />\n                    <TemplatePreview\n                      payload={payload}\n                      templateName={watch('title')}\n                      templateContent={watch('content')}\n                      setPayloadFormatError={setPayloadFormatError}\n                      payloadFormatError={payloadFormatError}\n                      className={cx(styles.templatePreview, styles.minEditorSize)}\n                    />\n                  </div>\n                )}\n              </div>\n            </Stack>\n          </FieldSet>\n        </form>\n      </FormProvider>\n      {cheatsheetOpened && (\n        <Drawer\n          title={t('alerting.template-form.title-templating-cheat-sheet', 'Templating cheat sheet')}\n          onClose={toggleCheatsheetOpened}\n          size=\"lg\"\n        >\n          <TemplatingCheatSheet />\n        </Drawer>\n      )}\n    </>\n  );\n};\n\nfunction TemplatingBasics() {\n  const styles = useStyles2(getStyles);\n\n  const intro = t(\n    'alerting.templates.help.intro',\n    `Notification templates use Go templating language to create notification messages.\n\nIn Grafana, a template group can define multiple notification templates using {{ define \"<NAME>\" }}.\nThese templates can then be used in contact points and within other notification templates by calling {{ template \"<NAME>\" }}.\nFor detailed information about notification templates, refer to our documentation.`\n  );\n\n  return (\n    <Alert title=\"\" severity=\"info\">\n      <Stack direction=\"column\" gap={2}>\n        <Stack direction=\"row\">\n          <div style={{ whiteSpace: 'pre' }}>{intro}</div>\n          <div>\n            <LinkButton\n              href=\"https://grafana.com/docs/grafana/latest/alerting/manage-notifications/template-notifications/\"\n              target=\"_blank\"\n              icon=\"external-link-alt\"\n              variant=\"secondary\"\n            >\n              <Trans i18nKey=\"alerting.templates.editor.goto-docs\">Notification templates documentation</Trans>\n            </LinkButton>\n          </div>\n        </Stack>\n\n        <Text variant=\"bodySmall\">\n          <Trans i18nKey=\"alerting.templates.editor.auto-complete\">\n            For auto-completion of common templating code, type the following keywords in the content editor:\n          </Trans>\n          <div className={styles.code}>\n            {Object.values(snippets)\n              .map((s) => s.label)\n              .join(', ')}\n          </div>\n        </Text>\n      </Stack>\n    </Alert>\n  );\n}\n\nfunction TemplatingCheatSheet() {\n  return (\n    <Stack direction=\"column\" gap={1}>\n      <TemplatingBasics />\n      <TemplateDataDocs />\n    </Stack>\n  );\n}\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  const narrowScreenQuery = theme.breakpoints.down('md');\n\n  return {\n    flexFull: css({\n      flex: 1,\n    }),\n    minEditorSize: css({\n      minHeight: 300,\n      minWidth: 300,\n    }),\n    payloadEditor: css({\n      minHeight: 0,\n    }),\n    containerWithBorderAndRadius: css({\n      borderRadius: theme.shape.radius.default,\n      border: `1px solid ${theme.colors.border.medium}`,\n    }),\n    flexColumn: css({\n      display: 'flex',\n      flex: 1,\n      flexDirection: 'column',\n    }),\n    form: css({\n      label: 'template-form',\n      height: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n    }),\n    fieldset: css({\n      label: 'template-fieldset',\n      flex: 1,\n      display: 'flex',\n      flexDirection: 'column',\n    }),\n    label: css({\n      margin: 0,\n    }),\n    contentContainer: css({\n      flex: 1,\n      display: 'flex',\n      flexDirection: 'row',\n    }),\n    contentField: css({\n      display: 'flex',\n      flexDirection: 'column',\n      flex: 1,\n      marginBottom: 0,\n    }),\n    templatePreview: css({\n      flex: 1,\n      display: 'flex',\n    }),\n    templatePayload: css({\n      flex: 1,\n    }),\n    editorContainer: css({\n      width: 'fit-content',\n      border: 'none',\n    }),\n    payloadCollapseButton: css({\n      backgroundColor: theme.colors.info.transparent,\n      margin: 0,\n      [narrowScreenQuery]: {\n        display: 'none',\n      },\n    }),\n    code: css({\n      color: theme.colors.text.secondary,\n      fontWeight: theme.typography.fontWeightBold,\n    }),\n  };\n};\n\nconst defaultPayload: TestTemplateAlert[] = [\n  {\n    status: 'firing',\n    annotations: {\n      summary: 'Instance instance1 has been down for more than 5 minutes',\n    },\n    labels: {\n      alertname: 'InstanceDown',\n      instance: 'instance1',\n    },\n    startsAt: subDays(new Date(), 1).toISOString(),\n    endsAt: addMinutes(new Date(), 5).toISOString(),\n    fingerprint: 'a5331f0d5a9d81d4',\n    generatorURL: 'http://grafana.com/alerting/grafana/cdeqmlhvflz40f/view',\n  },\n  {\n    status: 'resolved',\n    annotations: {\n      summary: 'CPU usage above 90%',\n    },\n    labels: {\n      alertname: 'CpuUsage',\n      instance: 'instance1',\n    },\n    startsAt: subHours(new Date(), 4).toISOString(),\n    endsAt: new Date().toISOString(),\n    fingerprint: 'b77d941310f9d381',\n    generatorURL: 'http://grafana.com/alerting/grafana/oZSMdGj7z/view',\n  },\n];\n\nexport const defaultPayloadString = JSON.stringify(defaultPayload, null, 2);\n","import { useCallback, useEffect } from 'react';\n\nimport { AlertField, usePreviewTemplateMutation } from '../../api/templateApi';\n\nexport function usePreviewTemplate(\n  templateContent: string,\n  templateName: string,\n  payload: string,\n  setPayloadFormatError: (value: React.SetStateAction<string | null>) => void\n) {\n  const [trigger, { data, error, isLoading }] = usePreviewTemplateMutation();\n\n  const onPreview = useCallback(() => {\n    try {\n      const alertList: AlertField[] = JSON.parse(payload);\n      JSON.stringify([...alertList]); // check if it's iterable, in order to be able to add more data\n      trigger({ template: templateContent, alerts: alertList, name: templateName });\n      setPayloadFormatError(null);\n    } catch (e) {\n      setPayloadFormatError(e instanceof Error ? e.message : 'Invalid JSON.');\n    }\n  }, [templateContent, templateName, payload, setPayloadFormatError, trigger]);\n\n  useEffect(() => onPreview(), [onPreview]);\n\n  return { data, error, isLoading, onPreview };\n}\n","import { css, cx } from '@emotion/css';\nimport { compact, uniqueId } from 'lodash';\nimport * as React from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Box, Button, CodeEditor, useStyles2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { TemplatePreviewErrors, TemplatePreviewResponse, TemplatePreviewResult } from '../../api/templateApi';\nimport { stringifyErrorLike } from '../../utils/misc';\nimport { EditorColumnHeader } from '../contact-points/templates/EditorColumnHeader';\n\nimport { usePreviewTemplate } from './usePreviewTemplate';\n\nexport function TemplatePreview({\n  payload,\n  templateName,\n  templateContent,\n  payloadFormatError,\n  setPayloadFormatError,\n  className,\n}: {\n  payload: string;\n  templateName: string;\n  templateContent: string;\n  payloadFormatError: string | null;\n  setPayloadFormatError: (value: React.SetStateAction<string | null>) => void;\n  className?: string;\n}) {\n  const styles = useStyles2(getStyles);\n\n  const {\n    data,\n    isLoading,\n    onPreview,\n    error: previewError,\n  } = usePreviewTemplate(templateContent, templateName, payload, setPayloadFormatError);\n  const previewToRender = getPreviewResults(previewError, payloadFormatError, data);\n\n  return (\n    <div className={cx(styles.container, className)}>\n      <EditorColumnHeader\n        label={t('alerting.template-preview.label-preview', 'Preview')}\n        actions={\n          <Button\n            disabled={isLoading}\n            icon=\"sync\"\n            aria-label={t('alerting.template-preview.aria-label-refresh-preview', 'Refresh preview')}\n            onClick={onPreview}\n            size=\"sm\"\n            variant=\"secondary\"\n          >\n            <Trans i18nKey=\"alerting.template-preview.refresh\">Refresh</Trans>\n          </Button>\n        }\n      />\n      <Box flex={1}>\n        <AutoSizer disableWidth>\n          {({ height }) => <div className={styles.viewerContainer({ height })}>{previewToRender}</div>}\n        </AutoSizer>\n      </Box>\n    </div>\n  );\n}\n\nfunction PreviewResultViewer({ previews }: { previews: TemplatePreviewResult[] }) {\n  const styles = useStyles2(getStyles);\n  // If there is only one template, we don't need to show the name\n  const singleTemplate = previews.length === 1;\n\n  const isValidJson = (text: string) => {\n    try {\n      JSON.parse(text);\n      return true;\n    } catch {\n      return false;\n    }\n  };\n\n  return (\n    <ul className={styles.viewer.container} data-testid=\"template-preview\">\n      {previews.map((preview) => {\n        const language = isValidJson(preview.text) ? 'json' : 'plaintext';\n        return (\n          <li className={styles.viewer.box} key={preview.name}>\n            {singleTemplate ? null : (\n              <header className={styles.viewer.header}>\n                {preview.name}\n                <div className={styles.viewer.language}>{language}</div>\n              </header>\n            )}\n            <CodeEditor\n              containerStyles={styles.editorContainer}\n              language={language}\n              showLineNumbers={false}\n              showMiniMap={false}\n              value={preview.text}\n              readOnly={true}\n              monacoOptions={{\n                scrollBeyondLastLine: false,\n              }}\n            />\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction PreviewErrorViewer({ errors }: { errors: TemplatePreviewErrors[] }) {\n  return errors.map((error) => (\n    <Alert key={uniqueId('errors-list')} title={compact([error.name, error.kind]).join(' – ')}>\n      {error.message}\n    </Alert>\n  ));\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    label: 'template-preview-container',\n    display: 'flex',\n    flexDirection: 'column',\n    borderRadius: theme.shape.radius.default,\n    border: `1px solid ${theme.colors.border.medium}`,\n  }),\n  editorContainer: css({\n    width: '100%',\n    height: '100%',\n    border: 'none',\n  }),\n  viewerContainer: ({ height }: { height: number }) =>\n    css({\n      height,\n      overflow: 'auto',\n      backgroundColor: theme.colors.background.primary,\n    }),\n  viewer: {\n    container: css({\n      display: 'flex',\n      flexDirection: 'column',\n      height: 'inherit',\n    }),\n    box: css({\n      display: 'flex',\n      flexDirection: 'column',\n      borderBottom: `1px solid ${theme.colors.border.medium}`,\n      height: 'inherit',\n    }),\n    header: css({\n      display: 'flex',\n      justifyContent: 'space-between',\n      fontSize: theme.typography.bodySmall.fontSize,\n      padding: theme.spacing(1, 2),\n      borderBottom: `1px solid ${theme.colors.border.medium}`,\n      backgroundColor: theme.colors.background.secondary,\n    }),\n    language: css({\n      marginLeft: 'auto',\n      fontStyle: 'italic',\n    }),\n    errorText: css({\n      color: theme.colors.error.text,\n    }),\n  },\n});\n\nexport function getPreviewResults(\n  previewError: unknown | undefined,\n  payloadFormatError: string | null,\n  data: TemplatePreviewResponse | undefined\n): JSX.Element {\n  // ERRORS IN JSON OR IN REQUEST (endpoint not available, for example)\n  const previewErrorRequest = previewError ? stringifyErrorLike(previewError) : undefined;\n  const errorToRender = payloadFormatError || previewErrorRequest;\n\n  //PREVIEW : RESULTS AND ERRORS\n  const previewResponseResults = data?.results ?? [];\n  const previewResponseErrors = data?.errors;\n\n  return (\n    <>\n      {errorToRender && (\n        <Alert severity=\"error\" title={t('alerting.get-preview-results.title-error', 'Error')}>\n          {errorToRender}\n        </Alert>\n      )}\n      {previewResponseErrors && <PreviewErrorViewer errors={previewResponseErrors} />}\n      {previewResponseResults && <PreviewResultViewer previews={previewResponseResults} />}\n    </>\n  );\n}\n","import { isEqual, uniqBy } from 'lodash';\n\nimport { GrafanaAlertStateWithReason } from 'app/types/unified-alerting-dto';\n\nexport interface Line {\n  previous: GrafanaAlertStateWithReason;\n  current: GrafanaAlertStateWithReason;\n  values?: Record<string, number>;\n  labels?: Record<string, string>;\n  fingerprint?: string;\n  ruleUID?: string;\n}\n\nexport interface LogRecord {\n  timestamp: number;\n  line: Line;\n}\n\nexport type Label = [string, string];\n\n// omit \"common\" labels from \"labels\"\nexport function omitLabels(labels: Label[], common: Label[]): Label[] {\n  return labels.filter((label) => {\n    return !common.find((commonLabel) => JSON.stringify(commonLabel) === JSON.stringify(label));\n  });\n}\n\n// find all common labels by looking at which ones occur in every record, then create a unique array of items for those\nexport function extractCommonLabels(labels: Label[][]): Label[] {\n  const flatLabels = labels.flatMap((label) => label);\n\n  const commonLabels = uniqBy(\n    flatLabels.filter((label) => {\n      const count = flatLabels.filter((l) => isEqual(label, l)).length;\n      return count === Object.keys(labels).length;\n    }),\n    (label) => JSON.stringify(label)\n  );\n\n  return commonLabels;\n}\n"],"names":["EditorColumnHeader","label","actions","id","styles","editorColumnStyles","theme","subDays","date","amount","options","addDays","addMinutes","_date","toDate","addHours","addMilliseconds","subHours","AlertInstanceModalSelector","onSelect","isOpen","onClose","getStyles","selectedRule","setSelectedRule","selectedInstances","setSelectedInstances","useGetAlertmanagerAlertsQuery","alertmanagerApi","result","loading","error","ruleFilter","setRuleFilter","rulesWithInstances","rules","instance","filteredAnnotations","key","filteredLabels","handleRuleChange","rule","filteredRules","filteredRulesObject","filteredRulesKeys","RuleRow","index","style","ruleName","isSelected","Icon","getAlertUniqueLabels","allAlerts","currentAlert","labelsAsArray","alert","ruleCommonLabels","alertUniqueLabels","labels","InstanceRow","alerts","tags","handleSelectInstances","Tooltip","tag","Tag","handleConfirm","instances","resetState","handleSearchRules","onDismiss","filter","Modal","FilterInput","LoadingPlaceholder","height","width","Button","clearButton","GlobalTemplateData","AlertTemplatePreviewData","AlertTemplateData","KeyValueTemplateFunctions","KeyValueCodeSnippet","TemplateDataDocs","getTemplateDataDocsStyles","AlertTemplateDataTable","TemplateDataTable","Stack","type","KeyValueTemplateDataTable","dataItems","caption","typeRenderer","getTemplateDataTableStyles","name","notes","tableStyles","args","returns","defaultValues","GenerateAlertDataModal","onAccept","setAlerts","formMethods","annotations","status","setStatus","onAdd","value","acc","onSubmit","labelsOrAnnotationsAdded","someLabels","lb","someAnnotations","ann","alertOptions","e","Card","AnnotationsStep","LabelsField","RadioButtonGroup","RESET_TO_DEFAULT","PayloadEditor","payload","setPayload","defaultPayload","setPayloadFormatError","payloadFormatError","className","onReset","isEditingAlertData","setIsEditingAlertData","onCloseEditAlertModal","errorInPayloadJson","validatePayload","payloadObj","onOpenEditAlertModal","onOpenAlertSelectorModal","setIsAlertSelectorOpen","onAddAlertList","isAlertSelectorOpen","Dropdown","Menu","Toggletip","CodeEditor","GlobalTemplateDataExamples","defaults","isDuplicating","location","TemplateForm","originalTemplate","prefill","alertmanager","appNotification","createNewTemplate","createTemplateError","updateTemplate","updateTemplateError","titleIsUnique","formRef","isGrafanaAlertManager","cheatsheetOpened","toggleCheatsheetOpened","useToggle","defaultPayloadString","isProvisioned","originalTemplatePrefill","columnSplitter","useSplitter","rowSplitter","formApi","handleSubmit","register","errors","isSubmitting","getValues","setValue","watch","submit","values","returnLink","ContactPoints","appendExample","example","content","newValue","Alert","Box","Provisioning","FieldSet","InlineField","Input","Spacer","item","TemplateEditor","TemplatePreview","Drawer","TemplatingCheatSheet","TemplatingBasics","intro","Text","s","narrowScreenQuery","usePreviewTemplate","templateContent","templateName","trigger","data","isLoading","onPreview","alertList","previewError","previewToRender","getPreviewResults","PreviewResultViewer","previews","singleTemplate","isValidJson","text","preview","language","PreviewErrorViewer","previewErrorRequest","errorToRender","previewResponseResults","previewResponseErrors","omitLabels","common","commonLabel","extractCommonLabels","flatLabels","l"],"sourceRoot":""}