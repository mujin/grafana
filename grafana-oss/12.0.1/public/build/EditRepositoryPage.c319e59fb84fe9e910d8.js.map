{"version":3,"file":"EditRepositoryPage.c319e59fb84fe9e910d8.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/FormPrompt/FormPrompt.tsx","webpack://grafana/./public/app/core/components/FormPrompt/Prompt.tsx","webpack://grafana/./public/app/features/provisioning/Config/defaults.ts","webpack://grafana/./public/app/features/provisioning/Config/ConfigFormGithubCollapse.tsx","webpack://grafana/./public/app/features/provisioning/Config/ConfigForm.tsx","webpack://grafana/./public/app/features/provisioning/Repository/EditRepositoryPage.tsx","webpack://grafana/./public/app/features/provisioning/Shared/TokenPermissionsInfo.tsx","webpack://grafana/./public/app/features/provisioning/hooks/useCreateOrUpdateRepository.ts","webpack://grafana/./public/app/features/provisioning/utils/data.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport history from 'history';\nimport { useEffect, useState } from 'react';\nimport { Navigate } from 'react-router-dom-v5-compat';\n\nimport { Button, Modal } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { Prompt } from './Prompt';\n\nexport interface Props {\n  confirmRedirect?: boolean;\n  onDiscard: () => void;\n  /** Extra check to invoke when location changes.\n   * Could be useful in multistep forms where each step has a separate URL\n   */\n  onLocationChange?: (location: history.Location) => void;\n}\n\n/**\n * Component handling redirects when a form has unsaved changes.\n * Page reloads are handled in useEffect via beforeunload event.\n * URL navigation is handled by react-router's components since it does not trigger beforeunload event.\n */\nexport const FormPrompt = ({ confirmRedirect, onDiscard, onLocationChange }: Props) => {\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [blockedLocation, setBlockedLocation] = useState<history.Location | null>(null);\n  const [changesDiscarded, setChangesDiscarded] = useState(false);\n\n  useEffect(() => {\n    const onBeforeUnload = (e: BeforeUnloadEvent) => {\n      if (confirmRedirect) {\n        e.preventDefault();\n        e.returnValue = '';\n      }\n    };\n    window.addEventListener('beforeunload', onBeforeUnload);\n    return () => {\n      window.removeEventListener('beforeunload', onBeforeUnload);\n    };\n  }, [confirmRedirect]);\n\n  // Returning 'false' from this function will prevent navigation to the next URL\n  const handleRedirect = (location: history.Location) => {\n    // Do not show the unsaved changes modal if only the URL params have changed\n    const currentPath = window.location.pathname;\n    const nextPath = location.pathname;\n    if (currentPath === nextPath) {\n      return true;\n    }\n\n    const locationChangeCheck = onLocationChange?.(location);\n\n    let blockRedirect = confirmRedirect && !changesDiscarded;\n    if (locationChangeCheck !== undefined) {\n      blockRedirect = blockRedirect && locationChangeCheck;\n    }\n\n    if (blockRedirect) {\n      setModalIsOpen(true);\n      setBlockedLocation(location);\n      return false;\n    }\n\n    if (locationChangeCheck) {\n      onDiscard();\n    }\n\n    return true;\n  };\n\n  const onBackToForm = () => {\n    setModalIsOpen(false);\n    setBlockedLocation(null);\n  };\n\n  const onDiscardChanges = () => {\n    setModalIsOpen(false);\n    setChangesDiscarded(true);\n    onDiscard();\n  };\n\n  return (\n    <>\n      <Prompt when={true} message={handleRedirect} />\n      {blockedLocation && changesDiscarded && <Navigate replace to={blockedLocation} />}\n      <UnsavedChangesModal isOpen={modalIsOpen} onDiscard={onDiscardChanges} onBackToForm={onBackToForm} />\n    </>\n  );\n};\n\ninterface UnsavedChangesModalProps {\n  onDiscard: () => void;\n  onBackToForm: () => void;\n  isOpen: boolean;\n}\n\nconst UnsavedChangesModal = ({ onDiscard, onBackToForm, isOpen }: UnsavedChangesModalProps) => {\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={t('form-prompt.title', 'Leave page?')}\n      onDismiss={onBackToForm}\n      icon=\"exclamation-triangle\"\n      className={css({ width: '500px' })}\n    >\n      <h5>\n        <Trans i18nKey=\"form-prompt.description\">Changes that you made may not be saved.</Trans>\n      </h5>\n      <Modal.ButtonRow>\n        <Button variant=\"secondary\" onClick={onBackToForm} fill=\"outline\">\n          <Trans i18nKey=\"form-prompt.continue-button\">Continue editing</Trans>\n        </Button>\n        <Button variant=\"destructive\" onClick={onDiscard}>\n          <Trans i18nKey=\"form-prompt.discard-button\">Discard unsaved changes</Trans>\n        </Button>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n","import * as H from 'history';\nimport { useEffect } from 'react';\n\nimport { locationService } from '@grafana/runtime';\n\ninterface PromptProps {\n  when?: boolean;\n  message: string | ((location: H.Location) => string | boolean);\n}\n\nexport const Prompt = ({ message, when = true }: PromptProps) => {\n  const history = locationService.getHistory();\n\n  useEffect(() => {\n    if (!when) {\n      return undefined;\n    }\n    //@ts-expect-error TODO Update the history package to fix types\n    const unblock = history.block(message);\n\n    return () => {\n      unblock();\n    };\n  }, [when, message, history]);\n\n  return null;\n};\n","import { RepositorySpec } from '../../../api/clients/provisioning';\nimport { RepositoryFormData } from '../types';\nimport { specToData } from '../utils/data';\n\nexport function getDefaultValues(repository?: RepositorySpec): RepositoryFormData {\n  if (!repository) {\n    return {\n      type: 'github',\n      title: 'Repository',\n      token: '',\n      url: '',\n      branch: 'main',\n      generateDashboardPreviews: false,\n      readOnly: false,\n      prWorkflow: true,\n      path: 'grafana/',\n      sync: {\n        enabled: false,\n        target: 'instance',\n        intervalSeconds: 60,\n      },\n    };\n  }\n  return specToData(repository);\n}\n","import { UseFormRegister } from 'react-hook-form';\n\nimport { Checkbox, ControlledCollapse, Field, Text, TextLink } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { checkImageRenderer, checkPublicAccess } from '../GettingStarted/features';\nimport { GETTING_STARTED_URL } from '../constants';\nimport { RepositoryFormData } from '../types';\n\nexport interface ConfigFormGithubCollapseProps {\n  register: UseFormRegister<RepositoryFormData>;\n}\n\nexport function ConfigFormGithubCollapse({ register }: ConfigFormGithubCollapseProps) {\n  const isPublic = checkPublicAccess();\n  const hasImageRenderer = checkImageRenderer();\n\n  return (\n    <ControlledCollapse\n      label={t('provisioning.config-form-github-collapse.label-git-hub-features', 'GitHub features')}\n      isOpen={true}\n    >\n      <Field>\n        <Checkbox\n          disabled={!hasImageRenderer || !isPublic}\n          label={t('provisioning.finish-step.label-enable-previews', 'Enable dashboard previews in pull requests')}\n          description={\n            <>\n              <Trans i18nKey=\"provisioning.finish-step.description-enable-previews\">\n                Adds an image preview of dashboard changes in pull requests. Images of your Grafana dashboards will be\n                shared in your Git repository and visible to anyone with repository access.\n              </Trans>{' '}\n              <Text italic>\n                <Trans i18nKey=\"provisioning.finish-step.description-image-rendering\">\n                  Requires image rendering.{' '}\n                  <TextLink\n                    variant=\"bodySmall\"\n                    external\n                    href=\"https://grafana.com/grafana/plugins/grafana-image-renderer\"\n                  >\n                    Set up image rendering\n                  </TextLink>\n                </Trans>\n              </Text>\n            </>\n          }\n          {...register('generateDashboardPreviews')}\n        />\n      </Field>\n\n      {!isPublic && (\n        <Field label={t('provisioning.config-form-github-collapse.label-realtime-feedback', 'Realtime feedback')}>\n          <Text variant=\"bodySmall\" color={'secondary'}>\n            <Trans i18nKey={'provisioning.config-form-github-collapse.description-realtime-feedback'}>\n              <TextLink variant={'bodySmall'} href={GETTING_STARTED_URL}>\n                Configure webhooks\n              </TextLink>{' '}\n              to get instant updates in Grafana as soon as changes are committed. Review and approve changes using pull\n              requests before they go live.\n            </Trans>\n          </Text>\n        </Field>\n      )}\n    </ControlledCollapse>\n  );\n}\n","import { useEffect, useMemo, useState } from 'react';\nimport { Controller, useForm } from 'react-hook-form';\nimport { useNavigate } from 'react-router-dom-v5-compat';\n\nimport {\n  Button,\n  Checkbox,\n  Combobox,\n  ControlledCollapse,\n  Field,\n  Input,\n  RadioButtonGroup,\n  SecretInput,\n  Stack,\n  Switch,\n} from '@grafana/ui';\nimport { Repository } from 'app/api/clients/provisioning';\nimport { FormPrompt } from 'app/core/components/FormPrompt/FormPrompt';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { TokenPermissionsInfo } from '../Shared/TokenPermissionsInfo';\nimport { useCreateOrUpdateRepository } from '../hooks/useCreateOrUpdateRepository';\nimport { RepositoryFormData } from '../types';\nimport { dataToSpec } from '../utils/data';\n\nimport { ConfigFormGithubCollapse } from './ConfigFormGithubCollapse';\nimport { getDefaultValues } from './defaults';\n\n// This needs to be a function for translations to work\nconst getOptions = () => {\n  const typeOptions = [\n    { value: 'github', label: t('provisioning.config-form.option-github', 'GitHub') },\n    { value: 'local', label: t('provisioning.config-form.option-local', 'Local') },\n  ];\n\n  const targetOptions = [\n    { value: 'instance', label: t('provisioning.config-form.option-entire-instance', 'Entire instance') },\n    { value: 'folder', label: t('provisioning.config-form.option-managed-folder', 'Managed folder') },\n  ];\n\n  return [typeOptions, targetOptions];\n};\n\nexport interface ConfigFormProps {\n  data?: Repository;\n}\nexport function ConfigForm({ data }: ConfigFormProps) {\n  const [submitData, request] = useCreateOrUpdateRepository(data?.metadata?.name);\n  const {\n    register,\n    handleSubmit,\n    reset,\n    control,\n    formState: { errors, isDirty },\n    setValue,\n    watch,\n    getValues,\n  } = useForm<RepositoryFormData>({ defaultValues: getDefaultValues(data?.spec) });\n  const isEdit = Boolean(data?.metadata?.name);\n  const [tokenConfigured, setTokenConfigured] = useState(isEdit);\n  const navigate = useNavigate();\n  const [type, readOnly] = watch(['type', 'readOnly']);\n  const [typeOptions, targetOptions] = useMemo(() => getOptions(), []);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (request.isSuccess) {\n      const formData = getValues();\n      reset(formData);\n      setTimeout(() => {\n        navigate('/admin/provisioning');\n      }, 300);\n    }\n  }, [request.isSuccess, reset, getValues, navigate]);\n\n  const onSubmit = async (form: RepositoryFormData) => {\n    setIsLoading(true);\n    const spec = dataToSpec(form);\n    if (spec.github) {\n      spec.github.token = form.token || data?.spec?.github?.token;\n      // If we're still keeping this as GitHub, persist the old token. If we set a new one, it'll be re-encrypted into here.\n      spec.github.encryptedToken = data?.spec?.github?.encryptedToken;\n    }\n    await submitData(spec);\n    setIsLoading(false);\n  };\n\n  // NOTE: We do not want the lint option to be listed.\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} style={{ maxWidth: 700 }}>\n      <FormPrompt onDiscard={reset} confirmRedirect={isDirty} />\n      <Field label={t('provisioning.config-form.label-repository-type', 'Repository type')}>\n        <Controller\n          name={'type'}\n          control={control}\n          render={({ field: { ref, onChange, ...field } }) => {\n            return (\n              <Combobox\n                options={typeOptions}\n                onChange={(value) => onChange(value?.value)}\n                placeholder={t('provisioning.config-form.placeholder-select-repository-type', 'Select repository type')}\n                disabled={!!data?.spec}\n                {...field}\n              />\n            );\n          }}\n        />\n      </Field>\n      <Field\n        label={t('provisioning.config-form.label-title', 'Title')}\n        description={t('provisioning.config-form.description-title', 'A human-readable name for the config')}\n        invalid={!!errors.title}\n        error={errors?.title?.message}\n      >\n        <Input\n          {...register('title', {\n            required: t('provisioning.config-form.error-required', 'This field is required.'),\n          })}\n          placeholder={t('provisioning.config-form.placeholder-my-config', 'My config')}\n        />\n      </Field>\n      {type === 'github' && (\n        <>\n          <Field\n            label={t('provisioning.config-form.label-github-token', 'GitHub token')}\n            required\n            error={errors?.token?.message}\n            invalid={!!errors.token}\n          >\n            <Controller\n              name={'token'}\n              control={control}\n              rules={{\n                required: isEdit ? false : t('provisioning.config-form.error-required', 'This field is required.'),\n              }}\n              render={({ field: { ref, ...field } }) => {\n                return (\n                  <SecretInput\n                    {...field}\n                    id={'token'}\n                    placeholder={t(\n                      'provisioning.config-form.placeholder-github-token',\n                      'ghp_yourTokenHere1234567890abcdEFGHijklMNOP'\n                    )}\n                    isConfigured={tokenConfigured}\n                    onReset={() => {\n                      setValue('token', '');\n                      setTokenConfigured(false);\n                    }}\n                  />\n                );\n              }}\n            />\n          </Field>\n          <TokenPermissionsInfo />\n          <Field\n            label={t('provisioning.config-form.label-repository-url', 'Repository URL')}\n            error={errors?.url?.message}\n            invalid={!!errors?.url}\n            description={t('provisioning.config-form.description-repository-url', 'Enter the GitHub repository URL')}\n            required\n          >\n            <Input\n              {...register('url', {\n                required: t('provisioning.config-form.error-required', 'This field is required.'),\n                pattern: {\n                  value: /^(?:https:\\/\\/github\\.com\\/)?[^/]+\\/[^/]+$/,\n                  message: t(\n                    'provisioning.config-form.error-valid-github-url',\n                    'Please enter a valid GitHub repository URL'\n                  ),\n                },\n              })}\n              placeholder={t(\n                'provisioning.config-form.placeholder-github-url',\n                'https://github.com/username/repo-name'\n              )}\n            />\n          </Field>\n          <Field label={t('provisioning.config-form.label-branch', 'Branch')}>\n            <Input {...register('branch')} placeholder={t('provisioning.config-form.placeholder-branch', 'main')} />\n          </Field>\n          <Field\n            label={t('provisioning.config-form.label-path', 'Path')}\n            description={t('provisioning.config-form.description-path', 'Path to a subdirectory in the Git repository')}\n          >\n            <Input {...register('path')} />\n          </Field>\n        </>\n      )}\n\n      {type === 'local' && (\n        <Field\n          label={t('provisioning.config-form.label-local-path', 'Local path')}\n          error={errors?.path?.message}\n          invalid={!!errors?.path}\n        >\n          <Input\n            {...register('path', {\n              required: t('provisioning.config-form.error-required', 'This field is required.'),\n            })}\n            placeholder={t('provisioning.config-form.placeholder-local-path', '/path/to/repo')}\n          />\n        </Field>\n      )}\n\n      <Field>\n        <Checkbox\n          {...register('readOnly', {\n            onChange: (e) => {\n              if (e.target.checked) {\n                setValue('prWorkflow', false);\n              }\n            },\n          })}\n          label={t('provisioning.finish-step.label-read-only', 'Read only')}\n          description={t(\n            'provisioning.config-form.description-read-only',\n            \"Resources can't be modified through Grafana.\"\n          )}\n        />\n      </Field>\n\n      <Field>\n        <Checkbox\n          disabled={readOnly}\n          {...register('prWorkflow')}\n          label={t('provisioning.config-form.label-pr-workflow', 'Enable pull request option when saving')}\n          description={\n            <Trans i18nKey=\"provisioning.finish-step.description-webhooks-enable\">\n              Allows users to choose whether to open a pull request when saving changes. If the repository does not\n              allow direct changes to the main branch, a pull request may still be required.\n            </Trans>\n          }\n        />\n      </Field>\n      {type === 'github' && <ConfigFormGithubCollapse register={register} />}\n\n      <ControlledCollapse\n        label={t('provisioning.config-form.label-automatic-pulling', 'Automatic pulling')}\n        isOpen={false}\n      >\n        <Field\n          label={t('provisioning.config-form.label-enabled', 'Enabled')}\n          description={t(\n            'provisioning.config-form.description-enabled',\n            'Once automatic pulling is enabled, the target cannot be changed.'\n          )}\n        >\n          <Switch {...register('sync.enabled')} id={'sync.enabled'} />\n        </Field>\n        <Field\n          label={t('provisioning.config-form.label-target', 'Target')}\n          required\n          error={errors?.sync?.target?.message}\n          invalid={!!errors?.sync?.target}\n        >\n          <Controller\n            name={'sync.target'}\n            control={control}\n            rules={{ required: t('provisioning.config-form.error-required', 'This field is required.') }}\n            render={({ field: { ref, onChange, ...field } }) => {\n              return (\n                <RadioButtonGroup\n                  options={targetOptions}\n                  onChange={onChange}\n                  disabled={Boolean(data?.status?.sync.state)}\n                  {...field}\n                />\n              );\n            }}\n          />\n        </Field>\n        <Field label={t('provisioning.config-form.label-interval-seconds', 'Interval (seconds)')}>\n          <Input\n            {...register('sync.intervalSeconds', { valueAsNumber: true })}\n            type={'number'}\n            placeholder={t('provisioning.config-form.placeholder-interval-seconds', '60')}\n          />\n        </Field>\n      </ControlledCollapse>\n\n      <Stack gap={2}>\n        <Button type={'submit'} disabled={isLoading}>\n          {isLoading\n            ? t('provisioning.config-form.button-saving', 'Saving...')\n            : t('provisioning.config-form.button-save', 'Save')}\n        </Button>\n      </Stack>\n    </form>\n  );\n}\n","import { useParams } from 'react-router-dom-v5-compat';\n\nimport { EmptyState, Text, TextLink } from '@grafana/ui';\nimport { useGetRepositoryQuery } from 'app/api/clients/provisioning';\nimport { Page } from 'app/core/components/Page/Page';\nimport { Trans } from 'app/core/internationalization';\n\nimport { ConfigForm } from '../Config/ConfigForm';\nimport { PROVISIONING_URL } from '../constants';\n\nexport default function EditRepositoryPage() {\n  const { name = '' } = useParams();\n  const query = useGetRepositoryQuery({ name });\n  //@ts-expect-error TODO add error types\n  const notFound = query.isError && query.error?.status === 404;\n  return (\n    <Page\n      navId=\"provisioning\"\n      pageNav={{ text: 'Configure repository', subTitle: 'Configure a repository for storing your resources.' }}\n    >\n      <Page.Contents isLoading={query.isLoading}>\n        {notFound ? (\n          <EmptyState message={`Repository config not found`} variant=\"not-found\">\n            <Text element={'p'}>\n              <Trans i18nKey=\"provisioning.edit-repository-page.repository-config-exists-configuration\">\n                Make sure the repository config exists in the configuration file.\n              </Trans>\n            </Text>\n            <TextLink href={PROVISIONING_URL}>\n              <Trans i18nKey=\"provisioning.edit-repository-page.back-to-repositories\">Back to repositories</Trans>\n            </TextLink>\n          </EmptyState>\n        ) : (\n          <ConfigForm data={query.data} />\n        )}\n      </Page.Contents>\n    </Page>\n  );\n}\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack, TextLink, useStyles2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nexport function TokenPermissionsInfo() {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.container}>\n      {/* GitHub UI is English only, so these strings are not translated */}\n      {/* eslint-disable-next-line @grafana/no-untranslated-strings */}\n      <Stack gap={0.5} wrap={'wrap'}>\n        <Trans i18nKey=\"provisioning.token-permissions-info.go-to\">Go to</Trans>\n        <TextLink external href=\"https://github.com/settings/personal-access-tokens/new\">\n          GitHub Personal Access Tokens\n        </TextLink>\n        <Trans i18nKey=\"provisioning.token-permissions-info.and-click\">and click</Trans>\n        <strong>\"Fine-grained token\".</strong>\n        <Trans i18nKey=\"provisioning.token-permissions-info.make-sure\">Make sure to include these permissions</Trans>:\n      </Stack>\n\n      <ul className={styles.permissionsList}>\n        {/* eslint-disable-next-line @grafana/no-untranslated-strings */}\n        <li>\n          Content: <span className={styles.accessLevel}>Read and write</span>\n        </li>\n        {/* eslint-disable-next-line @grafana/no-untranslated-strings */}\n        <li>\n          Metadata: <span className={styles.accessLevel}>Read only</span>\n        </li>\n        {/* eslint-disable-next-line @grafana/no-untranslated-strings */}\n        <li>\n          Pull requests: <span className={styles.accessLevel}>Read and write</span>\n        </li>\n        {/* eslint-disable-next-line @grafana/no-untranslated-strings */}\n        <li>\n          Webhooks: <span className={styles.accessLevel}>Read and write</span>\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      marginBottom: theme.spacing(1),\n      position: 'relative',\n      width: '100%',\n      display: 'flex',\n      flexDirection: 'column',\n      flex: '1 1 0',\n      padding: theme.spacing(theme.components.panel.padding),\n    }),\n    permissionsList: css({\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(1),\n      paddingLeft: theme.spacing(3),\n\n      li: css({\n        marginBottom: theme.spacing(1),\n      }),\n    }),\n    accessLevel: css({\n      fontFamily: theme.typography.fontFamilyMonospace,\n      background: '#22262B',\n      borderRadius: theme.shape.radius.default,\n      padding: theme.spacing(0.25, 0.5),\n    }),\n  };\n}\n","import { useCallback } from 'react';\n\nimport {\n  RepositorySpec,\n  useCreateRepositoryMutation,\n  useCreateRepositoryTestMutation,\n  useReplaceRepositoryMutation,\n} from 'app/api/clients/provisioning';\n\nexport function useCreateOrUpdateRepository(name?: string) {\n  const [create, createRequest] = useCreateRepositoryMutation();\n  const [update, updateRequest] = useReplaceRepositoryMutation();\n  const [testConfig, testRequest] = useCreateRepositoryTestMutation();\n\n  const updateOrCreate = useCallback(\n    async (data: RepositorySpec) => {\n      // First test the config and wait for the result\n      // unwrap will throw an error if the test fails\n      await testConfig({\n        // HACK: we need to provide a name to the test configuration\n        name: name || 'new',\n        body: {\n          spec: data,\n        },\n      }).unwrap();\n\n      // If test passes, proceed with create/update\n      if (name) {\n        return update({\n          name,\n          repository: {\n            metadata: {\n              name,\n              // TODO? -- replace with patch spec, so the rest of the metadata is not replaced?\n              // Can that support optimistic locking? (eg, make sure the RV is the same?)\n              finalizers: ['cleanup', 'remove-orphan-resources'],\n            },\n            spec: data,\n          },\n        });\n      }\n      return create({ repository: { metadata: generateRepositoryMetadata(data), spec: data } });\n    },\n    [create, name, update, testConfig]\n  );\n\n  return [updateOrCreate, name ? updateRequest : createRequest, testRequest] as const;\n}\n\nconst generateRepositoryMetadata = (data: RepositorySpec) => {\n  // We don't know for sure that we can use a normalised name. If we can't, we'll ask the server to generate one for us.\n  const normalisedName = data.title.toLowerCase().replaceAll(/[^a-z0-9\\-_]+/g, '');\n\n  if (\n    crypto.randomUUID && // we might not be in a secure context\n    normalisedName && // we need a non-empty string before we check the first character\n    normalisedName.charAt(0) >= 'a' && // required to start with a letter to be a valid k8s name\n    normalisedName.charAt(0) <= 'z' &&\n    normalisedName.replaceAll(/[^a-z]/g, '').length >= 3 // must look sensible to a human\n  ) {\n    // We still want a suffix, to avoid name collisions.\n    const randomBit = crypto.randomUUID().substring(0, 7);\n    const shortenedName = normalisedName.substring(0, 63 - 1 - randomBit.length);\n    return { name: `${shortenedName}-${randomBit}` };\n  } else {\n    return { generateName: 'r' };\n  }\n};\n","import { RepositorySpec } from 'app/api/clients/provisioning';\n\nimport { RepositoryFormData } from '../types';\n\nconst getWorkflows = (data: RepositoryFormData): RepositorySpec['workflows'] => {\n  if (data.readOnly) {\n    return [];\n  }\n  const workflows: RepositorySpec['workflows'] = ['write'];\n\n  if (!data.prWorkflow) {\n    return workflows;\n  }\n\n  return [...workflows, 'branch'];\n};\n\nexport const dataToSpec = (data: RepositoryFormData): RepositorySpec => {\n  const spec: RepositorySpec = {\n    type: data.type,\n    sync: data.sync,\n    title: data.title || '',\n    workflows: getWorkflows(data),\n  };\n  switch (data.type) {\n    case 'github':\n      spec.github = {\n        generateDashboardPreviews: data.generateDashboardPreviews,\n        url: data.url || '',\n        branch: data.branch,\n        token: data.token,\n        path: data.path,\n      };\n      break;\n    case 'local':\n      spec.local = {\n        path: data.path,\n      };\n      spec.workflows = spec.workflows.filter((v) => v !== 'branch'); // branch only supported by github\n      break;\n  }\n\n  // We need to deep clone the data, so it doesn't become immutable\n  return structuredClone(spec);\n};\n\nexport const specToData = (spec: RepositorySpec): RepositoryFormData => {\n  return structuredClone({\n    ...spec,\n    ...spec.github,\n    ...spec.local,\n    branch: spec.github?.branch || '',\n    url: spec.github?.url || '',\n    generateDashboardPreviews: spec.github?.generateDashboardPreviews || false,\n    readOnly: !spec.workflows.length,\n    prWorkflow: spec.workflows.includes('write'),\n  });\n};\n"],"names":["FormPrompt","confirmRedirect","onDiscard","onLocationChange","modalIsOpen","setModalIsOpen","blockedLocation","setBlockedLocation","changesDiscarded","setChangesDiscarded","onBeforeUnload","e","handleRedirect","location","currentPath","nextPath","locationChangeCheck","blockRedirect","onBackToForm","onDiscardChanges","UnsavedChangesModal","isOpen","Prompt","message","when","history","unblock","getDefaultValues","repository","ConfigFormGithubCollapse","register","isPublic","hasImageRenderer","Field","Checkbox","Text","TextLink","getOptions","typeOptions","targetOptions","ConfigForm","data","submitData","request","useCreateOrUpdateRepository","handleSubmit","reset","control","errors","isDirty","setValue","watch","getValues","isEdit","tokenConfigured","setTokenConfigured","navigate","type","readOnly","isLoading","setIsLoading","formData","onSubmit","form","spec","ref","onChange","field","Combobox","value","Input","SecretInput","TokenPermissionsInfo","Switch","RadioButtonGroup","Stack","Button","EditRepositoryPage","name","query","notFound","Page","EmptyState","styles","getStyles","theme","create","createRequest","update","updateRequest","testConfig","testRequest","generateRepositoryMetadata","normalisedName","randomBit","getWorkflows","workflows","dataToSpec","v","specToData"],"sourceRoot":""}