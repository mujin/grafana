{"version":3,"file":"Connections.4f781ac3f1ed09e1af25.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/PageActionBar/PageActionBar.tsx","webpack://grafana/./public/app/features/connections/tabs/ConnectData/CardGrid/CardGrid.tsx","webpack://grafana/./public/app/features/connections/tabs/ConnectData/CategoryHeader/CategoryHeader.tsx","webpack://grafana/./public/app/features/connections/tabs/ConnectData/NoAccessModal/NoAccessModal.tsx","webpack://grafana/./public/app/features/connections/tabs/ConnectData/ConnectData.tsx","webpack://grafana/./public/app/features/connections/pages/AddNewConnectionPage.tsx","webpack://grafana/./public/app/features/connections/pages/DataSourceDetailsPage.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceAddButton.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourcesListHeader.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourcesList.tsx","webpack://grafana/./public/app/features/connections/pages/DataSourcesListPage.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceDashboards.tsx","webpack://grafana/./public/app/features/connections/hooks/useDataSourceSettingsNav.ts","webpack://grafana/./public/app/features/connections/pages/DataSourceDashboardsPage.tsx","webpack://grafana/./public/app/features/datasources/components/BasicSettings.tsx","webpack://grafana/./public/app/features/datasources/components/ButtonRow.tsx","webpack://grafana/./public/app/features/datasources/components/CloudInfoBox.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceReadOnlyMessage.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceLoadError.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceMissingRightsMessage.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourcePluginConfigPage.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourcePluginSettings.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourcePluginState.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceTestingStatus.tsx","webpack://grafana/./public/app/features/datasources/components/EditDataSource.tsx","webpack://grafana/./public/app/features/datasources/components/EditDataSourceActions.tsx","webpack://grafana/./public/app/features/datasources/components/useDataSourceInfo.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceTitle.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceTabPage.tsx","webpack://grafana/./public/app/features/connections/pages/EditDataSourcePage.tsx","webpack://grafana/./public/app/features/plugins/components/PluginsErrorsInfo.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceTypeCard.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceTypeCardList.tsx","webpack://grafana/./public/app/features/datasources/components/DataSourceCategories.tsx","webpack://grafana/./public/app/features/datasources/components/NewDataSource.tsx","webpack://grafana/./public/app/features/connections/pages/NewDataSourcePage.tsx","webpack://grafana/./public/app/features/connections/Connections.tsx","webpack://grafana/./public/app/features/connections/components/AdvisorRedirectNotice/AdvisorRedirectNotice.tsx","webpack://grafana/./public/app/features/dashboard/state/actions.ts","webpack://grafana/./public/app/features/plugins/admin/components/RoadmapLinks.tsx","webpack://grafana/./public/app/features/plugins/admin/components/SearchField.tsx","webpack://grafana/./public/app/features/plugins/admin/components/UpdateAllButton.tsx","webpack://grafana/./public/app/features/plugins/admin/components/UpdateAllModalBody.tsx","webpack://grafana/./public/app/features/plugins/admin/components/UpdateAllModal.tsx","webpack://grafana/./public/app/features/plugins/admin/hooks/useHistory.tsx"],"sourcesContent":["import { PureComponent } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { LinkButton, FilterInput, InlineField } from '@grafana/ui';\n\nimport { SortPicker } from '../Select/SortPicker';\n\nexport interface Props {\n  searchQuery: string;\n  setSearchQuery: (value: string) => void;\n  linkButton?: { href: string; title: string; disabled?: boolean };\n  target?: string;\n  placeholder?: string;\n  sortPicker?: {\n    onChange: (sortValue: SelectableValue) => void;\n    value?: string;\n    getSortOptions?: () => Promise<SelectableValue[]>;\n  };\n}\n\nexport default class PageActionBar extends PureComponent<Props> {\n  render() {\n    const {\n      searchQuery,\n      linkButton,\n      setSearchQuery,\n      target,\n      placeholder = 'Search by name or type',\n      sortPicker,\n    } = this.props;\n    const linkProps: Parameters<typeof LinkButton>[0] = { href: linkButton?.href, disabled: linkButton?.disabled };\n\n    if (target) {\n      linkProps.target = target;\n    }\n\n    return (\n      <div className=\"page-action-bar\">\n        <InlineField grow>\n          <FilterInput value={searchQuery} onChange={setSearchQuery} placeholder={placeholder} />\n        </InlineField>\n        {sortPicker && (\n          <SortPicker\n            onChange={sortPicker.onChange}\n            value={sortPicker.value}\n            getSortOptions={sortPicker.getSortOptions}\n          />\n        )}\n        {linkButton && <LinkButton {...linkProps}>{linkButton.title}</LinkButton>}\n      </div>\n    );\n  }\n}\n","import { css } from '@emotion/css';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { featureEnabled } from '@grafana/runtime';\nimport { Card, Grid, useStyles2, Stack, Badge } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\nimport {\n  PluginDeprecatedBadge,\n  PluginDisabledBadge,\n  PluginInstalledBadge,\n  PluginUpdateAvailableBadge,\n} from 'app/features/plugins/admin/components/Badges';\nimport { getBadgeColor } from 'app/features/plugins/admin/components/Badges/sharedStyles';\nimport { isPluginUpdatable } from 'app/features/plugins/admin/helpers';\nimport { CatalogPlugin } from 'app/features/plugins/admin/types';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  heading: css({\n    fontSize: theme.typography.h5.fontSize,\n    fontWeight: 'inherit',\n  }),\n  figure: css({\n    width: 'inherit',\n    marginRight: '0px',\n    '> img': {\n      width: theme.spacing(7),\n    },\n  }),\n  meta: css({\n    marginTop: '6px',\n    position: 'relative',\n  }),\n  description: css({\n    margin: '0px',\n    fontSize: theme.typography.bodySmall.fontSize,\n  }),\n  card: css({\n    gridTemplateAreas: `\n        \"Figure   Heading   Actions\"\n        \"Figure Description Actions\"\n        \"Figure    Meta     Actions\"\n        \"Figure     -       Actions\"`,\n  }),\n  logo: css({\n    marginRight: theme.spacing(3),\n    marginLeft: theme.spacing(1),\n    width: theme.spacing(7),\n    maxHeight: theme.spacing(7),\n  }),\n});\n\nfunction PluginEnterpriseBadgeWithoutSignature() {\n  const customBadgeStyles = useStyles2(getBadgeColor);\n\n  if (featureEnabled('enterprise.plugins')) {\n    return <Badge text={t('get-enterprise.title', 'Enterprise')} color=\"blue\" />;\n  }\n\n  return (\n    <Badge\n      icon=\"lock\"\n      role=\"img\"\n      aria-label={t('lock-icon', 'lock icon')}\n      text={t('get-enterprise.title', 'Enterprise')}\n      color=\"darkgrey\"\n      className={customBadgeStyles}\n      title={t('get-enterprise.requires-license', 'Requires a Grafana Enterprise license')}\n    />\n  );\n}\n\nexport type CardGridItem = CatalogPlugin & {\n  logo?: string;\n};\n\nexport interface CardGridProps {\n  items: CardGridItem[];\n  onClickItem?: (e: React.MouseEvent<HTMLElement>, item: CardGridItem) => void;\n}\n\nexport const CardGrid = ({ items, onClickItem }: CardGridProps) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Grid gap={1.5} minColumnWidth={44}>\n      {items.map((item) => (\n        <Card\n          key={item.id}\n          className={styles.card}\n          href={item.url}\n          onClick={(e) => {\n            if (onClickItem) {\n              onClickItem(e, item);\n            }\n          }}\n        >\n          <Card.Heading className={styles.heading}>{item.name}</Card.Heading>\n\n          <Card.Figure align=\"center\" className={styles.figure}>\n            <img className={styles.logo} src={item.logo} alt=\"\" />\n          </Card.Figure>\n          <Card.Meta className={styles.meta}>\n            <Stack height=\"auto\" wrap=\"wrap\">\n              {item.isEnterprise && <PluginEnterpriseBadgeWithoutSignature />}\n              {item.isDeprecated && <PluginDeprecatedBadge />}\n              {item.isInstalled && <PluginInstalledBadge />}\n              {item.isDisabled && <PluginDisabledBadge error={item.error} />}\n              {isPluginUpdatable(item) && <PluginUpdateAvailableBadge plugin={item} />}\n            </Stack>\n          </Card.Meta>\n        </Card>\n      ))}\n    </Grid>\n  );\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2, IconName } from '@grafana/data';\nimport { Icon, useStyles2 } from '@grafana/ui';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  categoryHeader: css({\n    alignItems: 'center',\n    display: 'flex',\n    marginBottom: theme.spacing(3),\n  }),\n  categoryLabel: css({\n    marginBottom: 0,\n    marginLeft: theme.spacing(1),\n  }),\n});\n\ntype Props = { iconName: IconName; label: string };\n\nexport const CategoryHeader = ({ iconName, label }: Props) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <div className={styles.categoryHeader}>\n      <Icon name={iconName} size=\"xl\" />\n      <h3 className={styles.categoryLabel}>{label}</h3>\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, Modal, Icon, Button } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nimport { type CardGridItem } from '../CardGrid';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  modal: css({\n    width: '500px',\n  }),\n  modalContent: css({\n    overflow: 'visible',\n    color: theme.colors.text.secondary,\n\n    a: {\n      color: theme.colors.text.link,\n    },\n  }),\n  description: css({\n    marginBottom: theme.spacing(2),\n  }),\n  bottomSection: css({\n    display: 'flex',\n    borderTop: `1px solid ${theme.colors.border.weak}`,\n    paddingTop: theme.spacing(3),\n    marginTop: theme.spacing(3),\n  }),\n  actionsSection: css({\n    display: 'flex',\n    justifyContent: 'end',\n    marginTop: theme.spacing(3),\n  }),\n  warningIcon: css({\n    color: theme.colors.warning.main,\n    paddingRight: theme.spacing(),\n    marginTop: theme.spacing(0.25),\n  }),\n  header: css({\n    display: 'flex',\n    alignItems: 'center',\n  }),\n  headerTitle: css({\n    margin: 0,\n  }),\n  headerLogo: css({\n    marginRight: theme.spacing(2),\n    width: '32px',\n    height: '32px',\n  }),\n});\n\nexport type NoAccessModalProps = {\n  item: CardGridItem;\n  isOpen: boolean;\n  onDismiss: () => void;\n};\n\nexport function NoAccessModal({ item, isOpen, onDismiss }: NoAccessModalProps) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Modal\n      className={styles.modal}\n      contentClassName={styles.modalContent}\n      title={<NoAccessModalHeader item={item} />}\n      isOpen={isOpen}\n      onDismiss={onDismiss}\n    >\n      <div>\n        <div>\n          {item.description && <div className={styles.description}>{item.description}</div>}\n          <div>\n            Links\n            <br />\n            <a\n              href={`https://grafana.com/grafana/plugins/${item.id}`}\n              title={`${item.name} on Grafana.com`}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {item.name}\n            </a>\n          </div>\n        </div>\n        <div className={styles.bottomSection}>\n          <div className={styles.warningIcon}>\n            <Icon name=\"exclamation-triangle\" />\n          </div>\n          <div>\n            <p>\n              <Trans i18nKey=\"connections.no-access-modal.editor-warning\">\n                Editors cannot add new connections. You may check to see if it is already configured in{' '}\n                <a href=\"/connections/datasources\">Data sources</a>.\n              </Trans>\n            </p>\n            <p>\n              <Trans i18nKey=\"connections.no-access-modal.connection-contact-grafana-admin\">\n                To add a new connection, contact your Grafana admin.\n              </Trans>\n            </p>\n          </div>\n        </div>\n        <div className={styles.actionsSection}>\n          <Button onClick={onDismiss}>\n            <Trans i18nKey=\"connections.no-access-modal.okay\">Okay</Trans>\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n}\n\nexport function NoAccessModalHeader({ item }: { item: CardGridItem }) {\n  const styles = useStyles2(getStyles);\n  return (\n    <div>\n      <div className={styles.header}>\n        {item.logo && <img className={styles.headerLogo} src={item.logo} alt={`logo of ${item.name}`} />}\n        <h4 className={styles.headerTitle}>{item.name}</h4>\n      </div>\n    </div>\n  );\n}\n","import { css } from '@emotion/css';\nimport { useMemo, useState, MouseEvent } from 'react';\nimport { useLocation } from 'react-router-dom-v5-compat';\n\nimport { PluginType, GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { locationSearchToObject, reportInteraction } from '@grafana/runtime';\nimport { LoadingPlaceholder, EmptyState, Field, RadioButtonGroup, Tooltip, Combobox, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { t, Trans } from 'app/core/internationalization';\nimport { HorizontalGroup } from 'app/features/plugins/admin/components/HorizontalGroup';\nimport { RoadmapLinks } from 'app/features/plugins/admin/components/RoadmapLinks';\nimport { SearchField } from 'app/features/plugins/admin/components/SearchField';\nimport { Sorters } from 'app/features/plugins/admin/helpers';\nimport { useHistory } from 'app/features/plugins/admin/hooks/useHistory';\nimport { useGetAll, useIsRemotePluginsAvailable } from 'app/features/plugins/admin/state/hooks';\nimport { AccessControlAction } from 'app/types';\n\nimport { ROUTES } from '../../constants';\n\nimport { CardGrid, type CardGridItem } from './CardGrid';\nimport { CategoryHeader } from './CategoryHeader';\nimport { NoAccessModal } from './NoAccessModal';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  spacer: css({\n    height: theme.spacing(2),\n  }),\n  modal: css({\n    width: '500px',\n  }),\n  modalContent: css({\n    overflow: 'visible',\n  }),\n  actionBar: css({\n    [theme.breakpoints.up('xl')]: {\n      marginLeft: 'auto',\n    },\n  }),\n});\n\nexport function AddNewConnection() {\n  const [queryParams, setQueryParams] = useQueryParams();\n  const searchTerm = queryParams.search ? String(queryParams.search) : '';\n  const [isNoAccessModalOpen, setIsNoAccessModalOpen] = useState(false);\n  const [focusedItem, setFocusedItem] = useState<CardGridItem | null>(null);\n  const location = useLocation();\n  const history = useHistory();\n  const locationSearch = locationSearchToObject(location.search);\n  const sortBy = (locationSearch.sortBy as Sorters) || Sorters.nameAsc;\n  const filterBy = locationSearch.filterBy?.toString() || 'all';\n  const canCreateDataSources = contextSrv.hasPermission(AccessControlAction.DataSourcesCreate);\n  const styles = useStyles2(getStyles);\n  const handleSearchChange = (val: string) => {\n    setQueryParams({\n      search: val,\n    });\n  };\n  const remotePluginsAvailable = useIsRemotePluginsAvailable();\n\n  const { error, plugins, isLoading } = useGetAll(\n    {\n      keyword: searchTerm,\n      type: PluginType.datasource,\n      isInstalled: filterBy === 'installed' ? true : undefined,\n      hasUpdate: filterBy === 'has-update' ? true : undefined,\n    },\n    sortBy\n  );\n  const filterByOptions = [\n    { value: 'all', label: 'All' },\n    { value: 'installed', label: 'Installed' },\n    { value: 'has-update', label: 'New Updates' },\n  ];\n\n  const onClickCardGridItem = (e: MouseEvent<HTMLElement>, item: CardGridItem) => {\n    if (!canCreateDataSources) {\n      e.preventDefault();\n      e.stopPropagation();\n      openModal(item);\n      reportInteraction('connections_plugin_card_clicked', {\n        plugin_id: item.id,\n        creator_team: 'grafana_plugins_catalog',\n        schema_version: '1.0.0',\n      });\n    }\n  };\n\n  const openModal = (item: CardGridItem) => {\n    setIsNoAccessModalOpen(true);\n    setFocusedItem(item);\n  };\n\n  const closeModal = () => {\n    setIsNoAccessModalOpen(false);\n    setFocusedItem(null);\n  };\n\n  const cardGridItems = useMemo(\n    () =>\n      plugins.map((plugin) => ({\n        ...plugin,\n        logo: plugin.info.logos.small,\n        url: ROUTES.DataSourcesDetails.replace(':id', plugin.id),\n      })),\n    [plugins]\n  );\n\n  const onSortByChange = (value: SelectableValue<string>) => {\n    history.push({ query: { sortBy: value.value } });\n  };\n\n  const onFilterByChange = (value: string) => {\n    history.push({ query: { filterBy: value } });\n  };\n\n  const showNoResults = useMemo(() => !isLoading && !error && plugins.length < 1, [isLoading, error, plugins]);\n  const categoryHeaderLabel = t('connections.connect-data.category-header-label', 'Data sources');\n\n  return (\n    <>\n      {focusedItem && <NoAccessModal item={focusedItem} isOpen={isNoAccessModalOpen} onDismiss={closeModal} />}\n      <HorizontalGroup wrap>\n        <Field label={t('common.search', 'Search')}>\n          <SearchField value={searchTerm} onSearch={handleSearchChange} />\n        </Field>\n        <HorizontalGroup className={styles.actionBar}>\n          {/* Filter by installed / all */}\n          {remotePluginsAvailable ? (\n            <Field label={t('plugins.filter.state', 'State')}>\n              <RadioButtonGroup value={filterBy} onChange={onFilterByChange} options={filterByOptions} />\n            </Field>\n          ) : (\n            <Tooltip\n              content={t(\n                'plugins.filter.disabled',\n                'This filter has been disabled because the Grafana server cannot access grafana.com'\n              )}\n              placement=\"top\"\n            >\n              <div>\n                <Field label={t('plugins.filter.state', 'State')}>\n                  <RadioButtonGroup\n                    disabled={true}\n                    value={filterBy}\n                    onChange={onFilterByChange}\n                    options={filterByOptions}\n                  />\n                </Field>\n              </div>\n            </Tooltip>\n          )}\n\n          {/* Sorting */}\n          <Field label={t('plugins.filter.sort', 'Sort')}>\n            <Combobox\n              aria-label={t('plugins.filter.sort-list', 'Sort Plugins List')}\n              width={24}\n              value={sortBy?.toString()}\n              onChange={onSortByChange}\n              options={[\n                { value: 'nameAsc', label: 'By name (A-Z)' },\n                { value: 'nameDesc', label: 'By name (Z-A)' },\n                { value: 'updated', label: 'By updated date' },\n                { value: 'published', label: 'By published date' },\n                { value: 'downloads', label: 'By downloads' },\n              ]}\n            />\n          </Field>\n        </HorizontalGroup>\n      </HorizontalGroup>\n      <CategoryHeader iconName=\"database\" label={categoryHeaderLabel} />\n      {isLoading ? (\n        <LoadingPlaceholder text={t('common.loading', 'Loading...')} />\n      ) : !!error ? (\n        <Trans i18nKey=\"alerting.policies.update-errors.error-code\" values={{ error: error.message }}>\n          Error message: \"{{ error: error.message }}\"\n        </Trans>\n      ) : (\n        <CardGrid items={cardGridItems} onClickItem={onClickCardGridItem} />\n      )}\n      {showNoResults && (\n        <EmptyState\n          variant=\"not-found\"\n          message={t('connections.connect-data.empty-message', 'No results matching your query were found')}\n        />\n      )}\n      <RoadmapLinks />\n    </>\n  );\n}\n","import { useState } from 'react';\n\nimport { PluginType } from '@grafana/data';\nimport { Page } from 'app/core/components/Page/Page';\nimport UpdateAllButton from 'app/features/plugins/admin/components/UpdateAllButton';\nimport UpdateAllModal from 'app/features/plugins/admin/components/UpdateAllModal';\nimport { useGetUpdatable } from 'app/features/plugins/admin/state/hooks';\n\nimport { AddNewConnection } from '../tabs/ConnectData';\n\nexport function AddNewConnectionPage() {\n  const { isLoading: areUpdatesLoading, updatablePlugins } = useGetUpdatable();\n  const updatableDSPlugins = updatablePlugins.filter((plugin) => plugin.type === PluginType.datasource);\n  const [showUpdateModal, setShowUpdateModal] = useState(false);\n  const disableUpdateAllButton = updatableDSPlugins.length <= 0 || areUpdatesLoading;\n\n  const onUpdateAll = () => {\n    setShowUpdateModal(true);\n  };\n\n  const updateAllButton = (\n    <UpdateAllButton\n      disabled={disableUpdateAllButton}\n      onUpdateAll={onUpdateAll}\n      updatablePluginsLength={updatableDSPlugins.length}\n    />\n  );\n\n  return (\n    <Page navId={'connections-add-new-connection'} actions={updateAllButton}>\n      <Page.Contents>\n        <AddNewConnection />\n        <UpdateAllModal\n          isOpen={showUpdateModal}\n          isLoading={areUpdatesLoading}\n          onDismiss={() => setShowUpdateModal(false)}\n          plugins={updatableDSPlugins}\n        />\n      </Page.Contents>\n    </Page>\n  );\n}\n","import { useParams } from 'react-router-dom-v5-compat';\n\nimport { Alert, Badge, TextLink } from '@grafana/ui';\nimport { PluginDetailsPage } from 'app/features/plugins/admin/components/PluginDetailsPage';\nimport { StoreState, useSelector, AppNotificationSeverity } from 'app/types';\n\nimport { Trans } from '../../../core/internationalization';\nimport { ROUTES } from '../constants';\n\nexport function DataSourceDetailsPage() {\n  const overrideNavId = 'standalone-plugin-page-/connections/add-new-connection';\n  const { id = '' } = useParams<{ id: string }>();\n  const navIndex = useSelector((state: StoreState) => state.navIndex);\n  const isConnectDataPageOverriden = Boolean(navIndex[overrideNavId]);\n  const navId = isConnectDataPageOverriden ? overrideNavId : 'connections-add-new-connection'; // The nav id changes (gets a prefix) if it is overriden by a plugin\n\n  return (\n    <PluginDetailsPage\n      pluginId={id}\n      navId={navId}\n      notFoundComponent={<NotFoundDatasource />}\n      notFoundNavModel={{\n        text: 'Unknown datasource',\n        subTitle: 'No datasource with this ID could be found.',\n        active: true,\n      }}\n    />\n  );\n}\n\nfunction NotFoundDatasource() {\n  const { id } = useParams<{ id: string }>();\n\n  return (\n    <Alert severity={AppNotificationSeverity.Warning} title=\"\">\n      <Trans i18nKey=\"connections.not-found-datasource.body\">\n        Maybe you mistyped the URL or the plugin with the id <Badge text={id} color=\"orange\" /> is unavailable.\n        <br />\n        To see a list of available datasources please <TextLink href={ROUTES.AddNewConnection}>click here</TextLink>.\n      </Trans>\n    </Alert>\n  );\n}\n","import { useCallback } from 'react';\n\nimport { config } from '@grafana/runtime';\nimport { LinkButton } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { Trans } from 'app/core/internationalization';\nimport { ROUTES } from 'app/features/connections/constants';\nimport { AccessControlAction } from 'app/types';\n\nimport { trackAddNewDsClicked } from '../tracking';\n\nexport function DataSourceAddButton(): JSX.Element | null {\n  const canCreateDataSource = contextSrv.hasPermission(AccessControlAction.DataSourcesCreate);\n  const handleClick = useCallback(() => {\n    trackAddNewDsClicked({ path: location.pathname });\n  }, []);\n\n  return canCreateDataSource ? (\n    <LinkButton icon=\"plus\" href={config.appSubUrl + ROUTES.DataSourcesNew} onClick={handleClick}>\n      <Trans i18nKey=\"data-sources.datasource-add-button.label\">Add new data source</Trans>\n    </LinkButton>\n  ) : null;\n}\n","import { debounce } from 'lodash';\nimport { useCallback, useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport PageActionBar from 'app/core/components/PageActionBar/PageActionBar';\nimport { StoreState, useSelector, useDispatch } from 'app/types';\n\nimport { getDataSourcesSearchQuery, getDataSourcesSort, setDataSourcesSearchQuery, setIsSortAscending } from '../state';\nimport { trackDsSearched } from '../tracking';\n\nconst ascendingSortValue = 'alpha-asc';\nconst descendingSortValue = 'alpha-desc';\n\nconst sortOptions = [\n  // We use this unicode 'en dash' character (U+2013), because it looks nicer\n  // than simple dash in this context. This is also used in the response of\n  // the `sorting` endpoint, which is used in the search dashboard page.\n  { label: 'Sort by A–Z', value: ascendingSortValue },\n  { label: 'Sort by Z–A', value: descendingSortValue },\n];\n\nexport function DataSourcesListHeader() {\n  const dispatch = useDispatch();\n  const debouncedTrackSearch = useMemo(\n    () =>\n      debounce((q) => {\n        trackDsSearched({ query: q });\n      }, 300),\n    []\n  );\n\n  const setSearchQuery = useCallback(\n    (q: string) => {\n      dispatch(setDataSourcesSearchQuery(q));\n      if (q) {\n        debouncedTrackSearch(q);\n      }\n    },\n    [dispatch, debouncedTrackSearch]\n  );\n  const searchQuery = useSelector(({ dataSources }: StoreState) => getDataSourcesSearchQuery(dataSources));\n\n  const setSort = useCallback(\n    (sort: SelectableValue) => dispatch(setIsSortAscending(sort.value === ascendingSortValue)),\n    [dispatch]\n  );\n  const isSortAscending = useSelector(({ dataSources }: StoreState) => getDataSourcesSort(dataSources));\n\n  const sortPicker = {\n    onChange: setSort,\n    value: isSortAscending ? ascendingSortValue : descendingSortValue,\n    getSortOptions: () => Promise.resolve(sortOptions),\n  };\n\n  return (\n    <PageActionBar searchQuery={searchQuery} setSearchQuery={setSearchQuery} key=\"action-bar\" sortPicker={sortPicker} />\n  );\n}\n","import { css } from '@emotion/css';\nimport { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom-v5-compat';\n\nimport { DataSourceSettings, GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { EmptyState, LinkButton, TextLink, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { Trans, t } from 'app/core/internationalization';\nimport { StoreState, AccessControlAction, useSelector } from 'app/types';\n\nimport { ROUTES } from '../../connections/constants';\nimport { getDataSources, getDataSourcesCount, useLoadDataSources } from '../state';\nimport { trackDataSourcesListViewed } from '../tracking';\n\nimport { DataSourcesListCard } from './DataSourcesListCard';\nimport { DataSourcesListHeader } from './DataSourcesListHeader';\n\nexport function DataSourcesList() {\n  const { isLoading } = useLoadDataSources();\n\n  const dataSources = useSelector((state) => getDataSources(state.dataSources));\n  const dataSourcesCount = useSelector(({ dataSources }: StoreState) => getDataSourcesCount(dataSources));\n  const hasCreateRights = contextSrv.hasPermission(AccessControlAction.DataSourcesCreate);\n  const hasWriteRights = contextSrv.hasPermission(AccessControlAction.DataSourcesWrite);\n  const hasExploreRights = contextSrv.hasAccessToExplore();\n\n  return (\n    <DataSourcesListView\n      dataSources={dataSources}\n      dataSourcesCount={dataSourcesCount}\n      isLoading={isLoading}\n      hasCreateRights={hasCreateRights}\n      hasWriteRights={hasWriteRights}\n      hasExploreRights={hasExploreRights}\n    />\n  );\n}\n\nexport type ViewProps = {\n  dataSources: DataSourceSettings[];\n  dataSourcesCount: number;\n  isLoading: boolean;\n  hasCreateRights: boolean;\n  hasWriteRights: boolean;\n  hasExploreRights: boolean;\n};\n\nexport function DataSourcesListView({\n  dataSources,\n  dataSourcesCount,\n  isLoading,\n  hasCreateRights,\n  hasWriteRights,\n  hasExploreRights,\n}: ViewProps) {\n  const styles = useStyles2(getStyles);\n  const location = useLocation();\n\n  useEffect(() => {\n    trackDataSourcesListViewed({\n      grafana_version: config.buildInfo.version,\n      path: location.pathname,\n    });\n  }, [location]);\n\n  if (!isLoading && dataSourcesCount === 0) {\n    return (\n      <EmptyState\n        variant=\"call-to-action\"\n        button={\n          <LinkButton disabled={!hasCreateRights} href={ROUTES.DataSourcesNew} icon=\"database\" size=\"lg\">\n            <Trans i18nKey=\"data-source-list.empty-state.button-title\">Add data source</Trans>\n          </LinkButton>\n        }\n        message={t('data-source-list.empty-state.title', 'No data sources defined')}\n      >\n        <Trans i18nKey=\"data-source-list.empty-state.pro-tip\">\n          You can also define data sources through configuration files.{' '}\n          <TextLink\n            external\n            href=\"http://docs.grafana.org/administration/provisioning/?utm_source=grafana_ds_list#data-sources\"\n          >\n            Learn more\n          </TextLink>\n        </Trans>\n      </EmptyState>\n    );\n  }\n\n  const getDataSourcesList = () => {\n    if (isLoading) {\n      return new Array(20)\n        .fill(null)\n        .map((_, index) => <DataSourcesListCard.Skeleton key={index} hasExploreRights={hasExploreRights} />);\n    }\n\n    return dataSources.map((dataSource) => (\n      <li key={dataSource.uid}>\n        <DataSourcesListCard\n          dataSource={dataSource}\n          hasWriteRights={hasWriteRights}\n          hasExploreRights={hasExploreRights}\n        />\n      </li>\n    ));\n  };\n\n  return (\n    <>\n      {/* List Header */}\n      <DataSourcesListHeader />\n\n      {/* List */}\n      {dataSources.length === 0 && !isLoading ? (\n        <EmptyState variant=\"not-found\" message={t('data-sources.empty-state.message', 'No data sources found')} />\n      ) : (\n        <ul className={styles.list}>{getDataSourcesList()}</ul>\n      )}\n    </>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    list: css({\n      listStyle: 'none',\n      display: 'grid',\n      // gap: '8px', Add back when legacy support for old Card interface is dropped\n    }),\n  };\n};\n","import { Page } from 'app/core/components/Page/Page';\nimport { AdvisorRedirectNotice } from 'app/features/connections/components/AdvisorRedirectNotice/AdvisorRedirectNotice';\nimport { DataSourceAddButton } from 'app/features/datasources/components/DataSourceAddButton';\nimport { DataSourcesList } from 'app/features/datasources/components/DataSourcesList';\nimport { getDataSourcesCount } from 'app/features/datasources/state';\nimport { StoreState, useSelector } from 'app/types';\n\nexport function DataSourcesListPage() {\n  const dataSourcesCount = useSelector(({ dataSources }: StoreState) => getDataSourcesCount(dataSources));\n\n  const actions = dataSourcesCount > 0 ? <DataSourceAddButton /> : undefined;\n  return (\n    <Page navId={'connections-datasources'} actions={actions}>\n      <Page.Contents>\n        <AdvisorRedirectNotice />\n        <DataSourcesList />\n      </Page.Contents>\n    </Page>\n  );\n}\n","import { useEffect } from 'react';\n\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { importDashboard, removeDashboard } from 'app/features/dashboard/state/actions';\nimport { loadPluginDashboards } from 'app/features/plugins/admin/state/actions';\nimport { PluginDashboard, StoreState, useDispatch, useSelector } from 'app/types';\n\nimport DashboardTable from '../components/DashboardsTable';\nimport { useInitDataSourceSettings } from '../state';\n\nexport type Props = {\n  // The UID of the data source\n  uid: string;\n};\n\nexport function DataSourceDashboards({ uid }: Props) {\n  useInitDataSourceSettings(uid);\n\n  const dispatch = useDispatch();\n  const dataSource = useSelector((s: StoreState) => s.dataSources.dataSource);\n  const dashboards = useSelector((s: StoreState) => s.plugins.dashboards);\n  const isLoading = useSelector((s: StoreState) => s.plugins.isLoadingPluginDashboards);\n\n  useEffect(() => {\n    // Load plugin dashboards only when the datasource has loaded\n    if (dataSource.id > 0) {\n      dispatch(loadPluginDashboards());\n    }\n  }, [dispatch, dataSource.id]);\n\n  const onImportDashboard = (dashboard: PluginDashboard, overwrite: boolean) => {\n    dispatch(\n      importDashboard(\n        {\n          pluginId: dashboard.pluginId,\n          path: dashboard.path,\n          overwrite,\n          inputs: [\n            {\n              name: '*',\n              type: 'datasource',\n              pluginId: dataSource.type,\n              value: dataSource.name,\n            },\n          ],\n        },\n        dashboard.title\n      )\n    );\n  };\n\n  const onRemoveDashboard = ({ uid }: PluginDashboard) => {\n    dispatch(removeDashboard(uid));\n  };\n\n  return (\n    <DataSourceDashboardsView\n      dashboards={dashboards}\n      isLoading={isLoading}\n      onImportDashboard={onImportDashboard}\n      onRemoveDashboard={onRemoveDashboard}\n    />\n  );\n}\n\nexport type ViewProps = {\n  isLoading: boolean;\n  dashboards: PluginDashboard[];\n  onImportDashboard: (dashboard: PluginDashboard, overwrite: boolean) => void;\n  onRemoveDashboard: (dashboard: PluginDashboard) => void;\n};\n\nexport const DataSourceDashboardsView = ({\n  isLoading,\n  dashboards,\n  onImportDashboard,\n  onRemoveDashboard,\n}: ViewProps) => {\n  if (isLoading) {\n    return <PageLoader />;\n  }\n\n  return <DashboardTable dashboards={dashboards} onImport={onImportDashboard} onRemove={onRemoveDashboard} />;\n};\n","import { useLocation, useParams } from 'react-router-dom-v5-compat';\n\nimport { NavModel, NavModelItem } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { useDataSource, useDataSourceMeta, useDataSourceSettings } from 'app/features/datasources/state/hooks';\nimport { getDataSourceLoadingNav, buildNavModel, getDataSourceNav } from 'app/features/datasources/state/navModel';\nimport { useGetSingle } from 'app/features/plugins/admin/state/hooks';\nimport { useSelector } from 'app/types';\n\nexport function useDataSourceSettingsNav(pageIdParam?: string) {\n  const { uid = '' } = useParams<{ uid: string }>();\n  const location = useLocation();\n  const datasource = useDataSource(uid);\n  const dataSourceMeta = useDataSourceMeta(datasource.type);\n  const datasourcePlugin = useGetSingle(datasource.type);\n  const params = new URLSearchParams(location.search);\n  const pageId = pageIdParam || params.get('page');\n\n  const { plugin, loadError, loading } = useDataSourceSettings();\n  const dsi = getDataSourceSrv()?.getInstanceSettings(uid);\n  const hasAlertingEnabled = Boolean(dsi?.meta?.alerting ?? false);\n  const isAlertManagerDatasource = dsi?.type === 'alertmanager';\n  const alertingSupported = hasAlertingEnabled || isAlertManagerDatasource;\n\n  const navIndex = useSelector((state) => state.navIndex);\n  const navIndexId = pageId ? `datasource-${pageId}-${uid}` : `datasource-settings-${uid}`;\n  let pageNav: NavModel = {\n    node: {\n      text: 'Data Source Nav Node',\n    },\n    main: {\n      text: 'Data Source Nav Node',\n    },\n  };\n\n  if (loadError) {\n    const node: NavModelItem = {\n      text: loadError,\n      subTitle: 'Data Source Error',\n      icon: 'exclamation-triangle',\n    };\n\n    pageNav = {\n      node: node,\n      main: node,\n    };\n  }\n\n  if (loading || !plugin) {\n    pageNav = getNavModel(navIndex, navIndexId, getDataSourceLoadingNav('settings'));\n  }\n\n  if (plugin) {\n    pageNav = getNavModel(\n      navIndex,\n      navIndexId,\n      getDataSourceNav(buildNavModel(datasource, plugin), pageId || 'settings')\n    );\n  }\n\n  const connectionsPageNav = {\n    ...pageNav.main,\n    dataSourcePluginName: datasourcePlugin?.name || plugin?.meta.name || '',\n    active: true,\n    text: datasource.name,\n    subTitle: `Type: ${dataSourceMeta.name}`,\n    children: (pageNav.main.children || []).map((navModelItem) => ({\n      ...navModelItem,\n      url: navModelItem.url?.replace('datasources/edit/', '/connections/datasources/edit/'),\n    })),\n  };\n\n  return {\n    navId: 'connections-datasources',\n    pageNav: connectionsPageNav,\n    dataSourceHeader: {\n      alertingSupported,\n    },\n  };\n}\n","import { useParams } from 'react-router-dom-v5-compat';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { DataSourceDashboards } from 'app/features/datasources/components/DataSourceDashboards';\n\nimport { useDataSourceSettingsNav } from '../hooks/useDataSourceSettingsNav';\n\nexport function DataSourceDashboardsPage() {\n  const { uid = '' } = useParams<{ uid: string }>();\n  const { navId, pageNav } = useDataSourceSettingsNav('dashboards');\n\n  return (\n    <Page navId={navId} pageNav={pageNav}>\n      <Page.Contents>\n        <DataSourceDashboards uid={uid} />\n      </Page.Contents>\n    </Page>\n  );\n}\n","import { css } from '@emotion/css';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { InlineField, InlineSwitch, Input, Badge, useStyles2 } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nexport interface Props {\n  dataSourceName: string;\n  isDefault: boolean;\n  onNameChange: (name: string) => void;\n  onDefaultChange: (value: boolean) => void;\n  disabled?: boolean;\n}\n\nexport function BasicSettings({ dataSourceName, isDefault, onDefaultChange, onNameChange, disabled }: Props) {\n  return (\n    <>\n      <div\n        className=\"gf-form-group\"\n        aria-label={t(\n          'datasources.basic-settings.aria-label-datasource-settings-page-basic',\n          'Datasource settings page basic settings'\n        )}\n      >\n        <div className=\"gf-form-inline\">\n          {/* Name */}\n          <div className=\"gf-form max-width-30\">\n            <InlineField\n              label={t('datasources.basic-settings.label-name', 'Name')}\n              tooltip=\"The name is used when you select the data source in panels. The default data source is\n              'preselected in new panels.\"\n              grow\n              disabled={disabled}\n              labelWidth={14}\n            >\n              <Input\n                id=\"basic-settings-name\"\n                type=\"text\"\n                value={dataSourceName}\n                placeholder={t('datasources.basic-settings.basic-settings-name-placeholder-name', 'Name')}\n                onChange={(event) => onNameChange(event.currentTarget.value)}\n                required\n                data-testid={selectors.pages.DataSource.name}\n              />\n            </InlineField>\n          </div>\n\n          {/* Is Default */}\n          <InlineField\n            label={t('datasources.basic-settings.label-default', 'Default')}\n            labelWidth={8}\n            disabled={disabled}\n          >\n            <InlineSwitch\n              id=\"basic-settings-default\"\n              value={isDefault}\n              onChange={(event: React.FormEvent<HTMLInputElement>) => {\n                onDefaultChange(event.currentTarget.checked);\n              }}\n            />\n          </InlineField>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport function AlertingEnabled({ enabled }: { enabled: boolean }) {\n  const styles = useStyles2(getStyles);\n  return (\n    <div className={styles.badge}>\n      {enabled ? (\n        <Badge\n          color=\"green\"\n          icon=\"check-circle\"\n          text={t('datasources.alerting-enabled.text-alerting-supported', 'Alerting supported')}\n        />\n      ) : (\n        <Badge\n          color=\"orange\"\n          icon=\"exclamation-triangle\"\n          text={t('datasources.alerting-enabled.text-alerting-not-supported', 'Alerting not supported')}\n        />\n      )}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  badge: css({\n    marginBottom: theme.spacing(2),\n  }),\n});\n","import * as React from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nexport interface Props {\n  canSave: boolean;\n  canDelete: boolean;\n  onDelete: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  onSubmit: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  onTest: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n}\n\nexport function ButtonRow({ canSave, canDelete, onDelete, onSubmit, onTest }: Props) {\n  return (\n    <div className=\"gf-form-button-row\">\n      <Button\n        type=\"button\"\n        variant=\"destructive\"\n        disabled={!canDelete}\n        onClick={onDelete}\n        data-testid={selectors.pages.DataSource.delete}\n      >\n        <Trans i18nKey=\"datasources.button-row.delete\">Delete</Trans>\n      </Button>\n      {canSave && (\n        <Button\n          type=\"submit\"\n          variant=\"primary\"\n          disabled={!canSave}\n          onClick={onSubmit}\n          data-testid={selectors.pages.DataSource.saveAndTest}\n        >\n          Save &amp; test\n        </Button>\n      )}\n      {!canSave && (\n        <Button variant=\"primary\" onClick={onTest}>\n          <Trans i18nKey=\"datasources.button-row.test\">Test</Trans>\n        </Button>\n      )}\n    </div>\n  );\n}\n","import { DataSourceSettings } from '@grafana/data';\nimport { GrafanaEdition } from '@grafana/data/internal';\nimport { Alert } from '@grafana/ui';\nimport { LocalStorageValueProvider } from 'app/core/components/LocalStorageValueProvider';\nimport { config } from 'app/core/config';\nimport { t } from 'app/core/internationalization';\n\nconst LOCAL_STORAGE_KEY = 'datasources.settings.cloudInfoBox.isDismissed';\n\nexport interface Props {\n  dataSource: DataSourceSettings;\n}\n\nexport function CloudInfoBox({ dataSource }: Props) {\n  let mainDS = '';\n  let extraDS = '';\n\n  // don't show for already configured data sources or provisioned data sources\n  if (dataSource.readOnly || (dataSource.version ?? 0) > 2) {\n    return null;\n  }\n\n  // Skip showing this info box in some editions\n  if (config.buildInfo.edition !== GrafanaEdition.OpenSource) {\n    return null;\n  }\n\n  switch (dataSource.type) {\n    case 'prometheus':\n      mainDS = 'Prometheus';\n      extraDS = 'Loki';\n      break;\n    case 'loki':\n      mainDS = 'Loki';\n      extraDS = 'Prometheus';\n      break;\n    default:\n      return null;\n  }\n\n  return (\n    <LocalStorageValueProvider<boolean> storageKey={LOCAL_STORAGE_KEY} defaultValue={false}>\n      {(isDismissed, onDismiss) => {\n        if (isDismissed) {\n          return null;\n        }\n        return (\n          <Alert\n            title={`Configure your ${mainDS} data source below`}\n            severity=\"info\"\n            bottomSpacing={4}\n            onRemove={() => {\n              onDismiss(true);\n            }}\n          >\n            Or skip the effort and get {mainDS} (and {extraDS}) as fully-managed, scalable, and hosted data sources from\n            Grafana Labs with the{' '}\n            <a\n              className=\"external-link\"\n              href={`https://grafana.com/signup/cloud/connect-account?src=grafana-oss&cnt=${dataSource.type}-settings`}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              title={t(\n                'datasources.cloud-info-box.title-includes-active-metrics-storage',\n                'The free plan includes 10k active metrics and 50gb storage.'\n              )}\n            >\n              free-forever Grafana Cloud plan\n            </a>\n            .\n          </Alert>\n        );\n      }}\n    </LocalStorageValueProvider>\n  );\n}\n","import { selectors as e2eSelectors } from '@grafana/e2e-selectors';\nimport { Alert } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nexport const readOnlyMessage =\n  'This data source was added by config and cannot be modified using the UI. Please contact your server admin to update this data source.';\n\nexport function DataSourceReadOnlyMessage() {\n  return (\n    <Alert\n      data-testid={e2eSelectors.pages.DataSource.readOnly}\n      severity=\"info\"\n      title={t('datasources.data-source-read-only-message.title-provisioned-data-source', 'Provisioned data source')}\n    >\n      {readOnlyMessage}\n    </Alert>\n  );\n}\n","import { Button } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nimport { DataSourceRights } from '../types';\n\nimport { DataSourceReadOnlyMessage } from './DataSourceReadOnlyMessage';\n\nexport type Props = {\n  dataSourceRights: DataSourceRights;\n  onDelete: () => void;\n};\n\nexport function DataSourceLoadError({ dataSourceRights, onDelete }: Props) {\n  const { readOnly, hasDeleteRights } = dataSourceRights;\n  const canDelete = !readOnly && hasDeleteRights;\n  const navigateBack = () => history.back();\n\n  return (\n    <>\n      {readOnly && <DataSourceReadOnlyMessage />}\n\n      <div className=\"gf-form-button-row\">\n        {canDelete && (\n          <Button type=\"submit\" variant=\"destructive\" onClick={onDelete}>\n            <Trans i18nKey=\"datasources.data-source-load-error.delete\">Delete</Trans>\n          </Button>\n        )}\n\n        <Button variant=\"secondary\" fill=\"outline\" type=\"button\" onClick={navigateBack}>\n          <Trans i18nKey=\"datasources.data-source-load-error.back\">Back</Trans>\n        </Button>\n      </div>\n    </>\n  );\n}\n","import { Alert } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nexport const missingRightsMessage =\n  'You are not allowed to modify this data source. Please contact your server admin to update this data source.';\n\nexport function DataSourceMissingRightsMessage() {\n  return (\n    <Alert\n      severity=\"info\"\n      title={t('datasources.data-source-missing-rights-message.title-missing-rights', 'Missing rights')}\n    >\n      {missingRightsMessage}\n    </Alert>\n  );\n}\n","import { GenericDataSourcePlugin } from '../types';\n\nexport type Props = {\n  plugin?: GenericDataSourcePlugin | null;\n  pageId: string;\n};\n\nexport function DataSourcePluginConfigPage({ plugin, pageId }: Props) {\n  if (!plugin || !plugin.configPages) {\n    return null;\n  }\n\n  const page = plugin.configPages.find(({ id }) => id === pageId);\n\n  if (page) {\n    // TODO: Investigate if any plugins are using this? We should change this interface\n    return <page.body plugin={plugin} query={{}} />;\n  }\n\n  return <div>Page not found: {page}</div>;\n}\n","import { createElement, PureComponent } from 'react';\n\nimport { DataSourcePluginMeta, DataSourceSettings } from '@grafana/data';\n\nimport { GenericDataSourcePlugin } from '../types';\n\nexport interface Props {\n  plugin: GenericDataSourcePlugin;\n  dataSource: DataSourceSettings;\n  dataSourceMeta: DataSourcePluginMeta;\n  onModelChange: (dataSource: DataSourceSettings) => void;\n}\n\nexport class DataSourcePluginSettings extends PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n\n    this.onModelChanged = this.onModelChanged.bind(this);\n  }\n\n  onModelChanged = (dataSource: DataSourceSettings) => {\n    this.props.onModelChange(dataSource);\n  };\n\n  render() {\n    const { plugin, dataSource } = this.props;\n\n    if (!plugin) {\n      return null;\n    }\n\n    return (\n      <div>\n        {plugin.components.ConfigEditor &&\n          createElement(plugin.components.ConfigEditor, {\n            options: dataSource,\n            onOptionsChange: this.onModelChanged,\n          })}\n      </div>\n    );\n  }\n}\n","import { PluginState } from '@grafana/data';\nimport { Trans } from 'app/core/internationalization';\nimport { PluginStateInfo } from 'app/features/plugins/components/PluginStateInfo';\n\nexport type Props = {\n  state?: PluginState;\n};\n\nexport function DataSourcePluginState({ state }: Props) {\n  return (\n    <div className=\"gf-form\">\n      <div className=\"gf-form-label width-10\">\n        <Trans i18nKey=\"datasources.data-source-plugin-state.plugin-state\">Plugin state</Trans>\n      </div>\n      <div className=\"gf-form-label gf-form-label--transparent\">\n        <PluginStateInfo state={state} />\n      </div>\n    </div>\n  );\n}\n","import { css, cx } from '@emotion/css';\nimport { HTMLAttributes } from 'react';\n\nimport { DataSourceSettings as DataSourceSettingsType, GrafanaTheme2 } from '@grafana/data';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors';\nimport { TestingStatus, config } from '@grafana/runtime';\nimport { AlertVariant, Alert, useTheme2, Link, useStyles2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nimport { contextSrv } from '../../../core/core';\nimport { trackCreateDashboardClicked } from '../tracking';\n\nexport type Props = {\n  testingStatus?: TestingStatus;\n  exploreUrl: string;\n  dataSource: DataSourceSettingsType;\n};\n\ninterface AlertMessageProps extends HTMLAttributes<HTMLDivElement> {\n  title: string;\n  severity?: AlertVariant;\n  exploreUrl: string;\n  dataSourceId: string;\n  onDashboardLinkClicked: () => void;\n}\n\nconst getStyles = (theme: GrafanaTheme2, hasTitle: boolean) => {\n  return {\n    content: css({\n      color: theme.colors.text.secondary,\n      paddingTop: hasTitle ? theme.spacing(1) : 0,\n      maxHeight: '50vh',\n      overflowY: 'auto',\n    }),\n    disabled: css({\n      pointerEvents: 'none',\n      color: theme.colors.text.secondary,\n    }),\n  };\n};\n\nconst AlertSuccessMessage = ({ title, exploreUrl, dataSourceId, onDashboardLinkClicked }: AlertMessageProps) => {\n  const theme = useTheme2();\n  const hasTitle = Boolean(title);\n  const styles = getStyles(theme, hasTitle);\n  const canExploreDataSources = contextSrv.hasAccessToExplore();\n\n  return (\n    <div className={styles.content}>\n      <Trans i18nKey=\"data-source-testing-status-page.success-more-details-links\">\n        Next, you can start to visualize data by{' '}\n        <Link\n          aria-label={`Create a dashboard`}\n          href={`/dashboard/new-with-ds/${dataSourceId}`}\n          className=\"external-link\"\n          onClick={onDashboardLinkClicked}\n        >\n          building a dashboard\n        </Link>\n        , or by querying data in the{' '}\n        <Link\n          aria-label={`Explore data`}\n          className={cx('external-link', {\n            [`${styles.disabled}`]: !canExploreDataSources,\n            'test-disabled': !canExploreDataSources,\n          })}\n          href={exploreUrl}\n        >\n          Explore view\n        </Link>\n        .\n      </Trans>\n    </div>\n  );\n};\n\nAlertSuccessMessage.displayName = 'AlertSuccessMessage';\n\ninterface ErrorDetailsLinkProps extends HTMLAttributes<HTMLDivElement> {\n  link?: string;\n}\n\nconst ErrorDetailsLink = ({ link }: ErrorDetailsLinkProps) => {\n  const theme = useTheme2();\n  const styles = {\n    content: css({\n      color: theme.colors.text.secondary,\n      paddingBlock: theme.spacing(1),\n      maxHeight: '50vh',\n      overflowY: 'auto',\n    }),\n  };\n  if (!link) {\n    return <></>;\n  }\n  const isValidUrl = /^(http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?$/.test(link);\n  if (!isValidUrl) {\n    return <></>;\n  }\n  return (\n    <div className={styles.content}>\n      <Trans i18nKey=\"data-source-testing-status-page.error-more-details-link\">\n        Click{' '}\n        <Link\n          aria-label={`More details about the error`}\n          className={'external-link'}\n          href={link}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          here\n        </Link>{' '}\n        to learn more about this error.\n      </Trans>\n    </div>\n  );\n};\n\nErrorDetailsLink.displayName = 'ErrorDetailsLink';\n\nconst alertVariants = new Set(['success', 'info', 'warning', 'error']);\nconst isAlertVariant = (str: string): str is AlertVariant => alertVariants.has(str);\nconst getAlertVariant = (status: string): AlertVariant => {\n  if (status.toLowerCase() === 'ok') {\n    return 'success';\n  }\n  return isAlertVariant(status) ? status : 'info';\n};\n\nexport function DataSourceTestingStatus({ testingStatus, exploreUrl, dataSource }: Props) {\n  const severity = getAlertVariant(testingStatus?.status ?? 'error');\n  const message = testingStatus?.message;\n  const detailsMessage = testingStatus?.details?.message;\n  const detailsVerboseMessage = testingStatus?.details?.verboseMessage;\n  const errorDetailsLink = testingStatus?.details?.errorDetailsLink;\n  const onDashboardLinkClicked = () => {\n    trackCreateDashboardClicked({\n      grafana_version: config.buildInfo.version,\n      datasource_uid: dataSource.uid,\n      plugin_name: dataSource.typeName,\n      path: location.pathname,\n    });\n  };\n  const styles = useStyles2(getTestingStatusStyles);\n\n  if (message) {\n    return (\n      <div className={cx('gf-form-group', styles.container)}>\n        <Alert severity={severity} title={message} data-testid={e2eSelectors.pages.DataSource.alert}>\n          {testingStatus?.details && (\n            <>\n              {detailsMessage ? <>{String(detailsMessage)}</> : null}\n              {severity === 'success' ? (\n                <AlertSuccessMessage\n                  title={message}\n                  exploreUrl={exploreUrl}\n                  dataSourceId={dataSource.uid}\n                  onDashboardLinkClicked={onDashboardLinkClicked}\n                />\n              ) : null}\n              {severity === 'error' && errorDetailsLink ? <ErrorDetailsLink link={String(errorDetailsLink)} /> : null}\n              {detailsVerboseMessage ? (\n                <details style={{ whiteSpace: 'pre-wrap' }}>{String(detailsVerboseMessage)}</details>\n              ) : null}\n            </>\n          )}\n        </Alert>\n      </div>\n    );\n  }\n\n  return null;\n}\n\nconst getTestingStatusStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    paddingTop: theme.spacing(3),\n  }),\n  moreLink: css({\n    marginBlock: theme.spacing(1),\n  }),\n});\n","import { AnyAction } from '@reduxjs/toolkit';\nimport { cloneDeep } from 'lodash';\nimport { useMemo } from 'react';\nimport * as React from 'react';\n\nimport {\n  DataSourcePluginContextProvider,\n  DataSourcePluginMeta,\n  DataSourceSettings as DataSourceSettingsType,\n  PluginExtensionPoints,\n  PluginExtensionDataSourceConfigContext,\n  DataSourceUpdatedSuccessfully,\n} from '@grafana/data';\nimport { getDataSourceSrv, usePluginComponents, UsePluginComponentsResult } from '@grafana/runtime';\nimport appEvents from 'app/core/app_events';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { DataSourceSettingsState, useDispatch } from 'app/types';\n\nimport {\n  dataSourceLoaded,\n  setDataSourceName,\n  setIsDefault,\n  useDataSource,\n  useDataSourceExploreUrl,\n  useDataSourceMeta,\n  useDataSourceRights,\n  useDataSourceSettings,\n  useDeleteLoadedDataSource,\n  useInitDataSourceSettings,\n  useTestDataSource,\n  useUpdateDatasource,\n} from '../state';\nimport { trackDsConfigClicked, trackDsConfigUpdated } from '../tracking';\nimport { DataSourceRights } from '../types';\n\nimport { BasicSettings } from './BasicSettings';\nimport { ButtonRow } from './ButtonRow';\nimport { CloudInfoBox } from './CloudInfoBox';\nimport { DataSourceLoadError } from './DataSourceLoadError';\nimport { DataSourceMissingRightsMessage } from './DataSourceMissingRightsMessage';\nimport { DataSourcePluginConfigPage } from './DataSourcePluginConfigPage';\nimport { DataSourcePluginSettings } from './DataSourcePluginSettings';\nimport { DataSourcePluginState } from './DataSourcePluginState';\nimport { DataSourceReadOnlyMessage } from './DataSourceReadOnlyMessage';\nimport { DataSourceTestingStatus } from './DataSourceTestingStatus';\n\nexport type Props = {\n  // The ID of the data source\n  uid: string;\n  // The ID of the custom datasource setting page\n  pageId?: string | null;\n};\n\nexport function EditDataSource({ uid, pageId }: Props) {\n  useInitDataSourceSettings(uid);\n\n  const dispatch = useDispatch();\n  const dataSource = useDataSource(uid);\n  const dataSourceMeta = useDataSourceMeta(dataSource.type);\n  const dataSourceSettings = useDataSourceSettings();\n  const dataSourceRights = useDataSourceRights(uid);\n  const exploreUrl = useDataSourceExploreUrl(uid);\n  const onDelete = useDeleteLoadedDataSource();\n  const onTest = useTestDataSource(uid);\n  const onUpdate = useUpdateDatasource();\n  const onDefaultChange = (value: boolean) => dispatch(setIsDefault(value));\n  const onNameChange = (name: string) => dispatch(setDataSourceName(name));\n  const onOptionsChange = (ds: DataSourceSettingsType) => dispatch(dataSourceLoaded(ds));\n\n  return (\n    <EditDataSourceView\n      pageId={pageId}\n      dataSource={dataSource}\n      dataSourceMeta={dataSourceMeta}\n      dataSourceSettings={dataSourceSettings}\n      dataSourceRights={dataSourceRights}\n      exploreUrl={exploreUrl}\n      onDelete={onDelete}\n      onDefaultChange={onDefaultChange}\n      onNameChange={onNameChange}\n      onOptionsChange={onOptionsChange}\n      onTest={onTest}\n      onUpdate={onUpdate}\n    />\n  );\n}\n\nexport type ViewProps = {\n  pageId?: string | null;\n  dataSource: DataSourceSettingsType;\n  dataSourceMeta: DataSourcePluginMeta;\n  dataSourceSettings: DataSourceSettingsState;\n  dataSourceRights: DataSourceRights;\n  exploreUrl: string;\n  onDelete: () => void;\n  onDefaultChange: (isDefault: boolean) => AnyAction;\n  onNameChange: (name: string) => AnyAction;\n  onOptionsChange: (dataSource: DataSourceSettingsType) => AnyAction;\n  onTest: () => void;\n  onUpdate: (dataSource: DataSourceSettingsType) => Promise<DataSourceSettingsType>;\n};\n\nexport function EditDataSourceView({\n  pageId,\n  dataSource,\n  dataSourceMeta,\n  dataSourceSettings,\n  dataSourceRights,\n  exploreUrl,\n  onDelete,\n  onDefaultChange,\n  onNameChange,\n  onOptionsChange,\n  onTest,\n  onUpdate,\n}: ViewProps) {\n  const { plugin, loadError, testingStatus, loading } = dataSourceSettings;\n  const { readOnly, hasWriteRights, hasDeleteRights } = dataSourceRights;\n  const hasDataSource = dataSource.id > 0;\n  const { components, isLoading } = useDataSourceConfigPluginExtensions();\n\n  const dsi = getDataSourceSrv()?.getInstanceSettings(dataSource.uid);\n\n  const onSubmit = async (e: React.MouseEvent<HTMLButtonElement> | React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    trackDsConfigClicked('save_and_test');\n\n    try {\n      await onUpdate({ ...dataSource });\n      trackDsConfigUpdated({ item: 'success' });\n      appEvents.publish(new DataSourceUpdatedSuccessfully());\n    } catch (error) {\n      trackDsConfigUpdated({ item: 'fail' });\n      return;\n    }\n\n    onTest();\n  };\n\n  if (loadError) {\n    return (\n      <DataSourceLoadError\n        dataSourceRights={dataSourceRights}\n        onDelete={() => {\n          trackDsConfigClicked('delete');\n          onDelete();\n        }}\n      />\n    );\n  }\n\n  if (loading || isLoading) {\n    return <PageLoader />;\n  }\n\n  // TODO - is this needed?\n  if (!hasDataSource || !dsi) {\n    return null;\n  }\n\n  if (pageId) {\n    return (\n      <DataSourcePluginContextProvider instanceSettings={dsi}>\n        <DataSourcePluginConfigPage pageId={pageId} plugin={plugin} />\n      </DataSourcePluginContextProvider>\n    );\n  }\n\n  return (\n    <form onSubmit={onSubmit}>\n      {!hasWriteRights && <DataSourceMissingRightsMessage />}\n      {readOnly && <DataSourceReadOnlyMessage />}\n      {dataSourceMeta.state && <DataSourcePluginState state={dataSourceMeta.state} />}\n\n      <CloudInfoBox dataSource={dataSource} />\n\n      <BasicSettings\n        dataSourceName={dataSource.name}\n        isDefault={dataSource.isDefault}\n        onDefaultChange={onDefaultChange}\n        onNameChange={onNameChange}\n        disabled={readOnly || !hasWriteRights}\n      />\n\n      {plugin && (\n        <DataSourcePluginContextProvider instanceSettings={dsi}>\n          <DataSourcePluginSettings\n            plugin={plugin}\n            dataSource={dataSource}\n            dataSourceMeta={dataSourceMeta}\n            onModelChange={onOptionsChange}\n          />\n        </DataSourcePluginContextProvider>\n      )}\n\n      {/* Extension point */}\n      {components.map((Component) => {\n        return (\n          <div key={Component.meta.id}>\n            <Component\n              context={{\n                dataSource: cloneDeep(dataSource),\n                dataSourceMeta: dataSourceMeta,\n                testingStatus,\n                setJsonData: (jsonData) =>\n                  onOptionsChange({\n                    ...dataSource,\n                    jsonData: { ...dataSource.jsonData, ...jsonData },\n                  }),\n                setSecureJsonData: (secureJsonData) =>\n                  onOptionsChange({\n                    ...dataSource,\n                    secureJsonData: { ...dataSource.secureJsonData, ...secureJsonData },\n                  }),\n              }}\n            />\n          </div>\n        );\n      })}\n\n      <DataSourceTestingStatus testingStatus={testingStatus} exploreUrl={exploreUrl} dataSource={dataSource} />\n\n      <ButtonRow\n        onSubmit={onSubmit}\n        onDelete={() => {\n          trackDsConfigClicked('delete');\n          onDelete();\n        }}\n        onTest={() => {\n          trackDsConfigClicked('test');\n          onTest();\n        }}\n        canDelete={!readOnly && hasDeleteRights}\n        canSave={!readOnly && hasWriteRights}\n      />\n    </form>\n  );\n}\n\ntype DataSourceConfigPluginExtensionProps = {\n  context: PluginExtensionDataSourceConfigContext;\n};\n\nfunction useDataSourceConfigPluginExtensions(): UsePluginComponentsResult<DataSourceConfigPluginExtensionProps> {\n  const { components, isLoading } = usePluginComponents<DataSourceConfigPluginExtensionProps>({\n    extensionPointId: PluginExtensionPoints.DataSourceConfig,\n  });\n\n  return useMemo(() => {\n    const allowedComponents = components.filter((component) => {\n      switch (component.meta.pluginId) {\n        case 'grafana-pdc-app':\n        case 'grafana-auth-app':\n          return true;\n        default:\n          return false;\n      }\n    });\n\n    return { components: allowedComponents, isLoading };\n  }, [components, isLoading]);\n}\n","import { config } from '@grafana/runtime';\nimport { LinkButton } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { Trans } from 'app/core/internationalization';\n\nimport { useDataSource } from '../state';\nimport { trackCreateDashboardClicked, trackDsConfigClicked, trackExploreClicked } from '../tracking';\nimport { constructDataSourceExploreUrl } from '../utils';\n\ninterface Props {\n  uid: string;\n}\n\nexport function EditDataSourceActions({ uid }: Props) {\n  const dataSource = useDataSource(uid);\n  const hasExploreRights = contextSrv.hasAccessToExplore();\n\n  return (\n    <>\n      {hasExploreRights && (\n        <LinkButton\n          variant=\"secondary\"\n          size=\"sm\"\n          href={constructDataSourceExploreUrl(dataSource)}\n          onClick={() => {\n            trackDsConfigClicked('explore');\n            trackExploreClicked({\n              grafana_version: config.buildInfo.version,\n              datasource_uid: dataSource.uid,\n              plugin_name: dataSource.typeName,\n              path: location.pathname,\n            });\n          }}\n        >\n          <Trans i18nKey=\"datasources.edit-data-source-actions.explore-data\">Explore data</Trans>\n        </LinkButton>\n      )}\n      <LinkButton\n        size=\"sm\"\n        variant=\"secondary\"\n        href={`dashboard/new-with-ds/${dataSource.uid}`}\n        onClick={() => {\n          trackDsConfigClicked('build_a_dashboard');\n          trackCreateDashboardClicked({\n            grafana_version: config.buildInfo.version,\n            datasource_uid: dataSource.uid,\n            plugin_name: dataSource.typeName,\n            path: location.pathname,\n          });\n        }}\n      >\n        <Trans i18nKey=\"datasources.edit-data-source-actions.build-a-dashboard\">Build a dashboard</Trans>\n      </LinkButton>\n    </>\n  );\n}\n","import { Badge } from '@grafana/ui';\nimport { PageInfoItem } from 'app/core/components/Page/types';\n\ntype DataSourceInfo = {\n  dataSourcePluginName: string;\n  alertingSupported: boolean;\n};\n\nexport const useDataSourceInfo = (dataSourceInfo: DataSourceInfo): PageInfoItem[] => {\n  const info: PageInfoItem[] = [];\n  const alertingEnabled = dataSourceInfo.alertingSupported;\n\n  info.push({\n    label: 'Type',\n    value: dataSourceInfo.dataSourcePluginName,\n  });\n\n  info.push({\n    label: 'Alerting',\n    value: (\n      <Badge color={alertingEnabled ? 'green' : 'red'} text={alertingEnabled ? 'Supported' : 'Not supported'}></Badge>\n    ),\n  });\n\n  return info;\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\ninterface Props {\n  title: string;\n}\n\nexport function DataSourceTitle({ title }: Props) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <h1 className={styles.title}>{title}</h1>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      marginBottom: theme.spacing(2),\n      h1: {\n        display: 'inline-block',\n      },\n    }),\n    title: css({\n      display: 'inline-block',\n      margin: '0 0 0 0',\n      maxWidth: '40vw',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      whiteSpace: 'nowrap',\n    }),\n  };\n};\n","import { Page } from 'app/core/components/Page/Page';\nimport { useDataSourceSettingsNav } from 'app/features/connections/hooks/useDataSourceSettingsNav';\n\nimport { EditDataSource } from '../components/EditDataSource';\nimport { EditDataSourceActions } from '../components/EditDataSourceActions';\nimport { useDataSourceInfo } from '../components/useDataSourceInfo';\n\nimport { DataSourceTitle } from './DataSourceTitle';\n\nexport interface Props {\n  uid: string;\n  pageId: string | null;\n}\n\nexport function DataSourceTabPage({ uid, pageId }: Props) {\n  const { navId, pageNav, dataSourceHeader } = useDataSourceSettingsNav();\n\n  const info = useDataSourceInfo({\n    dataSourcePluginName: pageNav.dataSourcePluginName,\n    alertingSupported: dataSourceHeader.alertingSupported,\n  });\n\n  return (\n    <Page\n      navId={navId}\n      pageNav={pageNav}\n      renderTitle={(title) => <DataSourceTitle title={title} />}\n      info={info}\n      actions={<EditDataSourceActions uid={uid} />}\n    >\n      <Page.Contents>\n        <EditDataSource uid={uid} pageId={pageId} />\n      </Page.Contents>\n    </Page>\n  );\n}\n\nexport default DataSourceTabPage;\n","import { useLocation, useParams } from 'react-router-dom-v5-compat';\n\nimport DataSourceTabPage from 'app/features/datasources/components/DataSourceTabPage';\n\nexport function EditDataSourcePage() {\n  const { uid = '' } = useParams<{ uid: string }>();\n  const location = useLocation();\n  const params = new URLSearchParams(location.search);\n  const pageId = params.get('page');\n\n  return <DataSourceTabPage uid={uid} pageId={pageId} />;\n}\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2, PluginErrorCode, PluginSignatureStatus, PluginType } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Alert, Icon, List, PluginSignatureBadge, Stack, useStyles2 } from '@grafana/ui';\n\nimport { useGetErrors, useFetchStatus } from '../admin/state/hooks';\n\ntype PluginsErrorInfoProps = {\n  filterByPluginType?: PluginType;\n};\n\nexport function PluginsErrorsInfo({ filterByPluginType }: PluginsErrorInfoProps) {\n  let errors = useGetErrors(filterByPluginType);\n  const { isLoading } = useFetchStatus();\n  const styles = useStyles2(getStyles);\n\n  if (isLoading || errors.length === 0) {\n    return null;\n  }\n\n  return (\n    <Alert\n      title=\"Unsigned plugins were found during plugin initialization. Grafana Labs cannot guarantee the integrity of these plugins. We recommend only using signed plugins.\"\n      data-testid={selectors.pages.PluginsList.signatureErrorNotice}\n      severity=\"warning\"\n    >\n      <p>The following plugins are disabled and not shown in the list below:</p>\n      <List\n        items={errors}\n        className={styles.list}\n        renderItem={(error) => (\n          <div className={styles.wrapper}>\n            <Stack justifyContent=\"flex-start\" alignItems=\"center\">\n              <strong>{error.pluginId}</strong>\n              <PluginSignatureBadge\n                status={mapPluginErrorCodeToSignatureStatus(error.errorCode)}\n                className={styles.badge}\n              />\n            </Stack>\n          </div>\n        )}\n      />\n      <a\n        href=\"https://grafana.com/docs/grafana/latest/plugins/plugin-signatures/\"\n        className={styles.docsLink}\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        <Icon name=\"book\" /> Read more about plugin signing\n      </a>\n    </Alert>\n  );\n}\n\nfunction mapPluginErrorCodeToSignatureStatus(code: PluginErrorCode) {\n  switch (code) {\n    case PluginErrorCode.invalidSignature:\n      return PluginSignatureStatus.invalid;\n    case PluginErrorCode.missingSignature:\n      return PluginSignatureStatus.missing;\n    case PluginErrorCode.modifiedSignature:\n      return PluginSignatureStatus.modified;\n    default:\n      return PluginSignatureStatus.missing;\n  }\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    list: css({\n      listStyleType: 'circle',\n    }),\n    wrapper: css({\n      marginTop: theme.spacing(1),\n    }),\n    badge: css({\n      marginTop: 0,\n    }),\n    docsLink: css({\n      display: 'inline-block',\n      color: theme.colors.text.link,\n      marginTop: theme.spacing(2),\n    }),\n  };\n}\n","import { css, cx } from '@emotion/css';\n\nimport { DataSourcePluginMeta, GrafanaTheme2 } from '@grafana/data';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors';\nimport { Card, LinkButton, PluginSignatureBadge, useStyles2 } from '@grafana/ui';\n\nexport type Props = {\n  dataSourcePlugin: DataSourcePluginMeta;\n  onClick: () => void;\n};\n\nexport function DataSourceTypeCard({ onClick, dataSourcePlugin }: Props) {\n  const isPhantom = dataSourcePlugin.module === 'phantom';\n  const isClickable = !isPhantom && !dataSourcePlugin.unlicensed;\n  const learnMoreLink = dataSourcePlugin.info?.links?.length > 0 ? dataSourcePlugin.info.links[0] : null;\n  const learnMoreLinkTarget = learnMoreLink?.target ?? '_blank';\n\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Card className={cx(styles.card, 'card-parent')} onClick={isClickable ? onClick : () => {}}>\n      {/* Name */}\n      <Card.Heading\n        className={styles.heading}\n        aria-label={e2eSelectors.pages.AddDataSource.dataSourcePluginsV2(dataSourcePlugin.name)}\n      >\n        {dataSourcePlugin.name}\n      </Card.Heading>\n\n      {/* Logo */}\n      <Card.Figure align=\"center\" className={styles.figure}>\n        <img className={styles.logo} src={dataSourcePlugin.info.logos.small} alt=\"\" />\n      </Card.Figure>\n\n      <Card.Description className={styles.description}>{dataSourcePlugin.info.description}</Card.Description>\n\n      {/* Signature */}\n      {!isPhantom && (\n        <Card.Meta className={styles.meta}>\n          <PluginSignatureBadge status={dataSourcePlugin.signature} />\n        </Card.Meta>\n      )}\n\n      {/* Learn more */}\n      <Card.Actions className={styles.actions}>\n        {learnMoreLink && (\n          <LinkButton\n            aria-label={`${dataSourcePlugin.name}, learn more.`}\n            href={`${learnMoreLink.url}?utm_source=grafana_add_ds`}\n            onClick={(e) => e.stopPropagation()}\n            rel=\"noopener\"\n            target={learnMoreLinkTarget}\n            variant=\"secondary\"\n          >\n            {learnMoreLink.name}\n          </LinkButton>\n        )}\n      </Card.Actions>\n    </Card>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    heading: css({\n      fontSize: theme.v1.typography.heading.h5,\n      fontWeight: 'inherit',\n    }),\n    figure: css({\n      width: 'inherit',\n      marginRight: '0px',\n      '> img': {\n        width: theme.spacing(7),\n      },\n    }),\n    meta: css({\n      marginTop: '6px',\n      position: 'relative',\n    }),\n    description: css({\n      margin: '0px',\n      fontSize: theme.typography.size.sm,\n    }),\n    actions: css({\n      position: 'relative',\n      alignSelf: 'center',\n      marginTop: '0px',\n      opacity: 0,\n\n      '.card-parent:hover &, .card-parent:focus-within &': {\n        opacity: 1,\n      },\n    }),\n    card: css({\n      gridTemplateAreas: `\n        \"Figure   Heading   Actions\"\n        \"Figure Description Actions\"\n        \"Figure    Meta     Actions\"\n        \"Figure     -       Actions\"`,\n    }),\n    logo: css({\n      marginRight: theme.v1.spacing.lg,\n      marginLeft: theme.v1.spacing.sm,\n      width: theme.spacing(7),\n      maxHeight: theme.spacing(7),\n    }),\n  };\n}\n","import { css } from '@emotion/css';\n\nimport { DataSourcePluginMeta } from '@grafana/data';\nimport { List } from '@grafana/ui';\n\nimport { DataSourceTypeCard } from './DataSourceTypeCard';\n\nexport type Props = {\n  // The list of data-source plugins to display\n  dataSourcePlugins: DataSourcePluginMeta[];\n  // Called when a data-source plugin is clicked on in the list\n  onClickDataSourceType: (dataSource: DataSourcePluginMeta) => void;\n};\n\nexport function DataSourceTypeCardList({ dataSourcePlugins, onClickDataSourceType }: Props) {\n  if (!dataSourcePlugins || !dataSourcePlugins.length) {\n    return null;\n  }\n\n  return (\n    <List\n      items={dataSourcePlugins}\n      getItemKey={(item) => item.id.toString()}\n      renderItem={(item) => <DataSourceTypeCard dataSourcePlugin={item} onClick={() => onClickDataSourceType(item)} />}\n      className={css({\n        '> li': {\n          marginBottom: '2px',\n        },\n      })}\n    />\n  );\n}\n","import { css } from '@emotion/css';\nimport { useCallback } from 'react';\n\nimport { DataSourcePluginMeta, GrafanaTheme2 } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { LinkButton, useStyles2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\nimport { DataSourcePluginCategory } from 'app/types';\n\nimport { ROUTES } from '../../connections/constants';\n\nimport { DataSourceTypeCardList } from './DataSourceTypeCardList';\n\nexport type Props = {\n  // The list of data-source plugin categories to display\n  categories: DataSourcePluginCategory[];\n\n  // Called when a data-source plugin is clicked on in the list\n  onClickDataSourceType: (dataSource: DataSourcePluginMeta) => void;\n};\n\nexport function DataSourceCategories({ categories, onClickDataSourceType }: Props) {\n  const moreDataSourcesLink = `${ROUTES.AddNewConnection}?cat=data-source`;\n  const styles = useStyles2(getStyles);\n\n  const handleClick = useCallback(() => {\n    reportInteraction('connections_add_datasource_find_more_ds_plugins_clicked', {\n      targetPath: moreDataSourcesLink,\n      path: location.pathname,\n      creator_team: 'grafana_plugins_catalog',\n      schema_version: '1.0.0',\n    });\n  }, [moreDataSourcesLink]);\n\n  return (\n    <>\n      {/* Categories */}\n      {categories.map(({ id, title, plugins }) => (\n        <div className={styles.category} key={id}>\n          <div className={styles.header} id={id}>\n            {title}\n          </div>\n          <DataSourceTypeCardList dataSourcePlugins={plugins} onClickDataSourceType={onClickDataSourceType} />\n        </div>\n      ))}\n\n      {/* Find more */}\n      <div className={styles.more}>\n        <LinkButton variant=\"secondary\" href={moreDataSourcesLink} onClick={handleClick} target=\"_self\" rel=\"noopener\">\n          <Trans i18nKey=\"datasources.data-source-categories.find-more-data-source-plugins\">\n            Find more data source plugins\n          </Trans>\n        </LinkButton>\n      </div>\n    </>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  category: css({\n    marginBottom: theme.spacing(2),\n  }),\n  header: css({\n    fontSize: theme.typography.h5.fontSize,\n    marginBottom: theme.spacing(1),\n  }),\n  more: css({\n    margin: theme.spacing(4),\n    textAlign: 'center',\n  }),\n});\n","import { Action } from 'redux';\n\nimport { DataSourcePluginMeta, PluginType } from '@grafana/data';\nimport { LinkButton, FilterInput } from '@grafana/ui';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { t, Trans } from 'app/core/internationalization';\nimport { PluginsErrorsInfo } from 'app/features/plugins/components/PluginsErrorsInfo';\nimport { DataSourcePluginCategory, StoreState, useDispatch, useSelector } from 'app/types';\n\nimport { ROUTES } from '../../connections/constants';\nimport { DataSourceCategories } from '../components/DataSourceCategories';\nimport { DataSourceTypeCardList } from '../components/DataSourceTypeCardList';\nimport {\n  useAddDatasource,\n  useLoadDataSourcePlugins,\n  getFilteredDataSourcePlugins,\n  setDataSourceTypeSearchQuery,\n} from '../state';\n\nexport function NewDataSource() {\n  useLoadDataSourcePlugins();\n\n  const dispatch = useDispatch();\n  const filteredDataSources = useSelector((s: StoreState) => getFilteredDataSourcePlugins(s.dataSources));\n  const searchQuery = useSelector((s: StoreState) => s.dataSources.dataSourceTypeSearchQuery);\n  const isLoadingDatasourcePlugins = useSelector((s: StoreState) => s.dataSources.isLoadingDataSourcePlugins);\n  const dataSourceCategories = useSelector((s: StoreState) => s.dataSources.categories);\n  const onAddDataSource = useAddDatasource();\n  const onSetSearchQuery = (q: string) => dispatch(setDataSourceTypeSearchQuery(q));\n\n  return (\n    <NewDataSourceView\n      dataSources={filteredDataSources}\n      dataSourceCategories={dataSourceCategories}\n      searchQuery={searchQuery}\n      isLoading={isLoadingDatasourcePlugins}\n      onAddDataSource={onAddDataSource}\n      onSetSearchQuery={onSetSearchQuery}\n    />\n  );\n}\n\nexport type ViewProps = {\n  dataSources: DataSourcePluginMeta[];\n  dataSourceCategories: DataSourcePluginCategory[];\n  searchQuery: string;\n  isLoading: boolean;\n  onAddDataSource: (dataSource: DataSourcePluginMeta) => void;\n  onSetSearchQuery: (q: string) => Action;\n};\n\nexport function NewDataSourceView({\n  dataSources,\n  dataSourceCategories,\n  searchQuery,\n  isLoading,\n  onAddDataSource,\n  onSetSearchQuery,\n}: ViewProps) {\n  if (isLoading) {\n    return <PageLoader />;\n  }\n\n  return (\n    <>\n      {/* Search */}\n      <div className=\"page-action-bar\">\n        <FilterInput\n          value={searchQuery}\n          onChange={onSetSearchQuery}\n          placeholder={t(\n            'datasources.new-data-source-view.placeholder-filter-by-name-or-type',\n            'Filter by name or type'\n          )}\n        />\n        <div className=\"page-action-bar__spacer\" />\n        <LinkButton href={ROUTES.DataSources} fill=\"outline\" variant=\"secondary\" icon=\"arrow-left\">\n          <Trans i18nKey=\"datasources.new-data-source-view.cancel\">Cancel</Trans>\n        </LinkButton>\n      </div>\n\n      {/* Show datasource plugin errors while not searching for anything specific */}\n      {!searchQuery && <PluginsErrorsInfo filterByPluginType={PluginType.datasource} />}\n\n      {/* Search results */}\n      <div>\n        {searchQuery && (\n          <DataSourceTypeCardList dataSourcePlugins={dataSources} onClickDataSourceType={onAddDataSource} />\n        )}\n        {!searchQuery && (\n          <DataSourceCategories categories={dataSourceCategories} onClickDataSourceType={onAddDataSource} />\n        )}\n      </div>\n    </>\n  );\n}\n","import { Page } from 'app/core/components/Page/Page';\nimport { NewDataSource } from 'app/features/datasources/components/NewDataSource';\n\nexport function NewDataSourcePage() {\n  return (\n    <Page\n      navId={'connections-datasources'}\n      pageNav={{ text: 'Add data source', subTitle: 'Choose a data source type', active: true }}\n    >\n      <Page.Contents>\n        <NewDataSource />\n      </Page.Contents>\n    </Page>\n  );\n}\n","import { Navigate, Routes, Route, useLocation } from 'react-router-dom-v5-compat';\n\nimport { StoreState, useSelector } from 'app/types';\n\nimport { ROUTES } from './constants';\nimport {\n  AddNewConnectionPage,\n  DataSourceDashboardsPage,\n  DataSourceDetailsPage,\n  DataSourcesListPage,\n  EditDataSourcePage,\n  NewDataSourcePage,\n} from './pages';\n\nfunction RedirectToAddNewConnection() {\n  const { search } = useLocation();\n  return (\n    <Navigate\n      replace\n      to={{\n        pathname: ROUTES.AddNewConnection,\n        search,\n      }}\n    />\n  );\n}\n\nexport default function Connections() {\n  const navIndex = useSelector((state: StoreState) => state.navIndex);\n  const isAddNewConnectionPageOverridden = Boolean(navIndex['standalone-plugin-page-/connections/add-new-connection']);\n\n  return (\n    <Routes>\n      {/* Redirect to \"Add new connection\" by default */}\n      <Route caseSensitive path={'/'} element={<Navigate replace to={ROUTES.AddNewConnection} />} />\n      {/* The route paths need to be relative to the parent path (ROUTES.Base), so we need to remove that part */}\n      <Route caseSensitive path={ROUTES.DataSources.replace(ROUTES.Base, '')} element={<DataSourcesListPage />} />\n      <Route caseSensitive path={ROUTES.DataSourcesNew.replace(ROUTES.Base, '')} element={<NewDataSourcePage />} />\n      <Route\n        caseSensitive\n        path={ROUTES.DataSourcesDetails.replace(ROUTES.Base, '')}\n        element={<DataSourceDetailsPage />}\n      />\n      <Route caseSensitive path={ROUTES.DataSourcesEdit.replace(ROUTES.Base, '')} element={<EditDataSourcePage />} />\n      <Route\n        caseSensitive\n        path={ROUTES.DataSourcesDashboards.replace(ROUTES.Base, '')}\n        element={<DataSourceDashboardsPage />}\n      />\n\n      {/* \"Add new connection\" page - we don't register a route in case a plugin already registers a standalone page for it */}\n      {!isAddNewConnectionPageOverridden && (\n        <Route\n          caseSensitive\n          path={ROUTES.AddNewConnection.replace(ROUTES.Base, '')}\n          element={<AddNewConnectionPage />}\n        />\n      )}\n\n      {/* Redirect from earlier routes to updated routes */}\n      <Route path={ROUTES.ConnectDataOutdated.replace(ROUTES.Base, '')} element={<RedirectToAddNewConnection />} />\n      <Route path={`/your-connections/:page`} element={<Navigate replace to={`${ROUTES.Base}/:page`} />} />\n      <Route\n        path={ROUTES.YourConnectionsOutdated.replace(ROUTES.Base, '')}\n        element={<Navigate replace to={ROUTES.DataSources} />}\n      />\n\n      {/* Not found */}\n      <Route element={<Navigate replace to=\"/notfound\" />} />\n    </Routes>\n  );\n}\n","import { css } from '@emotion/css';\nimport { useEffect, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { UserStorage } from '@grafana/runtime/internal';\nimport { Alert, LinkButton, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { t, Trans } from 'app/core/internationalization';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  alertContent: css({\n    display: 'flex',\n    flexDirection: 'row',\n    padding: 0,\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  }),\n  alertParagraph: css({\n    margin: theme.spacing(0, 1, 0, 0),\n    lineHeight: theme.spacing(theme.components.height.sm),\n  }),\n});\nconst userStorage = new UserStorage('advisor-redirect-notice');\n\nexport function AdvisorRedirectNotice() {\n  const styles = useStyles2(getStyles);\n  const hasAdminRights = contextSrv.hasRole('Admin') || contextSrv.isGrafanaAdmin;\n  const canUseAdvisor = hasAdminRights && config.featureToggles.grafanaAdvisor;\n  const [showNotice, setShowNotice] = useState(false);\n  useEffect(() => {\n    if (canUseAdvisor) {\n      userStorage.getItem('showNotice').then((showNotice) => {\n        if (showNotice !== 'false') {\n          setShowNotice(true);\n        }\n      });\n    }\n  }, [canUseAdvisor]);\n\n  return showNotice ? (\n    <Alert\n      severity=\"info\"\n      title=\"\"\n      onRemove={() => {\n        userStorage.setItem('showNotice', 'false');\n        setShowNotice(false);\n      }}\n    >\n      <div className={styles.alertContent}>\n        <p className={styles.alertParagraph}>\n          <Trans i18nKey=\"connections.advisor-redirect-notice.body\">\n            Try the new Advisor to uncover potential issues with your data sources and plugins.\n          </Trans>\n        </p>\n        <LinkButton\n          aria-label={t('connections.advisor-redirect-notice.aria-label-link-to-advisor', 'Link to Advisor')}\n          icon=\"arrow-right\"\n          href=\"/a/grafana-advisor-app\"\n          fill=\"text\"\n        >\n          <Trans i18nKey=\"connections.advisor-redirect-notice.go-to-advisor\">Go to Advisor</Trans>\n        </LinkButton>\n      </div>\n    </Alert>\n  ) : (\n    <></>\n  );\n}\n","import { TimeZone } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { WeekStart } from '@grafana/ui';\nimport { notifyApp } from 'app/core/actions';\nimport { createSuccessNotification } from 'app/core/copy/appNotification';\nimport { getDashboardAPI } from 'app/features/dashboard/api/dashboard_api';\nimport { dashboardWatcher } from 'app/features/live/dashboard/dashboardWatcher';\nimport { removeAllPanels } from 'app/features/panel/state/reducers';\nimport { updateTimeZoneForSession, updateWeekStartForSession } from 'app/features/profile/state/reducers';\nimport { ThunkResult } from 'app/types';\n\nimport { loadPluginDashboards } from '../../plugins/admin/state/actions';\nimport { cancelVariables } from '../../variables/state/actions';\nimport { getDashboardSrv } from '../services/DashboardSrv';\nimport { getTimeSrv } from '../services/TimeSrv';\n\nimport { cleanUpDashboard } from './reducers';\n\nexport function importDashboard(data: any, dashboardTitle: string): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().post('/api/dashboards/import', data);\n    dispatch(notifyApp(createSuccessNotification('Dashboard Imported', dashboardTitle)));\n    dispatch(loadPluginDashboards());\n  };\n}\n\nexport function removeDashboard(uid: string): ThunkResult<void> {\n  return async (dispatch) => {\n    await getDashboardAPI().deleteDashboard(uid, false);\n    dispatch(loadPluginDashboards());\n  };\n}\n\nexport const cleanUpDashboardAndVariables = (): ThunkResult<void> => (dispatch, getStore) => {\n  const store = getStore();\n  const dashboard = store.dashboard.getModel();\n\n  if (dashboard) {\n    dashboard.destroy();\n    dispatch(cancelVariables(dashboard.uid));\n  }\n\n  getTimeSrv().stopAutoRefresh();\n  dispatch(cleanUpDashboard());\n  dispatch(removeAllPanels());\n\n  dashboardWatcher.leave();\n\n  getDashboardSrv().setCurrent(undefined);\n};\n\nexport const updateTimeZoneDashboard =\n  (timeZone: TimeZone): ThunkResult<void> =>\n  (dispatch) => {\n    dispatch(updateTimeZoneForSession(timeZone));\n    getTimeSrv().refreshTimeModel();\n  };\n\nexport const updateWeekStartDashboard =\n  (weekStart?: WeekStart): ThunkResult<void> =>\n  (dispatch) => {\n    dispatch(updateWeekStartForSession(weekStart));\n    getTimeSrv().refreshTimeModel();\n  };\n","import { reportInteraction } from '@grafana/runtime';\nimport { Space, TextLink } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nexport const RoadmapLinks = () => {\n  return (\n    <div>\n      <Space v={2} />\n      <TextLink\n        href=\"https://github.com/grafana/grafana/issues/new?assignees=&labels=area%2Fdatasource%2Ctype%2Fnew-plugin-request&projects=&template=3-data_source_request.yaml&title=%5BNew+Data+Source%5D%3A+%3Cname-of-service%3E\"\n        onClick={() => reportInteraction('connections_data_source_request_clicked')}\n        external\n      >\n        <Trans i18nKey=\"connections.connect-data.request-data-source\">Request a new data source</Trans>\n      </TextLink>\n      <br />\n      <TextLink\n        href=\"https://github.com/orgs/grafana/projects/619/views/1?pane=info\"\n        onClick={() => reportInteraction('connections_data_source_roadmap_clicked')}\n        external\n      >\n        <Trans i18nKey=\"connections.connect-data.roadmap\">View roadmap</Trans>\n      </TextLink>\n    </div>\n  );\n};\n","import { useState, useRef } from 'react';\nimport * as React from 'react';\nimport { useDebounce } from 'react-use';\n\nimport { FilterInput } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\ninterface Props {\n  value?: string;\n  onSearch: (value: string) => void;\n}\n\n// useDebounce has a bug which causes it to fire on first render. This wrapper prevents that.\n// https://github.com/streamich/react-use/issues/759\nconst useDebounceWithoutFirstRender = (callBack: () => void, delay = 0, deps: React.DependencyList = []) => {\n  const isFirstRender = useRef(true);\n  const debounceDeps = [...deps, isFirstRender];\n\n  return useDebounce(\n    () => {\n      if (isFirstRender.current) {\n        isFirstRender.current = false;\n        return;\n      }\n      return callBack();\n    },\n    delay,\n    debounceDeps\n  );\n};\n\nexport const SearchField = ({ value, onSearch }: Props) => {\n  const [query, setQuery] = useState(value);\n\n  useDebounceWithoutFirstRender(() => onSearch(query ?? ''), 500, [query]);\n\n  return (\n    <FilterInput\n      value={query}\n      onKeyDown={(e) => {\n        if (e.key === 'Enter' || e.keyCode === 13) {\n          onSearch(e.currentTarget.value);\n        }\n      }}\n      placeholder={t('plugins.search-field.placeholder-search-grafana-plugins', 'Search Grafana plugins')}\n      onChange={(value) => {\n        setQuery(value);\n      }}\n      width={46}\n    />\n  );\n};\n","import { Button } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\ninterface UpdateAllButtonProps {\n  disabled: boolean;\n  onUpdateAll: () => void;\n  updatablePluginsLength: number;\n}\n\nconst UpdateAllButton = ({ disabled, onUpdateAll, updatablePluginsLength }: UpdateAllButtonProps) => {\n  return (\n    <Button disabled={disabled} onClick={onUpdateAll}>\n      {disabled ? (\n        <Trans i18nKey=\"plugins.catalog.no-updates-available\">No updates available</Trans>\n      ) : (\n        <Trans i18nKey=\"plugins.catalog.update-all.button\" values={{ length: updatablePluginsLength }}>\n          Update all ({{ length }})\n        </Trans>\n      )}\n    </Button>\n  );\n};\n\nexport default UpdateAllButton;\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Checkbox, EmptyState, Icon, Spinner, Tooltip, useStyles2 } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { CatalogPlugin } from '../types';\n\ntype UpdateError = {\n  id: string;\n  message: string;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  table: css({\n    marginTop: theme.spacing(2),\n    width: '100%',\n    borderCollapse: 'collapse',\n  }),\n  tableRow: css({\n    borderBottom: `1px solid ${theme.colors.border.weak}`,\n    td: {\n      paddingRight: theme.spacing(1),\n    },\n  }),\n  icon: css({\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  }),\n  header: css({\n    textAlign: 'left',\n    padding: theme.spacing(1),\n    borderBottom: `2px solid ${theme.colors.border.strong}`,\n    th: {\n      paddingRight: theme.spacing(1),\n    },\n  }),\n  data: css({\n    padding: '10px',\n  }),\n  footer: css({\n    fontSize: theme.typography.bodySmall.fontSize,\n    marginTop: theme.spacing(3),\n  }),\n  noPluginsMessage: css({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: '100%',\n  }),\n  tableContainer: css({\n    overflowY: 'auto',\n    overflowX: 'hidden',\n    maxHeight: theme.spacing(41),\n    marginBottom: theme.spacing(2),\n  }),\n  errorIcon: css({\n    color: theme.colors.error.main,\n  }),\n  successIcon: css({\n    color: theme.colors.success.main,\n  }),\n  pluginsInstalled: css({\n    svg: {\n      marginRight: theme.spacing(1),\n    },\n  }),\n});\n\nconst StatusIcon = ({\n  id,\n  inProgress,\n  isSelected,\n  isInstalled,\n  errorMap,\n}: {\n  id: string;\n  inProgress: boolean;\n  isSelected: boolean;\n  isInstalled: boolean;\n  errorMap: Map<string, UpdateError>;\n}) => {\n  const styles = useStyles2(getStyles);\n\n  if (errorMap && errorMap.has(id)) {\n    return (\n      <Tooltip\n        content={`${t('plugins.catalog.update-all.error', 'Error updating plugin:')} ${errorMap.get(id)?.message}`}\n      >\n        <Icon className={styles.errorIcon} size=\"xl\" name=\"exclamation-triangle\" />\n      </Tooltip>\n    );\n  }\n  if (isInstalled) {\n    return <Icon className={styles.successIcon} size=\"xl\" name=\"check\" />;\n  }\n  if (inProgress && isSelected) {\n    return <Spinner />;\n  }\n  return '';\n};\n\ntype Props = {\n  plugins: CatalogPlugin[];\n  pluginsNotInstalled: Set<string>;\n  inProgress: boolean;\n  selectedPlugins?: Set<string>;\n  onCheckboxChange: (id: string) => void;\n  errorMap: Map<string, UpdateError>;\n};\n\nexport const UpdateModalBody = ({\n  plugins,\n  pluginsNotInstalled,\n  inProgress,\n  selectedPlugins,\n  onCheckboxChange,\n  errorMap,\n}: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const numberInstalled = plugins.length - pluginsNotInstalled.size;\n  const installationFinished = plugins.length !== pluginsNotInstalled.size && !inProgress;\n\n  return (\n    <div>\n      {plugins.length === 0 ? (\n        <EmptyState\n          variant=\"completed\"\n          message={t('plugins.catalog.update-all.all-plugins-updated', 'All plugins updated!')}\n        />\n      ) : (\n        <>\n          <div>\n            <Trans i18nKey=\"plugins.catalog.update-all.header\">The following plugins have update available</Trans>\n          </div>\n          <div className={styles.tableContainer}>\n            <table className={styles.table}>\n              <thead className={styles.header}>\n                <tr>\n                  <th>\n                    <Trans i18nKey=\"plugins.catalog.update-all.update-header\">Update</Trans>\n                  </th>\n                  <th>\n                    <Trans i18nKey=\"plugins.catalog.update-all.name-header\">Name</Trans>\n                  </th>\n                  <th>\n                    <Trans i18nKey=\"plugins.catalog.update-all.installed-header\">Installed</Trans>\n                  </th>\n                  <th>\n                    <Trans i18nKey=\"plugins.catalog.update-all.available-header\">Available</Trans>\n                  </th>\n                  <th></th>\n                </tr>\n              </thead>\n              <tbody>\n                {plugins.map(({ id, name, installedVersion, latestVersion }: CatalogPlugin) => (\n                  <tr key={id} className={styles.tableRow}>\n                    <td>\n                      <Checkbox\n                        onChange={() => onCheckboxChange(id)}\n                        value={selectedPlugins?.has(id)}\n                        disabled={!pluginsNotInstalled.has(id)}\n                      />\n                    </td>\n                    <td>{name}</td>\n                    <td>{installedVersion}</td>\n                    <td>{latestVersion}</td>\n                    <td className={styles.icon}>\n                      <StatusIcon\n                        id={id}\n                        inProgress={inProgress}\n                        isSelected={selectedPlugins?.has(id) ?? false}\n                        isInstalled={!pluginsNotInstalled.has(id)}\n                        errorMap={errorMap}\n                      />\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n          {numberInstalled > 0 && installationFinished && (\n            <div className={styles.pluginsInstalled}>\n              <Icon className={styles.successIcon} size=\"lg\" name=\"check\" />\n              {`${numberInstalled} ${t('plugins.catalog.update-all.update-status-text', 'plugins updated')}`}\n            </div>\n          )}\n          {errorMap.size > 0 && installationFinished && (\n            <div className={styles.pluginsInstalled}>\n              <Icon className={styles.errorIcon} size=\"lg\" name=\"exclamation-triangle\" />\n              {`${errorMap.size} ${t('plugins.catalog.update-all.error-status-text', 'failed - see error messages')}`}\n            </div>\n          )}\n          {config.pluginAdminExternalManageEnabled && (\n            <footer className={styles.footer}>\n              <Trans i18nKey=\"plugins.catalog.update-all.cloud-update-message\">\n                * It may take a few minutes for the plugins to be available for usage.\n              </Trans>\n            </footer>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n","import { useEffect, useMemo, useRef, useState } from 'react';\n\nimport { config, reportInteraction } from '@grafana/runtime';\nimport { ConfirmModal } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { useInstall, useInstallStatus } from '../state/hooks';\nimport { CatalogPlugin, PluginStatus } from '../types';\n\nimport { UpdateModalBody } from './UpdateAllModalBody';\nconst PLUGINS_UPDATE_ALL_INTERACTION_EVENT_NAME = 'plugins_update_all_clicked';\n\ntype UpdateError = {\n  id: string;\n  message: string;\n};\n\ntype Props = {\n  isOpen: boolean;\n  isLoading: boolean;\n  onDismiss: () => void;\n  plugins: CatalogPlugin[];\n};\n\nexport const UpdateAllModal = ({ isOpen, onDismiss, isLoading, plugins }: Props) => {\n  const install = useInstall();\n  const { error } = useInstallStatus();\n  const [errorMap, setErrorMap] = useState(new Map<string, UpdateError>());\n  const [inProgress, setInProgress] = useState(false);\n  const [selectedPlugins, setSelectedPlugins] = useState<Set<string>>();\n  const initialPluginsRef = useRef(plugins);\n\n  const pluginsSet = useMemo(() => new Set(plugins.map((plugin) => plugin.id)), [plugins]);\n  const installsRemaining = plugins.length;\n\n  // Since the plugins comes from the store and changes every time we update a plugin,\n  // we need to keep track of the initial plugins.\n  useEffect(() => {\n    if (initialPluginsRef.current.length === 0) {\n      initialPluginsRef.current = [...plugins];\n    }\n  }, [plugins]);\n\n  // Updates the component state on every plugins change, since the installation will change the store content\n  useEffect(() => {\n    if (inProgress) {\n      selectedPlugins?.forEach((id) => {\n        if (!pluginsSet.has(id)) {\n          setSelectedPlugins((prevSelectedPlugins) => {\n            const newSelectedPlugins = new Set(prevSelectedPlugins);\n            newSelectedPlugins.delete(id);\n            return newSelectedPlugins;\n          });\n        }\n      });\n\n      if (selectedPlugins?.size === 0) {\n        setInProgress(false);\n      }\n    }\n  }, [inProgress, pluginsSet, selectedPlugins]);\n\n  // Initialize the component with all the plugins selected\n  useEffect(() => {\n    if (selectedPlugins === undefined && plugins.length > 0 && !isLoading) {\n      const initialSelectedPlugins = new Set(plugins.map((plugin) => plugin.id));\n      setSelectedPlugins(initialSelectedPlugins);\n    }\n  }, [isLoading, plugins, selectedPlugins]);\n\n  // Updates the component state on every error that comes from the store\n  useEffect(() => {\n    if (inProgress && error && !errorMap.has(error.id) && selectedPlugins?.has(error.id)) {\n      setErrorMap((prevErrorMap) => {\n        const newErrorMap = new Map(prevErrorMap);\n        newErrorMap.set(error.id, error);\n        return newErrorMap;\n      });\n\n      setSelectedPlugins((prevSelectedPlugins) => {\n        const newSelectedPlugins = new Set(prevSelectedPlugins);\n        newSelectedPlugins.delete(error.id);\n        return newSelectedPlugins;\n      });\n    }\n  }, [error, errorMap, inProgress, selectedPlugins]);\n\n  const onConfirm = async () => {\n    if (!inProgress) {\n      reportInteraction(PLUGINS_UPDATE_ALL_INTERACTION_EVENT_NAME, {\n        path: location.pathname,\n        count: selectedPlugins?.size,\n        creator_team: 'grafana_plugins_catalog',\n        schema_version: '1.0.0',\n      });\n\n      setInProgress(true);\n\n      // in cloud the requests need to be sync\n      if (config.pluginAdminExternalManageEnabled) {\n        for (let plugin of plugins) {\n          if (selectedPlugins?.has(plugin.id)) {\n            await install(plugin.id, plugin.latestVersion, PluginStatus.UPDATE);\n          }\n        }\n      } else {\n        plugins.forEach((plugin) => {\n          if (selectedPlugins?.has(plugin.id)) {\n            install(plugin.id, plugin.latestVersion, PluginStatus.UPDATE);\n          }\n        });\n      }\n    }\n  };\n\n  const onDismissClick = () => {\n    initialPluginsRef.current = [];\n    setErrorMap(new Map());\n    setInProgress(false);\n    setSelectedPlugins(undefined);\n    onDismiss();\n  };\n\n  const onCheckboxChange = (id: string) => {\n    setSelectedPlugins((prevSelectedPlugins) => {\n      const newSelectedPlugins = new Set(prevSelectedPlugins);\n      if (newSelectedPlugins.has(id)) {\n        newSelectedPlugins.delete(id);\n      } else {\n        newSelectedPlugins.add(id);\n      }\n      return newSelectedPlugins;\n    });\n    if (errorMap.has(id)) {\n      setErrorMap((prevErrorMap) => {\n        const newErrorMap = new Map(prevErrorMap);\n        newErrorMap.delete(id);\n        return newErrorMap;\n      });\n    }\n  };\n\n  const pluginsSelected = selectedPlugins?.size || 0;\n\n  return (\n    <ConfirmModal\n      isOpen={isOpen}\n      title={t('plugins.catalog.update-all.modal-title', 'Update Plugins')}\n      body={\n        <UpdateModalBody\n          plugins={initialPluginsRef.current}\n          pluginsNotInstalled={pluginsSet}\n          inProgress={inProgress}\n          errorMap={errorMap}\n          onCheckboxChange={onCheckboxChange}\n          selectedPlugins={selectedPlugins}\n        />\n      }\n      onConfirm={installsRemaining > 0 ? onConfirm : onDismissClick}\n      onDismiss={onDismissClick}\n      disabled={shouldDisableConfirm(inProgress, installsRemaining, pluginsSelected)}\n      confirmText={getConfirmationText(installsRemaining, inProgress, pluginsSelected)}\n      confirmButtonVariant=\"primary\"\n    />\n  );\n};\n\nfunction getConfirmationText(installsRemaining: number, inProgress: boolean, pluginsSelected: number) {\n  if (inProgress) {\n    return t('plugins.catalog.update-all.modal-in-progress', 'Updating...');\n  }\n\n  if (installsRemaining > 0) {\n    return t('plugins.catalog.update-all.modal-confirmation', 'Update') + ` (${pluginsSelected})`;\n  }\n  return t('plugins.catalog.update-all.modal-dismiss', 'Close');\n}\n\nfunction shouldDisableConfirm(inProgress: boolean, installsRemaining: number, pluginsSelected: number) {\n  if (inProgress) {\n    return true;\n  }\n\n  if (installsRemaining > 0 && pluginsSelected === 0) {\n    return true;\n  }\n\n  return false;\n}\n\nexport default UpdateAllModal;\n","import { locationService } from '@grafana/runtime';\n\nexport const useHistory = () => {\n  return {\n    push: ({ query }: { query: Parameters<typeof locationService.partial>[0] }) => {\n      locationService.partial(query);\n    },\n  };\n};\n"],"names":["PageActionBar","searchQuery","linkButton","setSearchQuery","target","placeholder","sortPicker","linkProps","getStyles","theme","PluginEnterpriseBadgeWithoutSignature","customBadgeStyles","CardGrid","items","onClickItem","styles","Grid","item","Card","e","Stack","CategoryHeader","iconName","label","Icon","NoAccessModal","isOpen","onDismiss","Modal","NoAccessModalHeader","Button","AddNewConnection","queryParams","setQueryParams","useQueryParams","searchTerm","isNoAccessModalOpen","setIsNoAccessModalOpen","focusedItem","setFocusedItem","location","history","useHistory","locationSearch","sortBy","filterBy","canCreateDataSources","handleSearchChange","val","remotePluginsAvailable","error","plugins","isLoading","filterByOptions","onClickCardGridItem","openModal","closeModal","cardGridItems","plugin","onSortByChange","value","onFilterByChange","showNoResults","categoryHeaderLabel","HorizontalGroup","Field","SearchField","RadioButtonGroup","Tooltip","Combobox","LoadingPlaceholder","EmptyState","RoadmapLinks","AddNewConnectionPage","areUpdatesLoading","updatablePlugins","updatableDSPlugins","showUpdateModal","setShowUpdateModal","disableUpdateAllButton","onUpdateAll","updateAllButton","UpdateAllButton","Page","UpdateAllModal","DataSourceDetailsPage","overrideNavId","id","navId","state","PluginDetailsPage","NotFoundDatasource","Alert","TextLink","DataSourceAddButton","canCreateDataSource","handleClick","config","ascendingSortValue","descendingSortValue","sortOptions","DataSourcesListHeader","dispatch","debouncedTrackSearch","q","dataSources","setSort","sort","isSortAscending","DataSourcesList","dataSourcesCount","hasCreateRights","hasWriteRights","hasExploreRights","DataSourcesListView","getDataSourcesList","_","index","DataSourcesListCard","dataSource","DataSourcesListPage","actions","AdvisorRedirectNotice","DataSourceDashboards","uid","s","dashboards","onImportDashboard","dashboard","overwrite","onRemoveDashboard","DataSourceDashboardsView","PageLoader","useDataSourceSettingsNav","pageIdParam","datasource","dataSourceMeta","datasourcePlugin","params","pageId","loadError","loading","dsi","hasAlertingEnabled","isAlertManagerDatasource","alertingSupported","navIndex","navIndexId","pageNav","node","navModelItem","DataSourceDashboardsPage","BasicSettings","dataSourceName","isDefault","onDefaultChange","onNameChange","disabled","InlineField","Input","event","selectors","AlertingEnabled","enabled","ButtonRow","canSave","canDelete","onDelete","onSubmit","onTest","LOCAL_STORAGE_KEY","CloudInfoBox","mainDS","extraDS","LocalStorageValueProvider","isDismissed","readOnlyMessage","DataSourceReadOnlyMessage","DataSourceLoadError","dataSourceRights","readOnly","hasDeleteRights","navigateBack","missingRightsMessage","DataSourceMissingRightsMessage","DataSourcePluginConfigPage","page","DataSourcePluginSettings","props","DataSourcePluginState","PluginStateInfo","hasTitle","AlertSuccessMessage","title","exploreUrl","dataSourceId","onDashboardLinkClicked","canExploreDataSources","Link","ErrorDetailsLink","link","alertVariants","isAlertVariant","str","getAlertVariant","status","DataSourceTestingStatus","testingStatus","severity","message","detailsMessage","detailsVerboseMessage","errorDetailsLink","getTestingStatusStyles","EditDataSource","dataSourceSettings","onUpdate","name","onOptionsChange","ds","EditDataSourceView","hasDataSource","components","useDataSourceConfigPluginExtensions","DataSourcePluginContextProvider","Component","jsonData","secureJsonData","usePluginComponents","component","EditDataSourceActions","useDataSourceInfo","dataSourceInfo","info","alertingEnabled","DataSourceTitle","DataSourceTabPage","dataSourceHeader","EditDataSourcePage","PluginsErrorsInfo","filterByPluginType","errors","List","PluginSignatureBadge","mapPluginErrorCodeToSignatureStatus","code","DataSourceTypeCard","onClick","dataSourcePlugin","isPhantom","isClickable","learnMoreLink","learnMoreLinkTarget","DataSourceTypeCardList","dataSourcePlugins","onClickDataSourceType","DataSourceCategories","categories","moreDataSourcesLink","NewDataSource","filteredDataSources","isLoadingDatasourcePlugins","dataSourceCategories","onAddDataSource","onSetSearchQuery","NewDataSourceView","FilterInput","NewDataSourcePage","RedirectToAddNewConnection","search","Connections","isAddNewConnectionPageOverridden","userStorage","canUseAdvisor","showNotice","setShowNotice","importDashboard","data","dashboardTitle","removeDashboard","cleanUpDashboardAndVariables","getStore","updateTimeZoneDashboard","timeZone","updateWeekStartDashboard","weekStart","useDebounceWithoutFirstRender","callBack","delay","deps","isFirstRender","debounceDeps","onSearch","query","setQuery","updatablePluginsLength","StatusIcon","inProgress","isSelected","isInstalled","errorMap","Spinner","UpdateModalBody","pluginsNotInstalled","selectedPlugins","onCheckboxChange","numberInstalled","installationFinished","installedVersion","latestVersion","Checkbox","PLUGINS_UPDATE_ALL_INTERACTION_EVENT_NAME","install","setErrorMap","setInProgress","setSelectedPlugins","initialPluginsRef","pluginsSet","installsRemaining","prevSelectedPlugins","newSelectedPlugins","initialSelectedPlugins","prevErrorMap","newErrorMap","onConfirm","onDismissClick","pluginsSelected","ConfirmModal","shouldDisableConfirm","getConfirmationText"],"sourceRoot":""}