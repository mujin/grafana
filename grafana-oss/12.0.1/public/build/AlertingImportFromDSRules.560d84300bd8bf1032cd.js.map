{"version":3,"file":"AlertingImportFromDSRules.560d84300bd8bf1032cd.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/create-folder/CreateNewFolder.tsx","webpack://grafana/./public/app/features/alerting/unified/api/convertToGMAApi.ts","webpack://grafana/./public/app/features/alerting/unified/components/import-to-gma/hooks.ts","webpack://grafana/./public/app/features/alerting/unified/components/import-to-gma/ConfirmConvertModal.tsx","webpack://grafana/./public/app/features/alerting/unified/components/import-to-gma/NamespaceAndGroupFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/import-to-gma/ImportFromDSRules.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/CloudRulesSourcePicker.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/useAlertRuleSuggestions.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useRuleSourcesWithRuler.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button, Field, Input, Label, Modal, Stack, useStyles2 } from '@grafana/ui';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { contextSrv } from 'app/core/core';\nimport { Trans, t } from 'app/core/internationalization';\nimport { useNewFolderMutation } from 'app/features/browse-dashboards/api/browseDashboardsAPI';\nimport { AccessControlAction } from 'app/types';\n\nimport { Folder } from '../../types/rule-form';\n\n/**\n * Provides a button and associated modal for creating a new folder\n */\nexport const CreateNewFolder = ({ onCreate }: { onCreate: (folder: Folder) => void }) => {\n  const [isCreatingFolder, setIsCreatingFolder] = useState(false);\n  const handleCreate = (folder: Folder) => {\n    onCreate(folder);\n    setIsCreatingFolder(false);\n  };\n  return (\n    <>\n      <Button\n        onClick={() => setIsCreatingFolder(true)}\n        type=\"button\"\n        icon=\"plus\"\n        fill=\"outline\"\n        variant=\"secondary\"\n        disabled={!contextSrv.hasPermission(AccessControlAction.FoldersCreate)}\n      >\n        <Trans i18nKey=\"alerting.create-new-folder.new-folder\">New folder</Trans>\n      </Button>\n      {isCreatingFolder && <FolderCreationModal onCreate={handleCreate} onClose={() => setIsCreatingFolder(false)} />}\n    </>\n  );\n};\n\nfunction FolderCreationModal({\n  onClose,\n  onCreate,\n}: {\n  onClose: () => void;\n  onCreate: (folder: Folder) => void;\n}): React.ReactElement {\n  const styles = useStyles2(getStyles);\n  const notifyApp = useAppNotification();\n  const [title, setTitle] = useState('');\n  const [createFolder] = useNewFolderMutation();\n\n  const onSubmit = async () => {\n    const { data, error } = await createFolder({ title });\n\n    if (error) {\n      notifyApp.error('Failed to create folder');\n    } else if (data) {\n      onCreate({ title: data.title, uid: data.uid });\n      notifyApp.success('Folder created');\n    }\n  };\n\n  return (\n    <Modal\n      className={styles.modal}\n      isOpen\n      title={t('alerting.create-new-folder.title-new-folder', 'New folder')}\n      onDismiss={onClose}\n      onClickBackdrop={onClose}\n    >\n      <Stack direction=\"column\" gap={2}>\n        <Field\n          label={\n            <Label htmlFor=\"folder\">\n              <Trans i18nKey=\"alerting.create-new-folder.folder.name\">Folder name</Trans>\n            </Label>\n          }\n        >\n          <Input\n            data-testid={selectors.components.AlertRules.newFolderNameField}\n            autoFocus={true}\n            id=\"folderName\"\n            placeholder={t('alerting.create-new-folder.placeholder-enter-a-name', 'Enter a name')}\n            value={title}\n            onChange={(e) => setTitle(e.currentTarget.value)}\n          />\n        </Field>\n\n        <Modal.ButtonRow>\n          <Button variant=\"secondary\" type=\"button\" onClick={onClose}>\n            <Trans i18nKey=\"alerting.create-new-folder.folder.cancel\">Cancel</Trans>\n          </Button>\n          <Button\n            onClick={onSubmit}\n            disabled={!title}\n            data-testid={selectors.components.AlertRules.newFolderNameCreateButton}\n          >\n            <Trans i18nKey=\"alerting.create-new-folder.folder.create\">Create</Trans>\n          </Button>\n        </Modal.ButtonRow>\n      </Stack>\n    </Modal>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  modal: css({\n    width: `${theme.breakpoints.values.sm}px`,\n  }),\n});\n","import { RulerRulesConfigDTO } from 'app/types/unified-alerting-dto';\n\nimport { alertingApi } from './alertingApi';\n\nexport const convertToGMAApi = alertingApi.injectEndpoints({\n  endpoints: (build) => ({\n    convertToGMA: build.mutation<\n      void,\n      {\n        targetFolderUID?: string;\n        dataSourceUID: string;\n        pauseRecordingRules?: boolean;\n        pauseAlerts?: boolean;\n        payload: RulerRulesConfigDTO;\n        /** Target data source UID to store recording rules in */\n        targetDatasourceUID?: string;\n      }\n    >({\n      query: ({ payload, targetFolderUID, pauseRecordingRules, pauseAlerts, dataSourceUID, targetDatasourceUID }) => ({\n        url: `/api/convert/prometheus/config/v1/rules`,\n        method: 'POST',\n        body: payload,\n        headers: {\n          'X-Grafana-Alerting-Datasource-UID': dataSourceUID,\n          'X-Grafana-Alerting-Recording-Rules-Paused': pauseRecordingRules,\n          'X-Grafana-Alerting-Alert-Rules-Paused': pauseAlerts,\n          'X-Disable-Provenance': true,\n          ...(targetFolderUID ? { 'X-Grafana-Alerting-Folder-UID': targetFolderUID } : {}),\n          ...(targetDatasourceUID ? { 'X-Grafana-Alerting-Target-Datasource-UID': targetDatasourceUID } : {}),\n        },\n      }),\n    }),\n  }),\n});\n","import { isEmpty } from 'lodash';\nimport { useEffect, useState } from 'react';\nimport { lastValueFrom } from 'rxjs';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { FolderDTO } from 'app/types';\nimport { RulerRulesConfigDTO } from 'app/types/unified-alerting-dto';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\nimport { GRAFANA_RULER_CONFIG } from '../../api/featureDiscoveryApi';\nimport { Folder } from '../../types/rule-form';\nimport { useGetRulerRules } from '../rule-editor/useAlertRuleSuggestions';\n\nasync function getNestedFoldersIn(uid: string) {\n  const response = await lastValueFrom(\n    getBackendSrv().fetch<FolderDTO[]>({\n      url: `/api/folders`,\n      params: { parentUid: uid },\n      method: 'GET',\n      showErrorAlert: false,\n      showSuccessAlert: false,\n    })\n  );\n\n  return response?.data;\n}\n\nexport function useGetNestedFolders(folderUID: string, skip = false) {\n  const [nestedFolders, setNestedFolders] = useState<FolderDTO[]>([]);\n\n  useEffect(() => {\n    (async () => {\n      const nestedFoldersIn = skip ? [] : await getNestedFoldersIn(folderUID);\n      setNestedFolders(nestedFoldersIn);\n    })();\n  }, [folderUID, skip]);\n\n  return nestedFolders;\n}\n\nexport function useGetRulesThatMightBeOverwritten(\n  skip: boolean,\n  targetFolder: Folder | undefined,\n  rulesToBeImported: RulerRulesConfigDTO\n) {\n  // get nested folders in the target folder\n  const nestedFoldersInTargetFolder = useGetNestedFolders(targetFolder?.uid || '', skip);\n  const skipFiltering = skip || nestedFoldersInTargetFolder.length === 0;\n  const rulesThatMightBeOverwritten = useFilterRulesThatMightBeOverwritten(\n    nestedFoldersInTargetFolder,\n    rulesToBeImported,\n    skipFiltering\n  );\n\n  return { rulesThatMightBeOverwritten };\n}\n\nexport function useGetRulesToBeImported(skip: boolean, selectedDatasourceName: string | undefined) {\n  // we need to skip fetching and filtering if the modal is not open\n  const dataSourceToFetch = !skip ? selectedDatasourceName : undefined;\n  const { rulerRules: rulesToBeImported, isLoading: isloadingCloudRules } = useGetRulerRules(dataSourceToFetch);\n\n  return { rulesToBeImported, isloadingCloudRules };\n}\nfunction useFilterRulesThatMightBeOverwritten(\n  targetNestedFolders: FolderDTO[],\n  rulesToBeImported: RulerRulesConfigDTO,\n  skip = true\n): RulerRulesConfigDTO {\n  const [fetchRulesByFolderUID] = alertRuleApi.endpoints.rulerNamespace.useLazyQuery();\n  const [rulesThatMightBeOverwritten, setRulesThatMightBeOverwritten] = useState<RulerRulesConfigDTO>({});\n\n  useEffect(() => {\n    if (skip || isEmpty(targetNestedFolders) || isEmpty(rulesToBeImported)) {\n      setRulesThatMightBeOverwritten({});\n      return;\n    }\n    // filter targetNestedFolders to only include folders that are in the rulesToBeImported\n    const targetNestedFoldersFiltered = targetNestedFolders.filter((folder) => {\n      return Object.keys(rulesToBeImported).includes(folder.title);\n    });\n    const fetchRules = async () => {\n      const results: RulerRulesConfigDTO = {};\n\n      await Promise.all(\n        targetNestedFoldersFiltered.map(async (folder) => {\n          const { data: rules } = await fetchRulesByFolderUID({\n            namespace: folder.uid,\n            rulerConfig: GRAFANA_RULER_CONFIG,\n          });\n\n          if (rules) {\n            const folderWithParentTitle = Object.keys(rules)[0];\n            if (folderWithParentTitle) {\n              results[folderWithParentTitle] = rules[folderWithParentTitle] || [];\n            }\n          }\n        })\n      );\n\n      setRulesThatMightBeOverwritten(results);\n    };\n\n    fetchRules();\n  }, [targetNestedFolders, rulesToBeImported, skip, fetchRulesByFolderUID]);\n\n  return rulesThatMightBeOverwritten;\n}\n","import { css } from '@emotion/css';\nimport { isEmpty } from 'lodash';\nimport { ComponentProps, useMemo } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { useToggle } from 'react-use';\n\nimport { locationService } from '@grafana/runtime';\nimport { Alert, CodeEditor, Collapse, ConfirmModal, Modal, Stack, Text, useStyles2 } from '@grafana/ui';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { Trans, t } from 'app/core/internationalization';\nimport { stringifyErrorLike } from 'app/features/alerting/unified/utils/misc';\nimport { RulerRulesConfigDTO } from 'app/types/unified-alerting-dto';\n\nimport { trackImportToGMAError, trackImportToGMASuccess } from '../../Analytics';\nimport { convertToGMAApi } from '../../api/convertToGMAApi';\nimport { GRAFANA_ORIGIN_LABEL } from '../../utils/labels';\nimport { createListFilterLink } from '../../utils/navigation';\n\nimport { ImportFormValues } from './ImportFromDSRules';\nimport { useGetRulesThatMightBeOverwritten, useGetRulesToBeImported } from './hooks';\n\ntype ModalProps = Pick<ComponentProps<typeof ConfirmModal>, 'isOpen' | 'onDismiss'> & {\n  isOpen: boolean;\n};\n\nconst AlertSomeRulesSkipped = () => (\n  <Alert\n    title={t('alerting.import-to-gma.confirm-modal.plugin-rules-warning.title', 'Some rules are excluded from import')}\n    severity=\"info\"\n  >\n    <Text variant=\"body\">\n      <Trans i18nKey=\"alerting.import-to-gma.confirm-modal.plugin-rules-warning.text\">\n        We have detected that some rules are managed by plugins. These rules will not be imported.\n      </Trans>\n    </Text>\n  </Alert>\n);\n\nexport const ConfirmConversionModal = ({ isOpen, onDismiss }: ModalProps) => {\n  const { watch } = useFormContext<ImportFormValues>();\n  const styles = useStyles2(getStyles);\n\n  const [\n    targetFolder,\n    selectedDatasourceName,\n    selectedDatasourceUID,\n    pauseRecordingRules,\n    pauseAlertingRules,\n    namespace,\n    ruleGroup,\n    targetDatasourceUID,\n  ] = watch([\n    'targetFolder',\n    'selectedDatasourceName',\n    'selectedDatasourceUID',\n    'pauseRecordingRules',\n    'pauseAlertingRules',\n    'namespace',\n    'ruleGroup',\n    'targetDatasourceUID',\n  ]);\n\n  const dataSourceToFetch = isOpen ? (selectedDatasourceName ?? '') : undefined;\n  const { rulesToBeImported, isloadingCloudRules } = useGetRulesToBeImported(!isOpen, dataSourceToFetch);\n  const { filteredConfig: rulerRulesToPayload, someRulesAreSkipped } = useMemo(\n    () => filterRulerRulesConfig(rulesToBeImported, namespace, ruleGroup),\n    [rulesToBeImported, namespace, ruleGroup]\n  );\n  const { rulesThatMightBeOverwritten } = useGetRulesThatMightBeOverwritten(!isOpen, targetFolder, rulerRulesToPayload);\n\n  const [convert] = convertToGMAApi.useConvertToGMAMutation();\n  const notifyApp = useAppNotification();\n\n  if (isloadingCloudRules) {\n    return (\n      <Modal\n        isOpen={isOpen}\n        title={t('alerting.import-to-gma.confirm-modal.loading', 'Loading...')}\n        onDismiss={onDismiss}\n        onClickBackdrop={onDismiss}\n      >\n        <Text>\n          {t(\n            'alerting.import-to-gma.confirm-modal.loading-body',\n            'Preparing data to be imported.This can take a while...'\n          )}\n        </Text>\n      </Modal>\n    );\n  }\n\n  async function onConvertConfirm() {\n    try {\n      await convert({\n        dataSourceUID: selectedDatasourceUID,\n        targetFolderUID: targetFolder?.uid,\n        pauseRecordingRules: pauseRecordingRules,\n        pauseAlerts: pauseAlertingRules,\n        payload: rulerRulesToPayload,\n        targetDatasourceUID,\n      }).unwrap();\n\n      const isRootFolder = isEmpty(targetFolder?.uid);\n\n      trackImportToGMASuccess();\n      const ruleListUrl = createListFilterLink(isRootFolder ? [] : [['namespace', targetFolder?.title ?? '']], {\n        skipSubPath: true,\n      });\n      notifyApp.success(\n        t('alerting.import-to-gma.success', 'Successfully imported alert rules to Grafana-managed rules.')\n      );\n      locationService.push(ruleListUrl);\n    } catch (error) {\n      trackImportToGMAError();\n      notifyApp.error(\n        t('alerting.import-to-gma.error', 'Failed to import alert rules: {{error}}', {\n          error: stringifyErrorLike(error),\n        })\n      );\n    }\n  }\n\n  const noRulesToImport = isEmpty(rulerRulesToPayload);\n  if (noRulesToImport) {\n    return (\n      <Modal\n        isOpen={isOpen}\n        title={t('alerting.import-to-gma.confirm-modal.no-rules-title', 'No rules to import')}\n        onDismiss={onDismiss}\n        onClickBackdrop={onDismiss}\n      >\n        <Stack direction=\"column\" gap={2}>\n          {someRulesAreSkipped && <AlertSomeRulesSkipped />}\n          <Text>\n            {t(\n              'alerting.import-to-gma.confirm-modal.no-rules-body',\n              'There are no rules to import. Please select a different namespace or rule group.'\n            )}\n          </Text>\n        </Stack>\n      </Modal>\n    );\n  }\n\n  // translations for texts in the modal\n  const title = t('alerting.import-to-gma.confirm-modal.title', 'Confirm import');\n  const confirmText = t('alerting.import-to-gma.confirm-modal.confirm', 'Import');\n  return (\n    <ConfirmModal\n      isOpen={isOpen}\n      title={title}\n      confirmText={confirmText}\n      confirmButtonVariant=\"primary\"\n      modalClass={styles.modal}\n      body={\n        <Stack direction=\"column\" gap={2}>\n          {!isEmpty(rulesThatMightBeOverwritten) && (\n            <TargetFolderNotEmptyWarning targetFolderRules={rulesThatMightBeOverwritten} />\n          )}\n          {someRulesAreSkipped && <AlertSomeRulesSkipped />}\n          <Text variant=\"h6\">\n            <Trans i18nKey=\"alerting.to-gma.confirm-modal.summary\">The following alert rules will be imported:</Trans>\n          </Text>\n          {rulerRulesToPayload && <RulesPreview rules={rulerRulesToPayload} />}\n        </Stack>\n      }\n      onConfirm={onConvertConfirm}\n      onDismiss={onDismiss}\n    />\n  );\n};\n\nfunction filterRulerRulesConfig(\n  rulerRulesConfig: RulerRulesConfigDTO,\n  namespace?: string,\n  groupName?: string\n): { filteredConfig: RulerRulesConfigDTO; someRulesAreSkipped: boolean } {\n  const filteredConfig: RulerRulesConfigDTO = {};\n  let someRulesAreSkipped = false;\n\n  Object.entries(rulerRulesConfig).forEach(([ns, groups]) => {\n    if (namespace && ns !== namespace) {\n      return;\n    }\n\n    const filteredGroups = groups.filter((group) => {\n      if (groupName && group.name !== groupName) {\n        return false;\n      }\n\n      // Filter out rules that have the GRAFANA_ORIGIN_LABEL\n      const filteredRules = group.rules.filter((rule) => {\n        const hasGrafanaOriginLabel = rule.labels?.[GRAFANA_ORIGIN_LABEL];\n        if (hasGrafanaOriginLabel) {\n          someRulesAreSkipped = true;\n          return false;\n        }\n        return true;\n      });\n\n      return {\n        ...group,\n        rules: filteredRules,\n      };\n    });\n\n    if (filteredGroups.length > 0) {\n      filteredConfig[ns] = filteredGroups;\n    }\n  });\n\n  return { filteredConfig, someRulesAreSkipped };\n}\n\nfunction RulesPreview({ rules }: { rules: RulerRulesConfigDTO }) {\n  const styles = useStyles2(getStyles);\n  return (\n    <div className={styles.content}>\n      <CodeEditor\n        width=\"100%\"\n        height={500}\n        language={'json'}\n        value={JSON.stringify(rules, null, 4)}\n        monacoOptions={{\n          minimap: {\n            enabled: false,\n          },\n          scrollBeyondLastLine: false,\n          lineNumbers: 'on',\n          readOnly: true,\n        }}\n      />\n    </div>\n  );\n}\n\nconst getStyles = () => ({\n  content: css({\n    flex: '1 1 100%',\n  }),\n  modal: css({\n    width: '800px',\n  }),\n});\n\nfunction TargetFolderNotEmptyWarning({ targetFolderRules }: { targetFolderRules: RulerRulesConfigDTO }) {\n  const [showTargetRules, toggleShowTargetRules] = useToggle(false);\n  return (\n    <Stack direction=\"column\" gap={2}>\n      <Alert title={t('alerting.to-gma.confirm-modal.title-warning', 'Warning')} severity=\"warning\">\n        <Text variant=\"body\">\n          <Trans i18nKey=\"alerting.to-gma.confirm-modal.body\">\n            The target folder is not empty, some rules may be overwritten or removed. Are you sure you want to import\n            these alert rules to Grafana-managed rules?\n          </Trans>\n        </Text>\n      </Alert>\n      {targetFolderRules && (\n        <Collapse\n          label={t(\n            'alerting.import-to-gma.confirm-modal.target-folder-rules',\n            'Target folder rules that might be overwritten'\n          )}\n          isOpen={showTargetRules}\n          onToggle={toggleShowTargetRules}\n          collapsible={true}\n        >\n          <RulesPreview rules={targetFolderRules} />\n        </Collapse>\n      )}\n    </Stack>\n  );\n}\n","import { useEffect, useMemo } from 'react';\nimport { Controller, useFormContext } from 'react-hook-form';\n\nimport { Combobox, ComboboxOption, Field, Stack } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { useGetNameSpacesByDatasourceName } from '../rule-editor/useAlertRuleSuggestions';\n\nimport { ImportFormValues } from './ImportFromDSRules';\n\ninterface Props {\n  rulesSourceName?: string;\n}\n\nexport const NamespaceAndGroupFilter = ({ rulesSourceName }: Props) => {\n  const {\n    control,\n    watch,\n    formState: { errors },\n    setValue,\n  } = useFormContext<ImportFormValues>();\n\n  const namespace = watch('namespace');\n  const { namespaceGroups, isLoading } = useGetNameSpacesByDatasourceName(rulesSourceName);\n\n  const namespaceOptions: Array<ComboboxOption<string>> = useMemo(\n    () =>\n      Array.from(namespaceGroups.keys()).map((namespace) => ({\n        label: namespace,\n        value: namespace,\n      })),\n    [namespaceGroups]\n  );\n\n  const groupOptions: Array<ComboboxOption<string>> = useMemo(\n    () => (namespace && namespaceGroups.get(namespace)?.map((group) => ({ label: group, value: group }))) || [],\n    [namespace, namespaceGroups]\n  );\n\n  useEffect(() => {\n    // Reset namespace/group if datasource changes\n    setValue('namespace', '');\n    setValue('ruleGroup', '');\n  }, [rulesSourceName, setValue]);\n\n  return (\n    <Stack direction=\"row\" gap={2}>\n      <Field\n        htmlFor=\"namespace-picker\"\n        data-testid=\"namespace-picker\"\n        label={t('alerting.import-to-gma.namespace.label', 'Namespace')}\n        description={t('alerting.import-to-gma.namespace.description', 'Type to search for an existing namespace')}\n        error={errors.namespace?.message}\n        invalid={!!errors.namespace?.message}\n      >\n        <Controller\n          render={({ field: { onChange, ref, ...field } }) => (\n            <Combobox\n              {...field}\n              onChange={(value) => {\n                setValue('ruleGroup', ''); //reset if namespace changes\n                onChange(value.value);\n              }}\n              id=\"namespace-picker\"\n              placeholder={t('alerting.namespace-and-group-filter.select-namespace', 'Select namespace')}\n              options={namespaceOptions}\n              width={42}\n              loading={isLoading}\n              disabled={isLoading || !rulesSourceName}\n            />\n          )}\n          name=\"namespace\"\n          control={control}\n        />\n      </Field>\n      <Field\n        htmlFor=\"group-picker\"\n        data-testid=\"group-picker\"\n        label={t('alerting.import-to-gma.group.label', 'Group')}\n        description={t('alerting.import-to-gma.group.description', 'Type to search for an existing group')}\n        error={errors.ruleGroup?.message}\n        invalid={!!errors.ruleGroup?.message}\n      >\n        <Controller\n          render={({ field: { ref, ...field } }) => (\n            <Combobox\n              {...field}\n              options={groupOptions}\n              width={42}\n              onChange={(value) => {\n                setValue('ruleGroup', value.value ?? '');\n              }}\n              id=\"group-picker\"\n              placeholder={t('alerting.namespace-and-group-filter.select-group', 'Select group')}\n              loading={isLoading}\n              disabled={isLoading || !namespace || !rulesSourceName}\n            />\n          )}\n          name=\"ruleGroup\"\n          control={control}\n        />\n      </Field>\n    </Stack>\n  );\n};\n","import { Controller, FormProvider, useForm } from 'react-hook-form';\nimport { useToggle } from 'react-use';\n\nimport { DataSourceInstanceSettings } from '@grafana/data';\nimport {\n  Box,\n  Button,\n  Collapse,\n  Divider,\n  Field,\n  InlineField,\n  InlineSwitch,\n  LinkButton,\n  Spinner,\n  Stack,\n  Text,\n} from '@grafana/ui';\nimport { NestedFolderPicker } from 'app/core/components/NestedFolderPicker/NestedFolderPicker';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { Trans, t } from 'app/core/internationalization';\nimport { DataSourcePicker } from 'app/features/datasources/components/picker/DataSourcePicker';\nimport { useDatasource } from 'app/features/datasources/hooks';\n\nimport { Folder } from '../../types/rule-form';\nimport { DataSourceType } from '../../utils/datasource';\nimport { withPageErrorBoundary } from '../../withPageErrorBoundary';\nimport { AlertingPageWrapper } from '../AlertingPageWrapper';\nimport { CreateNewFolder } from '../create-folder/CreateNewFolder';\nimport { CloudRulesSourcePicker } from '../rule-editor/CloudRulesSourcePicker';\n\nimport { ConfirmConversionModal } from './ConfirmConvertModal';\nimport { NamespaceAndGroupFilter } from './NamespaceAndGroupFilter';\n\nexport interface ImportFormValues {\n  selectedDatasourceUID: string;\n  selectedDatasourceName: string | null;\n  pauseAlertingRules: boolean;\n  pauseRecordingRules: boolean;\n  targetFolder?: Folder;\n  namespace?: string;\n  ruleGroup?: string;\n  targetDatasourceUID?: string;\n}\n\nexport const supportedImportTypes: string[] = [DataSourceType.Prometheus, DataSourceType.Loki];\n\nconst ImportFromDSRules = () => {\n  const [queryParams] = useQueryParams();\n  const queryParamSelectedDatasourceUID: string = String(queryParams.datasourceUid) || '';\n  const defaultDataSourceSettings = useDatasource(queryParamSelectedDatasourceUID);\n  // useDatasource gets the default data source as a fallback, so we need to check if it's the right type\n  // before trying to use it\n  const defaultDataSource = supportedImportTypes.includes(defaultDataSourceSettings?.type || '')\n    ? defaultDataSourceSettings\n    : undefined;\n\n  const formAPI = useForm<ImportFormValues>({\n    defaultValues: {\n      selectedDatasourceUID: defaultDataSource?.uid,\n      selectedDatasourceName: defaultDataSource?.name,\n      pauseAlertingRules: true,\n      pauseRecordingRules: true,\n      targetFolder: undefined,\n      targetDatasourceUID: undefined,\n    },\n  });\n  const {\n    register,\n    handleSubmit,\n    watch,\n    control,\n    setValue,\n    formState: { errors, isSubmitting },\n  } = formAPI;\n\n  const [optionsShowing, toggleOptions] = useToggle(true);\n  const [targetFolder, selectedDatasourceName] = watch(['targetFolder', 'selectedDatasourceName']);\n  const [showConfirmModal, setShowConfirmModal] = useToggle(false);\n\n  const onSubmit = async () => {\n    setShowConfirmModal(true);\n  };\n\n  return (\n    <AlertingPageWrapper\n      navId=\"alert-list\"\n      pageNav={{\n        text: t('alerting.import-to-gma.pageTitle', 'Import alert rules from a data source to Grafana-managed rules'),\n      }}\n    >\n      <Stack gap={2} direction={'column'}>\n        <FormProvider {...formAPI}>\n          <form onSubmit={handleSubmit(onSubmit)}>\n            <Stack direction=\"column\" gap={1}>\n              <Field\n                label={t('alerting.import-to-gma.datasource.label', 'Data source')}\n                invalid={!!errors.selectedDatasourceName}\n                error={errors.selectedDatasourceName?.message}\n                htmlFor=\"datasource-picker\"\n              >\n                <Controller\n                  render={({ field: { onChange, ref, ...field } }) => (\n                    <CloudRulesSourcePicker\n                      {...field}\n                      width={50}\n                      inputId=\"datasource-picker\"\n                      onChange={(ds: DataSourceInstanceSettings) => {\n                        setValue('selectedDatasourceUID', ds.uid);\n                        setValue('selectedDatasourceName', ds.name);\n                        // If we've chosen a Prometheus data source, we can set the recording rules target data source to the same as the source\n                        const targetDataSourceUID = ds.type === DataSourceType.Prometheus ? ds.uid : undefined;\n                        setValue('targetDatasourceUID', targetDataSourceUID);\n                      }}\n                    />\n                  )}\n                  name=\"selectedDatasourceName\"\n                  rules={{\n                    required: {\n                      value: true,\n                      message: t('alerting.import-to-gma.datasource.required-message', 'Please select a data source'),\n                    },\n                  }}\n                  control={control}\n                />\n              </Field>\n\n              <Collapse\n                label={t('alerting.import-to-gma.additional-settings', 'Additional settings')}\n                isOpen={optionsShowing}\n                onToggle={toggleOptions}\n                collapsible={true}\n              >\n                <Box marginLeft={1}>\n                  <Box marginBottom={2}>\n                    <Text variant=\"h5\">\n                      {t('alerting.import-to-gma.import-location-and-filters', 'Import location and filters')}\n                    </Text>\n                  </Box>\n\n                  <Field\n                    label={t('alerting.import-to-gma.target-folder.label', 'Target folder')}\n                    description={t(\n                      'alerting.import-from-dsrules.description-folder-import-rules',\n                      'The folder to import the rules to'\n                    )}\n                    error={errors.selectedDatasourceName?.message}\n                    htmlFor=\"folder-picker\"\n                  >\n                    <Stack gap={2}>\n                      <Controller\n                        render={({ field: { onChange, ref, ...field } }) => (\n                          <Stack width={42}>\n                            <NestedFolderPicker\n                              showRootFolder={false}\n                              invalid={!!errors.targetFolder?.message}\n                              {...field}\n                              value={targetFolder?.uid}\n                              onChange={(uid, title) => {\n                                if (uid && title) {\n                                  setValue('targetFolder', { title, uid });\n                                } else {\n                                  setValue('targetFolder', undefined);\n                                }\n                              }}\n                            />\n                          </Stack>\n                        )}\n                        name=\"targetFolder\"\n                        control={control}\n                      />\n                      <CreateNewFolder\n                        onCreate={(folder) => {\n                          setValue('targetFolder', folder);\n                        }}\n                      />\n                    </Stack>\n                  </Field>\n                  <NamespaceAndGroupFilter rulesSourceName={selectedDatasourceName || undefined} />\n                </Box>\n\n                <Divider />\n\n                <Box>\n                  <Box marginLeft={1} marginBottom={1}>\n                    <Text variant=\"h5\">{t('alerting.import-to-gma.alert-rules', 'Alert rules')}</Text>\n                  </Box>\n\n                  <InlineField\n                    transparent={true}\n                    label={t('alerting.import-to-gma.pause.label', 'Pause imported alerting rules')}\n                    labelWidth={30}\n                    htmlFor=\"pause-alerting-rules\"\n                  >\n                    <InlineSwitch transparent id=\"pause-alerting-rules\" {...register('pauseAlertingRules')} />\n                  </InlineField>\n                </Box>\n\n                <Divider />\n\n                <Box>\n                  <Box marginBottom={1} marginLeft={1}>\n                    <Text variant=\"h5\">{t('alerting.import-to-gma.recording-rules', 'Recording rules')}</Text>\n                  </Box>\n\n                  <InlineField\n                    transparent={true}\n                    label={t('alerting.import-to-gma.pause-recording.label', 'Pause imported recording rules')}\n                    labelWidth={30}\n                    htmlFor=\"pause-recording-rules\"\n                  >\n                    <InlineSwitch transparent id=\"pause-recording-rules\" {...register('pauseRecordingRules')} />\n                  </InlineField>\n\n                  <Box marginLeft={1} width={50}>\n                    <Field\n                      required\n                      id=\"target-data-source\"\n                      label={t('alerting.recording-rules.label-target-data-source', 'Target data source')}\n                      description={t(\n                        'alerting.recording-rules.description-target-data-source',\n                        'The Prometheus data source to store recording rules in'\n                      )}\n                      error={errors.targetDatasourceUID?.message}\n                      invalid={!!errors.targetDatasourceUID?.message}\n                    >\n                      <Controller\n                        render={({ field: { onChange, ref, ...field } }) => (\n                          <DataSourcePicker\n                            {...field}\n                            current={field.value}\n                            noDefault\n                            // Filter with `filter` prop instead of `type` prop to avoid showing the `-- Grafana --` data source\n                            filter={(ds: DataSourceInstanceSettings) => ds.type === 'prometheus'}\n                            onChange={(ds: DataSourceInstanceSettings) => {\n                              setValue('targetDatasourceUID', ds.uid);\n                            }}\n                          />\n                        )}\n                        name=\"targetDatasourceUID\"\n                        control={control}\n                        rules={{\n                          required: { value: true, message: 'Please select a target data source' },\n                        }}\n                      />\n                    </Field>\n                  </Box>\n                </Box>\n              </Collapse>\n            </Stack>\n\n            <Box marginTop={2}>\n              <Stack gap={1}>\n                <Button type=\"submit\" variant=\"primary\" disabled={isSubmitting || !selectedDatasourceName}>\n                  <Stack direction=\"row\" gap={2} alignItems=\"center\">\n                    {isSubmitting && <Spinner inline={true} />}\n                    <Trans i18nKey=\"alerting.import-to-gma.action-button\">Import</Trans>\n                  </Stack>\n                </Button>\n\n                <LinkButton variant=\"secondary\" href=\"/alerting/list\">\n                  <Trans i18nKey=\"common.cancel\">Cancel</Trans>\n                </LinkButton>\n              </Stack>\n            </Box>\n            <ConfirmConversionModal isOpen={showConfirmModal} onDismiss={() => setShowConfirmModal(false)} />\n          </form>\n        </FormProvider>\n      </Stack>\n    </AlertingPageWrapper>\n  );\n};\n\nexport default withPageErrorBoundary(ImportFromDSRules);\n","import { useCallback } from 'react';\n\nimport { DataSourceInstanceSettings } from '@grafana/data';\nimport { DataSourcePicker, DataSourcePickerProps } from 'app/features/datasources/components/picker/DataSourcePicker';\n\nimport { useRulesSourcesWithRuler } from '../../hooks/useRuleSourcesWithRuler';\n\ninterface Props extends DataSourcePickerProps {\n  disabled?: boolean;\n  onChange: (ds: DataSourceInstanceSettings) => void;\n  value: string | null;\n  onBlur?: () => void;\n  name?: string;\n}\n\nexport function CloudRulesSourcePicker({ value, disabled, ...props }: Props): JSX.Element {\n  const { rulesSourcesWithRuler: dataSourcesWithRuler, isLoading } = useRulesSourcesWithRuler();\n\n  const dataSourceFilter = useCallback(\n    (ds: DataSourceInstanceSettings): boolean => {\n      return dataSourcesWithRuler.some(({ uid }) => uid === ds.uid);\n    },\n    [dataSourcesWithRuler]\n  );\n\n  return (\n    <DataSourcePicker\n      disabled={isLoading || disabled}\n      noDefault\n      alerting\n      filter={dataSourceFilter}\n      current={value}\n      {...props}\n    />\n  );\n}\n","import { skipToken } from '@reduxjs/toolkit/query';\nimport { useEffect, useMemo } from 'react';\n\nimport { RuleNamespace } from 'app/types/unified-alerting';\nimport { RulerRulesConfigDTO } from 'app/types/unified-alerting-dto';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\nimport { featureDiscoveryApi } from '../../api/featureDiscoveryApi';\nimport { shouldUsePrometheusRulesPrimary } from '../../featureToggles';\n\nconst { usePrometheusRuleNamespacesQuery, useLazyRulerRulesQuery, useRulerRulesQuery } = alertRuleApi;\nconst { useDiscoverDsFeaturesQuery } = featureDiscoveryApi;\n\nconst prometheusRulesPrimary = shouldUsePrometheusRulesPrimary();\nconst emptyRulerConfig: RulerRulesConfigDTO = {};\n\nexport function useGetLabelsFromDataSourceName(rulesSourceName: string) {\n  const { data: features, isLoading: isFeaturesLoading } = useDiscoverDsFeaturesQuery({ rulesSourceName });\n\n  // emptyRulerConfig is used to prevent from triggering  labels' useMemo all the time\n  // rulerRules = {} creates a new object and triggers useMemo to recalculate labels\n  const [fetchRulerRules, { data: rulerRules = emptyRulerConfig, isLoading: isRulerRulesLoading }] =\n    useLazyRulerRulesQuery();\n\n  const { data: promNamespaces = [], isLoading: isPrometheusRulesLoading } = usePrometheusRuleNamespacesQuery(\n    { ruleSourceName: rulesSourceName },\n    { skip: !prometheusRulesPrimary }\n  );\n\n  useEffect(() => {\n    if (features?.rulerConfig && !prometheusRulesPrimary) {\n      fetchRulerRules({ rulerConfig: features.rulerConfig });\n    }\n  }, [features?.rulerConfig, fetchRulerRules]);\n\n  const labels = useMemo(() => {\n    if (isPrometheusRulesLoading || isRulerRulesLoading) {\n      return new Map<string, Set<string>>();\n    }\n\n    if (prometheusRulesPrimary) {\n      return promNamespacesToLabels(promNamespaces);\n    }\n\n    return rulerRulesToLabels(rulerRules);\n  }, [promNamespaces, rulerRules, isPrometheusRulesLoading, isRulerRulesLoading]);\n\n  return { labels, isLoading: isPrometheusRulesLoading || isRulerRulesLoading || isFeaturesLoading };\n}\n\nexport function useGetNameSpacesByDatasourceName(rulesSourceName?: string) {\n  const { data: features, isLoading: isFeaturesLoading } = useDiscoverDsFeaturesQuery(\n    rulesSourceName ? { rulesSourceName } : skipToken,\n    { skip: !rulesSourceName }\n  );\n\n  // emptyRulerConfig is used to prevent from triggering  labels' useMemo all the time\n  // rulerRules = {} creates a new object and triggers useMemo to recalculate labels\n  const [fetchRulerRules, { data: rulerRules = emptyRulerConfig, isLoading: isRulerRulesLoading }] =\n    useLazyRulerRulesQuery();\n\n  const { data: promNamespaces = [], isLoading: isPrometheusRulesLoading } = usePrometheusRuleNamespacesQuery(\n    rulesSourceName && prometheusRulesPrimary ? { ruleSourceName: rulesSourceName } : skipToken\n  );\n\n  useEffect(() => {\n    if (features?.rulerConfig && !prometheusRulesPrimary) {\n      fetchRulerRules({ rulerConfig: features.rulerConfig });\n    }\n  }, [features?.rulerConfig, fetchRulerRules]);\n\n  const namespaceGroups = useMemo(() => {\n    if (isPrometheusRulesLoading || isRulerRulesLoading) {\n      return new Map<string, string[]>();\n    }\n\n    if (prometheusRulesPrimary) {\n      return promNamespacesToNamespaceGroups(promNamespaces);\n    }\n\n    return rulerRulesToNamespaceGroups(rulerRules);\n  }, [promNamespaces, rulerRules, isPrometheusRulesLoading, isRulerRulesLoading]);\n\n  return {\n    namespaceGroups,\n    isLoading: isPrometheusRulesLoading || isRulerRulesLoading || isFeaturesLoading,\n    promNamespaces,\n  };\n}\n\nexport function useGetRulerRules(\n  /** Rules source name to fetch namespaces from */\n  rulesSourceName?: string\n) {\n  const { data: features, isLoading: isFeaturesLoading } = useDiscoverDsFeaturesQuery(\n    rulesSourceName ? { rulesSourceName } : skipToken\n  );\n\n  const { data: rulerRules = emptyRulerConfig, isLoading: isRulerRulesLoading } = useRulerRulesQuery(\n    features?.rulerConfig ? { rulerConfig: features.rulerConfig } : skipToken\n  );\n\n  return {\n    isLoading: isRulerRulesLoading || isFeaturesLoading,\n    rulerRules,\n  };\n}\n\nfunction promNamespacesToNamespaceGroups(promNamespaces: RuleNamespace[]) {\n  const groups = new Map<string, string[]>();\n  promNamespaces.forEach((namespace) => {\n    groups.set(\n      namespace.name,\n      namespace.groups.map((group) => group.name)\n    );\n  });\n  return groups;\n}\n\nexport function rulerRulesToNamespaceGroups(rulerConfig: RulerRulesConfigDTO) {\n  const result = new Map<string, string[]>();\n  Object.entries(rulerConfig).forEach(([namespace, groups]) => {\n    result.set(\n      namespace,\n      groups.map((group) => group.name)\n    );\n  });\n  return result;\n}\n\nfunction promNamespacesToLabels(promNamespace: RuleNamespace[]) {\n  const rules = promNamespace.flatMap((namespace) => namespace.groups).flatMap((group) => group.rules);\n\n  return rules.reduce((result, rule) => {\n    if (!rule.labels) {\n      return result;\n    }\n\n    Object.entries(rule.labels).forEach(([labelKey, labelValue]) => {\n      if (!labelKey || !labelValue) {\n        return;\n      }\n\n      const labelEntry = result.get(labelKey);\n      if (labelEntry) {\n        labelEntry.add(labelValue);\n      } else {\n        result.set(labelKey, new Set([labelValue]));\n      }\n    });\n    return result;\n  }, new Map<string, Set<string>>());\n}\n\nfunction rulerRulesToLabels(rulerConfig: RulerRulesConfigDTO) {\n  const result = new Map<string, Set<string>>();\n\n  const rules = Object.entries(rulerConfig)\n    .flatMap(([_, groups]) => groups)\n    .flatMap((group) => group.rules);\n\n  return rules.reduce((result, rule) => {\n    if (!rule.labels) {\n      return result;\n    }\n\n    Object.entries(rule.labels).forEach(([labelKey, labelValue]) => {\n      if (!labelKey || !labelValue) {\n        return;\n      }\n\n      const labelEntry = result.get(labelKey);\n      if (labelEntry) {\n        labelEntry.add(labelValue);\n      } else {\n        result.set(labelKey, new Set([labelValue]));\n      }\n    });\n    return result;\n  }, result);\n}\n","import { useEffect, useState } from 'react';\n\nimport { DataSourceInstanceSettings } from '@grafana/data';\n\nimport { featureDiscoveryApi } from '../api/featureDiscoveryApi';\nimport { getRulesDataSources } from '../utils/datasource';\n\nconst { useLazyDiscoverDsFeaturesQuery } = featureDiscoveryApi;\n\nexport function useRulesSourcesWithRuler(): {\n  rulesSourcesWithRuler: DataSourceInstanceSettings[];\n  isLoading: boolean;\n} {\n  const [rulesSourcesWithRuler, setRulesSourcesWithRuler] = useState<DataSourceInstanceSettings[]>([]);\n  const [discoverDsFeatures, { isLoading }] = useLazyDiscoverDsFeaturesQuery();\n\n  useEffect(() => {\n    const dataSources = getRulesDataSources();\n    dataSources.forEach(async (ds) => {\n      const { data: dsFeatures } = await discoverDsFeatures({ uid: ds.uid }, true);\n      if (dsFeatures?.rulerConfig) {\n        setRulesSourcesWithRuler((prev) => [...prev, ds]);\n      }\n    });\n  }, [discoverDsFeatures]);\n\n  return { rulesSourcesWithRuler, isLoading };\n}\n"],"names":["CreateNewFolder","onCreate","isCreatingFolder","setIsCreatingFolder","handleCreate","folder","FolderCreationModal","onClose","styles","getStyles","notifyApp","title","setTitle","createFolder","onSubmit","data","error","e","theme","convertToGMAApi","alertingApi","build","payload","targetFolderUID","pauseRecordingRules","pauseAlerts","dataSourceUID","targetDatasourceUID","getNestedFoldersIn","uid","lastValueFrom","useGetNestedFolders","folderUID","skip","nestedFolders","setNestedFolders","nestedFoldersIn","useGetRulesThatMightBeOverwritten","targetFolder","rulesToBeImported","nestedFoldersInTargetFolder","skipFiltering","useFilterRulesThatMightBeOverwritten","useGetRulesToBeImported","selectedDatasourceName","dataSourceToFetch","isloadingCloudRules","targetNestedFolders","fetchRulesByFolderUID","alertRuleApi","rulesThatMightBeOverwritten","setRulesThatMightBeOverwritten","targetNestedFoldersFiltered","results","rules","folderWithParentTitle","AlertSomeRulesSkipped","Alert","Text","ConfirmConversionModal","isOpen","onDismiss","watch","selectedDatasourceUID","pauseAlertingRules","namespace","ruleGroup","rulerRulesToPayload","someRulesAreSkipped","filterRulerRulesConfig","convert","Modal","onConvertConfirm","isRootFolder","ruleListUrl","Stack","confirmText","ConfirmModal","TargetFolderNotEmptyWarning","RulesPreview","rulerRulesConfig","groupName","filteredConfig","ns","groups","filteredGroups","group","filteredRules","rule","CodeEditor","targetFolderRules","showTargetRules","toggleShowTargetRules","useToggle","Collapse","NamespaceAndGroupFilter","rulesSourceName","control","errors","setValue","namespaceGroups","isLoading","namespaceOptions","groupOptions","Field","onChange","ref","field","Combobox","value","supportedImportTypes","ImportFromDSRules","queryParams","useQueryParams","queryParamSelectedDatasourceUID","defaultDataSourceSettings","defaultDataSource","formAPI","register","handleSubmit","isSubmitting","optionsShowing","toggleOptions","showConfirmModal","setShowConfirmModal","AlertingPageWrapper","CloudRulesSourcePicker","ds","targetDataSourceUID","Box","NestedFolderPicker","Divider","InlineField","DataSourcePicker","Button","Spinner","withPageErrorBoundary","disabled","props","dataSourcesWithRuler","dataSourceFilter","usePrometheusRuleNamespacesQuery","useLazyRulerRulesQuery","useRulerRulesQuery","useDiscoverDsFeaturesQuery","prometheusRulesPrimary","emptyRulerConfig","useGetLabelsFromDataSourceName","features","isFeaturesLoading","fetchRulerRules","rulerRules","isRulerRulesLoading","promNamespaces","isPrometheusRulesLoading","promNamespacesToLabels","rulerRulesToLabels","useGetNameSpacesByDatasourceName","promNamespacesToNamespaceGroups","rulerRulesToNamespaceGroups","useGetRulerRules","rulerConfig","result","promNamespace","labelKey","labelValue","labelEntry","_","useLazyDiscoverDsFeaturesQuery","useRulesSourcesWithRuler","rulesSourcesWithRuler","setRulesSourcesWithRuler","discoverDsFeatures","dsFeatures","prev"],"sourceRoot":""}