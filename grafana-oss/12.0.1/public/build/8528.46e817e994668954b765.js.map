{"version":3,"file":"8528.46e817e994668954b765.js","mappings":"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","sources":["webpack://grafana/./public/app/features/dashboard-scene/saving/DashboardPrompt.tsx","webpack://grafana/./public/app/features/dashboard-scene/saving/provisioned/DashboardPreviewBanner.tsx","webpack://grafana/./public/app/features/dashboard-scene/pages/DashboardScenePage.tsx","webpack://grafana/./public/app/features/dashboard/containers/DashboardPageError.tsx","webpack://grafana/./public/app/core/navigation/kiosk.ts","webpack://grafana/./public/app/features/library-panels/components/SaveLibraryPanelModal/SaveLibraryPanelModal.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/state/actions.ts","webpack://grafana/./public/app/features/dashboard/components/SaveDashboard/UnsavedChangesModal.tsx","webpack://grafana/./public/app/features/dashboard/components/DashboardPrompt/DashboardPrompt.tsx","webpack://grafana/./public/app/features/variables/inspect/VariablesUnknownButton.tsx","webpack://grafana/./public/app/features/variables/inspect/VariablesUnknownTable.tsx","webpack://grafana/./public/app/features/variables/editor/ConfirmDeleteModal.tsx","webpack://grafana/./public/app/features/variables/editor/VariableTypeSelect.tsx","webpack://grafana/./public/app/features/variables/editor/actions.ts","webpack://grafana/./public/app/features/variables/editor/VariableEditorEditor.tsx","webpack://grafana/./public/app/features/variables/inspect/VariablesDependenciesButton.tsx","webpack://grafana/./public/app/features/variables/inspect/VariableUsagesButton.tsx","webpack://grafana/./public/app/features/variables/editor/VariableEditorListRow.tsx","webpack://grafana/./public/app/features/variables/editor/VariableEditorList.tsx","webpack://grafana/./public/app/features/variables/editor/VariableEditorContainer.tsx","webpack://grafana/./public/app/features/dashboard/components/DashboardPermissions/AccessControlDashboardPermissions.tsx","webpack://grafana/./public/app/features/dashboard/components/AnnotationSettings/AnnotationSettingsEdit.tsx","webpack://grafana/./public/app/features/dashboard/components/AnnotationSettings/AnnotationSettingsList.tsx","webpack://grafana/./public/app/features/dashboard/components/DashboardSettings/AnnotationsSettings.tsx","webpack://grafana/./public/app/features/dashboard/components/DeleteDashboard/DeleteDashboardModal.tsx","webpack://grafana/./public/app/features/dashboard/components/DeleteDashboard/DeleteDashboardButton.tsx","webpack://grafana/./public/app/features/dashboard/components/DashboardSettings/GeneralSettings.tsx","webpack://grafana/./public/app/features/dashboard/components/DashboardSettings/JsonEditorSettings.tsx","webpack://grafana/./public/app/features/dashboard/components/LinksSettings/LinkSettingsEdit.tsx","webpack://grafana/./public/app/features/dashboard/components/LinksSettings/LinkSettingsList.tsx","webpack://grafana/./public/app/features/dashboard/components/DashboardSettings/LinksSettings.tsx","webpack://grafana/./public/app/features/dashboard/components/VersionHistory/useDashboardRestore.tsx","webpack://grafana/./public/app/features/dashboard/components/VersionHistory/RevertDashboardModal.tsx","webpack://grafana/./public/app/features/dashboard/components/VersionHistory/VersionHistoryComparison.tsx","webpack://grafana/./public/app/features/dashboard/components/VersionHistory/VersionHistoryTable.tsx","webpack://grafana/./public/app/features/dashboard/components/DashboardSettings/VersionsSettings.tsx","webpack://grafana/./public/app/features/dashboard/components/DashboardSettings/DashboardSettings.tsx","webpack://grafana/./public/app/features/panel/state/selectors.ts","webpack://grafana/./public/app/features/dashboard/components/HelpWizard/SupportSnapshotService.ts","webpack://grafana/./public/app/features/dashboard/components/HelpWizard/HelpWizard.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/usePanelLatestData.ts","webpack://grafana/./public/app/features/inspector/InspectMetadataTab.tsx","webpack://grafana/./public/app/features/dashboard/components/Inspector/InspectContent.tsx","webpack://grafana/./public/app/features/dashboard/components/Inspector/PanelInspector.tsx","webpack://grafana/./public/app/features/variables/pickers/PickerRenderer.tsx","webpack://grafana/./public/app/features/dashboard/components/SubMenu/SubMenuItems.tsx","webpack://grafana/./public/app/features/dashboard/state/selectors.ts","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/VisualizationButton.tsx","webpack://grafana/./public/app/features/library-panels/components/ChangeLibraryPanelModal/ChangeLibraryPanelModal.tsx","webpack://grafana/./public/app/features/library-panels/components/PanelLibraryOptionsGroup/PanelLibraryOptionsGroup.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/VisualizationSelectPane.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/OptionsPane.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/PanelHeaderCorner.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/PanelEditorTableView.tsx","webpack://grafana/./public/app/features/alerting/unified/PanelAlertTab.tsx","webpack://grafana/./public/app/features/alerting/unified/components/panel-alerts-tab/NewRuleFromPanelButton.tsx","webpack://grafana/./public/app/features/alerting/unified/PanelAlertTabContent.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/PanelEditorQueries.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/PanelEditorTabs.tsx","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/state/selectors.ts","webpack://grafana/./public/app/features/dashboard/components/PanelEditor/PanelEditor.tsx","webpack://grafana/./public/app/features/dashboard/components/SubMenu/AnnotationPicker.tsx","webpack://grafana/./public/app/features/dashboard/components/SubMenu/Annotations.tsx","webpack://grafana/./public/app/features/dashboard/components/SubMenu/DashboardLinks.tsx","webpack://grafana/./public/app/features/dashboard/components/SubMenu/SubMenu.tsx","webpack://grafana/./public/app/features/dashboard/containers/DashboardPage.tsx","webpack://grafana/./public/app/features/dashboard/containers/DashboardPageProxy.tsx","webpack://grafana/./public/app/features/dashboard/state/actions.ts","webpack://grafana/./public/app/features/provisioning/hooks/usePullRequestParam.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport * as H from 'history';\nimport { memo, useContext, useEffect, useMemo } from 'react';\n\nimport { locationService } from '@grafana/runtime';\nimport { ModalsContext, Modal, Button, useStyles2 } from '@grafana/ui';\nimport { Prompt } from 'app/core/components/FormPrompt/Prompt';\nimport { t, Trans } from 'app/core/internationalization';\nimport { contextSrv } from 'app/core/services/context_srv';\n\nimport { SaveLibraryVizPanelModal } from '../panel-edit/SaveLibraryVizPanelModal';\nimport { DashboardScene } from '../scene/DashboardScene';\nimport { getLibraryPanelBehavior, isLibraryPanel } from '../utils/utils';\n\ninterface DashboardPromptProps {\n  dashboard: DashboardScene;\n}\n\nexport const DashboardPrompt = memo(({ dashboard }: DashboardPromptProps) => {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const originalPath = useMemo(() => locationService.getLocation().pathname, [dashboard]);\n  const { showModal, hideModal } = useContext(ModalsContext);\n\n  useEffect(() => {\n    const handleUnload = (event: BeforeUnloadEvent) => {\n      if (ignoreChanges(dashboard)) {\n        return;\n      }\n\n      if (dashboard.state.isDirty) {\n        event.preventDefault();\n        // No browser actually displays this message anymore.\n        // But Chrome requires it to be defined else the popup won't show.\n        event.returnValue = '';\n      }\n    };\n\n    window.addEventListener('beforeunload', handleUnload);\n    return () => window.removeEventListener('beforeunload', handleUnload);\n  }, [dashboard]);\n\n  const onHistoryBlock = (location: H.Location) => {\n    const panelEditor = dashboard.state.editPanel;\n    const vizPanel = panelEditor?.getPanel();\n    const search = new URLSearchParams(location.search);\n\n    // Are we leaving panel edit & library panel?\n    if (panelEditor && vizPanel && isLibraryPanel(vizPanel) && panelEditor.state.isDirty && !search.has('editPanel')) {\n      const libPanelBehavior = getLibraryPanelBehavior(vizPanel);\n\n      showModal(SaveLibraryVizPanelModal, {\n        dashboard,\n        isUnsavedPrompt: true,\n        libraryPanel: libPanelBehavior!,\n        onConfirm: () => {\n          panelEditor.onConfirmSaveLibraryPanel();\n          hideModal();\n          moveToBlockedLocationAfterReactStateUpdate(location);\n        },\n        onDiscard: () => {\n          panelEditor.onDiscard();\n          hideModal();\n          moveToBlockedLocationAfterReactStateUpdate(location);\n        },\n        onDismiss: hideModal,\n      });\n      return false;\n    }\n\n    // Are we still on the same dashboard?\n    if (originalPath === location.pathname) {\n      return true;\n    }\n\n    if (ignoreChanges(dashboard)) {\n      return true;\n    }\n\n    if (!dashboard.state.isDirty) {\n      return true;\n    }\n\n    showModal(UnsavedChangesModal, {\n      dashboard,\n      onSaveDashboardClick: () => {\n        hideModal();\n        dashboard.openSaveDrawer({\n          onSaveSuccess: () => {\n            moveToBlockedLocationAfterReactStateUpdate(location);\n          },\n        });\n      },\n\n      onDiscard: () => {\n        dashboard.exitEditMode({ skipConfirm: true });\n        hideModal();\n        moveToBlockedLocationAfterReactStateUpdate(location);\n      },\n      onDismiss: hideModal,\n    });\n\n    return false;\n  };\n\n  return <Prompt when={true} message={onHistoryBlock} />;\n});\n\nDashboardPrompt.displayName = 'DashboardPrompt';\n\nfunction moveToBlockedLocationAfterReactStateUpdate(location?: H.Location | null) {\n  if (location) {\n    setTimeout(() => locationService.push(location), 10);\n  }\n}\n\ninterface UnsavedChangesModalProps {\n  onDiscard: () => void;\n  onDismiss: () => void;\n  onSaveDashboardClick?: () => void;\n}\n\nexport const UnsavedChangesModal = ({ onDiscard, onDismiss, onSaveDashboardClick }: UnsavedChangesModalProps) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Modal\n      isOpen={true}\n      title={t('dashboard-scene.unsaved-changes-modal.title-unsaved-changes', 'Unsaved changes')}\n      onDismiss={onDismiss}\n      icon=\"exclamation-triangle\"\n      className={styles.modal}\n    >\n      <h5>\n        <Trans i18nKey=\"dashboard-scene.unsaved-changes-modal.changes\">Do you want to save your changes?</Trans>\n      </h5>\n      <Modal.ButtonRow>\n        <Button variant=\"secondary\" onClick={onDismiss} fill=\"outline\">\n          <Trans i18nKey=\"dashboard-scene.unsaved-changes-modal.cancel\">Cancel</Trans>\n        </Button>\n        <Button variant=\"destructive\" onClick={onDiscard}>\n          <Trans i18nKey=\"dashboard-scene.unsaved-changes-modal.discard\">Discard</Trans>\n        </Button>\n        <Button onClick={onSaveDashboardClick}>\n          <Trans i18nKey=\"dashboard-scene.unsaved-changes-modal.save-dashboard\">Save dashboard</Trans>\n        </Button>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n\nconst getStyles = () => ({\n  modal: css({\n    width: '500px',\n  }),\n});\n\n/**\n * For some dashboards and users changes should be ignored *\n */\nexport function ignoreChanges(scene: DashboardScene | null) {\n  const original = scene?.getInitialSaveModel();\n\n  if (!original) {\n    return true;\n  }\n\n  // Ignore changes if original is unsaved\n  if (scene?.state.meta.version === 0) {\n    return true;\n  }\n\n  // Ignore changes if the user has been signed out\n  if (!contextSrv.isSignedIn) {\n    return true;\n  }\n\n  if (!scene) {\n    return true;\n  }\n\n  const { canSave, fromScript, fromFile } = scene.state.meta;\n  if (!contextSrv.isEditor && !canSave) {\n    return true;\n  }\n\n  return !canSave || fromScript || fromFile;\n}\n","import { textUtil } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Alert, Icon, Stack } from '@grafana/ui';\nimport { useGetRepositoryFilesWithPathQuery } from 'app/api/clients/provisioning';\nimport { t, Trans } from 'app/core/internationalization';\nimport { DashboardPageRouteSearchParams } from 'app/features/dashboard/containers/types';\nimport { usePullRequestParam } from 'app/features/provisioning/hooks/usePullRequestParam';\nimport { DashboardRoutes } from 'app/types';\n\ninterface CommonBannerProps {\n  queryParams: DashboardPageRouteSearchParams;\n  path?: string;\n  slug?: string;\n}\n\ninterface DashboardPreviewBannerProps extends CommonBannerProps {\n  route?: string;\n}\n\ninterface DashboardPreviewBannerContentProps extends Required<Omit<CommonBannerProps, 'route'>> {}\n\nconst commonAlertProps = {\n  severity: 'info' as const,\n  style: { flex: 0 } as const,\n};\n\nfunction DashboardPreviewBannerContent({ queryParams, slug, path }: DashboardPreviewBannerContentProps) {\n  const prParam = usePullRequestParam();\n  const file = useGetRepositoryFilesWithPathQuery({ name: slug, path, ref: queryParams.ref });\n\n  if (file.data?.errors) {\n    return (\n      <Alert\n        title={t('dashboard-scene.dashboard-preview-banner.title-error-loading-dashboard', 'Error loading dashboard')}\n        severity=\"error\"\n        style={{ flex: 0 }}\n      >\n        {file.data.errors.map((error, index) => (\n          <div key={index}>{error}</div>\n        ))}\n      </Alert>\n    );\n  }\n\n  // This page was loaded with a `pull_request_url` in the URL\n  if (prParam?.length) {\n    return (\n      <Alert\n        {...commonAlertProps}\n        title={t(\n          'dashboard-scene.dashboard-preview-banner.title-dashboard-loaded-request-git-hub',\n          'This dashboard is loaded from a pull request in GitHub.'\n        )}\n        buttonContent={\n          <Stack alignItems=\"center\">\n            <Trans i18nKey=\"dashboard-scene.dashboard-preview-banner.view-pull-request-in-git-hub\">\n              View pull request in GitHub\n            </Trans>\n            <Icon name=\"external-link-alt\" />\n          </Stack>\n        }\n        onRemove={() => window.open(textUtil.sanitizeUrl(prParam), '_blank')}\n      >\n        <Trans i18nKey=\"dashboard-scene.dashboard-preview-banner.value-not-saved\">\n          The value is not yet saved in the Grafana database\n        </Trans>\n      </Alert>\n    );\n  }\n\n  // Check if this is a GitHub link\n  const githubURL = file.data?.urls?.newPullRequestURL ?? file.data?.urls?.compareURL;\n  if (githubURL) {\n    return (\n      <Alert\n        {...commonAlertProps}\n        title={t(\n          'dashboard-scene.dashboard-preview-banner.title-dashboard-loaded-branch-git-hub',\n          'This dashboard is loaded from a branch in GitHub.'\n        )}\n        buttonContent={\n          <Stack alignItems=\"center\">\n            <Trans i18nKey=\"dashboard-scene.dashboard-preview-banner.open-pull-request-in-git-hub\">\n              Open pull request in GitHub\n            </Trans>\n            <Icon name=\"external-link-alt\" />\n          </Stack>\n        }\n        onRemove={() => window.open(textUtil.sanitizeUrl(githubURL), '_blank')}\n      >\n        <Trans i18nKey=\"dashboard-scene.dashboard-preview-banner.not-saved\">\n          The value is not yet saved in the Grafana database\n        </Trans>\n      </Alert>\n    );\n  }\n\n  return (\n    <Alert\n      {...commonAlertProps}\n      title={t(\n        'dashboard-scene.dashboard-preview-banner.title-dashboard-loaded-external-repository',\n        'This dashboard is loaded from an external repository'\n      )}\n    >\n      <Trans i18nKey=\"dashboard-scene.dashboard-preview-banner.not-yet-saved\">\n        The value is not saved in the Grafana database\n      </Trans>\n    </Alert>\n  );\n}\n\nexport function DashboardPreviewBanner({ queryParams, route, slug, path }: DashboardPreviewBannerProps) {\n  const provisioningEnabled = config.featureToggles.provisioning;\n  if (!provisioningEnabled || 'kiosk' in queryParams || !path || route !== DashboardRoutes.Provisioning || !slug) {\n    return null;\n  }\n\n  return <DashboardPreviewBannerContent queryParams={queryParams} slug={slug} path={path} />;\n}\n","import { useEffect, useRef } from 'react';\nimport { Params, useParams } from 'react-router-dom-v5-compat';\nimport { usePrevious } from 'react-use';\n\nimport { PageLayoutType } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { UrlSyncContextProvider } from '@grafana/scenes';\nimport { Box } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { DashboardPageError } from 'app/features/dashboard/containers/DashboardPageError';\nimport { DashboardPageRouteParams, DashboardPageRouteSearchParams } from 'app/features/dashboard/containers/types';\nimport { DashboardRoutes } from 'app/types';\n\nimport { DashboardPrompt } from '../saving/DashboardPrompt';\nimport { DashboardPreviewBanner } from '../saving/provisioned/DashboardPreviewBanner';\n\nimport { getDashboardScenePageStateManager } from './DashboardScenePageStateManager';\n\nexport interface Props\n  extends Omit<GrafanaRouteComponentProps<DashboardPageRouteParams, DashboardPageRouteSearchParams>, 'match'> {}\n\nexport function DashboardScenePage({ route, queryParams, location }: Props) {\n  const params = useParams();\n  const { type, slug, uid } = params;\n  // User by /admin/provisioning/:slug/dashboard/preview/* to load dashboards based on their file path in a remote repository\n  const path = params['*'];\n  const prevMatch = usePrevious({ params });\n  const stateManager = getDashboardScenePageStateManager();\n  const { dashboard, isLoading, loadError } = stateManager.useState();\n  // After scene migration is complete and we get rid of old dashboard we should refactor dashboardWatcher so this route reload is not need\n  const routeReloadCounter = (location.state as any)?.routeReloadCounter;\n  const prevParams = useRef<Params<string>>(params);\n\n  useEffect(() => {\n    if (route.routeName === DashboardRoutes.Normal && type === 'snapshot') {\n      stateManager.loadSnapshot(slug!);\n    } else {\n      stateManager.loadDashboard({\n        uid: (route.routeName === DashboardRoutes.Provisioning ? path : uid) ?? '',\n        type,\n        slug,\n        route: route.routeName as DashboardRoutes,\n        urlFolderUid: queryParams.folderUid,\n      });\n    }\n\n    return () => {\n      stateManager.clearState();\n    };\n\n    // removing slug and path (which has slug in it) from dependencies to prevent unmount when data links reference\n    //  the same dashboard with no slug in url\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [stateManager, uid, route.routeName, queryParams.folderUid, routeReloadCounter, type]);\n\n  useEffect(() => {\n    // This use effect corrects URL without refresh when navigating to the same dashboard\n    //  using data link that has no slug in url\n    if (route.routeName === DashboardRoutes.Normal) {\n      // correct URL only when there are no new slug\n      // if slug is defined and incorrect it will be corrected in stateManager\n      if (uid === prevParams.current.uid && prevParams.current.slug && !slug) {\n        const correctedUrl = `/d/${uid}/${prevParams.current.slug}`;\n        locationService.replace({\n          ...locationService.getLocation(),\n          pathname: correctedUrl,\n        });\n      }\n    }\n\n    return () => {\n      prevParams.current = { uid, slug: !slug ? prevParams.current.slug : slug };\n    };\n  }, [route, slug, type, uid]);\n\n  if (!dashboard) {\n    let errorElement;\n    if (loadError) {\n      errorElement = <DashboardPageError error={loadError} type={type} />;\n    }\n\n    return (\n      errorElement || (\n        <Page navId=\"dashboards/browse\" layout={PageLayoutType.Canvas} data-testid={'dashboard-scene-page'}>\n          <Box paddingY={4} display=\"flex\" direction=\"column\" alignItems=\"center\">\n            {isLoading && <PageLoader />}\n          </Box>\n        </Page>\n      )\n    );\n  }\n\n  // Do not render anything when transitioning from one dashboard to another\n  // A bit tricky for transition to or from Home dashboard that does not have a uid in the url (but could have it in the dashboard model)\n  // if prevMatch is undefined we are going from normal route to home route or vice versa\n  if (type !== 'snapshot' && (!prevMatch || uid !== prevMatch?.params.uid)) {\n    console.log('skipping rendering');\n    return null;\n  }\n\n  return (\n    <UrlSyncContextProvider scene={dashboard} updateUrlOnInit={true} createBrowserHistorySteps={true}>\n      <DashboardPreviewBanner queryParams={queryParams} route={route.routeName} slug={slug} path={path} />\n      <dashboard.Component model={dashboard} key={dashboard.state.key} />\n      <DashboardPrompt dashboard={dashboard} />\n    </UrlSyncContextProvider>\n  );\n}\n\nexport default DashboardScenePage;\n","import { PageLayoutType } from '@grafana/data';\nimport { Alert, Box } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { EntityNotFound } from 'app/core/components/PageNotFound/EntityNotFound';\nimport { t } from 'app/core/internationalization';\nimport { getMessageFromError, getStatusFromError } from 'app/core/utils/errors';\n\nexport function DashboardPageError({ error, type }: { error: unknown; type?: string }) {\n  const status = getStatusFromError(error);\n  const message = getMessageFromError(error);\n  const entity = type === 'snapshot' ? 'Snapshot' : 'Dashboard';\n\n  return (\n    <Page navId=\"dashboards/browse\" layout={PageLayoutType.Canvas} pageNav={{ text: 'Not found' }}>\n      <Box paddingY={4} display=\"flex\" direction=\"column\" alignItems=\"center\">\n        {status === 404 ? (\n          <EntityNotFound entity={entity} />\n        ) : (\n          <Alert\n            title={t('dashboard.errors.failed-to-load', 'Failed to load dashboard')}\n            severity=\"error\"\n            data-testid=\"dashboard-page-error\"\n          >\n            {message}\n          </Alert>\n        )}\n      </Box>\n    </Page>\n  );\n}\n","import { UrlQueryMap } from '@grafana/data';\n\nimport { KioskMode } from '../../types';\n\n// TODO Remove after topnav feature toggle is permanent and old NavBar is removed\nexport function getKioskMode(queryParams: UrlQueryMap): KioskMode | null {\n  switch (queryParams.kiosk) {\n    //  legacy support\n    case '1':\n    case true:\n      return KioskMode.Full;\n    default:\n      return null;\n  }\n}\n","import { useCallback, useState } from 'react';\nimport { useAsync, useDebounce } from 'react-use';\n\nimport { Button, Icon, Input, Modal, useStyles2 } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { getConnectedDashboards } from '../../state/api';\nimport { getModalStyles } from '../../styles';\nimport { PanelModelWithLibraryPanel } from '../../types';\nimport { usePanelSave } from '../../utils/usePanelSave';\n\ninterface Props {\n  panel: PanelModelWithLibraryPanel;\n  folderUid: string;\n  isUnsavedPrompt?: boolean;\n  onConfirm: () => void;\n  onDismiss: () => void;\n  onDiscard: () => void;\n}\n\nexport const SaveLibraryPanelModal = ({\n  panel,\n  folderUid,\n  isUnsavedPrompt,\n  onDismiss,\n  onConfirm,\n  onDiscard,\n}: Props) => {\n  const [searchString, setSearchString] = useState('');\n  const dashState = useAsync(async () => {\n    const searchHits = await getConnectedDashboards(panel.libraryPanel.uid);\n    if (searchHits.length > 0) {\n      return searchHits.map((dash) => dash.title);\n    }\n\n    return [];\n  }, [panel.libraryPanel.uid]);\n\n  const [filteredDashboards, setFilteredDashboards] = useState<string[]>([]);\n  useDebounce(\n    () => {\n      if (!dashState.value) {\n        return setFilteredDashboards([]);\n      }\n\n      return setFilteredDashboards(\n        dashState.value.filter((dashName) => dashName.toLowerCase().includes(searchString.toLowerCase()))\n      );\n    },\n    300,\n    [dashState.value, searchString]\n  );\n\n  const { saveLibraryPanel } = usePanelSave();\n  const styles = useStyles2(getModalStyles);\n  const discardAndClose = useCallback(() => {\n    onDiscard();\n  }, [onDiscard]);\n\n  const title = isUnsavedPrompt ? 'Unsaved library panel changes' : 'Save library panel';\n\n  return (\n    <Modal title={title} icon=\"save\" onDismiss={onDismiss} isOpen={true}>\n      <div>\n        <p className={styles.textInfo}>\n          {'This update will affect '}\n          <strong>\n            {panel.libraryPanel.meta?.connectedDashboards}{' '}\n            {panel.libraryPanel.meta?.connectedDashboards === 1 ? 'dashboard' : 'dashboards'}.\n          </strong>\n          The following dashboards using the panel will be affected:\n        </p>\n        <Input\n          className={styles.dashboardSearch}\n          prefix={<Icon name=\"search\" />}\n          placeholder={t(\n            'library-panels.save-library-panel-modal.placeholder-search-affected-dashboards',\n            'Search affected dashboards'\n          )}\n          value={searchString}\n          onChange={(e) => setSearchString(e.currentTarget.value)}\n        />\n        {dashState.loading ? (\n          <p>\n            <Trans i18nKey=\"library-panels.save-library-panel-modal.loading-connected-dashboards\">\n              Loading connected dashboards...\n            </Trans>\n          </p>\n        ) : (\n          <table className={styles.myTable}>\n            <thead>\n              <tr>\n                <th>\n                  <Trans i18nKey=\"library-panels.save-library-panel-modal.dashboard-name\">Dashboard name</Trans>\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {filteredDashboards.map((dashName, i) => (\n                <tr key={`dashrow-${i}`}>\n                  <td>{dashName}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n        <Modal.ButtonRow>\n          <Button variant=\"secondary\" onClick={onDismiss} fill=\"outline\">\n            <Trans i18nKey=\"library-panels.save-library-panel-modal.cancel\">Cancel</Trans>\n          </Button>\n          {isUnsavedPrompt && (\n            <Button variant=\"destructive\" onClick={discardAndClose}>\n              <Trans i18nKey=\"library-panels.save-library-panel-modal.discard\">Discard</Trans>\n            </Button>\n          )}\n          <Button\n            onClick={() => {\n              saveLibraryPanel(panel, folderUid).then(() => {\n                onConfirm();\n              });\n            }}\n          >\n            <Trans i18nKey=\"library-panels.save-library-panel-modal.update-all\">Update all</Trans>\n          </Button>\n        </Modal.ButtonRow>\n      </div>\n    </Modal>\n  );\n};\n","import { pick } from 'lodash';\n\nimport store from 'app/core/store';\nimport { removePanel } from 'app/features/dashboard/utils/panel';\nimport { cleanUpPanelState } from 'app/features/panel/state/actions';\nimport { panelModelAndPluginReady } from 'app/features/panel/state/reducers';\nimport { ThunkResult } from 'app/types';\n\nimport { DashboardModel } from '../../../state/DashboardModel';\nimport { PanelModel } from '../../../state/PanelModel';\n\nimport {\n  closeEditor,\n  PANEL_EDITOR_UI_STATE_STORAGE_KEY,\n  PanelEditorUIState,\n  setDiscardChanges,\n  setPanelEditorUIState,\n  updateEditorInitState,\n} from './reducers';\n\nexport function initPanelEditor(sourcePanel: PanelModel, dashboard: DashboardModel): ThunkResult<void> {\n  return async (dispatch) => {\n    const panel = dashboard.initEditPanel(sourcePanel);\n\n    dispatch(\n      updateEditorInitState({\n        panel,\n        sourcePanel,\n      })\n    );\n  };\n}\n\nexport function discardPanelChanges(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const { getPanel } = getStore().panelEditor;\n    getPanel().configRev = 0;\n    dispatch(setDiscardChanges(true));\n  };\n}\n\nexport function updateDuplicateLibraryPanels(\n  modifiedPanel: PanelModel,\n  dashboard: DashboardModel | null\n): ThunkResult<void> {\n  return (dispatch) => {\n    if (modifiedPanel.libraryPanel?.uid === undefined || !dashboard) {\n      return;\n    }\n\n    const modifiedSaveModel = modifiedPanel.getSaveModel();\n    for (const panel of dashboard.panels) {\n      if (skipPanelUpdate(modifiedPanel, panel)) {\n        continue;\n      }\n\n      panel.restoreModel({\n        ...modifiedSaveModel,\n        ...pick(panel, 'gridPos', 'id'),\n      });\n\n      // Loaded plugin is not included in the persisted properties\n      // So is not handled by restoreModel\n      const pluginChanged = panel.plugin?.meta.id !== modifiedPanel.plugin?.meta.id;\n      panel.plugin = modifiedPanel.plugin;\n      panel.configRev++;\n\n      if (pluginChanged) {\n        panel.generateNewKey();\n\n        dispatch(panelModelAndPluginReady({ key: panel.key, plugin: panel.plugin! }));\n      }\n\n      // Resend last query result on source panel query runner\n      // But do this after the panel edit editor exit process has completed\n      setTimeout(() => {\n        panel.getQueryRunner().useLastResultFrom(modifiedPanel.getQueryRunner());\n      }, 20);\n    }\n\n    if (modifiedPanel.repeat) {\n      // We skip any repeated library panels so we need to update them by calling processRepeats\n      // But do this after the panel edit editor exit process has completed\n      setTimeout(() => dashboard.processRepeats(), 20);\n    }\n  };\n}\n\nexport function skipPanelUpdate(modifiedPanel: PanelModel, panelToUpdate: PanelModel): boolean {\n  // don't update library panels that aren't of the same type\n  if (panelToUpdate.libraryPanel?.uid !== modifiedPanel.libraryPanel!.uid) {\n    return true;\n  }\n\n  // don't update the modifiedPanel twice\n  if (panelToUpdate.id && panelToUpdate.id === modifiedPanel.id) {\n    return true;\n  }\n\n  // don't update library panels that are repeated\n  if (panelToUpdate.repeatPanelId) {\n    return true;\n  }\n\n  return false;\n}\n\nexport function exitPanelEditor(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const dashboard = getStore().dashboard.getModel();\n    const { getPanel, getSourcePanel, shouldDiscardChanges } = getStore().panelEditor;\n    const panel = getPanel();\n\n    if (dashboard) {\n      dashboard.exitPanelEditor();\n    }\n\n    const sourcePanel = getSourcePanel();\n    if (hasPanelChangedInPanelEdit(panel) && !shouldDiscardChanges) {\n      const modifiedSaveModel = panel.getSaveModel();\n      const panelTypeChanged = sourcePanel.type !== panel.type;\n\n      dispatch(updateDuplicateLibraryPanels(panel, dashboard));\n\n      sourcePanel.restoreModel(modifiedSaveModel);\n      sourcePanel.configRev++; // force check the configs\n\n      if (panelTypeChanged) {\n        // Loaded plugin is not included in the persisted properties so is not handled by restoreModel\n        sourcePanel.plugin = panel.plugin;\n        sourcePanel.generateNewKey();\n\n        await dispatch(panelModelAndPluginReady({ key: sourcePanel.key, plugin: panel.plugin! }));\n      }\n\n      // Resend last query result on source panel query runner\n      // But do this after the panel edit editor exit process has completed\n      setTimeout(() => {\n        sourcePanel.getQueryRunner().useLastResultFrom(panel.getQueryRunner());\n        sourcePanel.render();\n\n        // If all changes where saved then reset configRev after applying changes\n        if (panel.hasSavedPanelEditChange && !panel.hasChanged) {\n          sourcePanel.configRev = 0;\n        }\n      }, 20);\n    }\n\n    // A new panel is only new until the first time we exit the panel editor\n    if (sourcePanel.isNew) {\n      if (!shouldDiscardChanges) {\n        delete sourcePanel.isNew;\n      } else {\n        dashboard && removePanel(dashboard, sourcePanel, true);\n      }\n    }\n\n    dispatch(cleanUpPanelState(panel.key));\n    dispatch(closeEditor());\n  };\n}\n\nfunction hasPanelChangedInPanelEdit(panel: PanelModel) {\n  return panel.hasChanged || panel.hasSavedPanelEditChange || panel.isAngularPlugin();\n}\n\nexport function updatePanelEditorUIState(uiState: Partial<PanelEditorUIState>): ThunkResult<void> {\n  return (dispatch, getStore) => {\n    const nextState = { ...getStore().panelEditor.ui, ...uiState };\n    dispatch(setPanelEditorUIState(nextState));\n    try {\n      store.setObject(PANEL_EDITOR_UI_STATE_STORAGE_KEY, nextState);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n}\n","import { css } from '@emotion/css';\n\nimport { Button, Modal } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { DashboardModel } from '../../state/DashboardModel';\n\nimport { SaveDashboardButton } from './SaveDashboardButton';\n\ninterface UnsavedChangesModalProps {\n  dashboard: DashboardModel;\n  onDiscard: () => void;\n  onDismiss: () => void;\n  onSaveSuccess?: () => void;\n}\n\nexport const UnsavedChangesModal = ({ dashboard, onSaveSuccess, onDiscard, onDismiss }: UnsavedChangesModalProps) => {\n  return (\n    <Modal\n      isOpen={true}\n      title={t('dashboard.unsaved-changes-modal.title-unsaved-changes', 'Unsaved changes')}\n      onDismiss={onDismiss}\n      icon=\"exclamation-triangle\"\n      className={css({\n        width: '500px',\n      })}\n    >\n      <h5>\n        <Trans i18nKey=\"dashboard.unsaved-changes-modal.changes\">Do you want to save your changes?</Trans>\n      </h5>\n      <Modal.ButtonRow>\n        <Button variant=\"secondary\" onClick={onDismiss} fill=\"outline\">\n          <Trans i18nKey=\"dashboard.unsaved-changes-modal.cancel\">Cancel</Trans>\n        </Button>\n        <Button variant=\"destructive\" onClick={onDiscard}>\n          <Trans i18nKey=\"dashboard.unsaved-changes-modal.discard\">Discard</Trans>\n        </Button>\n        <SaveDashboardButton dashboard={dashboard} onSaveSuccess={onSaveSuccess} />\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n","import * as H from 'history';\nimport { find } from 'lodash';\nimport { memo, useContext, useEffect, useState } from 'react';\n\nimport { locationService } from '@grafana/runtime';\nimport { Dashboard } from '@grafana/schema';\nimport { ModalsContext } from '@grafana/ui';\nimport { appEvents } from 'app/core/app_events';\nimport { Prompt } from 'app/core/components/FormPrompt/Prompt';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { SaveLibraryPanelModal } from 'app/features/library-panels/components/SaveLibraryPanelModal/SaveLibraryPanelModal';\nimport { PanelModelWithLibraryPanel } from 'app/features/library-panels/types';\nimport { useDispatch } from 'app/types';\nimport { DashboardSavedEvent } from 'app/types/events';\n\nimport { DashboardModel } from '../../state/DashboardModel';\nimport { discardPanelChanges, exitPanelEditor } from '../PanelEditor/state/actions';\nimport { UnsavedChangesModal } from '../SaveDashboard/UnsavedChangesModal';\n\nexport interface Props {\n  dashboard: DashboardModel;\n}\n\ninterface State {\n  original: object | null;\n  originalPath?: string;\n}\n\nexport const DashboardPrompt = memo(({ dashboard }: Props) => {\n  const [state, setState] = useState<State>({ original: null });\n  const dispatch = useDispatch();\n  const { original, originalPath } = state;\n  const { showModal, hideModal } = useContext(ModalsContext);\n\n  useEffect(() => {\n    // This timeout delay is to wait for panels to load and migrate scheme before capturing the original state\n    // This is to minimize unsaved changes warnings due to automatic schema migrations\n    const timeoutId = setTimeout(() => {\n      const originalPath = locationService.getLocation().pathname;\n      const original = dashboard.getSaveModelCloneOld();\n      setState({ originalPath, original });\n    }, 1000);\n\n    const savedEventUnsub = appEvents.subscribe(DashboardSavedEvent, () => {\n      const original = dashboard.getSaveModelCloneOld();\n      setState({ originalPath, original });\n    });\n\n    return () => {\n      clearTimeout(timeoutId);\n      savedEventUnsub.unsubscribe();\n    };\n  }, [dashboard, originalPath]);\n\n  useEffect(() => {\n    const handleUnload = (event: BeforeUnloadEvent) => {\n      if (ignoreChanges(dashboard, original)) {\n        return;\n      }\n      if (hasChanges(dashboard, original)) {\n        event.preventDefault();\n        // No browser actually displays this message anymore.\n        // But Chrome requires it to be defined else the popup won't show.\n        event.returnValue = '';\n      }\n    };\n    window.addEventListener('beforeunload', handleUnload);\n    return () => window.removeEventListener('beforeunload', handleUnload);\n  }, [dashboard, original]);\n\n  const onHistoryBlock = (location: H.Location) => {\n    const panelInEdit = dashboard.panelInEdit;\n    const search = new URLSearchParams(location.search);\n\n    // Are we leaving panel edit & library panel?\n    if (panelInEdit && panelInEdit.libraryPanel && panelInEdit.hasChanged && !search.has('editPanel')) {\n      showModal(SaveLibraryPanelModal, {\n        isUnsavedPrompt: true,\n        panel: dashboard.panelInEdit as PanelModelWithLibraryPanel,\n        folderUid: dashboard.meta.folderUid ?? '',\n        onConfirm: () => {\n          hideModal();\n          moveToBlockedLocationAfterReactStateUpdate(location);\n        },\n        onDiscard: () => {\n          dispatch(discardPanelChanges());\n          moveToBlockedLocationAfterReactStateUpdate(location);\n          hideModal();\n        },\n        onDismiss: hideModal,\n      });\n      return false;\n    }\n\n    // Are we still on the same dashboard?\n    if (originalPath === location.pathname || !original) {\n      // This is here due to timing reasons we want the exit panel editor state changes to happen before router update\n      if (panelInEdit && !search.has('editPanel')) {\n        dispatch(exitPanelEditor());\n      }\n\n      return true;\n    }\n\n    if (ignoreChanges(dashboard, original)) {\n      return true;\n    }\n\n    if (!hasChanges(dashboard, original)) {\n      return true;\n    }\n\n    showModal(UnsavedChangesModal, {\n      dashboard: dashboard,\n      onSaveSuccess: () => {\n        hideModal();\n        moveToBlockedLocationAfterReactStateUpdate(location);\n      },\n      onDiscard: () => {\n        setState({ ...state, original: null });\n        hideModal();\n        moveToBlockedLocationAfterReactStateUpdate(location);\n      },\n      onDismiss: hideModal,\n    });\n\n    return false;\n  };\n\n  return <Prompt when={true} message={onHistoryBlock} />;\n});\n\nDashboardPrompt.displayName = 'DashboardPrompt';\n\nfunction moveToBlockedLocationAfterReactStateUpdate(location?: H.Location | null) {\n  if (location) {\n    setTimeout(() => locationService.push(location), 10);\n  }\n}\n\n/**\n * For some dashboards and users changes should be ignored *\n */\nexport function ignoreChanges(current: DashboardModel | null, original: object | null) {\n  if (!original) {\n    return true;\n  }\n\n  // Ignore changes if original is unsaved\n  if ((original as DashboardModel).version === 0) {\n    return true;\n  }\n\n  // Ignore changes if the user has been signed out\n  if (!contextSrv.isSignedIn) {\n    return true;\n  }\n\n  if (!current) {\n    return true;\n  }\n\n  const { canSave, fromScript, fromFile } = current.meta;\n  if (!contextSrv.isEditor && !canSave) {\n    return true;\n  }\n\n  return !canSave || fromScript || fromFile;\n}\n\n/**\n * Remove stuff that should not count in diff\n */\nfunction cleanDashboardFromIgnoredChanges(dashData: Dashboard) {\n  // need to new up the domain model class to get access to expand / collapse row logic\n  const model = new DashboardModel(dashData);\n\n  // Expand all rows before making comparison. This is required because row expand / collapse\n  // change order of panel array and panel positions.\n  model.expandRows();\n\n  const dash = model.getSaveModelClone();\n\n  // ignore time and refresh\n  delete dash.time;\n  delete dash.refresh;\n  dash.schemaVersion = 0;\n  delete dash.timezone;\n\n  dash.panels = [];\n\n  // ignore template variable values\n  if (dash.templating?.list) {\n    for (const variable of dash.templating.list) {\n      delete variable.current;\n      delete variable.options;\n      // @ts-expect-error\n      delete variable.filters;\n    }\n  }\n\n  return dash;\n}\n\n// TODO: Adapt original to be Dashboard type instead\nexport function hasChanges(current: DashboardModel, original: unknown) {\n  if (current.hasUnsavedChanges()) {\n    return true;\n  }\n\n  // TODO: Make getSaveModelClone return Dashboard type instead\n  const currentClean = cleanDashboardFromIgnoredChanges(current.getSaveModelCloneOld() as unknown as Dashboard);\n  const originalClean = cleanDashboardFromIgnoredChanges(original as Dashboard);\n\n  const currentTimepicker = find((currentClean as any).nav, { type: 'timepicker' });\n  const originalTimepicker = find((originalClean as any).nav, { type: 'timepicker' });\n\n  if (currentTimepicker && originalTimepicker) {\n    currentTimepicker.now = originalTimepicker.now;\n  }\n\n  const currentJson = JSON.stringify(currentClean, null);\n  const originalJson = JSON.stringify(originalClean, null);\n\n  return currentJson !== originalJson;\n}\n","import { useMemo } from 'react';\n\nimport { IconButton } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { NetworkGraphModal } from './NetworkGraphModal';\nimport { UsagesToNetwork } from './utils';\n\ninterface Props {\n  id: string;\n  usages: UsagesToNetwork[];\n}\n\nexport const VariablesUnknownButton = ({ id, usages }: Props) => {\n  const network = useMemo(() => usages.find((n) => n.variable.id === id), [id, usages]);\n\n  if (!network) {\n    return null;\n  }\n\n  const nodes = network.nodes.map((n) => {\n    if (n.label.includes(`$${id}`)) {\n      return { ...n, color: '#FB7E81' };\n    }\n    return n;\n  });\n\n  return (\n    <NetworkGraphModal\n      show={false}\n      title={t('variables.variables-unknown-button.usage-title', 'Showing usages for: {{variableId}}', {\n        variableId: `$${id}`,\n      })}\n      nodes={nodes}\n      edges={network.edges}\n    >\n      {({ showModal }) => {\n        return (\n          <IconButton\n            onClick={() => showModal()}\n            name=\"code-branch\"\n            tooltip={t('variables.variables-unknown-button.VariablesUnknownButton-tooltip-show-usages', 'Show usages')}\n            data-testid=\"VariablesUnknownButton\"\n          />\n        );\n      }}\n    </NetworkGraphModal>\n  );\n};\n","import { css } from '@emotion/css';\nimport { ReactElement, useEffect, useState } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { CollapsableSection, HorizontalGroup, Icon, Spinner, Tooltip, useStyles2, VerticalGroup } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { DashboardModel } from '../../dashboard/state/DashboardModel';\nimport { VariableModel } from '../types';\n\nimport { VariablesUnknownButton } from './VariablesUnknownButton';\nimport { getUnknownsNetwork, UsagesToNetwork } from './utils';\n\nexport const SLOW_VARIABLES_EXPANSION_THRESHOLD = 1000;\n\nexport interface VariablesUnknownTableProps {\n  variables: VariableModel[];\n  dashboard: DashboardModel | null;\n}\n\nexport function VariablesUnknownTable({ variables, dashboard }: VariablesUnknownTableProps): ReactElement {\n  const [open, setOpen] = useState(false);\n  const [changed, setChanged] = useState(0);\n  const [usages, setUsages] = useState<UsagesToNetwork[]>([]);\n  const style = useStyles2(getStyles);\n  useEffect(() => setChanged((prevState) => prevState + 1), [variables, dashboard]);\n  const { loading } = useAsync(async () => {\n    if (open && changed > 0) {\n      // make sure we only fetch when opened and variables or dashboard have changed\n      const start = Date.now();\n      const unknownsNetwork = await getUnknownsNetwork(variables, dashboard);\n      const stop = Date.now();\n      const elapsed = stop - start;\n      if (elapsed >= SLOW_VARIABLES_EXPANSION_THRESHOLD) {\n        reportInteraction('Slow unknown variables expansion', { elapsed });\n      }\n      setChanged(0);\n      setUsages(unknownsNetwork);\n      return unknownsNetwork;\n    }\n\n    return [];\n  }, [variables, dashboard, open, changed]);\n\n  const onToggle = (isOpen: boolean) => {\n    if (isOpen) {\n      reportInteraction('Unknown variables section expanded');\n    }\n\n    setOpen(isOpen);\n  };\n\n  return (\n    <div className={style.container}>\n      <CollapsableSection label={<CollapseLabel />} isOpen={open} onToggle={onToggle}>\n        {loading && (\n          <VerticalGroup justify=\"center\">\n            <HorizontalGroup justify=\"center\">\n              <span>\n                <Trans i18nKey=\"variables.variables-unknown-table.loading\">Loading...</Trans>\n              </span>\n              <Spinner />\n            </HorizontalGroup>\n          </VerticalGroup>\n        )}\n        {!loading && usages && (\n          <>\n            {usages.length === 0 && <NoUnknowns />}\n            {usages.length > 0 && <UnknownTable usages={usages} />}\n          </>\n        )}\n      </CollapsableSection>\n    </div>\n  );\n}\n\nfunction CollapseLabel(): ReactElement {\n  const style = useStyles2(getStyles);\n  return (\n    <h5>\n      <Trans i18nKey=\"variables.variables-unknown-table.collapse-label\">Renamed or missing variables</Trans>\n      <Tooltip\n        content={t(\n          'variables.variables-unknown-table.collapse-tooltip',\n          'Click to expand a list with all variable references that have been renamed or are missing from the dashboard.'\n        )}\n      >\n        <Icon name=\"info-circle\" className={style.infoIcon} />\n      </Tooltip>\n    </h5>\n  );\n}\n\nfunction NoUnknowns(): ReactElement {\n  return (\n    <span>\n      <Trans i18nKey=\"variables.no-unknowns.no-renamed-or-missing-variables-found\">\n        No renamed or missing variables found.\n      </Trans>\n    </span>\n  );\n}\n\nfunction UnknownTable({ usages }: { usages: UsagesToNetwork[] }): ReactElement {\n  const style = useStyles2(getStyles);\n  return (\n    <table className=\"filter-table filter-table--hover\">\n      <thead>\n        <tr>\n          <th>\n            <Trans i18nKey=\"variables.unknown-table.variable\">Variable</Trans>\n          </th>\n          <th colSpan={5} />\n        </tr>\n      </thead>\n      <tbody>\n        {usages.map((usage) => {\n          const { variable } = usage;\n          const { id, name } = variable;\n          return (\n            <tr key={id}>\n              <td className={style.firstColumn}>\n                <span>{name}</span>\n              </td>\n              <td className={style.defaultColumn} />\n              <td className={style.defaultColumn} />\n              <td className={style.defaultColumn} />\n              <td className={style.lastColumn}>\n                <VariablesUnknownButton id={variable.id} usages={usages} />\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    marginTop: theme.spacing(4),\n    paddingTop: theme.spacing(4),\n  }),\n  infoIcon: css({\n    marginLeft: theme.spacing(1),\n  }),\n  defaultColumn: css({\n    width: '1%',\n  }),\n  firstColumn: css({\n    width: '1%',\n    verticalAlign: 'top',\n    color: theme.colors.text.maxContrast,\n  }),\n  lastColumn: css({\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    width: '100%',\n    textAlign: 'right',\n  }),\n});\n","import { css } from '@emotion/css';\n\nimport { ConfirmModal } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\ninterface Props {\n  varName: string;\n  isOpen: boolean;\n  onConfirm: () => void;\n  onDismiss: () => void;\n}\n\nexport function ConfirmDeleteModal({ varName, isOpen = false, onConfirm, onDismiss }: Props) {\n  return (\n    <ConfirmModal\n      title={t('variables.confirm-delete-modal.title-delete-variable', 'Delete variable')}\n      isOpen={isOpen}\n      onConfirm={onConfirm}\n      onDismiss={onDismiss}\n      body={`\n      Are you sure you want to delete variable \"${varName}\"?\n    `}\n      modalClass={styles.modal}\n      confirmText=\"Delete\"\n    />\n  );\n}\n\nconst styles = {\n  modal: css({\n    width: 'max-content',\n    maxWidth: '80vw',\n  }),\n};\n","import { PropsWithChildren, useMemo } from 'react';\n\nimport { SelectableValue, VariableType } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport { VariableSelectField } from '../../dashboard-scene/settings/variables/components/VariableSelectField';\nimport { getVariableTypes } from '../utils';\n\ninterface Props {\n  onChange: (option: SelectableValue<VariableType>) => void;\n  type: VariableType;\n}\n\nexport function VariableTypeSelect({ onChange, type }: PropsWithChildren<Props>) {\n  const options = useMemo(() => getVariableTypes(), []);\n  const value = useMemo(() => options.find((o) => o.value === type) ?? options[0], [options, type]);\n\n  return (\n    <VariableSelectField\n      name=\"Select variable type\"\n      value={value}\n      options={options}\n      onChange={onChange}\n      testId={selectors.pages.Dashboard.Settings.Variables.Edit.General.generalTypeSelectV2}\n    />\n  );\n}\n","import { cloneDeep } from 'lodash';\n\nimport { TypedVariableModel, VariableType } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\n\nimport { ThunkResult } from '../../../types';\nimport { variableAdapters } from '../adapters';\nimport { initInspect } from '../inspect/reducer';\nimport { createUsagesNetwork, transformUsagesToNetwork } from '../inspect/utils';\nimport { toKeyedAction } from '../state/keyedVariablesReducer';\nimport { getEditorVariables, getNewVariableIndex, getVariable, getVariablesByKey } from '../state/selectors';\nimport { addVariable, removeVariable } from '../state/sharedReducer';\nimport { AddVariable, KeyedVariableIdentifier, VariableIdentifier } from '../state/types';\nimport { toKeyedVariableIdentifier, toStateKey, toVariablePayload } from '../utils';\n\nimport {\n  changeVariableNameFailed,\n  changeVariableNameSucceeded,\n  variableEditorMounted,\n  variableEditorUnMounted,\n} from './reducer';\n\nexport const variableEditorMount = (identifier: KeyedVariableIdentifier): ThunkResult<void> => {\n  return async (dispatch) => {\n    const { rootStateKey } = identifier;\n    dispatch(\n      toKeyedAction(rootStateKey, variableEditorMounted({ name: getVariable(identifier).name, id: identifier.id }))\n    );\n  };\n};\n\nexport const variableEditorUnMount = (identifier: KeyedVariableIdentifier): ThunkResult<void> => {\n  return async (dispatch, getState) => {\n    const { rootStateKey } = identifier;\n    dispatch(toKeyedAction(rootStateKey, variableEditorUnMounted(toVariablePayload(identifier))));\n  };\n};\n\nexport const changeVariableName = (identifier: KeyedVariableIdentifier, newName: string): ThunkResult<void> => {\n  return (dispatch, getState) => {\n    const { id, rootStateKey: uid } = identifier;\n    let errorText = null;\n    if (!newName.match(/^(?!__).*$/)) {\n      errorText = \"Template names cannot begin with '__', that's reserved for Grafana's global variables\";\n    }\n\n    if (!newName.match(/^\\w+$/)) {\n      errorText = 'Only word characters are allowed in variable names';\n    }\n\n    const variables = getVariablesByKey(uid, getState());\n    const foundVariables = variables.filter((v) => v.name === newName && v.id !== id);\n\n    if (foundVariables.length) {\n      errorText = 'Variable with the same name already exists';\n    }\n\n    if (errorText) {\n      dispatch(toKeyedAction(uid, changeVariableNameFailed({ newName, errorText })));\n      return;\n    }\n\n    dispatch(completeChangeVariableName(identifier, newName));\n  };\n};\n\nexport const completeChangeVariableName =\n  (identifier: KeyedVariableIdentifier, newName: string): ThunkResult<void> =>\n  (dispatch, getState) => {\n    const { rootStateKey } = identifier;\n    const originalVariable = getVariable(identifier, getState());\n    if (originalVariable.name === newName) {\n      dispatch(toKeyedAction(rootStateKey, changeVariableNameSucceeded(toVariablePayload(identifier, { newName }))));\n      return;\n    }\n    const model = { ...cloneDeep(originalVariable), name: newName, id: newName };\n    const global = originalVariable.global;\n    const index = originalVariable.index;\n    const renamedIdentifier = toKeyedVariableIdentifier(model);\n\n    dispatch(toKeyedAction(rootStateKey, addVariable(toVariablePayload(renamedIdentifier, { global, index, model }))));\n    dispatch(\n      toKeyedAction(rootStateKey, changeVariableNameSucceeded(toVariablePayload(renamedIdentifier, { newName })))\n    );\n    dispatch(toKeyedAction(rootStateKey, removeVariable(toVariablePayload(identifier, { reIndex: false }))));\n  };\n\nexport const createNewVariable =\n  (key: string | null | undefined, type: VariableType = 'query'): ThunkResult<void> =>\n  (dispatch, getState) => {\n    const rootStateKey = toStateKey(key);\n    const varsByKey = getVariablesByKey(rootStateKey, getState());\n    const id = getNextAvailableId(type, varsByKey);\n    const identifier: VariableIdentifier = { type, id };\n    const global = false;\n    const index = getNewVariableIndex(rootStateKey, getState());\n    const model: TypedVariableModel = cloneDeep(variableAdapters.get(type).initialState);\n    model.id = id;\n    model.name = id;\n    model.rootStateKey = rootStateKey;\n    dispatch(\n      toKeyedAction(rootStateKey, addVariable(toVariablePayload<AddVariable>(identifier, { global, model, index })))\n    );\n\n    locationService.partial({ editIndex: varsByKey.length });\n  };\n\nexport const initListMode =\n  (key: string | null | undefined): ThunkResult<void> =>\n  (dispatch, getState) => {\n    const rootStateKey = toStateKey(key);\n    const state = getState();\n    const variables = getEditorVariables(rootStateKey, state);\n    const dashboard = state.dashboard.getModel();\n    const { usages } = createUsagesNetwork(variables, dashboard);\n    const usagesNetwork = transformUsagesToNetwork(usages);\n\n    dispatch(toKeyedAction(rootStateKey, initInspect({ usages, usagesNetwork })));\n  };\n\nexport function getNextAvailableId(type: VariableType, variables: TypedVariableModel[]): string {\n  let counter = 0;\n  let nextId = `${type}${counter}`;\n\n  while (variables.find((variable) => variable.id === nextId)) {\n    nextId = `${type}${++counter}`;\n  }\n\n  return nextId;\n}\n","import { css, keyframes } from '@emotion/css';\nimport { FormEvent, PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport { GrafanaTheme2, LoadingState, SelectableValue, VariableHide, VariableType } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { locationService } from '@grafana/runtime';\nimport { Button, HorizontalGroup, Icon, Themeable2, withTheme2 } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { StoreState, ThunkDispatch } from '../../../types';\nimport { VariableHideSelect } from '../../dashboard-scene/settings/variables/components/VariableHideSelect';\nimport { VariableLegend } from '../../dashboard-scene/settings/variables/components/VariableLegend';\nimport { VariableTextAreaField } from '../../dashboard-scene/settings/variables/components/VariableTextAreaField';\nimport { VariableTextField } from '../../dashboard-scene/settings/variables/components/VariableTextField';\nimport { VariableValuesPreview } from '../../dashboard-scene/settings/variables/components/VariableValuesPreview';\nimport { variableAdapters } from '../adapters';\nimport { hasOptions } from '../guard';\nimport { updateOptions } from '../state/actions';\nimport { toKeyedAction } from '../state/keyedVariablesReducer';\nimport { getVariable, getVariablesState } from '../state/selectors';\nimport { changeVariableProp, changeVariableType, removeVariable } from '../state/sharedReducer';\nimport { KeyedVariableIdentifier } from '../state/types';\nimport { toKeyedVariableIdentifier, toVariablePayload } from '../utils';\n\nimport { ConfirmDeleteModal } from './ConfirmDeleteModal';\nimport { VariableTypeSelect } from './VariableTypeSelect';\nimport { changeVariableName, variableEditorMount, variableEditorUnMount } from './actions';\nimport { OnPropChangeArguments, VariableNameConstraints } from './types';\n\nconst mapStateToProps = (state: StoreState, ownProps: OwnProps) => ({\n  editor: getVariablesState(ownProps.identifier.rootStateKey, state).editor,\n  variable: getVariable(ownProps.identifier, state),\n});\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch) => {\n  return {\n    ...bindActionCreators({ variableEditorMount, variableEditorUnMount, changeVariableName, updateOptions }, dispatch),\n    changeVariableProp: (identifier: KeyedVariableIdentifier, propName: string, propValue: unknown) =>\n      dispatch(\n        toKeyedAction(\n          identifier.rootStateKey,\n          changeVariableProp(toVariablePayload(identifier, { propName, propValue }))\n        )\n      ),\n    changeVariableType: (identifier: KeyedVariableIdentifier, newType: VariableType) =>\n      dispatch(toKeyedAction(identifier.rootStateKey, changeVariableType(toVariablePayload(identifier, { newType })))),\n    removeVariable: (identifier: KeyedVariableIdentifier) => {\n      dispatch(\n        toKeyedAction(identifier.rootStateKey, removeVariable(toVariablePayload(identifier, { reIndex: true })))\n      );\n    },\n  };\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport interface OwnProps extends Themeable2 {\n  identifier: KeyedVariableIdentifier;\n}\n\ntype Props = OwnProps & ConnectedProps<typeof connector>;\n\ninterface State {\n  showDeleteModal: boolean;\n}\n\nexport class VariableEditorEditorUnConnected extends PureComponent<Props, State> {\n  state: State = {\n    showDeleteModal: false,\n  };\n\n  componentDidMount(): void {\n    this.props.variableEditorMount(this.props.identifier);\n  }\n\n  componentWillUnmount(): void {\n    this.props.variableEditorUnMount(this.props.identifier);\n  }\n\n  onNameChange = (event: FormEvent<HTMLInputElement>) => {\n    event.preventDefault();\n    this.props.changeVariableName(this.props.identifier, event.currentTarget.value);\n  };\n\n  onTypeChange = (option: SelectableValue<VariableType>) => {\n    if (!option.value) {\n      return;\n    }\n    this.props.changeVariableType(this.props.identifier, option.value);\n  };\n\n  onLabelChange = (event: FormEvent<HTMLInputElement>) => {\n    event.preventDefault();\n    this.props.changeVariableProp(this.props.identifier, 'label', event.currentTarget.value);\n  };\n\n  onDescriptionChange = (event: FormEvent<HTMLTextAreaElement>) => {\n    this.props.changeVariableProp(this.props.identifier, 'description', event.currentTarget.value);\n  };\n\n  onHideChange = (option: VariableHide) => {\n    this.props.changeVariableProp(this.props.identifier, 'hide', option);\n  };\n\n  onPropChanged = ({ propName, propValue, updateOptions = false }: OnPropChangeArguments) => {\n    this.props.changeVariableProp(this.props.identifier, propName, propValue);\n\n    if (updateOptions) {\n      this.props.updateOptions(toKeyedVariableIdentifier(this.props.variable));\n    }\n  };\n\n  onHandleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (!this.props.editor.isValid) {\n      return;\n    }\n\n    this.props.updateOptions(toKeyedVariableIdentifier(this.props.variable));\n  };\n\n  onModalOpen = () => {\n    this.setState({ showDeleteModal: true });\n  };\n\n  onModalClose = () => {\n    this.setState({ showDeleteModal: false });\n  };\n\n  onDelete = () => {\n    this.props.removeVariable(this.props.identifier);\n    this.onModalClose();\n    locationService.partial({ editIndex: null });\n  };\n\n  onApply = () => {\n    locationService.partial({ editIndex: null });\n  };\n\n  getVariableOptions = () => {\n    const { variable } = this.props;\n    if (!hasOptions(variable)) {\n      return [];\n    }\n    return variable.options.map((option) => ({ label: String(option.text), value: String(option.value) }));\n  };\n\n  render() {\n    const { theme, variable } = this.props;\n    const EditorToRender = variableAdapters.get(this.props.variable.type).editor;\n    if (!EditorToRender) {\n      return null;\n    }\n    const loading = variable.state === LoadingState.Loading;\n    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n    const styles = getStyles(theme);\n\n    return (\n      <>\n        <form\n          aria-label={t(\n            'variables.variable-editor-editor-un-connected.aria-label-variable-editor-form',\n            'Variable editor Form'\n          )}\n          onSubmit={this.onHandleSubmit}\n        >\n          <VariableTypeSelect onChange={this.onTypeChange} type={this.props.variable.type} />\n\n          <VariableLegend>\n            <Trans i18nKey=\"variables.variable-editor-editor-un-connected.general\">General</Trans>\n          </VariableLegend>\n          <VariableTextField\n            value={this.props.editor.name}\n            onChange={this.onNameChange}\n            name=\"Name\"\n            placeholder={t('variables.variable-editor-editor-un-connected.placeholder-variable-name', 'Variable name')}\n            description={t(\n              'variables.variable-editor-editor-un-connected.description-template-variable-characters',\n              'The name of the template variable. (Max. 50 characters)'\n            )}\n            invalid={!!this.props.editor.errors.name}\n            error={this.props.editor.errors.name}\n            testId={selectors.pages.Dashboard.Settings.Variables.Edit.General.generalNameInputV2}\n            maxLength={VariableNameConstraints.MaxSize}\n            required\n          />\n\n          <VariableTextField\n            name=\"Label\"\n            description={t(\n              'variables.variable-editor-editor-un-connected.description-optional-display-name',\n              'Optional display name'\n            )}\n            value={this.props.variable.label ?? ''}\n            placeholder={t('variables.variable-editor-editor-un-connected.placeholder-label-name', 'Label name')}\n            onChange={this.onLabelChange}\n            testId={selectors.pages.Dashboard.Settings.Variables.Edit.General.generalLabelInputV2}\n          />\n          <VariableTextAreaField\n            name=\"Description\"\n            value={variable.description ?? ''}\n            placeholder={t(\n              'variables.variable-editor-editor-un-connected.placeholder-descriptive-text',\n              'Descriptive text'\n            )}\n            onChange={this.onDescriptionChange}\n            width={52}\n          />\n          <VariableHideSelect\n            onChange={this.onHideChange}\n            hide={this.props.variable.hide}\n            type={this.props.variable.type}\n          />\n\n          {EditorToRender && <EditorToRender variable={this.props.variable} onPropChange={this.onPropChanged} />}\n\n          {hasOptions(this.props.variable) ? <VariableValuesPreview options={this.getVariableOptions()} /> : null}\n\n          <div style={{ marginTop: '16px' }}>\n            <HorizontalGroup spacing=\"md\" height=\"inherit\">\n              <Button variant=\"destructive\" fill=\"outline\" onClick={this.onModalOpen}>\n                <Trans i18nKey=\"variables.variable-editor-editor-un-connected.delete\">Delete</Trans>\n              </Button>\n              <Button\n                type=\"submit\"\n                data-testid={selectors.pages.Dashboard.Settings.Variables.Edit.General.submitButton}\n                disabled={loading}\n                variant=\"secondary\"\n              >\n                Run query\n                {loading && (\n                  <Icon\n                    className={styles.spin}\n                    name={prefersReducedMotion ? 'hourglass' : 'sync'}\n                    size=\"sm\"\n                    style={{ marginLeft: '2px' }}\n                  />\n                )}\n              </Button>\n              <Button\n                variant=\"primary\"\n                onClick={this.onApply}\n                data-testid={selectors.pages.Dashboard.Settings.Variables.Edit.General.applyButton}\n              >\n                <Trans i18nKey=\"variables.variable-editor-editor-un-connected.apply\">Apply</Trans>\n              </Button>\n            </HorizontalGroup>\n          </div>\n        </form>\n        <ConfirmDeleteModal\n          isOpen={this.state.showDeleteModal}\n          varName={this.props.editor.name}\n          onConfirm={this.onDelete}\n          onDismiss={this.onModalClose}\n        />\n      </>\n    );\n  }\n}\n\nexport const VariableEditorEditor = withTheme2(connector(VariableEditorEditorUnConnected));\n\nconst spin = keyframes({\n  '0%': {\n    transform: 'rotate(0deg) scaleX(-1)', // scaleX flips the `sync` icon so arrows point the correct way\n  },\n  '100%': {\n    transform: 'rotate(359deg) scaleX(-1)',\n  },\n});\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    spin: css({\n      [theme.transitions.handleMotion('no-preference')]: {\n        animation: `${spin} 3s linear infinite`,\n      },\n    }),\n  };\n};\n","import { useMemo } from 'react';\n\nimport { TypedVariableModel } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { NetworkGraphModal } from './NetworkGraphModal';\nimport { createDependencyEdges, createDependencyNodes, filterNodesWithDependencies } from './utils';\n\ninterface Props {\n  variables: TypedVariableModel[];\n}\n\nexport const VariablesDependenciesButton = ({ variables }: Props) => {\n  const nodes = useMemo(() => createDependencyNodes(variables), [variables]);\n  const edges = useMemo(() => createDependencyEdges(variables), [variables]);\n\n  if (!edges.length) {\n    return null;\n  }\n\n  return (\n    <NetworkGraphModal\n      show={false}\n      title={t('variables.variables-dependencies-button.title-dependencies', 'Dependencies')}\n      nodes={filterNodesWithDependencies(nodes, edges)}\n      edges={edges}\n    >\n      {({ showModal }) => {\n        return (\n          <Button\n            onClick={() => {\n              reportInteraction('Show variable dependencies');\n              showModal();\n            }}\n            icon=\"channel-add\"\n            variant=\"secondary\"\n          >\n            <Trans i18nKey=\"variables.variables-dependencies-button.show-dependencies\">Show dependencies</Trans>\n          </Button>\n        );\n      }}\n    </NetworkGraphModal>\n  );\n};\n","import { useMemo } from 'react';\n\nimport { reportInteraction } from '@grafana/runtime';\nimport { IconButton } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { NetworkGraphModal } from './NetworkGraphModal';\nimport { UsagesToNetwork } from './utils';\n\ninterface Props {\n  id: string;\n  usages: UsagesToNetwork[];\n  isAdhoc: boolean;\n}\n\nexport const VariableUsagesButton = ({ id, usages, isAdhoc }: Props) => {\n  const network = useMemo(() => usages.find((n) => n.variable.id === id), [usages, id]);\n  if (usages.length === 0 || isAdhoc || !network) {\n    return null;\n  }\n\n  const nodes = network.nodes.map((n) => {\n    if (n.label.includes(`$${id}`)) {\n      return { ...n, color: '#FB7E81' };\n    }\n    return n;\n  });\n\n  return (\n    <NetworkGraphModal\n      show={false}\n      title={t('variabels.variable-usages-button.usage-title', 'Showing usages for: {{variableId}}', {\n        variableId: `$${id}`,\n      })}\n      nodes={nodes}\n      edges={network.edges}\n    >\n      {({ showModal }) => {\n        return (\n          <IconButton\n            onClick={() => {\n              reportInteraction('Show variable usages');\n              showModal();\n            }}\n            name=\"code-branch\"\n            tooltip={t('variables.variable-usages-button.tooltip-show-usages', 'Show usages')}\n          />\n        );\n      }}\n    </NetworkGraphModal>\n  );\n};\n","import { css } from '@emotion/css';\nimport { Draggable } from '@hello-pangea/dnd';\nimport { ReactElement } from 'react';\n\nimport { GrafanaTheme2, TypedVariableModel } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, Icon, IconButton, useStyles2, useTheme2 } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { hasOptions } from '../guard';\nimport { VariableUsagesButton } from '../inspect/VariableUsagesButton';\nimport { getVariableUsages, UsagesToNetwork, VariableUsageTree } from '../inspect/utils';\nimport { KeyedVariableIdentifier } from '../state/types';\nimport { toKeyedVariableIdentifier } from '../utils';\n\nexport interface VariableEditorListRowProps {\n  index: number;\n  variable: TypedVariableModel;\n  usageTree: VariableUsageTree[];\n  usagesNetwork: UsagesToNetwork[];\n  onEdit: (identifier: KeyedVariableIdentifier) => void;\n  onDuplicate: (identifier: KeyedVariableIdentifier) => void;\n  onDelete: (identifier: KeyedVariableIdentifier) => void;\n}\n\nexport function VariableEditorListRow({\n  index,\n  variable,\n  usageTree,\n  usagesNetwork,\n  onEdit: propsOnEdit,\n  onDuplicate: propsOnDuplicate,\n  onDelete: propsOnDelete,\n}: VariableEditorListRowProps): ReactElement {\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n  const definition = getDefinition(variable);\n  const usages = getVariableUsages(variable.id, usageTree);\n  const passed = usages > 0 || variable.type === 'adhoc';\n  const identifier = toKeyedVariableIdentifier(variable);\n\n  return (\n    <Draggable draggableId={JSON.stringify(identifier)} index={index}>\n      {(provided, snapshot) => (\n        <tr\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          style={{\n            userSelect: snapshot.isDragging ? 'none' : 'auto',\n            background: snapshot.isDragging ? theme.colors.background.secondary : undefined,\n            ...provided.draggableProps.style,\n          }}\n        >\n          <td role=\"gridcell\" className={styles.column}>\n            <Button\n              size=\"xs\"\n              fill=\"text\"\n              onClick={(event) => {\n                event.preventDefault();\n                propsOnEdit(identifier);\n              }}\n              className={styles.nameLink}\n              aria-label={selectors.pages.Dashboard.Settings.Variables.List.tableRowNameFields(variable.name)}\n            >\n              {variable.name}\n            </Button>\n          </td>\n          <td\n            role=\"gridcell\"\n            className={styles.definitionColumn}\n            onClick={(event) => {\n              event.preventDefault();\n              propsOnEdit(identifier);\n            }}\n            aria-label={selectors.pages.Dashboard.Settings.Variables.List.tableRowDefinitionFields(variable.name)}\n          >\n            {definition}\n          </td>\n\n          <td role=\"gridcell\" className={styles.column}>\n            <div className={styles.icons}>\n              <VariableCheckIndicator passed={passed} />\n              <VariableUsagesButton id={variable.id} isAdhoc={variable.type === 'adhoc'} usages={usagesNetwork} />\n              <IconButton\n                onClick={(event) => {\n                  event.preventDefault();\n                  reportInteraction('Duplicate variable');\n                  propsOnDuplicate(identifier);\n                }}\n                name=\"copy\"\n                tooltip={t('variables.variable-editor-list-row.tooltip-duplicate-variable', 'Duplicate variable')}\n                aria-label={selectors.pages.Dashboard.Settings.Variables.List.tableRowDuplicateButtons(variable.name)}\n              />\n              <IconButton\n                onClick={(event) => {\n                  event.preventDefault();\n                  reportInteraction('Delete variable');\n                  propsOnDelete(identifier);\n                }}\n                name=\"trash-alt\"\n                tooltip={t('variables.variable-editor-list-row.tooltip-remove-variable', 'Remove variable')}\n                aria-label={selectors.pages.Dashboard.Settings.Variables.List.tableRowRemoveButtons(variable.name)}\n              />\n              <div {...provided.dragHandleProps} className={styles.dragHandle}>\n                <Icon name=\"draggabledots\" size=\"lg\" />\n              </div>\n            </div>\n          </td>\n        </tr>\n      )}\n    </Draggable>\n  );\n}\n\nfunction getDefinition(model: TypedVariableModel): string {\n  let definition = '';\n  if (model.type === 'query') {\n    if (model.definition) {\n      definition = model.definition;\n    } else if (typeof model.query === 'string') {\n      definition = model.query;\n    }\n  } else if (hasOptions(model)) {\n    definition = model.query;\n  }\n\n  return definition;\n}\n\ninterface VariableCheckIndicatorProps {\n  passed: boolean;\n}\n\nfunction VariableCheckIndicator({ passed }: VariableCheckIndicatorProps): ReactElement {\n  const styles = useStyles2(getStyles);\n  if (passed) {\n    return (\n      <Icon\n        name=\"check\"\n        className={styles.iconPassed}\n        title={t(\n          'variables.variable-check-indicator.title-variable-referenced-other-variables-dashboard',\n          'This variable is referenced by other variables or dashboard.'\n        )}\n      />\n    );\n  }\n\n  return (\n    <Icon\n      name=\"exclamation-triangle\"\n      className={styles.iconFailed}\n      title={t(\n        'variables.variable-check-indicator.title-variable-referenced-dashboard',\n        'This variable is not referenced by any variable or dashboard.'\n      )}\n    />\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    dragHandle: css({\n      cursor: 'grab',\n      marginLeft: theme.spacing(1),\n    }),\n    column: css({\n      width: '1%',\n    }),\n    nameLink: css({\n      cursor: 'pointer',\n      color: theme.colors.primary.text,\n    }),\n    definitionColumn: css({\n      width: '100%',\n      maxWidth: '200px',\n      cursor: 'pointer',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      OTextOverflow: 'ellipsis',\n      whiteSpace: 'nowrap',\n    }),\n    iconPassed: css({\n      color: theme.v1.palette.greenBase,\n      marginRight: theme.spacing(2),\n    }),\n    iconFailed: css({\n      color: theme.v1.palette.orange,\n      marginRight: theme.spacing(2),\n    }),\n    icons: css({\n      display: 'flex',\n      gap: theme.spacing(2),\n      alignItems: 'center',\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport { DragDropContext, Droppable, DropResult } from '@hello-pangea/dnd';\nimport { ReactElement } from 'react';\n\nimport { TypedVariableModel } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, useStyles2, Stack, EmptyState, TextLink } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { VariablesDependenciesButton } from '../inspect/VariablesDependenciesButton';\nimport { UsagesToNetwork, VariableUsageTree } from '../inspect/utils';\nimport { KeyedVariableIdentifier } from '../state/types';\n\nimport { VariableEditorListRow } from './VariableEditorListRow';\n\nexport interface Props {\n  variables: TypedVariableModel[];\n  usages: VariableUsageTree[];\n  usagesNetwork: UsagesToNetwork[];\n  onAdd: () => void;\n  onEdit: (identifier: KeyedVariableIdentifier) => void;\n  onChangeOrder: (identifier: KeyedVariableIdentifier, fromIndex: number, toIndex: number) => void;\n  onDuplicate: (identifier: KeyedVariableIdentifier) => void;\n  onDelete: (identifier: KeyedVariableIdentifier) => void;\n}\n\nexport function VariableEditorList({\n  variables,\n  usages,\n  usagesNetwork,\n  onChangeOrder,\n  onAdd,\n  onEdit,\n  onDelete,\n  onDuplicate,\n}: Props): ReactElement {\n  const styles = useStyles2(getStyles);\n  const onDragEnd = (result: DropResult) => {\n    if (!result.destination || !result.source) {\n      return;\n    }\n    reportInteraction('Variable drag and drop');\n    const identifier = JSON.parse(result.draggableId);\n    onChangeOrder(identifier, variables[result.source.index].index, variables[result.destination.index].index);\n  };\n\n  return (\n    <div>\n      <div>\n        {variables.length === 0 && <EmptyVariablesList onAdd={onAdd} />}\n\n        {variables.length > 0 && (\n          <Stack direction=\"column\" gap={4}>\n            <div className={styles.tableContainer}>\n              <table\n                className=\"filter-table filter-table--hover\"\n                aria-label={selectors.pages.Dashboard.Settings.Variables.List.table}\n                role=\"grid\"\n              >\n                <thead>\n                  <tr>\n                    <th>\n                      <Trans i18nKey=\"variables.variable-editor-list.variable\">Variable</Trans>\n                    </th>\n                    <th>\n                      <Trans i18nKey=\"variables.variable-editor-list.definition\">Definition</Trans>\n                    </th>\n                    <th colSpan={5} />\n                  </tr>\n                </thead>\n                <DragDropContext onDragEnd={onDragEnd}>\n                  <Droppable droppableId=\"variables-list\" direction=\"vertical\">\n                    {(provided) => (\n                      <tbody ref={provided.innerRef} {...provided.droppableProps}>\n                        {variables.map((variable, index) => (\n                          <VariableEditorListRow\n                            index={index}\n                            key={`${variable.name}-${index}`}\n                            variable={variable}\n                            usageTree={usages}\n                            usagesNetwork={usagesNetwork}\n                            onDelete={onDelete}\n                            onDuplicate={onDuplicate}\n                            onEdit={onEdit}\n                          />\n                        ))}\n                        {provided.placeholder}\n                      </tbody>\n                    )}\n                  </Droppable>\n                </DragDropContext>\n              </table>\n            </div>\n            <Stack>\n              <VariablesDependenciesButton variables={variables} />\n              <Button\n                aria-label={selectors.pages.Dashboard.Settings.Variables.List.newButton}\n                onClick={onAdd}\n                icon=\"plus\"\n              >\n                <Trans i18nKey=\"variables.variable-editor-list.new-variable\">New variable</Trans>\n              </Button>\n            </Stack>\n          </Stack>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction EmptyVariablesList({ onAdd }: { onAdd: () => void }): ReactElement {\n  return (\n    <Stack direction=\"column\">\n      <EmptyState\n        variant=\"call-to-action\"\n        button={\n          <Button\n            data-testid={selectors.components.CallToActionCard.buttonV2('Add variable')}\n            icon=\"calculator-alt\"\n            onClick={onAdd}\n            size=\"lg\"\n          >\n            <Trans i18nKey=\"variables.empty-state.button-title\">Add variable</Trans>\n          </Button>\n        }\n        message={t('variables.empty-state.title', 'There are no variables added yet')}\n      >\n        <p>\n          <Trans i18nKey=\"variables.empty-state.info-box-content\">\n            Variables enable more interactive and dynamic dashboards. Instead of hard-coding things like server or\n            sensor names in your metric queries you can use variables in their place. Variables are shown as list boxes\n            at the top of the dashboard. These drop-down lists make it easy to change the data being displayed in your\n            dashboard.\n          </Trans>\n        </p>\n        <Trans i18nKey=\"variables.empty-state.info-box-content-2\">\n          Check out the{' '}\n          <TextLink external href=\"https://grafana.com/docs/grafana/latest/variables/\">\n            Templates and variables documentation\n          </TextLink>{' '}\n          for more information.\n        </Trans>\n      </EmptyState>\n    </Stack>\n  );\n}\n\nconst getStyles = () => ({\n  tableContainer: css({\n    overflow: 'scroll',\n    width: '100%',\n  }),\n});\n","import { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport { locationService } from '@grafana/runtime';\nimport { Page } from 'app/core/components/Page/Page';\nimport { SettingsPageProps } from 'app/features/dashboard/components/DashboardSettings/types';\n\nimport { StoreState, ThunkDispatch } from '../../../types';\nimport { VariablesUnknownTable } from '../inspect/VariablesUnknownTable';\nimport { toKeyedAction } from '../state/keyedVariablesReducer';\nimport { getEditorVariables, getVariablesState } from '../state/selectors';\nimport { changeVariableOrder, duplicateVariable, removeVariable } from '../state/sharedReducer';\nimport { KeyedVariableIdentifier } from '../state/types';\nimport { toKeyedVariableIdentifier, toVariablePayload } from '../utils';\n\nimport { ConfirmDeleteModal } from './ConfirmDeleteModal';\nimport { VariableEditorEditor } from './VariableEditorEditor';\nimport { VariableEditorList } from './VariableEditorList';\nimport { createNewVariable, initListMode } from './actions';\n\nconst mapStateToProps = (state: StoreState, ownProps: OwnProps) => {\n  const { uid } = ownProps.dashboard;\n  const templatingState = getVariablesState(uid, state);\n  return {\n    variables: getEditorVariables(uid, state),\n    idInEditor: templatingState.editor.id,\n    usagesNetwork: templatingState.inspect.usagesNetwork,\n    usages: templatingState.inspect.usages,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch) => {\n  return {\n    ...bindActionCreators({ createNewVariable, initListMode }, dispatch),\n    changeVariableOrder: (identifier: KeyedVariableIdentifier, fromIndex: number, toIndex: number) =>\n      dispatch(\n        toKeyedAction(\n          identifier.rootStateKey,\n          changeVariableOrder(toVariablePayload(identifier, { fromIndex, toIndex }))\n        )\n      ),\n    duplicateVariable: (identifier: KeyedVariableIdentifier) =>\n      dispatch(\n        toKeyedAction(\n          identifier.rootStateKey,\n          duplicateVariable(toVariablePayload(identifier, { newId: undefined as unknown as string }))\n        )\n      ),\n    removeVariable: (identifier: KeyedVariableIdentifier) => {\n      dispatch(\n        toKeyedAction(identifier.rootStateKey, removeVariable(toVariablePayload(identifier, { reIndex: true })))\n      );\n    },\n  };\n};\n\ninterface OwnProps extends SettingsPageProps {}\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype Props = OwnProps & ConnectedProps<typeof connector>;\n\ninterface State {\n  variableId?: KeyedVariableIdentifier;\n}\n\nclass VariableEditorContainerUnconnected extends PureComponent<Props, State> {\n  state: State = {\n    variableId: undefined,\n  };\n\n  componentDidMount() {\n    this.props.initListMode(this.props.dashboard.uid);\n  }\n\n  onEditVariable = (identifier: KeyedVariableIdentifier) => {\n    const index = this.props.variables.findIndex((x) => x.id === identifier.id);\n    locationService.partial({ editIndex: index });\n  };\n\n  onNewVariable = () => {\n    this.props.createNewVariable(this.props.dashboard.uid);\n  };\n\n  onChangeVariableOrder = (identifier: KeyedVariableIdentifier, fromIndex: number, toIndex: number) => {\n    this.props.changeVariableOrder(identifier, fromIndex, toIndex);\n  };\n\n  onDuplicateVariable = (identifier: KeyedVariableIdentifier) => {\n    this.props.duplicateVariable(identifier);\n  };\n\n  onModalOpen = (identifier: KeyedVariableIdentifier) => {\n    this.setState({ variableId: identifier });\n  };\n\n  onModalClose = () => {\n    this.setState({ variableId: undefined });\n  };\n\n  onRemoveVariable = () => {\n    this.props.removeVariable(this.state.variableId!);\n    this.onModalClose();\n  };\n\n  render() {\n    const { editIndex, variables, sectionNav } = this.props;\n    const variableToEdit = editIndex != null ? variables[editIndex] : undefined;\n    const node = sectionNav.node;\n    const parentItem = node.parentItem;\n    const subPageNav = variableToEdit ? { text: variableToEdit.name, parentItem } : parentItem;\n\n    return (\n      <Page navModel={this.props.sectionNav} pageNav={subPageNav}>\n        {!variableToEdit && (\n          <VariableEditorList\n            variables={this.props.variables}\n            onAdd={this.onNewVariable}\n            onEdit={this.onEditVariable}\n            onChangeOrder={this.onChangeVariableOrder}\n            onDuplicate={this.onDuplicateVariable}\n            onDelete={this.onModalOpen}\n            usages={this.props.usages}\n            usagesNetwork={this.props.usagesNetwork}\n          />\n        )}\n        {!variableToEdit && this.props.variables.length > 0 && (\n          <VariablesUnknownTable variables={this.props.variables} dashboard={this.props.dashboard} />\n        )}\n        {variableToEdit && <VariableEditorEditor identifier={toKeyedVariableIdentifier(variableToEdit)} />}\n        <ConfirmDeleteModal\n          isOpen={this.state.variableId !== undefined}\n          varName={this.state.variableId?.id ?? ''}\n          onConfirm={this.onRemoveVariable}\n          onDismiss={this.onModalClose}\n        />\n      </Page>\n    );\n  }\n}\n\nexport const VariableEditorContainer = connector(VariableEditorContainerUnconnected);\n","import { Permissions } from 'app/core/components/AccessControl';\nimport { Page } from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction } from 'app/types';\n\nimport { SettingsPageProps } from '../DashboardSettings/types';\n\nexport const AccessControlDashboardPermissions = ({ dashboard, sectionNav }: SettingsPageProps) => {\n  const canSetPermissions = contextSrv.hasPermission(AccessControlAction.DashboardsPermissionsWrite);\n  const pageNav = sectionNav.node.parentItem;\n\n  return (\n    <Page navModel={sectionNav} pageNav={pageNav}>\n      <Permissions resource={'dashboards'} resourceId={dashboard.uid} canSetPermissions={canSetPermissions} />\n    </Page>\n  );\n};\n","import { css } from '@emotion/css';\nimport { useMemo, useState } from 'react';\nimport * as React from 'react';\nimport { useAsync } from 'react-use';\n\nimport {\n  AnnotationQuery,\n  DataSourceInstanceSettings,\n  getDataSourceRef,\n  GrafanaTheme2,\n  SelectableValue,\n} from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { getDataSourceSrv, locationService } from '@grafana/runtime';\nimport { AnnotationPanelFilter } from '@grafana/schema/src/raw/dashboard/x/dashboard_types.gen';\nimport {\n  Button,\n  Checkbox,\n  Field,\n  FieldSet,\n  HorizontalGroup,\n  Input,\n  MultiSelect,\n  Select,\n  useStyles2,\n  Stack,\n  Alert,\n} from '@grafana/ui';\nimport { ColorValueEditor } from 'app/core/components/OptionsUI/color';\nimport config from 'app/core/config';\nimport { Trans, t } from 'app/core/internationalization';\nimport StandardAnnotationQueryEditor from 'app/features/annotations/components/StandardAnnotationQueryEditor';\nimport { DataSourcePicker } from 'app/features/datasources/components/picker/DataSourcePicker';\n\nimport { DashboardModel } from '../../state/DashboardModel';\n\ntype Props = {\n  editIdx: number;\n  dashboard: DashboardModel;\n};\n\nexport const newAnnotationName = 'New annotation';\n\nexport const AnnotationSettingsEdit = ({ editIdx, dashboard }: Props) => {\n  const styles = useStyles2(getStyles);\n  const [annotation, setAnnotation] = useState(dashboard.annotations.list[editIdx]);\n\n  const panelFilter = useMemo(() => {\n    if (!annotation.filter) {\n      return PanelFilterType.AllPanels;\n    }\n    return annotation.filter.exclude ? PanelFilterType.ExcludePanels : PanelFilterType.IncludePanels;\n  }, [annotation.filter]);\n\n  const { value: ds } = useAsync(() => {\n    return getDataSourceSrv().get(annotation.datasource);\n  }, [annotation.datasource]);\n\n  const dsi = getDataSourceSrv().getInstanceSettings(annotation.datasource);\n\n  const onUpdate = (annotation: AnnotationQuery) => {\n    const list = [...dashboard.annotations.list];\n    list.splice(editIdx, 1, annotation);\n    setAnnotation(annotation);\n    dashboard.annotations.list = list;\n  };\n\n  const onNameChange = (ev: React.FocusEvent<HTMLInputElement>) => {\n    onUpdate({\n      ...annotation,\n      name: ev.currentTarget.value,\n    });\n  };\n\n  const onDataSourceChange = (ds: DataSourceInstanceSettings) => {\n    const dsRef = getDataSourceRef(ds);\n\n    if (annotation.datasource?.type !== dsRef.type) {\n      onUpdate({\n        datasource: dsRef,\n        builtIn: annotation.builtIn,\n        enable: annotation.enable,\n        iconColor: annotation.iconColor,\n        name: annotation.name,\n        hide: annotation.hide,\n        filter: annotation.filter,\n        mappings: annotation.mappings,\n        type: annotation.type,\n      });\n    } else {\n      onUpdate({\n        ...annotation,\n        datasource: dsRef,\n      });\n    }\n  };\n\n  const onChange = (ev: React.FocusEvent<HTMLInputElement>) => {\n    const target = ev.currentTarget;\n    onUpdate({\n      ...annotation,\n      [target.name]: target.type === 'checkbox' ? target.checked : target.value,\n    });\n  };\n\n  const onColorChange = (color?: string) => {\n    onUpdate({\n      ...annotation,\n      iconColor: color!,\n    });\n  };\n\n  const onFilterTypeChange = (v: SelectableValue<PanelFilterType>) => {\n    let filter =\n      v.value === PanelFilterType.AllPanels\n        ? undefined\n        : {\n            exclude: v.value === PanelFilterType.ExcludePanels,\n            ids: annotation.filter?.ids ?? [],\n          };\n    onUpdate({ ...annotation, filter });\n  };\n\n  const onAddFilterPanelID = (selections: Array<SelectableValue<number>>) => {\n    if (!Array.isArray(selections)) {\n      return;\n    }\n\n    const filter: AnnotationPanelFilter = {\n      exclude: panelFilter === PanelFilterType.ExcludePanels,\n      ids: [],\n    };\n\n    selections.forEach((selection) => selection.value && filter.ids.push(selection.value));\n    onUpdate({ ...annotation, filter });\n  };\n\n  const onApply = goBackToList;\n\n  const onPreview = () => {\n    locationService.partial({ editview: null, editIndex: null });\n  };\n\n  const onDelete = () => {\n    const annotations = dashboard.annotations.list;\n    dashboard.annotations.list = [...annotations.slice(0, editIdx), ...annotations.slice(editIdx + 1)];\n    goBackToList();\n  };\n\n  const isNewAnnotation = annotation.name === newAnnotationName;\n\n  const sortFn = (a: SelectableValue<number>, b: SelectableValue<number>) => {\n    if (a.label && b.label) {\n      return a.label.toLowerCase().localeCompare(b.label.toLowerCase());\n    }\n\n    return -1;\n  };\n\n  const panels: Array<SelectableValue<number>> = useMemo(\n    () =>\n      dashboard?.panels\n        // Filtering out rows at the moment, revisit to only include panels that support annotations\n        // However the information to know if a panel supports annotations requires it to be already loaded\n        // panel.plugin?.dataSupport?.annotations\n        .filter((panel) => config.panels[panel.type])\n        .map((panel) => ({\n          value: panel.id,\n          label: panel.title ?? `Panel ${panel.id}`,\n          description: panel.description,\n          imgUrl: config.panels[panel.type].info.logos.small,\n        }))\n        .sort(sortFn) ?? [],\n    [dashboard]\n  );\n\n  return (\n    <div>\n      <FieldSet className={styles.settingsForm}>\n        <Field label={t('dashboard.annotation-settings-edit.label-name', 'Name')}>\n          <Input\n            data-testid={selectors.pages.Dashboard.Settings.Annotations.Settings.name}\n            name=\"name\"\n            id=\"name\"\n            autoFocus={isNewAnnotation}\n            value={annotation.name}\n            onChange={onNameChange}\n          />\n        </Field>\n        <Field\n          label={t('dashboard.annotation-settings-edit.label-data-source', 'Data source')}\n          htmlFor=\"data-source-picker\"\n        >\n          <DataSourcePicker annotations variables current={annotation.datasource} onChange={onDataSourceChange} />\n        </Field>\n        {!ds?.meta.annotations && (\n          <Alert\n            title={t(\n              'dashboard.annotation-settings-edit.title-annotation-support-source',\n              'No annotation support for this data source'\n            )}\n            severity=\"error\"\n          >\n            <Trans i18nKey=\"errors.dashboard-settings.annotations.datasource\">\n              The selected data source does not support annotations. Please select a different data source.\n            </Trans>\n          </Alert>\n        )}\n        <Field\n          label={t('dashboard.annotation-settings-edit.label-enabled', 'Enabled')}\n          description={t(\n            'dashboard.annotation-settings-edit.description-enabled-annotation-query-issued-every-dashboard',\n            'When enabled the annotation query is issued every dashboard refresh'\n          )}\n        >\n          <Checkbox name=\"enable\" id=\"enable\" value={annotation.enable} onChange={onChange} />\n        </Field>\n        <Field\n          label={t('dashboard.annotation-settings-edit.label-hidden', 'Hidden')}\n          description=\"Annotation queries can be toggled on or off at the top of the dashboard. With this option checked this toggle will be hidden.\"\n        >\n          <Checkbox name=\"hide\" id=\"hide\" value={annotation.hide} onChange={onChange} />\n        </Field>\n        <Field\n          label={t('dashboard.annotation-settings-edit.label-color', 'Color')}\n          description={t(\n            'dashboard.annotation-settings-edit.description-color-annotation-event-markers',\n            'Color to use for the annotation event markers'\n          )}\n        >\n          <HorizontalGroup>\n            <ColorValueEditor value={annotation?.iconColor} onChange={onColorChange} />\n          </HorizontalGroup>\n        </Field>\n        <Field\n          label={t('dashboard.annotation-settings-edit.label-show-in', 'Show in')}\n          data-testid={selectors.pages.Dashboard.Settings.Annotations.NewAnnotation.showInLabel}\n        >\n          <>\n            <Select\n              options={panelFilters}\n              value={panelFilter}\n              onChange={onFilterTypeChange}\n              data-testid={selectors.components.Annotations.annotationsTypeInput}\n            />\n            {panelFilter !== PanelFilterType.AllPanels && (\n              <MultiSelect\n                options={panels}\n                value={panels.filter((panel) => annotation.filter?.ids.includes(panel.value!))}\n                onChange={onAddFilterPanelID}\n                isClearable={true}\n                placeholder={t('dashboard.annotation-settings-edit.placeholder-choose-panels', 'Choose panels')}\n                width={100}\n                closeMenuOnSelect={false}\n                className={styles.select}\n                data-testid={selectors.components.Annotations.annotationsChoosePanelInput}\n              />\n            )}\n          </>\n        </Field>\n      </FieldSet>\n      <FieldSet>\n        <h3 className=\"page-heading\">\n          <Trans i18nKey=\"dashboard.annotation-settings-edit.query\">Query</Trans>\n        </h3>\n        {ds?.annotations && dsi && (\n          <StandardAnnotationQueryEditor\n            datasource={ds}\n            datasourceInstanceSettings={dsi}\n            annotation={annotation}\n            onChange={onUpdate}\n          />\n        )}\n      </FieldSet>\n      <Stack>\n        {!annotation.builtIn && (\n          <Button variant=\"destructive\" onClick={onDelete}>\n            <Trans i18nKey=\"dashboard.annotation-settings-edit.delete\">Delete</Trans>\n          </Button>\n        )}\n        <Button\n          variant=\"secondary\"\n          onClick={onPreview}\n          data-testid={selectors.pages.Dashboard.Settings.Annotations.NewAnnotation.previewInDashboard}\n        >\n          <Trans i18nKey=\"dashboard.annotation-settings-edit.preview-in-dashboard\">Preview in dashboard</Trans>\n        </Button>\n        <Button variant=\"primary\" onClick={onApply}>\n          <Trans i18nKey=\"dashboard.annotation-settings-edit.apply\">Apply</Trans>\n        </Button>\n      </Stack>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    settingsForm: css({\n      maxWidth: theme.spacing(60),\n      marginBottom: theme.spacing(2),\n    }),\n    select: css({\n      marginTop: '8px',\n    }),\n  };\n};\n\nfunction goBackToList() {\n  locationService.partial({ editIndex: null });\n}\n\n// Synthetic type\nenum PanelFilterType {\n  AllPanels,\n  IncludePanels,\n  ExcludePanels,\n}\n\nconst panelFilters = [\n  {\n    label: 'All panels',\n    value: PanelFilterType.AllPanels,\n    description: 'Send the annotation data to all panels that support annotations',\n  },\n  {\n    label: 'Selected panels',\n    value: PanelFilterType.IncludePanels,\n    description: 'Send the annotations to the explicitly listed panels',\n  },\n  {\n    label: 'All panels except',\n    value: PanelFilterType.ExcludePanels,\n    description: 'Do not send annotation data to the following panels',\n  },\n];\n","import { css } from '@emotion/css';\nimport { useState } from 'react';\n\nimport { arrayUtils, AnnotationQuery } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { Button, DeleteButton, EmptyState, IconButton, Stack, TextLink, useStyles2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { DashboardModel } from '../../state/DashboardModel';\nimport { ListNewButton } from '../DashboardSettings/ListNewButton';\n\ntype Props = {\n  dashboard: DashboardModel;\n  onNew: () => void;\n  onEdit: (idx: number) => void;\n};\n\nexport const AnnotationSettingsList = ({ dashboard, onNew, onEdit }: Props) => {\n  const styles = useStyles2(getStyles);\n  const [annotations, updateAnnotations] = useState(dashboard.annotations.list);\n\n  const onMove = (idx: number, direction: number) => {\n    dashboard.annotations.list = arrayUtils.moveItemImmutably(annotations, idx, idx + direction);\n    updateAnnotations(dashboard.annotations.list);\n  };\n\n  const onDelete = (idx: number) => {\n    dashboard.annotations.list = [...annotations.slice(0, idx), ...annotations.slice(idx + 1)];\n    updateAnnotations(dashboard.annotations.list);\n  };\n\n  const showEmptyListCTA = annotations.length === 0 || (annotations.length === 1 && annotations[0].builtIn);\n\n  const getAnnotationName = (anno: AnnotationQuery) => {\n    if (anno.enable === false) {\n      return (\n        <>\n          <em className=\"muted\">(Disabled) &nbsp; {anno.name}</em>\n        </>\n      );\n    }\n\n    if (anno.builtIn) {\n      return (\n        <>\n          <em className=\"muted\">{anno.name} &nbsp; (Built-in)</em>\n        </>\n      );\n    }\n\n    return <>{anno.name}</>;\n  };\n\n  const dataSourceSrv = getDataSourceSrv();\n  return (\n    <Stack direction=\"column\">\n      {annotations.length > 0 && (\n        <div className={styles.table}>\n          <table role=\"grid\" className=\"filter-table filter-table--hover\">\n            <thead>\n              <tr>\n                <th>\n                  <Trans i18nKey=\"dashboard.annotation-settings-list.query-name\">Query name</Trans>\n                </th>\n                <th>\n                  <Trans i18nKey=\"dashboard.annotation-settings-list.data-source\">Data source</Trans>\n                </th>\n                <th colSpan={3}></th>\n              </tr>\n            </thead>\n            <tbody>\n              {dashboard.annotations.list.map((annotation, idx) => (\n                <tr key={`${annotation.name}-${idx}`}>\n                  {annotation.builtIn ? (\n                    <td role=\"gridcell\" style={{ width: '90%' }} className=\"pointer\" onClick={() => onEdit(idx)}>\n                      <Button size=\"sm\" fill=\"text\" variant=\"secondary\">\n                        {getAnnotationName(annotation)}\n                      </Button>\n                    </td>\n                  ) : (\n                    <td role=\"gridcell\" className=\"pointer\" onClick={() => onEdit(idx)}>\n                      <Button size=\"sm\" fill=\"text\" variant=\"secondary\">\n                        {getAnnotationName(annotation)}\n                      </Button>\n                    </td>\n                  )}\n                  <td role=\"gridcell\" className=\"pointer\" onClick={() => onEdit(idx)}>\n                    {dataSourceSrv.getInstanceSettings(annotation.datasource)?.name || annotation.datasource?.uid}\n                  </td>\n                  <td role=\"gridcell\" style={{ width: '1%' }}>\n                    {idx !== 0 && (\n                      <IconButton\n                        name=\"arrow-up\"\n                        onClick={() => onMove(idx, -1)}\n                        tooltip={t('dashboard.annotation-settings-list.tooltip-move-up', 'Move up')}\n                      />\n                    )}\n                  </td>\n                  <td role=\"gridcell\" style={{ width: '1%' }}>\n                    {dashboard.annotations.list.length > 1 && idx !== dashboard.annotations.list.length - 1 ? (\n                      <IconButton\n                        name=\"arrow-down\"\n                        onClick={() => onMove(idx, 1)}\n                        tooltip={t('dashboard.annotation-settings-list.tooltip-move-down', 'Move down')}\n                      />\n                    ) : null}\n                  </td>\n                  <td role=\"gridcell\" style={{ width: '1%' }}>\n                    {!annotation.builtIn && (\n                      <DeleteButton\n                        size=\"sm\"\n                        onConfirm={() => onDelete(idx)}\n                        aria-label={`Delete query with title \"${annotation.name}\"`}\n                      />\n                    )}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n      {showEmptyListCTA && (\n        <Stack direction=\"column\">\n          <EmptyState\n            variant=\"call-to-action\"\n            button={\n              <Button\n                data-testid={selectors.components.CallToActionCard.buttonV2('Add annotation query')}\n                icon=\"comment-alt\"\n                onClick={onNew}\n                size=\"lg\"\n              >\n                <Trans i18nKey=\"annotations.empty-state.button-title\">Add annotation query</Trans>\n              </Button>\n            }\n            message={t('annotations.empty-state.title', 'There are no custom annotation queries added yet')}\n          >\n            <Trans i18nKey=\"annotations.empty-state.info-box-content\">\n              <p>\n                Annotations provide a way to integrate event data into your graphs. They are visualized as vertical\n                lines and icons on all graph panels. When you hover over an annotation icon you can get event text &amp;\n                tags for the event. You can add annotation events directly from grafana by holding CTRL or CMD + click\n                on graph (or drag region). These will be stored in Grafana&apos;s annotation database.\n              </p>\n            </Trans>\n            <Trans i18nKey=\"annotations.empty-state.info-box-content-2\">\n              Checkout the{' '}\n              <TextLink external href=\"http://docs.grafana.org/reference/annotations/\">\n                Annotations documentation\n              </TextLink>{' '}\n              for more information.\n            </Trans>\n          </EmptyState>\n        </Stack>\n      )}\n      {!showEmptyListCTA && (\n        <ListNewButton\n          data-testid={selectors.pages.Dashboard.Settings.Annotations.List.addAnnotationCTAV2}\n          onClick={onNew}\n        >\n          <Trans i18nKey=\"dashboard.annotation-settings-list.new-query\">New query</Trans>\n        </ListNewButton>\n      )}\n    </Stack>\n  );\n};\n\nconst getStyles = () => ({\n  table: css({\n    width: '100%',\n    overflowX: 'scroll',\n  }),\n});\n","import { AnnotationQuery, getDataSourceRef, NavModelItem } from '@grafana/data';\nimport { getDataSourceSrv, locationService } from '@grafana/runtime';\nimport { Page } from 'app/core/components/Page/Page';\n\nimport { DashboardModel } from '../../state/DashboardModel';\nimport { AnnotationSettingsEdit, AnnotationSettingsList, newAnnotationName } from '../AnnotationSettings';\n\nimport { SettingsPageProps } from './types';\n\nexport function AnnotationsSettings({ dashboard, editIndex, sectionNav }: SettingsPageProps) {\n  const onNew = () => {\n    const newAnnotation: AnnotationQuery = {\n      name: newAnnotationName,\n      enable: true,\n      datasource: getDataSourceRef(getDataSourceSrv().getInstanceSettings(null)!),\n      iconColor: 'red',\n    };\n\n    dashboard.annotations.list = [...dashboard.annotations.list, { ...newAnnotation }];\n    locationService.partial({ editIndex: dashboard.annotations.list.length - 1 });\n  };\n\n  const onEdit = (idx: number) => {\n    locationService.partial({ editIndex: idx });\n  };\n\n  const isEditing = editIndex != null && editIndex < dashboard.annotations.list.length;\n\n  return (\n    <Page navModel={sectionNav} pageNav={getSubPageNav(dashboard, editIndex, sectionNav.node)}>\n      {!isEditing && <AnnotationSettingsList dashboard={dashboard} onNew={onNew} onEdit={onEdit} />}\n      {isEditing && <AnnotationSettingsEdit dashboard={dashboard} editIdx={editIndex!} />}\n    </Page>\n  );\n}\n\nfunction getSubPageNav(\n  dashboard: DashboardModel,\n  editIndex: number | undefined,\n  node: NavModelItem\n): NavModelItem | undefined {\n  const parentItem = node.parentItem;\n  if (editIndex == null) {\n    return parentItem;\n  }\n\n  const editItem = dashboard.annotations.list[editIndex];\n  if (editItem) {\n    return {\n      text: editItem.name,\n      parentItem,\n    };\n  }\n\n  return undefined;\n}\n","import { css } from '@emotion/css';\nimport { connect, ConnectedProps } from 'react-redux';\nimport useAsyncFn from 'react-use/lib/useAsyncFn';\n\nimport { locationService, reportInteraction } from '@grafana/runtime';\nimport { Modal, Button, Text, Space, TextLink } from '@grafana/ui';\nimport { DashboardModel } from 'app/features/dashboard/state/DashboardModel';\nimport { cleanUpDashboardAndVariables } from 'app/features/dashboard/state/actions';\n\nimport { Trans, t } from '../../../../core/internationalization';\nimport { useDeleteItemsMutation } from '../../../browse-dashboards/api/browseDashboardsAPI';\nimport { DeleteDashboardModal as DeleteModal } from '../../../dashboard-scene/settings/DeleteDashboardButton';\n\ntype DeleteDashboardModalProps = {\n  hideModal(): void;\n  dashboard: DashboardModel;\n};\n\nconst mapDispatchToProps = {\n  cleanUpDashboardAndVariables,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\ntype Props = DeleteDashboardModalProps & ConnectedProps<typeof connector>;\n\nconst DeleteDashboardModalUnconnected = ({ hideModal, cleanUpDashboardAndVariables, dashboard }: Props) => {\n  const isProvisioned = dashboard.meta.provisioned;\n  const [deleteItems] = useDeleteItemsMutation();\n\n  const [, onConfirm] = useAsyncFn(async () => {\n    reportInteraction('grafana_manage_dashboards_delete_clicked', {\n      item_counts: {\n        dashboard: 1,\n      },\n      source: 'dashboard_settings',\n      restore_enabled: false,\n    });\n    await deleteItems({\n      selectedItems: {\n        dashboard: {\n          [dashboard.uid]: true,\n        },\n        folder: {},\n      },\n    });\n    cleanUpDashboardAndVariables();\n    hideModal();\n    locationService.replace('/');\n  }, [hideModal]);\n\n  if (isProvisioned) {\n    return <ProvisionedDeleteModal hideModal={hideModal} provisionedId={dashboard.meta.provisionedExternalId!} />;\n  }\n\n  return <DeleteModal onConfirm={onConfirm} onClose={hideModal} dashboardTitle={dashboard.title} />;\n};\n\nconst ProvisionedDeleteModal = ({ hideModal, provisionedId }: { hideModal(): void; provisionedId: string }) => (\n  <Modal\n    isOpen={true}\n    title={t('dashboard-settings.provisioned-delete-modal.title', 'Cannot delete provisioned dashboard')}\n    icon=\"trash-alt\"\n    onDismiss={hideModal}\n    className={css({\n      width: '500px',\n    })}\n  >\n    <Text element=\"p\">\n      <Trans i18nKey=\"dashboard-settings.provisioned-delete-modal.text-1\">\n        This dashboard is managed by Grafana provisioning and cannot be deleted. Remove the dashboard from the config\n        file to delete it.\n      </Trans>\n    </Text>\n    <Space v={1} />\n    <Text element=\"p\">\n      <Trans i18nKey=\"dashboard-settings.provisioned-delete-modal.text-2\">\n        See grafana documentation for more information about provisioning.&nbsp;\n      </Trans>\n      <TextLink href=\"https://grafana.com/docs/grafana/latest/administration/provisioning/#dashboards\" external>\n        {t('dashboard-settings.provisioned-delete-modal.text-link', 'Go to docs page')}\n      </TextLink>\n    </Text>\n    <Space v={2} />\n    <Text element=\"p\">\n      <Trans i18nKey=\"dashboard-settings.provisioned-delete-modal.text-3\">File path: {{ provisionedId }}</Trans>\n    </Text>\n    <Modal.ButtonRow>\n      <Button variant=\"primary\" onClick={hideModal}>\n        <Trans i18nKey=\"dashboard-settings.provisioned-delete-modal.confirm-button\">OK</Trans>\n      </Button>\n    </Modal.ButtonRow>\n  </Modal>\n);\n\nexport const DeleteDashboardModal = connector(DeleteDashboardModalUnconnected);\n","import { selectors } from '@grafana/e2e-selectors';\nimport { Button, ModalsController } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nimport { getDashboardSrv } from '../../services/DashboardSrv';\n\nimport { DeleteDashboardModal } from './DeleteDashboardModal';\n\nexport const DeleteDashboardButton = () => {\n  const dashboard = getDashboardSrv().getCurrent()!;\n  return (\n    <ModalsController>\n      {({ showModal, hideModal }) => (\n        <Button\n          variant=\"destructive\"\n          onClick={() => {\n            showModal(DeleteDashboardModal, {\n              dashboard,\n              hideModal,\n            });\n          }}\n          data-testid={selectors.pages.Dashboard.Settings.General.deleteDashBoard}\n        >\n          <Trans i18nKey=\"dashboard-settings.dashboard-delete-button\">Delete dashboard</Trans>\n        </Button>\n      )}\n    </ModalsController>\n  );\n};\n","import { useCallback, ChangeEvent, useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { TimeZone } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport {\n  CollapsableSection,\n  Field,\n  Input,\n  RadioButtonGroup,\n  TagsInput,\n  Label,\n  TextArea,\n  Box,\n  Stack,\n  WeekStart,\n} from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { FolderPicker } from 'app/core/components/Select/FolderPicker';\nimport { t, Trans } from 'app/core/internationalization';\nimport { updateTimeZoneDashboard, updateWeekStartDashboard } from 'app/features/dashboard/state/actions';\n\nimport { DeleteDashboardButton } from '../DeleteDashboard/DeleteDashboardButton';\nimport { GenAIDashDescriptionButton } from '../GenAI/GenAIDashDescriptionButton';\nimport { GenAIDashTitleButton } from '../GenAI/GenAIDashTitleButton';\n\nimport { TimePickerSettings } from './TimePickerSettings';\nimport { SettingsPageProps } from './types';\n\nexport type Props = SettingsPageProps & ConnectedProps<typeof connector>;\n\nconst GRAPH_TOOLTIP_OPTIONS = [\n  { value: 0, label: 'Default' },\n  { value: 1, label: 'Shared crosshair' },\n  { value: 2, label: 'Shared Tooltip' },\n];\n\nexport function GeneralSettingsUnconnected({\n  dashboard,\n  updateTimeZone,\n  updateWeekStart,\n  sectionNav,\n}: Props): JSX.Element {\n  const [renderCounter, setRenderCounter] = useState(0);\n  const [dashboardTitle, setDashboardTitle] = useState(dashboard.title);\n  const [dashboardDescription, setDashboardDescription] = useState(dashboard.description);\n  const pageNav = sectionNav.node.parentItem;\n\n  const onFolderChange = (newUID: string | undefined, newTitle: string | undefined) => {\n    dashboard.meta.folderUid = newUID;\n    dashboard.meta.folderTitle = newTitle;\n    dashboard.meta.hasUnsavedFolderChange = true;\n    setRenderCounter(renderCounter + 1);\n  };\n\n  const onTitleChange = useCallback(\n    (title: string) => {\n      dashboard.title = title;\n      setDashboardTitle(title);\n    },\n    [setDashboardTitle, dashboard]\n  );\n\n  const onDescriptionChange = useCallback(\n    (description: string) => {\n      dashboard.description = description;\n      setDashboardDescription(description);\n    },\n    [setDashboardDescription, dashboard]\n  );\n\n  const onTooltipChange = (graphTooltip: number) => {\n    dashboard.graphTooltip = graphTooltip;\n    setRenderCounter(renderCounter + 1);\n  };\n\n  const onRefreshIntervalChange = (intervals: string[]) => {\n    dashboard.timepicker.refresh_intervals = intervals.filter((i) => i.trim() !== '');\n  };\n\n  const onNowDelayChange = (nowDelay: string) => {\n    dashboard.timepicker.nowDelay = nowDelay;\n  };\n\n  const onHideTimePickerChange = (hide: boolean) => {\n    dashboard.timepicker.hidden = hide;\n    setRenderCounter(renderCounter + 1);\n  };\n\n  const onLiveNowChange = (v: boolean) => {\n    dashboard.liveNow = v;\n    setRenderCounter(renderCounter + 1);\n  };\n\n  const onTimeZoneChange = (timeZone: TimeZone) => {\n    dashboard.timezone = timeZone;\n    setRenderCounter(renderCounter + 1);\n    updateTimeZone(timeZone);\n  };\n\n  const onWeekStartChange = (weekStart?: WeekStart) => {\n    dashboard.weekStart = weekStart;\n    setRenderCounter(renderCounter + 1);\n    updateWeekStart(weekStart);\n  };\n\n  const onTagsChange = (tags: string[]) => {\n    dashboard.tags = tags;\n    setRenderCounter(renderCounter + 1);\n  };\n\n  const onEditableChange = (value: boolean) => {\n    dashboard.editable = value;\n    setRenderCounter(renderCounter + 1);\n  };\n\n  const editableOptions = [\n    { label: 'Editable', value: true },\n    { label: 'Read-only', value: false },\n  ];\n\n  return (\n    <Page navModel={sectionNav} pageNav={pageNav}>\n      <div style={{ maxWidth: '600px' }}>\n        <Box marginBottom={5}>\n          <Field\n            label={\n              <Stack justifyContent=\"space-between\">\n                <Label htmlFor=\"title-input\">\n                  <Trans i18nKey=\"dashboard-settings.general.title-label\">Title</Trans>\n                </Label>\n\n                {config.featureToggles.dashgpt && <GenAIDashTitleButton onGenerate={onTitleChange} />}\n              </Stack>\n            }\n          >\n            <Input\n              id=\"title-input\"\n              name=\"title\"\n              value={dashboardTitle}\n              onChange={(e: ChangeEvent<HTMLInputElement>) => onTitleChange(e.target.value)}\n            />\n          </Field>\n          <Field\n            label={\n              <Stack justifyContent=\"space-between\">\n                <Label htmlFor=\"description-input\">\n                  {t('dashboard-settings.general.description-label', 'Description')}\n                </Label>\n\n                {config.featureToggles.dashgpt && <GenAIDashDescriptionButton onGenerate={onDescriptionChange} />}\n              </Stack>\n            }\n          >\n            <TextArea\n              id=\"description-input\"\n              name=\"description\"\n              value={dashboardDescription}\n              onChange={(e: ChangeEvent<HTMLTextAreaElement>) => onDescriptionChange(e.target.value)}\n            />\n          </Field>\n          <Field label={t('dashboard-settings.general.tags-label', 'Tags')}>\n            <TagsInput id=\"tags-input\" tags={dashboard.tags} onChange={onTagsChange} width={40} />\n          </Field>\n\n          <Field label={t('dashboard-settings.general.folder-label', 'Folder')}>\n            <FolderPicker\n              value={dashboard.meta.folderUid}\n              onChange={onFolderChange}\n              // TODO deprecated props that can be removed once NestedFolderPicker is enabled by default\n              initialTitle={dashboard.meta.folderTitle}\n              inputId=\"dashboard-folder-input\"\n              enableCreateNew\n              dashboardId={dashboard.id}\n              skipInitialLoad\n            />\n          </Field>\n\n          <Field\n            label={t('dashboard-settings.general.editable-label', 'Editable')}\n            description={t(\n              'dashboard-settings.general.editable-description',\n              'Set to read-only to disable all editing. Reload the dashboard for changes to take effect'\n            )}\n          >\n            <RadioButtonGroup value={dashboard.editable} options={editableOptions} onChange={onEditableChange} />\n          </Field>\n        </Box>\n\n        <TimePickerSettings\n          onTimeZoneChange={onTimeZoneChange}\n          onWeekStartChange={onWeekStartChange}\n          onRefreshIntervalChange={onRefreshIntervalChange}\n          onNowDelayChange={onNowDelayChange}\n          onHideTimePickerChange={onHideTimePickerChange}\n          onLiveNowChange={onLiveNowChange}\n          refreshIntervals={dashboard.timepicker.refresh_intervals}\n          timePickerHidden={dashboard.timepicker.hidden}\n          nowDelay={dashboard.timepicker.nowDelay}\n          timezone={dashboard.timezone}\n          weekStart={dashboard.weekStart}\n          liveNow={dashboard.liveNow}\n        />\n\n        {/* @todo: Update \"Graph tooltip\" description to remove prompt about reloading when resolving #46581 */}\n        <CollapsableSection label={t('dashboard-settings.general.panel-options-label', 'Panel options')} isOpen={true}>\n          <Field\n            label={t('dashboard-settings.general.panel-options-graph-tooltip-label', 'Graph tooltip')}\n            description={t(\n              'dashboard-settings.general.panel-options-graph-tooltip-description',\n              'Controls tooltip and hover highlight behavior across different panels. Reload the dashboard for changes to take effect'\n            )}\n          >\n            <RadioButtonGroup\n              onChange={onTooltipChange}\n              options={GRAPH_TOOLTIP_OPTIONS}\n              value={dashboard.graphTooltip}\n            />\n          </Field>\n        </CollapsableSection>\n\n        <Box marginTop={3}>{dashboard.meta.canDelete && <DeleteDashboardButton />}</Box>\n      </div>\n    </Page>\n  );\n}\n\nconst mapDispatchToProps = {\n  updateTimeZone: updateTimeZoneDashboard,\n  updateWeekStart: updateWeekStartDashboard,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\nexport const GeneralSettings = connector(GeneralSettingsUnconnected);\n","import { css } from '@emotion/css';\nimport { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, CodeEditor, useStyles2 } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { Trans } from 'app/core/internationalization';\nimport { dashboardWatcher } from 'app/features/live/dashboard/dashboardWatcher';\n\nimport { getDashboardSrv } from '../../services/DashboardSrv';\n\nimport { SettingsPageProps } from './types';\n\nexport function JsonEditorSettings({ dashboard, sectionNav }: SettingsPageProps) {\n  const dashboardSaveModel = dashboard.getSaveModelClone();\n  const [dashboardJson, setDashboardJson] = useState<string>(JSON.stringify(dashboardSaveModel, null, 2));\n  const pageNav = sectionNav.node.parentItem;\n\n  const onClick = async () => {\n    await getDashboardSrv().saveJSONDashboard(dashboardJson);\n    dashboardWatcher.reloadPage();\n  };\n\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Page navModel={sectionNav} pageNav={pageNav}>\n      <div className={styles.wrapper}>\n        <Trans i18nKey=\"dashboard-settings.json-editor.subtitle\">\n          The JSON model below is the data structure that defines the dashboard. This includes dashboard settings, panel\n          settings, layout, queries, and so on.\n        </Trans>\n        <CodeEditor\n          value={dashboardJson}\n          language=\"json\"\n          showMiniMap={true}\n          showLineNumbers={true}\n          onBlur={setDashboardJson}\n          containerStyles={styles.codeEditor}\n        />\n        {dashboard.meta.canSave && (\n          <div>\n            <Button type=\"submit\" onClick={onClick}>\n              <Trans i18nKey=\"dashboard-settings.json-editor.save-button\">Save changes</Trans>\n            </Button>\n          </div>\n        )}\n      </div>\n    </Page>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    display: 'flex',\n    height: '100%',\n    flexDirection: 'column',\n    gap: theme.spacing(2),\n  }),\n  codeEditor: css({\n    flexGrow: 1,\n  }),\n});\n","import { useState } from 'react';\n\nimport { DashboardLink } from '@grafana/schema';\nimport { DashboardLinkForm } from 'app/features/dashboard-scene/settings/links/DashboardLinkForm';\nimport { NEW_LINK } from 'app/features/dashboard-scene/settings/links/utils';\n\nimport { DashboardModel } from '../../state/DashboardModel';\n\ntype LinkSettingsEditProps = {\n  editLinkIdx: number;\n  dashboard: DashboardModel;\n  onGoBack: () => void;\n};\n\nexport const LinkSettingsEdit = ({ editLinkIdx, dashboard, onGoBack }: LinkSettingsEditProps) => {\n  const [linkSettings, setLinkSettings] = useState(editLinkIdx !== null ? dashboard.links[editLinkIdx] : NEW_LINK);\n\n  const onUpdate = (link: DashboardLink) => {\n    const links = [...dashboard.links];\n    links.splice(editLinkIdx, 1, link);\n    dashboard.links = links;\n    setLinkSettings(link);\n  };\n\n  return <DashboardLinkForm link={linkSettings} onUpdate={onUpdate} onGoBack={onGoBack} />;\n};\n","import { useState } from 'react';\n\nimport { arrayUtils } from '@grafana/data';\nimport { DashboardLink } from '@grafana/schema';\nimport { DashboardLinkList } from 'app/features/dashboard-scene/settings/links/DashboardLinkList';\n\nimport { DashboardModel } from '../../state/DashboardModel';\n\ntype LinkSettingsListProps = {\n  dashboard: DashboardModel;\n  onNew: () => void;\n  onEdit: (idx: number) => void;\n};\n\n/**\n * Used in DashboardSettings to display the list of links.\n * It updates the DashboardModel instance when links are added, edited, duplicated or deleted.\n */\nexport const LinkSettingsList = ({ dashboard, onNew, onEdit }: LinkSettingsListProps) => {\n  const [links, setLinks] = useState(dashboard.links);\n\n  const moveLink = (idx: number, direction: number) => {\n    dashboard.links = arrayUtils.moveItemImmutably(links, idx, idx + direction);\n    setLinks(dashboard.links);\n  };\n\n  const duplicateLink = (link: DashboardLink) => {\n    dashboard.links = [...links, { ...link }];\n    setLinks(dashboard.links);\n  };\n\n  const deleteLink = (idx: number) => {\n    dashboard.links = [...links.slice(0, idx), ...links.slice(idx + 1)];\n    setLinks(dashboard.links);\n  };\n\n  return (\n    <DashboardLinkList\n      links={links}\n      onNew={onNew}\n      onEdit={onEdit}\n      onDuplicate={duplicateLink}\n      onDelete={deleteLink}\n      onOrderChange={moveLink}\n    />\n  );\n};\n","import { useState } from 'react';\n\nimport { locationService } from '@grafana/runtime';\nimport { Page } from 'app/core/components/Page/Page';\nimport { NEW_LINK } from 'app/features/dashboard-scene/settings/links/utils';\n\nimport { LinkSettingsEdit, LinkSettingsList } from '../LinksSettings';\n\nimport { SettingsPageProps } from './types';\n\nexport type LinkSettingsMode = 'list' | 'new' | 'edit';\n\nexport function LinksSettings({ dashboard, sectionNav, editIndex }: SettingsPageProps) {\n  const [isNew, setIsNew] = useState<boolean>(false);\n\n  const onGoBack = () => {\n    setIsNew(false);\n    locationService.partial({ editIndex: undefined });\n  };\n\n  const onNew = () => {\n    dashboard.links = [...dashboard.links, { ...NEW_LINK }];\n    setIsNew(true);\n    locationService.partial({ editIndex: dashboard.links.length - 1 });\n  };\n\n  const onEdit = (idx: number) => {\n    setIsNew(false);\n    locationService.partial({ editIndex: idx });\n  };\n\n  const isEditing = editIndex !== undefined;\n\n  let pageNav = sectionNav.node.parentItem;\n\n  if (isEditing) {\n    const title = isNew ? 'New link' : 'Edit link';\n    const description = isNew ? 'Create a new link on your dashboard' : 'Edit a specific link of your dashboard';\n    pageNav = {\n      text: title,\n      subTitle: description,\n      parentItem: sectionNav.node.parentItem,\n    };\n  }\n\n  return (\n    <Page navModel={sectionNav} pageNav={pageNav}>\n      {!isEditing && <LinkSettingsList dashboard={dashboard} onNew={onNew} onEdit={onEdit} />}\n      {isEditing && <LinkSettingsEdit dashboard={dashboard} editLinkIdx={editIndex} onGoBack={onGoBack} />}\n    </Page>\n  );\n}\n","import { useEffect } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { locationUtil } from '@grafana/data';\nimport { config, locationService } from '@grafana/runtime';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { historySrv } from 'app/features/dashboard-scene/settings/version-history';\nimport { useSelector } from 'app/types';\n\nimport { dashboardWatcher } from '../../../live/dashboard/dashboardWatcher';\nimport { DashboardModel } from '../../state/DashboardModel';\n\nconst restoreDashboard = async (version: number, dashboard: DashboardModel) => {\n  // Skip the watcher logic for this save since it's handled by the hook\n  dashboardWatcher.ignoreNextSave();\n  return await historySrv.restoreDashboard(dashboard.uid, version);\n};\n\nexport const useDashboardRestore = (id: number, version: number) => {\n  const dashboard = useSelector((state) => state.dashboard.getModel());\n  const [state, onRestoreDashboard] = useAsyncFn(\n    async () =>\n      await restoreDashboard(config.featureToggles.kubernetesClientDashboardsFolders ? id : version, dashboard!),\n    []\n  );\n  const notifyApp = useAppNotification();\n\n  useEffect(() => {\n    if (state.value) {\n      const location = locationService.getLocation();\n      const newUrl = locationUtil.stripBaseFromUrl(state.value.url);\n      const prevState = (location.state as any)?.routeReloadCounter;\n      locationService.replace({\n        ...location,\n        pathname: newUrl,\n        state: { routeReloadCounter: prevState ? prevState + 1 : 1 },\n      });\n      notifyApp.success('Dashboard restored', `Restored from version ${version}`);\n    }\n  }, [state, version, notifyApp]);\n  return { state, onRestoreDashboard };\n};\n","import { useEffect } from 'react';\n\nimport { ConfirmModal } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { useDashboardRestore } from './useDashboardRestore';\nexport interface RevertDashboardModalProps {\n  hideModal: () => void;\n  id: number;\n  version: number;\n}\n\nexport const RevertDashboardModal = ({ hideModal, id, version }: RevertDashboardModalProps) => {\n  // TODO: how should state.error be handled?\n  const { state, onRestoreDashboard } = useDashboardRestore(id, version);\n\n  useEffect(() => {\n    if (!state.loading && state.value) {\n      hideModal();\n    }\n  }, [state, hideModal]);\n\n  return (\n    <ConfirmModal\n      isOpen={true}\n      title={t('dashboard.revert-dashboard-modal.title-restore-version', 'Restore version')}\n      icon=\"history\"\n      onDismiss={hideModal}\n      onConfirm={onRestoreDashboard}\n      body={\n        <p>Are you sure you want to restore the dashboard to version {version}? All unsaved changes will be lost.</p>\n      }\n      confirmText={`Yes, restore to version ${version}`}\n    />\n  );\n};\n","import { css, cx } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, ModalsController, CollapsableSection, useStyles2, Stack, Icon, Box } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\nimport { DiffGroup } from 'app/features/dashboard-scene/settings/version-history/DiffGroup';\nimport { DiffViewer } from 'app/features/dashboard-scene/settings/version-history/DiffViewer';\nimport { jsonDiff } from 'app/features/dashboard-scene/settings/version-history/utils';\n\nimport { DecoratedRevisionModel } from '../DashboardSettings/VersionsSettings';\n\nimport { RevertDashboardModal } from './RevertDashboardModal';\n\ntype DiffViewProps = {\n  isNewLatest: boolean;\n  newInfo: DecoratedRevisionModel;\n  baseInfo: DecoratedRevisionModel;\n  diffData: { lhs: string; rhs: string };\n};\n\nexport const VersionHistoryComparison = ({ baseInfo, newInfo, diffData, isNewLatest }: DiffViewProps) => {\n  const diff = jsonDiff(diffData.lhs, diffData.rhs);\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Stack direction=\"column\" gap={1}>\n      <Stack justifyContent=\"space-between\" alignItems=\"center\">\n        <Stack alignItems=\"center\">\n          <span className={cx(styles.versionInfo, styles.noMarginBottom)}>\n            <strong>Version {baseInfo.version}</strong> updated by {baseInfo.createdBy} {baseInfo.ageString}\n            {baseInfo.message}\n          </span>\n          <Icon name=\"arrow-right\" size=\"sm\" />\n          <span className={styles.versionInfo}>\n            <strong>Version {newInfo.version}</strong> updated by {newInfo.createdBy} {newInfo.ageString}\n            {newInfo.message}\n          </span>\n        </Stack>\n        {isNewLatest && (\n          <ModalsController>\n            {({ showModal, hideModal }) => (\n              <Button\n                variant=\"destructive\"\n                icon=\"history\"\n                onClick={() => {\n                  showModal(RevertDashboardModal, {\n                    id: baseInfo.id,\n                    version: baseInfo.version,\n                    hideModal,\n                  });\n                }}\n              >\n                Restore to version {baseInfo.version}\n              </Button>\n            )}\n          </ModalsController>\n        )}\n      </Stack>\n\n      {Object.entries(diff).map(([key, diffs]) => (\n        <DiffGroup diffs={diffs} key={key} title={key} />\n      ))}\n\n      <Box paddingTop={2}>\n        <CollapsableSection\n          isOpen={false}\n          label={t('dashboard.version-history-comparison.label-view-json-diff', 'View JSON diff')}\n        >\n          <DiffViewer\n            oldValue={JSON.stringify(diffData.lhs, null, 2)}\n            newValue={JSON.stringify(diffData.rhs, null, 2)}\n          />\n        </CollapsableSection>\n      </Box>\n    </Stack>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  versionInfo: css({\n    color: theme.colors.text.secondary,\n    fontSize: theme.typography.bodySmall.fontSize,\n  }),\n  noMarginBottom: css({\n    marginBottom: 0,\n  }),\n});\n","import { css } from '@emotion/css';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Checkbox, Button, Tag, ModalsController, useStyles2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nimport { DecoratedRevisionModel } from '../DashboardSettings/VersionsSettings';\n\nimport { RevertDashboardModal } from './RevertDashboardModal';\n\ntype VersionsTableProps = {\n  versions: DecoratedRevisionModel[];\n  canCompare: boolean;\n  onCheck: (ev: React.FormEvent<HTMLInputElement>, versionId: number) => void;\n};\n\nexport const VersionHistoryTable = ({ versions, canCompare, onCheck }: VersionsTableProps) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.margin}>\n      <table className=\"filter-table\">\n        <thead>\n          <tr>\n            <th className=\"width-4\"></th>\n            <th className=\"width-4\">\n              <Trans i18nKey=\"dashboard.version-history-table.version\">Version</Trans>\n            </th>\n            <th className=\"width-14\">\n              <Trans i18nKey=\"dashboard.version-history-table.date\">Date</Trans>\n            </th>\n            <th className=\"width-10\">\n              <Trans i18nKey=\"dashboard.version-history-table.updated-by\">Updated by</Trans>\n            </th>\n            <th>\n              <Trans i18nKey=\"dashboard.version-history-table.notes\">Notes</Trans>\n            </th>\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          {versions.map((version, idx) => (\n            <tr key={version.id}>\n              <td>\n                <Checkbox\n                  aria-label={`Toggle selection of version ${version.version}`}\n                  className={css({\n                    display: 'inline',\n                  })}\n                  checked={version.checked}\n                  onChange={(ev) => onCheck(ev, version.id)}\n                  disabled={!version.checked && canCompare}\n                />\n              </td>\n              <td>{version.version}</td>\n              <td>{version.createdDateString}</td>\n              <td>{version.createdBy}</td>\n              <td>{version.message}</td>\n              <td className=\"text-right\">\n                {idx === 0 ? (\n                  <Tag name=\"Latest\" colorIndex={17} />\n                ) : (\n                  <ModalsController>\n                    {({ showModal, hideModal }) => (\n                      <Button\n                        variant=\"secondary\"\n                        size=\"sm\"\n                        icon=\"history\"\n                        onClick={() => {\n                          showModal(RevertDashboardModal, {\n                            id: version.id,\n                            version: version.version,\n                            hideModal,\n                          });\n                        }}\n                      >\n                        <Trans i18nKey=\"dashboard.version-history-table.restore\">Restore</Trans>\n                      </Button>\n                    )}\n                  </ModalsController>\n                )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    margin: css({\n      marginBottom: theme.spacing(4),\n    }),\n  };\n}\n","import { PureComponent } from 'react';\nimport * as React from 'react';\n\nimport { config } from '@grafana/runtime';\nimport { Spinner, HorizontalGroup } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport {\n  historySrv,\n  RevisionsModel,\n  VersionHistoryHeader,\n  VersionsHistoryButtons,\n} from 'app/features/dashboard-scene/settings/version-history';\n\nimport { VersionHistoryComparison } from '../VersionHistory/VersionHistoryComparison';\nimport { VersionHistoryTable } from '../VersionHistory/VersionHistoryTable';\n\nimport { SettingsPageProps } from './types';\n\ninterface Props extends SettingsPageProps {}\n\ntype State = {\n  isLoading: boolean;\n  isAppending: boolean;\n  versions: DecoratedRevisionModel[];\n  viewMode: 'list' | 'compare';\n  diffData: { lhs: string; rhs: string };\n  newInfo?: DecoratedRevisionModel;\n  baseInfo?: DecoratedRevisionModel;\n  isNewLatest: boolean;\n};\n\nexport type DecoratedRevisionModel = RevisionsModel & {\n  createdDateString: string;\n  ageString: string;\n};\n\nexport const VERSIONS_FETCH_LIMIT = 10;\n\nexport class VersionsSettings extends PureComponent<Props, State> {\n  limit: number;\n  start: number;\n  continueToken: string;\n\n  constructor(props: Props) {\n    super(props);\n    this.limit = VERSIONS_FETCH_LIMIT;\n    this.start = 0;\n    this.continueToken = '';\n    this.state = {\n      isAppending: true,\n      isLoading: true,\n      versions: [],\n      viewMode: 'list',\n      isNewLatest: false,\n      diffData: {\n        lhs: '',\n        rhs: '',\n      },\n    };\n  }\n\n  componentDidMount() {\n    this.getVersions();\n  }\n\n  getVersions = (append = false) => {\n    this.setState({ isAppending: append });\n    const requestOptions = this.continueToken\n      ? { limit: this.limit, start: this.start, continueToken: this.continueToken }\n      : { limit: this.limit, start: this.start };\n\n    historySrv\n      .getHistoryList(this.props.dashboard.uid, requestOptions)\n      .then((res) => {\n        this.setState({\n          isLoading: false,\n          versions: [...(this.state.versions ?? []), ...this.decorateVersions(res.versions)],\n        });\n        this.start += this.limit;\n        // Update the continueToken for the next request, if available\n        this.continueToken = res.continueToken ?? '';\n      })\n      .catch((err) => console.log(err))\n      .finally(() => this.setState({ isAppending: false }));\n  };\n\n  getDiff = async () => {\n    const selectedVersions = this.state.versions.filter((version) => version.checked);\n    const [newInfo, baseInfo] = selectedVersions;\n    const isNewLatest = newInfo.version === this.props.dashboard.version;\n\n    this.setState({\n      isLoading: true,\n    });\n\n    let lhs, rhs;\n    if (config.featureToggles.kubernetesClientDashboardsFolders) {\n      // the id here is the resource version in k8s, use this instead to get the specific version\n      lhs = await historySrv.getDashboardVersion(this.props.dashboard.uid, baseInfo.id);\n      rhs = await historySrv.getDashboardVersion(this.props.dashboard.uid, newInfo.id);\n    } else {\n      lhs = await historySrv.getDashboardVersion(this.props.dashboard.uid, baseInfo.version);\n      rhs = await historySrv.getDashboardVersion(this.props.dashboard.uid, newInfo.version);\n    }\n\n    this.setState({\n      baseInfo,\n      isLoading: false,\n      isNewLatest,\n      newInfo,\n      viewMode: 'compare',\n      diffData: {\n        lhs: lhs.data,\n        rhs: rhs.data,\n      },\n    });\n  };\n\n  decorateVersions = (versions: RevisionsModel[]) =>\n    versions.map((version) => ({\n      ...version,\n      createdDateString: this.props.dashboard.formatDate(version.created),\n      ageString: this.props.dashboard.getRelativeTime(version.created),\n      checked: false,\n    }));\n\n  isLastPage() {\n    if (config.featureToggles.kubernetesClientDashboardsFolders) {\n      return (\n        this.state.versions.find((rev) => rev.version === 1) ||\n        this.state.versions.length % this.limit !== 0 ||\n        this.continueToken === ''\n      );\n    }\n    return this.state.versions.find((rev) => rev.version === 1) || this.state.versions.length % this.limit !== 0;\n  }\n\n  onCheck = (ev: React.FormEvent<HTMLInputElement>, versionId: number) => {\n    this.setState({\n      versions: this.state.versions.map((version) =>\n        version.id === versionId ? { ...version, checked: ev.currentTarget.checked } : version\n      ),\n    });\n  };\n\n  reset = () => {\n    this.continueToken = '';\n    this.setState({\n      baseInfo: undefined,\n      diffData: {\n        lhs: '',\n        rhs: '',\n      },\n      isNewLatest: false,\n      newInfo: undefined,\n      versions: this.state.versions.map((version) => ({ ...version, checked: false })),\n      viewMode: 'list',\n    });\n  };\n\n  render() {\n    const { versions, viewMode, baseInfo, newInfo, isNewLatest, isLoading, diffData } = this.state;\n    const canCompare = versions.filter((version) => version.checked).length === 2;\n    const showButtons = versions.length > 1;\n    const hasMore = versions.length >= this.limit;\n    const pageNav = this.props.sectionNav.node.parentItem;\n\n    if (viewMode === 'compare') {\n      return (\n        <Page navModel={this.props.sectionNav} pageNav={pageNav}>\n          <VersionHistoryHeader\n            onClick={this.reset}\n            baseVersion={baseInfo?.version}\n            newVersion={newInfo?.version}\n            isNewLatest={isNewLatest}\n          />\n          {isLoading ? (\n            <VersionsHistorySpinner msg=\"Fetching changes&hellip;\" />\n          ) : (\n            <VersionHistoryComparison\n              newInfo={newInfo!}\n              baseInfo={baseInfo!}\n              isNewLatest={isNewLatest}\n              diffData={diffData}\n            />\n          )}\n        </Page>\n      );\n    }\n\n    return (\n      <Page navModel={this.props.sectionNav} pageNav={pageNav}>\n        {isLoading ? (\n          <VersionsHistorySpinner msg=\"Fetching history list&hellip;\" />\n        ) : (\n          <VersionHistoryTable versions={versions} onCheck={this.onCheck} canCompare={canCompare} />\n        )}\n        {this.state.isAppending && <VersionsHistorySpinner msg=\"Fetching more entries&hellip;\" />}\n        {showButtons && (\n          <VersionsHistoryButtons\n            hasMore={hasMore}\n            canCompare={canCompare}\n            getVersions={this.getVersions}\n            getDiff={this.getDiff}\n            isLastPage={!!this.isLastPage()}\n          />\n        )}\n      </Page>\n    );\n  }\n}\n\nexport const VersionsHistorySpinner = ({ msg }: { msg: string }) => (\n  <HorizontalGroup>\n    <Spinner />\n    <em>{msg}</em>\n  </HorizontalGroup>\n);\n","import * as H from 'history';\nimport { useEffect, useMemo, useState } from 'react';\nimport { useLocation } from 'react-router-dom-v5-compat';\n\nimport { locationUtil, NavModel, NavModelItem } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { locationService } from '@grafana/runtime';\nimport { Button, Stack, Text, ToolbarButtonRow } from '@grafana/ui';\nimport { AppChromeUpdate } from 'app/core/components/AppChrome/AppChromeUpdate';\nimport { Page } from 'app/core/components/Page/Page';\nimport { t, Trans } from 'app/core/internationalization';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction } from 'app/types';\nimport { DashboardMetaChangedEvent } from 'app/types/events';\n\nimport { VariableEditorContainer } from '../../../variables/editor/VariableEditorContainer';\nimport { DashboardModel } from '../../state/DashboardModel';\nimport { AccessControlDashboardPermissions } from '../DashboardPermissions/AccessControlDashboardPermissions';\nimport { SaveDashboardAsButton, SaveDashboardButton } from '../SaveDashboard/SaveDashboardButton';\n\nimport { AnnotationsSettings } from './AnnotationsSettings';\nimport { GeneralSettings } from './GeneralSettings';\nimport { JsonEditorSettings } from './JsonEditorSettings';\nimport { LinksSettings } from './LinksSettings';\nimport { VersionsSettings } from './VersionsSettings';\nimport { SettingsPage, SettingsPageProps } from './types';\n\nexport interface Props {\n  dashboard: DashboardModel;\n  sectionNav: NavModel;\n  pageNav: NavModelItem;\n  editview: string;\n}\n\nconst onClose = () => locationService.partial({ editview: null, editIndex: null });\n\nexport function DashboardSettings({ dashboard, editview, pageNav, sectionNav }: Props) {\n  const [updateId, setUpdateId] = useState(0);\n  useEffect(() => {\n    dashboard.events.subscribe(DashboardMetaChangedEvent, () => setUpdateId((v) => v + 1));\n  }, [dashboard]);\n\n  // updateId in deps so we can revaluate when dashboard is mutated\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const pages = useMemo(() => getSettingsPages(dashboard), [dashboard, updateId]);\n\n  const onPostSave = () => {\n    dashboard.meta.hasUnsavedFolderChange = false;\n  };\n\n  const currentPage = pages.find((page) => page.id === editview) ?? pages[0];\n  const canSaveAs = contextSrv.hasEditPermissionInFolders;\n  const canSave = dashboard.meta.canSave;\n  const location = useLocation();\n  const editIndex = getEditIndex(location);\n  const subSectionNav = getSectionNav(pageNav, sectionNav, pages, currentPage, location, dashboard.uid);\n  const size = 'sm';\n\n  const actions = [\n    <Button\n      data-testid={selectors.pages.Dashboard.Settings.Actions.close}\n      variant=\"secondary\"\n      key=\"close\"\n      fill=\"outline\"\n      size={size}\n      onClick={onClose}\n    >\n      <Trans i18nKey=\"dashboard.dashboard-settings.actions.close\">Close</Trans>\n    </Button>,\n    canSaveAs && (\n      <SaveDashboardAsButton\n        dashboard={dashboard}\n        onSaveSuccess={onPostSave}\n        variant=\"secondary\"\n        key=\"save as\"\n        size={size}\n      />\n    ),\n    canSave && <SaveDashboardButton dashboard={dashboard} onSaveSuccess={onPostSave} key=\"Save\" size={size} />,\n  ];\n\n  return (\n    <>\n      <AppChromeUpdate actions={<ToolbarButtonRow alignment=\"right\">{actions}</ToolbarButtonRow>} />\n      <currentPage.component sectionNav={subSectionNav} dashboard={dashboard} editIndex={editIndex} />\n    </>\n  );\n}\n\nfunction getSettingsPages(dashboard: DashboardModel) {\n  const pages: SettingsPage[] = [];\n\n  const generalTitle = t('dashboard-settings.general.title', 'General');\n\n  if (dashboard.meta.canEdit) {\n    pages.push({\n      title: generalTitle,\n      id: 'settings',\n      icon: 'sliders-v-alt',\n      component: GeneralSettings,\n    });\n\n    pages.push({\n      title: t('dashboard-settings.annotations.title', 'Annotations'),\n      id: 'annotations',\n      icon: 'comment-alt',\n      component: AnnotationsSettings,\n      subTitle:\n        'Annotation queries return events that can be visualized as event markers in graphs across the dashboard.',\n    });\n\n    pages.push({\n      title: t('dashboard-settings.variables.title', 'Variables'),\n      id: 'templating',\n      icon: 'calculator-alt',\n      component: VariableEditorContainer,\n      subTitle: 'Variables can make your dashboard more dynamic and act as global filters.',\n    });\n\n    pages.push({\n      title: t('dashboard-settings.links.title', 'Links'),\n      id: 'links',\n      icon: 'link',\n      component: LinksSettings,\n    });\n  }\n\n  if (dashboard.meta.canMakeEditable) {\n    pages.push({\n      title: generalTitle,\n      icon: 'sliders-v-alt',\n      id: 'settings',\n      component: MakeEditable,\n    });\n  }\n\n  if (dashboard.uid && dashboard.meta.canSave) {\n    pages.push({\n      title: t('dashboard-settings.versions.title', 'Versions'),\n      id: 'versions',\n      icon: 'history',\n      component: VersionsSettings,\n    });\n  }\n\n  const permissionsTitle = t('dashboard-settings.permissions.title', 'Permissions');\n\n  if (dashboard.uid && dashboard.meta.canAdmin) {\n    if (contextSrv.hasPermission(AccessControlAction.DashboardsPermissionsRead)) {\n      pages.push({\n        title: permissionsTitle,\n        id: 'permissions',\n        icon: 'lock',\n        component: AccessControlDashboardPermissions,\n      });\n    }\n  }\n\n  pages.push({\n    title: t('dashboard-settings.json-editor.title', 'JSON Model'),\n    id: 'dashboard_json',\n    icon: 'arrow',\n    component: JsonEditorSettings,\n  });\n\n  return pages;\n}\n\nfunction applySectionAsParent(node: NavModelItem, parent: NavModelItem): NavModelItem {\n  return {\n    ...node,\n    parentItem: node.parentItem ? applySectionAsParent(node.parentItem, parent) : parent,\n  };\n}\n\nfunction getSectionNav(\n  pageNav: NavModelItem,\n  sectionNav: NavModel,\n  pages: SettingsPage[],\n  currentPage: SettingsPage,\n  location: H.Location,\n  dashboardUid: string\n): NavModel {\n  const main: NavModelItem = {\n    text: t('dashboard-settings.settings.title', 'Settings'),\n    children: [],\n    icon: 'apps',\n    hideFromBreadcrumbs: false,\n    url: locationUtil.getUrlForPartial(location, { editview: 'settings', editIndex: null }),\n  };\n\n  main.children = pages.map((page) => ({\n    text: page.title,\n    icon: page.icon,\n    id: `${dashboardUid}/${page.id}`,\n    url: locationUtil.getUrlForPartial(location, { editview: page.id, editIndex: null }),\n    active: page === currentPage,\n    parentItem: main,\n    subTitle: page.subTitle,\n  }));\n\n  const pageNavWithSectionParent = applySectionAsParent(pageNav, sectionNav.main);\n\n  main.parentItem = pageNavWithSectionParent;\n\n  return {\n    main,\n    node: main.children.find((x) => x.active)!,\n  };\n}\n\nfunction MakeEditable({ dashboard, sectionNav }: SettingsPageProps) {\n  return (\n    <Page navModel={sectionNav}>\n      <Stack direction=\"column\" gap={2} alignItems=\"flex-start\">\n        <Text variant=\"h3\">\n          <Trans i18nKey=\"dashboard.make-editable.dashboard-not-editable\">Dashboard not editable</Trans>\n        </Text>\n        <Button type=\"submit\" onClick={() => dashboard.makeEditable()}>\n          <Trans i18nKey=\"dashboard.make-editable.make-editable\">Make editable</Trans>\n        </Button>\n      </Stack>\n    </Page>\n  );\n}\n\nfunction getEditIndex(location: H.Location): number | undefined {\n  const editIndex = new URLSearchParams(location.search).get('editIndex');\n  if (editIndex != null) {\n    return parseInt(editIndex, 10);\n  }\n  return undefined;\n}\n","import { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport { StoreState } from 'app/types';\n\nimport { PanelState } from './reducers';\n\nexport function getPanelStateForModel(state: StoreState, model: PanelModel): PanelState | undefined {\n  return state.panels[model.key];\n}\n","import saveAs from 'file-saver';\n\nimport { dateTimeFormat, formattedValueToString, getValueFormat, SelectableValue } from '@grafana/data';\nimport { SceneObject } from '@grafana/scenes';\nimport { StateManagerBase } from 'app/core/services/StateManagerBase';\nimport { Randomize } from 'app/features/dashboard-scene/inspect/HelpWizard/randomizer';\nimport { createDashboardSceneFromDashboardModel } from 'app/features/dashboard-scene/serialization/transformSaveModelToScene';\n\nimport { getTimeSrv } from '../../services/TimeSrv';\nimport { DashboardModel } from '../../state/DashboardModel';\nimport { PanelModel } from '../../state/PanelModel';\n\nimport { getDebugDashboard, getGithubMarkdown } from './utils';\n\ninterface SupportSnapshotState {\n  currentTab: SnapshotTab;\n  showMessage: ShowMessage;\n  options: Array<SelectableValue<ShowMessage>>;\n  snapshotText: string;\n  markdownText: string;\n  snapshotSize?: string;\n  randomize: Randomize;\n  loading?: boolean;\n  error?: {\n    title: string;\n    message: string;\n  };\n  panel: PanelModel;\n  panelTitle: string;\n\n  // eslint-disable-next-line\n  snapshot?: any;\n  snapshotUpdate: number;\n  scene?: SceneObject;\n}\n\nexport enum SnapshotTab {\n  Support,\n  Data,\n}\n\nexport enum ShowMessage {\n  PanelSnapshot,\n  GithubComment,\n}\n\nexport class SupportSnapshotService extends StateManagerBase<SupportSnapshotState> {\n  constructor(panel: PanelModel) {\n    super({\n      panel,\n      panelTitle: panel.replaceVariables(panel.title, undefined, 'text') || 'Panel',\n      currentTab: SnapshotTab.Support,\n      showMessage: ShowMessage.GithubComment,\n      snapshotText: '',\n      markdownText: '',\n      randomize: {},\n      snapshotUpdate: 0,\n      options: [\n        {\n          label: 'GitHub comment',\n          description: 'Copy and paste this message into a GitHub issue or comment',\n          value: ShowMessage.GithubComment,\n        },\n        {\n          label: 'Panel support snapshot',\n          description: 'Dashboard JSON used to help troubleshoot visualization issues',\n          value: ShowMessage.PanelSnapshot,\n        },\n      ],\n    });\n  }\n\n  async buildDebugDashboard() {\n    const { panel, randomize, snapshotUpdate } = this.state;\n    const snapshot = await getDebugDashboard(panel, randomize, getTimeSrv().timeRange());\n    const snapshotText = JSON.stringify(snapshot, null, 2);\n    const markdownText = getGithubMarkdown(panel, snapshotText);\n    const snapshotSize = formattedValueToString(getValueFormat('bytes')(snapshotText?.length ?? 0));\n\n    let scene: SceneObject | undefined = undefined;\n\n    if (!panel.isAngularPlugin()) {\n      try {\n        const oldModel = new DashboardModel(snapshot, { isEmbedded: true });\n        const dash = createDashboardSceneFromDashboardModel(oldModel, snapshot);\n        scene = dash.state.body; // skip the wrappers\n      } catch (ex) {\n        console.log('Error creating scene:', ex);\n      }\n    }\n\n    this.setState({ snapshot, snapshotText, markdownText, snapshotSize, snapshotUpdate: snapshotUpdate + 1, scene });\n  }\n\n  onCurrentTabChange = (value: SnapshotTab) => {\n    this.setState({ currentTab: value });\n  };\n\n  onShowMessageChange = (value: SelectableValue<ShowMessage>) => {\n    this.setState({ showMessage: value.value! });\n  };\n\n  onGetMarkdownForClipboard = () => {\n    const { markdownText } = this.state;\n    const maxLen = Math.pow(1024, 2) * 1.5; // 1.5MB\n\n    if (markdownText.length > maxLen) {\n      this.setState({\n        error: {\n          title: 'Copy to clipboard failed',\n          message: 'Snapshot is too large, consider download and attaching a file instead',\n        },\n      });\n\n      return '';\n    }\n\n    return markdownText;\n  };\n\n  onDownloadDashboard = () => {\n    const { snapshotText, panelTitle } = this.state;\n    const blob = new Blob([snapshotText], {\n      type: 'text/plain',\n    });\n    const fileName = `debug-${panelTitle}-${dateTimeFormat(new Date())}.json.txt`;\n    saveAs(blob, fileName);\n  };\n\n  onSetSnapshotText = (snapshotText: string) => {\n    this.setState({ snapshotText });\n  };\n\n  onToggleRandomize = (k: keyof Randomize) => {\n    const { randomize } = this.state;\n    this.setState({ randomize: { ...randomize, [k]: !randomize[k] } });\n  };\n}\n","import { css } from '@emotion/css';\nimport { useMemo, useEffect } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { PanelPlugin, GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport {\n  Drawer,\n  Tab,\n  TabsBar,\n  CodeEditor,\n  useStyles2,\n  Field,\n  InlineSwitch,\n  Button,\n  Spinner,\n  Alert,\n  Select,\n  ClipboardButton,\n  Icon,\n  Stack,\n} from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport { AccessControlAction } from 'app/types';\n\nimport { ShowMessage, SnapshotTab, SupportSnapshotService } from './SupportSnapshotService';\n\ninterface Props {\n  panel: PanelModel;\n  plugin?: PanelPlugin | null;\n  onClose: () => void;\n}\n\nexport function HelpWizard({ panel, plugin, onClose }: Props) {\n  const styles = useStyles2(getStyles);\n  const service = useMemo(() => new SupportSnapshotService(panel), [panel]);\n\n  const {\n    currentTab,\n    loading,\n    error,\n    options,\n    showMessage,\n    snapshotSize,\n    markdownText,\n    snapshotText,\n    randomize,\n    panelTitle,\n    scene,\n  } = service.useState();\n\n  useEffect(() => {\n    service.buildDebugDashboard();\n  }, [service, plugin, randomize]);\n\n  if (!plugin) {\n    return null;\n  }\n\n  const tabs = [\n    { label: 'Snapshot', value: SnapshotTab.Support },\n    { label: 'Data', value: SnapshotTab.Data },\n  ];\n\n  const hasSupportBundleAccess =\n    config.supportBundlesEnabled && contextSrv.hasPermission(AccessControlAction.ActionSupportBundlesCreate);\n\n  return (\n    <Drawer\n      title={`Get help with this panel`}\n      size=\"lg\"\n      onClose={onClose}\n      subtitle={\n        <Stack direction=\"column\" gap={1}>\n          <Stack direction=\"row\" gap={1}>\n            <a\n              href=\"https://grafana.com/docs/grafana/latest/troubleshooting/\"\n              target=\"blank\"\n              className=\"external-link\"\n              rel=\"noopener noreferrer\"\n            >\n              Troubleshooting docs <Icon name=\"external-link-alt\" />\n            </a>\n          </Stack>\n          <span className=\"muted\">\n            <Trans i18nKey=\"help-wizard.troubleshooting-help\">\n              To request troubleshooting help, send a snapshot of this panel to Grafana Labs Technical Support. The\n              snapshot contains query response data and panel settings.\n            </Trans>\n          </span>\n          {hasSupportBundleAccess && (\n            <span className=\"muted\">\n              <Trans i18nKey=\"help-wizard.support-bundle\">\n                You can also retrieve a support bundle containing information concerning your Grafana instance and\n                configured datasources in the <a href=\"/support-bundles\">support bundles section</a>.\n              </Trans>\n            </span>\n          )}\n        </Stack>\n      }\n      tabs={\n        <TabsBar>\n          {tabs.map((t, index) => (\n            <Tab\n              key={`${t.value}-${index}`}\n              label={t.label}\n              active={t.value === currentTab}\n              onChangeTab={() => service.onCurrentTabChange(t.value!)}\n            />\n          ))}\n        </TabsBar>\n      }\n    >\n      {loading && <Spinner />}\n      {error && <Alert title={error.title}>{error.message}</Alert>}\n\n      {currentTab === SnapshotTab.Data && (\n        <div className={styles.code}>\n          <div className={styles.opts}>\n            <Field label={t('dashboard.help-wizard.label-template', 'Template')} className={styles.field}>\n              <Select options={options} value={showMessage} onChange={service.onShowMessageChange} />\n            </Field>\n\n            {showMessage === ShowMessage.GithubComment ? (\n              <ClipboardButton icon=\"copy\" getText={service.onGetMarkdownForClipboard}>\n                <Trans i18nKey=\"dashboard.help-wizard.copy-to-clipboard\">Copy to clipboard</Trans>\n              </ClipboardButton>\n            ) : (\n              <Button icon=\"download-alt\" onClick={service.onDownloadDashboard}>\n                Download ({snapshotSize})\n              </Button>\n            )}\n          </div>\n          <AutoSizer disableWidth>\n            {({ height }) => (\n              <CodeEditor\n                width=\"100%\"\n                height={height}\n                language={showMessage === ShowMessage.GithubComment ? 'markdown' : 'json'}\n                showLineNumbers={true}\n                showMiniMap={true}\n                value={showMessage === ShowMessage.GithubComment ? markdownText : snapshotText}\n                readOnly={false}\n                onBlur={service.onSetSnapshotText}\n              />\n            )}\n          </AutoSizer>\n        </div>\n      )}\n      {currentTab === SnapshotTab.Support && (\n        <>\n          <Field\n            label={t('dashboard.help-wizard.label-obfuscate-data', 'Obfuscate data')}\n            description=\"Modify the original data to hide sensitve information.  Note the lengths will stay the same, and duplicate values will be equal.\"\n          >\n            <Stack direction=\"row\" gap={1}>\n              <InlineSwitch\n                label={t('dashboard.help-wizard.randomize-labels-label-labels', 'Labels')}\n                id=\"randomize-labels\"\n                showLabel={true}\n                value={Boolean(randomize.labels)}\n                onChange={() => service.onToggleRandomize('labels')}\n              />\n              <InlineSwitch\n                label={t('dashboard.help-wizard.randomize-field-names-label-field-names', 'Field names')}\n                id=\"randomize-field-names\"\n                showLabel={true}\n                value={Boolean(randomize.names)}\n                onChange={() => service.onToggleRandomize('names')}\n              />\n              <InlineSwitch\n                label={t('dashboard.help-wizard.randomize-string-values-label-string-values', 'String values')}\n                id=\"randomize-string-values\"\n                showLabel={true}\n                value={Boolean(randomize.values)}\n                onChange={() => service.onToggleRandomize('values')}\n              />\n            </Stack>\n          </Field>\n\n          <Field\n            label={t('dashboard.help-wizard.label-support-snapshot', 'Support snapshot')}\n            description={`Panel: ${panelTitle}`}\n          >\n            <Stack>\n              <Button icon=\"download-alt\" onClick={service.onDownloadDashboard}>\n                <Trans i18nKey=\"help-wizard.download-snapshot\">Download snapshot</Trans> ({snapshotSize})\n              </Button>\n              <ClipboardButton\n                icon=\"github\"\n                getText={service.onGetMarkdownForClipboard}\n                title={t(\n                  'dashboard.help-wizard.title-complete-git-hub-comment-clipboard',\n                  'Copy a complete GitHub comment to the clipboard'\n                )}\n              >\n                <Trans i18nKey=\"help-wizard.github-comment\">Copy Github comment</Trans>\n              </ClipboardButton>\n            </Stack>\n          </Field>\n\n          <AutoSizer disableWidth>\n            {({ height }) => (\n              <div style={{ height, overflow: 'auto' }}>{scene && <scene.Component model={scene} />}</div>\n            )}\n          </AutoSizer>\n        </>\n      )}\n    </Drawer>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  code: css({\n    flexGrow: 1,\n    height: '100%',\n    overflow: 'scroll',\n  }),\n  field: css({\n    width: '100%',\n  }),\n  opts: css({\n    display: 'flex',\n    width: '100%',\n    flexGrow: 0,\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    button: {\n      marginLeft: '8px',\n    },\n  }),\n});\n","import { useEffect, useRef, useState } from 'react';\nimport { Unsubscribable } from 'rxjs';\n\nimport { LoadingState, PanelData } from '@grafana/data';\n\nimport { GetDataOptions } from '../../../query/state/PanelQueryRunner';\nimport { PanelModel } from '../../state/PanelModel';\n\ninterface UsePanelLatestData {\n  data?: PanelData;\n  hasError: boolean;\n  isLoading: boolean;\n  hasSeries: boolean;\n}\n\n/**\n * Subscribes and returns latest panel data from PanelQueryRunner\n */\nexport const usePanelLatestData = (\n  panel: PanelModel,\n  options: GetDataOptions,\n  checkSchema?: boolean\n): UsePanelLatestData => {\n  const querySubscription = useRef<Unsubscribable>();\n  const [latestData, setLatestData] = useState<PanelData>();\n\n  useEffect(() => {\n    let lastRev = -1;\n    let lastUpdate = 0;\n\n    querySubscription.current = panel\n      .getQueryRunner()\n      // We apply field config later\n      .getData({ withTransforms: options.withTransforms, withFieldConfig: false })\n      .subscribe({\n        next: (data) => {\n          if (checkSchema) {\n            if (lastRev === data.structureRev) {\n              const now = Date.now();\n              const elapsed = now - lastUpdate;\n              if (elapsed < 10000) {\n                return; // avoid updates if the schema has not changed for 10s\n              }\n              lastUpdate = now;\n            }\n            lastRev = data.structureRev ?? -1;\n          }\n          setLatestData(data);\n        },\n      });\n\n    return () => {\n      if (querySubscription.current) {\n        querySubscription.current.unsubscribe();\n      }\n    };\n    /**\n     * Adding separate options to dependencies array to avoid additional hook for comparing previous options with current.\n     * Otherwise, passing different references to the same object might cause troubles.\n     */\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [panel, options.withTransforms]);\n\n  return {\n    data: latestData,\n    isLoading: latestData?.state === LoadingState.Loading,\n    hasSeries: latestData ? !!latestData.series : false,\n    hasError: Boolean(\n      latestData && (latestData.error || latestData?.errors?.length || latestData.state === LoadingState.Error)\n    ),\n  };\n};\n","import { DataSourceApi, PanelData } from '@grafana/data';\nimport { Trans } from 'app/core/internationalization';\n\ninterface InspectMetadataTabProps {\n  data: PanelData;\n  metadataDatasource?: DataSourceApi;\n}\nexport const InspectMetadataTab = ({ data, metadataDatasource }: InspectMetadataTabProps) => {\n  if (!metadataDatasource || !metadataDatasource.components?.MetadataInspector) {\n    return <Trans i18nKey=\"dashboard.inspect-meta.no-inspector\">No Metadata Inspector</Trans>;\n  }\n  return <metadataDatasource.components.MetadataInspector datasource={metadataDatasource} data={data.series} />;\n};\n","import { isEmpty } from 'lodash';\nimport { useState } from 'react';\n\nimport {\n  CoreApp,\n  DataSourceApi,\n  formattedValueToString,\n  getValueFormat,\n  PanelData,\n  PanelPlugin,\n  LoadingState,\n  DataQueryError,\n} from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { Drawer, Tab, TabsBar } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\nimport { InspectDataTab } from 'app/features/inspector/InspectDataTab';\nimport { InspectErrorTab } from 'app/features/inspector/InspectErrorTab';\nimport { InspectJSONTab } from 'app/features/inspector/InspectJSONTab';\nimport { InspectMetadataTab } from 'app/features/inspector/InspectMetadataTab';\nimport { InspectStatsTab } from 'app/features/inspector/InspectStatsTab';\nimport { QueryInspector } from 'app/features/inspector/QueryInspector';\nimport { InspectTab } from 'app/features/inspector/types';\n\nimport { GetDataOptions } from '../../../query/state/PanelQueryRunner';\nimport { DashboardModel } from '../../state/DashboardModel';\nimport { PanelModel } from '../../state/PanelModel';\n\ninterface Props {\n  dashboard: DashboardModel;\n  panel: PanelModel;\n  plugin?: PanelPlugin | null;\n  defaultTab?: InspectTab;\n  tabs: Array<{ label: string; value: InspectTab }>;\n  // The last raw response\n  data?: PanelData;\n  isDataLoading: boolean;\n  dataOptions: GetDataOptions;\n  // If the datasource supports custom metadata\n  metadataDatasource?: DataSourceApi;\n  onDataOptionsChange: (options: GetDataOptions) => void;\n  onClose: () => void;\n}\n\nexport const InspectContent = ({\n  panel,\n  plugin,\n  dashboard,\n  tabs,\n  data,\n  isDataLoading,\n  dataOptions,\n  metadataDatasource,\n  defaultTab,\n  onDataOptionsChange,\n  onClose,\n}: Props) => {\n  const [currentTab, setCurrentTab] = useState(defaultTab ?? InspectTab.Data);\n\n  if (!plugin) {\n    return null;\n  }\n\n  let errors = getErrors(data);\n\n  // Validate that the active tab is actually valid and allowed\n  let activeTab = currentTab;\n  if (!tabs.find((item) => item.value === currentTab)) {\n    activeTab = InspectTab.JSON;\n  }\n\n  const panelTitle = getTemplateSrv().replace(panel.title, panel.scopedVars, 'text') || 'Panel';\n  const title = t('dashboard.inspect.title', 'Inspect: {{panelTitle}}', { panelTitle });\n\n  return (\n    <Drawer\n      title={title}\n      subtitle={data && formatStats(data)}\n      onClose={onClose}\n      tabs={\n        <TabsBar>\n          {tabs.map((tab, index) => {\n            return (\n              <Tab\n                key={`${tab.value}-${index}`}\n                label={tab.label}\n                active={tab.value === activeTab}\n                onChangeTab={() => setCurrentTab(tab.value || InspectTab.Data)}\n              />\n            );\n          })}\n        </TabsBar>\n      }\n    >\n      {activeTab === InspectTab.Data && (\n        <InspectDataTab\n          dataName={panelTitle}\n          panelPluginId={panel.type}\n          fieldConfig={panel.fieldConfig}\n          hasTransformations={Boolean(panel.transformations?.length)}\n          data={data && data.series}\n          isLoading={isDataLoading}\n          options={dataOptions}\n          onOptionsChange={onDataOptionsChange}\n          timeZone={dashboard.timezone}\n          app={CoreApp.Dashboard}\n        />\n      )}\n      {data && activeTab === InspectTab.Meta && (\n        <InspectMetadataTab data={data} metadataDatasource={metadataDatasource} />\n      )}\n\n      {activeTab === InspectTab.JSON && (\n        <InspectJSONTab panel={panel} dashboard={dashboard} data={data} onClose={onClose} />\n      )}\n      {activeTab === InspectTab.Error && <InspectErrorTab errors={errors} />}\n      {data && activeTab === InspectTab.Stats && <InspectStatsTab data={data} timeZone={dashboard.getTimezone()} />}\n      {data && activeTab === InspectTab.Query && <QueryInspector data={data} onRefreshQuery={() => panel.refresh()} />}\n    </Drawer>\n  );\n};\n\n// This will combine\nfunction getErrors(data: PanelData | undefined): DataQueryError[] {\n  let errors = data?.errors ?? [];\n  if (data?.error && !errors.includes(data.error)) {\n    errors = [data.error, ...errors];\n  }\n  if (!errors.length && data?.state === LoadingState.Error) {\n    return [\n      {\n        message: 'Error loading data',\n      },\n    ];\n  }\n  return errors;\n}\n\nfunction formatStats(data: PanelData) {\n  const { request } = data;\n\n  if (!request || isEmpty(request)) {\n    return '';\n  }\n\n  const queryCount = request.targets.length;\n  const requestTime = request.endTime ? request.endTime - request.startTime : 0;\n  const formatted = formattedValueToString(getValueFormat('ms')(requestTime));\n\n  return (\n    <Trans i18nKey=\"dashboard.inspect.subtitle\">\n      {{ queryCount }} queries with total query time of {{ formatted }}\n    </Trans>\n  );\n}\n","import { useState } from 'react';\nimport { connect, MapStateToProps } from 'react-redux';\nimport { useLocation } from 'react-router-dom-v5-compat';\n\nimport { PanelPlugin } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { DashboardModel } from 'app/features/dashboard/state/DashboardModel';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport { InspectTab } from 'app/features/inspector/types';\nimport { getPanelStateForModel } from 'app/features/panel/state/selectors';\nimport { StoreState } from 'app/types';\n\nimport { GetDataOptions } from '../../../query/state/PanelQueryRunner';\nimport { HelpWizard } from '../HelpWizard/HelpWizard';\nimport { usePanelLatestData } from '../PanelEditor/usePanelLatestData';\n\nimport { InspectContent } from './InspectContent';\nimport { useDatasourceMetadata, useInspectTabs } from './hooks';\n\ninterface OwnProps {\n  dashboard: DashboardModel;\n  panel: PanelModel;\n}\n\nexport interface ConnectedProps {\n  plugin?: PanelPlugin | null;\n}\n\nexport type Props = OwnProps & ConnectedProps;\n\nconst PanelInspectorUnconnected = ({ panel, dashboard, plugin }: Props) => {\n  const location = useLocation();\n  const defaultTab = new URLSearchParams(location.search).get('inspectTab') as InspectTab;\n  const [dataOptions, setDataOptions] = useState<GetDataOptions>({\n    withTransforms: defaultTab === InspectTab.Error,\n    withFieldConfig: true,\n  });\n\n  const { data, isLoading, hasError } = usePanelLatestData(panel, dataOptions, false);\n  const metaDs = useDatasourceMetadata(data);\n  const tabs = useInspectTabs(panel, dashboard, plugin, hasError, metaDs);\n\n  const onClose = () => {\n    locationService.partial({\n      inspect: null,\n      inspectTab: null,\n    });\n  };\n\n  if (!plugin) {\n    return null;\n  }\n\n  if (defaultTab === InspectTab.Help) {\n    return <HelpWizard panel={panel} plugin={plugin} onClose={onClose} />;\n  }\n\n  return (\n    <InspectContent\n      dashboard={dashboard}\n      panel={panel}\n      plugin={plugin}\n      defaultTab={defaultTab}\n      tabs={tabs}\n      data={data}\n      isDataLoading={isLoading}\n      dataOptions={dataOptions}\n      onDataOptionsChange={setDataOptions}\n      metadataDatasource={metaDs}\n      onClose={onClose}\n    />\n  );\n};\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state, props) => {\n  const panelState = getPanelStateForModel(state, props.panel);\n  if (!panelState) {\n    return { plugin: null };\n  }\n\n  return {\n    plugin: panelState.plugin,\n  };\n};\n\nexport const PanelInspector = connect(mapStateToProps)(PanelInspectorUnconnected);\n","import { PropsWithChildren, ReactElement, useMemo } from 'react';\n\nimport { TypedVariableModel, VariableHide } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Stack, Tooltip } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nimport { variableAdapters } from '../adapters';\nimport { VARIABLE_PREFIX } from '../constants';\n\ninterface Props {\n  variable: TypedVariableModel;\n  readOnly?: boolean;\n}\n\nexport const PickerRenderer = (props: Props) => {\n  const PickerToRender = useMemo(() => variableAdapters.get(props.variable.type).picker, [props.variable]);\n\n  if (!props.variable) {\n    return (\n      <div>\n        <Trans i18nKey=\"variables.picker-renderer.couldnt-load-variable\">Couldn't load variable</Trans>\n      </div>\n    );\n  }\n\n  return (\n    <Stack gap={0}>\n      <PickerLabel variable={props.variable} />\n      {props.variable.hide !== VariableHide.hideVariable && PickerToRender && (\n        <PickerToRender variable={props.variable} readOnly={props.readOnly ?? false} />\n      )}\n    </Stack>\n  );\n};\n\nfunction PickerLabel({ variable }: PropsWithChildren<Props>): ReactElement | null {\n  const labelOrName = useMemo(() => variable.label || variable.name, [variable]);\n\n  if (variable.hide !== VariableHide.dontHide) {\n    return null;\n  }\n\n  const elementId = VARIABLE_PREFIX + variable.id;\n  if (variable.description) {\n    return (\n      <Tooltip content={variable.description} placement={'bottom'}>\n        <label\n          className=\"gf-form-label gf-form-label--variable\"\n          data-testid={selectors.pages.Dashboard.SubMenu.submenuItemLabels(labelOrName)}\n          htmlFor={elementId}\n        >\n          {labelOrName}\n        </label>\n      </Tooltip>\n    );\n  }\n\n  return (\n    <label\n      className=\"gf-form-label gf-form-label--variable\"\n      data-testid={selectors.pages.Dashboard.SubMenu.submenuItemLabels(labelOrName)}\n      htmlFor={elementId}\n    >\n      {labelOrName}\n    </label>\n  );\n}\n","import { css } from '@emotion/css';\nimport { useEffect, useState } from 'react';\n\nimport { GrafanaTheme2, TypedVariableModel, VariableHide } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { PickerRenderer } from '../../../variables/pickers/PickerRenderer';\n\ninterface Props {\n  variables: TypedVariableModel[];\n  readOnly?: boolean;\n}\n\nexport const SubMenuItems = ({ variables, readOnly }: Props) => {\n  const [visibleVariables, setVisibleVariables] = useState<TypedVariableModel[]>([]);\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    setVisibleVariables(variables.filter((state) => state.hide !== VariableHide.hideVariable));\n  }, [variables]);\n\n  if (visibleVariables.length === 0) {\n    return null;\n  }\n\n  return (\n    <>\n      {visibleVariables.map((variable) => (\n        <div\n          key={variable.id}\n          className={styles.submenuItem}\n          data-testid={selectors.pages.Dashboard.SubMenu.submenuItem}\n        >\n          <PickerRenderer variable={variable} readOnly={readOnly} />\n        </div>\n      ))}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  submenuItem: css({\n    display: 'inline-block',\n\n    '.fa-caret-down': {\n      fontSize: '75%',\n      paddingLeft: theme.spacing(1),\n    },\n\n    '.gf-form': {\n      marginBottom: 0,\n    },\n  }),\n});\n","import { PanelPlugin } from '@grafana/data';\nimport { StoreState } from 'app/types';\n\nimport { getPanelPluginNotFound } from '../../panel/components/PanelPluginError';\n\nexport const getPanelPluginWithFallback =\n  (panelType: string) =>\n  (state: StoreState): PanelPlugin => {\n    const plugin = state.plugins.panels[panelType];\n    return plugin || getPanelPluginNotFound(`Panel plugin not found (${panelType})`, true);\n  };\n","import { css } from '@emotion/css';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { ToolbarButton, ButtonGroup } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\nimport { useDispatch, useSelector } from 'app/types';\n\nimport { PanelModel } from '../../state/PanelModel';\nimport { getPanelPluginWithFallback } from '../../state/selectors';\n\nimport { updatePanelEditorUIState } from './state/actions';\nimport { toggleVizPicker } from './state/reducers';\n\ntype Props = {\n  panel: PanelModel;\n};\n\nexport const VisualizationButton = ({ panel }: Props) => {\n  const dispatch = useDispatch();\n  const plugin = useSelector(getPanelPluginWithFallback(panel.type));\n  const isPanelOptionsVisible = useSelector((state) => state.panelEditor.ui.isPanelOptionsVisible);\n  const isVizPickerOpen = useSelector((state) => state.panelEditor.isVizPickerOpen);\n\n  const onToggleOpen = () => {\n    dispatch(toggleVizPicker(!isVizPickerOpen));\n  };\n\n  const onToggleOptionsPane = () => {\n    dispatch(updatePanelEditorUIState({ isPanelOptionsVisible: !isPanelOptionsVisible }));\n  };\n\n  if (!plugin) {\n    return null;\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      <ButtonGroup>\n        <ToolbarButton\n          className={styles.vizButton}\n          tooltip={t(\n            'dashboard.visualization-button.tooltip-click-to-change-visualization',\n            'Click to change visualization'\n          )}\n          imgSrc={plugin.meta.info.logos.small}\n          isOpen={isVizPickerOpen}\n          onClick={onToggleOpen}\n          data-testid={selectors.components.PanelEditor.toggleVizPicker}\n          aria-label={t('dashboard.visualization-button.aria-label-change-visualization', 'Change visualization')}\n          variant=\"canvas\"\n          fullWidth\n        >\n          {plugin.meta.name}\n        </ToolbarButton>\n        <ToolbarButton\n          tooltip={isPanelOptionsVisible ? 'Close options pane' : 'Show options pane'}\n          icon={isPanelOptionsVisible ? 'angle-right' : 'angle-left'}\n          onClick={onToggleOptionsPane}\n          variant=\"canvas\"\n          data-testid={selectors.components.PanelEditor.toggleVizOptions}\n          aria-label={isPanelOptionsVisible ? 'Close options pane' : 'Show options pane'}\n        />\n      </ButtonGroup>\n    </div>\n  );\n};\n\nVisualizationButton.displayName = 'VisualizationTab';\n\nconst styles = {\n  wrapper: css({\n    display: 'flex',\n    flexDirection: 'column',\n  }),\n  vizButton: css({\n    textAlign: 'left',\n  }),\n};\n","import { ConfirmModal } from '@grafana/ui';\n\nimport { PanelModel } from '../../../dashboard/state/PanelModel';\nimport { isPanelModelLibraryPanel } from '../../guard';\n\nexport interface ChangeLibraryPanelModalProps {\n  panel: PanelModel;\n  onConfirm: () => void;\n  onDismiss: () => void;\n}\n\nexport const ChangeLibraryPanelModal = ({ onConfirm, onDismiss, panel }: ChangeLibraryPanelModalProps): JSX.Element => {\n  const isLibraryPanel = isPanelModelLibraryPanel(panel);\n  const title = `${isLibraryPanel ? 'Changing' : 'Replace with'} library panel`;\n  const body = `${\n    isLibraryPanel ? 'Changing' : 'Replacing with a'\n  } library panel will remove any changes since last save.`;\n  return (\n    <ConfirmModal\n      onConfirm={onConfirm}\n      onDismiss={onDismiss}\n      confirmText={isLibraryPanel ? 'Change' : 'Replace'}\n      title={title}\n      body={body}\n      dismissText=\"Cancel\"\n      isOpen={true}\n    />\n  );\n};\n","import { css } from '@emotion/css';\nimport { useCallback, useState } from 'react';\n\nimport { PanelPluginMeta } from '@grafana/data';\nimport { Button, VerticalGroup } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\nimport { getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport { changeToLibraryPanel } from 'app/features/panel/state/actions';\nimport { useDispatch } from 'app/types';\n\nimport { PanelTypeFilter } from '../../../../core/components/PanelTypeFilter/PanelTypeFilter';\nimport { LibraryElementDTO } from '../../types';\nimport { AddLibraryPanelModal } from '../AddLibraryPanelModal/AddLibraryPanelModal';\nimport { ChangeLibraryPanelModal } from '../ChangeLibraryPanelModal/ChangeLibraryPanelModal';\nimport { LibraryPanelsView } from '../LibraryPanelsView/LibraryPanelsView';\n\ninterface Props {\n  panel: PanelModel;\n  searchQuery: string;\n}\n\nexport const PanelLibraryOptionsGroup = ({ panel, searchQuery }: Props) => {\n  const [showingAddPanelModal, setShowingAddPanelModal] = useState(false);\n  const [changeToPanel, setChangeToPanel] = useState<LibraryElementDTO | undefined>(undefined);\n  const [panelFilter, setPanelFilter] = useState<string[]>([]);\n  const onPanelFilterChange = useCallback(\n    (plugins: PanelPluginMeta[]) => {\n      setPanelFilter(plugins.map((p) => p.id));\n    },\n    [setPanelFilter]\n  );\n  const dashboard = getDashboardSrv().getCurrent();\n  const dispatch = useDispatch();\n\n  const useLibraryPanel = async () => {\n    if (!changeToPanel) {\n      return;\n    }\n\n    setChangeToPanel(undefined);\n    dispatch(changeToLibraryPanel(panel, changeToPanel));\n  };\n\n  const onAddToPanelLibrary = () => setShowingAddPanelModal(true);\n  const onDismissChangeToPanel = () => setChangeToPanel(undefined);\n  return (\n    <VerticalGroup spacing=\"md\">\n      {!panel.libraryPanel && (\n        <VerticalGroup align=\"center\">\n          <Button icon=\"plus\" onClick={onAddToPanelLibrary} variant=\"secondary\" fullWidth>\n            <Trans i18nKey=\"library-panels.panel-library-options-group.create-new-library-panel\">\n              Create new library panel\n            </Trans>\n          </Button>\n        </VerticalGroup>\n      )}\n\n      <PanelTypeFilter onChange={onPanelFilterChange} />\n\n      <div className={styles.libraryPanelsView}>\n        <LibraryPanelsView\n          currentPanelId={panel.libraryPanel?.uid}\n          searchString={searchQuery}\n          panelFilter={panelFilter}\n          onClickCard={setChangeToPanel}\n          showSecondaryActions\n        />\n      </div>\n\n      {showingAddPanelModal && (\n        <AddLibraryPanelModal\n          panel={panel}\n          onDismiss={() => setShowingAddPanelModal(false)}\n          initialFolderUid={dashboard?.meta.folderUid}\n          isOpen={showingAddPanelModal}\n        />\n      )}\n\n      {changeToPanel && (\n        <ChangeLibraryPanelModal panel={panel} onDismiss={onDismissChangeToPanel} onConfirm={useLibraryPanel} />\n      )}\n    </VerticalGroup>\n  );\n};\n\nconst styles = {\n  libraryPanelsView: css({\n    width: '100%',\n  }),\n};\n","import { css } from '@emotion/css';\nimport { useCallback, useRef, useState } from 'react';\nimport { useLocalStorage } from 'react-use';\n\nimport { GrafanaTheme2, PanelData, SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button, Field, FilterInput, RadioButtonGroup, ScrollContainer, useStyles2 } from '@grafana/ui';\nimport { LS_VISUALIZATION_SELECT_TAB_KEY } from 'app/core/constants';\nimport { t } from 'app/core/internationalization';\nimport { PanelLibraryOptionsGroup } from 'app/features/library-panels/components/PanelLibraryOptionsGroup/PanelLibraryOptionsGroup';\nimport { VisualizationSuggestions } from 'app/features/panel/components/VizTypePicker/VisualizationSuggestions';\nimport { VizTypeChangeDetails } from 'app/features/panel/components/VizTypePicker/types';\nimport { useDispatch, useSelector } from 'app/types';\n\nimport { VizTypePicker } from '../../../panel/components/VizTypePicker/VizTypePicker';\nimport { changePanelPlugin } from '../../../panel/state/actions';\nimport { PanelModel } from '../../state/PanelModel';\nimport { getPanelPluginWithFallback } from '../../state/selectors';\n\nimport { toggleVizPicker } from './state/reducers';\nimport { VisualizationSelectPaneTab } from './types';\n\ninterface Props {\n  panel: PanelModel;\n  data?: PanelData;\n}\n\nexport const VisualizationSelectPane = ({ panel, data }: Props) => {\n  const plugin = useSelector(getPanelPluginWithFallback(panel.type));\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const tabKey = LS_VISUALIZATION_SELECT_TAB_KEY;\n  const defaultTab = VisualizationSelectPaneTab.Visualizations;\n\n  const [listMode, setListMode] = useLocalStorage(tabKey, defaultTab);\n\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n  const searchRef = useRef<HTMLInputElement | null>(null);\n\n  const onVizChange = useCallback(\n    (pluginChange: VizTypeChangeDetails) => {\n      dispatch(changePanelPlugin({ panel: panel, ...pluginChange }));\n\n      // close viz picker unless a mod key is pressed while clicking\n      if (!pluginChange.withModKey) {\n        dispatch(toggleVizPicker(false));\n      }\n    },\n    [dispatch, panel]\n  );\n\n  const onCloseVizPicker = () => {\n    dispatch(toggleVizPicker(false));\n  };\n\n  if (!plugin) {\n    return null;\n  }\n\n  const radioOptions: Array<SelectableValue<VisualizationSelectPaneTab>> = [\n    { label: 'Visualizations', value: VisualizationSelectPaneTab.Visualizations },\n    { label: 'Suggestions', value: VisualizationSelectPaneTab.Suggestions },\n    {\n      label: 'Library panels',\n      value: VisualizationSelectPaneTab.LibraryPanels,\n      description: 'Reusable panels you can share between multiple dashboards.',\n    },\n  ];\n\n  return (\n    <div className={styles.openWrapper}>\n      <div className={styles.formBox}>\n        <div className={styles.searchRow}>\n          <FilterInput\n            value={searchQuery}\n            onChange={setSearchQuery}\n            ref={searchRef}\n            autoFocus={true}\n            placeholder={t('dashboard.visualization-select-pane.placeholder-search-for', 'Search for...')}\n          />\n          <Button\n            title={t('dashboard.visualization-select-pane.title-close', 'Close')}\n            variant=\"secondary\"\n            icon=\"angle-up\"\n            className={styles.closeButton}\n            aria-label={selectors.components.PanelEditor.toggleVizPicker}\n            onClick={onCloseVizPicker}\n          />\n        </div>\n        <Field className={styles.customFieldMargin}>\n          <RadioButtonGroup options={radioOptions} value={listMode} onChange={setListMode} fullWidth />\n        </Field>\n      </div>\n      <div className={styles.scrollWrapper}>\n        <ScrollContainer>\n          <div className={styles.scrollContent}>\n            {listMode === VisualizationSelectPaneTab.Visualizations && (\n              <VizTypePicker pluginId={plugin.meta.id} onChange={onVizChange} searchQuery={searchQuery} />\n            )}\n            {listMode === VisualizationSelectPaneTab.Suggestions && (\n              <VisualizationSuggestions onChange={onVizChange} searchQuery={searchQuery} panel={panel} data={data} />\n            )}\n            {listMode === VisualizationSelectPaneTab.LibraryPanels && (\n              <PanelLibraryOptionsGroup searchQuery={searchQuery} panel={panel} key=\"Panel Library\" />\n            )}\n          </div>\n        </ScrollContainer>\n      </div>\n    </div>\n  );\n};\n\nVisualizationSelectPane.displayName = 'VisualizationSelectPane';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    icon: css({\n      color: theme.v1.palette.gray33,\n    }),\n    wrapper: css({\n      display: 'flex',\n      flexDirection: 'column',\n      flex: '1 1 0',\n      height: '100%',\n    }),\n    vizButton: css({\n      textAlign: 'left',\n    }),\n    scrollWrapper: css({\n      flexGrow: 1,\n      minHeight: 0,\n    }),\n    scrollContent: css({\n      padding: theme.spacing(1),\n    }),\n    openWrapper: css({\n      display: 'flex',\n      flexDirection: 'column',\n      flex: '1 1 100%',\n      height: '100%',\n      background: theme.colors.background.primary,\n      border: `1px solid ${theme.colors.border.weak}`,\n    }),\n    searchRow: css({\n      display: 'flex',\n      marginBottom: theme.spacing(1),\n    }),\n    closeButton: css({\n      marginLeft: theme.spacing(1),\n    }),\n    customFieldMargin: css({\n      marginBottom: theme.spacing(1),\n    }),\n    formBox: css({\n      padding: theme.spacing(1),\n      paddingBottom: 0,\n    }),\n  };\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { useStyles2 } from '@grafana/ui';\nimport { useSelector } from 'app/types';\n\nimport { OptionsPaneOptions } from './OptionsPaneOptions';\nimport { VisualizationButton } from './VisualizationButton';\nimport { VisualizationSelectPane } from './VisualizationSelectPane';\nimport { OptionPaneRenderProps } from './types';\nimport { usePanelLatestData } from './usePanelLatestData';\n\nexport const OptionsPane = ({\n  plugin,\n  panel,\n  onFieldConfigsChange,\n  onPanelOptionsChanged,\n  onPanelConfigChange,\n  dashboard,\n  instanceState,\n}: OptionPaneRenderProps) => {\n  const styles = useStyles2(getStyles);\n  const isVizPickerOpen = useSelector((state) => state.panelEditor.isVizPickerOpen);\n  const { data } = usePanelLatestData(panel, { withTransforms: true, withFieldConfig: false }, true);\n\n  return (\n    <div className={styles.wrapper} data-testid={selectors.components.PanelEditor.OptionsPane.content}>\n      {!isVizPickerOpen && (\n        <>\n          <div className={styles.vizButtonWrapper}>\n            <VisualizationButton panel={panel} />\n          </div>\n          <div className={styles.optionsWrapper}>\n            <OptionsPaneOptions\n              panel={panel}\n              dashboard={dashboard}\n              plugin={plugin}\n              instanceState={instanceState}\n              data={data}\n              onFieldConfigsChange={onFieldConfigsChange}\n              onPanelOptionsChanged={onPanelOptionsChanged}\n              onPanelConfigChange={onPanelConfigChange}\n            />\n          </div>\n        </>\n      )}\n      {isVizPickerOpen && <VisualizationSelectPane panel={panel} data={data} />}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css({\n      height: '100%',\n      width: '100%',\n      display: 'flex',\n      flex: '1 1 0',\n      flexDirection: 'column',\n      padding: 0,\n    }),\n    optionsWrapper: css({\n      flexGrow: 1,\n      minHeight: 0,\n    }),\n    vizButtonWrapper: css({\n      padding: `0 ${theme.spacing(2, 2)} 0`,\n    }),\n    legacyOptions: css({\n      label: 'legacy-options',\n      '.panel-options-grid': {\n        display: 'flex',\n        flexDirection: 'column',\n      },\n      '.panel-options-group': {\n        marginBottom: 0,\n      },\n      '.panel-options-group__body': {\n        padding: `${theme.spacing(2)} 0`,\n      },\n      '.section': {\n        display: 'block',\n        margin: `${theme.spacing(2)} 0`,\n        '&:first-child': {\n          marginTop: 0,\n        },\n      },\n    }),\n  };\n};\n","import { css, cx } from '@emotion/css';\nimport { Component } from 'react';\n\nimport { GrafanaTheme2, renderMarkdown, LinkModelSupplier, ScopedVars, IconName } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { locationService, getTemplateSrv } from '@grafana/runtime';\nimport { Tooltip, PopoverContent, Icon, Themeable2, withTheme2, useStyles2 } from '@grafana/ui';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport { InspectTab } from 'app/features/inspector/types';\n\nenum InfoMode {\n  Error = 'Error',\n  Info = 'Info',\n  Links = 'Links',\n}\n\nexport interface Props extends Themeable2 {\n  panel: PanelModel;\n  title?: string;\n  description?: string;\n  scopedVars?: ScopedVars;\n  links?: LinkModelSupplier<PanelModel>;\n  error?: string;\n}\n\nexport class PanelHeaderCorner extends Component<Props> {\n  timeSrv: TimeSrv = getTimeSrv();\n\n  getInfoMode = () => {\n    const { panel, error } = this.props;\n    if (error) {\n      return InfoMode.Error;\n    }\n    if (!!panel.description) {\n      return InfoMode.Info;\n    }\n    if (panel.links && panel.links.length) {\n      return InfoMode.Links;\n    }\n\n    return undefined;\n  };\n\n  getInfoContent = (): JSX.Element => {\n    const { panel, theme } = this.props;\n    const markdown = panel.description || '';\n    const interpolatedMarkdown = getTemplateSrv().replace(markdown, panel.scopedVars);\n    const markedInterpolatedMarkdown = renderMarkdown(interpolatedMarkdown);\n    const links = this.props.links && this.props.links.getLinks(panel.replaceVariables);\n    const styles = getContentStyles(theme);\n\n    return (\n      <div className={styles.content}>\n        <div dangerouslySetInnerHTML={{ __html: markedInterpolatedMarkdown }} />\n\n        {links && links.length > 0 && (\n          <ul className={styles.cornerLinks}>\n            {links.map((link, idx) => {\n              return (\n                <li key={idx}>\n                  <a href={link.href} target={link.target}>\n                    {link.title}\n                  </a>\n                </li>\n              );\n            })}\n          </ul>\n        )}\n      </div>\n    );\n  };\n\n  /**\n   * Open the Panel Inspector when we click on an error\n   */\n  onClickError = () => {\n    locationService.partial({\n      inspect: this.props.panel.id,\n      inspectTab: InspectTab.Error,\n    });\n  };\n\n  render() {\n    const { error } = this.props;\n    const infoMode: InfoMode | undefined = this.getInfoMode();\n\n    if (!infoMode) {\n      return null;\n    }\n\n    if (infoMode === InfoMode.Error && error) {\n      return <PanelInfoCorner infoMode={infoMode} content={error} onClick={this.onClickError} />;\n    }\n\n    if (infoMode === InfoMode.Info || infoMode === InfoMode.Links) {\n      return <PanelInfoCorner infoMode={infoMode} content={this.getInfoContent} />;\n    }\n\n    return null;\n  }\n}\n\nexport default withTheme2(PanelHeaderCorner);\n\ninterface PanelInfoCornerProps {\n  infoMode: InfoMode;\n  content: PopoverContent;\n  onClick?: () => void;\n}\n\nfunction PanelInfoCorner({ infoMode, content, onClick }: PanelInfoCornerProps) {\n  const theme = infoMode === InfoMode.Error ? 'error' : 'info';\n  const ariaLabel = selectors.components.Panels.Panel.headerCornerInfo(infoMode.toLowerCase());\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Tooltip content={content} placement=\"top-start\" theme={theme} interactive>\n      <button type=\"button\" className={styles.infoCorner} onClick={onClick} aria-label={ariaLabel}>\n        <Icon\n          name={iconMap[infoMode]}\n          size={infoMode === InfoMode.Links ? 'sm' : 'lg'}\n          className={cx(styles.icon, { [styles.iconLinks]: infoMode === InfoMode.Links })}\n        />\n        <span className={cx(styles.inner, { [styles.error]: infoMode === InfoMode.Error })} />\n      </button>\n    </Tooltip>\n  );\n}\n\nconst iconMap: Record<InfoMode, IconName> = {\n  [InfoMode.Error]: 'exclamation',\n  [InfoMode.Info]: 'info',\n  [InfoMode.Links]: 'external-link-alt',\n};\n\nconst getContentStyles = (theme: GrafanaTheme2) => ({\n  content: css({\n    overflow: 'auto',\n\n    code: {\n      whiteSpace: 'normal',\n      wordWrap: 'break-word',\n    },\n\n    'pre > code': {\n      display: 'block',\n    },\n  }),\n  cornerLinks: css({\n    listStyle: 'none',\n    paddingLeft: 0,\n  }),\n});\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    icon: css({\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      zIndex: 2,\n      fill: theme.colors.text.maxContrast,\n    }),\n    iconLinks: css({\n      left: theme.spacing(0.5),\n      top: theme.spacing(0.25),\n    }),\n    inner: css({\n      width: 0,\n      height: 0,\n      position: 'absolute',\n      left: 0,\n      bottom: 0,\n      borderBottom: `${theme.spacing(4)} solid transparent`,\n      borderLeft: `${theme.spacing(4)} solid ${theme.colors.background.secondary}`,\n    }),\n    error: css({\n      borderLeftColor: theme.colors.error.main,\n    }),\n    infoCorner: css({\n      background: 'none',\n      border: 'none',\n      color: theme.colors.text.secondary,\n      cursor: 'pointer',\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      width: theme.spacing(4),\n      height: theme.spacing(4),\n      zIndex: 3,\n    }),\n  };\n};\n","import { useEffect, useState } from 'react';\n\nimport { RefreshEvent } from '@grafana/runtime';\nimport { PanelChrome } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\nimport { applyPanelTimeOverrides } from 'app/features/dashboard/utils/panel';\nimport { PanelRenderer } from 'app/features/panel/components/PanelRenderer';\nimport { Options } from 'app/plugins/panel/table/panelcfg.gen';\n\nimport { getTimeSrv } from '../../services/TimeSrv';\nimport { DashboardModel } from '../../state/DashboardModel';\nimport { PanelModel } from '../../state/PanelModel';\n\nimport PanelHeaderCorner from './PanelHeaderCorner';\nimport { usePanelLatestData } from './usePanelLatestData';\n\nexport interface Props {\n  width: number;\n  height: number;\n  panel: PanelModel;\n  dashboard: DashboardModel;\n}\n\nexport function PanelEditorTableView({ width, height, panel, dashboard }: Props) {\n  const { data } = usePanelLatestData(panel, { withTransforms: true, withFieldConfig: false }, false);\n  const [options, setOptions] = useState<Options>({\n    frameIndex: 0,\n    showHeader: true,\n    showTypeIcons: true,\n  });\n\n  // Subscribe to panel event\n  useEffect(() => {\n    const timeSrv = getTimeSrv();\n\n    const sub = panel.events.subscribe(RefreshEvent, () => {\n      const timeData = applyPanelTimeOverrides(panel, timeSrv.timeRange());\n      panel.runAllPanelQueries({\n        dashboardUID: dashboard.uid,\n        dashboardTimezone: dashboard.getTimezone(),\n        timeData,\n        width,\n      });\n    });\n    return () => {\n      sub.unsubscribe();\n    };\n  }, [panel, dashboard, width]);\n\n  if (!data) {\n    return null;\n  }\n\n  const errorMessage = data?.errors\n    ? data.errors.length > 1\n      ? 'Multiple errors found. Click for more details'\n      : data.errors[0].message\n    : data?.error?.message;\n  return (\n    <PanelChrome width={width} height={height} padding=\"none\">\n      {(innerWidth, innerHeight) => (\n        <>\n          <PanelHeaderCorner panel={panel} error={errorMessage} />\n          <PanelRenderer\n            title={t('dashboard.panel-editor-table-view.title-raw-data', 'Raw data')}\n            pluginId=\"table\"\n            width={innerWidth}\n            height={innerHeight}\n            data={data}\n            options={options}\n            onOptionsChange={setOptions}\n          />\n        </>\n      )}\n    </PanelChrome>\n  );\n}\n","import { Tab, TabProps } from '@grafana/ui';\nimport { DashboardModel } from 'app/features/dashboard/state/DashboardModel';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\n\nimport { usePanelCombinedRules } from './hooks/usePanelCombinedRules';\n\ninterface Props extends Omit<TabProps, 'counter' | 'ref'> {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n}\n\n// it will load rule count from backend\nexport const PanelAlertTab = ({ panel, dashboard, ...otherProps }: Props) => {\n  const { rules, loading } = usePanelCombinedRules({ panelId: panel.id, dashboardUID: dashboard.uid });\n  return <Tab {...otherProps} counter={loading ? null : rules.length} />;\n};\n","import { useLocation } from 'react-router-dom-v5-compat';\nimport { useAsync } from 'react-use';\n\nimport { urlUtil } from '@grafana/data';\nimport { Alert, Button, LinkButton } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { DashboardModel } from 'app/features/dashboard/state/DashboardModel';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport { useSelector } from 'app/types';\n\nimport { LogMessages, logInfo } from '../../Analytics';\nimport { panelToRuleFormValues } from '../../utils/rule-form';\n\ninterface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  className?: string;\n}\n\nexport const NewRuleFromPanelButton = ({ dashboard, panel, className }: Props) => {\n  const templating = useSelector((state) => {\n    return state.templating;\n  });\n\n  const location = useLocation();\n\n  const { loading, value: formValues } = useAsync(\n    () => panelToRuleFormValues(panel, dashboard),\n    // Templating variables are required to update formValues on each variable's change. It's used implicitly by the templating engine\n    [panel, dashboard, templating]\n  );\n\n  if (loading) {\n    return (\n      <Button disabled={true}>\n        <Trans i18nKey=\"alerting.new-rule-from-panel-button.new-alert-rule\">New alert rule</Trans>\n      </Button>\n    );\n  }\n\n  if (!formValues) {\n    return (\n      <Alert\n        severity=\"info\"\n        title={t(\n          'alerting.new-rule-from-panel-button.title-no-alerting-capable-query-found',\n          'No alerting capable query found'\n        )}\n      >\n        Cannot create alerts from this panel because no query to an alerting capable datasource is found.\n      </Alert>\n    );\n  }\n\n  const ruleFormUrl = urlUtil.renderUrl('alerting/new', {\n    defaults: JSON.stringify(formValues),\n    returnTo: location.pathname + location.search,\n  });\n\n  return (\n    <LinkButton\n      icon=\"bell\"\n      onClick={() => logInfo(LogMessages.alertRuleFromPanel)}\n      href={ruleFormUrl}\n      className={className}\n      data-testid=\"create-alert-rule-button\"\n    >\n      <Trans i18nKey=\"alerting.new-rule-from-panel-button.new-alert-rule\">New alert rule</Trans>\n    </LinkButton>\n  );\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config } from '@grafana/runtime';\nimport { Alert, LoadingPlaceholder, ScrollContainer, useStyles2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { DashboardModel } from 'app/features/dashboard/state/DashboardModel';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\n\nimport { NewRuleFromPanelButton } from './components/panel-alerts-tab/NewRuleFromPanelButton';\nimport { RulesTable } from './components/rules/RulesTable';\nimport { usePanelCombinedRules } from './hooks/usePanelCombinedRules';\nimport { getRulesPermissions } from './utils/access-control';\nimport { stringifyErrorLike } from './utils/misc';\n\ninterface Props {\n  dashboard: DashboardModel;\n  panel: PanelModel;\n}\n\nexport const PanelAlertTabContent = ({ dashboard, panel }: Props) => {\n  const styles = useStyles2(getStyles);\n  const { errors, loading, rules } = usePanelCombinedRules({\n    dashboardUID: dashboard.uid,\n    panelId: panel.id,\n    poll: true,\n  });\n  const permissions = getRulesPermissions('grafana');\n  const canCreateRules = config.unifiedAlertingEnabled && contextSrv.hasPermission(permissions.create);\n\n  const alert = errors.length ? (\n    <Alert\n      title={t('alerting.panel-alert-tab-content.alert.title-errors-loading-rules', 'Errors loading rules')}\n      severity=\"error\"\n    >\n      {errors.map((error, index) => (\n        <div key={index}>Failed to load Grafana rules state: {stringifyErrorLike(error)}</div>\n      ))}\n    </Alert>\n  ) : null;\n\n  if (loading && !rules.length) {\n    return (\n      <div className={styles.innerWrapper}>\n        {alert}\n        <LoadingPlaceholder text={t('alerting.panel-alert-tab-content.text-loading-rules', 'Loading rules...')} />\n      </div>\n    );\n  }\n\n  if (rules.length) {\n    return (\n      <ScrollContainer minHeight=\"100%\">\n        <div className={styles.innerWrapper}>\n          {alert}\n          <RulesTable rules={rules} />\n          {!!dashboard.meta.canSave && canCreateRules && (\n            <NewRuleFromPanelButton className={styles.newButton} panel={panel} dashboard={dashboard} />\n          )}\n        </div>\n      </ScrollContainer>\n    );\n  }\n\n  const isNew = !Boolean(dashboard.uid);\n\n  return (\n    <div data-testid={selectors.components.PanelAlertTabContent.content} className={styles.noRulesWrapper}>\n      {alert}\n      {!isNew && (\n        <>\n          <p>\n            <Trans i18nKey=\"dashboard.panel-edit.alerting-tab.no-rules\">\n              There are no alert rules linked to this panel.\n            </Trans>\n          </p>\n          {!!dashboard.meta.canSave && canCreateRules && <NewRuleFromPanelButton panel={panel} dashboard={dashboard} />}\n        </>\n      )}\n      {isNew && !!dashboard.meta.canSave && (\n        <Alert\n          severity=\"info\"\n          title={t('alerting.panel-alert-tab-content.title-dashboard-not-saved', 'Dashboard not saved')}\n        >\n          <Trans i18nKey=\"dashboard.panel-edit.alerting-tab.dashboard-not-saved\">\n            Dashboard must be saved before alerts can be added.\n          </Trans>\n        </Alert>\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  newButton: css({\n    marginTop: theme.spacing(3),\n  }),\n  innerWrapper: css({\n    padding: theme.spacing(2),\n  }),\n  noRulesWrapper: css({\n    margin: theme.spacing(2),\n    backgroundColor: theme.colors.background.secondary,\n    padding: theme.spacing(3),\n  }),\n});\n","import { PureComponent } from 'react';\n\nimport { DataQuery, getDataSourceRef } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { storeLastUsedDataSourceInLocalStorage } from 'app/features/datasources/components/picker/utils';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { QueryGroup } from 'app/features/query/components/QueryGroup';\nimport { QueryGroupDataSource, QueryGroupOptions } from 'app/types';\n\nimport { getDashboardSrv } from '../../services/DashboardSrv';\nimport { PanelModel } from '../../state/PanelModel';\nimport { getLastUsedDatasourceFromStorage } from '../../utils/dashboard';\n\ninterface Props {\n  /** Current panel */\n  panel: PanelModel;\n  /** Added here to make component re-render when queries change from outside */\n  queries: DataQuery[];\n}\n\nexport class PanelEditorQueries extends PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  // store last used datasource in local storage\n  updateLastUsedDatasource = (datasource: QueryGroupDataSource) => {\n    storeLastUsedDataSourceInLocalStorage(datasource);\n  };\n\n  buildQueryOptions(panel: PanelModel): QueryGroupOptions {\n    const dataSource: QueryGroupDataSource = panel.datasource ?? {\n      default: true,\n    };\n    const datasourceSettings = getDatasourceSrv().getInstanceSettings(dataSource);\n\n    // store last datasource used in local storage\n    this.updateLastUsedDatasource(dataSource);\n    return {\n      cacheTimeout: datasourceSettings?.meta.queryOptions?.cacheTimeout ? panel.cacheTimeout : undefined,\n      dataSource: {\n        default: datasourceSettings?.isDefault,\n        ...(datasourceSettings ? getDataSourceRef(datasourceSettings) : { type: undefined, uid: undefined }),\n      },\n      queryCachingTTL: datasourceSettings?.cachingConfig?.enabled ? panel.queryCachingTTL : undefined,\n      queries: panel.targets,\n      maxDataPoints: panel.maxDataPoints,\n      minInterval: panel.interval,\n      timeRange: {\n        from: panel.timeFrom,\n        shift: panel.timeShift,\n        hide: panel.hideTimeOverride,\n      },\n    };\n  }\n\n  async componentDidMount() {\n    const { panel } = this.props;\n\n    // If the panel model has no datasource property load the default data source property and update the persisted model\n    // Because this part of the panel model is not in redux yet we do a forceUpdate.\n    if (!panel.datasource) {\n      let ds;\n      // check if we have last used datasource from local storage\n      // get dashboard uid\n      const dashboardUid = getDashboardSrv().getCurrent()?.uid ?? '';\n      const lastUsedDatasource = getLastUsedDatasourceFromStorage(dashboardUid!);\n      // do we have a last used datasource for this dashboard\n      if (lastUsedDatasource?.datasourceUid !== null) {\n        // get datasource from uid\n        ds = getDatasourceSrv().getInstanceSettings(lastUsedDatasource?.datasourceUid);\n      }\n      // else load default datasource\n      if (!ds) {\n        ds = getDatasourceSrv().getInstanceSettings(null);\n      }\n      panel.datasource = getDataSourceRef(ds!);\n      this.forceUpdate();\n    }\n  }\n\n  onRunQueries = () => {\n    this.props.panel.refresh();\n  };\n\n  onOpenQueryInspector = () => {\n    locationService.partial({\n      inspect: this.props.panel.id,\n      inspectTab: 'query',\n    });\n  };\n\n  onOptionsChange = (options: QueryGroupOptions) => {\n    const { panel } = this.props;\n\n    panel.updateQueries(options);\n\n    if (options.dataSource.uid !== panel.datasource?.uid) {\n      // trigger queries when changing data source\n      setTimeout(this.onRunQueries, 10);\n    }\n\n    this.forceUpdate();\n  };\n\n  render() {\n    const { panel } = this.props;\n\n    // If no panel data soruce set, wait with render. Will be set to default in componentDidMount\n    if (!panel.datasource) {\n      return null;\n    }\n\n    const options = this.buildQueryOptions(panel);\n\n    return (\n      <QueryGroup\n        options={options}\n        queryRunner={panel.getQueryRunner()}\n        onRunQueries={this.onRunQueries}\n        onOpenQueryInspector={this.onOpenQueryInspector}\n        onOptionsChange={this.onOptionsChange}\n      />\n    );\n  }\n}\n","import { css } from '@emotion/css';\nimport { memo, useCallback, useEffect } from 'react';\nimport { Subscription } from 'rxjs';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config, reportInteraction } from '@grafana/runtime';\nimport { Tab, TabContent, TabsBar, toIconName, useForceUpdate, useStyles2 } from '@grafana/ui';\nimport { PanelAlertTab } from 'app/features/alerting/unified/PanelAlertTab';\nimport { PanelAlertTabContent } from 'app/features/alerting/unified/PanelAlertTabContent';\nimport { PanelQueriesChangedEvent, PanelTransformationsChangedEvent } from 'app/types/events';\n\nimport { DashboardModel } from '../../state/DashboardModel';\nimport { PanelModel } from '../../state/PanelModel';\nimport { TransformationsEditor } from '../TransformationsEditor/TransformationsEditor';\n\nimport { PanelEditorQueries } from './PanelEditorQueries';\nimport { PanelEditorTab, PanelEditorTabId } from './types';\n\ninterface PanelEditorTabsProps {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  tabs: PanelEditorTab[];\n  onChangeTab: (tab: PanelEditorTab) => void;\n}\n\nexport const PanelEditorTabs = memo(({ panel, dashboard, tabs, onChangeTab }: PanelEditorTabsProps) => {\n  const forceUpdate = useForceUpdate();\n  const styles = useStyles2(getStyles);\n\n  const instrumentedOnChangeTab = useCallback(\n    (tab: PanelEditorTab) => {\n      let eventName = 'panel_editor_tabs_changed';\n      if (config.featureToggles.transformationsRedesign) {\n        eventName = 'transformations_redesign_' + eventName;\n      }\n\n      if (!tab.active) {\n        reportInteraction(eventName, { tab_id: tab.id });\n      }\n\n      onChangeTab(tab);\n    },\n    [onChangeTab]\n  );\n\n  useEffect(() => {\n    const eventSubs = new Subscription();\n    eventSubs.add(panel.events.subscribe(PanelQueriesChangedEvent, forceUpdate));\n    eventSubs.add(panel.events.subscribe(PanelTransformationsChangedEvent, forceUpdate));\n    return () => eventSubs.unsubscribe();\n  }, [panel, dashboard, forceUpdate]);\n\n  const activeTab = tabs.find((item) => item.active)!;\n\n  if (tabs.length === 0) {\n    return null;\n  }\n\n  const alertingEnabled = config.unifiedAlertingEnabled;\n\n  return (\n    <div className={styles.wrapper}>\n      <TabsBar className={styles.tabBar} hideBorder>\n        {tabs.map((tab) => {\n          if (tab.id === PanelEditorTabId.Alert && alertingEnabled) {\n            return (\n              <PanelAlertTab\n                key={tab.id}\n                label={tab.text}\n                active={tab.active}\n                onChangeTab={() => onChangeTab(tab)}\n                icon={toIconName(tab.icon)}\n                panel={panel}\n                dashboard={dashboard}\n              />\n            );\n          }\n          return (\n            <Tab\n              key={tab.id}\n              label={tab.text}\n              active={tab.active}\n              onChangeTab={() => instrumentedOnChangeTab(tab)}\n              icon={toIconName(tab.icon)}\n              counter={getCounter(panel, tab)}\n            />\n          );\n        })}\n      </TabsBar>\n      <TabContent className={styles.tabContent}>\n        {activeTab.id === PanelEditorTabId.Query && <PanelEditorQueries panel={panel} queries={panel.targets} />}\n        {activeTab.id === PanelEditorTabId.Alert && <PanelAlertTabContent panel={panel} dashboard={dashboard} />}\n        {activeTab.id === PanelEditorTabId.Transform && <TransformationsEditor panel={panel} />}\n      </TabContent>\n    </div>\n  );\n});\n\nPanelEditorTabs.displayName = 'PanelEditorTabs';\n\nfunction getCounter(panel: PanelModel, tab: PanelEditorTab) {\n  switch (tab.id) {\n    case PanelEditorTabId.Query:\n      return panel.targets.length;\n    case PanelEditorTabId.Alert:\n      return panel.alert ? 1 : 0;\n    case PanelEditorTabId.Transform:\n      const transformations = panel.getTransformations() ?? [];\n      return transformations.length;\n  }\n\n  return null;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css({\n      display: 'flex',\n      flexDirection: 'column',\n      height: '100%',\n    }),\n    tabBar: css({\n      paddingLeft: theme.spacing(2),\n    }),\n    tabContent: css({\n      padding: 0,\n      display: 'flex',\n      flexDirection: 'column',\n      flex: 1,\n      minHeight: 0,\n      background: theme.colors.background.primary,\n      border: `1px solid ${theme.components.panel.borderColor}`,\n      borderLeft: 'none',\n      borderBottom: 'none',\n      borderTopRightRadius: theme.shape.borderRadius(1.5),\n    }),\n  };\n};\n","import memoizeOne from 'memoize-one';\n\nimport { PanelPlugin } from '@grafana/data';\nimport { getConfig } from 'app/core/config';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { getRulesPermissions } from 'app/features/alerting/unified/utils/access-control';\nimport { GRAFANA_RULES_SOURCE_NAME } from 'app/features/alerting/unified/utils/datasource';\n\nimport { PanelEditorTab, PanelEditorTabId } from '../types';\n\nexport const getPanelEditorTabs = memoizeOne((tab?: string, plugin?: PanelPlugin) => {\n  const tabs: PanelEditorTab[] = [];\n\n  if (!plugin) {\n    return tabs;\n  }\n\n  let defaultTab = PanelEditorTabId.Visualize;\n\n  if (plugin.meta.skipDataQuery) {\n    return [];\n  }\n\n  if (!plugin.meta.skipDataQuery) {\n    defaultTab = PanelEditorTabId.Query;\n\n    tabs.push({\n      id: PanelEditorTabId.Query,\n      text: 'Query',\n      icon: 'database',\n      active: false,\n    });\n\n    tabs.push({\n      id: PanelEditorTabId.Transform,\n      text: 'Transform data',\n      icon: 'process',\n      active: false,\n    });\n  }\n\n  if (shouldShowAlertingTab(plugin)) {\n    tabs.push({\n      id: PanelEditorTabId.Alert,\n      text: 'Alert',\n      icon: 'bell',\n      active: false,\n    });\n  }\n\n  const activeTab = tabs.find((item) => item.id === (tab || defaultTab)) ?? tabs[0];\n  activeTab.active = true;\n\n  return tabs;\n});\n\nexport function shouldShowAlertingTab(plugin: PanelPlugin) {\n  const { unifiedAlertingEnabled = false } = getConfig();\n  const hasRuleReadPermissions = contextSrv.hasPermission(getRulesPermissions(GRAFANA_RULES_SOURCE_NAME).read);\n  const isAlertingAvailable = unifiedAlertingEnabled && hasRuleReadPermissions;\n  if (!isAlertingAvailable) {\n    return false;\n  }\n\n  const isGraph = plugin.meta.id === 'graph';\n  const isTimeseries = plugin.meta.id === 'timeseries';\n\n  return isGraph || isTimeseries;\n}\n","import { css } from '@emotion/css';\nimport { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport AutoSizer from 'react-virtualized-auto-sizer';\nimport { Subscription } from 'rxjs';\n\nimport { FieldConfigSource, GrafanaTheme2, NavModel, NavModelItem, PageLayoutType } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { locationService } from '@grafana/runtime';\nimport {\n  Button,\n  HorizontalGroup,\n  InlineSwitch,\n  ModalsController,\n  RadioButtonGroup,\n  stylesFactory,\n  Themeable2,\n  ToolbarButton,\n  ToolbarButtonRow,\n  withTheme2,\n  Stack,\n} from '@grafana/ui';\nimport { AppChromeUpdate } from 'app/core/components/AppChrome/AppChromeUpdate';\nimport { Page } from 'app/core/components/Page/Page';\nimport { SplitPaneWrapper } from 'app/core/components/SplitPaneWrapper/SplitPaneWrapper';\nimport { appEvents } from 'app/core/core';\nimport { t, Trans } from 'app/core/internationalization';\nimport { SubMenuItems } from 'app/features/dashboard/components/SubMenu/SubMenuItems';\nimport { SaveLibraryPanelModal } from 'app/features/library-panels/components/SaveLibraryPanelModal/SaveLibraryPanelModal';\nimport { PanelModelWithLibraryPanel } from 'app/features/library-panels/types';\nimport { getPanelStateForModel } from 'app/features/panel/state/selectors';\nimport { updateTimeZoneForSession } from 'app/features/profile/state/reducers';\nimport { StoreState } from 'app/types';\nimport { PanelOptionsChangedEvent, ShowModalReactEvent } from 'app/types/events';\n\nimport { notifyApp } from '../../../../core/actions';\nimport { UnlinkModal } from '../../../dashboard-scene/scene/UnlinkModal';\nimport { isPanelModelLibraryPanel } from '../../../library-panels/guard';\nimport { getVariablesByKey } from '../../../variables/state/selectors';\nimport { DashboardPanel } from '../../dashgrid/DashboardPanel';\nimport { DashboardModel } from '../../state/DashboardModel';\nimport { PanelModel } from '../../state/PanelModel';\nimport { DashNavTimeControls } from '../DashNav/DashNavTimeControls';\nimport { SaveDashboardDrawer } from '../SaveDashboard/SaveDashboardDrawer';\n\nimport { OptionsPane } from './OptionsPane';\nimport { PanelEditorTableView } from './PanelEditorTableView';\nimport { PanelEditorTabs } from './PanelEditorTabs';\nimport { VisualizationButton } from './VisualizationButton';\nimport { discardPanelChanges, initPanelEditor, updatePanelEditorUIState } from './state/actions';\nimport { PanelEditorUIState, toggleTableView } from './state/reducers';\nimport { getPanelEditorTabs } from './state/selectors';\nimport { DisplayMode, displayModes, PanelEditorTab } from './types';\nimport { calculatePanelSize } from './utils';\n\ninterface OwnProps {\n  dashboard: DashboardModel;\n  sourcePanel: PanelModel;\n  sectionNav: NavModel;\n  pageNav: NavModelItem;\n  className?: string;\n  tab?: string;\n}\n\nconst mapStateToProps = (state: StoreState, ownProps: OwnProps) => {\n  const panel = state.panelEditor.getPanel();\n  const panelState = getPanelStateForModel(state, panel);\n\n  return {\n    panel,\n    plugin: panelState?.plugin,\n    instanceState: panelState?.instanceState,\n    initDone: state.panelEditor.initDone,\n    uiState: state.panelEditor.ui,\n    tableViewEnabled: state.panelEditor.tableViewEnabled,\n    variables: getVariablesByKey(ownProps.dashboard.uid, state),\n  };\n};\n\nconst mapDispatchToProps = {\n  initPanelEditor,\n  discardPanelChanges,\n  updatePanelEditorUIState,\n  updateTimeZoneForSession,\n  toggleTableView,\n  notifyApp,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype Props = OwnProps & ConnectedProps<typeof connector> & Themeable2;\n\ninterface State {\n  showSaveLibraryPanelModal?: boolean;\n}\n\nexport class PanelEditorUnconnected extends PureComponent<Props> {\n  private eventSubs?: Subscription;\n\n  state: State = {\n    showSaveLibraryPanelModal: false,\n  };\n\n  componentDidMount() {\n    this.props.initPanelEditor(this.props.sourcePanel, this.props.dashboard);\n  }\n\n  componentDidUpdate() {\n    const { panel, initDone } = this.props;\n\n    if (initDone && !this.eventSubs) {\n      this.eventSubs = new Subscription();\n      this.eventSubs.add(panel.events.subscribe(PanelOptionsChangedEvent, this.triggerForceUpdate));\n    }\n  }\n\n  componentWillUnmount() {\n    // redux action exitPanelEditor is called on location change from DashboardPrompt\n    this.eventSubs?.unsubscribe();\n  }\n\n  triggerForceUpdate = () => {\n    this.forceUpdate();\n  };\n\n  onBack = () => {\n    locationService.partial({\n      editPanel: null,\n      tab: null,\n      showCategory: null,\n    });\n  };\n\n  onDiscard = () => {\n    this.props.discardPanelChanges();\n    this.onBack();\n  };\n\n  onSaveDashboard = () => {\n    appEvents.publish(\n      new ShowModalReactEvent({\n        component: SaveDashboardDrawer,\n        props: { dashboard: this.props.dashboard },\n      })\n    );\n  };\n\n  onSaveLibraryPanel = async () => {\n    if (!isPanelModelLibraryPanel(this.props.panel)) {\n      // New library panel, no need to display modal\n      return;\n    }\n\n    this.setState({ showSaveLibraryPanelModal: true });\n  };\n\n  onChangeTab = (tab: PanelEditorTab) => {\n    locationService.partial({\n      tab: tab.id,\n    });\n  };\n\n  onFieldConfigChange = (config: FieldConfigSource) => {\n    // we do not need to trigger force update here as the function call below\n    // fires PanelOptionsChangedEvent which we subscribe to above\n    this.props.panel.updateFieldConfig({\n      ...config,\n    });\n  };\n\n  onPanelOptionsChanged = (options: PanelModel['options']) => {\n    // we do not need to trigger force update here as the function call below\n    // fires PanelOptionsChangedEvent which we subscribe to above\n    this.props.panel.updateOptions(options);\n  };\n\n  onPanelConfigChanged = (configKey: keyof PanelModel, value: unknown) => {\n    this.props.panel.setProperty(configKey, value);\n    this.props.panel.render();\n    this.forceUpdate();\n  };\n\n  onDisplayModeChange = (mode?: DisplayMode) => {\n    const { updatePanelEditorUIState } = this.props;\n    if (this.props.tableViewEnabled) {\n      this.props.toggleTableView();\n    }\n    updatePanelEditorUIState({\n      mode: mode,\n    });\n  };\n\n  onToggleTableView = () => {\n    this.props.toggleTableView();\n  };\n\n  renderPanel(styles: EditorStyles, isOnlyPanel: boolean) {\n    const { dashboard, panel, uiState, tableViewEnabled, theme } = this.props;\n\n    return (\n      <div className={styles.mainPaneWrapper} key=\"panel\">\n        {this.renderPanelToolbar(styles)}\n        <div className={styles.panelWrapper}>\n          <AutoSizer>\n            {({ width, height }) => {\n              if (width < 3 || height < 3) {\n                return null;\n              }\n\n              // If no tabs limit height so panel does not extend to edge\n              if (isOnlyPanel) {\n                height -= theme.spacing.gridSize * 2;\n              }\n\n              if (tableViewEnabled) {\n                return <PanelEditorTableView width={width} height={height} panel={panel} dashboard={dashboard} />;\n              }\n\n              const panelSize = calculatePanelSize(uiState.mode, width, height, panel);\n\n              return (\n                <div className={styles.centeringContainer} style={{ width, height }}>\n                  <div style={panelSize} data-panelid={panel.id}>\n                    <DashboardPanel\n                      key={panel.key}\n                      stateKey={panel.key}\n                      dashboard={dashboard}\n                      panel={panel}\n                      isEditing={true}\n                      isViewing={false}\n                      lazy={false}\n                      width={panelSize.width}\n                      height={panelSize.height}\n                    />\n                  </div>\n                </div>\n              );\n            }}\n          </AutoSizer>\n        </div>\n      </div>\n    );\n  }\n\n  renderPanelAndEditor(uiState: PanelEditorUIState, styles: EditorStyles) {\n    const { panel, dashboard, plugin, tab } = this.props;\n    const tabs = getPanelEditorTabs(tab, plugin);\n    const isOnlyPanel = tabs.length === 0;\n    const panelPane = this.renderPanel(styles, isOnlyPanel);\n\n    if (tabs.length === 0) {\n      return <div className={styles.onlyPanel}>{panelPane}</div>;\n    }\n\n    return (\n      <SplitPaneWrapper\n        splitOrientation=\"horizontal\"\n        maxSize={-200}\n        paneSize={uiState.topPaneSize}\n        primary=\"first\"\n        secondaryPaneStyle={{ minHeight: 0 }}\n        onDragFinished={(size) => {\n          if (size) {\n            updatePanelEditorUIState({ topPaneSize: size / window.innerHeight });\n          }\n        }}\n      >\n        {panelPane}\n        <div\n          className={styles.tabsWrapper}\n          data-testid={selectors.components.PanelEditor.DataPane.content}\n          key=\"panel-editor-tabs\"\n        >\n          <PanelEditorTabs\n            key={panel.key}\n            panel={panel}\n            dashboard={dashboard}\n            tabs={tabs}\n            onChangeTab={this.onChangeTab}\n          />\n        </div>\n      </SplitPaneWrapper>\n    );\n  }\n\n  renderTemplateVariables(styles: EditorStyles) {\n    const { variables } = this.props;\n\n    if (!variables.length) {\n      return null;\n    }\n\n    return (\n      <div className={styles.variablesWrapper}>\n        <SubMenuItems variables={variables} />\n      </div>\n    );\n  }\n\n  renderPanelToolbar(styles: EditorStyles) {\n    const { dashboard, uiState, variables, updateTimeZoneForSession, panel, tableViewEnabled } = this.props;\n\n    return (\n      <div className={styles.panelToolbar}>\n        <HorizontalGroup justify={variables.length > 0 ? 'space-between' : 'flex-end'} align=\"flex-start\">\n          {this.renderTemplateVariables(styles)}\n          <Stack gap={1}>\n            <InlineSwitch\n              label={t('dashboard.panel-editor-unconnected.table-view-label-table-view', 'Table view')}\n              showLabel={true}\n              id=\"table-view\"\n              value={tableViewEnabled}\n              onClick={this.onToggleTableView}\n              data-testid={selectors.components.PanelEditor.toggleTableView}\n            />\n            <RadioButtonGroup value={uiState.mode} options={displayModes} onChange={this.onDisplayModeChange} />\n            <DashNavTimeControls dashboard={dashboard} onChangeTimeZone={updateTimeZoneForSession} isOnCanvas={true} />\n            {!uiState.isPanelOptionsVisible && <VisualizationButton panel={panel} />}\n          </Stack>\n        </HorizontalGroup>\n      </div>\n    );\n  }\n\n  renderEditorActions() {\n    const size = 'sm';\n    let editorActions = [\n      <Button\n        onClick={this.onDiscard}\n        title={t('dashboard.panel-editor-unconnected.editor-actions.title-undo-all-changes', 'Undo all changes')}\n        key=\"discard\"\n        size={size}\n        variant=\"destructive\"\n        fill=\"outline\"\n      >\n        <Trans i18nKey=\"dashboard.panel-editor-unconnected.editor-actions.discard\">Discard</Trans>\n      </Button>,\n      this.props.dashboard.meta.canSave &&\n        (this.props.panel.libraryPanel ? (\n          <Button\n            onClick={this.onSaveLibraryPanel}\n            variant=\"primary\"\n            size={size}\n            title={t(\n              'dashboard.panel-editor-unconnected.editor-actions.title-apply-changes-and-save-library-panel',\n              'Apply changes and save library panel'\n            )}\n            key=\"save-panel\"\n          >\n            <Trans i18nKey=\"dashboard.panel-editor-unconnected.editor-actions.save-library-panel\">\n              Save library panel\n            </Trans>\n          </Button>\n        ) : (\n          <Button\n            onClick={this.onSaveDashboard}\n            title={t(\n              'dashboard.panel-editor-unconnected.editor-actions.title-apply-changes-and-save-dashboard',\n              'Apply changes and save dashboard'\n            )}\n            key=\"save\"\n            size={size}\n            variant=\"secondary\"\n          >\n            <Trans i18nKey=\"dashboard.panel-editor-unconnected.editor-actions.save\">Save</Trans>\n          </Button>\n        )),\n      <Button\n        onClick={this.onBack}\n        variant=\"primary\"\n        title={t(\n          'dashboard.panel-editor-unconnected.editor-actions.title-apply-changes-dashboard',\n          'Apply changes and go back to dashboard'\n        )}\n        data-testid={selectors.components.PanelEditor.applyButton}\n        key=\"apply\"\n        size={size}\n      >\n        <Trans i18nKey=\"dashboard.panel-editor-unconnected.editor-actions.apply\">Apply</Trans>\n      </Button>,\n    ];\n\n    if (this.props.panel.libraryPanel) {\n      editorActions.splice(\n        1,\n        0,\n        <ModalsController key=\"unlink-controller\">\n          {({ showModal, hideModal }) => {\n            return (\n              <ToolbarButton\n                onClick={() => {\n                  showModal(UnlinkModal, {\n                    onConfirm: () => {\n                      this.props.panel.unlinkLibraryPanel();\n                      this.forceUpdate();\n                    },\n                    onDismiss: hideModal,\n                    isOpen: true,\n                  });\n                }}\n                title=\"Disconnects this panel from the library panel so that you can edit it regularly.\"\n                key=\"unlink\"\n              >\n                <Trans i18nKey=\"dashboard.panel-editor-unconnected.unlink\">Unlink</Trans>\n              </ToolbarButton>\n            );\n          }}\n        </ModalsController>\n      );\n\n      // Remove \"Apply\" button\n      editorActions.pop();\n    }\n\n    return editorActions;\n  }\n\n  renderOptionsPane() {\n    const { plugin, dashboard, panel, instanceState } = this.props;\n\n    if (!plugin) {\n      return <div />;\n    }\n\n    return (\n      <OptionsPane\n        plugin={plugin}\n        dashboard={dashboard}\n        panel={panel}\n        instanceState={instanceState}\n        onFieldConfigsChange={this.onFieldConfigChange}\n        onPanelOptionsChanged={this.onPanelOptionsChanged}\n        onPanelConfigChange={this.onPanelConfigChanged}\n      />\n    );\n  }\n\n  onGoBackToDashboard = () => {\n    locationService.partial({ editPanel: null, tab: null, showCategory: null });\n  };\n\n  onConfirmAndDismissLibarayPanelModel = () => {\n    this.setState({ showSaveLibraryPanelModal: false });\n  };\n\n  render() {\n    const { initDone, uiState, theme, sectionNav, pageNav, className, updatePanelEditorUIState } = this.props;\n    const styles = getStyles(theme, this.props);\n\n    if (!initDone) {\n      return null;\n    }\n\n    return (\n      <Page\n        navModel={sectionNav}\n        pageNav={pageNav}\n        data-testid={selectors.components.PanelEditor.General.content}\n        layout={PageLayoutType.Custom}\n        className={className}\n      >\n        <AppChromeUpdate\n          actions={<ToolbarButtonRow alignment=\"right\">{this.renderEditorActions()}</ToolbarButtonRow>}\n        />\n        <div className={styles.wrapper}>\n          <div className={styles.verticalSplitPanesWrapper}>\n            {!uiState.isPanelOptionsVisible ? (\n              this.renderPanelAndEditor(uiState, styles)\n            ) : (\n              <SplitPaneWrapper\n                splitOrientation=\"vertical\"\n                maxSize={-300}\n                paneSize={uiState.rightPaneSize}\n                primary=\"second\"\n                onDragFinished={(size) => {\n                  if (size) {\n                    updatePanelEditorUIState({ rightPaneSize: size / window.innerWidth });\n                  }\n                }}\n              >\n                {this.renderPanelAndEditor(uiState, styles)}\n                {this.renderOptionsPane()}\n              </SplitPaneWrapper>\n            )}\n          </div>\n          {this.state.showSaveLibraryPanelModal && (\n            <SaveLibraryPanelModal\n              panel={this.props.panel as PanelModelWithLibraryPanel}\n              folderUid={this.props.dashboard.meta.folderUid ?? ''}\n              onConfirm={this.onConfirmAndDismissLibarayPanelModel}\n              onDiscard={this.onDiscard}\n              onDismiss={this.onConfirmAndDismissLibarayPanelModel}\n            />\n          )}\n        </div>\n      </Page>\n    );\n  }\n}\n\nexport const PanelEditor = withTheme2(connector(PanelEditorUnconnected));\n\n/*\n * Styles\n */\nexport const getStyles = stylesFactory((theme: GrafanaTheme2, props: Props) => {\n  const { uiState } = props;\n  const paneSpacing = theme.spacing(2);\n\n  return {\n    wrapper: css({\n      width: '100%',\n      flexGrow: 1,\n      minHeight: 0,\n      display: 'flex',\n      paddingTop: theme.spacing(2),\n    }),\n    verticalSplitPanesWrapper: css({\n      display: 'flex',\n      flexDirection: 'column',\n      height: '100%',\n      width: '100%',\n      position: 'relative',\n    }),\n    mainPaneWrapper: css({\n      display: 'flex',\n      flexDirection: 'column',\n      height: '100%',\n      width: '100%',\n      paddingRight: `${uiState.isPanelOptionsVisible ? 0 : paneSpacing}`,\n    }),\n    variablesWrapper: css({\n      label: 'variablesWrapper',\n      display: 'flex',\n      flexGrow: 1,\n      flexWrap: 'wrap',\n      gap: theme.spacing(1, 2),\n    }),\n    panelWrapper: css({\n      flex: '1 1 0',\n      minHeight: 0,\n      width: '100%',\n      paddingLeft: paneSpacing,\n    }),\n    tabsWrapper: css({\n      height: '100%',\n      width: '100%',\n    }),\n    panelToolbar: css({\n      display: 'flex',\n      padding: `0 0 ${paneSpacing} ${paneSpacing}`,\n      justifyContent: 'space-between',\n      flexWrap: 'wrap',\n    }),\n    angularWarning: css({\n      display: 'flex',\n      height: theme.spacing(4),\n      alignItems: 'center',\n    }),\n    toolbarLeft: css({\n      paddingLeft: theme.spacing(1),\n    }),\n    centeringContainer: css({\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      position: 'relative',\n      flexDirection: 'column',\n    }),\n    onlyPanel: css({\n      height: '100%',\n      position: 'absolute',\n      overflow: 'hidden',\n      width: '100%',\n    }),\n  };\n});\n\ntype EditorStyles = ReturnType<typeof getStyles>;\n","import { css } from '@emotion/css';\nimport { useEffect, useState } from 'react';\n\nimport { AnnotationQuery, EventBus, GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { InlineField, InlineFieldRow, InlineSwitch, useStyles2 } from '@grafana/ui';\nimport { LoadingIndicator } from '@grafana/ui/internal';\n\nimport { AnnotationQueryFinished, AnnotationQueryStarted } from '../../../../types/events';\nimport { getDashboardQueryRunner } from '../../../query/state/DashboardQueryRunner/DashboardQueryRunner';\n\nexport interface AnnotationPickerProps {\n  events: EventBus;\n  annotation: AnnotationQuery;\n  onEnabledChanged: (annotation: AnnotationQuery) => void;\n}\n\nexport const AnnotationPicker = ({ annotation, events, onEnabledChanged }: AnnotationPickerProps): JSX.Element => {\n  const [loading, setLoading] = useState(false);\n  const styles = useStyles2(getStyles);\n  const onCancel = () => getDashboardQueryRunner().cancel(annotation);\n\n  useEffect(() => {\n    const started = events.getStream(AnnotationQueryStarted).subscribe({\n      next: (event) => {\n        if (event.payload === annotation) {\n          setLoading(true);\n        }\n      },\n    });\n    const stopped = events.getStream(AnnotationQueryFinished).subscribe({\n      next: (event) => {\n        if (event.payload === annotation) {\n          setLoading(false);\n        }\n      },\n    });\n\n    return () => {\n      started.unsubscribe();\n      stopped.unsubscribe();\n    };\n  });\n\n  return (\n    <div key={annotation.name} className={styles.annotation}>\n      <InlineFieldRow>\n        <InlineField\n          label={annotation.name}\n          disabled={loading}\n          data-testid={selectors.pages.Dashboard.SubMenu.Annotations.annotationLabel(annotation.name)}\n        >\n          <InlineSwitch\n            label={annotation.name}\n            value={annotation.enable}\n            onChange={() => onEnabledChanged(annotation)}\n            disabled={loading}\n            data-testid={selectors.pages.Dashboard.SubMenu.Annotations.annotationToggle(annotation.name)}\n          />\n        </InlineField>\n        <div className={styles.indicator}>\n          <LoadingIndicator loading={loading} onCancel={onCancel} />\n        </div>\n      </InlineFieldRow>\n    </div>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    annotation: css({\n      display: 'inline-block',\n      marginRight: theme.spacing(1),\n      '.fa-caret-down': {\n        fontSize: '75%',\n        paddingLeft: theme.spacing(1),\n      },\n      '.gf-form-inline .gf-form': {\n        marginBottom: 0,\n      },\n    }),\n    indicator: css({\n      alignSelf: 'center',\n      padding: `0 ${theme.spacing(0.5)}`,\n    }),\n  };\n}\n","import { useEffect, useState } from 'react';\n\nimport { AnnotationQuery, DataQuery, EventBus } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\n\nimport { AnnotationPicker } from './AnnotationPicker';\n\ninterface Props {\n  events: EventBus;\n  annotations: AnnotationQuery[];\n  onAnnotationChanged: (annotation: AnnotationQuery<DataQuery>) => void;\n}\n\nexport const Annotations = ({ annotations, onAnnotationChanged, events }: Props) => {\n  const [visibleAnnotations, setVisibleAnnotations] = useState<AnnotationQuery[]>([]);\n  useEffect(() => {\n    setVisibleAnnotations(annotations.filter((annotation) => annotation.hide !== true));\n  }, [annotations]);\n\n  if (visibleAnnotations.length === 0) {\n    return null;\n  }\n\n  return (\n    <div data-testid={selectors.pages.Dashboard.SubMenu.Annotations.annotationsWrapper}>\n      {visibleAnnotations.map((annotation) => (\n        <AnnotationPicker\n          events={events}\n          annotation={annotation}\n          onEnabledChanged={onAnnotationChanged}\n          key={annotation.name}\n        />\n      ))}\n    </div>\n  );\n};\n","import { useEffectOnce } from 'react-use';\n\nimport { sanitizeUrl } from '@grafana/data/internal';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { TimeRangeUpdatedEvent } from '@grafana/runtime';\nimport { DashboardLink } from '@grafana/schema';\nimport { Tooltip, useForceUpdate } from '@grafana/ui';\nimport { LINK_ICON_MAP } from 'app/features/dashboard-scene/settings/links/utils';\n\nimport { getLinkSrv } from '../../../panel/panellinks/link_srv';\nimport { DashboardModel } from '../../state/DashboardModel';\n\nimport { DashboardLinkButton, DashboardLinksDashboard } from './DashboardLinksDashboard';\n\nexport interface Props {\n  dashboard: DashboardModel;\n  links: DashboardLink[];\n}\n\nexport const DashboardLinks = ({ dashboard, links }: Props) => {\n  const forceUpdate = useForceUpdate();\n\n  useEffectOnce(() => {\n    const sub = dashboard.events.subscribe(TimeRangeUpdatedEvent, forceUpdate);\n    return () => sub.unsubscribe();\n  });\n\n  if (!links.length) {\n    return null;\n  }\n\n  return (\n    <>\n      {links.map((link: DashboardLink, index: number) => {\n        const linkInfo = getLinkSrv().getAnchorInfo(link);\n        const key = `${link.title}-$${index}`;\n\n        if (link.type === 'dashboards') {\n          return <DashboardLinksDashboard key={key} link={link} linkInfo={linkInfo} dashboardUID={dashboard.uid} />;\n        }\n\n        const icon = LINK_ICON_MAP[link.icon];\n\n        const linkElement = (\n          <DashboardLinkButton\n            href={sanitizeUrl(linkInfo.href)}\n            target={link.targetBlank ? '_blank' : undefined}\n            rel=\"noreferrer\"\n            data-testid={selectors.components.DashboardLinks.link}\n            icon={icon}\n          >\n            {linkInfo.title}\n          </DashboardLinkButton>\n        );\n\n        return (\n          <div key={key} data-testid={selectors.components.DashboardLinks.container}>\n            {link.tooltip ? <Tooltip content={linkInfo.tooltip}>{linkElement}</Tooltip> : linkElement}\n          </div>\n        );\n      })}\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport { PureComponent } from 'react';\nimport * as React from 'react';\nimport { connect, MapStateToProps } from 'react-redux';\n\nimport { AnnotationQuery, DataQuery, TypedVariableModel, GrafanaTheme2 } from '@grafana/data';\nimport { DashboardLink } from '@grafana/schema';\nimport { stylesFactory, Themeable2, withTheme2 } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { StoreState } from '../../../../types';\nimport { getSubMenuVariables, getVariablesState } from '../../../variables/state/selectors';\nimport { DashboardModel } from '../../state/DashboardModel';\n\nimport { Annotations } from './Annotations';\nimport { DashboardLinks } from './DashboardLinks';\nimport { SubMenuItems } from './SubMenuItems';\n\ninterface OwnProps extends Themeable2 {\n  dashboard: DashboardModel;\n  links: DashboardLink[];\n  annotations: AnnotationQuery[];\n}\n\ninterface ConnectedProps {\n  variables: TypedVariableModel[];\n}\n\ninterface DispatchProps {}\n\ntype Props = OwnProps & ConnectedProps & DispatchProps;\n\nclass SubMenuUnConnected extends PureComponent<Props> {\n  onAnnotationStateChanged = (updatedAnnotation: AnnotationQuery<DataQuery>) => {\n    // we're mutating dashboard state directly here until annotations are in Redux.\n    for (let index = 0; index < this.props.dashboard.annotations.list.length; index++) {\n      const annotation = this.props.dashboard.annotations.list[index];\n      if (annotation.name === updatedAnnotation.name) {\n        annotation.enable = !annotation.enable;\n        break;\n      }\n    }\n    this.props.dashboard.startRefresh();\n    this.forceUpdate();\n  };\n\n  disableSubmitOnEnter = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n  };\n\n  render() {\n    const { dashboard, variables, links, annotations, theme } = this.props;\n\n    const styles = getStyles(theme);\n\n    const readOnlyVariables = dashboard.meta.isSnapshot ?? false;\n\n    return (\n      <div className={styles.submenu}>\n        <form\n          aria-label={t('dashboard.sub-menu-un-connected.aria-label-template-variables', 'Template variables')}\n          className={styles.formStyles}\n          onSubmit={this.disableSubmitOnEnter}\n        >\n          <SubMenuItems variables={variables} readOnly={readOnlyVariables} />\n        </form>\n        <Annotations\n          annotations={annotations}\n          onAnnotationChanged={this.onAnnotationStateChanged}\n          events={dashboard.events}\n        />\n        <div className={styles.spacer} />\n        {dashboard && <DashboardLinks dashboard={dashboard} links={links} />}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state, ownProps) => {\n  const { uid } = ownProps.dashboard;\n  const templatingState = getVariablesState(uid, state);\n  return {\n    variables: getSubMenuVariables(uid, templatingState.variables),\n  };\n};\n\nconst getStyles = stylesFactory((theme: GrafanaTheme2) => {\n  return {\n    formStyles: css({\n      display: 'contents',\n      flexWrap: 'wrap',\n    }),\n    submenu: css({\n      display: 'flex',\n      flexDirection: 'row',\n      flexWrap: 'wrap',\n      alignContent: 'flex-start',\n      alignItems: 'flex-start',\n      gap: `${theme.spacing(1)} ${theme.spacing(2)}`,\n      padding: `0 0 ${theme.spacing(1)} 0`,\n    }),\n    spacer: css({\n      flexGrow: 1,\n    }),\n  };\n});\n\nexport const SubMenu = withTheme2(connect(mapStateToProps)(SubMenuUnConnected));\n\nSubMenu.displayName = 'SubMenu';\n","import { css, cx } from '@emotion/css';\nimport { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { NavModel, NavModelItem, TimeRange, PageLayoutType, locationUtil, GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { locationService } from '@grafana/runtime';\nimport { Themeable2, withTheme2 } from '@grafana/ui';\nimport { notifyApp } from 'app/core/actions';\nimport { ScrollRefElement } from 'app/core/components/NativeScrollbar';\nimport { Page } from 'app/core/components/Page/Page';\nimport { GrafanaContext, GrafanaContextType } from 'app/core/context/GrafanaContext';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { getKioskMode } from 'app/core/navigation/kiosk';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { ID_PREFIX } from 'app/core/reducers/navBarTree';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport { dashboardWatcher } from 'app/features/live/dashboard/dashboardWatcher';\nimport { KioskMode, StoreState } from 'app/types';\nimport { PanelEditEnteredEvent, PanelEditExitedEvent } from 'app/types/events';\n\nimport { cancelVariables, templateVarsChangedInUrl } from '../../variables/state/actions';\nimport { findTemplateVarChanges } from '../../variables/utils';\nimport { DashNav } from '../components/DashNav';\nimport { DashboardLoading } from '../components/DashboardLoading/DashboardLoading';\nimport { DashboardPrompt } from '../components/DashboardPrompt/DashboardPrompt';\nimport { DashboardSettings } from '../components/DashboardSettings';\nimport { PanelInspector } from '../components/Inspector/PanelInspector';\nimport { PanelEditor } from '../components/PanelEditor/PanelEditor';\nimport { ShareModal } from '../components/ShareModal/ShareModal';\nimport { SubMenu } from '../components/SubMenu/SubMenu';\nimport { DashboardGrid } from '../dashgrid/DashboardGrid';\nimport { liveTimer } from '../dashgrid/liveTimer';\nimport { getTimeSrv } from '../services/TimeSrv';\nimport { cleanUpDashboardAndVariables } from '../state/actions';\nimport { initDashboard } from '../state/initDashboard';\n\nimport { DashboardPageError } from './DashboardPageError';\nimport { DashboardPageRouteParams, DashboardPageRouteSearchParams } from './types';\n\nimport 'react-grid-layout/css/styles.css';\nimport 'react-resizable/css/styles.css';\n\nexport const mapStateToProps = (state: StoreState) => ({\n  initPhase: state.dashboard.initPhase,\n  initError: state.dashboard.initError,\n  dashboard: state.dashboard.getModel(),\n  navIndex: state.navIndex,\n});\n\nconst mapDispatchToProps = {\n  initDashboard,\n  cleanUpDashboardAndVariables,\n  notifyApp,\n  cancelVariables,\n  templateVarsChangedInUrl,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type DashboardPageParams = { slug: string; uid: string; type: string; accessToken: string };\nexport type Props = Themeable2 &\n  Omit<GrafanaRouteComponentProps<DashboardPageRouteParams, DashboardPageRouteSearchParams>, 'match'> &\n  // The params returned from useParams are all optional, so we need to match that type here\n  ConnectedProps<typeof connector> & { params: Partial<DashboardPageParams> };\n\nexport interface State {\n  editPanel: PanelModel | null;\n  viewPanel: PanelModel | null;\n  editView: string | null;\n  updateScrollTop?: number;\n  rememberScrollTop?: number;\n  showLoadingState: boolean;\n  panelNotFound: boolean;\n  editPanelAccessDenied: boolean;\n  scrollElement?: ScrollRefElement;\n  pageNav?: NavModelItem;\n  sectionNav?: NavModel;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  fullScreenPanel: css({\n    '.react-grid-layout': {\n      height: 'auto !important',\n      transitionProperty: 'none',\n    },\n    '.react-grid-item': {\n      display: 'none !important',\n      transitionProperty: 'none !important',\n\n      '&--fullscreen': {\n        display: 'block !important',\n        // can't avoid type assertion here due to !important\n        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n        position: 'unset !important' as 'unset',\n        transform: 'translate(0px, 0px) !important',\n      },\n    },\n\n    // Disable grid interaction indicators in fullscreen panels\n    '.panel-header:hover': {\n      backgroundColor: 'inherit',\n    },\n\n    '.panel-title-container': {\n      cursor: 'pointer',\n    },\n\n    '.react-resizable-handle': {\n      display: 'none',\n    },\n  }),\n});\n\nexport class UnthemedDashboardPage extends PureComponent<Props, State> {\n  declare context: GrafanaContextType;\n  static contextType = GrafanaContext;\n\n  private forceRouteReloadCounter = 0;\n  state: State = this.getCleanState();\n\n  getCleanState(): State {\n    return {\n      editView: null,\n      editPanel: null,\n      viewPanel: null,\n      showLoadingState: false,\n      panelNotFound: false,\n      editPanelAccessDenied: false,\n    };\n  }\n\n  componentDidMount() {\n    this.initDashboard();\n    this.forceRouteReloadCounter = (this.props.location.state as any)?.routeReloadCounter || 0;\n  }\n\n  componentWillUnmount() {\n    this.closeDashboard();\n  }\n\n  closeDashboard() {\n    this.props.cleanUpDashboardAndVariables();\n    this.setState(this.getCleanState());\n  }\n\n  initDashboard() {\n    const { dashboard, params, queryParams } = this.props;\n\n    if (dashboard) {\n      this.closeDashboard();\n    }\n\n    this.props.initDashboard({\n      urlSlug: params.slug,\n      urlUid: params.uid,\n      urlType: params.type,\n      urlFolderUid: queryParams.folderUid,\n      panelType: queryParams.panelType,\n      routeName: this.props.route.routeName,\n      fixUrl: true,\n      accessToken: params.accessToken,\n      keybindingSrv: this.context.keybindings,\n    });\n\n    // small delay to start live updates\n    setTimeout(this.updateLiveTimer, 250);\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    const { dashboard, params, templateVarsChangedInUrl } = this.props;\n    const routeReloadCounter = (this.props.location.state as any)?.routeReloadCounter;\n\n    if (!dashboard) {\n      return;\n    }\n\n    if (\n      prevProps.params.uid !== params.uid ||\n      (routeReloadCounter !== undefined && this.forceRouteReloadCounter !== routeReloadCounter)\n    ) {\n      this.initDashboard();\n      this.forceRouteReloadCounter = routeReloadCounter;\n      return;\n    }\n\n    if (prevProps.location.search !== this.props.location.search) {\n      const prevUrlParams = prevProps.queryParams;\n      const urlParams = this.props.queryParams;\n\n      if (urlParams?.from !== prevUrlParams?.from || urlParams?.to !== prevUrlParams?.to) {\n        getTimeSrv().updateTimeRangeFromUrl();\n        this.updateLiveTimer();\n      }\n\n      if (!prevUrlParams?.refresh && urlParams?.refresh) {\n        getTimeSrv().setAutoRefresh(urlParams.refresh);\n      }\n\n      const templateVarChanges = findTemplateVarChanges(this.props.queryParams, prevProps.queryParams);\n\n      if (templateVarChanges) {\n        templateVarsChangedInUrl(dashboard.uid, templateVarChanges);\n      }\n    }\n\n    // entering edit mode\n    if (this.state.editPanel && !prevState.editPanel) {\n      dashboardWatcher.setEditingState(true);\n\n      // Some panels need to be notified when entering edit mode\n      this.props.dashboard?.events.publish(new PanelEditEnteredEvent(this.state.editPanel.id));\n    }\n\n    // leaving edit mode\n    if (!this.state.editPanel && prevState.editPanel) {\n      dashboardWatcher.setEditingState(false);\n\n      // Some panels need kicked when leaving edit mode\n      this.props.dashboard?.events.publish(new PanelEditExitedEvent(prevState.editPanel.id));\n    }\n\n    if (this.state.editPanelAccessDenied) {\n      this.props.notifyApp(createErrorNotification('Permission to edit panel denied'));\n      locationService.partial({ editPanel: null });\n    }\n\n    if (this.state.panelNotFound) {\n      this.props.notifyApp(createErrorNotification(`Panel not found`));\n      locationService.partial({ editPanel: null, viewPanel: null });\n    }\n\n    // Update window scroll position\n    if (this.state.updateScrollTop !== undefined && this.state.updateScrollTop !== prevState.updateScrollTop) {\n      this.state.scrollElement?.scrollTo(0, this.state.updateScrollTop);\n    }\n  }\n\n  updateLiveTimer = () => {\n    let tr: TimeRange | undefined = undefined;\n    if (this.props.dashboard?.liveNow) {\n      tr = getTimeSrv().timeRange();\n    }\n    liveTimer.setLiveTimeRange(tr);\n  };\n\n  static getDerivedStateFromProps(props: Props, state: State) {\n    const { dashboard, queryParams } = props;\n\n    const urlEditPanelId = queryParams.editPanel;\n    const urlViewPanelId = queryParams.viewPanel;\n    const urlEditView = queryParams.editview;\n\n    if (!dashboard) {\n      return state;\n    }\n\n    const updatedState = { ...state };\n\n    // Entering settings view\n    if (!state.editView && urlEditView) {\n      updatedState.editView = urlEditView;\n      updatedState.rememberScrollTop = state.scrollElement?.scrollTop;\n      updatedState.updateScrollTop = 0;\n    }\n\n    // Leaving settings view\n    else if (state.editView && !urlEditView) {\n      updatedState.updateScrollTop = state.rememberScrollTop;\n      updatedState.editView = null;\n    }\n\n    // Entering edit mode\n    if (!state.editPanel && urlEditPanelId) {\n      const panel = dashboard.getPanelByUrlId(urlEditPanelId);\n      if (panel) {\n        if (dashboard.canEditPanel(panel)) {\n          updatedState.editPanel = panel;\n          updatedState.rememberScrollTop = state.scrollElement?.scrollTop;\n        } else {\n          updatedState.editPanelAccessDenied = true;\n        }\n      } else {\n        updatedState.panelNotFound = true;\n      }\n    }\n    // Leaving edit mode\n    else if (state.editPanel && !urlEditPanelId) {\n      updatedState.editPanel = null;\n      updatedState.updateScrollTop = state.rememberScrollTop;\n    }\n\n    // Entering view mode\n    if (!state.viewPanel && urlViewPanelId) {\n      const panel = dashboard.getPanelByUrlId(urlViewPanelId);\n      if (panel) {\n        // This mutable state feels wrong to have in getDerivedStateFromProps\n        // Should move this state out of dashboard in the future\n        dashboard.initViewPanel(panel);\n        updatedState.viewPanel = panel;\n        updatedState.rememberScrollTop = state.scrollElement?.scrollTop;\n        updatedState.updateScrollTop = 0;\n      } else {\n        updatedState.panelNotFound = true;\n      }\n    }\n    // Leaving view mode\n    else if (state.viewPanel && !urlViewPanelId) {\n      // This mutable state feels wrong to have in getDerivedStateFromProps\n      // Should move this state out of dashboard in the future\n      dashboard.exitViewPanel(state.viewPanel);\n      updatedState.viewPanel = null;\n      updatedState.updateScrollTop = state.rememberScrollTop;\n    }\n\n    // if we removed url edit state, clear any panel not found state\n    if (state.panelNotFound || (state.editPanelAccessDenied && !urlEditPanelId)) {\n      updatedState.panelNotFound = false;\n      updatedState.editPanelAccessDenied = false;\n    }\n\n    return updateStatePageNavFromProps(props, updatedState);\n  }\n\n  setScrollRef = (scrollElement: ScrollRefElement): void => {\n    this.setState({ scrollElement });\n  };\n\n  getInspectPanel() {\n    const { dashboard, queryParams } = this.props;\n\n    const inspectPanelId = queryParams.inspect;\n\n    if (!dashboard || !inspectPanelId) {\n      return null;\n    }\n\n    const inspectPanel = dashboard.getPanelById(parseInt(inspectPanelId, 10));\n\n    // cannot inspect panels plugin is not already loaded\n    if (!inspectPanel) {\n      return null;\n    }\n\n    return inspectPanel;\n  }\n\n  onCloseShareModal = () => {\n    locationService.partial({ shareView: null });\n  };\n\n  render() {\n    const { dashboard, initError, queryParams, theme, params } = this.props;\n\n    const { editPanel, viewPanel, pageNav, sectionNav } = this.state;\n    const kioskMode = getKioskMode(this.props.queryParams);\n    const styles = getStyles(theme);\n\n    if (!dashboard || !pageNav || !sectionNav) {\n      return <DashboardLoading initPhase={this.props.initPhase} />;\n    }\n\n    const inspectPanel = this.getInspectPanel();\n    const showSubMenu = !editPanel && !kioskMode && !this.props.queryParams.editview && dashboard.isSubMenuVisible();\n\n    const showToolbar = kioskMode !== KioskMode.Full && !queryParams.editview && !initError;\n\n    const pageClassName = cx({\n      [styles.fullScreenPanel]: Boolean(viewPanel),\n      'page-hidden': Boolean(queryParams.editview || editPanel),\n    });\n\n    return (\n      <>\n        <Page\n          navModel={sectionNav}\n          pageNav={pageNav}\n          layout={PageLayoutType.Canvas}\n          className={pageClassName}\n          onSetScrollRef={this.setScrollRef}\n        >\n          {showToolbar && (\n            <header data-testid={selectors.pages.Dashboard.DashNav.navV2}>\n              <DashNav\n                dashboard={dashboard}\n                title={dashboard.title}\n                folderTitle={dashboard.meta.folderTitle}\n                isFullscreen={!!viewPanel}\n                kioskMode={kioskMode}\n                hideTimePicker={dashboard.timepicker.hidden}\n              />\n            </header>\n          )}\n          <DashboardPrompt dashboard={dashboard} />\n          {initError && <DashboardPageError error={initError.error} type={params.type} />}\n          {showSubMenu && (\n            <section aria-label={selectors.pages.Dashboard.SubMenu.submenu}>\n              <SubMenu dashboard={dashboard} annotations={dashboard.annotations.list} links={dashboard.links} />\n            </section>\n          )}\n          {!initError && (\n            <DashboardGrid\n              dashboard={dashboard}\n              isEditable={!!dashboard.meta.canEdit}\n              viewPanel={viewPanel}\n              editPanel={editPanel}\n            />\n          )}\n\n          {inspectPanel && <PanelInspector dashboard={dashboard} panel={inspectPanel} />}\n          {queryParams.shareView && (\n            <ShareModal dashboard={dashboard} onDismiss={this.onCloseShareModal} activeTab={queryParams.shareView} />\n          )}\n        </Page>\n        {editPanel && (\n          <PanelEditor\n            dashboard={dashboard}\n            sourcePanel={editPanel}\n            tab={this.props.queryParams.tab}\n            sectionNav={sectionNav}\n            pageNav={pageNav}\n          />\n        )}\n        {queryParams.editview && (\n          <DashboardSettings\n            dashboard={dashboard}\n            editview={queryParams.editview}\n            pageNav={pageNav}\n            sectionNav={sectionNav}\n          />\n        )}\n      </>\n    );\n  }\n}\n\nfunction updateStatePageNavFromProps(props: Props, state: State): State {\n  const { dashboard, navIndex } = props;\n\n  if (!dashboard) {\n    return state;\n  }\n\n  let pageNav = state.pageNav;\n  let sectionNav = state.sectionNav;\n\n  if (!pageNav || dashboard.title !== pageNav.text || dashboard.meta.folderUrl !== pageNav.parentItem?.url) {\n    pageNav = {\n      text: dashboard.title,\n      url: locationUtil.getUrlForPartial(props.location, {\n        editview: null,\n        editPanel: null,\n        viewPanel: null,\n      }),\n    };\n  }\n\n  sectionNav = getNavModel(props.navIndex, ID_PREFIX + dashboard.uid, getNavModel(props.navIndex, 'dashboards/browse'));\n\n  const { folderUid } = dashboard.meta;\n  if (folderUid && pageNav && sectionNav.main.id !== 'starred') {\n    const folderNavModel = getNavModel(navIndex, `folder-dashboards-${folderUid}`).main;\n    // If the folder hasn't loaded (maybe user doesn't have permission on it?) then\n    // don't show the \"page not found\" breadcrumb\n    if (folderNavModel.id !== 'not-found') {\n      pageNav = {\n        ...pageNav,\n        parentItem: folderNavModel,\n      };\n    }\n  }\n\n  if (state.editPanel || state.viewPanel) {\n    pageNav = {\n      ...pageNav,\n      text: `${state.editPanel ? 'Edit' : 'View'} panel`,\n      parentItem: pageNav,\n      url: undefined,\n    };\n  }\n\n  if (state.pageNav === pageNav && state.sectionNav === sectionNav) {\n    return state;\n  }\n\n  return {\n    ...state,\n    pageNav,\n    sectionNav,\n  };\n}\n\nexport const DashboardPage = withTheme2(UnthemedDashboardPage);\nDashboardPage.displayName = 'DashboardPage';\nexport default connector(DashboardPage);\n","import { useLocation, useParams } from 'react-router-dom-v5-compat';\nimport { useAsync } from 'react-use';\n\nimport { config } from '@grafana/runtime';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport DashboardScenePage from 'app/features/dashboard-scene/pages/DashboardScenePage';\nimport { getDashboardScenePageStateManager } from 'app/features/dashboard-scene/pages/DashboardScenePageStateManager';\nimport { DashboardRoutes } from 'app/types';\n\nimport { isDashboardV2Resource } from '../api/utils';\n\nimport DashboardPage, { DashboardPageParams } from './DashboardPage';\nimport { DashboardPageError } from './DashboardPageError';\nimport { DashboardPageRouteParams, DashboardPageRouteSearchParams } from './types';\n\nexport type DashboardPageProxyProps = Omit<\n  GrafanaRouteComponentProps<DashboardPageRouteParams, DashboardPageRouteSearchParams>,\n  'match'\n>;\n\n// This proxy component is used for Dashboard -> Scenes migration.\n// It will render DashboardScenePage if the user is only allowed to view the dashboard.\nfunction DashboardPageProxy(props: DashboardPageProxyProps) {\n  const forceScenes = props.queryParams.scenes === true;\n  const forceOld = props.queryParams.scenes === false;\n  const params = useParams<DashboardPageParams>();\n  const location = useLocation();\n  const stateManager = getDashboardScenePageStateManager();\n\n  if (forceScenes || (config.featureToggles.dashboardScene && !forceOld)) {\n    return <DashboardScenePage {...props} />;\n  }\n\n  const isScenesSupportedRoute = Boolean(\n    props.route.routeName === DashboardRoutes.Home || (props.route.routeName === DashboardRoutes.Normal && params.uid)\n  );\n\n  // We pre-fetch dashboard to render dashboard page component depending on dashboard permissions.\n  // To avoid querying single dashboard multiple times, stateManager.fetchDashboard uses a simple, short-lived cache.\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const dashboard = useAsync(async () => {\n    if (params.type === 'snapshot') {\n      return null;\n    }\n\n    return stateManager.fetchDashboard({\n      route: props.route.routeName as DashboardRoutes,\n      uid: params.uid ?? '',\n      type: params.type,\n      slug: params.slug,\n    });\n  }, [params.uid, props.route.routeName]);\n\n  if (dashboard.error) {\n    return <DashboardPageError error={dashboard.error} />;\n  }\n\n  if (dashboard.loading) {\n    return null;\n  }\n\n  const uid =\n    dashboard.value && isDashboardV2Resource(dashboard.value)\n      ? dashboard.value.metadata.name\n      : dashboard.value?.meta.uid;\n  const canEdit =\n    dashboard.value && isDashboardV2Resource(dashboard.value)\n      ? dashboard.value?.access.canEdit\n      : dashboard.value?.meta?.canEdit || dashboard.value?.meta?.canMakeEditable;\n  const isNew = !uid;\n\n  if (uid !== params.uid && !isNew) {\n    return null;\n  }\n\n  if (!config.featureToggles.dashboardSceneForViewers) {\n    return <DashboardPage {...props} params={params} location={location} />;\n  }\n\n  if (!canEdit && isScenesSupportedRoute && !forceOld) {\n    return <DashboardScenePage {...props} />;\n  } else {\n    return <DashboardPage {...props} params={params} location={location} />;\n  }\n}\n\nexport default DashboardPageProxy;\n","import { TimeZone } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { WeekStart } from '@grafana/ui';\nimport { notifyApp } from 'app/core/actions';\nimport { createSuccessNotification } from 'app/core/copy/appNotification';\nimport { getDashboardAPI } from 'app/features/dashboard/api/dashboard_api';\nimport { dashboardWatcher } from 'app/features/live/dashboard/dashboardWatcher';\nimport { removeAllPanels } from 'app/features/panel/state/reducers';\nimport { updateTimeZoneForSession, updateWeekStartForSession } from 'app/features/profile/state/reducers';\nimport { ThunkResult } from 'app/types';\n\nimport { loadPluginDashboards } from '../../plugins/admin/state/actions';\nimport { cancelVariables } from '../../variables/state/actions';\nimport { getDashboardSrv } from '../services/DashboardSrv';\nimport { getTimeSrv } from '../services/TimeSrv';\n\nimport { cleanUpDashboard } from './reducers';\n\nexport function importDashboard(data: any, dashboardTitle: string): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().post('/api/dashboards/import', data);\n    dispatch(notifyApp(createSuccessNotification('Dashboard Imported', dashboardTitle)));\n    dispatch(loadPluginDashboards());\n  };\n}\n\nexport function removeDashboard(uid: string): ThunkResult<void> {\n  return async (dispatch) => {\n    await getDashboardAPI().deleteDashboard(uid, false);\n    dispatch(loadPluginDashboards());\n  };\n}\n\nexport const cleanUpDashboardAndVariables = (): ThunkResult<void> => (dispatch, getStore) => {\n  const store = getStore();\n  const dashboard = store.dashboard.getModel();\n\n  if (dashboard) {\n    dashboard.destroy();\n    dispatch(cancelVariables(dashboard.uid));\n  }\n\n  getTimeSrv().stopAutoRefresh();\n  dispatch(cleanUpDashboard());\n  dispatch(removeAllPanels());\n\n  dashboardWatcher.leave();\n\n  getDashboardSrv().setCurrent(undefined);\n};\n\nexport const updateTimeZoneDashboard =\n  (timeZone: TimeZone): ThunkResult<void> =>\n  (dispatch) => {\n    dispatch(updateTimeZoneForSession(timeZone));\n    getTimeSrv().refreshTimeModel();\n  };\n\nexport const updateWeekStartDashboard =\n  (weekStart?: WeekStart): ThunkResult<void> =>\n  (dispatch) => {\n    dispatch(updateWeekStartForSession(weekStart));\n    getTimeSrv().refreshTimeModel();\n  };\n","import { textUtil } from '@grafana/data';\nimport { useUrlParams } from 'app/core/navigation/hooks';\n\nexport const usePullRequestParam = () => {\n  const [params] = useUrlParams();\n  const prParam = params.get('pull_request_url');\n\n  if (!prParam) {\n    return undefined;\n  }\n\n  return textUtil.sanitizeUrl(decodeURIComponent(prParam));\n};\n"],"names":["DashboardPrompt","dashboard","originalPath","showModal","hideModal","ModalsContext","handleUnload","event","ignoreChanges","onHistoryBlock","location","panelEditor","vizPanel","search","libPanelBehavior","SaveLibraryVizPanelModal","moveToBlockedLocationAfterReactStateUpdate","UnsavedChangesModal","Prompt","onDiscard","onDismiss","onSaveDashboardClick","styles","getStyles","Modal","Button","scene","canSave","fromScript","fromFile","commonAlertProps","DashboardPreviewBannerContent","queryParams","slug","path","prParam","usePullRequestParam","file","Alert","error","index","Stack","Icon","githubURL","DashboardPreviewBanner","route","config","DashboardScenePage","params","type","uid","prevMatch","usePrevious","stateManager","isLoading","loadError","routeReloadCounter","prevParams","correctedUrl","errorElement","DashboardPageError","Page","Box","PageLoader","status","message","entity","getKioskMode","SaveLibraryPanelModal","panel","folderUid","isUnsavedPrompt","onConfirm","searchString","setSearchString","dashState","useAsync","searchHits","dash","filteredDashboards","setFilteredDashboards","useDebounce","dashName","saveLibraryPanel","usePanelSave","discardAndClose","title","Input","e","i","initPanelEditor","sourcePanel","dispatch","discardPanelChanges","getStore","getPanel","updateDuplicateLibraryPanels","modifiedPanel","modifiedSaveModel","skipPanelUpdate","pluginChanged","panelToUpdate","exitPanelEditor","getSourcePanel","shouldDiscardChanges","hasPanelChangedInPanelEdit","panelTypeChanged","updatePanelEditorUIState","uiState","nextState","store","onSaveSuccess","SaveDashboardButton","state","setState","original","timeoutId","savedEventUnsub","hasChanges","panelInEdit","current","cleanDashboardFromIgnoredChanges","dashData","model","DashboardModel","variable","currentClean","originalClean","currentTimepicker","originalTimepicker","currentJson","originalJson","VariablesUnknownButton","id","usages","network","n","nodes","NetworkGraphModal","IconButton","SLOW_VARIABLES_EXPANSION_THRESHOLD","VariablesUnknownTable","variables","open","setOpen","changed","setChanged","setUsages","style","prevState","loading","start","unknownsNetwork","elapsed","onToggle","isOpen","CollapsableSection","CollapseLabel","Spinner","NoUnknowns","UnknownTable","Tooltip","usage","name","theme","ConfirmDeleteModal","varName","ConfirmModal","VariableTypeSelect","onChange","options","value","o","VariableSelectField","selectors","variableEditorMount","identifier","rootStateKey","variableEditorUnMount","getState","changeVariableName","newName","errorText","v","completeChangeVariableName","originalVariable","global","renamedIdentifier","createNewVariable","key","varsByKey","getNextAvailableId","initListMode","usagesNetwork","counter","nextId","mapStateToProps","ownProps","mapDispatchToProps","propName","propValue","newType","connector","VariableEditorEditorUnConnected","option","updateOptions","EditorToRender","prefersReducedMotion","VariableLegend","VariableTextField","VariableTextAreaField","VariableHideSelect","VariableValuesPreview","VariableEditorEditor","spin","VariablesDependenciesButton","edges","VariableUsagesButton","isAdhoc","VariableEditorListRow","usageTree","propsOnEdit","propsOnDuplicate","propsOnDelete","definition","getDefinition","passed","provided","snapshot","VariableCheckIndicator","VariableEditorList","onChangeOrder","onAdd","onEdit","onDelete","onDuplicate","onDragEnd","result","EmptyVariablesList","EmptyState","TextLink","templatingState","fromIndex","toIndex","VariableEditorContainerUnconnected","x","editIndex","sectionNav","variableToEdit","parentItem","subPageNav","VariableEditorContainer","AccessControlDashboardPermissions","canSetPermissions","pageNav","newAnnotationName","AnnotationSettingsEdit","editIdx","annotation","setAnnotation","panelFilter","ds","dsi","onUpdate","list","onNameChange","ev","onDataSourceChange","dsRef","target","onColorChange","color","onFilterTypeChange","filter","onAddFilterPanelID","selections","selection","onApply","goBackToList","onPreview","annotations","isNewAnnotation","sortFn","a","b","panels","FieldSet","Field","DataSourcePicker","Checkbox","Select","panelFilters","StandardAnnotationQueryEditor","PanelFilterType","AnnotationSettingsList","onNew","updateAnnotations","onMove","idx","direction","arrayUtils","showEmptyListCTA","getAnnotationName","anno","dataSourceSrv","DeleteButton","ListNewButton","AnnotationsSettings","newAnnotation","isEditing","getSubPageNav","node","editItem","DeleteDashboardModalUnconnected","cleanUpDashboardAndVariables","isProvisioned","deleteItems","useAsyncFn","ProvisionedDeleteModal","provisionedId","Text","Space","DeleteDashboardModal","GRAPH_TOOLTIP_OPTIONS","GeneralSettingsUnconnected","updateTimeZone","updateWeekStart","renderCounter","setRenderCounter","dashboardTitle","setDashboardTitle","dashboardDescription","setDashboardDescription","onFolderChange","newUID","newTitle","onTitleChange","onDescriptionChange","description","onTooltipChange","graphTooltip","onRefreshIntervalChange","intervals","onNowDelayChange","nowDelay","onHideTimePickerChange","hide","onLiveNowChange","onTimeZoneChange","timeZone","onWeekStartChange","weekStart","onTagsChange","tags","onEditableChange","editableOptions","Label","GenAIDashTitleButton","GenAIDashDescriptionButton","TextArea","TagsInput","FolderPicker","RadioButtonGroup","TimePickerSettings","GeneralSettings","JsonEditorSettings","dashboardSaveModel","dashboardJson","setDashboardJson","onClick","dashboardWatcher","CodeEditor","LinkSettingsEdit","editLinkIdx","onGoBack","linkSettings","setLinkSettings","link","links","DashboardLinkForm","LinkSettingsList","setLinks","moveLink","duplicateLink","deleteLink","DashboardLinkList","LinksSettings","isNew","setIsNew","restoreDashboard","version","useDashboardRestore","onRestoreDashboard","notifyApp","newUrl","RevertDashboardModal","VersionHistoryComparison","baseInfo","newInfo","diffData","isNewLatest","diff","diffs","DiffGroup","DiffViewer","VersionHistoryTable","versions","canCompare","onCheck","Tag","VERSIONS_FETCH_LIMIT","VersionsSettings","props","append","requestOptions","res","err","selectedVersions","lhs","rhs","versionId","rev","viewMode","showButtons","hasMore","VersionsHistorySpinner","msg","onClose","DashboardSettings","editview","updateId","setUpdateId","pages","getSettingsPages","onPostSave","currentPage","page","canSaveAs","getEditIndex","subSectionNav","getSectionNav","size","actions","AppChromeUpdate","ToolbarButtonRow","generalTitle","MakeEditable","permissionsTitle","applySectionAsParent","parent","dashboardUid","main","pageNavWithSectionParent","getPanelStateForModel","SnapshotTab","ShowMessage","SupportSnapshotService","StateManagerBase","markdownText","maxLen","snapshotText","panelTitle","blob","fileName","k","randomize","snapshotUpdate","snapshotSize","oldModel","ex","HelpWizard","plugin","service","currentTab","showMessage","tabs","hasSupportBundleAccess","Drawer","TabsBar","t","Tab","ClipboardButton","height","usePanelLatestData","checkSchema","querySubscription","latestData","setLatestData","lastRev","lastUpdate","data","now","InspectMetadataTab","metadataDatasource","InspectContent","isDataLoading","dataOptions","defaultTab","onDataOptionsChange","setCurrentTab","errors","getErrors","activeTab","item","formatStats","tab","InspectDataTab","InspectJSONTab","InspectErrorTab","InspectStatsTab","QueryInspector","request","queryCount","requestTime","formatted","PanelInspectorUnconnected","setDataOptions","hasError","metaDs","panelState","PanelInspector","PickerRenderer","PickerToRender","PickerLabel","labelOrName","elementId","SubMenuItems","readOnly","visibleVariables","setVisibleVariables","getPanelPluginWithFallback","panelType","VisualizationButton","isPanelOptionsVisible","isVizPickerOpen","onToggleOpen","onToggleOptionsPane","ButtonGroup","ToolbarButton","ChangeLibraryPanelModal","isLibraryPanel","body","PanelLibraryOptionsGroup","searchQuery","showingAddPanelModal","setShowingAddPanelModal","changeToPanel","setChangeToPanel","setPanelFilter","onPanelFilterChange","plugins","p","useLibraryPanel","onAddToPanelLibrary","onDismissChangeToPanel","PanelTypeFilter","LibraryPanelsView","AddLibraryPanelModal","VisualizationSelectPane","setSearchQuery","tabKey","listMode","setListMode","useLocalStorage","searchRef","onVizChange","pluginChange","onCloseVizPicker","radioOptions","FilterInput","ScrollContainer","VizTypePicker","VisualizationSuggestions","OptionsPane","onFieldConfigsChange","onPanelOptionsChanged","onPanelConfigChange","instanceState","OptionsPaneOptions","InfoMode","PanelHeaderCorner","markdown","interpolatedMarkdown","markedInterpolatedMarkdown","getContentStyles","infoMode","PanelInfoCorner","content","ariaLabel","iconMap","PanelEditorTableView","width","setOptions","timeSrv","sub","timeData","errorMessage","PanelChrome","innerWidth","innerHeight","PanelRenderer","PanelAlertTab","otherProps","rules","usePanelCombinedRules","NewRuleFromPanelButton","className","templating","formValues","ruleFormUrl","url","PanelAlertTabContent","permissions","canCreateRules","alert","LoadingPlaceholder","RulesTable","PanelEditorQueries","datasource","dataSource","datasourceSettings","lastUsedDatasource","QueryGroup","PanelEditorTabs","onChangeTab","forceUpdate","useForceUpdate","instrumentedOnChangeTab","eventName","eventSubs","Subscription","alertingEnabled","getCounter","TabContent","TransformationsEditor","getPanelEditorTabs","shouldShowAlertingTab","unifiedAlertingEnabled","hasRuleReadPermissions","isGraph","isTimeseries","PanelEditorUnconnected","SaveDashboardDrawer","configKey","mode","initDone","isOnlyPanel","tableViewEnabled","panelSize","DashboardPanel","panelPane","SplitPaneWrapper","updateTimeZoneForSession","DashNavTimeControls","editorActions","UnlinkModal","PanelEditor","stylesFactory","paneSpacing","AnnotationPicker","events","onEnabledChanged","setLoading","onCancel","started","stopped","InlineFieldRow","InlineField","LoadingIndicator","Annotations","onAnnotationChanged","visibleAnnotations","setVisibleAnnotations","DashboardLinks","useEffectOnce","linkInfo","DashboardLinksDashboard","icon","linkElement","sanitize","SubMenuUnConnected","updatedAnnotation","readOnlyVariables","SubMenu","UnthemedDashboardPage","tr","liveTimer","scrollElement","GrafanaContext","prevProps","templateVarsChangedInUrl","prevUrlParams","urlParams","templateVarChanges","urlEditPanelId","urlViewPanelId","urlEditView","updatedState","updateStatePageNavFromProps","inspectPanelId","inspectPanel","initError","editPanel","viewPanel","kioskMode","DashboardLoading","showSubMenu","showToolbar","pageClassName","DashNav","DashboardGrid","ShareModal","navIndex","folderNavModel","DashboardPage","DashboardPageProxy","forceScenes","forceOld","isScenesSupportedRoute","canEdit","importDashboard","removeDashboard","updateTimeZoneDashboard","updateWeekStartDashboard"],"sourceRoot":""}