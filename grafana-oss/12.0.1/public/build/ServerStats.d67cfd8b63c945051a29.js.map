{"version":3,"file":"ServerStats.d67cfd8b63c945051a29.js","mappings":"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","sources":["webpack://grafana/./public/app/features/admin/ServerStatsCard.tsx","webpack://grafana/./public/app/features/admin/state/apis.tsx","webpack://grafana/./public/app/features/admin/ServerStats.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport Skeleton from 'react-loading-skeleton';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Card, Stack, useStyles2, Tooltip, Icon } from '@grafana/ui';\n\ninterface StatItem {\n  name: string;\n  value: string | number | undefined;\n  tooltip?: string;\n  highlight?: boolean;\n  indent?: boolean;\n}\n\nexport interface Props {\n  content: StatItem[];\n  isLoading?: boolean;\n  footer?: JSX.Element | boolean;\n}\n\nexport const ServerStatsCard = ({ content, footer, isLoading }: Props) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <Card className={styles.container}>\n      {content.map((item, index) => (\n        <Stack key={index} justifyContent=\"space-between\" alignItems=\"center\">\n          <Stack alignItems={'center'}>\n            <span className={cx({ [styles.indent]: !!item.indent })}>{item.name}</span>\n            {item.tooltip && (\n              <Tooltip content={String(item.tooltip)} placement=\"auto-start\">\n                <Icon name=\"info-circle\" className={styles.tooltip} />\n              </Tooltip>\n            )}\n          </Stack>\n          {isLoading ? (\n            <Skeleton width={60} />\n          ) : (\n            <span className={item.highlight ? styles.highlight : ''}>{item.value}</span>\n          )}\n        </Stack>\n      ))}\n      {footer && <div>{footer}</div>}\n    </Card>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(2),\n      margin: 0,\n      padding: theme.spacing(2),\n    }),\n    indent: css({\n      marginLeft: theme.spacing(2),\n    }),\n    tooltip: css({\n      color: theme.colors.secondary.text,\n    }),\n    highlight: css({\n      color: theme.colors.warning.text,\n      padding: `${theme.spacing(0.5)} ${theme.spacing(1)}`,\n      marginRight: `-${theme.spacing(1)}`,\n    }),\n  };\n};\n","import { getBackendSrv } from '@grafana/runtime';\n\ninterface AnonServerStat {\n  activeDevices?: number;\n}\n\nexport interface ServerStat extends AnonServerStat {\n  activeAdmins: number;\n  activeEditors: number;\n  activeSessions: number;\n  activeUsers: number;\n  activeViewers: number;\n  admins: number;\n  alerts: number;\n  dashboards: number;\n  datasources: number;\n  editors: number;\n  orgs: number;\n  playlists: number;\n  snapshots: number;\n  stars: number;\n  tags: number;\n  users: number;\n  viewers: number;\n}\n\nexport const getServerStats = async (): Promise<ServerStat | null> => {\n  return getBackendSrv()\n    .get('api/admin/stats')\n    .catch((err) => {\n      console.error(err);\n      return null;\n    });\n};\n","import { css } from '@emotion/css';\nimport { useEffect, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config, GrafanaBootConfig } from '@grafana/runtime';\nimport { LinkButton, Stack, useStyles2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\nimport { AccessControlAction } from 'app/types';\n\nimport { contextSrv } from '../../core/services/context_srv';\n\nimport { ServerStatsCard } from './ServerStatsCard';\nimport { getServerStats, ServerStat } from './state/apis';\n\nexport const ServerStats = () => {\n  const [stats, setStats] = useState<ServerStat | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const styles = useStyles2(getStyles);\n\n  const hasAccessToDataSources = contextSrv.hasPermission(AccessControlAction.DataSourcesRead);\n  const hasAccessToAdminUsers = contextSrv.hasPermission(AccessControlAction.UsersRead);\n\n  useEffect(() => {\n    if (contextSrv.hasPermission(AccessControlAction.ActionServerStatsRead)) {\n      getServerStats().then((stats) => {\n        setStats(stats);\n        setIsLoading(false);\n      });\n    }\n  }, []);\n\n  if (!contextSrv.hasPermission(AccessControlAction.ActionServerStatsRead)) {\n    return null;\n  }\n\n  return (\n    <>\n      <h2 className={styles.title}>\n        <Trans i18nKey=\"admin.server-settings.title\">Instance statistics</Trans>\n      </h2>\n      {!isLoading && !stats ? (\n        <p className={styles.notFound}>\n          <Trans i18nKey=\"admin.server-settings.not-found\">No stats found.</Trans>\n        </p>\n      ) : (\n        <Stack\n          gap={2}\n          direction={{\n            xs: 'column',\n            md: 'row',\n          }}\n        >\n          <ServerStatsCard\n            isLoading={isLoading}\n            content={[\n              { name: 'Dashboards (starred)', value: `${stats?.dashboards} (${stats?.stars})` },\n              { name: 'Tags', value: stats?.tags },\n              { name: 'Playlists', value: stats?.playlists },\n              { name: 'Snapshots', value: stats?.snapshots },\n            ]}\n            footer={\n              <LinkButton href={'/dashboards'} variant={'secondary'}>\n                <Trans i18nKey=\"admin.server-settings.dashboards-button\">Manage dashboards</Trans>\n              </LinkButton>\n            }\n          />\n\n          <Stack direction=\"column\" gap={2}>\n            <ServerStatsCard\n              isLoading={isLoading}\n              content={[{ name: 'Data sources', value: stats?.datasources }]}\n              footer={\n                hasAccessToDataSources && (\n                  <LinkButton href={'/datasources'} variant={'secondary'}>\n                    <Trans i18nKey=\"admin.server-settings.data-sources-button\">Manage data sources</Trans>\n                  </LinkButton>\n                )\n              }\n            />\n            <ServerStatsCard\n              isLoading={isLoading}\n              content={[{ name: 'Alerts', value: stats?.alerts }]}\n              footer={\n                <LinkButton href={'/alerting/list'} variant={'secondary'}>\n                  <Trans i18nKey=\"admin.server-settings.alerts-button\">Manage alerts</Trans>\n                </LinkButton>\n              }\n            />\n          </Stack>\n          <ServerStatsCard\n            isLoading={isLoading}\n            content={[\n              { name: 'Organisations', value: stats?.orgs },\n              { name: 'Users total', value: stats?.users },\n              { name: 'Active sessions', value: stats?.activeSessions },\n              { name: 'Active users in last 30 days', value: stats?.activeUsers },\n              ...getAnonymousStatsContent(stats, config),\n            ]}\n            footer={\n              hasAccessToAdminUsers && (\n                <LinkButton href={'/admin/users'} variant={'secondary'}>\n                  <Trans i18nKey=\"admin.server-settings.users-button\">Manage users</Trans>\n                </LinkButton>\n              )\n            }\n          />\n        </Stack>\n      )}\n    </>\n  );\n};\n\nconst getAnonymousStatsContent = (stats: ServerStat | null, config: GrafanaBootConfig) => {\n  if (!config.anonymousEnabled || !stats?.activeDevices) {\n    return [];\n  }\n  if (!config.anonymousDeviceLimit) {\n    return [\n      {\n        name: 'Active anonymous devices',\n        value: `${stats.activeDevices}`,\n        tooltip: 'Detected devices that are not logged in, in last 30 days.',\n      },\n    ];\n  } else {\n    return [\n      {\n        name: 'Active anonymous devices',\n        value: `${stats.activeDevices} / ${config.anonymousDeviceLimit}`,\n        tooltip: 'Detected devices that are not logged in, in last 30 days.',\n        highlight: stats.activeDevices > config.anonymousDeviceLimit,\n      },\n    ];\n  }\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    title: css({\n      marginBottom: theme.spacing(4),\n    }),\n    notFound: css({\n      fontSize: theme.typography.h6.fontSize,\n      textAlign: 'center',\n      height: '290px',\n    }),\n  };\n};\n"],"names":["ServerStatsCard","content","footer","isLoading","styles","getStyles","Card","item","index","Stack","Tooltip","Icon","theme","getServerStats","err","ServerStats","stats","setStats","setIsLoading","hasAccessToDataSources","hasAccessToAdminUsers","getAnonymousStatsContent","config"],"sourceRoot":""}