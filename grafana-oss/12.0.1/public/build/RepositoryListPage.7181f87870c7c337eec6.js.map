{"version":3,"file":"RepositoryListPage.7181f87870c7c337eec6.js","mappings":"2QAUO,MAAMA,EAAa,CAAC,CAAE,KAAAC,EAAM,MAAAC,CAAM,IAAuB,CAC9D,MAAMC,KAAS,MAAWC,EAAWF,CAAK,EAE1C,SACE,OAAC,OAAI,UAAWC,EAAO,WACrB,mBAACE,EAAA,EAAI,CAAC,KAAMJ,EAAM,KAAK,IAAK,GAC9B,CAEJ,EAEA,SAASG,EAAUE,EAAsBJ,EAAiC,CACxE,MAAMK,EAAgBD,EAAM,cAAc,eAAeJ,CAAK,EAE9D,MAAO,CACL,cAAY,OAAI,CACd,aAAcI,EAAM,MAAM,OAAO,OACjC,QAASA,EAAM,QAAQ,CAAC,EACxB,MAAOC,EACP,gBAAiBC,EAAA,GAAiB,MAAMD,EAAe,EAAG,CAC5D,CAAC,CACH,CACF,CCjBO,MAAME,EAAmB,CAAC,CAAE,gBAAAC,EAAiB,iBAAAC,EAAkB,oBAAAC,CAAoB,IAA6B,CACrH,MAAMC,KAAQ,MAAW,CAAS,EAElC,SACE,QAACC,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,EAC7B,qBAACA,EAAA,EAAK,CAAC,UAAU,SACf,oBAACC,EAAA,EAAI,CAAC,QAAQ,KACZ,mBAAC,KAAK,CAAC,QAAQ,wCAAwC,0CAA8B,EACvF,KACA,OAACA,EAAA,EAAI,CAAC,MAAM,YACV,mBAAC,KAAK,CAAC,QAAQ,6CAA6C,mFAE5D,EACF,GACF,KACA,QAACD,EAAA,EAAK,CAAC,IAAK,EAAG,UAAU,MAAM,OAAO,OACpC,qBAACE,EAAA,EAAG,CAAC,MAAM,MAAM,OAAO,OAAO,QAAQ,OAAO,UAAU,SAAS,IAAK,EAAG,WAAW,aAClF,qBAACF,EAAA,EAAK,CAAC,IAAK,EACV,oBAACd,EAAU,CAAC,KAAK,OAAO,MAAM,MAAO,MACrC,OAACA,EAAU,CAAC,KAAK,cAAc,MAAM,QAAS,IAChD,KACA,OAAC,KAAK,CAAC,QAAQ,yEAAyE,4DAExF,KACA,OAACgB,EAAA,EAAG,CAAC,QAAQ,OAAO,KAAK,IAAI,UAAU,OACrC,mBAACD,EAAA,EAAI,CAAC,QAAQ,OAAO,MAAM,YACzB,mBAAC,KAAK,CAAC,QAAQ,6DAA6D,gJAG5E,EACF,EACF,KACA,OAAC,MACC,KAAK,UACL,QAAQ,YACR,QAASH,EACT,SAAUF,EACV,KAAMA,EAAkB,QAAU,OAElC,mBAAC,KAAK,CAAC,QAAQ,wDAAwD,kCAAsB,EAC/F,GACF,KAEA,OAAC,OAAI,UAAWG,EAAM,UAAW,KAEjC,QAACG,EAAA,GACC,MAAM,MACN,OAAO,OACP,YAAa,EACb,QAAQ,OACR,UAAU,SACV,IAAK,EACL,WAAW,aAEX,oBAAChB,EAAU,CAAC,KAAK,SAAS,MAAM,QAAS,MACzC,OAAC,KAAK,CAAC,QAAQ,wEAAwE,iEAEvF,KACA,OAACgB,EAAA,EAAG,CAAC,QAAQ,OAAO,KAAK,IAAI,UAAU,OACrC,mBAACD,EAAA,EAAI,CAAC,QAAQ,OAAO,MAAM,YACzB,mBAAC,KAAK,CAAC,QAAQ,iGAAiG,8EAEhH,EACF,EACF,KACA,OAAC,MACC,KAAK,UACL,QAAQ,YACR,KAAK,8DACL,KAAMJ,EAAmB,QAAU,oBACnC,SAAUA,EAEV,mBAAC,KAAK,CAAC,QAAQ,wDAAwD,kCAAsB,EAC/F,GACF,GACF,GACF,CAEJ,EAEA,SAAS,EAAUL,EAAsB,CACvC,MAAO,CACL,aAAW,OAAI,CACb,YAAa,aAAaA,EAAM,OAAO,OAAO,IAAI,EACpD,CAAC,CACH,CACF,C,cCrFO,MAAMW,EAAe,CAAC,CAAE,MAAAC,EAAO,oBAAAC,EAAqB,gBAAAC,CAAgB,IAAyB,CAClG,MAAMjB,KAAS,MAAW,CAAS,EAEnC,SACE,QAACW,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,EAC7B,oBAACC,EAAA,EAAI,CAAC,QAAQ,KACZ,mBAAC,KAAK,CAAC,QAAQ,6EAA6E,oCAE5F,EACF,KACA,QAAC,MAAG,UAAWZ,EAAO,aACpB,oBAAC,MACC,mBAAC,KAAK,CAAC,QAAQ,+EAA+E,mFAE9F,EACF,KACA,OAAC,MACC,mBAAC,KAAK,CAAC,QAAQ,4EAA4E,uGAE3F,EACF,GACF,EACEgB,KASA,OAACL,EAAA,EAAK,CAAC,UAAU,MAAM,WAAW,SAAS,IAAK,EAC9C,mBAACO,EAAA,EAAuB,CAAC,MAAOH,CAAA,CAAO,EACzC,KAVA,OAACF,EAAA,EAAG,CACF,mBAAC,KAAU,CAAC,KAAK,UAAU,QAASI,EAClC,mBAAC,KAAK,CAAC,QAAQ,qEAAqE,2CAEpF,EACF,EACF,CAIA,EAEJ,CAEJ,EAEM,EAAad,IACV,CACL,gBAAc,OAAI,CAChB,cAAe,OACf,YAAa,EACb,WAAYA,EAAM,QAAQ,EAAE,EAC5B,OAAQ,CACN,SAAU,WACV,YAAaA,EAAM,QAAQ,CAAC,EAC5B,aAAcA,EAAM,QAAQ,CAAC,EAC7B,WAAY,CACV,QAAS,WACT,SAAU,WACV,KAAMA,EAAM,QAAQ,CAAC,EACrB,IAAK,IACL,MAAOA,EAAM,OAAO,KAAK,UACzB,WAAYA,EAAM,WAAW,cAC/B,CACF,CACF,CAAC,CACH,G,gDChEK,MAAMgB,EAAY,CAAC,CAAE,KAAAC,EAAM,SAAAC,EAAW,EAAK,IAAa,CAC7D,MAAMC,EAAYF,EAAK,MAAM;AAAA,CAAI,EAAE,OAC7BG,EAAeD,EAAY,IAAM,GACjCtB,KAAS,MAAW,CAAS,EAEnC,SACE,QAAC,OAAI,UAAWA,EAAO,UACpB,UAAAqB,MACC,OAACG,EAAA,EAAe,CAAC,UAAWxB,EAAO,WAAY,QAAQ,YAAY,KAAK,KAAK,KAAK,OAAO,QAAS,IAAMoB,CAAA,CAAM,KAEhH,OAACK,EAAA,GACC,MAAOL,EACP,SAAS,MACT,gBAAiB,GACjB,YAAa,GACb,OAAQG,EAAe,OAAS,GAAG,KAAK,IAAID,EAAY,GAAI,GAAG,CAAC,KAChE,SAAU,GACV,cAAe,CACb,qBAAsB,GACtB,UAAW,CACT,SAAUC,EAAe,SAAW,OACpC,WAAY,MACd,CACF,EACF,GACF,CAEJ,EAEM,EAAapB,IAA0B,CAC3C,aAAW,OAAI,CACb,SAAU,WACV,OAAQ,GAAGA,EAAM,QAAQ,CAAC,CAAC,KAC3B,OAAQ,aAAaA,EAAM,OAAO,OAAO,MAAM,EACjD,CAAC,EACD,cAAY,OAAI,CACd,SAAU,WACV,IAAKA,EAAM,QAAQ,CAAC,EACpB,MAAOA,EAAM,QAAQ,CAAC,EACtB,OAAQ,CACV,CAAC,CACH,GCzCauB,EAAY,CAAC,CAAE,KAAAC,CAAK,OAE7B,oBACE,oBAACf,EAAA,EAAI,CAAC,QAAQ,KAAK,QAAQ,KACxB,SAAAe,GAAM,MACT,EACCA,EAAK,gBACJ,OAAC,KAAS,CAAC,OAAO,KAChB,mBAACf,EAAA,EAAI,CAAC,QAAQ,IAAK,SAAAe,EAAK,YAAY,EACtC,EAGDA,EAAK,SAAQ,OAACR,EAAS,CAAC,KAAMQ,EAAK,KAAM,SAAUA,EAAK,SAAU,GACrE,E,yBCTG,MAAMC,EAAc,CAAC,CAAE,KAAAD,EAAM,MAAAE,EAAO,YAAAC,EAAa,YAAAC,EAAa,OAAA/B,CAAO,IAAa,CACvF,MAAMgC,EAAcH,EAAQC,EACtBG,EAAYJ,IAAUC,EACtBI,EAAYL,EAAQC,EAEpBK,EAAgB,IAChBH,EACK,CACL,KAAM,eACN,MAAO,UACP,SAAO,KAAE,iDAAkD,gBAAgB,CAC7E,EAEEC,EACK,CACL,KAAM,SACN,MAAO,UACP,SAAO,KAAE,+CAAgD,cAAc,CACzE,EAEK,CACL,KAAM,SACN,MAAO,YACP,SAAO,KAAE,+CAAgD,cAAc,CACzE,EAGI,CAAE,KAAAnC,EAAM,MAAAC,EAAO,MAAAqC,CAAM,EAAID,EAAc,EAEvCE,GAAc,IAAMN,EAAYF,CAAK,EACrCS,GAAmBC,IAAwB,CAC/CA,GAAE,gBAAgB,EAClBR,EAAYF,CAAK,CACnB,EAEA,SACE,OAACW,EAAA,GACC,UAAW,GAAGxC,EAAO,QAAQ,IAAIiC,EAAYjC,EAAO,WAAa,EAAE,IAAIA,EAAO,SAAS,GACvF,QAASqC,GAET,oBAAC1B,EAAA,EAAK,CAAC,UAAU,MAAM,WAAW,SAAS,IAAK,EAC9C,oBAAC8B,EAAA,GACC,KAAM3C,EACN,KAAK,KACL,QAASoC,EAAY,YAAc,UACnC,MAAAnC,EACA,aAAYqC,EACZ,QAASE,EAAA,CACX,KACA,OAAC1B,EAAA,EAAI,CAAC,MAAOqB,EAAY,UAAY,YAAa,OAAQA,EAAY,SAAW,UAC9E,SAAAN,CAAA,CACH,GACF,EACF,CAEJ,EAEa,GAAaxB,IAA0B,CAClD,YAAU,OAAI,CACZ,QAASA,EAAM,QAAQ,CAAC,EACxB,OAAQ,UACR,UAAW,CACT,WAAYA,EAAM,OAAO,OAAO,KAClC,CACF,CAAC,EACD,cAAY,OAAI,CACd,MAAOA,EAAM,OAAO,QAAQ,IAC9B,CAAC,EACD,aAAW,OAAI,CACb,WAAY,cACZ,OAAQ,OACR,UAAW,MACb,CAAC,CACH,GC7EauC,GAAU,CAAC,CAAE,MAAAC,EAAO,YAAAb,EAAa,YAAAC,CAAY,IAAa,CACrE,GAAIY,EAAM,SAAW,GAAKA,EAAM,SAAW,EACzC,OAAO,KAGT,MAAMC,KAAiB,MAAW,EAAiB,EAEnD,SACE,OAAC/B,EAAA,EAAG,CAAC,MAAO,QAAS,QAAS,EAC5B,mBAACF,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,EAC5B,SAAAgC,EAAM,IAAI,CAAChB,EAAME,OAChB,OAACD,EAAA,CAEC,KAAAD,EACA,MAAAE,EACA,YAAAC,EACA,YAAAC,EACA,OAAQa,CAAA,EALHf,CAMP,CACD,EACH,EACF,CAEJ,ECbagB,EAAa,CAAC,CAAE,MAAAC,EAAO,YAAAC,EAAa,MAAAJ,EAAO,OAAAK,EAAQ,UAAAC,CAAU,IAAa,CACrF,MAAMjD,KAAS,MAAW,CAAS,EAE7B,CAAC8B,EAAaoB,CAAc,KAAI,YAAS,CAAC,EAE1CC,EAAcrB,IAAgB,EAC9BsB,EAAatB,IAAgBa,EAAM,OAAS,EAC5CU,EAAaV,EAAM,IAAKhB,IAASA,GAAK,KAAK,EAE3C2B,EAAa,IAAM,CAACF,GAAcF,EAAepB,EAAc,CAAC,EAChEyB,GAAiB,IAAM,CAACJ,GAAeD,EAAepB,EAAc,CAAC,EAE3E,SACE,QAAC0B,EAAA,EAAK,CAAC,OAAAR,EAAgB,MAAAF,EAAc,UAAAG,EAAsB,UAAWjD,EAAO,MAC3E,qBAACW,EAAA,EAAK,CAAC,UAAW,SAAU,IAAK,EAC/B,oBAACC,EAAA,EAAI,CAAC,QAAQ,OAAO,MAAM,YACxB,SAAAmC,CAAA,CACH,KACA,QAACpC,EAAA,EAAK,CAAC,UAAU,MAAM,OAAO,OAC5B,oBAAC+B,GAAO,CAAC,MAAOW,EAAY,YAAAvB,EAA0B,YAAaoB,CAAA,CAAgB,KAEnF,OAAC,OAAI,UAAWlD,EAAO,eACrB,mBAAC0B,EAAS,CAAC,KAAMiB,EAAMb,CAAW,EAAG,EACvC,GACF,GACF,KAEA,OAAC0B,EAAA,EAAM,UAAN,CACC,oBAAC7C,EAAA,EAAK,CAAC,UAAU,MAAM,eAAe,WAAW,IAAK,EACpD,oBAAC8C,EAAA,GAAM,CAAC,QAAQ,YAAY,QAASF,GAAgB,SAAUJ,EAC7D,mBAAC,KAAK,CAAC,QAAQ,oCAAoC,oBAAQ,EAC7D,EAECC,KACC,OAACK,EAAA,GAAM,CAAC,QAAQ,UAAU,QAASR,EAAW,KAAK,eACjD,mBAAC,KAAK,CAAC,QAAQ,gCAAgC,gBAAI,EACrD,KAEA,OAACQ,EAAA,GAAM,CAAC,QAAQ,UAAU,QAASH,EACjC,mBAAC,KAAK,CAAC,QAAQ,gCAAgC,gBAAI,EACrD,GAEJ,EACF,GACF,CAEJ,EAEM,EAAanD,IAA0B,CAC3C,SAAO,OAAI,CACT,MAAO,SACP,SAAU,KACZ,CAAC,EACD,eAAa,OAAI,CACf,aAAcA,EAAM,QAAQ,CAAC,EAC7B,QAASA,EAAM,QAAQ,EAAG,CAAC,CAC7B,CAAC,EACD,kBAAgB,OAAI,CAClB,KAAM,EACN,UAAW,OACX,SAAU,EACV,QAASA,EAAM,QAAQ,CAAC,EACxB,WAAY,aAAaA,EAAM,OAAO,OAAO,IAAI,EACnD,CAAC,EACD,UAAQ,OAAI,CACV,QAASA,EAAM,QAAQ,CAAC,EACxB,UAAW,aAAaA,EAAM,OAAO,OAAO,IAAI,GAChD,UAAWA,EAAM,QAAQ,CAAC,CAC5B,CAAC,CACH,G,eCzEA,MAAMuD,EAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAUbC,EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAoBfC,EAAiB;AAAA,qDAGjBC,EAAmBC,GAAyB,CAChD,OAAQA,EAAW,CACjB,IAAK,gBACH,MAAO,CACL,SAAO,KAAE,gEAAiE,sBAAsB,EAChG,eAAa,KACX,+DACA,4EACF,EACA,MAAO,CACL,CACE,SAAO,KAAE,sDAAuD,yCAAyC,EACzG,eAAa,KACX,4DACA,mEACF,EACA,KAAM,iBACR,EACA,CACE,SAAO,KAAE,mDAAoD,sBAAsB,EACnF,eAAa,KACX,yDACA,+EACF,EACA,KAAMH,EACN,SAAU,EACZ,EACA,CACE,SAAO,KACL,gEACA,mCACF,EACA,eAAa,KACX,sEACA,iFACF,EACA,KAAMC,CACR,CACF,CACF,EACF,IAAK,oBACH,MAAO,CACL,SAAO,KAAE,oEAAqE,0BAA0B,EACxG,eAAa,KACX,mEACA,mDACF,EACA,MAAO,CACL,CACE,SAAO,KACL,iEACA,iCACF,EACA,eAAa,KACX,uEACA,0EACF,EACA,KAAMF,CACR,CACF,CACF,EACF,QACE,MAAO,CACL,MAAO,GACP,YAAa,GACb,MAAO,CAAC,CACV,CACJ,CACF,EAMe,SAASK,EAAe,CAAE,MAAAC,CAAM,EAAU,CACvD,MAAMhE,KAAS,MAAW,CAAS,EAC7BiE,KAAgB,MAA4B,OAAW,CAAE,0BAA2B,EAAK,CAAC,EAC1FC,EAAgBD,EAAc,MAAM,cACpCE,EAAW,EAAQF,EAAc,MAAM,OAAO,OAC9C,CAAE,gBAAA1D,EAAiB,iBAAAC,EAAkB,oBAAAQ,CAAoB,KAAI,MAAuB,EACpF,CAACoD,EAAuBC,CAAY,KAAI,YAAS,EAAK,EACtD,CAACP,EAAWQ,CAAY,KAAI,YAAoB,IAAI,EAE1D,SACE,oBACG,UAAAJ,MACC,OAACK,EAAA,GACC,SAAS,OACT,SAAO,KACL,qFACA,2DACF,EAEA,mBAAC,KAAK,CAAC,QAAQ,sDAAsD,0KAGrE,EACF,KAEF,QAAC5D,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,EAAG,KAAK,OACrC,qBAACA,EAAA,EAAK,CAAC,IAAK,GAAI,WAAW,SACzB,oBAACG,EAAA,CACC,MAAOkD,EACP,oBAAAhD,EACA,gBAAiB,IAAM,CACrBsD,EAAa,mBAAmB,EAChCD,EAAa,EAAI,CACnB,EACF,KACA,OAAC,OAAI,UAAWrE,EAAO,eACrB,mBAAC,OACC,IAAK,2CACL,UAAWA,EAAO,MAClB,IAAK,uBACP,EACF,GACF,GACE,CAACO,GAAmB,CAACC,IAAqB2D,MAC1C,OAAC7D,EAAA,CACC,gBAAAC,EACA,iBAAAC,EACA,oBAAqB,IAAM,CACzB8D,EAAa,eAAe,EAC5BD,EAAa,EAAI,CACnB,EACF,GAEJ,EACCD,GAAyBN,MACxB,OAACjB,EAAA,CACE,GAAGgB,EAAgBC,CAAS,EAC7B,OAAQM,EACR,UAAW,IAAMC,EAAa,EAAK,EACrC,GAEJ,CAEJ,CAEA,SAAS,EAAUlE,EAAsB,CACvC,MAAO,CACL,kBAAgB,OAAI,CAClB,OAAQ,IACR,QAAS,OACT,WAAY,SACZ,eAAgB,QAClB,CAAC,EACD,SAAO,OAAI,CACT,aAAcA,EAAM,MAAM,OAAO,QACjC,MAAO,OACP,OAAQ,MACV,CAAC,CACH,CACF,C,iIC/Le,SAASqE,EAAmB,CAAE,MAAAR,CAAM,EAAU,CAC3D,SACE,OAAC,KACC,MAAM,eACN,QAAS,CACP,QAAM,KAAE,2CAA4C,cAAc,EAClE,YAAU,KACR,kEACA,+CACF,CACF,EAEA,oBAAC,IAAK,SAAL,CACC,oBAACS,EAAA,EAAO,KACR,OAAC,IAAc,CAAC,MAAAT,CAAA,CAAc,GAChC,EACF,CAEJ,CAEA,SAASS,GAAS,CAChB,SACE,OAAC,KACC,QAAQ,OACR,gBAAiB,OACjB,aAAa,UACb,SAAU,EACV,SAAU,EACV,aAAc,EACd,WAAW,UAEX,mBAAC,IAAI,CACH,oBAAC,KAAK,CAAC,QAAS,8BAA+B,wIAEzB,OACpB,OAAC,IAAQ,CAAC,KAAM,+CAAgD,SAAQ,GAAC,yBAEzE,EAAY,IAAI,eAElB,EACF,EACF,CAEJ,C,4TCtCO,SAASC,EAAe,CAAE,WAAAC,CAAW,EAAU,CACpD,KAAM,CAAE,SAAAC,EAAU,KAAAC,EAAM,OAAAC,CAAO,EAAIH,EAC7BI,EAAOH,GAAU,MAAQ,GAEzBI,EAAoB,IAAmB,CAC3C,MAAMC,EAAoB,CAAC,EAE3B,GAAIJ,GAAM,OAAS,SAAU,CAC3B,KAAM,CAAE,IAAAK,EAAM,GAAI,OAAAC,CAAO,EAAIN,EAAK,QAAU,CAAC,EACvCO,EAAYD,EAAS,GAAGD,CAAG,SAASC,CAAM,GAAKD,EAQrD,GANAD,EAAK,QACH,OAACI,EAAA,EAAQ,CAAY,SAAQ,GAAC,KAAMD,EACjC,SAAAA,CAAA,EADW,MAEd,CACF,EAEIN,GAAQ,SAAS,GAAI,CACvB,MAAMQ,EAAa,GAAGJ,CAAG,mBAAmBJ,EAAO,QAAQ,EAAE,GAC7DG,EAAK,QACH,QAACtE,EAAA,EAAK,CAAC,IAAK,EAAG,UAAU,MAAM,WAAW,SACxC,oBAAC0E,EAAA,EAAQ,CAAe,KAAMC,EAC5B,mBAAC,KAAK,CAAC,QAAQ,2DAA2D,mBAAO,GADrE,SAEd,KACA,OAACpF,EAAA,EAAI,CAAC,KAAK,QAAQ,UAAU,cAAe,IAC9C,CACF,CACF,CACF,MAAW2E,GAAM,OAAS,SACxBI,EAAK,QACH,OAACrE,EAAA,EAAI,CAAC,QAAQ,YACX,SAAAiE,EAAK,OAAO,MAAQ,IADO,MAE9B,CACF,EAGF,OAAOI,CACT,EAEMM,EAAoB,IACjBV,GAAM,OAAS,SAAW,SAAW,WAG9C,SACE,QAACrC,EAAA,EAAI,CACH,oBAACA,EAAA,EAAK,OAAL,CACC,mBAACtC,EAAA,EAAI,CAAC,KAAMqF,EAAkB,EAAG,KAAK,KAAM,GAC9C,KACA,OAAC/C,EAAA,EAAK,QAAL,CACC,oBAAC7B,EAAA,EAAK,CAAC,IAAK,EAAG,UAAU,MAAM,WAAW,SACvC,UAAAkE,GAAM,UAAS,OAACjE,EAAA,EAAI,CAAC,QAAQ,KAAM,SAAAiE,EAAK,MAAM,KAC/C,OAACW,EAAA,EAAW,CAAC,KAAMb,CAAA,CAAY,GACjC,EACF,KAEA,OAACnC,EAAA,EAAK,YAAL,CACC,oBAAC7B,EAAA,EAAK,CAAC,IAAK,EAAG,UAAU,SACtB,UAAAkE,GAAM,gBAAe,OAACjE,EAAA,EAAI,CAAE,SAAAiE,EAAK,YAAY,EAC7CC,GAAQ,OAAO,WACd,OAACnE,EAAA,EAAK,CAAC,IAAK,EAAG,UAAU,MAAM,KAAI,GAChC,SAAAmE,EAAO,MAAM,IAAI,CAACW,EAAM5D,OACvB,QAAC,MAEC,KAAK,UACL,KAAK,KACL,QAAQ,YACR,KAAM6D,EAAWf,EAAYc,CAAI,EAEhC,UAAAA,EAAK,MAAM,IAAEA,EAAK,WANd5D,CAOP,CACD,EACH,GAEJ,EACF,KAEA,OAACW,EAAA,EAAK,KAAL,CACC,mBAAC7B,EAAA,EAAK,CAAC,IAAK,EAAG,UAAU,MAAM,KAAI,GAChC,SAAAqE,EAAkB,EACrB,EACF,KAEA,OAACxC,EAAA,EAAK,QAAL,CACC,oBAAC7B,EAAA,EAAK,CAAC,IAAK,EAAG,UAAU,MACvB,oBAAC,KAAU,CAAC,KAAK,MAAM,KAAM,GAAG,IAAgB,IAAIoE,CAAI,GAAI,QAAQ,UAAU,KAAK,KACjF,mBAAC,KAAK,CAAC,QAAQ,oCAAoC,gBAAI,EACzD,KACA,OAACY,EAAA,EAAc,CAAC,WAAAhB,CAAA,CAAwB,KACxC,OAAC,KAAU,CAAC,QAAQ,YAAY,KAAK,MAAM,KAAM,GAAG,IAAgB,IAAII,CAAI,QAAS,KAAK,KACxF,mBAAC,KAAK,CAAC,QAAQ,wCAAwC,oBAAQ,EACjE,GACF,EACF,KACA,OAACvC,EAAA,EAAK,iBAAL,CACC,mBAACoD,EAAA,EAAsB,CAAC,KAAAb,CAAA,CAAY,EACtC,IAnDSA,CAoDX,CAEJ,CAGA,SAASW,EAAWG,EAAkBC,EAA8B,CAClE,OAAIA,EAAM,WAAa,YACd,aAELD,EAAK,MAAM,KAAK,SAAW,SACtB,iBAAiBA,EAAK,UAAU,IAAI,GAEtC,aACT,C,yBC9GO,SAASE,EAAe,CAAE,MAAA/B,CAAM,EAAU,CAC/C,KAAM,CAACgC,EAAOC,CAAQ,KAAI,YAAS,EAAE,EAC/BC,EAAgBlC,EAAM,OAAQmC,GAASA,EAAK,UAAU,MAAM,SAASH,CAAK,CAAC,EAC3E,CAAE,kBAAAI,CAAkB,KAAIC,EAAA,GAAkBrC,CAAK,EACrD,SACE,QAACrD,EAAA,EAAK,CAAC,UAAW,SAAU,IAAK,EAC9B,WAACyF,MACA,QAACzF,EAAA,EAAK,CAAC,IAAK,EACV,oBAAC2F,EAAA,GACC,eAAa,KAAE,yDAA0D,QAAQ,EACjF,MAAON,EACP,SAAUC,CAAA,CACZ,KACA,OAAC/E,EAAA,EAAuB,CAAC,MAAA8C,EAAc,aAAY,GAAC,GACtD,KAEF,OAACrD,EAAA,EAAK,CAAC,UAAW,SACf,SAAAuF,EAAc,OACbA,EAAc,IAAKC,MAAS,OAACzB,EAAc,CAA2B,WAAYyB,CAAA,EAAjCA,EAAK,UAAU,IAAwB,CAAE,KAE1F,OAACI,EAAA,EAAiB,CAChB,mBAAC,KAAK,CAAC,QAAQ,qEAAqE,0CAEpF,EACF,EAEJ,GACF,CAEJ,CCvCO,SAASC,EACdC,EAAmD,CAAC,EACf,CACrC,MAAMT,KAAQ,MAAuBS,CAAO,EACtCC,EAAW,IAAI,KAAK,SAAS,OAAW,CAAE,QAAS,EAAK,CAAC,EAQ/D,MAAO,CANaV,EAAM,MAAM,OAAO,MAAM,EAAE,KAAK,CAACW,EAAGC,IAAM,CAC5D,MAAMC,EAASF,EAAE,MAAM,OAAS,GAC1BG,EAASF,EAAE,MAAM,OAAS,GAChC,OAAOF,EAAS,QAAQG,EAAQC,CAAM,CACxC,CAAC,EAEoBd,EAAM,SAAS,CACtC,CCNA,IAAKe,IAAAA,IACHA,EAAA,aAAe,eACfA,EAAA,eAAiB,kBAFdA,IAAAA,IAAA,IAKU,SAASC,IAAW,CACjC,KAAM,CAAChD,EAAOiD,CAAS,EAAIT,EAAkB,CAAE,MAAO,EAAK,CAAC,EACtDU,KAAW,MAA4B,EACvC,CAACC,CAAS,KAAI,MAAsC,EACpD,CAACC,EAAiBC,CAAkB,KAAI,YAAS,EAAK,EACtD,CAACC,EAAWC,CAAY,KAAI,YAAuB,cAAyB,EAE5EC,KAAU,WACd,IAAM,CACJ,CACE,MAAO,eACP,SAAO,KAAE,0CAA2C,cAAc,EAClE,SAAO,KAAE,gDAAiD,sBAAsB,CAClF,EACA,CACE,MAAO,kBACP,SAAO,KAAE,6CAA8C,iBAAiB,EACxE,SAAO,KAAE,mDAAoD,iBAAiB,CAChF,CACF,EACA,CAAC,CACH,EAGA,GAAI,CAACxD,GAAO,QAAU,CAACiD,EACrB,SAAO,OAACzC,EAAA,QAAkB,CAAC,MAAOR,GAAS,CAAC,EAAG,EAGjD,MAAMyD,EAAkB,IAAM,CAC5BN,EAAU,CAAC,CAAC,EACZE,EAAmB,EAAK,CAC1B,EAEMK,EAAmB,IAAM,CAC7B,OAAQJ,EAAW,CACjB,IAAK,eACH,SAAO,OAACvB,EAAc,CAAC,MAAO/B,GAAS,CAAC,EAAG,EAC7C,IAAK,kBACH,SAAO,OAACD,EAAA,EAAc,CAAC,MAAOC,GAAS,CAAC,EAAG,EAC7C,QACE,OAAO,IACX,CACF,EAEA,SACE,OAAC2D,EAAA,GACC,MAAM,eACN,YAAU,KAAE,kCAAmC,8CAA8C,EAE7F,oBAACA,EAAA,EAAK,SAAL,CAAc,UAAAV,EACZ,UAAAC,EAAS,MAAM,kBACd,OAAC3C,EAAA,GACC,SAAO,KAAE,uDAAwD,yBAAyB,EAC1F,SAAS,QACT,iBACE,OAAC,KAAK,CAAC,QAAQ,4DAA4D,8CAE3E,EAEF,SAAU,IAAM,CACd8C,EAAmB,EAAI,CACzB,EAEA,mBAAC,KAAK,CAAC,QAAQ,8EAA8E,+EAE7F,EACF,KAEF,OAACO,EAAA,GACC,OAAQR,EACR,SAAO,KACL,kEACA,oCACF,EACA,QAAM,KACJ,qDACA,4FACF,EACA,eAAa,KAAE,oDAAqD,qBAAqB,EACzF,UAAWK,EACX,UAAW,IAAMJ,EAAmB,EAAK,EAC3C,KACA,QAAC1G,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,EAC7B,oBAACkH,EAAA,EAAO,CACL,SAAAL,EAAQ,IAAKM,MACZ,OAACC,EAAA,GAEC,MAAOD,EAAE,MACT,OAAQR,IAAcQ,EAAE,MACxB,YAAa,IAAMP,EAAaO,EAAE,KAAK,EACvC,MAAOA,EAAE,OAJJA,EAAE,KAKT,CACD,EACH,KACA,OAACE,EAAA,EAAU,CAAE,SAAAN,EAAiB,EAAE,GAClC,GACF,EACF,CAEJ,C,oHCxGO,SAAS9B,EAAuB,CAAE,KAAAb,EAAM,WAAAkD,CAAW,EAAU,CAClE,KAAM,CAACC,EAAkBC,CAAO,KAAI,MAA4B,EAC1D,CAACC,EAAW/D,CAAY,KAAI,YAAS,EAAK,EAC1CgE,KAAW,MAAY,KAE7B,aAAU,IAAM,CACVF,EAAQ,YACV9D,EAAa,EAAK,EACd4D,GACFI,EAASJ,CAAU,EAGzB,EAAG,CAACE,EAAQ,UAAWF,EAAYI,CAAQ,CAAC,EAE5C,MAAMC,KAAY,eAAY,IAAM,CAClCJ,EAAiB,CAAE,KAAAnD,CAAK,CAAC,CAC3B,EAAG,CAACmD,EAAkBnD,CAAI,CAAC,EAE3B,SACE,oBACE,oBAAC,KACC,KAAK,YACL,WAAS,KAAE,uEAAwE,wBAAwB,EAC3G,SAAUoD,EAAQ,UAClB,QAAS,IAAM,CACb9D,EAAa,EAAI,CACnB,EACF,KACA,OAAC,KACC,OAAQ+D,EACR,SAAO,KAAE,gEAAiE,0BAA0B,EACpG,QAAM,KACJ,kEACA,wDACF,EACA,eAAa,KAAE,sDAAuD,QAAQ,EAC9E,UAAAE,EACA,UAAW,IAAMjE,EAAa,EAAK,EACrC,GACF,CAEJ,C,+HCxCO,SAASsB,EAAe,CAAE,WAAAhB,CAAW,EAAU,CACpD,KAAM,CAAC4D,EAAWC,CAAQ,KAAI,MAAgC,EACxD,CAACC,EAAaC,CAAc,KAAI,YAAS,EAAK,EAC9CL,KAAW,MAAY,EACvBtD,EAAOJ,EAAW,UAAU,KAE5BgE,EAAU,IAAM,CACf5D,IAGLwD,EAAU,CACR,KAAAxD,EACA,QAAS,CACP,KAAM,CACJ,YAAa,EACf,CACF,CACF,CAAC,EACD2D,EAAe,EAAK,EACtB,EAEME,EAAY,EAAQjE,EAAW,QAAQ,OAAO,QAEpD,SACE,oBACE,oBAAC,MACC,KAAK,iBACL,QAAS,YACT,QACEiE,EACI,UACA,KAAE,4DAA6D,wCAAwC,EAE7G,SAAUJ,EAAS,WAAa,CAACzD,GAAQ,CAAC6D,EAC1C,QAAAD,EAEA,mBAAC,KAAK,CAAC,QAAQ,oCAAoC,gBAAI,EACzD,EACC,CAAChE,EAAW,MAAM,KAAK,YACtB,OAAC,KACC,OAAQ8D,EACR,SAAO,KAAE,sDAAuD,qBAAqB,EACrF,QAAM,KAAE,uDAAwD,wBAAwB,EACxF,eAAa,KAAE,2CAA4C,MAAM,EACjE,UAAW,IAAMJ,EAAS,GAAG,IAAgB,IAAItD,CAAI,OAAO,EAC5D,UAAW,IAAM2D,EAAe,EAAK,EACvC,GAEJ,CAEJ,C,+JC9CA,MAAMG,EAAqB,GAAG,IAAW,UACnCC,EAAuB,GAAG,IAAW,SAEpC,SAAS5H,EAAwB,CAAE,MAAA8C,EAAO,aAAA+E,EAAe,EAAM,EAAU,CAC9E,MAAMC,KAAQ,KAAkBhF,CAAK,EAC/BqE,KAAW,MAAY,EAE7B,OAAIW,EAAM,kBACD,KAGLA,EAAM,mBAEN,OAAC,IAAK,CAAC,MAAM,GAAG,SAAS,OACvB,mBAAC,MACC,QAAQ,qEACR,OAAQ,CAAE,MAAOA,EAAM,SAAU,EACjC,SAAU,uCACZ,EACF,EAIAD,KAEA,OAAC,KACC,WACE,QAAC,IAAI,CACH,oBAAC,IAAK,KAAL,CACC,KAAK,cACL,SAAO,KAAE,4DAA6D,oBAAoB,EAC1F,QAAS,IAAM,CACbV,EAASQ,CAAM,CACjB,EACF,KACA,OAAC,IAAK,KAAL,CACC,KAAK,WACL,SAAO,KAAE,wDAAyD,6BAA6B,EAC/F,QAAS,IAAM,CACbR,EAASS,CAAQ,CACnB,EACF,GACF,EAGF,mBAAC,KAAM,CAAC,QAAQ,UACd,oBAAC,IAAK,CAAC,WAAW,SAChB,oBAAC,KAAK,CAAC,QAAQ,mDAAmD,qBAAS,KAC3E,OAAC,IAAI,CAAC,KAAM,aAAc,GAC5B,EACF,EACF,KAKF,QAAC,IAAK,CAAC,IAAK,EACV,oBAAC,KAAU,CAAC,KAAMD,EAAQ,QAAQ,UAChC,mBAAC,KAAK,CAAC,QAAQ,4DAA4D,8BAAkB,EAC/F,KACA,OAAC,KAAU,CAAC,KAAMC,EAAU,QAAQ,YAClC,mBAAC,KAAK,CAAC,QAAQ,wDAAwD,uCAA2B,EACpG,GACF,CAEJ,C,mFCxEO,SAAStD,EAAY,CAAE,KAAAK,CAAK,EAAqB,CACtD,GAAI,CAACA,EACH,OAAO,KAGT,IAAIoD,EACAlJ,EAAoB,SACpBmJ,EAAO,UACPpJ,EAAiB,uBAErB,GAAI+F,EAAK,UAAU,kBACjB9F,EAAQ,MACRmJ,EAAO,WACPpJ,EAAO,kBACE,CAAC+F,EAAK,MAAM,MAAM,QAC3B9F,EAAQ,MACRmJ,EAAO,6BACPpJ,EAAO,sBACE,CAAC+F,EAAK,QAAQ,MAAM,OAAO,OACpC9F,EAAQ,SACRmJ,EAAO,UACPpJ,EAAO,UACPmJ,EAAU,sCAGV,QAAQpD,EAAK,QAAQ,MAAM,MAAO,CAChC,IAAK,UACH/F,EAAO,QACPoJ,EAAO,aACPnJ,EAAQ,QACR,MACF,IAAK,UACL,IAAK,UACHA,EAAQ,SACRmJ,EAAO,UACPpJ,EAAO,UACP,MACF,IAAK,QACHC,EAAQ,MACRmJ,EAAO,QACPpJ,EAAO,uBACP,MACF,QACE,KACJ,CAGF,SACE,OAAC,KACC,MAAAC,EACA,KAAAD,EACA,KAAAoJ,EACA,MAAO,CAAE,OAAQ,SAAU,EAC3B,QAAAD,EACA,QAAS,IAAM,CACb,KAAgB,KAAK,GAAG,IAAgB,IAAIpD,EAAK,UAAU,IAAI,gBAAgB,CACjF,EACF,CAEJ,C,mCC5DO,SAASQ,EAAkBtF,EAAiC,CACjE,OAAKA,GAAO,OAQL,CACL,kBAAmBA,EAAM,KAAMoF,GAASA,EAAK,MAAM,KAAK,SAAW,UAAU,EAC7E,gBAAiBpF,EAAM,KAAMoF,GAASA,EAAK,MAAM,KAAK,SAAW,QAAQ,EACzE,iBAA0BpF,GAAS,CAAC,GAAG,QAAU,GACjD,UAAWA,EAAM,MACnB,EAZS,CACL,kBAAmB,GACnB,gBAAiB,GACjB,UAAW,EACX,gBAAiB,EACnB,CAQJ,C","sources":["webpack://grafana/./public/app/features/provisioning/GettingStarted/IconCircle.tsx","webpack://grafana/./public/app/features/provisioning/GettingStarted/EnhancedFeatures.tsx","webpack://grafana/./public/app/features/provisioning/GettingStarted/FeaturesList.tsx","webpack://grafana/./public/app/features/provisioning/Shared/CodeBlock.tsx","webpack://grafana/./public/app/features/provisioning/GettingStarted/SetupStep.tsx","webpack://grafana/./public/app/features/provisioning/GettingStarted/SidebarItem.tsx","webpack://grafana/./public/app/features/provisioning/GettingStarted/Sidebar.tsx","webpack://grafana/./public/app/features/provisioning/GettingStarted/SetupModal.tsx","webpack://grafana/./public/app/features/provisioning/GettingStarted/GettingStarted.tsx","webpack://grafana/./public/app/features/provisioning/GettingStarted/GettingStartedPage.tsx","webpack://grafana/./public/app/features/provisioning/Repository/RepositoryCard.tsx","webpack://grafana/./public/app/features/provisioning/Shared/RepositoryList.tsx","webpack://grafana/./public/app/features/provisioning/hooks/useRepositoryList.ts","webpack://grafana/./public/app/features/provisioning/HomePage.tsx","webpack://grafana/./public/app/features/provisioning/Repository/DeleteRepositoryButton.tsx","webpack://grafana/./public/app/features/provisioning/Repository/SyncRepository.tsx","webpack://grafana/./public/app/features/provisioning/Shared/ConnectRepositoryButton.tsx","webpack://grafana/./public/app/features/provisioning/Shared/StatusBadge.tsx","webpack://grafana/./public/app/features/provisioning/utils/checkSyncSettings.ts"],"sourcesContent":["import { css } from '@emotion/css';\n\nimport { GrafanaTheme2, colorManipulator } from '@grafana/data';\nimport { Icon, IconName, useStyles2 } from '@grafana/ui';\n\nexport interface IconCircleProps {\n  icon: IconName;\n  color: 'blue' | 'orange' | 'purple';\n}\n\nexport const IconCircle = ({ icon, color }: IconCircleProps) => {\n  const styles = useStyles2(getStyles, color);\n\n  return (\n    <div className={styles.iconCircle}>\n      <Icon name={icon} size=\"xl\" />\n    </div>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme2, color: IconCircleProps['color']) {\n  const resolvedColor = theme.visualization.getColorByName(color);\n\n  return {\n    iconCircle: css({\n      borderRadius: theme.shape.radius.circle,\n      padding: theme.spacing(1),\n      color: resolvedColor,\n      backgroundColor: colorManipulator.alpha(resolvedColor, 0.2),\n    }),\n  };\n}\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Box, Stack, Text, LinkButton, useStyles2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nimport { IconCircle } from './IconCircle';\n\ninterface EnhancedFeaturesProps {\n  hasPublicAccess: boolean;\n  hasImageRenderer: boolean;\n  onSetupPublicAccess: () => void;\n}\n\nexport const EnhancedFeatures = ({ hasPublicAccess, hasImageRenderer, onSetupPublicAccess }: EnhancedFeaturesProps) => {\n  const style = useStyles2(getStyles);\n\n  return (\n    <Stack direction=\"column\" gap={5}>\n      <Stack direction=\"column\">\n        <Text variant=\"h4\">\n          <Trans i18nKey=\"provisioning.enhanced-features.header\">Enhance your GitHub experience</Trans>\n        </Text>\n        <Text color=\"secondary\">\n          <Trans i18nKey=\"provisioning.enhanced-features.description\">\n            Get the most out of your GitHub integration with these optional add-ons\n          </Trans>\n        </Text>\n      </Stack>\n      <Stack gap={2} direction=\"row\" height=\"100%\">\n        <Box width=\"40%\" height=\"100%\" display=\"flex\" direction=\"column\" gap={2} alignItems=\"flex-start\">\n          <Stack gap={2}>\n            <IconCircle icon=\"sync\" color=\"blue\" />\n            <IconCircle icon=\"code-branch\" color=\"purple\" />\n          </Stack>\n          <Trans i18nKey=\"provisioning.enhanced-features.title-instant-updates-requests-webhooks\">\n            Instant updates and pull requests with webhooks.\n          </Trans>\n          <Box display=\"flex\" flex=\"1\" minHeight=\"50px\">\n            <Text variant=\"body\" color=\"secondary\">\n              <Trans i18nKey=\"provisioning.enhanced-features.description-instant-updates\">\n                Get instant updates in Grafana as soon as changes are committed. Review and approve changes using pull\n                requests before they go live.\n              </Trans>\n            </Text>\n          </Box>\n          <LinkButton\n            fill=\"outline\"\n            variant=\"secondary\"\n            onClick={onSetupPublicAccess}\n            disabled={hasPublicAccess}\n            icon={hasPublicAccess ? 'check' : undefined}\n          >\n            <Trans i18nKey=\"provisioning.enhanced-features.set-up-public-webhooks\">Set up public webhooks</Trans>\n          </LinkButton>\n        </Box>\n\n        <div className={style.separator} />\n\n        <Box\n          width=\"40%\"\n          height=\"100%\"\n          paddingLeft={2}\n          display=\"flex\"\n          direction=\"column\"\n          gap={2}\n          alignItems=\"flex-start\"\n        >\n          <IconCircle icon=\"camera\" color=\"orange\" />\n          <Trans i18nKey=\"provisioning.enhanced-features.title-visual-previews-in-pull-requests\">\n            Visual previews in pull requests with image rendering\n          </Trans>\n          <Box display=\"flex\" flex=\"1\" minHeight=\"50px\">\n            <Text variant=\"body\" color=\"secondary\">\n              <Trans i18nKey=\"provisioning.enhanced-features.description-visual-previews-dashboard-updates-directly-requests\">\n                See visual previews of dashboard updates directly in pull requests\n              </Trans>\n            </Text>\n          </Box>\n          <LinkButton\n            fill=\"outline\"\n            variant=\"secondary\"\n            href=\"https://grafana.com/grafana/plugins/grafana-image-renderer/\"\n            icon={hasImageRenderer ? 'check' : 'external-link-alt'}\n            disabled={hasImageRenderer}\n          >\n            <Trans i18nKey=\"provisioning.enhanced-features.set-up-image-rendering\">Set up image rendering</Trans>\n          </LinkButton>\n        </Box>\n      </Stack>\n    </Stack>\n  );\n};\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    separator: css({\n      borderRight: `2px solid ${theme.colors.border.weak}`,\n    }),\n  };\n}\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack, Text, Box, LinkButton, useStyles2 } from '@grafana/ui';\nimport { Repository } from 'app/api/clients/provisioning';\nimport { Trans } from 'app/core/internationalization';\n\nimport { ConnectRepositoryButton } from '../Shared/ConnectRepositoryButton';\n\ninterface FeaturesListProps {\n  repos?: Repository[];\n  hasRequiredFeatures: boolean;\n  onSetupFeatures: () => void;\n}\n\nexport const FeaturesList = ({ repos, hasRequiredFeatures, onSetupFeatures }: FeaturesListProps) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Stack direction=\"column\" gap={3}>\n      <Text variant=\"h2\">\n        <Trans i18nKey=\"provisioning.features-list.manage-your-dashboards-with-remote-provisioning\">\n          Get started with GitSync\n        </Trans>\n      </Text>\n      <ul className={styles.featuresList}>\n        <li>\n          <Trans i18nKey=\"provisioning.features-list.manage-dashboards-provision-updates-automatically\">\n            Manage dashboards as code in GitHub and provision updates automatically\n          </Trans>\n        </li>\n        <li>\n          <Trans i18nKey=\"provisioning.features-list.store-dashboards-in-version-controlled-storage\">\n            Store dashboards in version-controlled storage for better organization and history tracking\n          </Trans>\n        </li>\n      </ul>\n      {!hasRequiredFeatures ? (\n        <Box>\n          <LinkButton fill=\"outline\" onClick={onSetupFeatures}>\n            <Trans i18nKey=\"provisioning.features-list.actions.set-up-required-feature-toggles\">\n              Set up required feature toggles\n            </Trans>\n          </LinkButton>\n        </Box>\n      ) : (\n        <Stack direction=\"row\" alignItems=\"center\" gap={2}>\n          <ConnectRepositoryButton items={repos} />\n        </Stack>\n      )}\n    </Stack>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    featuresList: css({\n      listStyleType: 'none',\n      paddingLeft: 0,\n      marginLeft: theme.spacing(-1),\n      '& li': {\n        position: 'relative',\n        paddingLeft: theme.spacing(4),\n        marginBottom: theme.spacing(1),\n        '&:before': {\n          content: '\"✓\"',\n          position: 'absolute',\n          left: theme.spacing(1),\n          top: '0',\n          color: theme.colors.text.secondary,\n          fontWeight: theme.typography.fontWeightBold,\n        },\n      },\n    }),\n  };\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { ClipboardButton, useStyles2, CodeEditor } from '@grafana/ui';\n\ninterface Props {\n  code: string;\n  copyCode?: boolean;\n}\n\nexport const CodeBlock = ({ code, copyCode = true }: Props) => {\n  const lineCount = code.split('\\n').length;\n  const useMinHeight = lineCount * 24 <= 42; // 24px per line, 42px minimum\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.container}>\n      {copyCode && (\n        <ClipboardButton className={styles.copyButton} variant=\"secondary\" size=\"sm\" icon=\"copy\" getText={() => code} />\n      )}\n      <CodeEditor\n        value={code}\n        language=\"ini\"\n        showLineNumbers={false}\n        showMiniMap={false}\n        height={useMinHeight ? '42px' : `${Math.min(lineCount * 24, 300)}px`}\n        readOnly={true}\n        monacoOptions={{\n          scrollBeyondLastLine: false,\n          scrollbar: {\n            vertical: useMinHeight ? 'hidden' : 'auto',\n            horizontal: 'auto',\n          },\n        }}\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    position: 'relative',\n    margin: `${theme.spacing(2)} 0`,\n    border: `1px solid ${theme.colors.border.medium}`,\n  }),\n  copyButton: css({\n    position: 'absolute',\n    top: theme.spacing(1),\n    right: theme.spacing(1),\n    zIndex: 1,\n  }),\n});\n","import { Container, Text } from '@grafana/ui';\n\nimport { CodeBlock } from '../Shared/CodeBlock';\n\nimport { Step } from './types';\n\nexport interface Props {\n  step: Step;\n}\n\nexport const SetupStep = ({ step }: Props) => {\n  return (\n    <>\n      <Text element=\"h3\" variant=\"h4\">\n        {step?.title}\n      </Text>\n      {step.description && (\n        <Container margin=\"sm\">\n          <Text element=\"p\">{step.description}</Text>\n        </Container>\n      )}\n\n      {step.code && <CodeBlock code={step.code} copyCode={step.copyCode} />}\n    </>\n  );\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { IconButton, Text, Stack, Card } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nexport interface Props {\n  step: string;\n  index: number;\n  currentStep: number;\n  onStepClick: (index: number) => void;\n  styles: ReturnType<typeof getStyles>;\n}\n\nexport const SidebarItem = ({ step, index, currentStep, onStepClick, styles }: Props) => {\n  const isCompleted = index < currentStep;\n  const isCurrent = index === currentStep;\n  const isPending = index > currentStep;\n\n  const getStepStatus = () => {\n    if (isCompleted) {\n      return {\n        icon: 'check-circle' as const,\n        color: 'success',\n        label: t('provisioning.sidebar-item.label-completed-step', 'Completed step'),\n      };\n    }\n    if (isCurrent) {\n      return {\n        icon: 'circle' as const,\n        color: 'primary',\n        label: t('provisioning.sidebar-item.label-current-step', 'Current step'),\n      };\n    }\n    return {\n      icon: 'circle' as const,\n      color: 'secondary',\n      label: t('provisioning.sidebar-item.label-pending-step', 'Pending step'),\n    };\n  };\n\n  const { icon, color, label } = getStepStatus();\n\n  const handleClick = () => onStepClick(index);\n  const handleIconClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    onStepClick(index);\n  };\n\n  return (\n    <Card\n      className={`${styles.stepItem} ${isCurrent ? styles.activeStep : ''} ${styles.plainCard}`}\n      onClick={handleClick}\n    >\n      <Stack direction=\"row\" alignItems=\"center\" gap={2}>\n        <IconButton\n          name={icon}\n          size=\"sm\"\n          variant={isPending ? 'secondary' : 'primary'}\n          color={color}\n          aria-label={label}\n          onClick={handleIconClick}\n        />\n        <Text color={isCurrent ? 'primary' : 'secondary'} weight={isCurrent ? 'medium' : 'regular'}>\n          {step}\n        </Text>\n      </Stack>\n    </Card>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  stepItem: css({\n    padding: theme.spacing(1),\n    cursor: 'pointer',\n    '&:hover': {\n      background: theme.colors.action.hover,\n    },\n  }),\n  activeStep: css({\n    color: theme.colors.primary.text,\n  }),\n  plainCard: css({\n    background: 'transparent',\n    border: 'none',\n    boxShadow: 'none',\n  }),\n});\n","import { useStyles2, Stack, Box } from '@grafana/ui';\n\nimport { SidebarItem, getStyles as getStepItemStyles } from './SidebarItem';\n\ninterface Props {\n  steps: string[];\n  currentStep: number;\n  onStepClick: (index: number) => void;\n}\n\nexport const Sidebar = ({ steps, currentStep, onStepClick }: Props) => {\n  if (steps.length === 0 || steps.length === 1) {\n    return null;\n  }\n\n  const stepItemStyles = useStyles2(getStepItemStyles);\n\n  return (\n    <Box width={'260px'} padding={1}>\n      <Stack direction=\"column\" gap={1}>\n        {steps.map((step, index) => (\n          <SidebarItem\n            key={index}\n            step={step}\n            index={index}\n            currentStep={currentStep}\n            onStepClick={onStepClick}\n            styles={stepItemStyles}\n          />\n        ))}\n      </Stack>\n    </Box>\n  );\n};\n","import { css } from '@emotion/css';\nimport { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Modal, Button, useStyles2, Stack, Text } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nimport { SetupStep } from './SetupStep';\nimport { Sidebar } from './Sidebar';\nimport { Step } from './types';\n\nexport interface Props {\n  title: string;\n  description: string;\n  steps: Step[];\n\n  isOpen: boolean;\n  onDismiss: () => void;\n}\n\nexport const SetupModal = ({ title, description, steps, isOpen, onDismiss }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const [currentStep, setCurrentStep] = useState(0);\n\n  const isFirstStep = currentStep === 0;\n  const isLastStep = currentStep === steps.length - 1;\n  const stepTitles = steps.map((step) => step.title);\n\n  const handleNext = () => !isLastStep && setCurrentStep(currentStep + 1);\n  const handlePrevious = () => !isFirstStep && setCurrentStep(currentStep - 1);\n\n  return (\n    <Modal isOpen={isOpen} title={title} onDismiss={onDismiss} className={styles.modal}>\n      <Stack direction={'column'} gap={4}>\n        <Text variant=\"body\" color=\"secondary\">\n          {description}\n        </Text>\n        <Stack direction=\"row\" height=\"100%\">\n          <Sidebar steps={stepTitles} currentStep={currentStep} onStepClick={setCurrentStep} />\n\n          <div className={styles.contentWrapper}>\n            <SetupStep step={steps[currentStep]} />\n          </div>\n        </Stack>\n      </Stack>\n\n      <Modal.ButtonRow>\n        <Stack direction=\"row\" justifyContent=\"flex-end\" gap={2}>\n          <Button variant=\"secondary\" onClick={handlePrevious} disabled={isFirstStep}>\n            <Trans i18nKey=\"provisioning.setup-modal.previous\">Previous</Trans>\n          </Button>\n\n          {isLastStep ? (\n            <Button variant=\"primary\" onClick={onDismiss} icon=\"check-circle\">\n              <Trans i18nKey=\"provisioning.setup-modal.done\">Done</Trans>\n            </Button>\n          ) : (\n            <Button variant=\"primary\" onClick={handleNext}>\n              <Trans i18nKey=\"provisioning.setup-modal.next\">Next</Trans>\n            </Button>\n          )}\n        </Stack>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  modal: css({\n    width: '1100px',\n    maxWidth: '95%',\n  }),\n  description: css({\n    marginBottom: theme.spacing(3),\n    padding: theme.spacing(0, 1),\n  }),\n  contentWrapper: css({\n    flex: 1,\n    overflowY: 'auto',\n    minWidth: 0,\n    padding: theme.spacing(2),\n    borderLeft: `1px solid ${theme.colors.border.weak}`,\n  }),\n  footer: css({\n    padding: theme.spacing(2),\n    borderTop: `1px solid ${theme.colors.border.weak}`,\n    marginTop: theme.spacing(2),\n  }),\n});\n","import { css } from '@emotion/css';\nimport { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Stack, useStyles2 } from '@grafana/ui';\nimport { useGetFrontendSettingsQuery, Repository } from 'app/api/clients/provisioning';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { EnhancedFeatures } from './EnhancedFeatures';\nimport { FeaturesList } from './FeaturesList';\nimport { SetupModal } from './SetupModal';\nimport { getConfigurationStatus } from './features';\n\ntype SetupType = 'public-access' | 'required-features' | null;\n\n// Configuration examples\nconst featureIni = `# In your custom.ini file\n\n[feature_toggles]\nprovisioning = true\nkubernetesClientDashboardsFolders = true\nkubernetesDashboards = true ; use k8s from browser\n\n# If you want easy kubectl setup development mode\ngrafanaAPIServerEnsureKubectlAccess = true`;\n\nconst ngrokExample = `ngrok http 3000\n\nHelp shape K8s Bindings https://ngrok.com/new-features-update?ref=k8s\n\nSession Status                online\nAccount                       Roberto Jiménez Sánchez (Plan: Free)\nVersion                       3.18.4\nRegion                        Europe (eu)\nLatency                       44ms\nWeb Interface                 http://127.0.0.1:4040\nForwarding                    https://d60d-83-33-235-27.ngrok-free.app -> http://localhost:3000\nConnections                   ttl     opn     rt1     rt5     p50     p90\n                              50      2       0.00    0.00    83.03   90.56\n\nHTTP Requests\n-------------\n\n09:18:46.147 CET             GET  /favicon.ico                   302 Found\n09:18:46.402 CET             GET  /login`;\n\nconst rootUrlExample = `[server]\nroot_url = https://d60d-83-33-235-27.ngrok-free.app`;\n\nconst getModalContent = (setupType: SetupType) => {\n  switch (setupType) {\n    case 'public-access':\n      return {\n        title: t('provisioning.getting-started.modal-title-set-up-public-access', 'Set up public access'),\n        description: t(\n          'provisioning.getting-started.modal-description-public-access',\n          'Set up public access to your Grafana instance to enable GitHub integration'\n        ),\n        steps: [\n          {\n            title: t('provisioning.getting-started.step-title-start-ngrok', 'Start ngrok for temporary public access'),\n            description: t(\n              'provisioning.getting-started.step-description-start-ngrok',\n              'Run this command to create a secure tunnel to your local Grafana:'\n            ),\n            code: 'ngrok http 3000',\n          },\n          {\n            title: t('provisioning.getting-started.step-title-copy-url', 'Copy your public URL'),\n            description: t(\n              'provisioning.getting-started.step-description-copy-url',\n              'From the ngrok output, copy the https:// forwarding URL that looks like this:'\n            ),\n            code: ngrokExample,\n            copyCode: false,\n          },\n          {\n            title: t(\n              'provisioning.getting-started.step-title-update-grafana-config',\n              'Update your Grafana configuration'\n            ),\n            description: t(\n              'provisioning.getting-started.step-description-update-grafana-config',\n              'Add this to your custom.ini file, replacing the URL with your actual ngrok URL:'\n            ),\n            code: rootUrlExample,\n          },\n        ],\n      };\n    case 'required-features':\n      return {\n        title: t('provisioning.getting-started.modal-title-set-up-required-features', 'Set up required features'),\n        description: t(\n          'provisioning.getting-started.modal-description-required-features',\n          'Enable required Grafana features for provisioning'\n        ),\n        steps: [\n          {\n            title: t(\n              'provisioning.getting-started.step-title-enable-feature-toggles',\n              'Enable Required Feature Toggles'\n            ),\n            description: t(\n              'provisioning.getting-started.step-description-enable-feature-toggles',\n              'Add these settings to your custom.ini file to enable necessary features:'\n            ),\n            code: featureIni,\n          },\n        ],\n      };\n    default:\n      return {\n        title: '',\n        description: '',\n        steps: [],\n      };\n  }\n};\n\ninterface Props {\n  items: Repository[];\n}\n\nexport default function GettingStarted({ items }: Props) {\n  const styles = useStyles2(getStyles);\n  const settingsQuery = useGetFrontendSettingsQuery(undefined, { refetchOnMountOrArgChange: true });\n  const legacyStorage = settingsQuery.data?.legacyStorage;\n  const hasItems = Boolean(settingsQuery.data?.items?.length);\n  const { hasPublicAccess, hasImageRenderer, hasRequiredFeatures } = getConfigurationStatus();\n  const [showInstructionsModal, setShowModal] = useState(false);\n  const [setupType, setSetupType] = useState<SetupType>(null);\n\n  return (\n    <>\n      {legacyStorage && (\n        <Alert\n          severity=\"info\"\n          title={t(\n            'provisioning.getting-started.title-setting-connection-could-cause-temporary-outage',\n            'Setting up this connection could cause a temporary outage'\n          )}\n        >\n          <Trans i18nKey=\"provisioning.getting-started.alert-temporary-outage\">\n            When you connect your whole instance, dashboards will be unavailable while running the migration. We\n            recommend warning your users before starting the process.\n          </Trans>\n        </Alert>\n      )}\n      <Stack direction=\"column\" gap={6} wrap=\"wrap\">\n        <Stack gap={10} alignItems=\"center\">\n          <FeaturesList\n            repos={items}\n            hasRequiredFeatures={hasRequiredFeatures}\n            onSetupFeatures={() => {\n              setSetupType('required-features');\n              setShowModal(true);\n            }}\n          />\n          <div className={styles.imageContainer}>\n            <img\n              src={'public/img/provisioning/provisioning.svg'}\n              className={styles.image}\n              alt={'Grafana provisioning'}\n            />\n          </div>\n        </Stack>\n        {(!hasPublicAccess || !hasImageRenderer) && hasItems && (\n          <EnhancedFeatures\n            hasPublicAccess={hasPublicAccess}\n            hasImageRenderer={hasImageRenderer}\n            onSetupPublicAccess={() => {\n              setSetupType('public-access');\n              setShowModal(true);\n            }}\n          />\n        )}\n      </Stack>\n      {showInstructionsModal && setupType && (\n        <SetupModal\n          {...getModalContent(setupType)}\n          isOpen={showInstructionsModal}\n          onDismiss={() => setShowModal(false)}\n        />\n      )}\n    </>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    imageContainer: css({\n      height: 350,\n      display: `flex`,\n      alignItems: `center`,\n      justifyContent: `center`,\n    }),\n    image: css({\n      borderRadius: theme.shape.radius.default,\n      width: '100%',\n      height: '100%',\n    }),\n  };\n}\n","import { Box, Text, TextLink } from '@grafana/ui';\nimport { Repository } from 'app/api/clients/provisioning';\nimport { Page } from 'app/core/components/Page/Page';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport GettingStarted from './GettingStarted';\n\ninterface Props {\n  items: Repository[];\n}\n\nexport default function GettingStartedPage({ items }: Props) {\n  return (\n    <Page\n      navId=\"provisioning\"\n      pageNav={{\n        text: t('provisioning.getting-started-page.header', 'Provisioning'),\n        subTitle: t(\n          'provisioning.getting-started-page.subtitle-provisioning-feature',\n          'View and manage your provisioning connections'\n        ),\n      }}\n    >\n      <Page.Contents>\n        <Banner />\n        <GettingStarted items={items} />\n      </Page.Contents>\n    </Page>\n  );\n}\n\nfunction Banner() {\n  return (\n    <Box\n      display=\"flex\"\n      backgroundColor={'info'}\n      borderRadius=\"default\"\n      paddingY={2}\n      paddingX={2}\n      marginBottom={3}\n      alignItems=\"stretch\"\n    >\n      <Text>\n        <Trans i18nKey={'provisioning.banner.message'}>\n          This feature is currently under active development. For the best experience and latest improvements, we\n          recommend using the{' '}\n          <TextLink href={'https://grafana.com/grafana/download/nightly'} external>\n            nightly build\n          </TextLink>{' '}\n          of Grafana.\n        </Trans>\n      </Text>\n    </Box>\n  );\n}\n","import { ReactNode } from 'react';\n\nimport { IconName, Stack, Text, TextLink, Icon, Card, LinkButton } from '@grafana/ui';\nimport { Repository, ResourceCount } from 'app/api/clients/provisioning';\nimport { Trans } from 'app/core/internationalization';\n\nimport { StatusBadge } from '../Shared/StatusBadge';\nimport { PROVISIONING_URL } from '../constants';\n\nimport { DeleteRepositoryButton } from './DeleteRepositoryButton';\nimport { SyncRepository } from './SyncRepository';\n\ninterface Props {\n  repository: Repository;\n}\n\nexport function RepositoryCard({ repository }: Props) {\n  const { metadata, spec, status } = repository;\n  const name = metadata?.name ?? '';\n\n  const getRepositoryMeta = (): ReactNode[] => {\n    const meta: ReactNode[] = [];\n\n    if (spec?.type === 'github') {\n      const { url = '', branch } = spec.github ?? {};\n      const branchUrl = branch ? `${url}/tree/${branch}` : url;\n\n      meta.push(\n        <TextLink key=\"link\" external href={branchUrl}>\n          {branchUrl}\n        </TextLink>\n      );\n\n      if (status?.webhook?.id) {\n        const webhookUrl = `${url}/settings/hooks/${status.webhook.id}`;\n        meta.push(\n          <Stack gap={1} direction=\"row\" alignItems=\"center\">\n            <TextLink key=\"webhook\" href={webhookUrl}>\n              <Trans i18nKey=\"provisioning.repository-card.get-repository-meta.webhook\">Webhook</Trans>\n            </TextLink>\n            <Icon name=\"check\" className=\"text-success\" />\n          </Stack>\n        );\n      }\n    } else if (spec?.type === 'local') {\n      meta.push(\n        <Text variant=\"bodySmall\" key=\"path\">\n          {spec.local?.path ?? ''}\n        </Text>\n      );\n    }\n\n    return meta;\n  };\n\n  const getRepositoryIcon = (): IconName => {\n    return spec?.type === 'github' ? 'github' : 'database';\n  };\n\n  return (\n    <Card key={name}>\n      <Card.Figure>\n        <Icon name={getRepositoryIcon()} size=\"xxl\" />\n      </Card.Figure>\n      <Card.Heading>\n        <Stack gap={2} direction=\"row\" alignItems=\"center\">\n          {spec?.title && <Text variant=\"h3\">{spec.title}</Text>}\n          <StatusBadge repo={repository} />\n        </Stack>\n      </Card.Heading>\n\n      <Card.Description>\n        <Stack gap={2} direction=\"column\">\n          {spec?.description && <Text>{spec.description}</Text>}\n          {status?.stats?.length && (\n            <Stack gap={1} direction=\"row\" wrap>\n              {status.stats.map((stat, index) => (\n                <LinkButton\n                  key={index}\n                  fill=\"outline\"\n                  size=\"md\"\n                  variant=\"secondary\"\n                  href={getListURL(repository, stat)}\n                >\n                  {stat.count} {stat.resource}\n                </LinkButton>\n              ))}\n            </Stack>\n          )}\n        </Stack>\n      </Card.Description>\n\n      <Card.Meta>\n        <Stack gap={2} direction=\"row\" wrap>\n          {getRepositoryMeta()}\n        </Stack>\n      </Card.Meta>\n\n      <Card.Actions>\n        <Stack gap={1} direction=\"row\">\n          <LinkButton icon=\"eye\" href={`${PROVISIONING_URL}/${name}`} variant=\"primary\" size=\"md\">\n            <Trans i18nKey=\"provisioning.repository-card.view\">View</Trans>\n          </LinkButton>\n          <SyncRepository repository={repository} />\n          <LinkButton variant=\"secondary\" icon=\"cog\" href={`${PROVISIONING_URL}/${name}/edit`} size=\"md\">\n            <Trans i18nKey=\"provisioning.repository-card.settings\">Settings</Trans>\n          </LinkButton>\n        </Stack>\n      </Card.Actions>\n      <Card.SecondaryActions>\n        <DeleteRepositoryButton name={name} />\n      </Card.SecondaryActions>\n    </Card>\n  );\n}\n\n// Helper function\nfunction getListURL(repo: Repository, stats: ResourceCount): string {\n  if (stats.resource === 'playlists') {\n    return '/playlists';\n  }\n  if (repo.spec?.sync.target === 'folder') {\n    return `/dashboards/f/${repo.metadata?.name}`;\n  }\n  return '/dashboards';\n}\n","import { useState } from 'react';\n\nimport { EmptySearchResult, FilterInput, Stack } from '@grafana/ui';\nimport { Repository } from 'app/api/clients/provisioning';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { RepositoryCard } from '../Repository/RepositoryCard';\nimport { checkSyncSettings } from '../utils/checkSyncSettings';\n\nimport { ConnectRepositoryButton } from './ConnectRepositoryButton';\n\ninterface Props {\n  items: Repository[];\n}\n\nexport function RepositoryList({ items }: Props) {\n  const [query, setQuery] = useState('');\n  const filteredItems = items.filter((item) => item.metadata?.name?.includes(query));\n  const { instanceConnected } = checkSyncSettings(items);\n  return (\n    <Stack direction={'column'} gap={3}>\n      {!instanceConnected && (\n        <Stack gap={2}>\n          <FilterInput\n            placeholder={t('provisioning.folder-repository-list.placeholder-search', 'Search')}\n            value={query}\n            onChange={setQuery}\n          />\n          <ConnectRepositoryButton items={items} showDropdown />\n        </Stack>\n      )}\n      <Stack direction={'column'}>\n        {filteredItems.length ? (\n          filteredItems.map((item) => <RepositoryCard key={item.metadata?.name} repository={item} />)\n        ) : (\n          <EmptySearchResult>\n            <Trans i18nKey=\"provisioning.folder-repository-list.no-results-matching-your-query\">\n              No results matching your query\n            </Trans>\n          </EmptySearchResult>\n        )}\n      </Stack>\n    </Stack>\n  );\n}\n","import { skipToken } from '@reduxjs/toolkit/query';\n\nimport { ListRepositoryApiArg, Repository, useListRepositoryQuery } from 'app/api/clients/provisioning';\n\n// Sort repositories alphabetically by title\nexport function useRepositoryList(\n  options: ListRepositoryApiArg | typeof skipToken = {}\n): [Repository[] | undefined, boolean] {\n  const query = useListRepositoryQuery(options);\n  const collator = new Intl.Collator(undefined, { numeric: true });\n\n  const sortedItems = query.data?.items?.slice().sort((a, b) => {\n    const titleA = a.spec?.title ?? '';\n    const titleB = b.spec?.title ?? '';\n    return collator.compare(titleA, titleB);\n  });\n\n  return [sortedItems, query.isLoading];\n}\n","import { useMemo, useState } from 'react';\n\nimport { Alert, ConfirmModal, Stack, Tab, TabContent, TabsBar } from '@grafana/ui';\nimport { useDeletecollectionRepositoryMutation, useGetFrontendSettingsQuery } from 'app/api/clients/provisioning';\nimport { Page } from 'app/core/components/Page/Page';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport GettingStarted from './GettingStarted/GettingStarted';\nimport GettingStartedPage from './GettingStarted/GettingStartedPage';\nimport { RepositoryList } from './Shared/RepositoryList';\nimport { useRepositoryList } from './hooks/useRepositoryList';\n\nenum TabSelection {\n  Repositories = 'repositories',\n  GettingStarted = 'getting-started',\n}\n\nexport default function HomePage() {\n  const [items, isLoading] = useRepositoryList({ watch: true });\n  const settings = useGetFrontendSettingsQuery();\n  const [deleteAll] = useDeletecollectionRepositoryMutation();\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [activeTab, setActiveTab] = useState<TabSelection>(TabSelection.Repositories);\n\n  const tabInfo = useMemo(\n    () => [\n      {\n        value: TabSelection.Repositories,\n        label: t('provisioning.home-page.tab-repositories', 'Repositories'),\n        title: t('provisioning.home-page.tab-repositories-title', 'List of repositories'),\n      },\n      {\n        value: TabSelection.GettingStarted,\n        label: t('provisioning.home-page.tab-getting-started', 'Getting started'),\n        title: t('provisioning.home-page.tab-getting-started-title', 'Getting started'),\n      },\n    ],\n    []\n  );\n\n  // Early return for onboarding\n  if (!items?.length && !isLoading) {\n    return <GettingStartedPage items={items ?? []} />;\n  }\n\n  const onConfirmDelete = () => {\n    deleteAll({});\n    setShowDeleteModal(false);\n  };\n\n  const renderTabContent = () => {\n    switch (activeTab) {\n      case TabSelection.Repositories:\n        return <RepositoryList items={items ?? []} />;\n      case TabSelection.GettingStarted:\n        return <GettingStarted items={items ?? []} />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Page\n      navId=\"provisioning\"\n      subTitle={t('provisioning.home-page.subtitle', 'View and manage your configured repositories')}\n    >\n      <Page.Contents isLoading={isLoading}>\n        {settings.data?.legacyStorage && (\n          <Alert\n            title={t('provisioning.home-page.title-legacy-storage-detected', 'Legacy storage detected')}\n            severity=\"error\"\n            buttonContent={\n              <Trans i18nKey=\"provisioning.home-page.remove-all-configured-repositories\">\n                Remove all configured repositories\n              </Trans>\n            }\n            onRemove={() => {\n              setShowDeleteModal(true);\n            }}\n          >\n            <Trans i18nKey=\"provisioning.home-page.configured-repositories-while-running-legacy-storage\">\n              Configured repositories will not work while running legacy storage.\n            </Trans>\n          </Alert>\n        )}\n        <ConfirmModal\n          isOpen={showDeleteModal}\n          title={t(\n            'provisioning.home-page.title-delete-all-configured-repositories',\n            'Delete all configured repositories'\n          )}\n          body={t(\n            'provisioning.home-page.confirm-delete-repositories',\n            'Are you sure you want to delete all configured repositories? This action cannot be undone.'\n          )}\n          confirmText={t('provisioning.home-page.button-delete-repositories', 'Delete repositories')}\n          onConfirm={onConfirmDelete}\n          onDismiss={() => setShowDeleteModal(false)}\n        />\n        <Stack direction=\"column\" gap={2}>\n          <TabsBar>\n            {tabInfo.map((t) => (\n              <Tab\n                key={t.value}\n                label={t.label}\n                active={activeTab === t.value}\n                onChangeTab={() => setActiveTab(t.value)}\n                title={t.title}\n              />\n            ))}\n          </TabsBar>\n          <TabContent>{renderTabContent()}</TabContent>\n        </Stack>\n      </Page.Contents>\n    </Page>\n  );\n}\n","import { useCallback, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom-v5-compat';\n\nimport { ConfirmModal, IconButton } from '@grafana/ui';\nimport { useDeleteRepositoryMutation } from 'app/api/clients/provisioning';\nimport { t } from 'app/core/internationalization';\n\ninterface Props {\n  name: string;\n  redirectTo?: string;\n}\n\nexport function DeleteRepositoryButton({ name, redirectTo }: Props) {\n  const [deleteRepository, request] = useDeleteRepositoryMutation();\n  const [showModal, setShowModal] = useState(false);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (request.isSuccess) {\n      setShowModal(false);\n      if (redirectTo) {\n        navigate(redirectTo);\n      }\n    }\n  }, [request.isSuccess, redirectTo, navigate]);\n\n  const onConfirm = useCallback(() => {\n    deleteRepository({ name });\n  }, [deleteRepository, name]);\n\n  return (\n    <>\n      <IconButton\n        name=\"trash-alt\"\n        tooltip={t('provisioning.delete-repository-button.tooltip-delete-this-repository', 'Delete this repository')}\n        disabled={request.isLoading}\n        onClick={() => {\n          setShowModal(true);\n        }}\n      />\n      <ConfirmModal\n        isOpen={showModal}\n        title={t('provisioning.delete-repository-button.title-delete-repository', 'Delete repository config')}\n        body={t(\n          'provisioning.delete-repository-button.confirm-delete-repository',\n          'Are you sure you want to delete the repository config?'\n        )}\n        confirmText={t('provisioning.delete-repository-button.button-delete', 'Delete')}\n        onConfirm={onConfirm}\n        onDismiss={() => setShowModal(false)}\n      />\n    </>\n  );\n}\n","import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom-v5-compat';\n\nimport { Button, ConfirmModal } from '@grafana/ui';\nimport { Repository, useCreateRepositoryJobsMutation } from 'app/api/clients/provisioning';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { PROVISIONING_URL } from '../constants';\n\ninterface Props {\n  repository: Repository;\n}\n\nexport function SyncRepository({ repository }: Props) {\n  const [createJob, jobQuery] = useCreateRepositoryJobsMutation();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const navigate = useNavigate();\n  const name = repository.metadata?.name;\n\n  const onClick = () => {\n    if (!name) {\n      return;\n    }\n    createJob({\n      name,\n      jobSpec: {\n        pull: {\n          incremental: false, // will queue a full resync job\n        },\n      },\n    });\n    setIsModalOpen(false);\n  };\n\n  const isHealthy = Boolean(repository.status?.health.healthy);\n\n  return (\n    <>\n      <Button\n        icon=\"cloud-download\"\n        variant={'secondary'}\n        tooltip={\n          isHealthy\n            ? undefined\n            : t('provisioning.sync-repository.tooltip-unhealthy-repository', 'Unable to pull an unhealthy repository')\n        }\n        disabled={jobQuery.isLoading || !name || !isHealthy}\n        onClick={onClick}\n      >\n        <Trans i18nKey=\"provisioning.sync-repository.pull\">Pull</Trans>\n      </Button>\n      {!repository.spec?.sync.enabled && (\n        <ConfirmModal\n          isOpen={isModalOpen}\n          title={t('provisioning.sync-repository.title-pull-not-enabled', 'Pull is not enabled')}\n          body={t('provisioning.sync-repository.body-edit-configuration', 'Edit the configuration')}\n          confirmText={t('provisioning.sync-repository.button-edit', 'Edit')}\n          onConfirm={() => navigate(`${PROVISIONING_URL}/${name}/edit`)}\n          onDismiss={() => setIsModalOpen(false)}\n        />\n      )}\n    </>\n  );\n}\n","import { useNavigate } from 'react-router-dom-v5-compat';\n\nimport { Alert, Button, Dropdown, Icon, LinkButton, Menu, Stack } from '@grafana/ui';\nimport { Repository } from 'app/api/clients/provisioning';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { RepoType } from '../Wizard/types';\nimport { CONNECT_URL } from '../constants';\nimport { checkSyncSettings } from '../utils/checkSyncSettings';\n\ninterface Props {\n  items?: Repository[];\n  showDropdown?: boolean;\n}\n\ntype ConnectUrl = `${typeof CONNECT_URL}/${RepoType}`;\n\nconst gitURL: ConnectUrl = `${CONNECT_URL}/github`;\nconst localURL: ConnectUrl = `${CONNECT_URL}/local`;\n\nexport function ConnectRepositoryButton({ items, showDropdown = false }: Props) {\n  const state = checkSyncSettings(items);\n  const navigate = useNavigate();\n\n  if (state.instanceConnected) {\n    return null;\n  }\n\n  if (state.maxReposReached) {\n    return (\n      <Alert title=\"\" severity=\"info\">\n        <Trans\n          i18nKey=\"provisioning.connect-repository-button.repository-limit-info-alert\"\n          values={{ count: state.repoCount }}\n          defaults={'Repository limit reached ({{count}})'}\n        />\n      </Alert>\n    );\n  }\n\n  if (showDropdown) {\n    return (\n      <Dropdown\n        overlay={\n          <Menu>\n            <Menu.Item\n              icon=\"code-branch\"\n              label={t('provisioning.connect-repository-button.configure-git-sync', 'Configure Git Sync')}\n              onClick={() => {\n                navigate(gitURL);\n              }}\n            />\n            <Menu.Item\n              icon=\"file-alt\"\n              label={t('provisioning.connect-repository-button.configure-file', 'Configure file provisioning')}\n              onClick={() => {\n                navigate(localURL);\n              }}\n            />\n          </Menu>\n        }\n      >\n        <Button variant=\"primary\">\n          <Stack alignItems=\"center\">\n            <Trans i18nKey=\"provisioning.connect-repository-button.configure\">Configure</Trans>\n            <Icon name={'angle-down'} />\n          </Stack>\n        </Button>\n      </Dropdown>\n    );\n  }\n\n  return (\n    <Stack gap={3}>\n      <LinkButton href={gitURL} variant=\"primary\">\n        <Trans i18nKey=\"provisioning.connect-repository-button.configure-git-sync\">Configure Git Sync</Trans>\n      </LinkButton>\n      <LinkButton href={localURL} variant=\"secondary\">\n        <Trans i18nKey=\"provisioning.connect-repository-button.configure-file\">Configure file provisioning</Trans>\n      </LinkButton>\n    </Stack>\n  );\n}\n","import { locationService } from '@grafana/runtime';\nimport { Badge, BadgeColor, IconName } from '@grafana/ui';\nimport { Repository } from 'app/api/clients/provisioning';\n\nimport { PROVISIONING_URL } from '../constants';\n\ninterface StatusBadgeProps {\n  repo?: Repository;\n}\n\nexport function StatusBadge({ repo }: StatusBadgeProps) {\n  if (!repo) {\n    return null;\n  }\n\n  let tooltip: string | undefined = undefined;\n  let color: BadgeColor = 'purple';\n  let text = 'Unknown';\n  let icon: IconName = 'exclamation-triangle';\n\n  if (repo.metadata?.deletionTimestamp) {\n    color = 'red';\n    text = 'Deleting';\n    icon = 'spinner';\n  } else if (!repo.spec?.sync?.enabled) {\n    color = 'red';\n    text = 'Automatic pulling disabled';\n    icon = 'info-circle';\n  } else if (!repo.status?.sync?.state?.length) {\n    color = 'orange';\n    text = 'Pending';\n    icon = 'spinner';\n    tooltip = 'Waiting for health check to run';\n  } else {\n    // Sync state\n    switch (repo.status?.sync?.state) {\n      case 'success':\n        icon = 'check';\n        text = 'Up-to-date';\n        color = 'green';\n        break;\n      case 'working':\n      case 'pending':\n        color = 'orange';\n        text = 'Pulling';\n        icon = 'spinner';\n        break;\n      case 'error':\n        color = 'red';\n        text = 'Error';\n        icon = 'exclamation-triangle';\n        break;\n      default:\n        break;\n    }\n  }\n\n  return (\n    <Badge\n      color={color}\n      icon={icon}\n      text={text}\n      style={{ cursor: 'pointer' }}\n      tooltip={tooltip}\n      onClick={() => {\n        locationService.push(`${PROVISIONING_URL}/${repo.metadata?.name}/?tab=overview`);\n      }}\n    />\n  );\n}\n","import { Repository } from 'app/api/clients/provisioning';\n\ntype syncState = {\n  instanceConnected: boolean;\n  folderConnected: boolean;\n  repoCount: number;\n  maxReposReached: boolean;\n};\n\nexport function checkSyncSettings(repos?: Repository[]): syncState {\n  if (!repos?.length) {\n    return {\n      instanceConnected: false,\n      folderConnected: false,\n      repoCount: 0,\n      maxReposReached: false,\n    };\n  }\n  return {\n    instanceConnected: repos.some((item) => item.spec?.sync.target === 'instance'),\n    folderConnected: repos.some((item) => item.spec?.sync.target === 'folder'),\n    maxReposReached: Boolean((repos ?? []).length >= 10),\n    repoCount: repos.length,\n  };\n}\n"],"names":["IconCircle","icon","color","styles","getStyles","Icon","theme","resolvedColor","colorManipulator","EnhancedFeatures","hasPublicAccess","hasImageRenderer","onSetupPublicAccess","style","Stack","Text","Box","FeaturesList","repos","hasRequiredFeatures","onSetupFeatures","ConnectRepositoryButton","CodeBlock","code","copyCode","lineCount","useMinHeight","ClipboardButton","CodeEditor","SetupStep","step","SidebarItem","index","currentStep","onStepClick","isCompleted","isCurrent","isPending","getStepStatus","label","handleClick","handleIconClick","e","Card","IconButton","Sidebar","steps","stepItemStyles","SetupModal","title","description","isOpen","onDismiss","setCurrentStep","isFirstStep","isLastStep","stepTitles","handleNext","handlePrevious","Modal","Button","featureIni","ngrokExample","rootUrlExample","getModalContent","setupType","GettingStarted","items","settingsQuery","legacyStorage","hasItems","showInstructionsModal","setShowModal","setSetupType","Alert","GettingStartedPage","Banner","RepositoryCard","repository","metadata","spec","status","name","getRepositoryMeta","meta","url","branch","branchUrl","TextLink","webhookUrl","getRepositoryIcon","StatusBadge","stat","getListURL","SyncRepository","DeleteRepositoryButton","repo","stats","RepositoryList","query","setQuery","filteredItems","item","instanceConnected","checkSyncSettings","FilterInput","EmptySearchResult","useRepositoryList","options","collator","a","b","titleA","titleB","TabSelection","HomePage","isLoading","settings","deleteAll","showDeleteModal","setShowDeleteModal","activeTab","setActiveTab","tabInfo","onConfirmDelete","renderTabContent","Page","ConfirmModal","TabsBar","t","Tab","TabContent","redirectTo","deleteRepository","request","showModal","navigate","onConfirm","createJob","jobQuery","isModalOpen","setIsModalOpen","onClick","isHealthy","gitURL","localURL","showDropdown","state","tooltip","text"],"sourceRoot":""}