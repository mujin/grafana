{"version":3,"file":"FileHistoryPage.8dfa343d16093e32c38b.js","mappings":"ySAYe,SAASA,GAAkB,CACxC,MAAMC,KAAS,KAAU,EACnBC,EAAOD,EAAO,MAAW,GACzBE,EAAOF,EAAO,GAAG,GAAK,GACtBG,KAAQ,MAA4B,CAAE,KAAAF,CAAK,CAAC,EAC5CG,KAAU,MAAqC,CAAE,KAAAH,EAAM,KAAAC,CAAK,CAAC,EAC7DG,EAAWF,EAAM,YAAW,KAAgBA,EAAM,KAAK,EAE7D,SACE,OAAC,KACC,MAAM,eACN,QAAS,CACP,KAAM,YAAYD,CAAI,GACtB,SAAUC,EAAM,MAAM,MAAM,OAAS,YACvC,EAEA,mBAAC,IAAK,SAAL,CAAc,UAAW,GACvB,SAAAE,KACC,QAAC,IAAU,CAAC,QAAS,uBAAwB,QAAQ,YACnD,oBAAC,IAAI,CAAC,QAAS,IACb,mBAAC,KAAK,CAAC,QAAQ,wEAAwE,6EAEvF,EACF,KACA,OAAC,IAAQ,CAAC,KAAM,KACd,mBAAC,KAAK,CAAC,QAAQ,sDAAsD,gCAAoB,EAC3F,GACF,KAGA,OAAC,OAAK,SAAAD,EAAQ,QAAO,OAACE,EAAA,CAAY,QAASF,EAAQ,KAAM,KAAAF,EAAY,KAAMD,CAAA,CAAM,KAAK,OAAC,IAAO,EAAC,EAAG,EAEtG,EACF,CAEJ,CAQA,SAASK,EAAY,CAAE,QAAAF,EAAS,KAAAF,EAAM,KAAAK,CAAK,EAAU,CACnD,OAAKH,EAAQ,SAKX,OAAC,IAAK,CAAC,UAAW,SACf,SAAAA,EAAQ,MAAM,IAAKI,MAClB,QAAC,IAAI,CAAC,KAAM,GAAG,IAAgB,IAAID,CAAI,SAASL,CAAI,QAAQM,EAAK,GAAG,GAClE,oBAAC,IAAK,QAAL,CAAc,SAAAA,EAAK,QAAQ,KAC5B,OAAC,IAAK,KAAL,CACC,mBAAC,QAAM,iBAAgBA,EAAK,SAAS,EAAE,EACzC,KACA,OAAC,IAAK,YAAL,CACC,mBAAC,IAAK,CACH,SAAAA,EAAK,QAAQ,IAAKC,MACjB,QAAC,QAAsB,MAAO,CAAE,QAAS,OAAQ,WAAY,SAAU,IAAK,KAAM,EAC/E,UAAAA,EAAE,cACD,OAAC,KACC,SAAU,CACR,KAAM,CAAE,KAAMA,EAAE,KAAM,UAAWA,EAAE,SAAU,EAC7C,aAAc,IAAI,KAAK,EAAE,YAAY,CACvC,EACA,YAAa,GACf,KAEF,OAAC,KAAE,KAAM,sBAAsBA,EAAE,QAAQ,GAAK,SAAAA,EAAE,KAAK,IAV5CA,EAAE,QAWb,CACD,EACH,EACF,IAtB2ED,EAAK,GAuBlF,CACD,EACH,KA/BO,OAAC,KAAK,CAAC,QAAQ,sCAAsC,qBAAS,CAiCzE,C,mCC1FO,SAASE,EAAgBC,EAAoB,CAClD,OAAKA,EAGE,IAAI,KAAKA,CAAS,EAAE,eAAe,EAFjC,KAGX,C","sources":["webpack://grafana/./public/app/features/provisioning/File/FileHistoryPage.tsx","webpack://grafana/./public/app/features/provisioning/utils/time.ts"],"sourcesContent":["import { useParams } from 'react-router-dom-v5-compat';\n\nimport { Card, EmptyState, Spinner, Stack, Text, TextLink, UserIcon } from '@grafana/ui';\nimport { useGetRepositoryHistoryWithPathQuery, useGetRepositoryStatusQuery } from 'app/api/clients/provisioning';\nimport { Page } from 'app/core/components/Page/Page';\nimport { Trans } from 'app/core/internationalization';\nimport { isNotFoundError } from 'app/features/alerting/unified/api/util';\n\nimport { PROVISIONING_URL } from '../constants';\nimport { HistoryListResponse } from '../types';\nimport { formatTimestamp } from '../utils/time';\n\nexport default function FileHistoryPage() {\n  const params = useParams();\n  const name = params['name'] ?? '';\n  const path = params['*'] ?? '';\n  const query = useGetRepositoryStatusQuery({ name });\n  const history = useGetRepositoryHistoryWithPathQuery({ name, path });\n  const notFound = query.isError && isNotFoundError(query.error);\n\n  return (\n    <Page\n      navId=\"provisioning\"\n      pageNav={{\n        text: `History: ${path}`,\n        subTitle: query.data?.spec?.title ?? 'Repository',\n      }}\n    >\n      <Page.Contents isLoading={false}>\n        {notFound ? (\n          <EmptyState message={`Repository not found`} variant=\"not-found\">\n            <Text element={'p'}>\n              <Trans i18nKey=\"provisioning.file-history-page.repository-config-exists-configuration\">\n                Make sure the repository config exists in the configuration file.\n              </Trans>\n            </Text>\n            <TextLink href={PROVISIONING_URL}>\n              <Trans i18nKey=\"provisioning.file-history-page.back-to-repositories\">Back to repositories</Trans>\n            </TextLink>\n          </EmptyState>\n        ) : (\n          //@ts-expect-error TODO fix history response types\n          <div>{history.data ? <HistoryView history={history.data} path={path} repo={name} /> : <Spinner />}</div>\n        )}\n      </Page.Contents>\n    </Page>\n  );\n}\n\ninterface Props {\n  history: HistoryListResponse;\n  path: string;\n  repo: string;\n}\n\nfunction HistoryView({ history, path, repo }: Props) {\n  if (!history.items) {\n    return <Trans i18nKey=\"provisioning.history-view.not-found\">Not found</Trans>;\n  }\n\n  return (\n    <Stack direction={'column'}>\n      {history.items.map((item) => (\n        <Card href={`${PROVISIONING_URL}/${repo}/file/${path}?ref=${item.ref}`} key={item.ref}>\n          <Card.Heading>{item.message}</Card.Heading>\n          <Card.Meta>\n            <span>{formatTimestamp(item.createdAt)}</span>\n          </Card.Meta>\n          <Card.Description>\n            <Stack>\n              {item.authors.map((a) => (\n                <span key={a.username} style={{ display: 'flex', alignItems: 'center', gap: '4px' }}>\n                  {a.avatarURL && (\n                    <UserIcon\n                      userView={{\n                        user: { name: a.name, avatarUrl: a.avatarURL },\n                        lastActiveAt: new Date().toISOString(),\n                      }}\n                      showTooltip={false}\n                    />\n                  )}\n                  <a href={`https://github.com/${a.username}`}>{a.name}</a>\n                </span>\n              ))}\n            </Stack>\n          </Card.Description>\n        </Card>\n      ))}\n    </Stack>\n  );\n}\n","export function formatTimestamp(timestamp?: number) {\n  if (!timestamp) {\n    return 'N/A';\n  }\n  return new Date(timestamp).toLocaleString();\n}\n"],"names":["FileHistoryPage","params","name","path","query","history","notFound","HistoryView","repo","item","a","formatTimestamp","timestamp"],"sourceRoot":""}