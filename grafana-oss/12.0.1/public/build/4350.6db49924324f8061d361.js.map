{"version":3,"file":"4350.6db49924324f8061d361.js","mappings":"sWACO,SAASA,EAAuBC,EAAQC,EAAgB,CAK3D,QAJIC,EAA4BD,EAAe,WAAa,EACxDE,EAAQH,EAAO,SAAS,EAAE,gBAAgB,EAC1CI,EAAiB,EACjBC,EAA0B,CAAC,EACtBC,EAAa,EAAGA,EAAaH,EAAM,OAAQG,IAAc,CAC9D,IAAIC,EAAcJ,EAAMG,CAAU,EAAE,KAAK,IAAM,GAS/C,GARIC,EAEAF,EAAwB,KAAK,CAAE,eAAgBD,IAAkB,WAAYE,CAAW,CAAC,EAGzFD,EAAwB,KAAK,CAAE,eAAgBD,EAAgB,WAAYE,CAAW,CAAC,EAGvFA,EAAaJ,GACbE,EAAiBC,EAAwBH,CAAyB,EAAE,eACpE,KAER,CACA,IAAIM,EAAwBH,EAAwBH,CAAyB,EAAE,eAC3EO,EAAsBJ,EAAwB,OAAO,SAAUK,EAAM,CAAE,OAAOA,EAAK,iBAAmBF,CAAuB,CAAC,EAC9HG,EAA0BF,EAAoB,CAAC,EAAE,WAAa,EAC9DG,EAAwBH,EAAoBA,EAAoB,OAAS,CAAC,EAAE,WAAa,EAIzFI,EAAmBV,EAAMS,EAAwB,CAAC,EAAE,OAAS,EACjE,OAAO,IAAI,QAAaD,EAAyB,EAAGC,EAAuBC,CAAgB,CAC/F,CAKO,SAASC,EAAOd,EAAQ,CAC3B,IAAIe,EAAQ,OAAO,eAAef,CAAM,EACxCe,EAAM,uBAAyB,SAAUd,EAAgB,CACrDF,EAAuB,KAAME,CAAc,CAC/C,CACJ,CCpCA,IAAIe,EAAyC,UAAY,CAKrD,SAASA,EAAwBhB,EAAQ,CACrC,IAAIiB,EAAQ,KACZ,KAAK,OAASjB,EACd,KAAK,YAAc,CAAC,EACpB,KAAK,YAAc,CAAC,EAGpB,KAAK,OAAO,2BAA2B,SAAUkB,EAAa,CACtDD,EAAM,OAAO,SAAS,EAAE,cAAc,IAAM,SAGhDA,EAAM,4BAA4BC,CAAW,CACjD,CAAC,CACL,CACA,OAAAF,EAAwB,UAAU,MAAQ,UAAY,CAClD,OAAOA,EAAwB,EACnC,EACAA,EAAwB,UAAU,QAAU,UAAY,CACpD,KAAK,YAAY,QAAQ,SAAUG,EAAG,CAAE,OAAOA,EAAE,QAAQ,CAAG,CAAC,CACjE,EACAH,EAAwB,UAAU,4BAA8B,SAAUE,EAAa,CAGnF,GAAI,CAACA,EAAY,UAAU,QAAQ,EAAG,CAClC,KAAK,YAAc,KAAK,OAAO,iBAAiB,KAAK,YAAa,CAAC,CAAC,EACpE,MACJ,CACA,IAAIE,EAAerB,EAAuB,KAAK,OAAQmB,EAAY,UAAU,iBAAiB,CAAC,EAC3FG,EAAc,CACd,CACI,MAAOD,EACP,QAASJ,EAAwB,yBACrC,CACJ,EACA,KAAK,YAAc,KAAK,OAAO,iBAAiB,KAAK,YAAaK,CAAW,CACjF,EACAL,EAAwB,GAAK,yCAC7BA,EAAwB,0BAA4B,CAChD,UAAW,oBACf,EACOA,CACX,EAAE,EACF,QAAeA,EClDf,IAAIM,EAAuC,UAAY,CACnD,SAASA,EAAsBtB,EAAQ,CACnC,IAAIiB,EAAQ,KACZ,KAAK,OAASjB,EACd,KAAK,YAAc,GAGnBA,EAAO,2BAA2B,SAAUkB,EAAa,CACjDD,EAAM,OAAO,SAAS,EAAE,cAAc,IAAM,UAS3CA,EAAM,cACPjB,EAAO,UAAU,CACb,GAAI,2CACJ,MAAO,8BACP,YAAa,CACT,SAAc,MAAM,SAAc,QAAU,UAAe,KAAM,SAAc,QAAU,UAAe,IAAI,CAChH,EACA,IAAK,SAAUuB,EAAI,CACfvB,EAAO,QAAQ,wBAAyB,gCAAiC,IAAI,CACjF,EACA,mBAAoB,gBACxB,CAAC,EACDiB,EAAM,YAAc,IAE5B,CAAC,CACL,CACA,OAAOK,CACX,EAAE,EACF,QAAeA,ECnCf,IAAIE,EAAwB,CACxB,eAAgB,OAChB,cAAe,QACf,eAAgB,QAChB,gBAAiB,SACjB,eAAgB,MAChB,gBAAiB,OACjB,eAAgB,OAChB,gBAAiB,QACjB,gBAAiB,SACjB,gBAAiB,QACjB,gBAAiB,OACjB,kBAAmB,WACnB,kBAAmB,WACnB,cAAe,OACf,iBAAkB,OAClB,8BAA+B,UAC/B,+BAAgC,UAChC,8BAA+B,UAC/B,gBAAiB,UACjB,kCAAmC,SACvC,EACWC,EAA4B,SAAUC,EAAS,CAAE,OAAOF,EAAsBE,CAAO,GAAKA,CAAS,EAC1GC,EAA4B,CAC5B,OAAQ,SACR,KAAM,UACN,MAAO,OACP,MAAO,QACP,OAAQ,SACR,IAAK,QACL,KAAM,SACN,KAAM,QACN,MAAO,SACP,MAAO,SACP,KAAM,SACN,QAAS,UACT,SAAU,WACV,OAAQ,SACR,QAAS,UACT,SAAU,UACd,EACWC,EAA+B,SAAUC,EAAS,CAAE,OAAOF,EAA0BE,CAAO,GAAKA,CAAS,EAC1GC,EAAc,SAAUC,EAAI,CACnC,MAAO,GAAG,OAAOA,EAAG,KAAM,GAAG,EAAE,OAAOA,EAAG,gBAAgB,IAAI,SAAUC,EAAG,CAAE,MAAO,IAAI,OAAOA,EAAE,KAAM,GAAG,CAAG,CAAC,EAAE,KAAK,GAAG,EAAG,GAAG,CACjI,EACWC,EAAgB,SAAUF,EAAI,CACrC,MAAO,OAAO,OAAOA,EAAG,KAAM,KAAK,EAAE,OAAOG,EAA8BH,EAAG,eAAe,EAAG,GAAG,EAAE,OAAOA,EAAG,IAAI,CACtH,EACWG,EAAgC,SAAUC,EAAiB,CAClE,MAAO,IAAI,OAAOA,EAAgB,IAAI,SAAUC,EAAgB,CAAE,OAAOC,EAA6BD,CAAc,CAAG,CAAC,EAAE,KAAK,GAAG,EAAG,GAAG,CAC5I,EACIC,EAA+B,SAAUD,EAAgB,CAEzD,GAAIA,EAAe,SAAWA,EAAe,QAAQ,OAAS,EAAG,CAC7D,IAAIE,EAAqBF,EAAe,QACnC,IAAI,SAAUG,EAAK,CAAE,MAAO,GAAG,OAAOA,EAAI,KAAM,GAAG,EAAE,OAAOA,EAAI,SAAWd,EAA0Bc,EAAI,IAAI,CAAC,CAAG,CAAC,EAClH,KAAK,GAAG,EACb,MAAO,GAAG,OAAOH,EAAe,KAAM,GAAG,EAAE,OAAOE,IAAuB,GAAK,IAAMA,CAAkB,CAC1G,KAEI,OAAO,GAAG,OAAOF,EAAe,KAAM,GAAG,EAAE,OAAOA,EAAe,SAAWX,EAA0BW,EAAe,IAAI,CAAC,CAElI,ECpDII,EAA6C,UAAY,CACzD,SAASA,EAA4BC,EAAkB,CACnD,KAAK,aAAe,IAAI,UACxB,KAAK,oBAAoBA,CAAgB,EAOzC,KAAK,mBAAqB,CAC9B,CACA,cAAO,eAAeD,EAA4B,UAAW,cAAe,CACxE,IAAK,UAAY,CACb,OAAO,KAAK,aAAa,KAC7B,EACA,WAAY,GACZ,aAAc,EAClB,CAAC,EACD,OAAO,eAAeA,EAA4B,UAAW,mBAAoB,CAC7E,IAAK,UAAY,CACb,OAAO,KAAK,iBAChB,EACA,WAAY,GACZ,aAAc,EAClB,CAAC,EACDA,EAA4B,UAAU,oBAAsB,SAAUE,EAAS,CAC3E,KAAK,kBAAoBA,GAAW,OAAO,OAAO,IAAI,EACtD,KAAK,aAAa,KAAK,IAAI,CAC/B,EACAF,EAA4B,UAAU,yBAA2B,SAAUG,EAAO,CAG9E,KAAK,mBAAqBA,CAC9B,EACAH,EAA4B,UAAU,qBAAuB,UAAY,CACrE,OAAO,KAAK,kBAChB,EACOA,CACX,EAAE,EACEI,EAA0B,CAC1B,uBAAwB,GACxB,iBAAkB,GAClB,oDAAqD,GACrD,kBAAmB,GACnB,wBAAyB,GACzB,qBAAsB,GACtB,YAAa,GACb,UAAW,CACP,gBAAiB,EACjB,kBAAmB,OACvB,EACA,sBAAuB,CACnB,4BAA6B,EACjC,EACA,oBAAqB,GACrB,uBAAwB,GACxB,wBAAyB,CAAC,EAC1B,oBAAqB,CAAC,YAAa,QAAQ,EAC3C,iBAAkB,GAClB,kBAAmB,CAAE,sBAAuB,EAAM,CACtD,EACO,SAASC,GAAiB,CAC7B,OAAO,IAAI,QAAQ,SAAUC,EAASC,EAAQ,CAC1CC,EAAS,SAAUC,EAAM,CACrBA,EAAK,eAAe,EAAE,KAAKH,EAASC,CAAM,CAC9C,CAAC,CACL,CAAC,CACL,CACA,SAASC,EAASE,EAAU,CACxB,gCAAsB,KAAKA,CAAQ,CACvC,CACO,IAAIC,EAAgB,IAAIX,EAA4BI,CAAuB,EACvEQ,EAAa,CACpB,MAAO,cACP,KAAM,aACN,MAAO,aACX,EACA,YAAiB,WAAW,QAAS,UAAY,CAC7CJ,EAAS,SAAUC,EAAM,CAAE,OAAOA,EAAK,UAAUE,EAAe,CAAM,CAAG,CAAC,CAC9E,CAAC,EACD,YAAiB,SAAS,CACtB,GAAI,QACJ,WAAY,CAAC,OAAQ,MAAM,CAC/B,CAAC,EACD,SAAc,YAAYC,EAAW,MAAO,CACxC,KAAM,KACN,QAAS,GACT,MAAO,CACH,CAAE,MAAO,UAAW,WAAY,QAAS,EACzC,CAAE,MAAO,sBAAuB,WAAY,QAAS,EACrD,CAAE,MAAO,WAAY,WAAY,QAAS,EAC1C,CAAE,MAAO,eAAgB,WAAY,QAAS,EAC9C,CAAE,MAAO,SAAU,WAAY,QAAS,EACxC,CAAE,MAAO,gBAAiB,WAAY,QAAS,EAC/C,CAAE,MAAO,WAAY,WAAY,QAAS,EAC1C,CAAE,MAAO,qBAAsB,WAAY,QAAS,EACpD,CAAE,MAAO,GAAI,WAAY,QAAS,EAClC,CAAE,MAAO,OAAQ,WAAY,QAAS,EACtC,CAAE,MAAO,MAAO,WAAY,QAAS,EACrC,CAAE,MAAO,aAAc,WAAY,QAAS,EAC5C,CAAE,MAAO,UAAW,WAAY,QAAS,EACzC,CAAE,MAAO,SAAU,WAAY,QAAS,EACxC,CAAE,MAAO,aAAc,WAAY,QAAS,EAC5C,CAAE,MAAO,UAAW,WAAY,QAAS,CAC7C,EACA,OAAQ,CAAC,CACb,CAAC,EACD,SAAc,YAAYA,EAAW,KAAM,CACvC,KAAM,UACN,QAAS,GACT,MAAO,CACH,CAAE,MAAO,UAAW,WAAY,QAAS,EACzC,CAAE,MAAO,sBAAuB,WAAY,QAAS,EACrD,CAAE,MAAO,WAAY,WAAY,QAAS,EAC1C,CAAE,MAAO,eAAgB,WAAY,QAAS,EAC9C,CAAE,MAAO,SAAU,WAAY,QAAS,EACxC,CAAE,MAAO,gBAAiB,WAAY,QAAS,EAC/C,CAAE,MAAO,WAAY,WAAY,QAAS,EAC1C,CAAE,MAAO,qBAAsB,WAAY,QAAS,EACpD,CAAE,MAAO,GAAI,WAAY,QAAS,EAClC,CAAE,MAAO,OAAQ,WAAY,QAAS,EACtC,CAAE,MAAO,MAAO,WAAY,QAAS,EACrC,CAAE,MAAO,aAAc,WAAY,QAAS,EAC5C,CAAE,MAAO,UAAW,WAAY,QAAS,EACzC,CAAE,MAAO,SAAU,WAAY,QAAS,EACxC,CAAE,MAAO,aAAc,WAAY,QAAS,EAC5C,CAAE,MAAO,UAAW,WAAY,QAAS,CAC7C,EACA,OAAQ,CAER,CACJ,CAAC,EACD,SAAc,YAAYA,EAAW,MAAO,CACxC,KAAM,UACN,QAAS,GACT,MAAO,CAAC,EACR,OAAQ,CAEJ,oBAAqB,UACrB,yCAA0C,SAC9C,CACJ,CAAC,EAGD,SAAc,kBAAkB,SAAUpD,EAAQ,CAC9C,IAAIqD,EACC,GAAAA,EAAK,OAAO,qBAAuB,MAAQA,IAAO,SAAkBA,EAAG,WAExEvC,EAAOd,CAAM,EAIjB,IAAI,EAAwBA,CAAM,EAC9BsD,EAAuBtD,CAAM,GAC7B,IAAI,EAAsBA,CAAM,EAEpCuD,EAA+CvD,CAAM,CACzD,CAAC,EACD,SAASuD,EAA+CvD,EAAQ,CAC5DA,EAAO,2BAA2B,SAAUwD,EAAO,CAE/C,GAAIL,GACAA,EAAc,kBACdA,EAAc,iBAAiB,oDAAqD,CACpF,IAAIM,EAAsBD,EAAM,SAAW,WAAaA,EAAM,SAAW,SAAc,mBAAmB,OAG1G,GAAI,CAACC,GAAuBzD,EAAO,SAAS,EAAE,kBAAkBwD,EAAM,UAAU,YAAY,CAAC,IAAM,KAC/F,OAEJA,EAAM,UAON,WAAW,UAAY,CAAE,OAAOxD,EAAO,QAAQ,eAAgB,+BAAgC,CAAC,CAAC,CAAG,EAAG,EAAE,CAC7G,CACJ,CAAC,CACL,CACA,SAASsD,EAAuBtD,EAAQ,CACpC,OAAOA,EAAO,YAAc,MAChC,CACA,IAAI0D,EAAY,CACZ,0BAA2BjC,EAC3B,YAAaK,EACb,cAAeG,EACf,8BAA+BC,EAC/B,6BAA8BN,EAC9B,cAAeuB,EACf,eAAgBN,EAChB,uBAAwB9C,EACxB,WAAYqD,CAChB,EACA,YAAiB,MAAQM,C","sources":["webpack://grafana/./node_modules/@kusto/monaco-kusto/release/esm/extendedEditor.js","webpack://grafana/./node_modules/@kusto/monaco-kusto/release/esm/commandHighlighter.js","webpack://grafana/./node_modules/@kusto/monaco-kusto/release/esm/commandFormatter.js","webpack://grafana/./node_modules/@kusto/monaco-kusto/release/esm/languageServiceManager/schema.js","webpack://grafana/./node_modules/@kusto/monaco-kusto/release/esm/monaco.contribution.js"],"sourcesContent":["import * as monaco from 'monaco-editor/esm/vs/editor/editor.api';\nexport function getCurrentCommandRange(editor, cursorPosition) {\n    var zeroBasedCursorLineNumber = cursorPosition.lineNumber - 1;\n    var lines = editor.getModel().getLinesContent();\n    var commandOrdinal = 0;\n    var linesWithCommandOrdinal = [];\n    for (var lineNumber = 0; lineNumber < lines.length; lineNumber++) {\n        var isEmptyLine = lines[lineNumber].trim() === '';\n        if (isEmptyLine) {\n            // increase commandCounter - we'll be starting a new command.\n            linesWithCommandOrdinal.push({ commandOrdinal: commandOrdinal++, lineNumber: lineNumber });\n        }\n        else {\n            linesWithCommandOrdinal.push({ commandOrdinal: commandOrdinal, lineNumber: lineNumber });\n        }\n        // No need to keep scanning if we're past our line and we've seen an empty line.\n        if (lineNumber > zeroBasedCursorLineNumber &&\n            commandOrdinal > linesWithCommandOrdinal[zeroBasedCursorLineNumber].commandOrdinal) {\n            break;\n        }\n    }\n    var currentCommandOrdinal = linesWithCommandOrdinal[zeroBasedCursorLineNumber].commandOrdinal;\n    var currentCommandLines = linesWithCommandOrdinal.filter(function (line) { return line.commandOrdinal === currentCommandOrdinal; });\n    var currentCommandStartLine = currentCommandLines[0].lineNumber + 1;\n    var currentCommandEndLine = currentCommandLines[currentCommandLines.length - 1].lineNumber + 1;\n    // End-column of 1 means no characters will be highlighted - since columns are 1-based in monaco apis.\n    // Start-column of 1 and End column of 2 means 1st character is selected.\n    // Thus if a line has n column and we need to provide n+1 so that the entire line will be highlighted.\n    var commandEndColumn = lines[currentCommandEndLine - 1].length + 1;\n    return new monaco.Range(currentCommandStartLine, 1, currentCommandEndLine, commandEndColumn);\n}\n/**\n * Extending ICode editor to contain additional kusto-specific methods.\n * note that the extend method needs to be called at least once to take affect, otherwise this here code is useless.\n */\nexport function extend(editor) {\n    var proto = Object.getPrototypeOf(editor);\n    proto.getCurrentCommandRange = function (cursorPosition) {\n        getCurrentCommandRange(this, cursorPosition);\n    };\n}\n","import { getCurrentCommandRange } from './extendedEditor';\n/**\n * Highlights the command that surround cursor location\n */\nvar KustoCommandHighlighter = /** @class */ (function () {\n    /**\n     * Register to cursor movement and selection events.\n     * @param editor monaco editor instance\n     */\n    function KustoCommandHighlighter(editor) {\n        var _this = this;\n        this.editor = editor;\n        this.disposables = [];\n        this.decorations = [];\n        // Note that selection update is triggered not only for selection changes, but also just when no text selection is occurring and cursor just moves around.\n        // This case is counted as a 0-length selection starting and ending on the cursor position.\n        this.editor.onDidChangeCursorSelection(function (changeEvent) {\n            if (_this.editor.getModel().getLanguageId() !== 'kusto') {\n                return;\n            }\n            _this.highlightCommandUnderCursor(changeEvent);\n        });\n    }\n    KustoCommandHighlighter.prototype.getId = function () {\n        return KustoCommandHighlighter.ID;\n    };\n    KustoCommandHighlighter.prototype.dispose = function () {\n        this.disposables.forEach(function (d) { return d.dispose(); });\n    };\n    KustoCommandHighlighter.prototype.highlightCommandUnderCursor = function (changeEvent) {\n        // Looks like the user selected a bunch of text. we don't want to highlight the entire command in this case - since highlighting\n        // the text is more helpful.\n        if (!changeEvent.selection.isEmpty()) {\n            this.decorations = this.editor.deltaDecorations(this.decorations, []);\n            return;\n        }\n        var commandRange = getCurrentCommandRange(this.editor, changeEvent.selection.getStartPosition());\n        var decorations = [\n            {\n                range: commandRange,\n                options: KustoCommandHighlighter.CURRENT_COMMAND_HIGHLIGHT,\n            },\n        ];\n        this.decorations = this.editor.deltaDecorations(this.decorations, decorations);\n    };\n    KustoCommandHighlighter.ID = 'editor.contrib.kustoCommandHighlighter';\n    KustoCommandHighlighter.CURRENT_COMMAND_HIGHLIGHT = {\n        className: 'selectionHighlight',\n    };\n    return KustoCommandHighlighter;\n}());\nexport default KustoCommandHighlighter;\n","import * as monaco from 'monaco-editor/esm/vs/editor/editor.api';\nvar KustoCommandFormatter = /** @class */ (function () {\n    function KustoCommandFormatter(editor) {\n        var _this = this;\n        this.editor = editor;\n        this.actionAdded = false;\n        // selection also represents no selection - for example the event gets triggered when moving cursor from point\n        // a to point b. in the case start position will equal end position.\n        editor.onDidChangeCursorSelection(function (changeEvent) {\n            if (_this.editor.getModel().getLanguageId() !== 'kusto') {\n                return;\n            }\n            // Theoretically you would expect this code to run only once in onDidCreateEditor.\n            // Turns out that onDidCreateEditor is fired before the IStandaloneEditor is completely created (it is emitted by\n            // the super ctor before the child ctor was able to fully run).\n            // Thus we don't have a key binding provided yet when onDidCreateEditor is run, which is essential to call addAction.\n            // By adding the action here in onDidChangeCursorSelection we're making sure that the editor has a key binding provider,\n            // and we just need to make sure that this happens only once.\n            if (!_this.actionAdded) {\n                editor.addAction({\n                    id: 'editor.action.kusto.formatCurrentCommand',\n                    label: 'Format Command Under Cursor',\n                    keybindings: [\n                        monaco.KeyMod.chord(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyK, monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyF),\n                    ],\n                    run: function (ed) {\n                        editor.trigger('KustoCommandFormatter', 'editor.action.formatSelection', null);\n                    },\n                    contextMenuGroupId: '1_modification',\n                });\n                _this.actionAdded = true;\n            }\n        });\n    }\n    return KustoCommandFormatter;\n}());\nexport default KustoCommandFormatter;\n","// Definition of schema object in the context of language services. This model is exposed to consumers of this library.\nvar dotnetTypeToKustoType = {\n    'System.SByte': 'bool',\n    'System.Byte': 'uint8',\n    'System.Int16': 'int16',\n    'System.UInt16': 'uint16',\n    'System.Int32': 'int',\n    'System.UInt32': 'uint',\n    'System.Int64': 'long',\n    'System.UInt64': 'ulong',\n    'System.String': 'string',\n    'System.Single': 'float',\n    'System.Double': 'real',\n    'System.DateTime': 'datetime',\n    'System.TimeSpan': 'timespan',\n    'System.Guid': 'guid',\n    'System.Boolean': 'bool',\n    'Newtonsoft.Json.Linq.JArray': 'dynamic',\n    'Newtonsoft.Json.Linq.JObject': 'dynamic',\n    'Newtonsoft.Json.Linq.JToken': 'dynamic',\n    'System.Object': 'dynamic',\n    'System.Data.SqlTypes.SqlDecimal': 'decimal',\n};\nexport var getCslTypeNameFromClrType = function (clrType) { return dotnetTypeToKustoType[clrType] || clrType; };\nvar kustoTypeToEntityDataType = {\n    object: 'Object',\n    bool: 'Boolean',\n    uint8: 'Byte',\n    int16: 'Int16',\n    uint16: 'UInt16',\n    int: 'Int32',\n    uint: 'UInt32',\n    long: 'Int64',\n    ulong: 'UInt64',\n    float: 'Single',\n    real: 'Double',\n    decimal: 'Decimal',\n    datetime: 'DateTime',\n    string: 'String',\n    dynamic: 'Dynamic',\n    timespan: 'TimeSpan',\n};\nexport var getEntityDataTypeFromCslType = function (cslType) { return kustoTypeToEntityDataType[cslType] || cslType; };\nexport var getCallName = function (fn) {\n    return \"\".concat(fn.name, \"(\").concat(fn.inputParameters.map(function (p) { return \"{\".concat(p.name, \"}\"); }).join(','), \")\");\n};\nexport var getExpression = function (fn) {\n    return \"let \".concat(fn.name, \" = \").concat(getInputParametersAsCslString(fn.inputParameters), \" \").concat(fn.body);\n};\nexport var getInputParametersAsCslString = function (inputParameters) {\n    return \"(\".concat(inputParameters.map(function (inputParameter) { return getInputParameterAsCslString(inputParameter); }).join(','), \")\");\n};\nvar getInputParameterAsCslString = function (inputParameter) {\n    // If this is a tabular parameter\n    if (inputParameter.columns && inputParameter.columns.length > 0) {\n        var attributesAsString = inputParameter.columns\n            .map(function (col) { return \"\".concat(col.name, \":\").concat(col.cslType || getCslTypeNameFromClrType(col.type)); })\n            .join(',');\n        return \"\".concat(inputParameter.name, \":\").concat(attributesAsString === '' ? '*' : attributesAsString);\n    }\n    else {\n        return \"\".concat(inputParameter.name, \":\").concat(inputParameter.cslType || getCslTypeNameFromClrType(inputParameter.type));\n    }\n};\n","import * as monaco from 'monaco-editor/esm/vs/editor/editor.api';\nimport KustoCommandHighlighter from './commandHighlighter';\nimport KustoCommandFormatter from './commandFormatter';\nimport { extend, getCurrentCommandRange } from './extendedEditor';\nimport { getCslTypeNameFromClrType, getCallName, getExpression, getInputParametersAsCslString, getEntityDataTypeFromCslType, } from './languageServiceManager/schema';\nexport * from './languageServiceManager/schema';\nexport * from './languageServiceManager/renderInfo';\nexport * from './languageServiceManager/settings';\nexport * from './types';\nexport { getCurrentCommandRange } from './extendedEditor';\n// --- Kusto configuration and defaults ---------\nvar LanguageServiceDefaultsImpl = /** @class */ (function () {\n    function LanguageServiceDefaultsImpl(languageSettings) {\n        this._onDidChange = new monaco.Emitter();\n        this.setLanguageSettings(languageSettings);\n        // default to never kill worker when idle.\n        // reason: when killing worker - schema gets lost. We transmit the schema back to main process when killing\n        // the worker, but in some extreme cases web worker runs out of memory while stringifying the schema.\n        // This stems from the fact that web workers have much more limited memory that the main process.\n        // An alternative solution (not currently implemented) is to just save the schema in the main process whenever calling\n        // setSchema. That way we don't need to stringify the schema on the worker side when killing the web worker.\n        this._workerMaxIdleTime = 0;\n    }\n    Object.defineProperty(LanguageServiceDefaultsImpl.prototype, \"onDidChange\", {\n        get: function () {\n            return this._onDidChange.event;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(LanguageServiceDefaultsImpl.prototype, \"languageSettings\", {\n        get: function () {\n            return this._languageSettings;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    LanguageServiceDefaultsImpl.prototype.setLanguageSettings = function (options) {\n        this._languageSettings = options || Object.create(null);\n        this._onDidChange.fire(this);\n    };\n    LanguageServiceDefaultsImpl.prototype.setMaximumWorkerIdleTime = function (value) {\n        // doesn't fire an event since no\n        // worker restart is required here\n        this._workerMaxIdleTime = value;\n    };\n    LanguageServiceDefaultsImpl.prototype.getWorkerMaxIdleTime = function () {\n        return this._workerMaxIdleTime;\n    };\n    return LanguageServiceDefaultsImpl;\n}());\nvar defaultLanguageSettings = {\n    includeControlCommands: true,\n    newlineAfterPipe: true,\n    openSuggestionDialogAfterPreviousSuggestionAccepted: true,\n    useIntellisenseV2: true,\n    useSemanticColorization: true,\n    useTokenColorization: false,\n    enableHover: true,\n    formatter: {\n        indentationSize: 4,\n        pipeOperatorStyle: 'Smart',\n    },\n    syntaxErrorAsMarkDown: {\n        enableSyntaxErrorAsMarkDown: false,\n    },\n    enableQueryWarnings: false,\n    enableQuerySuggestions: false,\n    disabledDiagnosticCodes: [],\n    quickFixCodeActions: ['Change to', 'FixAll'],\n    enableQuickFixes: false,\n    completionOptions: { includeExtendedSyntax: false },\n};\nexport function getKustoWorker() {\n    return new Promise(function (resolve, reject) {\n        withMode(function (mode) {\n            mode.getKustoWorker().then(resolve, reject);\n        });\n    });\n}\nfunction withMode(callback) {\n    import('./kustoMode').then(callback);\n}\nexport var kustoDefaults = new LanguageServiceDefaultsImpl(defaultLanguageSettings);\nexport var themeNames = {\n    light: 'kusto-light',\n    dark: 'kusto-dark',\n    dark2: 'kusto-dark2',\n};\nmonaco.languages.onLanguage('kusto', function () {\n    withMode(function (mode) { return mode.setupMode(kustoDefaults, monaco); });\n});\nmonaco.languages.register({\n    id: 'kusto',\n    extensions: ['.csl', '.kql'],\n});\nmonaco.editor.defineTheme(themeNames.light, {\n    base: 'vs',\n    inherit: true,\n    rules: [\n        { token: 'comment', foreground: '008000' },\n        { token: 'variable.predefined', foreground: '800080' },\n        { token: 'function', foreground: '0000FF' },\n        { token: 'operator.sql', foreground: 'CC3700' },\n        { token: 'string', foreground: 'B22222' },\n        { token: 'operator.scss', foreground: '0000FF' },\n        { token: 'variable', foreground: 'C71585' },\n        { token: 'variable.parameter', foreground: '9932CC' },\n        { token: '', foreground: '000000' },\n        { token: 'type', foreground: '0000FF' },\n        { token: 'tag', foreground: '0000FF' },\n        { token: 'annotation', foreground: '2B91AF' },\n        { token: 'keyword', foreground: '0000FF' },\n        { token: 'number', foreground: '191970' },\n        { token: 'annotation', foreground: '9400D3' },\n        { token: 'invalid', background: 'cd3131' },\n    ],\n    colors: {},\n});\nmonaco.editor.defineTheme(themeNames.dark, {\n    base: 'vs-dark',\n    inherit: true,\n    rules: [\n        { token: 'comment', foreground: '608B4E' },\n        { token: 'variable.predefined', foreground: '4ec9b0' },\n        { token: 'function', foreground: 'dcdcaa' },\n        { token: 'operator.sql', foreground: '9cdcfe' },\n        { token: 'string', foreground: 'ce9178' },\n        { token: 'operator.scss', foreground: '569cd6' },\n        { token: 'variable', foreground: '4ec9b0' },\n        { token: 'variable.parameter', foreground: 'c586c0' },\n        { token: '', foreground: 'd4d4d4' },\n        { token: 'type', foreground: '569cd6' },\n        { token: 'tag', foreground: '569cd6' },\n        { token: 'annotation', foreground: '9cdcfe' },\n        { token: 'keyword', foreground: '569cd6' },\n        { token: 'number', foreground: 'd7ba7d' },\n        { token: 'annotation', foreground: 'b5cea8' },\n        { token: 'invalid', background: 'cd3131' },\n    ],\n    colors: {\n    // see: https://code.visualstudio.com/api/references/theme-color#editor-widget-colors\n    },\n});\nmonaco.editor.defineTheme(themeNames.dark2, {\n    base: 'vs-dark',\n    inherit: true,\n    rules: [],\n    colors: {\n        // see: https://code.visualstudio.com/api/references/theme-color#editor-widget-colors\n        'editor.background': '#1B1A19',\n        'editorSuggestWidget.selectedBackground': '#004E8C',\n    },\n});\n// Initialize kusto specific language features that don't currently have a natural way to extend using existing apis.\n// Most other language features are initialized in kustoMode.ts\nmonaco.editor.onDidCreateEditor(function (editor) {\n    var _a;\n    if ((_a = window.MonacoEnvironment) === null || _a === void 0 ? void 0 : _a.globalAPI) {\n        // hook up extension methods to editor.\n        extend(editor);\n    }\n    // TODO: asked if there's a cleaner way to register an editor contribution. looks like monaco has an internal contribution registrar but it's no exposed in the API.\n    // https://stackoverflow.com/questions/46700245/how-to-add-an-ieditorcontribution-to-monaco-editor\n    new KustoCommandHighlighter(editor);\n    if (isStandaloneCodeEditor(editor)) {\n        new KustoCommandFormatter(editor);\n    }\n    triggerSuggestDialogWhenCompletionItemSelected(editor);\n});\nfunction triggerSuggestDialogWhenCompletionItemSelected(editor) {\n    editor.onDidChangeCursorSelection(function (event) {\n        // checking the condition inside the event makes sure we will stay up to date when kusto configuration changes at runtime.\n        if (kustoDefaults &&\n            kustoDefaults.languageSettings &&\n            kustoDefaults.languageSettings.openSuggestionDialogAfterPreviousSuggestionAccepted) {\n            var didAcceptSuggestion = event.source === 'snippet' && event.reason === monaco.editor.CursorChangeReason.NotSet;\n            // If the word at the current position is not null - meaning we did not add a space after completion.\n            // In this case we don't want to activate the eager mode, since it will display the current selected word..\n            if (!didAcceptSuggestion || editor.getModel().getWordAtPosition(event.selection.getPosition()) !== null) {\n                return;\n            }\n            event.selection;\n            // OK so now we in a situation where we know a suggestion was selected, and we want to trigger another one.\n            // the only problem is that the suggestion widget itself listens to this same event in order to know it needs to close.\n            // The only problem is that we're ahead in line, so we're triggering a suggest operation that will be shut down once\n            // the next callback is called. This is why we're waiting here - to let all the callbacks run synchronously and be\n            // the 'last' subscriber to run. Granted this is hacky, but until monaco provides a specific event for suggestions,\n            // this is the best we have.\n            setTimeout(function () { return editor.trigger('monaco-kusto', 'editor.action.triggerSuggest', {}); }, 10);\n        }\n    });\n}\nfunction isStandaloneCodeEditor(editor) {\n    return editor.addAction !== undefined;\n}\nvar globalApi = {\n    getCslTypeNameFromClrType: getCslTypeNameFromClrType,\n    getCallName: getCallName,\n    getExpression: getExpression,\n    getInputParametersAsCslString: getInputParametersAsCslString,\n    getEntityDataTypeFromCslType: getEntityDataTypeFromCslType,\n    kustoDefaults: kustoDefaults,\n    getKustoWorker: getKustoWorker,\n    getCurrentCommandRange: getCurrentCommandRange,\n    themeNames: themeNames,\n};\nmonaco.languages.kusto = globalApi;\n"],"names":["getCurrentCommandRange","editor","cursorPosition","zeroBasedCursorLineNumber","lines","commandOrdinal","linesWithCommandOrdinal","lineNumber","isEmptyLine","currentCommandOrdinal","currentCommandLines","line","currentCommandStartLine","currentCommandEndLine","commandEndColumn","extend","proto","KustoCommandHighlighter","_this","changeEvent","d","commandRange","decorations","KustoCommandFormatter","ed","dotnetTypeToKustoType","getCslTypeNameFromClrType","clrType","kustoTypeToEntityDataType","getEntityDataTypeFromCslType","cslType","getCallName","fn","p","getExpression","getInputParametersAsCslString","inputParameters","inputParameter","getInputParameterAsCslString","attributesAsString","col","LanguageServiceDefaultsImpl","languageSettings","options","value","defaultLanguageSettings","getKustoWorker","resolve","reject","withMode","mode","callback","kustoDefaults","themeNames","_a","isStandaloneCodeEditor","triggerSuggestDialogWhenCompletionItemSelected","event","didAcceptSuggestion","globalApi"],"sourceRoot":""}