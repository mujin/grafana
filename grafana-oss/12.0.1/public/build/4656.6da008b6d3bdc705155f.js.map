{"version":3,"file":"4656.6da008b6d3bdc705155f.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/EvaluationGroupQuickPick.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useFetchGroupsForFolder.ts","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/DurationQuickPick.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/GrafanaAlertStatePicker.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/GrafanaEvaluationBehavior.tsx","webpack://grafana/./public/app/features/alerting/unified/group-details/validation.ts"],"sourcesContent":["import { last, times } from 'lodash';\n\nimport { config } from '@grafana/runtime';\nimport { Button, Stack } from '@grafana/ui';\n\nimport { formatPrometheusDuration, parsePrometheusDuration, safeParsePrometheusDuration } from '../../utils/time';\n\nconst MIN_INTERVAl = config.unifiedAlerting.minInterval ?? '10s';\nexport const getEvaluationGroupOptions = (minInterval = MIN_INTERVAl) => {\n  const MIN_OPTIONS_TO_SHOW = 8;\n  const DEFAULT_INTERVAL_OPTIONS: number[] = [\n    parsePrometheusDuration('10s'),\n    parsePrometheusDuration('30s'),\n    parsePrometheusDuration('1m'),\n    parsePrometheusDuration('5m'),\n    parsePrometheusDuration('10m'),\n    parsePrometheusDuration('15m'),\n    parsePrometheusDuration('30m'),\n    parsePrometheusDuration('1h'),\n  ];\n\n  // 10s for OSS and 1m0s for Grafana Cloud\n  const minEvaluationIntervalMillis = safeParsePrometheusDuration(minInterval);\n\n  /**\n   * 1. make sure we always show at least 8 options to the user\n   * 2. find the default interval closest to the configured minInterval\n   * 3. if we have fewer than 8 options, we basically double the last interval until we have 8 options\n   */\n  const head = DEFAULT_INTERVAL_OPTIONS.filter((millis) => minEvaluationIntervalMillis <= millis);\n\n  const tail = times(MIN_OPTIONS_TO_SHOW - head.length, (index: number) => {\n    const lastInterval = last(head) ?? minEvaluationIntervalMillis;\n    const multiplier = head.length === 0 ? 1 : 2; // if the head is empty we start with the min interval and multiply it only once :)\n    return lastInterval * multiplier * (index + 1);\n  });\n\n  return [...head, ...tail].map(formatPrometheusDuration);\n};\n\nexport const QUICK_PICK_OPTIONS = getEvaluationGroupOptions(MIN_INTERVAl);\n\ninterface Props {\n  currentInterval: string;\n  onSelect: (interval: string) => void;\n}\n\n/**\n * Allow a quick selection of group evaluation intervals, based on the configured \"unifiedAlerting.minInterval\" value\n * ie. [1m, 2m, 5m, 10m, 15m] etc.\n */\nexport const EvaluationGroupQuickPick = ({ currentInterval, onSelect }: Props) => (\n  <Stack direction=\"row\" gap={0.5} role=\"listbox\">\n    {QUICK_PICK_OPTIONS.map((interval) => {\n      const isActive = currentInterval === interval;\n\n      return (\n        <Button\n          role=\"option\"\n          aria-selected={isActive}\n          key={interval}\n          variant={isActive ? 'primary' : 'secondary'}\n          size=\"sm\"\n          onClick={() => onSelect(interval)}\n        >\n          {interval}\n        </Button>\n      );\n    })}\n  </Stack>\n);\n","import { alertRuleApi } from '../api/alertRuleApi';\nimport { GRAFANA_RULER_CONFIG } from '../api/featureDiscoveryApi';\n\n/**\n * Fetch groups for a given folder UID.\n * This hook only returns the rules that are directly in the folder. Rules in subfolders are not included.\n * @param folderUid - The UID of the folder to fetch groups for.\n */\nexport const useFetchGroupsForFolder = (folderUid: string) => {\n  return alertRuleApi.endpoints.rulerNamespace.useQuery(\n    {\n      namespace: folderUid,\n      rulerConfig: GRAFANA_RULER_CONFIG,\n    },\n    {\n      refetchOnMountOrArgChange: true,\n      skip: !folderUid,\n    }\n  );\n};\n","import { Button, Stack } from '@grafana/ui';\n\nimport { formatPrometheusDuration, safeParsePrometheusDuration } from '../../utils/time';\n\ninterface Props {\n  selectedDuration?: string;\n  groupEvaluationInterval: string;\n  onSelect: (interval: string) => void;\n}\n\nexport function getPendingPeriodQuickOptions(groupEvaluationInterval: string): string[] {\n  const groupEvaluationIntervalMillis = safeParsePrometheusDuration(groupEvaluationInterval);\n\n  // we generate the quick selection based on the group's evaluation interval\n  const options: number[] = [\n    0,\n    groupEvaluationIntervalMillis * 1,\n    groupEvaluationIntervalMillis * 2,\n    groupEvaluationIntervalMillis * 3,\n    groupEvaluationIntervalMillis * 4,\n    groupEvaluationIntervalMillis * 5,\n  ];\n\n  return options.map(formatPrometheusDuration);\n}\n\nexport function DurationQuickPick({ selectedDuration, groupEvaluationInterval, onSelect }: Props) {\n  const isQuickSelectionActive = (duration: string) => selectedDuration === duration;\n\n  const options = getPendingPeriodQuickOptions(groupEvaluationInterval);\n\n  return (\n    <Stack direction=\"row\" gap={0.5} role=\"listbox\">\n      {options.map((duration) => (\n        <Button\n          role=\"option\"\n          aria-selected={isQuickSelectionActive(duration)}\n          key={duration}\n          variant={isQuickSelectionActive(duration) ? 'primary' : 'secondary'}\n          size=\"sm\"\n          onClick={() => {\n            onSelect(duration);\n          }}\n        >\n          {duration === '0s' ? 'None' : duration}\n        </Button>\n      ))}\n    </Stack>\n  );\n}\n","import { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select, SelectBaseProps } from '@grafana/ui';\nimport { GrafanaAlertStateDecision } from 'app/types/unified-alerting-dto';\n\ntype Props = Omit<SelectBaseProps<GrafanaAlertStateDecision>, 'options'> & {\n  includeNoData: boolean;\n  includeError: boolean;\n};\n\nconst options: SelectableValue[] = [\n  { value: GrafanaAlertStateDecision.Alerting, label: 'Alerting' },\n  { value: GrafanaAlertStateDecision.NoData, label: 'No Data' },\n  { value: GrafanaAlertStateDecision.OK, label: 'Normal' },\n  { value: GrafanaAlertStateDecision.Error, label: 'Error' },\n  { value: GrafanaAlertStateDecision.KeepLast, label: 'Keep Last State' },\n];\n\nexport const GrafanaAlertStatePicker = ({ includeNoData, includeError, ...props }: Props) => {\n  const opts = useMemo(() => {\n    if (!includeNoData) {\n      return options.filter((opt) => opt.value !== GrafanaAlertStateDecision.NoData);\n    }\n    if (!includeError) {\n      return options.filter((opt) => opt.value !== GrafanaAlertStateDecision.Error);\n    }\n    return options;\n  }, [includeNoData, includeError]);\n  return <Select options={opts} {...props} />;\n};\n","import { css } from '@emotion/css';\nimport { uniqueId } from 'lodash';\nimport { useEffect, useMemo, useState } from 'react';\nimport { Controller, FormProvider, RegisterOptions, useForm, useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport {\n  Box,\n  Button,\n  Divider,\n  Field,\n  Icon,\n  Input,\n  Label,\n  Modal,\n  Select,\n  Stack,\n  Switch,\n  Text,\n  Tooltip,\n  useStyles2,\n} from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { RulerRulesConfigDTO } from 'app/types/unified-alerting-dto';\n\nimport { evaluateEveryValidationOptions } from '../../group-details/validation';\nimport { useFetchGroupsForFolder } from '../../hooks/useFetchGroupsForFolder';\nimport { DEFAULT_GROUP_EVALUATION_INTERVAL } from '../../rule-editor/formDefaults';\nimport { RuleFormValues } from '../../types/rule-form';\nimport {\n  isGrafanaAlertingRuleByType,\n  isGrafanaManagedRuleByType,\n  isGrafanaRecordingRuleByType,\n  isProvisionedRuleGroup,\n} from '../../utils/rules';\nimport { parsePrometheusDuration } from '../../utils/time';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { ProvisioningBadge } from '../Provisioning';\n\nimport { DurationQuickPick } from './DurationQuickPick';\nimport { EvaluationGroupQuickPick } from './EvaluationGroupQuickPick';\nimport { GrafanaAlertStatePicker } from './GrafanaAlertStatePicker';\nimport { NeedHelpInfo } from './NeedHelpInfo';\nimport { RuleEditorSection } from './RuleEditorSection';\n\nexport const MIN_TIME_RANGE_STEP_S = 10; // 10 seconds\nexport const MAX_GROUP_RESULTS = 1000;\n\nconst namespaceToGroupOptions = (rulerNamespace: RulerRulesConfigDTO, enableProvisionedGroups: boolean) => {\n  const folderGroups = Object.values(rulerNamespace).flat();\n\n  return folderGroups\n    .map<SelectableValue<string>>((group) => {\n      const isProvisioned = isProvisionedRuleGroup(group);\n      return {\n        label: group.name,\n        value: group.name,\n        description: group.interval ?? DEFAULT_GROUP_EVALUATION_INTERVAL,\n        // we include provisioned folders, but disable the option to select them\n        isDisabled: !enableProvisionedGroups ? isProvisioned : false,\n        isProvisioned: isProvisioned,\n      };\n    })\n\n    .sort(sortByLabel);\n};\n\nconst sortByLabel = (a: SelectableValue<string>, b: SelectableValue<string>) => {\n  return a.label?.localeCompare(b.label ?? '') || 0;\n};\n\nconst forValidationOptions = (evaluateEvery: string): RegisterOptions<{ evaluateFor: string }> => ({\n  required: {\n    value: true,\n    message: 'Required.',\n  },\n  validate: (value) => {\n    // parsePrometheusDuration does not allow 0 but does allow 0s\n    if (value === '0') {\n      return true;\n    }\n\n    try {\n      const millisFor = parsePrometheusDuration(value);\n\n      // 0 is a special value meaning for equals evaluation interval\n      if (millisFor === 0) {\n        return true;\n      }\n\n      try {\n        const millisEvery = parsePrometheusDuration(evaluateEvery);\n        return millisFor >= millisEvery\n          ? true\n          : t(\n              'alerting.rule-form.evaluation-behaviour-for.validation',\n              'Pending period must be greater than or equal to the evaluation interval.'\n            );\n      } catch (err) {\n        // if we fail to parse \"every\", assume validation is successful, or the error messages\n        // will overlap in the UI\n        return true;\n      }\n    } catch (error) {\n      return error instanceof Error\n        ? error.message\n        : t('alerting.rule-form.evaluation-behaviour-for.error-parsing', 'Failed to parse duration');\n    }\n  },\n});\n\nexport function GrafanaEvaluationBehaviorStep({\n  existing,\n  enableProvisionedGroups,\n}: {\n  existing: boolean;\n  enableProvisionedGroups: boolean;\n}) {\n  const styles = useStyles2(getStyles);\n  const [showErrorHandling, setShowErrorHandling] = useState(false);\n\n  const {\n    watch,\n    setValue,\n    getValues,\n    formState: { errors },\n    control,\n    register,\n  } = useFormContext<RuleFormValues>();\n\n  const [group, type, isPaused, folder, evaluateEvery] = watch([\n    'group',\n    'type',\n    'isPaused',\n    'folder',\n    'evaluateEvery',\n    'keepFiringFor',\n  ]);\n\n  const isGrafanaAlertingRule = isGrafanaAlertingRuleByType(type);\n  const isGrafanaRecordingRule = isGrafanaRecordingRuleByType(type);\n  const { currentData: rulerNamespace, isLoading: loadingGroups } = useFetchGroupsForFolder(folder?.uid ?? '');\n\n  const groupOptions = useMemo(() => {\n    return rulerNamespace ? namespaceToGroupOptions(rulerNamespace, enableProvisionedGroups) : [];\n  }, [enableProvisionedGroups, rulerNamespace]);\n\n  const existingGroup = Object.values(rulerNamespace ?? {})\n    .flat()\n    .find((ruleGroup) => ruleGroup.name === group);\n\n  // synchronize the evaluation interval with the group name when it's an existing group\n  useEffect(() => {\n    if (existingGroup) {\n      setValue('evaluateEvery', existingGroup.interval ?? DEFAULT_GROUP_EVALUATION_INTERVAL);\n    }\n  }, [existingGroup, setValue]);\n\n  const [isCreatingEvaluationGroup, setIsCreatingEvaluationGroup] = useState(false);\n\n  const handleEvalGroupCreation = (groupName: string, evaluationInterval: string) => {\n    setValue('group', groupName);\n    setValue('evaluateEvery', evaluationInterval);\n    setIsCreatingEvaluationGroup(false);\n  };\n\n  const defaultGroupValue = group ? { value: group, label: group } : undefined;\n\n  const pauseContentText = isGrafanaRecordingRule\n    ? t('alerting.rule-form.evaluation.pause.recording', 'Turn on to pause evaluation for this recording rule.')\n    : t('alerting.rule-form.evaluation.pause.alerting', 'Turn on to pause evaluation for this alert rule.');\n\n  const onOpenEvaluationGroupCreationModal = () => setIsCreatingEvaluationGroup(true);\n\n  const step = isGrafanaManagedRuleByType(type) ? 4 : 3;\n  const label =\n    isGrafanaManagedRuleByType(type) && !folder?.uid\n      ? t(\n          'alerting.rule-form.evaluation.select-folder-before',\n          'Select a folder before setting evaluation group and interval'\n        )\n      : t('alerting.rule-form.evaluation.evaluation-group-and-interval', 'Evaluation group and interval');\n\n  return (\n    // TODO remove \"and alert condition\" for recording rules\n    <RuleEditorSection\n      stepNo={step}\n      title={t('alerting.grafana-evaluation-behavior-step.title-set-evaluation-behavior', 'Set evaluation behavior')}\n      description={getDescription(isGrafanaRecordingRule)}\n    >\n      <Stack direction=\"column\" justify-content=\"flex-start\" align-items=\"flex-start\">\n        <Stack alignItems=\"center\">\n          <div style={{ width: 420 }}>\n            <Field\n              label={label}\n              data-testid=\"group-picker\"\n              className={styles.formInput}\n              error={errors.group?.message}\n              invalid={!!errors.group?.message}\n              htmlFor=\"group\"\n            >\n              <Controller\n                render={({ field: { ref, ...field }, fieldState }) => (\n                  <Select\n                    disabled={!folder?.uid || loadingGroups}\n                    inputId=\"group\"\n                    key={uniqueId()}\n                    {...field}\n                    onChange={(group) => {\n                      field.onChange(group.label ?? '');\n                    }}\n                    isLoading={loadingGroups}\n                    invalid={Boolean(folder?.uid) && !group && Boolean(fieldState.error)}\n                    cacheOptions\n                    loadingMessage={'Loading groups...'}\n                    defaultValue={defaultGroupValue}\n                    options={groupOptions}\n                    getOptionLabel={(option: SelectableValue<string>) => (\n                      <div>\n                        <span>{option.label}</span>\n                        {option.isProvisioned && (\n                          <>\n                            {' '}\n                            <ProvisioningBadge />\n                          </>\n                        )}\n                      </div>\n                    )}\n                    placeholder={t(\n                      'alerting.grafana-evaluation-behavior-step.placeholder-select-an-evaluation-group',\n                      'Select an evaluation group...'\n                    )}\n                  />\n                )}\n                name=\"group\"\n                control={control}\n                rules={{\n                  required: { value: true, message: 'Must enter a group name' },\n                }}\n              />\n            </Field>\n          </div>\n          <Box gap={1} display={'flex'} alignItems={'center'}>\n            <Text color=\"secondary\">\n              <Trans i18nKey=\"alerting.grafana-evaluation-behavior-step.or\">or</Trans>\n            </Text>\n            <Button\n              onClick={onOpenEvaluationGroupCreationModal}\n              type=\"button\"\n              icon=\"plus\"\n              fill=\"outline\"\n              variant=\"secondary\"\n              disabled={!folder?.uid}\n              data-testid={selectors.components.AlertRules.newEvaluationGroupButton}\n            >\n              <Trans i18nKey=\"alerting.rule-form.evaluation.new-group\">New evaluation group</Trans>\n            </Button>\n          </Box>\n          {isCreatingEvaluationGroup && (\n            <EvaluationGroupCreationModal\n              onCreate={handleEvalGroupCreation}\n              onClose={() => setIsCreatingEvaluationGroup(false)}\n              groupfoldersForGrafana={rulerNamespace}\n            />\n          )}\n        </Stack>\n\n        {folder?.title && group && (\n          <div className={styles.evaluationContainer}>\n            <Stack direction=\"column\" gap={0}>\n              <div className={styles.marginTop}>\n                <Stack direction=\"column\" gap={1}>\n                  {getValues('group') && getValues('evaluateEvery') && (\n                    <Trans i18nKey=\"alerting.rule-form.evaluation.group-text\" values={{ evaluateEvery }}>\n                      All rules in the selected group are evaluated every {{ evaluateEvery }}.\n                    </Trans>\n                  )}\n                </Stack>\n              </div>\n            </Stack>\n          </div>\n        )}\n        {/* Show the pending period input only for Grafana alerting rules */}\n        {isGrafanaAlertingRule && <ForInput evaluateEvery={evaluateEvery} />}\n        <Divider />\n        {/*Show the keepFiringFor input only for Grafana alerting rules*/}\n        {isGrafanaAlertingRule && <KeepFiringFor evaluateEvery={evaluateEvery} />}\n\n        {existing && (\n          <Field htmlFor=\"pause-alert-switch\">\n            <Controller\n              render={() => (\n                <Stack gap={1} direction=\"row\" alignItems=\"center\">\n                  <Switch\n                    id=\"pause-alert\"\n                    onChange={(value) => {\n                      setValue('isPaused', value.currentTarget.checked);\n                    }}\n                    value={Boolean(isPaused)}\n                  />\n                  <label htmlFor=\"pause-alert\" className={styles.switchLabel}>\n                    <Trans i18nKey=\"alerting.rule-form.pause.label\">Pause evaluation</Trans>\n                    <Tooltip placement=\"top\" content={pauseContentText} theme={'info'}>\n                      <Icon tabIndex={0} name=\"info-circle\" size=\"sm\" className={styles.infoIcon} />\n                    </Tooltip>\n                  </label>\n                </Stack>\n              )}\n              name=\"isPaused\"\n            />\n          </Field>\n        )}\n      </Stack>\n      {isGrafanaAlertingRule && (\n        <>\n          <CollapseToggle\n            isCollapsed={!showErrorHandling}\n            onToggle={(collapsed) => setShowErrorHandling(!collapsed)}\n            text={t(\n              'alerting.grafana-evaluation-behavior-step.text-configure-no-data-and-error-handling',\n              'Configure no data and error handling'\n            )}\n          />\n          {showErrorHandling && (\n            <>\n              <NeedHelpInfoForConfigureNoDataError />\n              <Field\n                htmlFor=\"no-data-state-input\"\n                label={t('alerting.alert.state-no-data', 'Alert state if no data or all values are null')}\n              >\n                <Controller\n                  render={({ field: { onChange, ref, ...field } }) => (\n                    <GrafanaAlertStatePicker\n                      {...field}\n                      inputId=\"no-data-state-input\"\n                      width={42}\n                      includeNoData={true}\n                      includeError={false}\n                      onChange={(value) => onChange(value?.value)}\n                    />\n                  )}\n                  name=\"noDataState\"\n                />\n              </Field>\n              <Field\n                htmlFor=\"exec-err-state-input\"\n                label={t('alerting.alert.state-error-timeout', 'Alert state if execution error or timeout')}\n              >\n                <Controller\n                  render={({ field: { onChange, ref, ...field } }) => (\n                    <GrafanaAlertStatePicker\n                      {...field}\n                      inputId=\"exec-err-state-input\"\n                      width={42}\n                      includeNoData={false}\n                      includeError={true}\n                      onChange={(value) => onChange(value?.value)}\n                    />\n                  )}\n                  name=\"execErrState\"\n                />\n              </Field>\n              <Field\n                label={t('alerting.alert.missing-series-resolve', 'Missing series evaluations to resolve')}\n                description={t(\n                  'alerting.alert.description-missing-series-evaluations',\n                  'How many consecutive evaluation intervals with no data for a dimension must pass before the alert state is considered stale and automatically resolved. If no value is provided, the value will default to 2.'\n                )}\n                invalid={!!errors.missingSeriesEvalsToResolve?.message}\n                error={errors.missingSeriesEvalsToResolve?.message}\n                className={styles.inlineField}\n                htmlFor=\"missing-series-resolve\"\n              >\n                <Input\n                  placeholder={t(\n                    'alerting.grafana-evaluation-behavior-step.missing-series-resolve-placeholder',\n                    'Default: 2'\n                  )}\n                  id=\"missing-series-resolve\"\n                  {...register('missingSeriesEvalsToResolve', {\n                    pattern: { value: /^\\d+$/, message: 'Must be a positive integer.' },\n                  })}\n                  width={21}\n                />\n              </Field>\n            </>\n          )}\n        </>\n      )}\n    </RuleEditorSection>\n  );\n}\n\nfunction EvaluationGroupCreationModal({\n  onClose,\n  onCreate,\n  groupfoldersForGrafana,\n}: {\n  onClose: () => void;\n  onCreate: (group: string, evaluationInterval: string) => void;\n  groupfoldersForGrafana?: RulerRulesConfigDTO | null;\n}): React.ReactElement {\n  const styles = useStyles2(getStyles);\n  const { watch } = useFormContext<RuleFormValues>();\n\n  const evaluateEveryId = 'eval-every-input';\n  const evaluationGroupNameId = 'new-eval-group-name';\n  const [groupName, folderName, type] = watch(['group', 'folder.title', 'type']);\n  const isGrafanaRecordingRule = type ? isGrafanaRecordingRuleByType(type) : false;\n\n  const formAPI = useForm({\n    defaultValues: { group: '', evaluateEvery: DEFAULT_GROUP_EVALUATION_INTERVAL },\n    mode: 'onChange',\n    shouldFocusError: true,\n  });\n\n  const { register, handleSubmit, formState, setValue, getValues, watch: watchGroupFormValues } = formAPI;\n  const evaluationInterval = watchGroupFormValues('evaluateEvery');\n\n  const groupRules =\n    (groupfoldersForGrafana && groupfoldersForGrafana[folderName]?.find((g) => g.name === groupName)?.rules) ?? [];\n\n  const onSubmit = () => {\n    onCreate(getValues('group'), getValues('evaluateEvery'));\n  };\n\n  const onCancel = () => {\n    onClose();\n  };\n\n  const setEvaluationInterval = (interval: string) => {\n    setValue('evaluateEvery', interval, { shouldValidate: true });\n  };\n\n  const modalTitle = isGrafanaRecordingRule\n    ? t(\n        'alerting.folderAndGroup.evaluation.modal.text.recording',\n        'Create a new evaluation group to use for this recording rule.'\n      )\n    : t(\n        'alerting.folderAndGroup.evaluation.modal.text.alerting',\n        'Create a new evaluation group to use for this alert rule.'\n      );\n\n  return (\n    <Modal\n      className={styles.modal}\n      isOpen={true}\n      title={t('alerting.evaluation-group-creation-modal.title-new-evaluation-group', 'New evaluation group')}\n      onDismiss={onCancel}\n      onClickBackdrop={onCancel}\n    >\n      <div className={styles.modalTitle}>{modalTitle}</div>\n\n      <FormProvider {...formAPI}>\n        <form onSubmit={handleSubmit(() => onSubmit())}>\n          <Field\n            label={\n              <Label\n                htmlFor={evaluationGroupNameId}\n                description=\"A group evaluates all its rules over the same evaluation interval.\"\n              >\n                <Trans i18nKey=\"alerting.rule-form.evaluation.group-name\">Evaluation group name</Trans>\n              </Label>\n            }\n            error={formState.errors.group?.message}\n            invalid={Boolean(formState.errors.group)}\n          >\n            <Input\n              data-testid={selectors.components.AlertRules.newEvaluationGroupName}\n              className={styles.formInput}\n              autoFocus={true}\n              id={evaluationGroupNameId}\n              placeholder={t('alerting.evaluation-group-creation-modal.placeholder-enter-a-name', 'Enter a name')}\n              {...register('group', { required: { value: true, message: 'Required.' } })}\n            />\n          </Field>\n\n          <Field\n            error={formState.errors.evaluateEvery?.message}\n            label={\n              <Label\n                htmlFor={evaluateEveryId}\n                description={t(\n                  'alerting.evaluation-group-creation-modal.description-often-rules-group-evaluated',\n                  'How often all rules in the group are evaluated.'\n                )}\n              >\n                <Trans i18nKey=\"alerting.rule-form.evaluation.group.interval\">Evaluation interval</Trans>\n              </Label>\n            }\n            invalid={Boolean(formState.errors.evaluateEvery)}\n          >\n            <Input\n              data-testid={selectors.components.AlertRules.newEvaluationGroupInterval}\n              className={styles.formInput}\n              id={evaluateEveryId}\n              placeholder={DEFAULT_GROUP_EVALUATION_INTERVAL}\n              {...register(\n                'evaluateEvery',\n                evaluateEveryValidationOptions<{ group: string; evaluateEvery: string }>(groupRules)\n              )}\n            />\n          </Field>\n\n          <EvaluationGroupQuickPick currentInterval={evaluationInterval} onSelect={setEvaluationInterval} />\n\n          <Modal.ButtonRow>\n            <Button variant=\"secondary\" type=\"button\" onClick={onCancel}>\n              <Trans i18nKey=\"alerting.rule-form.evaluation.group.cancel\">Cancel</Trans>\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={!formState.isValid}\n              data-testid={selectors.components.AlertRules.newEvaluationGroupCreate}\n            >\n              <Trans i18nKey=\"alerting.rule-form.evaluation.group.create\">Create</Trans>\n            </Button>\n          </Modal.ButtonRow>\n        </form>\n      </FormProvider>\n    </Modal>\n  );\n}\n\nexport function ForInput({ evaluateEvery }: { evaluateEvery: string }) {\n  const styles = useStyles2(getStyles);\n  const {\n    register,\n    formState: { errors },\n    setValue,\n    watch,\n  } = useFormContext<RuleFormValues>();\n\n  const evaluateForId = 'eval-for-input';\n  const currentPendingPeriod = watch('evaluateFor');\n\n  const setPendingPeriod = (pendingPeriod: string) => {\n    setValue('evaluateFor', pendingPeriod);\n  };\n\n  return (\n    <Stack direction=\"column\" justify-content=\"flex-start\" align-items=\"flex-start\">\n      <Field\n        label={\n          <Label\n            htmlFor={evaluateForId}\n            description='Period during which the threshold condition must be met to trigger an alert. Selecting \"None\" triggers the alert immediately once the condition is met.'\n          >\n            <Trans i18nKey=\"alerting.rule-form.evaluation-behaviour.pending-period\">Pending period</Trans>\n          </Label>\n        }\n        className={styles.inlineField}\n        error={errors.evaluateFor?.message}\n        invalid={Boolean(errors.evaluateFor?.message) ? true : undefined}\n        validationMessageHorizontalOverflow={true}\n      >\n        <Input id={evaluateForId} width={8} {...register('evaluateFor', forValidationOptions(evaluateEvery))} />\n      </Field>\n      <DurationQuickPick\n        selectedDuration={currentPendingPeriod}\n        groupEvaluationInterval={evaluateEvery}\n        onSelect={setPendingPeriod}\n      />\n    </Stack>\n  );\n}\n\nfunction KeepFiringFor({ evaluateEvery }: { evaluateEvery: string }) {\n  const styles = useStyles2(getStyles);\n  const {\n    register,\n    formState: { errors },\n    setValue,\n    watch,\n  } = useFormContext<RuleFormValues>();\n\n  const currentKeepFiringFor = watch('keepFiringFor');\n  const keepFiringForId = 'keep-firing-for-input';\n\n  const setKeepFiringFor = (keepFiringFor: string) => {\n    setValue('keepFiringFor', keepFiringFor);\n  };\n\n  return (\n    <Stack direction=\"column\" justify-content=\"flex-start\" align-items=\"flex-start\">\n      <Field\n        label={\n          <Label\n            htmlFor={keepFiringForId}\n            description={t(\n              'alerting.rule-form.evaluation-behaviour.keep-firing-for.label-description',\n              'Period during which the alert will continue to show up as firing even though the threshold condition is no longer breached. Selecting \"None\" means the alert will be back to normal immediately.'\n            )}\n          >\n            <Trans i18nKey=\"alerting.rule-form.evaluation-behaviour.keep-firing-for.label-text\">Keep firing for</Trans>\n          </Label>\n        }\n        className={styles.inlineField}\n        error={errors.keepFiringFor?.message}\n        invalid={Boolean(errors.keepFiringFor?.message) ? true : undefined}\n        validationMessageHorizontalOverflow={true}\n      >\n        <Input id={keepFiringForId} width={8} {...register('keepFiringFor')} />\n      </Field>\n      <DurationQuickPick\n        selectedDuration={currentKeepFiringFor}\n        groupEvaluationInterval={evaluateEvery}\n        onSelect={setKeepFiringFor}\n      />\n    </Stack>\n  );\n}\n\nfunction NeedHelpInfoForConfigureNoDataError() {\n  const docsLink =\n    'https://grafana.com/docs/grafana/latest/alerting/alerting-rules/create-grafana-managed-rule/#configure-no-data-and-error-handling';\n\n  return (\n    <Stack direction=\"row\" gap={0.5} alignItems=\"center\">\n      <Text variant=\"bodySmall\" color=\"secondary\">\n        <Trans i18nKey=\"alerting.rule-form.evaluation-behaviour.info-help.text\">\n          Define the alert behavior when the evaluation fails or the query returns no data.\n        </Trans>\n      </Text>\n      <NeedHelpInfo\n        contentText={t(\n          'alerting.rule-form.evaluation-behaviour.info-help.content',\n          'These settings can help mitigate temporary data source issues, preventing alerts from unintentionally firing due to lack of data, errors, or timeouts.'\n        )}\n        externalLink={docsLink}\n        linkText={t('alerting.rule-form.evaluation-behaviour.info-help.link-text', `Read more about this option`)}\n        title={t(\n          'alerting.rule-form.evaluation-behaviour.info-help.link-title',\n          'Configure no data and error handling'\n        )}\n      />\n    </Stack>\n  );\n}\n\nfunction getDescription(isGrafanaRecordingRule: boolean) {\n  const docsLink = 'https://grafana.com/docs/grafana/latest/alerting/fundamentals/alert-rules/rule-evaluation/';\n\n  return (\n    <Stack direction=\"row\" gap={0.5} alignItems=\"center\">\n      <Text variant=\"bodySmall\" color=\"secondary\">\n        {isGrafanaRecordingRule ? (\n          <Trans i18nKey=\"alerting.alert-recording-rule-form.evaluation-behaviour.description.text\">\n            Define how the recording rule is evaluated.\n          </Trans>\n        ) : (\n          <Trans i18nKey=\"alerting.rule-form.evaluation-behaviour.description.text\">\n            Define how the alert rule is evaluated.\n          </Trans>\n        )}\n      </Text>\n      <NeedHelpInfo\n        contentText={\n          <>\n            <p>\n              <Trans i18nKey=\"alerting.rule-form.evaluation-behaviour-description1\">\n                Evaluation groups are containers for evaluating alert and recording rules.\n              </Trans>\n            </p>\n            <p>\n              <Trans i18nKey=\"alerting.rule-form.evaluation-behaviour-description2\">\n                An evaluation group defines an evaluation interval - how often a rule is evaluated. Alert rules within\n                the same evaluation group are evaluated over the same evaluation interval.\n              </Trans>\n            </p>\n            <p>\n              <Trans i18nKey=\"alerting.rule-form.evaluation-behaviour-description3\">\n                Pending period specifies how long the threshold condition must be met before the alert starts firing.\n                This option helps prevent alerts from being triggered by temporary issues.\n              </Trans>\n            </p>\n          </>\n        }\n        externalLink={docsLink}\n        linkText={t(\n          'alerting.rule-form.evaluation-behaviour.info-help2.link-text',\n          `Read about evaluation and alert states`\n        )}\n        title={t('alerting.rule-form.evaluation-behaviour.info-help2.link-title', 'Alert rule evaluation')}\n      />\n    </Stack>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  inlineField: css({\n    marginBottom: 0,\n  }),\n  evaluationContainer: css({\n    color: theme.colors.text.secondary,\n    maxWidth: `${theme.breakpoints.values.sm}px`,\n    fontSize: theme.typography.size.sm,\n  }),\n  infoIcon: css({\n    marginLeft: '10px',\n  }),\n  marginTop: css({\n    marginTop: theme.spacing(1),\n  }),\n  switchLabel: css({\n    color: theme.colors.text.primary,\n    cursor: 'pointer',\n    fontSize: theme.typography.bodySmall.fontSize,\n  }),\n  formInput: css({\n    flexGrow: 1,\n  }),\n  modal: css({\n    width: `${theme.breakpoints.values.sm}px`,\n  }),\n  modalTitle: css({\n    color: theme.colors.text.secondary,\n    marginBottom: theme.spacing(2),\n  }),\n});\n","import { FieldValues, RegisterOptions } from 'react-hook-form';\n\nimport { RulerRuleDTO } from 'app/types/unified-alerting-dto';\n\nimport { MIN_TIME_RANGE_STEP_S } from '../components/rule-editor/GrafanaEvaluationBehavior';\nimport { rulesInSameGroupHaveInvalidFor } from '../state/actions';\nimport { getAlertInfo } from '../utils/rules';\nimport { formatPrometheusDuration, parsePrometheusDuration, safeParsePrometheusDuration } from '../utils/time';\n\nexport const evaluateEveryValidationOptions = <T extends FieldValues>(rules: RulerRuleDTO[]): RegisterOptions<T> => ({\n  required: {\n    value: true,\n    message: 'Required.',\n  },\n  validate: (evaluateEvery: string) => {\n    try {\n      const duration = parsePrometheusDuration(evaluateEvery);\n\n      if (duration < MIN_TIME_RANGE_STEP_S * 1000) {\n        return `Cannot be less than ${MIN_TIME_RANGE_STEP_S} seconds.`;\n      }\n\n      if (duration % (MIN_TIME_RANGE_STEP_S * 1000) !== 0) {\n        return `Must be a multiple of ${MIN_TIME_RANGE_STEP_S} seconds.`;\n      }\n      if (rulesInSameGroupHaveInvalidFor(rules, evaluateEvery).length === 0) {\n        return true;\n      } else {\n        const rulePendingPeriods = rules.map((rule) => {\n          const { forDuration } = getAlertInfo(rule, evaluateEvery);\n          return forDuration ? safeParsePrometheusDuration(forDuration) : null;\n        });\n        // 0 is a special case which disables the pending period at all\n        const smallestPendingPeriod = Math.min(\n          ...rulePendingPeriods.filter((period): period is number => period !== null && period !== 0)\n        );\n        return `Evaluation interval should be smaller or equal to \"pending period\" values for existing rules in this rule group. Choose a value smaller than or equal to \"${formatPrometheusDuration(smallestPendingPeriod)}\".`;\n      }\n    } catch (error) {\n      return error instanceof Error ? error.message : 'Failed to parse duration';\n    }\n  },\n});\n"],"names":["MIN_INTERVAl","QUICK_PICK_OPTIONS","minInterval","DEFAULT_INTERVAL_OPTIONS","minEvaluationIntervalMillis","head","millis","tail","index","lastInterval","multiplier","EvaluationGroupQuickPick","currentInterval","onSelect","interval","isActive","useFetchGroupsForFolder","folderUid","alertRuleApi","getPendingPeriodQuickOptions","groupEvaluationInterval","groupEvaluationIntervalMillis","DurationQuickPick","selectedDuration","isQuickSelectionActive","duration","options","Stack","Button","GrafanaAlertStatePicker","includeNoData","includeError","props","opts","opt","Select","MIN_TIME_RANGE_STEP_S","MAX_GROUP_RESULTS","namespaceToGroupOptions","rulerNamespace","enableProvisionedGroups","group","isProvisioned","sortByLabel","a","b","forValidationOptions","evaluateEvery","value","millisFor","millisEvery","error","GrafanaEvaluationBehaviorStep","existing","styles","getStyles","showErrorHandling","setShowErrorHandling","watch","setValue","getValues","errors","control","register","type","isPaused","folder","isGrafanaAlertingRule","isGrafanaRecordingRule","loadingGroups","groupOptions","existingGroup","ruleGroup","isCreatingEvaluationGroup","setIsCreatingEvaluationGroup","handleEvalGroupCreation","groupName","evaluationInterval","defaultGroupValue","pauseContentText","onOpenEvaluationGroupCreationModal","step","label","RuleEditorSection","getDescription","Field","ref","field","fieldState","option","Provisioning","Box","Text","selectors","EvaluationGroupCreationModal","ForInput","Divider","KeepFiringFor","Switch","Tooltip","Icon","CollapseToggle","collapsed","NeedHelpInfoForConfigureNoDataError","onChange","Input","onClose","onCreate","groupfoldersForGrafana","evaluateEveryId","evaluationGroupNameId","folderName","formAPI","handleSubmit","formState","watchGroupFormValues","groupRules","g","onSubmit","onCancel","setEvaluationInterval","modalTitle","Modal","Label","evaluateForId","currentPendingPeriod","setPendingPeriod","pendingPeriod","currentKeepFiringFor","keepFiringForId","setKeepFiringFor","keepFiringFor","NeedHelpInfo","theme","evaluateEveryValidationOptions","rules","rulePendingPeriods","rule","forDuration","smallestPendingPeriod","period"],"sourceRoot":""}