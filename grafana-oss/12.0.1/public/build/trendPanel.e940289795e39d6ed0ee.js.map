{"version":3,"file":"trendPanel.e940289795e39d6ed0ee.js","mappings":"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","sources":["webpack://grafana/./packages/grafana-ui/src/components/VizTooltip/VizTooltipWrapper.tsx","webpack://grafana/./public/app/plugins/panel/timeseries/utils.ts","webpack://grafana/./public/app/plugins/panel/trend/TrendPanel.tsx","webpack://grafana/./public/app/plugins/panel/trend/suggestions.ts","webpack://grafana/./public/app/plugins/panel/trend/module.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { HTMLAttributes } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { useStyles2 } from '../../themes';\n\nexport interface Props extends HTMLAttributes<HTMLDivElement> {\n  children?: React.ReactNode;\n}\n\nexport const VizTooltipWrapper = ({ children, className }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  return <div className={cx(styles.wrapper, className)}>{children}</div>;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    display: 'flex',\n    flexDirection: 'column',\n    fontSize: theme.typography.bodySmall.fontSize,\n  }),\n});\n","import {\n  DataFrame,\n  Field,\n  FieldType,\n  getDisplayProcessor,\n  GrafanaTheme2,\n  isBooleanUnit,\n  TimeRange,\n  cacheFieldDisplayNames,\n  applyNullInsertThreshold,\n  nullToValue,\n} from '@grafana/data';\nimport { convertFieldType } from '@grafana/data/internal';\nimport { GraphFieldConfig, LineInterpolation, TooltipDisplayMode, VizTooltipOptions } from '@grafana/schema';\nimport { buildScaleKey } from '@grafana/ui/internal';\n\nimport { HeatmapTooltip } from '../heatmap/panelcfg.gen';\n\ntype ScaleKey = string;\n\n// this will re-enumerate all enum fields on the same scale to create one ordinal progression\n// e.g. ['a','b'][0,1,0] + ['c','d'][1,0,1] -> ['a','b'][0,1,0] + ['c','d'][3,2,3]\nfunction reEnumFields(frames: DataFrame[]): DataFrame[] {\n  let allTextsByKey: Map<ScaleKey, string[]> = new Map();\n\n  let frames2: DataFrame[] = frames.map((frame) => {\n    return {\n      ...frame,\n      fields: frame.fields.map((field) => {\n        if (field.type === FieldType.enum) {\n          let scaleKey = buildScaleKey(field.config, field.type);\n          let allTexts = allTextsByKey.get(scaleKey);\n\n          if (!allTexts) {\n            allTexts = [];\n            allTextsByKey.set(scaleKey, allTexts);\n          }\n\n          let idxs: number[] = field.values.toArray().slice();\n          let txts = field.config.type!.enum!.text!;\n\n          // by-reference incrementing\n          if (allTexts.length > 0) {\n            for (let i = 0; i < idxs.length; i++) {\n              idxs[i] += allTexts.length;\n            }\n          }\n\n          allTexts.push(...txts);\n\n          // shared among all enum fields on same scale\n          field.config.type!.enum!.text! = allTexts;\n\n          return {\n            ...field,\n            values: idxs,\n          };\n\n          // TODO: update displayProcessor?\n        }\n\n        return field;\n      }),\n    };\n  });\n\n  return frames2;\n}\n\n/**\n * Returns null if there are no graphable fields\n */\nexport function prepareGraphableFields(\n  series: DataFrame[],\n  theme: GrafanaTheme2,\n  timeRange?: TimeRange,\n  // numeric X requires a single frame where the first field is numeric\n  xNumFieldIdx?: number\n): DataFrame[] | null {\n  if (!series?.length) {\n    return null;\n  }\n\n  cacheFieldDisplayNames(series);\n\n  let useNumericX = xNumFieldIdx != null;\n\n  // Make sure the numeric x field is first in the frame\n  if (xNumFieldIdx != null && xNumFieldIdx > 0) {\n    series = [\n      {\n        ...series[0],\n        fields: [series[0].fields[xNumFieldIdx], ...series[0].fields.filter((f, i) => i !== xNumFieldIdx)],\n      },\n    ];\n  }\n\n  // some datasources simply tag the field as time, but don't convert to milli epochs\n  // so we're stuck with doing the parsing here to avoid Moment slowness everywhere later\n  // this mutates (once)\n  for (let frame of series) {\n    for (let field of frame.fields) {\n      if (field.type === FieldType.time && typeof field.values[0] !== 'number') {\n        field.values = convertFieldType(field, { destinationType: FieldType.time }).values;\n      }\n    }\n  }\n\n  let enumFieldsCount = 0;\n\n  loopy: for (let frame of series) {\n    for (let field of frame.fields) {\n      if (field.type === FieldType.enum && ++enumFieldsCount > 1) {\n        series = reEnumFields(series);\n        break loopy;\n      }\n    }\n  }\n\n  let copy: Field;\n\n  const frames: DataFrame[] = [];\n\n  for (let frame of series) {\n    const fields: Field[] = [];\n\n    let hasTimeField = false;\n    let hasValueField = false;\n\n    let nulledFrame = useNumericX\n      ? frame\n      : applyNullInsertThreshold({\n          frame,\n          refFieldPseudoMin: timeRange?.from.valueOf(),\n          refFieldPseudoMax: timeRange?.to.valueOf(),\n        });\n\n    const frameFields = nullToValue(nulledFrame).fields;\n\n    for (let fieldIdx = 0; fieldIdx < (frameFields?.length || 0); fieldIdx++) {\n      const field = frameFields[fieldIdx];\n\n      switch (field.type) {\n        case FieldType.time:\n          hasTimeField = true;\n          fields.push(field);\n          break;\n        case FieldType.number:\n          hasValueField = useNumericX ? fieldIdx > 0 : true;\n          copy = {\n            ...field,\n            values: field.values.map((v) => {\n              if (!(Number.isFinite(v) || v == null)) {\n                return null;\n              }\n              return v;\n            }),\n          };\n\n          fields.push(copy);\n          break; // ok\n        case FieldType.enum:\n          hasValueField = true;\n        case FieldType.string:\n          copy = {\n            ...field,\n            values: field.values,\n          };\n\n          fields.push(copy);\n          break; // ok\n        case FieldType.boolean:\n          hasValueField = true;\n          const custom: GraphFieldConfig = field.config?.custom ?? {};\n          const config = {\n            ...field.config,\n            max: 1,\n            min: 0,\n            custom,\n          };\n\n          // smooth and linear do not make sense\n          if (custom.lineInterpolation !== LineInterpolation.StepBefore) {\n            custom.lineInterpolation = LineInterpolation.StepAfter;\n          }\n\n          copy = {\n            ...field,\n            config,\n            type: FieldType.number,\n            values: field.values.map((v) => {\n              if (v == null) {\n                return v;\n              }\n              return Boolean(v) ? 1 : 0;\n            }),\n          };\n\n          if (!isBooleanUnit(config.unit)) {\n            config.unit = 'bool';\n            copy.display = getDisplayProcessor({ field: copy, theme });\n          }\n\n          fields.push(copy);\n          break;\n      }\n    }\n\n    if ((useNumericX || hasTimeField) && hasValueField) {\n      frames.push({\n        ...frame,\n        length: nulledFrame.length,\n        fields,\n      });\n    }\n  }\n\n  if (frames.length) {\n    setClassicPaletteIdxs(frames, theme, 0);\n    matchEnumColorToSeriesColor(frames, theme);\n    return frames;\n  }\n\n  return null;\n}\n\nconst matchEnumColorToSeriesColor = (frames: DataFrame[], theme: GrafanaTheme2) => {\n  const { palette } = theme.visualization;\n  for (const frame of frames) {\n    for (const field of frame.fields) {\n      if (field.type === FieldType.enum) {\n        const namedColor = palette[field.state?.seriesIndex! % palette.length];\n        const hexColor = theme.visualization.getColorByName(namedColor);\n        const enumConfig = field.config.type!.enum!;\n\n        enumConfig.color = Array(enumConfig.text!.length).fill(hexColor);\n        field.display = getDisplayProcessor({ field, theme });\n      }\n    }\n  }\n};\n\nexport const setClassicPaletteIdxs = (frames: DataFrame[], theme: GrafanaTheme2, skipFieldIdx?: number) => {\n  let seriesIndex = 0;\n  frames.forEach((frame) => {\n    frame.fields.forEach((field, fieldIdx) => {\n      if (\n        fieldIdx !== skipFieldIdx &&\n        (field.type === FieldType.number || field.type === FieldType.boolean || field.type === FieldType.enum)\n      ) {\n        field.state = {\n          ...field.state,\n          seriesIndex: seriesIndex++, // TODO: skip this for fields with custom renderers (e.g. Candlestick)?\n        };\n        field.display = getDisplayProcessor({ field, theme });\n      }\n    });\n  });\n};\n\nexport function getTimezones(timezones: string[] | undefined, defaultTimezone: string): string[] {\n  if (!timezones || !timezones.length) {\n    return [defaultTimezone];\n  }\n  return timezones.map((v) => (v?.length ? v : defaultTimezone));\n}\n\nexport const isTooltipScrollable = (tooltipOptions: VizTooltipOptions | HeatmapTooltip) => {\n  return tooltipOptions.mode === TooltipDisplayMode.Multi && tooltipOptions.maxHeight != null;\n};\n","import { useMemo } from 'react';\n\nimport {\n  isLikelyAscendingVector,\n  DataFrame,\n  FieldMatcherID,\n  fieldMatchers,\n  FieldType,\n  PanelProps,\n  TimeRange,\n} from '@grafana/data';\nimport { config, PanelDataErrorView } from '@grafana/runtime';\nimport { KeyboardPlugin, TooltipDisplayMode, usePanelContext, TooltipPlugin2 } from '@grafana/ui';\nimport { TooltipHoverMode } from '@grafana/ui/internal';\nimport { XYFieldMatchers } from 'app/core/components/GraphNG/types';\nimport { preparePlotFrame } from 'app/core/components/GraphNG/utils';\nimport { TimeSeries } from 'app/core/components/TimeSeries/TimeSeries';\nimport { findFieldIndex } from 'app/features/dimensions';\n\nimport { TimeSeriesTooltip } from '../timeseries/TimeSeriesTooltip';\nimport { prepareGraphableFields } from '../timeseries/utils';\n\nimport { Options } from './panelcfg.gen';\n\nexport const TrendPanel = ({\n  data,\n  timeRange,\n  timeZone,\n  width,\n  height,\n  options,\n  fieldConfig,\n  replaceVariables,\n  id,\n}: PanelProps<Options>) => {\n  const { dataLinkPostProcessor } = usePanelContext();\n  // Need to fallback to first number field if no xField is set in options otherwise panel crashes 😬\n  const trendXFieldName =\n    options.xField ?? data.series[0]?.fields.find((field) => field.type === FieldType.number)?.name;\n  const preparePlotFrameTimeless = (frames: DataFrame[], dimFields: XYFieldMatchers, timeRange?: TimeRange | null) => {\n    dimFields = {\n      ...dimFields,\n      x: fieldMatchers.get(FieldMatcherID.byName).get(trendXFieldName),\n    };\n\n    return preparePlotFrame(frames, dimFields);\n  };\n\n  const info = useMemo(() => {\n    if (data.series.length > 1) {\n      return {\n        warning: 'Only one frame is supported, consider adding a join transformation',\n        frames: data.series,\n      };\n    }\n\n    let frames = data.series;\n    let xFieldIdx: number | undefined;\n    if (options.xField) {\n      xFieldIdx = findFieldIndex(options.xField, frames[0]);\n      if (xFieldIdx == null) {\n        return {\n          warning: 'Unable to find field: ' + options.xField,\n          frames: data.series,\n        };\n      }\n    } else {\n      // first number field\n      // Perhaps we can/should support any ordinal rather than an error here\n      xFieldIdx = frames[0] ? frames[0].fields.findIndex((f) => f.type === FieldType.number) : -1;\n      if (xFieldIdx === -1) {\n        return {\n          warning: 'No numeric fields found for X axis',\n          frames,\n        };\n      }\n    }\n\n    // Make sure values are ascending\n    if (xFieldIdx != null) {\n      const field = frames[0].fields[xFieldIdx];\n      if (field.type === FieldType.number && !isLikelyAscendingVector(field.values)) {\n        return {\n          warning: `Values must be in ascending order`,\n          frames,\n        };\n      }\n    }\n\n    return { frames: prepareGraphableFields(frames, config.theme2, undefined, xFieldIdx) };\n  }, [data.series, options.xField]);\n\n  if (info.warning || !info.frames) {\n    return (\n      <PanelDataErrorView\n        panelId={id}\n        fieldConfig={fieldConfig}\n        data={data}\n        message={info.warning}\n        needsNumberField={true}\n      />\n    );\n  }\n\n  return (\n    <TimeSeries // Name change!\n      frames={info.frames}\n      structureRev={data.structureRev}\n      timeRange={timeRange}\n      timeZone={timeZone}\n      width={width}\n      height={height}\n      legend={options.legend}\n      options={options}\n      preparePlotFrame={preparePlotFrameTimeless}\n      replaceVariables={replaceVariables}\n      dataLinkPostProcessor={dataLinkPostProcessor}\n    >\n      {(uPlotConfig, alignedDataFrame) => {\n        return (\n          <>\n            <KeyboardPlugin config={uPlotConfig} />\n            {options.tooltip.mode !== TooltipDisplayMode.None && (\n              <TooltipPlugin2\n                config={uPlotConfig}\n                hoverMode={\n                  options.tooltip.mode === TooltipDisplayMode.Single ? TooltipHoverMode.xOne : TooltipHoverMode.xAll\n                }\n                getDataLinks={(seriesIdx, dataIdx) =>\n                  alignedDataFrame.fields[seriesIdx].getLinks?.({ valueRowIndex: dataIdx }) ?? []\n                }\n                render={(u, dataIdxs, seriesIdx, isPinned = false, dismiss, timeRange, viaSync, dataLinks) => {\n                  return (\n                    <TimeSeriesTooltip\n                      series={alignedDataFrame}\n                      dataIdxs={dataIdxs}\n                      seriesIdx={seriesIdx}\n                      mode={options.tooltip.mode}\n                      sortOrder={options.tooltip.sort}\n                      isPinned={isPinned}\n                      maxHeight={options.tooltip.maxHeight}\n                      replaceVariables={replaceVariables}\n                      dataLinks={dataLinks}\n                      hideZeros={options.tooltip.hideZeros}\n                    />\n                  );\n                }}\n                maxWidth={options.tooltip.maxWidth}\n              />\n            )}\n          </>\n        );\n      }}\n    </TimeSeries>\n  );\n};\n","import { VisualizationSuggestionsBuilder } from '@grafana/data';\nimport { GraphDrawStyle, GraphFieldConfig, LegendDisplayMode } from '@grafana/schema';\nimport { SuggestionName } from 'app/types/suggestions';\n\nimport { Options } from './panelcfg.gen';\n\nexport class TrendSuggestionsSupplier {\n  getSuggestionsForData(builder: VisualizationSuggestionsBuilder) {\n    const { dataSummary } = builder;\n\n    if (dataSummary.numberFieldCount < 2 || dataSummary.rowCountTotal < 2 || dataSummary.rowCountTotal < 2) {\n      return;\n    }\n\n    // Super basic\n    const list = builder.getListAppender<Options, GraphFieldConfig>({\n      name: SuggestionName.LineChart,\n      pluginId: 'trend',\n      options: {\n        legend: {\n          calcs: [],\n          displayMode: LegendDisplayMode.Hidden,\n          placement: 'right',\n          showLegend: false,\n        },\n      },\n      fieldConfig: {\n        defaults: {\n          custom: {},\n        },\n        overrides: [],\n      },\n      cardOptions: {\n        previewModifier: (s) => {\n          if (s.fieldConfig?.defaults.custom?.drawStyle !== GraphDrawStyle.Bars) {\n            s.fieldConfig!.defaults.custom!.lineWidth = Math.max(s.fieldConfig!.defaults.custom!.lineWidth ?? 1, 2);\n          }\n        },\n      },\n    });\n    return list;\n  }\n}\n","import { Field, FieldType, PanelPlugin } from '@grafana/data';\nimport { commonOptionsBuilder } from '@grafana/ui';\nimport { optsWithHideZeros } from '@grafana/ui/internal';\n\nimport { defaultGraphConfig, getGraphFieldConfig } from '../timeseries/config';\n\nimport { TrendPanel } from './TrendPanel';\nimport { FieldConfig, Options } from './panelcfg.gen';\nimport { TrendSuggestionsSupplier } from './suggestions';\n\nexport const plugin = new PanelPlugin<Options, FieldConfig>(TrendPanel)\n  .useFieldConfig(getGraphFieldConfig(defaultGraphConfig, false))\n  .setPanelOptions((builder) => {\n    const category = ['X axis'];\n    builder.addFieldNamePicker({\n      path: 'xField',\n      name: 'X field',\n      description: 'An increasing numeric value',\n      category,\n      defaultValue: undefined,\n      settings: {\n        isClearable: true,\n        placeholderText: 'First numeric value',\n        filter: (field: Field) => field.type === FieldType.number,\n      },\n    });\n\n    commonOptionsBuilder.addTooltipOptions(builder, false, true, optsWithHideZeros);\n    commonOptionsBuilder.addLegendOptions(builder);\n  })\n  .setSuggestionsSupplier(new TrendSuggestionsSupplier());\n//.setDataSupport({ annotations: true, alertStates: true });\n"],"names":["VizTooltipWrapper","children","className","styles","getStyles","theme","reEnumFields","frames","allTextsByKey","frame","field","scaleKey","allTexts","idxs","txts","i","prepareGraphableFields","series","timeRange","xNumFieldIdx","useNumericX","f","enumFieldsCount","loopy","copy","fields","hasTimeField","hasValueField","nulledFrame","frameFields","fieldIdx","v","custom","config","setClassicPaletteIdxs","matchEnumColorToSeriesColor","palette","namedColor","hexColor","enumConfig","skipFieldIdx","seriesIndex","getTimezones","timezones","defaultTimezone","isTooltipScrollable","tooltipOptions","TrendPanel","data","timeZone","width","height","options","fieldConfig","replaceVariables","id","dataLinkPostProcessor","trendXFieldName","preparePlotFrameTimeless","dimFields","info","xFieldIdx","PanelDataErrorView","TimeSeries","uPlotConfig","alignedDataFrame","KeyboardPlugin","TooltipPlugin2","seriesIdx","dataIdx","u","dataIdxs","isPinned","dismiss","viaSync","dataLinks","TimeSeriesTooltip","TrendSuggestionsSupplier","builder","dataSummary","s","PanelPlugin","category"],"sourceRoot":""}