{"version":3,"file":"4340.ec44f83a06a58fadfbbf.js","mappings":"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","sources":["webpack://grafana/./public/app/features/logs/components/panel/LogLineMenu.tsx","webpack://grafana/./public/app/features/logs/components/panel/LogLine.tsx","webpack://grafana/./public/app/features/logs/components/panel/LogLineMessage.tsx","webpack://grafana/./public/app/features/logs/components/panel/InfiniteScroll.tsx","webpack://grafana/./public/app/features/logs/components/panel/grammar.ts","webpack://grafana/./public/app/features/logs/components/panel/processing.ts","webpack://grafana/./public/app/features/logs/components/panel/LogList.tsx","webpack://grafana/./public/app/features/logs/components/panel/LogListContext.tsx","webpack://grafana/./public/app/features/logs/components/panel/LogListControls.tsx","webpack://grafana/./public/app/features/logs/components/panel/virtualization.ts"],"sourcesContent":["import { useCallback, useMemo, useRef, MouseEvent } from 'react';\n\nimport { LogRowContextOptions, LogRowModel } from '@grafana/data';\nimport { DataQuery } from '@grafana/schema';\nimport { Dropdown, IconButton, Menu } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { copyText, handleOpenLogsContextClick } from '../../utils';\n\nimport { LogLineStyles } from './LogLine';\nimport { useLogIsPinned, useLogListContext } from './LogListContext';\nimport { LogListModel } from './processing';\n\nexport type GetRowContextQueryFn = (\n  row: LogRowModel,\n  options?: LogRowContextOptions,\n  cacheFilters?: boolean\n) => Promise<DataQuery | null>;\n\ninterface Props {\n  log: LogListModel;\n  styles: LogLineStyles;\n}\n\nexport const LogLineMenu = ({ log, styles }: Props) => {\n  const { getRowContextQuery, onOpenContext, onPermalinkClick, onPinLine, onUnpinLine, logSupportsContext } =\n    useLogListContext();\n  const pinned = useLogIsPinned(log);\n  const menuRef = useRef(null);\n\n  const copyLogLine = useCallback(() => {\n    copyText(log.entry, menuRef);\n  }, [log.entry]);\n\n  const copyLinkToLogLine = useCallback(() => {\n    onPermalinkClick?.(log);\n  }, [log, onPermalinkClick]);\n\n  const shouldlogSupportsContext = useMemo(\n    () => (logSupportsContext ? logSupportsContext(log) : false),\n    [log, logSupportsContext]\n  );\n\n  const showContext = useCallback(\n    async (event: MouseEvent<HTMLElement>) => {\n      handleOpenLogsContextClick(event, log, getRowContextQuery, (log: LogRowModel) => onOpenContext?.(log, () => {}));\n    },\n    [onOpenContext, getRowContextQuery, log]\n  );\n\n  const togglePinning = useCallback(() => {\n    if (pinned) {\n      onUnpinLine?.(log);\n    } else {\n      onPinLine?.(log);\n    }\n  }, [log, onPinLine, onUnpinLine, pinned]);\n\n  const menu = useCallback(\n    () => (\n      <Menu ref={menuRef}>\n        <Menu.Item onClick={copyLogLine} label={t('logs.log-line-menu.copy-log', 'Copy log line')} />\n        {onPermalinkClick && log.rowId !== undefined && log.uid && (\n          <Menu.Item onClick={copyLinkToLogLine} label={t('logs.log-line-menu.copy-link', 'Copy link to log line')} />\n        )}\n        {(shouldlogSupportsContext || onPinLine || onUnpinLine) && <Menu.Divider />}\n        {shouldlogSupportsContext && (\n          <Menu.Item onClick={showContext} label={t('logs.log-line-menu.show-context', 'Show context')} />\n        )}\n        {!pinned && onPinLine && (\n          <Menu.Item onClick={togglePinning} label={t('logs.log-line-menu.pin-to-outline', 'Pin log')} />\n        )}\n        {pinned && onUnpinLine && (\n          <Menu.Item onClick={togglePinning} label={t('logs.log-line-menu.unpin-from-outline', 'Unpin log')} />\n        )}\n      </Menu>\n    ),\n    [\n      copyLinkToLogLine,\n      copyLogLine,\n      log.rowId,\n      log.uid,\n      onPermalinkClick,\n      onPinLine,\n      onUnpinLine,\n      pinned,\n      shouldlogSupportsContext,\n      showContext,\n      togglePinning,\n    ]\n  );\n\n  return (\n    <Dropdown overlay={menu} placement=\"bottom-start\">\n      <IconButton\n        className={styles.menuIcon}\n        name=\"ellipsis-v\"\n        aria-label={t('logs.log-line-menu.icon-label', 'Log menu')}\n      />\n    </Dropdown>\n  );\n};\n","import { css } from '@emotion/css';\nimport { CSSProperties, useCallback, useEffect, useRef } from 'react';\nimport tinycolor from 'tinycolor2';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { LOG_LINE_BODY_FIELD_NAME } from '../LogDetailsBody';\nimport { LogMessageAnsi } from '../LogMessageAnsi';\n\nimport { LogLineMenu } from './LogLineMenu';\nimport { useLogIsPinned, useLogListContext } from './LogListContext';\nimport { LogListModel } from './processing';\nimport { FIELD_GAP_MULTIPLIER, hasUnderOrOverflow, getLineHeight, LogFieldDimension } from './virtualization';\n\ninterface Props {\n  displayedFields: string[];\n  index: number;\n  log: LogListModel;\n  showTime: boolean;\n  style: CSSProperties;\n  styles: LogLineStyles;\n  onOverflow?: (index: number, id: string, height: number) => void;\n  variant?: 'infinite-scroll';\n  wrapLogMessage: boolean;\n}\n\nexport const LogLine = ({\n  displayedFields,\n  index,\n  log,\n  style,\n  styles,\n  onOverflow,\n  showTime,\n  variant,\n  wrapLogMessage,\n}: Props) => {\n  const { onLogLineHover } = useLogListContext();\n  const logLineRef = useRef<HTMLDivElement | null>(null);\n  const pinned = useLogIsPinned(log);\n\n  const handleMouseOver = useCallback(() => {\n    onLogLineHover?.(log);\n  }, [log, onLogLineHover]);\n\n  useEffect(() => {\n    if (!onOverflow || !logLineRef.current) {\n      return;\n    }\n    const calculatedHeight = typeof style.height === 'number' ? style.height : undefined;\n    const actualHeight = hasUnderOrOverflow(logLineRef.current, calculatedHeight);\n    if (actualHeight) {\n      onOverflow(index, log.uid, actualHeight);\n    }\n  }, [index, log.uid, onOverflow, style.height]);\n\n  return (\n    <div\n      style={style}\n      className={`${styles.logLine} ${variant ?? ''} ${pinned ? styles.pinnedLogLine : ''}`}\n      ref={onOverflow ? logLineRef : undefined}\n      onMouseOver={handleMouseOver}\n    >\n      <LogLineMenu styles={styles} log={log} />\n      <div className={`${wrapLogMessage ? styles.wrappedLogLine : `${styles.unwrappedLogLine} unwrapped-log-line`}`}>\n        <Log\n          displayedFields={displayedFields}\n          log={log}\n          showTime={showTime}\n          styles={styles}\n          wrapLogMessage={wrapLogMessage}\n        />\n      </div>\n    </div>\n  );\n};\n\ninterface LogProps {\n  displayedFields: string[];\n  log: LogListModel;\n  showTime: boolean;\n  styles: LogLineStyles;\n  wrapLogMessage: boolean;\n}\n\nconst Log = ({ displayedFields, log, showTime, styles, wrapLogMessage }: LogProps) => {\n  return (\n    <>\n      {showTime && <span className={`${styles.timestamp} level-${log.logLevel} field`}>{log.timestamp}</span>}\n      {\n        // When logs are unwrapped, we want an empty column space to align with other log lines.\n      }\n      {(log.displayLevel || !wrapLogMessage) && (\n        <span className={`${styles.level} level-${log.logLevel} field`}>{log.displayLevel}</span>\n      )}\n      {displayedFields.length > 0 ? (\n        displayedFields.map((field) =>\n          field === LOG_LINE_BODY_FIELD_NAME ? (\n            <LogLineBody log={log} key={field} />\n          ) : (\n            <span className=\"field\" title={field} key={field}>\n              {getDisplayedFieldValue(field, log)}\n            </span>\n          )\n        )\n      ) : (\n        <LogLineBody log={log} />\n      )}\n    </>\n  );\n};\n\nconst LogLineBody = ({ log }: { log: LogListModel }) => {\n  const { syntaxHighlighting } = useLogListContext();\n\n  if (log.hasAnsi) {\n    const needsHighlighter =\n      log.searchWords && log.searchWords.length > 0 && log.searchWords[0] && log.searchWords[0].length > 0;\n    const highlight = needsHighlighter ? { searchWords: log.searchWords ?? [], highlightClassName: '' } : undefined;\n    return (\n      <span className=\"field no-highlighting\">\n        <LogMessageAnsi value={log.body} highlight={highlight} />\n      </span>\n    );\n  }\n\n  if (!syntaxHighlighting) {\n    return <span className=\"field no-highlighting\">{log.body}</span>;\n  }\n\n  return <span className=\"field log-syntax-highlight\" dangerouslySetInnerHTML={{ __html: log.highlightedBody }} />;\n};\n\nexport function getDisplayedFieldValue(fieldName: string, log: LogListModel): string {\n  if (fieldName === LOG_LINE_BODY_FIELD_NAME) {\n    return log.body;\n  }\n  if (log.labels[fieldName] != null) {\n    return log.labels[fieldName];\n  }\n  const field = log.fields.find((field) => {\n    return field.keys[0] === fieldName;\n  });\n\n  return field ? field.values.toString() : '';\n}\n\nexport function getGridTemplateColumns(dimensions: LogFieldDimension[]) {\n  const columns = dimensions.map((dimension) => dimension.width).join('px ');\n  return `${columns}px 1fr`;\n}\n\nexport type LogLineStyles = ReturnType<typeof getStyles>;\nexport const getStyles = (theme: GrafanaTheme2) => {\n  const colors = {\n    critical: '#B877D9',\n    error: theme.colors.error.text,\n    warning: '#FBAD37',\n    debug: '#6E9FFF',\n    trace: '#6ed0e0',\n    info: '#6CCF8E',\n    metadata: theme.colors.text.primary,\n    parsedField: theme.colors.text.primary,\n  };\n\n  return {\n    logLine: css({\n      color: tinycolor(theme.colors.text.secondary).setAlpha(0.75).toRgbString(),\n      display: 'flex',\n      gap: theme.spacing(0.5),\n      flexDirection: 'row',\n      fontFamily: theme.typography.fontFamilyMonospace,\n      fontSize: theme.typography.fontSize,\n      wordBreak: 'break-all',\n      '&:hover': {\n        background: `hsla(0, 0%, 0%, 0.2)`,\n      },\n      '&.infinite-scroll': {\n        '&::before': {\n          borderTop: `solid 1px ${theme.colors.border.strong}`,\n          content: '\"\"',\n          height: 0,\n          left: 0,\n          position: 'absolute',\n          top: -3,\n          width: '100%',\n        },\n      },\n      '& .log-syntax-highlight': {\n        '.log-token-string': {\n          color: tinycolor(theme.colors.text.secondary).setAlpha(0.75).toRgbString(),\n        },\n        '.log-token-duration': {\n          color: theme.colors.success.text,\n        },\n        '.log-token-size': {\n          color: theme.colors.success.text,\n        },\n        '.log-token-uuid': {\n          color: theme.colors.success.text,\n        },\n        '.log-token-key': {\n          color: colors.parsedField,\n          opacity: 0.9,\n          fontWeight: theme.typography.fontWeightMedium,\n        },\n        '.log-token-json-key': {\n          color: colors.parsedField,\n          opacity: 0.9,\n          fontWeight: theme.typography.fontWeightMedium,\n        },\n        '.log-token-label': {\n          color: colors.metadata,\n          fontWeight: theme.typography.fontWeightBold,\n        },\n        '.log-token-method': {\n          color: theme.colors.info.shade,\n        },\n      },\n      '& .no-highlighting': {\n        color: theme.colors.text.primary,\n      },\n    }),\n    pinnedLogLine: css({\n      backgroundColor: tinycolor(theme.colors.info.transparent).setAlpha(0.25).toString(),\n    }),\n    menuIcon: css({\n      height: getLineHeight(),\n      margin: 0,\n      padding: theme.spacing(0, 0, 0, 0.5),\n    }),\n    logLineMessage: css({\n      fontFamily: theme.typography.fontFamily,\n      justifyContent: 'center',\n    }),\n    timestamp: css({\n      color: theme.colors.text.disabled,\n      display: 'inline-block',\n    }),\n    level: css({\n      color: theme.colors.text.secondary,\n      fontWeight: theme.typography.fontWeightBold,\n      textTransform: 'uppercase',\n      display: 'inline-block',\n      '&.level-critical': {\n        color: colors.critical,\n      },\n      '&.level-error': {\n        color: colors.error,\n      },\n      '&.level-warning': {\n        color: colors.warning,\n      },\n      '&.level-info': {\n        color: colors.info,\n      },\n      '&.level-debug': {\n        color: colors.debug,\n      },\n    }),\n    loadMoreButton: css({\n      background: 'transparent',\n      border: 'none',\n      display: 'inline',\n    }),\n    overflows: css({\n      outline: 'solid 1px red',\n    }),\n    unwrappedLogLine: css({\n      display: 'grid',\n      gridColumnGap: theme.spacing(FIELD_GAP_MULTIPLIER),\n      whiteSpace: 'pre',\n      paddingBottom: theme.spacing(0.75),\n    }),\n    wrappedLogLine: css({\n      alignSelf: 'flex-start',\n      paddingBottom: theme.spacing(0.75),\n      whiteSpace: 'pre-wrap',\n      '& .field': {\n        marginRight: theme.spacing(FIELD_GAP_MULTIPLIER),\n      },\n      '& .field:last-child': {\n        marginRight: 0,\n      },\n    }),\n  };\n};\n","import { CSSProperties, ReactNode } from 'react';\n\nimport { LogLineStyles } from './LogLine';\n\ninterface Props {\n  children: ReactNode;\n  onClick?: () => void;\n  style: CSSProperties;\n  styles: LogLineStyles;\n}\n\nexport const LogLineMessage = ({ children, onClick, style, styles }: Props) => {\n  return (\n    <div style={style} className={`${styles.logLine} ${styles.logLineMessage}`}>\n      {onClick ? (\n        <button className={styles.loadMoreButton} onClick={onClick}>\n          {children}\n        </button>\n      ) : (\n        children\n      )}\n    </div>\n  );\n};\n","import { ReactNode, useCallback, useEffect, useRef, useState } from 'react';\nimport { usePrevious } from 'react-use';\nimport { ListChildComponentProps, ListOnItemsRenderedProps } from 'react-window';\n\nimport { AbsoluteTimeRange, LogsSortOrder, TimeRange } from '@grafana/data';\nimport { config, reportInteraction } from '@grafana/runtime';\nimport { Spinner, useStyles2 } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { canScrollBottom, getVisibleRange, ScrollDirection, shouldLoadMore } from '../InfiniteScroll';\n\nimport { getStyles, LogLine } from './LogLine';\nimport { LogLineMessage } from './LogLineMessage';\nimport { LogListModel } from './processing';\n\ninterface ChildrenProps {\n  itemCount: number;\n  getItemKey: (index: number) => string;\n  onItemsRendered: (props: ListOnItemsRenderedProps) => void;\n  Renderer: (props: ListChildComponentProps) => ReactNode;\n}\n\ninterface Props {\n  children: (props: ChildrenProps) => ReactNode;\n  displayedFields: string[];\n  handleOverflow: (index: number, id: string, height: number) => void;\n  loadMore?: (range: AbsoluteTimeRange) => void;\n  logs: LogListModel[];\n  scrollElement: HTMLDivElement | null;\n  setInitialScrollPosition: () => void;\n  showTime: boolean;\n  sortOrder: LogsSortOrder;\n  timeRange: TimeRange;\n  timeZone: string;\n  wrapLogMessage: boolean;\n}\n\ntype InfiniteLoaderState = 'idle' | 'out-of-bounds' | 'pre-scroll' | 'loading';\n\nexport const InfiniteScroll = ({\n  children,\n  displayedFields,\n  handleOverflow,\n  loadMore,\n  logs,\n  scrollElement,\n  setInitialScrollPosition,\n  showTime,\n  sortOrder,\n  timeRange,\n  timeZone,\n  wrapLogMessage,\n}: Props) => {\n  const [infiniteLoaderState, setInfiniteLoaderState] = useState<InfiniteLoaderState>('idle');\n  const [autoScroll, setAutoScroll] = useState(false);\n  const prevLogs = usePrevious(logs);\n  const prevSortOrder = usePrevious(sortOrder);\n  const lastScroll = useRef<number>(scrollElement?.scrollTop || 0);\n  const lastEvent = useRef<Event | WheelEvent | null>(null);\n  const countRef = useRef(0);\n  const lastLogOfPage = useRef<string[]>([]);\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    // Logs have not changed, ignore effect\n    if (!prevLogs || prevLogs === logs) {\n      return;\n    }\n    // New logs are from infinite scrolling\n    if (infiniteLoaderState === 'loading') {\n      // out-of-bounds if no new logs returned\n      setInfiniteLoaderState(logs.length === prevLogs.length ? 'out-of-bounds' : 'idle');\n    } else {\n      lastLogOfPage.current = [];\n      setAutoScroll(true);\n    }\n  }, [infiniteLoaderState, logs, prevLogs]);\n\n  useEffect(() => {\n    if (prevSortOrder && prevSortOrder !== sortOrder) {\n      setInfiniteLoaderState('idle');\n    }\n  }, [prevSortOrder, sortOrder]);\n\n  useEffect(() => {\n    if (autoScroll) {\n      setInitialScrollPosition();\n      setAutoScroll(false);\n    }\n  }, [autoScroll, setInitialScrollPosition]);\n\n  const onLoadMore = useCallback(() => {\n    const newRange = canScrollBottom(getVisibleRange(logs), timeRange, timeZone, sortOrder);\n    if (!newRange) {\n      setInfiniteLoaderState('out-of-bounds');\n      return;\n    }\n    lastLogOfPage.current.push(logs[logs.length - 1].uid);\n    setInfiniteLoaderState('loading');\n    loadMore?.(newRange);\n\n    reportInteraction('grafana_logs_infinite_scrolling', {\n      direction: 'bottom',\n      sort_order: sortOrder,\n    });\n  }, [loadMore, logs, sortOrder, timeRange, timeZone]);\n\n  useEffect(() => {\n    if (!scrollElement || !loadMore || !config.featureToggles.logsInfiniteScrolling) {\n      return;\n    }\n\n    function handleScroll(event: Event | WheelEvent) {\n      if (!scrollElement || !loadMore || !logs.length || infiniteLoaderState !== 'pre-scroll') {\n        return;\n      }\n      const scrollDirection = shouldLoadMore(event, lastEvent.current, countRef, scrollElement, lastScroll.current);\n      lastEvent.current = event;\n      lastScroll.current = scrollElement.scrollTop;\n      if (scrollDirection === ScrollDirection.Bottom) {\n        onLoadMore();\n      }\n    }\n\n    scrollElement.addEventListener('scroll', handleScroll);\n    scrollElement.addEventListener('wheel', handleScroll);\n\n    return () => {\n      scrollElement.removeEventListener('scroll', handleScroll);\n      scrollElement.removeEventListener('wheel', handleScroll);\n    };\n  }, [infiniteLoaderState, loadMore, logs.length, onLoadMore, scrollElement]);\n\n  const Renderer = useCallback(\n    ({ index, style }: ListChildComponentProps) => {\n      if (!logs[index] && infiniteLoaderState !== 'idle') {\n        return (\n          <LogLineMessage\n            style={style}\n            styles={styles}\n            onClick={infiniteLoaderState === 'pre-scroll' ? onLoadMore : undefined}\n          >\n            {getMessageFromInfiniteLoaderState(infiniteLoaderState, sortOrder)}\n          </LogLineMessage>\n        );\n      }\n      return (\n        <LogLine\n          displayedFields={displayedFields}\n          index={index}\n          log={logs[index]}\n          showTime={showTime}\n          style={style}\n          styles={styles}\n          variant={getLogLineVariant(logs, index, lastLogOfPage.current)}\n          wrapLogMessage={wrapLogMessage}\n          onOverflow={handleOverflow}\n        />\n      );\n    },\n    [\n      displayedFields,\n      handleOverflow,\n      infiniteLoaderState,\n      logs,\n      onLoadMore,\n      showTime,\n      sortOrder,\n      styles,\n      wrapLogMessage,\n    ]\n  );\n\n  const onItemsRendered = useCallback(\n    (props: ListOnItemsRenderedProps) => {\n      if (!scrollElement || infiniteLoaderState === 'loading' || infiniteLoaderState === 'out-of-bounds') {\n        return;\n      }\n      if (scrollElement.scrollHeight <= scrollElement.clientHeight) {\n        return;\n      }\n      const lastLogIndex = logs.length - 1;\n      const preScrollIndex = logs.length - 2;\n      if (props.visibleStopIndex >= lastLogIndex) {\n        setInfiniteLoaderState('pre-scroll');\n      } else if (props.visibleStartIndex < preScrollIndex) {\n        setInfiniteLoaderState('idle');\n      }\n    },\n    [infiniteLoaderState, logs.length, scrollElement]\n  );\n\n  const getItemKey = useCallback((index: number) => (logs[index] ? logs[index].uid : index.toString()), [logs]);\n\n  const itemCount = logs.length && loadMore && infiniteLoaderState !== 'idle' ? logs.length + 1 : logs.length;\n\n  return <>{children({ getItemKey, itemCount, onItemsRendered, Renderer })}</>;\n};\n\nfunction getMessageFromInfiniteLoaderState(state: InfiniteLoaderState, order: LogsSortOrder) {\n  switch (state) {\n    case 'out-of-bounds':\n      return t('logs.infinite-scroll.end-of-range', 'End of the selected time range.');\n    case 'loading':\n      return (\n        <>\n          {order === LogsSortOrder.Ascending\n            ? t('logs.infinite-scroll.load-newer', 'Loading newer logs...')\n            : t('logs.infinite-scroll.load-older', 'Loading older logs...')}{' '}\n          <Spinner inline />\n        </>\n      );\n    case 'pre-scroll':\n      return t('logs.infinite-scroll.load-more', 'Scroll to load more');\n    default:\n      return null;\n  }\n}\n\nfunction getLogLineVariant(logs: LogListModel[], index: number, lastLogOfPage: string[]) {\n  if (!lastLogOfPage.length || !logs[index - 1]) {\n    return undefined;\n  }\n  const prevLog = logs[index - 1];\n  for (const uid of lastLogOfPage) {\n    if (prevLog.uid === uid) {\n      // First log of an infinite scrolling page\n      return 'infinite-scroll';\n    }\n  }\n  return undefined;\n}\n","import { Grammar } from 'prismjs';\n\nimport { LogListModel } from './processing';\n\n// The Logs grammar is used for highlight in the logs panel\nexport const logsGrammar: Grammar = {\n  'log-token-uuid': /[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}/g,\n  'log-token-json-key': /\"(\\b|\\B)[\\w-]+\"(?=\\s*:)/gi,\n  'log-token-key': /(\\b|\\B)[\\w_]+(?=\\s*=)/gi,\n  'log-token-size': /(?:\\b|\")\\d+\\.{0,1}\\d*\\s*[kKmMGgtTPp]*[bB]{1}(?:\"|\\b)/g,\n  'log-token-duration': /(?:\\b)\\d+(\\.\\d+)?(ns|µs|ms|s|m|h|d)(?:\\b)/g,\n  'log-token-method': /\\b(GET|POST|PUT|DELETE|PATCH|HEAD|OPTIONS|TRACE|CONNECT)\\b/g,\n  'log-token-string': /\"(?!:)([^'\"])*?\"(?!:)/g,\n};\n\nexport const generateLogGrammar = (log: LogListModel) => {\n  const labels = Object.keys(log.labels).concat(log.fields.map((field) => field.keys[0]));\n  const logGrammar: Grammar = {\n    'log-token-label': new RegExp(`\\\\b(${labels.join('|')})(?:[=:]{1})\\\\b`, 'g'),\n  };\n  return {\n    ...logGrammar,\n    ...logsGrammar,\n  };\n};\n","import Prism, { Grammar } from 'prismjs';\n\nimport { dateTimeFormat, LogLevel, LogRowModel, LogsSortOrder } from '@grafana/data';\n\nimport { escapeUnescapedString, sortLogRows } from '../../utils';\nimport { FieldDef, getAllFields } from '../logParser';\n\nimport { GetFieldLinksFn } from './LogList';\nimport { generateLogGrammar } from './grammar';\n\nexport interface LogListModel extends LogRowModel {\n  body: string;\n  _highlightedBody: string;\n  highlightedBody: string;\n  displayLevel: string;\n  fields: FieldDef[];\n  timestamp: string;\n}\n\nexport interface PreProcessOptions {\n  escape: boolean;\n  getFieldLinks?: GetFieldLinksFn;\n  order: LogsSortOrder;\n  timeZone: string;\n}\n\nexport const preProcessLogs = (\n  logs: LogRowModel[],\n  { escape, getFieldLinks, order, timeZone }: PreProcessOptions,\n  grammar?: Grammar\n): LogListModel[] => {\n  const orderedLogs = sortLogRows(logs, order);\n  return orderedLogs.map((log) => preProcessLog(log, { escape, getFieldLinks, timeZone }, grammar));\n};\n\ninterface PreProcessLogOptions {\n  escape: boolean;\n  getFieldLinks?: GetFieldLinksFn;\n  timeZone: string;\n}\nconst preProcessLog = (\n  log: LogRowModel,\n  { escape, getFieldLinks, timeZone }: PreProcessLogOptions,\n  grammar?: Grammar\n): LogListModel => {\n  let body = log.raw;\n  const timestamp = dateTimeFormat(log.timeEpochMs, {\n    timeZone,\n    defaultWithMS: true,\n  });\n\n  if (escape && log.hasUnescapedContent) {\n    body = escapeUnescapedString(body);\n  }\n  // Turn it into a single-line log entry for the list\n  body = body.replace(/(\\r\\n|\\n|\\r)/g, '');\n\n  return {\n    ...log,\n    body,\n    _highlightedBody: '',\n    get highlightedBody() {\n      if (!this._highlightedBody) {\n        this._highlightedBody = Prism.highlight(body, grammar ? grammar : generateLogGrammar(this), 'lokiql');\n      }\n      return this._highlightedBody;\n    },\n    displayLevel: logLevelToDisplayLevel(log.logLevel),\n    fields: getAllFields(log, getFieldLinks),\n    timestamp,\n  };\n};\n\nfunction logLevelToDisplayLevel(level = '') {\n  switch (level) {\n    case LogLevel.critical:\n      return 'crit';\n    case LogLevel.warning:\n      return 'warn';\n    case LogLevel.unknown:\n      return '';\n    default:\n      return level;\n  }\n}\n","import { css } from '@emotion/css';\nimport { debounce } from 'lodash';\nimport { Grammar } from 'prismjs';\nimport { useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState } from 'react';\nimport { VariableSizeList } from 'react-window';\n\nimport {\n  AbsoluteTimeRange,\n  CoreApp,\n  DataFrame,\n  EventBus,\n  EventBusSrv,\n  Field,\n  LinkModel,\n  LogLevel,\n  LogRowModel,\n  LogsDedupStrategy,\n  LogsMetaItem,\n  LogsSortOrder,\n  store,\n  TimeRange,\n} from '@grafana/data';\nimport { PopoverContent, useTheme2 } from '@grafana/ui';\n\nimport { InfiniteScroll } from './InfiniteScroll';\nimport { getGridTemplateColumns } from './LogLine';\nimport { GetRowContextQueryFn } from './LogLineMenu';\nimport { LogListContextProvider, LogListState, useLogListContext } from './LogListContext';\nimport { LogListControls } from './LogListControls';\nimport { preProcessLogs, LogListModel } from './processing';\nimport {\n  calculateFieldDimensions,\n  getLogLineSize,\n  init as initVirtualization,\n  LogFieldDimension,\n  resetLogLineSizes,\n  ScrollToLogsEvent,\n  storeLogLineSize,\n} from './virtualization';\n\nexport type GetFieldLinksFn = (field: Field, rowIndex: number, dataFrame: DataFrame) => Array<LinkModel<Field>>;\n\ninterface Props {\n  app: CoreApp;\n  containerElement: HTMLDivElement;\n  dedupStrategy: LogsDedupStrategy;\n  displayedFields: string[];\n  eventBus?: EventBus;\n  filterLevels?: LogLevel[];\n  getFieldLinks?: GetFieldLinksFn;\n  getRowContextQuery?: GetRowContextQueryFn;\n  grammar?: Grammar;\n  initialScrollPosition?: 'top' | 'bottom';\n  loadMore?: (range: AbsoluteTimeRange) => void;\n  logOptionsStorageKey?: string;\n  logs: LogRowModel[];\n  logsMeta?: LogsMetaItem[];\n  logSupportsContext?: (row: LogRowModel) => boolean;\n  onLogOptionsChange?: (option: keyof LogListControlOptions, value: string | boolean | string[]) => void;\n  onLogLineHover?: (row?: LogRowModel) => void;\n  onPermalinkClick?: (row: LogRowModel) => Promise<void>;\n  onPinLine?: (row: LogRowModel) => void;\n  onOpenContext?: (row: LogRowModel, onClose: () => void) => void;\n  onUnpinLine?: (row: LogRowModel) => void;\n  pinLineButtonTooltipTitle?: PopoverContent;\n  pinnedLogs?: string[];\n  showControls: boolean;\n  showTime: boolean;\n  sortOrder: LogsSortOrder;\n  storageKey?: string;\n  timeRange: TimeRange;\n  timeZone: string;\n  syntaxHighlighting?: boolean;\n  wrapLogMessage: boolean;\n}\n\nexport type LogListControlOptions = LogListState;\n\ntype LogListComponentProps = Omit<\n  Props,\n  'app' | 'dedupStrategy' | 'displayedFields' | 'showTime' | 'sortOrder' | 'syntaxHighlighting' | 'wrapLogMessage'\n>;\n\nexport const LogList = ({\n  app,\n  displayedFields,\n  containerElement,\n  dedupStrategy,\n  eventBus,\n  filterLevels,\n  getFieldLinks,\n  getRowContextQuery,\n  grammar,\n  initialScrollPosition = 'top',\n  loadMore,\n  logOptionsStorageKey,\n  logs,\n  logsMeta,\n  logSupportsContext,\n  onLogOptionsChange,\n  onLogLineHover,\n  onPermalinkClick,\n  onPinLine,\n  onOpenContext,\n  onUnpinLine,\n  pinLineButtonTooltipTitle,\n  pinnedLogs,\n  showControls,\n  showTime,\n  sortOrder,\n  syntaxHighlighting = logOptionsStorageKey ? store.getBool(`${logOptionsStorageKey}.syntaxHighlighting`, true) : true,\n  timeRange,\n  timeZone,\n  wrapLogMessage,\n}: Props) => {\n  return (\n    <LogListContextProvider\n      app={app}\n      dedupStrategy={dedupStrategy}\n      displayedFields={displayedFields}\n      filterLevels={filterLevels}\n      getRowContextQuery={getRowContextQuery}\n      logs={logs}\n      logsMeta={logsMeta}\n      logOptionsStorageKey={logOptionsStorageKey}\n      logSupportsContext={logSupportsContext}\n      onLogOptionsChange={onLogOptionsChange}\n      onLogLineHover={onLogLineHover}\n      onPermalinkClick={onPermalinkClick}\n      onPinLine={onPinLine}\n      onOpenContext={onOpenContext}\n      onUnpinLine={onUnpinLine}\n      pinLineButtonTooltipTitle={pinLineButtonTooltipTitle}\n      pinnedLogs={pinnedLogs}\n      showControls={showControls}\n      showTime={showTime}\n      sortOrder={sortOrder}\n      syntaxHighlighting={syntaxHighlighting}\n      wrapLogMessage={wrapLogMessage}\n    >\n      <LogListComponent\n        containerElement={containerElement}\n        eventBus={eventBus}\n        getFieldLinks={getFieldLinks}\n        grammar={grammar}\n        initialScrollPosition={initialScrollPosition}\n        loadMore={loadMore}\n        logs={logs}\n        showControls={showControls}\n        timeRange={timeRange}\n        timeZone={timeZone}\n      />\n    </LogListContextProvider>\n  );\n};\n\nconst LogListComponent = ({\n  containerElement,\n  eventBus = new EventBusSrv(),\n  getFieldLinks,\n  grammar,\n  initialScrollPosition = 'top',\n  loadMore,\n  logs,\n  showControls,\n  timeRange,\n  timeZone,\n}: LogListComponentProps) => {\n  const { app, displayedFields, filterLevels, forceEscape, showTime, sortOrder, wrapLogMessage } = useLogListContext();\n  const [processedLogs, setProcessedLogs] = useState<LogListModel[]>([]);\n  const [listHeight, setListHeight] = useState(\n    app === CoreApp.Explore ? window.innerHeight * 0.75 : containerElement.clientHeight\n  );\n  const theme = useTheme2();\n  const listRef = useRef<VariableSizeList | null>(null);\n  const widthRef = useRef(containerElement.clientWidth);\n  const scrollRef = useRef<HTMLDivElement | null>(null);\n  const dimensions = useMemo(\n    () => (wrapLogMessage ? [] : calculateFieldDimensions(processedLogs, displayedFields)),\n    [displayedFields, processedLogs, wrapLogMessage]\n  );\n  const styles = getStyles(dimensions, { showTime });\n\n  useEffect(() => {\n    initVirtualization(theme);\n  }, [theme]);\n\n  useEffect(() => {\n    const subscription = eventBus.subscribe(ScrollToLogsEvent, (e: ScrollToLogsEvent) =>\n      handleScrollToEvent(e, logs.length, listRef.current)\n    );\n    return () => subscription.unsubscribe();\n  }, [eventBus, logs.length]);\n\n  useEffect(() => {\n    setProcessedLogs(\n      preProcessLogs(logs, { getFieldLinks, escape: forceEscape ?? false, order: sortOrder, timeZone }, grammar)\n    );\n  }, [forceEscape, getFieldLinks, grammar, logs, sortOrder, timeZone]);\n\n  useEffect(() => {\n    resetLogLineSizes();\n    listRef.current?.resetAfterIndex(0);\n  }, [wrapLogMessage, processedLogs]);\n\n  useEffect(() => {\n    const handleResize = debounce(() => {\n      setListHeight(app === CoreApp.Explore ? window.innerHeight * 0.75 : containerElement.clientHeight);\n    }, 50);\n    window.addEventListener('resize', handleResize);\n    handleResize();\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [app, containerElement.clientHeight]);\n\n  useLayoutEffect(() => {\n    if (widthRef.current === containerElement.clientWidth) {\n      return;\n    }\n    resetLogLineSizes();\n    listRef.current?.resetAfterIndex(0);\n    widthRef.current = containerElement.clientWidth;\n  });\n\n  const handleOverflow = useCallback(\n    (index: number, id: string, height: number) => {\n      if (containerElement) {\n        storeLogLineSize(id, containerElement, height);\n        listRef.current?.resetAfterIndex(index);\n      }\n    },\n    [containerElement]\n  );\n\n  const handleScrollPosition = useCallback(() => {\n    listRef.current?.scrollToItem(initialScrollPosition === 'top' ? 0 : logs.length - 1);\n  }, [initialScrollPosition, logs.length]);\n\n  if (!containerElement || listHeight == null) {\n    // Wait for container to be rendered\n    return null;\n  }\n\n  const filteredLogs = useMemo(\n    () =>\n      filterLevels.length === 0 ? processedLogs : processedLogs.filter((log) => filterLevels.includes(log.logLevel)),\n    [filterLevels, processedLogs]\n  );\n\n  return (\n    <div className={styles.logListContainer}>\n      <InfiniteScroll\n        displayedFields={displayedFields}\n        handleOverflow={handleOverflow}\n        logs={filteredLogs}\n        loadMore={loadMore}\n        scrollElement={scrollRef.current}\n        showTime={showTime}\n        sortOrder={sortOrder}\n        timeRange={timeRange}\n        timeZone={timeZone}\n        setInitialScrollPosition={handleScrollPosition}\n        wrapLogMessage={wrapLogMessage}\n      >\n        {({ getItemKey, itemCount, onItemsRendered, Renderer }) => (\n          <VariableSizeList\n            className={styles.logList}\n            height={listHeight}\n            itemCount={itemCount}\n            itemSize={getLogLineSize.bind(null, filteredLogs, containerElement, displayedFields, {\n              wrap: wrapLogMessage,\n              showControls,\n              showTime,\n            })}\n            itemKey={getItemKey}\n            layout=\"vertical\"\n            onItemsRendered={onItemsRendered}\n            outerRef={scrollRef}\n            ref={listRef}\n            style={{ overflowY: 'scroll' }}\n            width=\"100%\"\n          >\n            {Renderer}\n          </VariableSizeList>\n        )}\n      </InfiniteScroll>\n      {showControls && <LogListControls eventBus={eventBus} />}\n    </div>\n  );\n};\n\nfunction getStyles(dimensions: LogFieldDimension[], { showTime }: { showTime: boolean }) {\n  const columns = showTime ? dimensions : dimensions.filter((_, index) => index > 0);\n  return {\n    logList: css({\n      '& .unwrapped-log-line': {\n        display: 'grid',\n        gridTemplateColumns: getGridTemplateColumns(columns),\n      },\n    }),\n    logListContainer: css({\n      display: 'flex',\n    }),\n  };\n}\n\nfunction handleScrollToEvent(event: ScrollToLogsEvent, logsCount: number, list: VariableSizeList | null) {\n  if (event.payload.scrollTo === 'top') {\n    list?.scrollTo(0);\n  } else {\n    list?.scrollToItem(logsCount - 1);\n  }\n}\n","import {\n  createContext,\n  Dispatch,\n  ReactNode,\n  SetStateAction,\n  useCallback,\n  useContext,\n  useEffect,\n  useState,\n} from 'react';\n\nimport {\n  CoreApp,\n  LogLevel,\n  LogRowModel,\n  LogsDedupStrategy,\n  LogsMetaItem,\n  LogsSortOrder,\n  shallowCompare,\n  store,\n} from '@grafana/data';\nimport { PopoverContent } from '@grafana/ui';\n\nimport { DownloadFormat, downloadLogs as download } from '../../utils';\n\nimport { GetRowContextQueryFn } from './LogLineMenu';\n\nexport interface LogListContextData extends Omit<Props, 'logs' | 'logsMeta' | 'showControls'> {\n  downloadLogs: (format: DownloadFormat) => void;\n  filterLevels: LogLevel[];\n  hasUnescapedContent?: boolean;\n  setDedupStrategy: (dedupStrategy: LogsDedupStrategy) => void;\n  setDisplayedFields: (displayedFields: string[]) => void;\n  setFilterLevels: (filterLevels: LogLevel[]) => void;\n  setForceEscape: (forceEscape: boolean) => void;\n  setLogListState: Dispatch<SetStateAction<LogListState>>;\n  setPinnedLogs: (pinnedlogs: string[]) => void;\n  setPrettifyJSON: (prettifyJSON: boolean) => void;\n  setSyntaxHighlighting: (syntaxHighlighting: boolean) => void;\n  setShowTime: (showTime: boolean) => void;\n  setShowUniqueLabels: (showUniqueLabels: boolean) => void;\n  setSortOrder: (sortOrder: LogsSortOrder) => void;\n  setWrapLogMessage: (showTime: boolean) => void;\n}\n\nexport const LogListContext = createContext<LogListContextData>({\n  app: CoreApp.Unknown,\n  dedupStrategy: LogsDedupStrategy.none,\n  displayedFields: [],\n  downloadLogs: () => {},\n  filterLevels: [],\n  hasUnescapedContent: false,\n  setDedupStrategy: () => {},\n  setDisplayedFields: () => {},\n  setFilterLevels: () => {},\n  setForceEscape: () => {},\n  setLogListState: () => {},\n  setPinnedLogs: () => {},\n  setPrettifyJSON: () => {},\n  setShowTime: () => {},\n  setShowUniqueLabels: () => {},\n  setSortOrder: () => {},\n  setSyntaxHighlighting: () => {},\n  setWrapLogMessage: () => {},\n  showTime: true,\n  sortOrder: LogsSortOrder.Ascending,\n  syntaxHighlighting: true,\n  wrapLogMessage: false,\n});\n\nexport const useLogListContextData = (key: keyof LogListContextData) => {\n  const data: LogListContextData = useContext(LogListContext);\n  return data[key];\n};\n\nexport const useLogListContext = (): LogListContextData => {\n  return useContext(LogListContext);\n};\n\nexport const useLogIsPinned = (log: LogRowModel) => {\n  const { pinnedLogs } = useContext(LogListContext);\n  return pinnedLogs?.some((logId) => logId === log.rowId);\n};\n\nexport type LogListState = Pick<\n  LogListContextData,\n  | 'dedupStrategy'\n  | 'displayedFields'\n  | 'forceEscape'\n  | 'filterLevels'\n  | 'hasUnescapedContent'\n  | 'pinnedLogs'\n  | 'prettifyJSON'\n  | 'showUniqueLabels'\n  | 'showTime'\n  | 'sortOrder'\n  | 'syntaxHighlighting'\n  | 'wrapLogMessage'\n>;\n\nexport interface Props {\n  app: CoreApp;\n  children?: ReactNode;\n  dedupStrategy: LogsDedupStrategy;\n  displayedFields: string[];\n  filterLevels?: LogLevel[];\n  forceEscape?: boolean;\n  hasUnescapedContent?: boolean;\n  getRowContextQuery?: GetRowContextQueryFn;\n  logs: LogRowModel[];\n  logsMeta?: LogsMetaItem[];\n  logOptionsStorageKey?: string;\n  logSupportsContext?: (row: LogRowModel) => boolean;\n  onLogOptionsChange?: (option: keyof LogListState, value: string | boolean | string[]) => void;\n  onLogLineHover?: (row?: LogRowModel) => void;\n  onPermalinkClick?: (row: LogRowModel) => Promise<void>;\n  onPinLine?: (row: LogRowModel) => void;\n  onOpenContext?: (row: LogRowModel, onClose: () => void) => void;\n  onUnpinLine?: (row: LogRowModel) => void;\n  pinLineButtonTooltipTitle?: PopoverContent;\n  pinnedLogs?: string[];\n  prettifyJSON?: boolean;\n  showControls: boolean;\n  showUniqueLabels?: boolean;\n  showTime: boolean;\n  sortOrder: LogsSortOrder;\n  syntaxHighlighting?: boolean;\n  wrapLogMessage: boolean;\n}\n\nexport const LogListContextProvider = ({\n  app,\n  children,\n  dedupStrategy,\n  displayedFields,\n  filterLevels,\n  forceEscape = false,\n  hasUnescapedContent,\n  getRowContextQuery,\n  logs,\n  logsMeta,\n  logOptionsStorageKey,\n  logSupportsContext,\n  onLogOptionsChange,\n  onLogLineHover,\n  onPermalinkClick,\n  onPinLine,\n  onOpenContext,\n  onUnpinLine,\n  pinLineButtonTooltipTitle,\n  pinnedLogs,\n  prettifyJSON,\n  showControls,\n  showTime,\n  showUniqueLabels,\n  sortOrder,\n  syntaxHighlighting,\n  wrapLogMessage,\n}: Props) => {\n  const [logListState, setLogListState] = useState<LogListState>({\n    dedupStrategy,\n    displayedFields,\n    filterLevels:\n      filterLevels ?? (logOptionsStorageKey ? store.getObject(`${logOptionsStorageKey}.filterLevels`, []) : []),\n    forceEscape,\n    hasUnescapedContent,\n    pinnedLogs,\n    prettifyJSON,\n    showTime,\n    showUniqueLabels,\n    sortOrder,\n    syntaxHighlighting,\n    wrapLogMessage,\n  });\n\n  useEffect(() => {\n    // Props are updated in the context only of the panel is being externally controlled.\n    if (showControls && app !== CoreApp.PanelEditor) {\n      return;\n    }\n    const newState = {\n      ...logListState,\n      dedupStrategy,\n      showTime,\n      sortOrder,\n      syntaxHighlighting,\n      wrapLogMessage,\n    };\n    if (!shallowCompare(logListState.displayedFields, displayedFields)) {\n      newState.displayedFields = displayedFields;\n    }\n    if (!shallowCompare(logListState.pinnedLogs ?? [], pinnedLogs ?? [])) {\n      newState.pinnedLogs = pinnedLogs;\n    }\n    if (!shallowCompare(logListState, newState)) {\n      setLogListState(newState);\n    }\n  }, [\n    app,\n    dedupStrategy,\n    displayedFields,\n    logListState,\n    pinnedLogs,\n    showControls,\n    showTime,\n    sortOrder,\n    syntaxHighlighting,\n    wrapLogMessage,\n  ]);\n\n  useEffect(() => {\n    if (filterLevels === undefined) {\n      return;\n    }\n    if (!shallowCompare(logListState.filterLevels, filterLevels)) {\n      setLogListState({ ...logListState, filterLevels });\n    }\n  }, [filterLevels, logListState]);\n\n  useEffect(() => {\n    if (logListState.hasUnescapedContent !== hasUnescapedContent) {\n      setLogListState({ ...logListState, hasUnescapedContent });\n    }\n  }, [hasUnescapedContent, logListState]);\n\n  const setDedupStrategy = useCallback(\n    (dedupStrategy: LogsDedupStrategy) => {\n      setLogListState({ ...logListState, dedupStrategy });\n      onLogOptionsChange?.('dedupStrategy', dedupStrategy);\n    },\n    [logListState, onLogOptionsChange]\n  );\n\n  const setDisplayedFields = useCallback(\n    (displayedFields: string[]) => {\n      setLogListState({ ...logListState, displayedFields });\n      onLogOptionsChange?.('displayedFields', displayedFields);\n    },\n    [logListState, onLogOptionsChange]\n  );\n\n  const setForceEscape = useCallback(\n    (forceEscape: boolean) => {\n      setLogListState({ ...logListState, forceEscape });\n    },\n    [logListState]\n  );\n\n  const setFilterLevels = useCallback(\n    (filterLevels: LogLevel[]) => {\n      setLogListState({ ...logListState, filterLevels });\n      onLogOptionsChange?.('filterLevels', filterLevels);\n    },\n    [logListState, onLogOptionsChange]\n  );\n\n  const setPinnedLogs = useCallback(\n    (pinnedLogs: string[]) => {\n      setLogListState({ ...logListState, pinnedLogs });\n      onLogOptionsChange?.('pinnedLogs', pinnedLogs);\n    },\n    [logListState, onLogOptionsChange]\n  );\n\n  const setShowTime = useCallback(\n    (showTime: boolean) => {\n      setLogListState({ ...logListState, showTime });\n      onLogOptionsChange?.('showTime', showTime);\n      if (logOptionsStorageKey) {\n        store.set(`${logOptionsStorageKey}.showTime`, showTime);\n      }\n    },\n    [logListState, logOptionsStorageKey, onLogOptionsChange]\n  );\n\n  const setShowUniqueLabels = useCallback(\n    (showUniqueLabels: boolean) => {\n      setLogListState({ ...logListState, showUniqueLabels });\n      onLogOptionsChange?.('showUniqueLabels', showUniqueLabels);\n      if (logOptionsStorageKey) {\n        store.set(`${logOptionsStorageKey}.showLabels`, showUniqueLabels);\n      }\n    },\n    [logListState, logOptionsStorageKey, onLogOptionsChange]\n  );\n\n  const setPrettifyJSON = useCallback(\n    (prettifyJSON: boolean) => {\n      setLogListState({ ...logListState, prettifyJSON });\n      onLogOptionsChange?.('prettifyJSON', prettifyJSON);\n      if (logOptionsStorageKey) {\n        store.set(`${logOptionsStorageKey}.prettifyLogMessage`, prettifyJSON);\n      }\n    },\n    [logListState, logOptionsStorageKey, onLogOptionsChange]\n  );\n\n  const setSyntaxHighlighting = useCallback(\n    (syntaxHighlighting: boolean) => {\n      setLogListState({ ...logListState, syntaxHighlighting });\n      onLogOptionsChange?.('syntaxHighlighting', syntaxHighlighting);\n      if (logOptionsStorageKey) {\n        store.set(`${logOptionsStorageKey}.syntaxHighlighting`, syntaxHighlighting);\n      }\n    },\n    [logListState, logOptionsStorageKey, onLogOptionsChange]\n  );\n\n  const setSortOrder = useCallback(\n    (sortOrder: LogsSortOrder) => {\n      setLogListState({ ...logListState, sortOrder });\n      onLogOptionsChange?.('sortOrder', sortOrder);\n      if (logOptionsStorageKey) {\n        store.set(`${logOptionsStorageKey}.sortOrder`, sortOrder);\n      }\n    },\n    [logListState, logOptionsStorageKey, onLogOptionsChange]\n  );\n\n  const setWrapLogMessage = useCallback(\n    (wrapLogMessage: boolean) => {\n      setLogListState({ ...logListState, wrapLogMessage });\n      onLogOptionsChange?.('wrapLogMessage', wrapLogMessage);\n      if (logOptionsStorageKey) {\n        store.set(`${logOptionsStorageKey}.wrapLogMessage`, wrapLogMessage);\n      }\n    },\n    [logListState, logOptionsStorageKey, onLogOptionsChange]\n  );\n\n  const downloadLogs = useCallback(\n    (format: DownloadFormat) => {\n      const filteredLogs =\n        logListState.filterLevels.length === 0\n          ? logs\n          : logs.filter((log) => logListState.filterLevels.includes(log.logLevel));\n      download(format, filteredLogs, logsMeta);\n    },\n    [logListState.filterLevels, logs, logsMeta]\n  );\n\n  return (\n    <LogListContext.Provider\n      value={{\n        app,\n        dedupStrategy: logListState.dedupStrategy,\n        displayedFields: logListState.displayedFields,\n        downloadLogs,\n        filterLevels: logListState.filterLevels,\n        forceEscape: logListState.forceEscape,\n        hasUnescapedContent: logListState.hasUnescapedContent,\n        getRowContextQuery,\n        logSupportsContext,\n        onLogLineHover,\n        onPermalinkClick,\n        onPinLine,\n        onOpenContext,\n        onUnpinLine,\n        pinLineButtonTooltipTitle,\n        pinnedLogs: logListState.pinnedLogs,\n        prettifyJSON: logListState.prettifyJSON,\n        setDedupStrategy,\n        setDisplayedFields,\n        setFilterLevels,\n        setForceEscape,\n        setLogListState,\n        setPinnedLogs,\n        setPrettifyJSON,\n        setShowTime,\n        setShowUniqueLabels,\n        setSortOrder,\n        setSyntaxHighlighting,\n        setWrapLogMessage,\n        showTime: logListState.showTime,\n        showUniqueLabels: logListState.showUniqueLabels,\n        sortOrder: logListState.sortOrder,\n        syntaxHighlighting: logListState.syntaxHighlighting,\n        wrapLogMessage: logListState.wrapLogMessage,\n      }}\n    >\n      {children}\n    </LogListContext.Provider>\n  );\n};\n\nexport function isLogsSortOrder(value: unknown): value is LogsSortOrder {\n  return value === LogsSortOrder.Ascending || value === LogsSortOrder.Descending;\n}\n\nexport function isDedupStrategy(value: unknown): value is LogsDedupStrategy {\n  return (\n    value === LogsDedupStrategy.exact ||\n    value === LogsDedupStrategy.none ||\n    value === LogsDedupStrategy.numbers ||\n    value === LogsDedupStrategy.signature\n  );\n}\n","import { css } from '@emotion/css';\nimport { capitalize } from 'lodash';\nimport { MouseEvent, useCallback, useMemo } from 'react';\n\nimport { CoreApp, EventBus, LogLevel, LogsDedupDescription, LogsDedupStrategy, LogsSortOrder } from '@grafana/data';\nimport { GrafanaTheme2 } from '@grafana/data/';\nimport { config, reportInteraction } from '@grafana/runtime';\nimport { Dropdown, IconButton, Menu, useStyles2 } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { LogsVisualisationType } from '../../../explore/Logs/Logs';\nimport { DownloadFormat } from '../../utils';\n\nimport { useLogListContext } from './LogListContext';\nimport { ScrollToLogsEvent } from './virtualization';\n\ntype Props = {\n  eventBus: EventBus;\n  visualisationType?: LogsVisualisationType;\n};\n\nconst DEDUP_OPTIONS = [\n  LogsDedupStrategy.none,\n  LogsDedupStrategy.exact,\n  LogsDedupStrategy.numbers,\n  LogsDedupStrategy.signature,\n];\n\nconst FILTER_LEVELS: LogLevel[] = [\n  LogLevel.info,\n  LogLevel.debug,\n  LogLevel.trace,\n  LogLevel.warning,\n  LogLevel.error,\n  LogLevel.critical,\n];\n\nexport const LogListControls = ({ eventBus, visualisationType = 'logs' }: Props) => {\n  const styles = useStyles2(getStyles);\n  const {\n    app,\n    dedupStrategy,\n    downloadLogs,\n    filterLevels,\n    forceEscape,\n    hasUnescapedContent,\n    prettifyJSON,\n    setDedupStrategy,\n    setFilterLevels,\n    setForceEscape,\n    setPrettifyJSON,\n    setShowTime,\n    setShowUniqueLabels,\n    setSortOrder,\n    setSyntaxHighlighting,\n    setWrapLogMessage,\n    showTime,\n    showUniqueLabels,\n    sortOrder,\n    syntaxHighlighting,\n    wrapLogMessage,\n  } = useLogListContext();\n\n  const onScrollToTopClick = useCallback(() => {\n    reportInteraction('logs_log_list_controls_scroll_top_clicked');\n    eventBus.publish(\n      new ScrollToLogsEvent({\n        scrollTo: 'top',\n      })\n    );\n  }, [eventBus]);\n\n  const onScrollToBottomClick = useCallback(() => {\n    reportInteraction('logs_log_list_controls_scroll_bottom_clicked');\n    eventBus.publish(\n      new ScrollToLogsEvent({\n        scrollTo: 'bottom',\n      })\n    );\n  }, [eventBus]);\n\n  const onForceEscapeClick = useCallback(() => {\n    reportInteraction('logs_log_list_controls_force_escape_clicked');\n    setForceEscape(!forceEscape);\n  }, [forceEscape, setForceEscape]);\n\n  const onFilterLevelClick = useCallback(\n    (level?: LogLevel) => {\n      reportInteraction('logs_log_list_controls_level_clicked');\n      if (level === undefined) {\n        setFilterLevels([]);\n      } else if (!filterLevels.includes(level)) {\n        setFilterLevels([...filterLevels, level]);\n      } else {\n        setFilterLevels(filterLevels.filter((filterLevel) => filterLevel !== level));\n      }\n    },\n    [filterLevels, setFilterLevels]\n  );\n\n  const onShowTimestampsClick = useCallback(() => {\n    reportInteraction('logs_log_list_controls_show_time_clicked', {\n      show_time: !showTime,\n    });\n    setShowTime(!showTime);\n  }, [setShowTime, showTime]);\n\n  const onShowUniqueLabelsClick = useCallback(() => {\n    reportInteraction('logs_log_list_controls_show_unique_labels_clicked', {\n      show_unique_labels: showUniqueLabels,\n    });\n    setShowUniqueLabels(!showUniqueLabels);\n  }, [setShowUniqueLabels, showUniqueLabels]);\n\n  const onSortOrderClick = useCallback(() => {\n    reportInteraction('logs_log_list_controls_sort_order_clicked', {\n      order: sortOrder === LogsSortOrder.Ascending ? LogsSortOrder.Descending : LogsSortOrder.Ascending,\n    });\n    setSortOrder(sortOrder === LogsSortOrder.Ascending ? LogsSortOrder.Descending : LogsSortOrder.Ascending);\n  }, [setSortOrder, sortOrder]);\n\n  const onSetPrettifyJSONClick = useCallback(() => {\n    reportInteraction('logs_log_list_controls_prettify_json_clicked', {\n      state: !prettifyJSON,\n    });\n    setPrettifyJSON(!prettifyJSON);\n  }, [prettifyJSON, setPrettifyJSON]);\n\n  const onSyntaxHightlightingClick = useCallback(() => {\n    reportInteraction('logs_log_list_controls_syntax_clicked', {\n      state: !syntaxHighlighting,\n    });\n    setSyntaxHighlighting(!syntaxHighlighting);\n  }, [setSyntaxHighlighting, syntaxHighlighting]);\n\n  const onWrapLogMessageClick = useCallback(\n    (e: MouseEvent) => {\n      e.preventDefault();\n      reportInteraction('logs_log_list_controls_wrap_clicked', {\n        state: !wrapLogMessage,\n      });\n      setWrapLogMessage(!wrapLogMessage);\n    },\n    [setWrapLogMessage, wrapLogMessage]\n  );\n\n  const deduplicationMenu = useMemo(\n    () => (\n      <Menu>\n        {DEDUP_OPTIONS.map((option) => (\n          <Menu.Item\n            key={option}\n            className={dedupStrategy === option ? styles.menuItemActive : undefined}\n            description={LogsDedupDescription[option]}\n            label={capitalize(option)}\n            onClick={() => setDedupStrategy(option)}\n          />\n        ))}\n      </Menu>\n    ),\n    [dedupStrategy, setDedupStrategy, styles.menuItemActive]\n  );\n\n  const filterLevelsMenu = useMemo(\n    () => (\n      <Menu>\n        <Menu.Item\n          key={'all'}\n          className={filterLevels.length === 0 ? styles.menuItemActive : undefined}\n          label={t('logs.logs-controls.display-level-all', 'All levels')}\n          onClick={() => onFilterLevelClick()}\n        />\n        {FILTER_LEVELS.map((level) => (\n          <Menu.Item\n            key={level}\n            className={filterLevels.includes(level) ? styles.menuItemActive : undefined}\n            label={capitalize(level)}\n            onClick={() => onFilterLevelClick(level)}\n          />\n        ))}\n      </Menu>\n    ),\n    [filterLevels, onFilterLevelClick, styles.menuItemActive]\n  );\n\n  const downloadMenu = useMemo(\n    () => (\n      <Menu>\n        <Menu.Item\n          label={t('logs.logs-controls.download-logs.txt', 'txt')}\n          onClick={() => downloadLogs(DownloadFormat.Text)}\n        />\n        <Menu.Item\n          label={t('logs.logs-controls.download-logs.json', 'json')}\n          onClick={() => downloadLogs(DownloadFormat.Json)}\n        />\n        <Menu.Item\n          label={t('logs.logs-controls.download-logs.csv', 'csv')}\n          onClick={() => downloadLogs(DownloadFormat.CSV)}\n        />\n      </Menu>\n    ),\n    [downloadLogs]\n  );\n\n  const inDashboard = app === CoreApp.Dashboard || app === CoreApp.PanelEditor || app === CoreApp.PanelViewer;\n\n  return (\n    <div className={styles.navContainer}>\n      {visualisationType === 'logs' && (\n        <IconButton\n          name=\"arrow-down\"\n          className={styles.controlButton}\n          variant=\"secondary\"\n          onClick={onScrollToBottomClick}\n          tooltip={t('logs.logs-controls.scroll-bottom', 'Scroll to bottom')}\n          size=\"lg\"\n        />\n      )}\n      {!inDashboard ? (\n        <>\n          <IconButton\n            name={sortOrder === LogsSortOrder.Descending ? 'sort-amount-up' : 'sort-amount-down'}\n            className={styles.controlButton}\n            onClick={onSortOrderClick}\n            tooltip={\n              sortOrder === LogsSortOrder.Descending\n                ? t('logs.logs-controls.newest-first', 'Newest logs first')\n                : t('logs.logs-controls.oldest-first', 'Oldest logs first')\n            }\n            size=\"lg\"\n          />\n          {visualisationType === 'logs' && (\n            <>\n              <Dropdown overlay={deduplicationMenu} placement=\"auto-end\">\n                <IconButton\n                  name={'filter'}\n                  className={\n                    dedupStrategy !== LogsDedupStrategy.none ? styles.controlButtonActive : styles.controlButton\n                  }\n                  tooltip={t('logs.logs-controls.deduplication', 'Deduplication')}\n                  size=\"lg\"\n                />\n              </Dropdown>\n              <Dropdown overlay={filterLevelsMenu} placement=\"auto-end\">\n                <IconButton\n                  name={'gf-logs'}\n                  className={\n                    filterLevels && filterLevels.length > 0 ? styles.controlButtonActive : styles.controlButton\n                  }\n                  tooltip={t('logs.logs-controls.display-level', 'Display levels')}\n                  size=\"lg\"\n                />\n              </Dropdown>\n              <IconButton\n                name=\"clock-nine\"\n                aria-pressed={showTime}\n                className={showTime ? styles.controlButtonActive : styles.controlButton}\n                onClick={onShowTimestampsClick}\n                tooltip={\n                  showTime\n                    ? t('logs.logs-controls.hide-timestamps', 'Hide timestamps')\n                    : t('logs.logs-controls.show-timestamps', 'Show timestamps')\n                }\n                size=\"lg\"\n              />\n              {showUniqueLabels !== undefined && (\n                <IconButton\n                  name=\"tag-alt\"\n                  aria-pressed={showUniqueLabels}\n                  className={showUniqueLabels ? styles.controlButtonActive : styles.controlButton}\n                  onClick={onShowUniqueLabelsClick}\n                  tooltip={\n                    showUniqueLabels\n                      ? t('logs.logs-controls.hide-unique-labels', 'Hide unique labels')\n                      : t('logs.logs-controls.show-unique-labels', 'Show unique labels')\n                  }\n                  size=\"lg\"\n                />\n              )}\n              <IconButton\n                name=\"wrap-text\"\n                className={wrapLogMessage ? styles.controlButtonActive : styles.controlButton}\n                aria-pressed={wrapLogMessage}\n                onClick={onWrapLogMessageClick}\n                tooltip={\n                  wrapLogMessage\n                    ? t('logs.logs-controls.unwrap-lines', 'Unwrap lines')\n                    : t('logs.logs-controls.wrap-lines', 'Wrap lines')\n                }\n                size=\"lg\"\n              />\n              {prettifyJSON !== undefined && (\n                <IconButton\n                  name=\"brackets-curly\"\n                  aria-pressed={prettifyJSON}\n                  className={prettifyJSON ? styles.controlButtonActive : styles.controlButton}\n                  onClick={onSetPrettifyJSONClick}\n                  tooltip={\n                    prettifyJSON\n                      ? t('logs.logs-controls.disable-prettify-json', 'Collapse JSON logs')\n                      : t('logs.logs-controls.prettify-json', 'Expand JSON logs')\n                  }\n                  size=\"lg\"\n                />\n              )}\n              {syntaxHighlighting !== undefined && (\n                <IconButton\n                  name=\"brackets-curly\"\n                  className={syntaxHighlighting ? styles.controlButtonActive : styles.controlButton}\n                  aria-pressed={syntaxHighlighting}\n                  onClick={onSyntaxHightlightingClick}\n                  tooltip={\n                    syntaxHighlighting\n                      ? t('logs.logs-controls.disable-highlighting', 'Disable highlighting')\n                      : t('logs.logs-controls.enable-highlighting', 'Enable highlighting')\n                  }\n                  size=\"lg\"\n                />\n              )}\n              {hasUnescapedContent && (\n                <IconButton\n                  name=\"enter\"\n                  aria-pressed={forceEscape}\n                  className={forceEscape ? styles.controlButtonActive : styles.controlButton}\n                  onClick={onForceEscapeClick}\n                  tooltip={\n                    forceEscape\n                      ? t('logs.logs-controls.remove-escaping', 'Remove escaping')\n                      : t(\n                          'logs.logs-controls.escape-newlines',\n                          'Fix incorrectly escaped newline and tab sequences in log lines'\n                        )\n                  }\n                  size=\"lg\"\n                />\n              )}\n            </>\n          )}\n          {!config.exploreHideLogsDownload && (\n            <>\n              <div className={styles.divider} />\n              <Dropdown overlay={downloadMenu} placement=\"auto-end\">\n                <IconButton\n                  name=\"download-alt\"\n                  className={styles.controlButton}\n                  aria-pressed={wrapLogMessage}\n                  tooltip={t('logs.logs-controls.download', 'Download logs')}\n                  size=\"lg\"\n                />\n              </Dropdown>\n            </>\n          )}\n        </>\n      ) : (\n        <Dropdown overlay={filterLevelsMenu} placement=\"auto-end\">\n          <IconButton\n            name={'gf-logs'}\n            className={filterLevels && filterLevels.length > 0 ? styles.controlButtonActive : styles.controlButton}\n            tooltip={t('logs.logs-controls.display-level', 'Display levels')}\n            size=\"lg\"\n          />\n        </Dropdown>\n      )}\n      {visualisationType === 'logs' && (\n        <IconButton\n          name=\"arrow-up\"\n          data-testid=\"scrollToTop\"\n          className={styles.scrollToTopButton}\n          variant=\"secondary\"\n          onClick={onScrollToTopClick}\n          tooltip={t('logs.logs-controls.scroll-top', 'Scroll to top')}\n          size=\"lg\"\n        />\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    navContainer: css({\n      maxHeight: '100%',\n      display: 'flex',\n      gap: theme.spacing(3),\n      flexDirection: 'column',\n      justifyContent: 'flex-start',\n      width: theme.spacing(4),\n      paddingTop: theme.spacing(0.75),\n      paddingLeft: theme.spacing(1),\n      borderLeft: `solid 1px ${theme.colors.border.medium}`,\n    }),\n    scrollToTopButton: css({\n      margin: 0,\n      marginTop: 'auto',\n      color: theme.colors.text.secondary,\n      height: theme.spacing(2),\n    }),\n    controlButton: css({\n      margin: 0,\n      color: theme.colors.text.secondary,\n      height: theme.spacing(2),\n    }),\n    divider: css({\n      borderTop: `solid 1px ${theme.colors.border.medium}`,\n      height: 1,\n      marginTop: theme.spacing(-0.25),\n      marginBottom: theme.spacing(-1.75),\n    }),\n    controlButtonActive: css({\n      margin: 0,\n      color: theme.colors.text.secondary,\n      height: theme.spacing(2),\n      '&:after': {\n        display: 'block',\n        content: '\" \"',\n        position: 'absolute',\n        height: 2,\n        borderRadius: theme.shape.radius.default,\n        bottom: theme.spacing(-1),\n        backgroundImage: theme.colors.gradients.brandHorizontal,\n        width: '95%',\n        opacity: 1,\n      },\n    }),\n    menuItemActive: css({\n      '&:before': {\n        content: '\"\"',\n        position: 'absolute',\n        left: 0,\n        top: theme.spacing(0.5),\n        height: `calc(100% - ${theme.spacing(1)})`,\n        width: '2px',\n        backgroundColor: theme.colors.warning.main,\n      },\n    }),\n  };\n};\n","import { BusEventWithPayload, GrafanaTheme2 } from '@grafana/data';\n\nimport { LOG_LINE_BODY_FIELD_NAME } from '../LogDetailsBody';\n\nimport { getDisplayedFieldValue } from './LogLine';\nimport { LogListModel } from './processing';\n\nlet ctx: CanvasRenderingContext2D | null = null;\nlet gridSize = 8;\nlet paddingBottom = gridSize * 0.75;\nlet lineHeight = 22;\nlet measurementMode: 'canvas' | 'dom' = 'canvas';\nconst iconWidth = 24;\n\n// Controls the space between fields in the log line, timestamp, level, displayed fields, and log line body\nexport const FIELD_GAP_MULTIPLIER = 1.5;\nconst LOG_LIST_NAVIGATION_WIDTH = 28;\n\nexport const getLineHeight = () => lineHeight;\n\nexport function init(theme: GrafanaTheme2) {\n  const font = `${theme.typography.fontSize}px ${theme.typography.fontFamilyMonospace}`;\n  const letterSpacing = theme.typography.body.letterSpacing;\n\n  initDOMmeasurement(font, letterSpacing);\n  initCanvasMeasurement(font, letterSpacing);\n\n  gridSize = theme.spacing.gridSize;\n  paddingBottom = gridSize * 0.75;\n  lineHeight = theme.typography.fontSize * theme.typography.body.lineHeight;\n\n  widthMap = new Map<number, number>();\n  resetLogLineSizes();\n\n  determineMeasurementMode();\n\n  return true;\n}\n\nfunction determineMeasurementMode() {\n  if (!ctx) {\n    measurementMode = 'dom';\n    return;\n  }\n  const canvasCharWidth = ctx.measureText('e').width;\n  const domCharWidth = measureTextWidthWithDOM('e');\n  const diff = domCharWidth - canvasCharWidth;\n  if (diff >= 0.1) {\n    console.warn('Virtualized log list: falling back to DOM for measurement');\n    measurementMode = 'dom';\n  }\n}\n\nfunction initCanvasMeasurement(font: string, letterSpacing: string | undefined) {\n  const canvas = document.createElement('canvas');\n  ctx = canvas.getContext('2d');\n  if (!ctx) {\n    return;\n  }\n  ctx.font = font;\n  ctx.fontKerning = 'normal';\n  ctx.fontStretch = 'normal';\n  ctx.fontVariantCaps = 'normal';\n  ctx.textRendering = 'optimizeLegibility';\n  if (letterSpacing) {\n    ctx.letterSpacing = letterSpacing;\n  }\n}\n\nconst span = document.createElement('span');\nfunction initDOMmeasurement(font: string, letterSpacing: string | undefined) {\n  span.style.font = font;\n  span.style.visibility = 'hidden';\n  span.style.position = 'absolute';\n  span.style.wordBreak = 'break-all';\n  if (letterSpacing) {\n    span.style.letterSpacing = letterSpacing;\n  }\n}\n\nlet widthMap = new Map<number, number>();\nexport function measureTextWidth(text: string): number {\n  if (!ctx) {\n    throw new Error(`Measuring context canvas is not initialized. Call init() before.`);\n  }\n  const key = text.length;\n\n  const storedWidth = widthMap.get(key);\n  if (storedWidth) {\n    return storedWidth;\n  }\n\n  const width = measurementMode === 'canvas' ? ctx.measureText(text).width : measureTextWidthWithDOM(text);\n  widthMap.set(key, width);\n\n  return width;\n}\n\nfunction measureTextWidthWithDOM(text: string) {\n  span.textContent = text;\n\n  document.body.appendChild(span);\n  const width = span.getBoundingClientRect().width;\n  document.body.removeChild(span);\n\n  return width;\n}\n\nexport function measureTextHeight(text: string, maxWidth: number, beforeWidth = 0) {\n  let logLines = 0;\n  const charWidth = measureTextWidth('e');\n  let logLineCharsLength = Math.round(maxWidth / charWidth);\n  const firstLineCharsLength = Math.floor((maxWidth - beforeWidth) / charWidth) - 2 * charWidth;\n  const textLines = text.split('\\n');\n\n  // Skip unnecessary measurements\n  if (textLines.length === 1 && text.length < firstLineCharsLength) {\n    return {\n      lines: 1,\n      height: lineHeight + paddingBottom,\n    };\n  }\n\n  const availableWidth = maxWidth - beforeWidth;\n  for (const textLine of textLines) {\n    for (let start = 0; start < textLine.length; ) {\n      let testLogLine: string;\n      let width = 0;\n      let delta = 0;\n      do {\n        testLogLine = textLine.substring(start, start + logLineCharsLength - delta);\n        width = measureTextWidth(testLogLine);\n        delta += 1;\n      } while (width >= availableWidth);\n      if (beforeWidth) {\n        beforeWidth = 0;\n      }\n      logLines += 1;\n      start += testLogLine.length;\n    }\n  }\n\n  const height = logLines * lineHeight + paddingBottom;\n\n  return {\n    lines: logLines,\n    height,\n  };\n}\n\ninterface DisplayOptions {\n  wrap: boolean;\n  showControls: boolean;\n  showTime: boolean;\n}\n\nexport function getLogLineSize(\n  logs: LogListModel[],\n  container: HTMLDivElement | null,\n  displayedFields: string[],\n  { wrap, showControls, showTime }: DisplayOptions,\n  index: number\n) {\n  if (!container) {\n    return 0;\n  }\n  // !logs[index] means the line is not yet loaded by infinite scrolling\n  if (!wrap || !logs[index]) {\n    return lineHeight + paddingBottom;\n  }\n  const storedSize = retrieveLogLineSize(logs[index].uid, container);\n  if (storedSize) {\n    return storedSize;\n  }\n\n  let textToMeasure = '';\n  const gap = gridSize * FIELD_GAP_MULTIPLIER;\n  let optionsWidth = 0;\n  if (showControls) {\n    optionsWidth += LOG_LIST_NAVIGATION_WIDTH;\n  }\n  if (showTime) {\n    optionsWidth += gap;\n    textToMeasure += logs[index].timestamp;\n  }\n  // When logs are unwrapped, we want an empty column space to align with other log lines.\n  if (logs[index].displayLevel || !wrap) {\n    optionsWidth += gap;\n    textToMeasure += logs[index].displayLevel ?? '';\n  }\n  for (const field of displayedFields) {\n    textToMeasure = getDisplayedFieldValue(field, logs[index]) + textToMeasure;\n  }\n  if (!displayedFields.length) {\n    textToMeasure += logs[index].body;\n  }\n\n  const { height } = measureTextHeight(textToMeasure, getLogContainerWidth(container), optionsWidth);\n  return height;\n}\n\nexport interface LogFieldDimension {\n  field: string;\n  width: number;\n}\n\nexport const calculateFieldDimensions = (logs: LogListModel[], displayedFields: string[] = []) => {\n  if (!logs.length) {\n    return [];\n  }\n  let timestampWidth = 0;\n  let levelWidth = 0;\n  const fieldWidths: Record<string, number> = {};\n  for (let i = 0; i < logs.length; i++) {\n    let width = measureTextWidth(logs[i].timestamp);\n    if (width > timestampWidth) {\n      timestampWidth = Math.round(width);\n    }\n    width = measureTextWidth(logs[i].displayLevel);\n    if (width > levelWidth) {\n      levelWidth = Math.round(width);\n    }\n    for (const field of displayedFields) {\n      width = measureTextWidth(getDisplayedFieldValue(field, logs[i]));\n      fieldWidths[field] = !fieldWidths[field] || width > fieldWidths[field] ? Math.round(width) : fieldWidths[field];\n    }\n  }\n  const dimensions: LogFieldDimension[] = [\n    {\n      field: 'timestamp',\n      width: timestampWidth,\n    },\n    {\n      field: 'level',\n      width: levelWidth,\n    },\n  ];\n  for (const field in fieldWidths) {\n    // Skip the log line when it's a displayed field\n    if (field === LOG_LINE_BODY_FIELD_NAME) {\n      continue;\n    }\n    dimensions.push({\n      field,\n      width: fieldWidths[field],\n    });\n  }\n  return dimensions;\n};\n\nexport function hasUnderOrOverflow(element: HTMLDivElement, calculatedHeight?: number): number | null {\n  const height = calculatedHeight ?? element.clientHeight;\n  if (element.scrollHeight > height) {\n    return element.scrollHeight;\n  }\n  const child = element.children[1];\n  if (child instanceof HTMLDivElement && child.clientHeight < height) {\n    return child.clientHeight;\n  }\n  return null;\n}\n\nconst scrollBarWidth = getScrollbarWidth();\n\nexport function getLogContainerWidth(container: HTMLDivElement) {\n  return container.clientWidth - scrollBarWidth - iconWidth;\n}\n\nexport function getScrollbarWidth() {\n  const hiddenDiv = document.createElement('div');\n\n  hiddenDiv.style.width = '100px';\n  hiddenDiv.style.height = '100px';\n  hiddenDiv.style.overflow = 'scroll';\n  hiddenDiv.style.position = 'absolute';\n  hiddenDiv.style.top = '-9999px';\n\n  document.body.appendChild(hiddenDiv);\n  const width = hiddenDiv.offsetWidth - hiddenDiv.clientWidth;\n  document.body.removeChild(hiddenDiv);\n\n  return width;\n}\n\nlet logLineSizesMap = new Map<string, number>();\nexport function resetLogLineSizes() {\n  logLineSizesMap = new Map<string, number>();\n}\n\nexport function storeLogLineSize(id: string, container: HTMLDivElement, height: number) {\n  const key = `${id}_${getLogContainerWidth(container)}`;\n  logLineSizesMap.set(key, height);\n}\n\nexport function retrieveLogLineSize(id: string, container: HTMLDivElement) {\n  const key = `${id}_${getLogContainerWidth(container)}`;\n  return logLineSizesMap.get(key);\n}\n\nexport interface ScrollToLogsEventPayload {\n  scrollTo: 'top' | 'bottom';\n}\n\nexport class ScrollToLogsEvent extends BusEventWithPayload<ScrollToLogsEventPayload> {\n  static type = 'logs-panel-scroll-to';\n}\n"],"names":["LogLineMenu","log","styles","getRowContextQuery","onOpenContext","onPermalinkClick","onPinLine","onUnpinLine","logSupportsContext","pinned","menuRef","copyLogLine","copyLinkToLogLine","shouldlogSupportsContext","showContext","event","togglePinning","menu","Menu","Dropdown","IconButton","LogLine","displayedFields","index","style","onOverflow","showTime","variant","wrapLogMessage","onLogLineHover","logLineRef","handleMouseOver","calculatedHeight","actualHeight","Log","field","LogLineBody","getDisplayedFieldValue","syntaxHighlighting","highlight","LogMessageAnsi","fieldName","getGridTemplateColumns","dimensions","dimension","getStyles","theme","colors","tinycolor","LogLineMessage","children","onClick","handleOverflow","loadMore","logs","scrollElement","setInitialScrollPosition","sortOrder","timeRange","timeZone","infiniteLoaderState","setInfiniteLoaderState","autoScroll","setAutoScroll","prevLogs","usePrevious","prevSortOrder","lastScroll","lastEvent","countRef","lastLogOfPage","onLoadMore","newRange","config","handleScroll","scrollDirection","Renderer","getMessageFromInfiniteLoaderState","getLogLineVariant","onItemsRendered","props","lastLogIndex","preScrollIndex","getItemKey","itemCount","state","order","Spinner","prevLog","uid","logsGrammar","generateLogGrammar","labels","preProcessLogs","escape","getFieldLinks","grammar","preProcessLog","body","timestamp","logLevelToDisplayLevel","level","LogList","app","containerElement","dedupStrategy","eventBus","filterLevels","initialScrollPosition","logOptionsStorageKey","logsMeta","onLogOptionsChange","pinLineButtonTooltipTitle","pinnedLogs","showControls","store","LogListContext","LogListComponent","EventBus","forceEscape","processedLogs","setProcessedLogs","listHeight","setListHeight","listRef","widthRef","scrollRef","subscription","e","handleScrollToEvent","handleResize","id","height","handleScrollPosition","filteredLogs","LogListControls","columns","_","logsCount","list","useLogListContextData","key","useLogListContext","useLogIsPinned","logId","LogListContextProvider","hasUnescapedContent","prettifyJSON","showUniqueLabels","logListState","setLogListState","newState","setDedupStrategy","setDisplayedFields","setForceEscape","setFilterLevels","setPinnedLogs","setShowTime","setShowUniqueLabels","setPrettifyJSON","setSyntaxHighlighting","setSortOrder","setWrapLogMessage","downloadLogs","format","isLogsSortOrder","value","isDedupStrategy","DEDUP_OPTIONS","FILTER_LEVELS","visualisationType","onScrollToTopClick","onScrollToBottomClick","onForceEscapeClick","onFilterLevelClick","filterLevel","onShowTimestampsClick","onShowUniqueLabelsClick","onSortOrderClick","onSetPrettifyJSONClick","onSyntaxHightlightingClick","onWrapLogMessageClick","deduplicationMenu","option","filterLevelsMenu","downloadMenu","inDashboard","ctx","gridSize","paddingBottom","lineHeight","measurementMode","iconWidth","FIELD_GAP_MULTIPLIER","LOG_LIST_NAVIGATION_WIDTH","getLineHeight","init","font","letterSpacing","initDOMmeasurement","initCanvasMeasurement","widthMap","resetLogLineSizes","determineMeasurementMode","canvasCharWidth","measureTextWidthWithDOM","span","measureTextWidth","text","storedWidth","width","measureTextHeight","maxWidth","beforeWidth","logLines","charWidth","logLineCharsLength","firstLineCharsLength","textLines","availableWidth","textLine","start","testLogLine","delta","getLogLineSize","container","wrap","storedSize","retrieveLogLineSize","textToMeasure","gap","optionsWidth","getLogContainerWidth","calculateFieldDimensions","timestampWidth","levelWidth","fieldWidths","i","hasUnderOrOverflow","element","child","scrollBarWidth","getScrollbarWidth","hiddenDiv","logLineSizesMap","storeLogLineSize","ScrollToLogsEvent"],"sourceRoot":""}