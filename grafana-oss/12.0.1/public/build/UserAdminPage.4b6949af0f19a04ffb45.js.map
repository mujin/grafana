{"version":3,"file":"UserAdminPage.4b6949af0f19a04ffb45.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/RolePicker/UserRolePicker.tsx","webpack://grafana/./public/app/features/admin/OrgRolePicker.tsx","webpack://grafana/./public/app/features/admin/UserLdapSyncInfo.tsx","webpack://grafana/./public/app/core/components/Select/OrgPicker.tsx","webpack://grafana/./public/app/features/admin/UserOrgs.tsx","webpack://grafana/./public/app/features/admin/UserPermissions.tsx","webpack://grafana/./public/app/features/admin/UserProfile.tsx","webpack://grafana/./public/app/features/admin/UserSessions.tsx","webpack://grafana/./public/app/features/admin/UserAdminPage.tsx"],"sourcesContent":["import { useEffect } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { contextSrv } from 'app/core/core';\nimport { Role, OrgRole, AccessControlAction } from 'app/types';\n\nimport { RolePicker } from './RolePicker';\nimport { fetchUserRoles, updateUserRoles } from './api';\n\nexport interface Props {\n  basicRole: OrgRole;\n  roles?: Role[];\n  userId: number;\n  orgId?: number;\n  onBasicRoleChange: (newRole: OrgRole) => void;\n  roleOptions: Role[];\n  disabled?: boolean;\n  basicRoleDisabled?: boolean;\n  basicRoleDisabledMessage?: string;\n  /**\n   * Set whether the component should send a request with the new roles to the\n   * backend in UserRolePicker.onRolesChange (apply=false), or call {@link onApplyRoles}\n   * with the updated list of roles (apply=true).\n   *\n   * Besides it sets the RolePickerMenu's Button title to\n   *   * `Update` in case apply equals false\n   *   * `Apply` in case apply equals true\n   *\n   * @default false\n   */\n  apply?: boolean;\n  onApplyRoles?: (newRoles: Role[], userId: number, orgId: number | undefined) => void;\n  pendingRoles?: Role[];\n  maxWidth?: string | number;\n  width?: string | number;\n  isLoading?: boolean;\n}\n\nexport const UserRolePicker = ({\n  basicRole,\n  roles,\n  userId,\n  orgId,\n  onBasicRoleChange,\n  roleOptions,\n  disabled,\n  basicRoleDisabled,\n  basicRoleDisabledMessage,\n  apply = false,\n  onApplyRoles,\n  pendingRoles,\n  maxWidth,\n  width,\n  isLoading,\n}: Props) => {\n  const [{ loading, value: appliedRoles = roles || [] }, getUserRoles] = useAsyncFn(async () => {\n    try {\n      if (roles) {\n        return roles;\n      }\n      if (apply && Boolean(pendingRoles?.length)) {\n        return pendingRoles;\n      }\n\n      if (contextSrv.hasPermission(AccessControlAction.ActionUserRolesList) && userId > 0) {\n        return await fetchUserRoles(userId, orgId);\n      }\n    } catch (e) {\n      // TODO handle error\n      console.error('Error loading options');\n    }\n    return [];\n  }, [orgId, userId, pendingRoles, roles]);\n\n  useEffect(() => {\n    // only load roles when there is an Org selected\n    if (orgId) {\n      getUserRoles();\n    }\n  }, [getUserRoles, orgId]);\n\n  const onRolesChange = async (roles: Role[]) => {\n    if (!apply) {\n      await updateUserRoles(roles, userId, orgId);\n      await getUserRoles();\n    } else if (onApplyRoles) {\n      onApplyRoles(roles, userId, orgId);\n    }\n  };\n\n  const canUpdateRoles =\n    contextSrv.hasPermission(AccessControlAction.ActionUserRolesAdd) &&\n    contextSrv.hasPermission(AccessControlAction.ActionUserRolesRemove);\n\n  return (\n    <RolePicker\n      appliedRoles={appliedRoles}\n      basicRole={basicRole}\n      onRolesChange={onRolesChange}\n      onBasicRoleChange={onBasicRoleChange}\n      roleOptions={roleOptions}\n      isLoading={loading || isLoading}\n      disabled={disabled}\n      basicRoleDisabled={basicRoleDisabled}\n      basicRoleDisabledMessage={basicRoleDisabledMessage}\n      showBasicRole\n      apply={apply}\n      canUpdateRoles={canUpdateRoles}\n      maxWidth={maxWidth}\n      width={width}\n    />\n  );\n};\n","import { OrgRole } from '@grafana/data';\nimport { Select } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\ninterface Props {\n  value: OrgRole;\n  disabled?: boolean;\n  'aria-label'?: string;\n  inputId?: string;\n  onChange: (role: OrgRole) => void;\n  autoFocus?: boolean;\n  width?: number | 'auto';\n}\n\nconst basicRoles = Object.values(OrgRole).filter((r) => r !== OrgRole.None);\nconst options = basicRoles.map((r) => ({ label: r, value: r }));\n\nexport function OrgRolePicker({ value, onChange, 'aria-label': ariaLabel, inputId, autoFocus, ...restProps }: Props) {\n  return (\n    <Select\n      inputId={inputId}\n      value={value}\n      options={options}\n      onChange={(val) => onChange(val.value ?? OrgRole.None)}\n      placeholder={t('admin.org-role-picker.placeholder-choose-role', 'Choose role...')}\n      aria-label={ariaLabel}\n      autoFocus={autoFocus}\n      {...restProps}\n    />\n  );\n}\n","import { PureComponent } from 'react';\n\nimport { dateTimeFormat } from '@grafana/data';\nimport { Button, LinkButton } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { Trans, t } from 'app/core/internationalization';\nimport { AccessControlAction, SyncInfo, UserDTO } from 'app/types';\n\nimport { TagBadge } from '../../core/components/TagFilter/TagBadge';\n\ninterface Props {\n  ldapSyncInfo: SyncInfo;\n  user: UserDTO;\n  onUserSync: () => void;\n}\n\ninterface State {}\n\nconst format = 'dddd YYYY-MM-DD HH:mm zz';\nconst debugLDAPMappingBaseURL = '/admin/authentication/ldap';\n\nexport class UserLdapSyncInfo extends PureComponent<Props, State> {\n  onUserSync = () => {\n    this.props.onUserSync();\n  };\n\n  render() {\n    const { ldapSyncInfo, user } = this.props;\n    const nextSyncSuccessful = ldapSyncInfo && ldapSyncInfo.nextSync;\n    const nextSyncTime = nextSyncSuccessful ? dateTimeFormat(ldapSyncInfo.nextSync, { format }) : '';\n    const debugLDAPMappingURL = `${debugLDAPMappingBaseURL}?user=${user && user.login}`;\n    const canReadLDAPUser = contextSrv.hasPermission(AccessControlAction.LDAPUsersRead);\n    const canSyncLDAPUser = contextSrv.hasPermission(AccessControlAction.LDAPUsersSync);\n\n    return (\n      <>\n        <h3 className=\"page-heading\">\n          <Trans i18nKey=\"admin.ldap-sync.title\">LDAP Synchronisation</Trans>\n        </h3>\n        <div className=\"gf-form-group\">\n          <div className=\"gf-form\">\n            <table className=\"filter-table form-inline\">\n              <tbody>\n                <tr>\n                  <td>\n                    <Trans i18nKey=\"admin.ldap-sync.external-sync-label\">External sync</Trans>\n                  </td>\n                  <td>\n                    <Trans i18nKey=\"admin.ldap-sync.external-sync-description\">\n                      User synced via LDAP. Some changes must be done in LDAP or mappings.\n                    </Trans>\n                  </td>\n                  <td>\n                    <TagBadge\n                      label={t('admin.user-ldap-sync-info.label-ldap', 'LDAP')}\n                      removeIcon={false}\n                      count={0}\n                      onClick={undefined}\n                    />\n                  </td>\n                </tr>\n                <tr>\n                  <td>\n                    <Trans i18nKey=\"admin.ldap-sync.next-sync-label\">Next scheduled synchronization</Trans>\n                  </td>\n                  <td colSpan={2}>\n                    {ldapSyncInfo.enabled ? (\n                      nextSyncTime\n                    ) : (\n                      <Trans i18nKey=\"admin.ldap-sync.not-enabled\">Not enabled</Trans>\n                    )}\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n          <div className=\"gf-form-button-row\">\n            {canSyncLDAPUser && (\n              <Button variant=\"secondary\" onClick={this.onUserSync}>\n                <Trans i18nKey=\"admin.ldap-sync.sync-button\">Sync user</Trans>\n              </Button>\n            )}\n            {canReadLDAPUser && (\n              <LinkButton variant=\"secondary\" href={debugLDAPMappingURL}>\n                <Trans i18nKey=\"admin.ldap-sync.debug-button\">Debug LDAP Mapping</Trans>\n              </LinkButton>\n            )}\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n","import { useEffect, useState } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { SelectableValue } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { AsyncSelect } from '@grafana/ui';\nimport { Organization, UserOrg } from 'app/types';\n\nimport { t } from '../../internationalization';\n\nexport type OrgSelectItem = SelectableValue<Organization>;\n\nexport interface Props {\n  onSelected: (org: OrgSelectItem) => void;\n  className?: string;\n  inputId?: string;\n  autoFocus?: boolean;\n  excludeOrgs?: UserOrg[];\n  defaultOrganization?: Organization;\n}\n\nfunction orgToSelectItem(org: Organization): OrgSelectItem {\n  return {\n    value: org,\n    label: org.name,\n  };\n}\n\nexport function OrgPicker({ onSelected, className, inputId, autoFocus, excludeOrgs, defaultOrganization }: Props) {\n  const [selected, setSelected] = useState<OrgSelectItem | undefined>(\n    defaultOrganization ? orgToSelectItem(defaultOrganization) : undefined\n  );\n  // For whatever reason the autoFocus prop doesn't seem to work\n  // with AsyncSelect, hence this workaround. Maybe fixed in a later version?\n  useEffect(() => {\n    if (autoFocus && inputId) {\n      document.getElementById(inputId)?.focus();\n    }\n  }, [autoFocus, inputId]);\n\n  const [orgOptionsState, getOrgOptions] = useAsyncFn(async () => {\n    const orgs: Organization[] = await getBackendSrv().get('/api/orgs');\n    const allOrgs = orgs.map(orgToSelectItem);\n    if (excludeOrgs) {\n      let idArray = excludeOrgs.map((anOrg) => anOrg.orgId);\n      return allOrgs.filter((item) => {\n        return item.value !== undefined && !idArray.includes(item.value.id);\n      });\n    } else {\n      return allOrgs;\n    }\n  });\n\n  return (\n    <AsyncSelect\n      inputId={inputId}\n      className={className}\n      isLoading={orgOptionsState.loading}\n      defaultOptions={true}\n      loadOptions={getOrgOptions}\n      filterOption={(option, rawInput) => {\n        const input = rawInput.toLowerCase();\n        return !!option.value?.name.toLowerCase().includes(input);\n      }}\n      onChange={(item) => {\n        onSelected(item);\n        setSelected(item);\n      }}\n      value={selected}\n      placeholder={t('org-picker.select-placeholder', 'Select organization')}\n      noOptionsMessage=\"No organizations found\"\n    />\n  );\n}\n","import { css, cx } from '@emotion/css';\nimport { createRef, PureComponent, ReactElement } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport {\n  Button,\n  ConfirmButton,\n  Field,\n  Icon,\n  Modal,\n  stylesFactory,\n  Themeable2,\n  Tooltip,\n  useStyles2,\n  withTheme2,\n  Stack,\n} from '@grafana/ui';\nimport { UserRolePicker } from 'app/core/components/RolePicker/UserRolePicker';\nimport { fetchRoleOptions, updateUserRoles } from 'app/core/components/RolePicker/api';\nimport { OrgPicker, OrgSelectItem } from 'app/core/components/Select/OrgPicker';\nimport { contextSrv } from 'app/core/core';\nimport { t, Trans } from 'app/core/internationalization';\nimport { AccessControlAction, Organization, OrgRole, Role, UserDTO, UserOrg } from 'app/types';\n\nimport { OrgRolePicker } from './OrgRolePicker';\n\ninterface Props {\n  orgs: UserOrg[];\n  user?: UserDTO;\n  isExternalUser?: boolean;\n\n  onOrgRemove: (orgId: number) => void;\n  onOrgRoleChange: (orgId: number, newRole: OrgRole) => void;\n  onOrgAdd: (orgId: number, role: OrgRole) => void;\n}\n\ninterface State {\n  showAddOrgModal: boolean;\n}\n\nexport class UserOrgs extends PureComponent<Props, State> {\n  addToOrgButtonRef = createRef<HTMLButtonElement>();\n  state = {\n    showAddOrgModal: false,\n  };\n\n  showOrgAddModal = () => {\n    this.setState({ showAddOrgModal: true });\n  };\n\n  dismissOrgAddModal = () => {\n    this.setState({ showAddOrgModal: false }, () => {\n      this.addToOrgButtonRef.current?.focus();\n    });\n  };\n\n  render() {\n    const { user, orgs, isExternalUser, onOrgRoleChange, onOrgRemove, onOrgAdd } = this.props;\n    const { showAddOrgModal } = this.state;\n\n    const canAddToOrg = contextSrv.hasPermission(AccessControlAction.OrgUsersAdd) && !isExternalUser;\n    return (\n      <div>\n        <h3 className=\"page-heading\">\n          <Trans i18nKey=\"admin.user-orgs.title\">Organizations</Trans>\n        </h3>\n        <Stack gap={1.5} direction=\"column\">\n          <table className=\"filter-table form-inline\">\n            <tbody>\n              {orgs.map((org, index) => (\n                <OrgRow\n                  key={`${org.orgId}-${index}`}\n                  isExternalUser={isExternalUser}\n                  user={user}\n                  org={org}\n                  onOrgRoleChange={onOrgRoleChange}\n                  onOrgRemove={onOrgRemove}\n                />\n              ))}\n            </tbody>\n          </table>\n\n          <div>\n            {canAddToOrg && (\n              <Button variant=\"secondary\" onClick={this.showOrgAddModal} ref={this.addToOrgButtonRef}>\n                <Trans i18nKey=\"admin.user-orgs.add-button\">Add user to organization</Trans>\n              </Button>\n            )}\n          </div>\n          <AddToOrgModal\n            user={user}\n            userOrgs={orgs}\n            isOpen={showAddOrgModal}\n            onOrgAdd={onOrgAdd}\n            onDismiss={this.dismissOrgAddModal}\n          />\n        </Stack>\n      </div>\n    );\n  }\n}\n\nconst getOrgRowStyles = stylesFactory((theme: GrafanaTheme2) => {\n  return {\n    removeButton: css({\n      marginRight: '0.6rem',\n      textDecoration: 'underline',\n      color: theme.v1.palette.blue95,\n    }),\n    label: css({\n      fontWeight: 500,\n    }),\n    disabledTooltip: css({\n      display: 'flex',\n    }),\n    tooltipItem: css({\n      marginLeft: '5px',\n    }),\n    tooltipItemLink: css({\n      color: theme.v1.palette.blue95,\n    }),\n    rolePickerWrapper: css({\n      display: 'flex',\n    }),\n    rolePicker: css({\n      flex: 'auto',\n      marginRight: theme.spacing(1),\n    }),\n  };\n});\n\ninterface OrgRowProps extends Themeable2 {\n  user?: UserDTO;\n  org: UserOrg;\n  isExternalUser?: boolean;\n  onOrgRemove: (orgId: number) => void;\n  onOrgRoleChange: (orgId: number, newRole: OrgRole) => void;\n}\n\nclass UnThemedOrgRow extends PureComponent<OrgRowProps> {\n  state = {\n    currentRole: this.props.org.role,\n    isChangingRole: false,\n    roleOptions: [],\n  };\n\n  componentDidMount() {\n    if (contextSrv.licensedAccessControlEnabled()) {\n      if (contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n        fetchRoleOptions(this.props.org.orgId)\n          .then((roles) => this.setState({ roleOptions: roles }))\n          .catch((e) => console.error(e));\n      }\n    }\n  }\n\n  onOrgRemove = async () => {\n    const { org } = this.props;\n    this.props.onOrgRemove(org.orgId);\n  };\n\n  onChangeRoleClick = () => {\n    const { org } = this.props;\n    this.setState({ isChangingRole: true, currentRole: org.role });\n  };\n\n  onOrgRoleChange = (newRole: OrgRole) => {\n    this.setState({ currentRole: newRole });\n  };\n\n  onOrgRoleSave = () => {\n    this.props.onOrgRoleChange(this.props.org.orgId, this.state.currentRole);\n  };\n\n  onCancelClick = () => {\n    this.setState({ isChangingRole: false });\n  };\n\n  onBasicRoleChange = (newRole: OrgRole) => {\n    this.props.onOrgRoleChange(this.props.org.orgId, newRole);\n  };\n\n  render() {\n    const { user, org, isExternalUser, theme } = this.props;\n    const authSource = user?.authLabels?.length && user?.authLabels[0];\n    const lockMessage = authSource ? `Synced via ${authSource}` : '';\n    const { currentRole, isChangingRole } = this.state;\n    const styles = getOrgRowStyles(theme);\n    const labelClass = cx('width-16', styles.label);\n    const canChangeRole = contextSrv.hasPermission(AccessControlAction.OrgUsersWrite);\n    const canRemoveFromOrg = contextSrv.hasPermission(AccessControlAction.OrgUsersRemove) && !isExternalUser;\n    const rolePickerDisabled = isExternalUser || !canChangeRole;\n\n    const inputId = `${org.name}-input`;\n    return (\n      <tr>\n        <td className={labelClass}>\n          <label htmlFor={inputId}>{org.name}</label>\n        </td>\n        {contextSrv.licensedAccessControlEnabled() ? (\n          <td>\n            <div className={styles.rolePickerWrapper}>\n              <div className={styles.rolePicker}>\n                <UserRolePicker\n                  userId={user?.id || 0}\n                  orgId={org.orgId}\n                  basicRole={org.role}\n                  roleOptions={this.state.roleOptions}\n                  onBasicRoleChange={this.onBasicRoleChange}\n                  basicRoleDisabled={rolePickerDisabled}\n                  basicRoleDisabledMessage=\"This user's role is not editable because it is synchronized from your auth provider.\n                    Refer to the Grafana authentication docs for details.\"\n                />\n              </div>\n              {isExternalUser && <ExternalUserTooltip lockMessage={lockMessage} />}\n            </div>\n          </td>\n        ) : (\n          <>\n            {isChangingRole ? (\n              <td>\n                <OrgRolePicker inputId={inputId} value={currentRole} onChange={this.onOrgRoleChange} autoFocus />\n              </td>\n            ) : (\n              <td className=\"width-25\">{org.role}</td>\n            )}\n            <td colSpan={1}>\n              {canChangeRole && (\n                <ChangeOrgButton\n                  lockMessage={lockMessage}\n                  isExternalUser={isExternalUser}\n                  onChangeRoleClick={this.onChangeRoleClick}\n                  onCancelClick={this.onCancelClick}\n                  onOrgRoleSave={this.onOrgRoleSave}\n                />\n              )}\n            </td>\n          </>\n        )}\n        <td colSpan={1}>\n          {canRemoveFromOrg && (\n            <ConfirmButton\n              confirmText=\"Confirm removal\"\n              confirmVariant=\"destructive\"\n              onCancel={this.onCancelClick}\n              onConfirm={this.onOrgRemove}\n            >\n              {t('admin.user-orgs.remove-button', 'Remove from organization')}\n            </ConfirmButton>\n          )}\n        </td>\n      </tr>\n    );\n  }\n}\n\nconst OrgRow = withTheme2(UnThemedOrgRow);\n\nconst getAddToOrgModalStyles = stylesFactory(() => ({\n  modal: css({\n    width: '500px',\n  }),\n  buttonRow: css({\n    textAlign: 'center',\n  }),\n  modalContent: css({\n    overflow: 'visible',\n  }),\n}));\n\ninterface AddToOrgModalProps {\n  isOpen: boolean;\n  user?: UserDTO;\n  userOrgs: UserOrg[];\n  onOrgAdd(orgId: number, role: string): void;\n\n  onDismiss?(): void;\n}\n\ninterface AddToOrgModalState {\n  selectedOrg: Organization | null;\n  role: OrgRole;\n  roleOptions: Role[];\n  pendingOrgId: number | null;\n  pendingUserId: number | null;\n  pendingRoles: Role[];\n}\n\nexport class AddToOrgModal extends PureComponent<AddToOrgModalProps, AddToOrgModalState> {\n  state: AddToOrgModalState = {\n    selectedOrg: null,\n    role: OrgRole.Viewer,\n    roleOptions: [],\n    pendingOrgId: null,\n    pendingUserId: null,\n    pendingRoles: [],\n  };\n\n  onOrgSelect = (org: OrgSelectItem) => {\n    const userOrg = this.props.userOrgs.find((userOrg) => userOrg.orgId === org.value?.id);\n    this.setState({ selectedOrg: org.value!, role: userOrg?.role || OrgRole.Viewer });\n    if (contextSrv.licensedAccessControlEnabled()) {\n      if (contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n        fetchRoleOptions(org.value?.id)\n          .then((roles) => this.setState({ roleOptions: roles }))\n          .catch((e) => console.error(e));\n      }\n    }\n  };\n\n  onOrgRoleChange = (newRole: OrgRole) => {\n    this.setState({\n      role: newRole,\n    });\n  };\n\n  onAddUserToOrg = async () => {\n    const { selectedOrg, role } = this.state;\n    this.props.onOrgAdd(selectedOrg!.id, role);\n    // add the stored userRoles also\n    if (contextSrv.licensedAccessControlEnabled()) {\n      if (contextSrv.hasPermission(AccessControlAction.ActionUserRolesAdd)) {\n        if (this.state.pendingUserId) {\n          await updateUserRoles(this.state.pendingRoles, this.state.pendingUserId!, this.state.pendingOrgId!);\n          // clear pending state\n          this.setState({\n            pendingOrgId: null,\n            pendingRoles: [],\n            pendingUserId: null,\n          });\n        }\n      }\n    }\n  };\n\n  onCancel = () => {\n    // clear selectedOrg when modal is canceled\n    this.setState({\n      selectedOrg: null,\n      pendingRoles: [],\n      pendingOrgId: null,\n      pendingUserId: null,\n    });\n    if (this.props.onDismiss) {\n      this.props.onDismiss();\n    }\n  };\n\n  onRoleUpdate = async (roles: Role[], userId: number, orgId: number | undefined) => {\n    // keep the new role assignments for user\n    this.setState({\n      pendingRoles: roles,\n      pendingOrgId: orgId!,\n      pendingUserId: userId,\n    });\n  };\n\n  render() {\n    const { isOpen, user, userOrgs } = this.props;\n    const { role, roleOptions, selectedOrg } = this.state;\n    const styles = getAddToOrgModalStyles();\n    return (\n      <Modal\n        className={styles.modal}\n        contentClassName={styles.modalContent}\n        title={t('admin.add-to-org-modal.title-add-to-an-organization', 'Add to an organization')}\n        isOpen={isOpen}\n        onDismiss={this.onCancel}\n      >\n        <Field label={t('admin.add-to-org-modal.label-organization', 'Organization')}>\n          <OrgPicker inputId=\"new-org-input\" onSelected={this.onOrgSelect} excludeOrgs={userOrgs} autoFocus />\n        </Field>\n        <Field label={t('admin.add-to-org-modal.label-role', 'Role')} disabled={selectedOrg === null}>\n          <UserRolePicker\n            userId={user?.id || 0}\n            orgId={selectedOrg?.id}\n            basicRole={role}\n            onBasicRoleChange={this.onOrgRoleChange}\n            basicRoleDisabled={false}\n            roleOptions={roleOptions}\n            apply={true}\n            onApplyRoles={this.onRoleUpdate}\n            pendingRoles={this.state.pendingRoles}\n          />\n        </Field>\n        <Modal.ButtonRow>\n          <Stack gap={2} justifyContent=\"center\">\n            <Button variant=\"secondary\" fill=\"outline\" onClick={this.onCancel}>\n              <Trans i18nKey=\"admin.user-orgs-modal.cancel-button\">Cancel</Trans>\n            </Button>\n            <Button variant=\"primary\" disabled={selectedOrg === null} onClick={this.onAddUserToOrg}>\n              <Trans i18nKey=\"admin.user-orgs-modal.add-button\">Add to organization</Trans>\n            </Button>\n          </Stack>\n        </Modal.ButtonRow>\n      </Modal>\n    );\n  }\n}\n\ninterface ChangeOrgButtonProps {\n  lockMessage?: string;\n  isExternalUser?: boolean;\n  onChangeRoleClick: () => void;\n  onCancelClick: () => void;\n  onOrgRoleSave: () => void;\n}\n\nconst getChangeOrgButtonTheme = (theme: GrafanaTheme2) => ({\n  disabledTooltip: css({\n    display: 'flex',\n  }),\n  tooltipItemLink: css({\n    color: theme.v1.palette.blue95,\n  }),\n  lockMessageClass: css({\n    fontStyle: 'italic',\n    marginLeft: '1.8rem',\n    marginRight: '0.6rem',\n  }),\n  icon: css({\n    lineHeight: 2,\n  }),\n});\n\nexport function ChangeOrgButton({\n  lockMessage,\n  onChangeRoleClick,\n  isExternalUser,\n  onOrgRoleSave,\n  onCancelClick,\n}: ChangeOrgButtonProps): ReactElement {\n  const styles = useStyles2(getChangeOrgButtonTheme);\n  return (\n    <div className={styles.disabledTooltip}>\n      {isExternalUser ? (\n        <>\n          <span className={styles.lockMessageClass}>{lockMessage}</span>\n          <Tooltip\n            placement=\"right-end\"\n            interactive={true}\n            content={\n              <div>\n                <Trans i18nKey=\"admin.user-orgs.role-not-editable\">\n                  This user&apos;s role is not editable because it is synchronized from your auth provider. Refer to\n                  the&nbsp;\n                  <a\n                    className={styles.tooltipItemLink}\n                    href={'https://grafana.com/docs/grafana/latest/auth'}\n                    rel=\"noreferrer\"\n                    target=\"_blank\"\n                  >\n                    Grafana authentication docs\n                  </a>\n                  &nbsp;for details.\n                </Trans>\n              </div>\n            }\n          >\n            <div className={styles.icon}>\n              <Icon name=\"question-circle\" />\n            </div>\n          </Tooltip>\n        </>\n      ) : (\n        <ConfirmButton\n          confirmText=\"Save\"\n          onClick={onChangeRoleClick}\n          onCancel={onCancelClick}\n          onConfirm={onOrgRoleSave}\n          disabled={isExternalUser}\n        >\n          {t('admin.user-orgs.change-role-button', 'Change role')}\n        </ConfirmButton>\n      )}\n    </div>\n  );\n}\ninterface ExternalUserTooltipProps {\n  lockMessage?: string;\n}\n\nexport const ExternalUserTooltip = ({ lockMessage }: ExternalUserTooltipProps) => {\n  const styles = useStyles2(getTooltipStyles);\n\n  return (\n    <div className={styles.disabledTooltip}>\n      <span className={styles.lockMessageClass}>{lockMessage}</span>\n      <Tooltip\n        placement=\"right-end\"\n        interactive={true}\n        content={\n          <div>\n            <Trans i18nKey=\"admin.user-orgs.external-user-tooltip\">\n              This user&apos;s built-in role is not editable because it is synchronized from your auth provider. Refer\n              to the&nbsp;\n              <a\n                className={styles.tooltipItemLink}\n                href={'https://grafana.com/docs/grafana/latest/auth'}\n                rel=\"noreferrer noopener\"\n                target=\"_blank\"\n              >\n                Grafana authentication docs\n              </a>\n              &nbsp;for details.\n            </Trans>\n          </div>\n        }\n      >\n        <Icon name=\"question-circle\" />\n      </Tooltip>\n    </div>\n  );\n};\n\nconst getTooltipStyles = (theme: GrafanaTheme2) => ({\n  disabledTooltip: css({\n    display: 'flex',\n  }),\n  tooltipItemLink: css({\n    color: theme.v1.palette.blue95,\n  }),\n  lockMessageClass: css({\n    fontStyle: 'italic',\n    marginLeft: '1.8rem',\n    marginRight: '0.6rem',\n  }),\n});\n","import { css } from '@emotion/css';\nimport { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { ConfirmButton, RadioButtonGroup, Icon, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { t, Trans } from 'app/core/internationalization';\nimport { ExternalUserTooltip } from 'app/features/admin/UserOrgs';\nimport { AccessControlAction } from 'app/types';\n\ninterface Props {\n  isGrafanaAdmin: boolean;\n  isExternalUser?: boolean;\n  lockMessage?: string;\n\n  onGrafanaAdminChange: (isGrafanaAdmin: boolean) => void;\n}\n\nconst adminOptions = [\n  { label: 'Yes', value: true },\n  { label: 'No', value: false },\n];\n\nexport function UserPermissions({ isGrafanaAdmin, isExternalUser, lockMessage, onGrafanaAdminChange }: Props) {\n  const [isEditing, setIsEditing] = useState(false);\n  const [currentAdminOption, setCurrentAdminOption] = useState(isGrafanaAdmin);\n\n  const onChangeClick = () => setIsEditing(true);\n\n  const onCancelClick = () => {\n    setIsEditing(false);\n    setCurrentAdminOption(isGrafanaAdmin);\n  };\n\n  const handleGrafanaAdminChange = () => onGrafanaAdminChange(currentAdminOption);\n\n  const canChangePermissions = contextSrv.hasPermission(AccessControlAction.UsersPermissionsUpdate) && !isExternalUser;\n\n  const styles = useStyles2(getTooltipStyles);\n\n  return (\n    <div>\n      <h3 className=\"page-heading\">\n        <Trans i18nKey=\"admin.user-permissions.title\">Permissions</Trans>\n      </h3>\n      <table className=\"filter-table form-inline\">\n        <tbody>\n          <tr>\n            <td className=\"width-16\">\n              <Trans i18nKey=\"admin.user-permissions.grafana-admin-key\">Grafana Admin</Trans>\n            </td>\n            {isEditing ? (\n              <td colSpan={2}>\n                <RadioButtonGroup\n                  options={adminOptions}\n                  value={currentAdminOption}\n                  onChange={setCurrentAdminOption}\n                  autoFocus\n                />\n              </td>\n            ) : (\n              <td colSpan={2}>\n                {isGrafanaAdmin ? (\n                  <>\n                    <Icon name=\"shield\" /> <Trans i18nKey=\"admin.user-permissions.grafana-admin-yes\">Yes</Trans>\n                  </>\n                ) : (\n                  <Trans i18nKey=\"admin.user-permissions.grafana-admin-no\">No</Trans>\n                )}\n              </td>\n            )}\n            <td>\n              {canChangePermissions && (\n                <ConfirmButton\n                  onClick={onChangeClick}\n                  onConfirm={handleGrafanaAdminChange}\n                  onCancel={onCancelClick}\n                  confirmText=\"Change\"\n                >\n                  {t('admin.user-permissions.change-button', 'Change')}\n                </ConfirmButton>\n              )}\n              {isExternalUser && (\n                <div className={styles.lockMessageClass}>\n                  <ExternalUserTooltip lockMessage={lockMessage} />\n                </div>\n              )}\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nconst getTooltipStyles = (theme: GrafanaTheme2) => ({\n  lockMessageClass: css({\n    display: 'flex',\n    justifyContent: 'flex-end',\n    fontStyle: 'italic',\n    marginRight: theme.spacing(0.6),\n  }),\n});\n","import { css, cx } from '@emotion/css';\nimport { PureComponent, useRef, useState } from 'react';\nimport * as React from 'react';\n\nimport { Button, ConfirmButton, ConfirmModal, Input, LegacyInputStatus, Stack } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { t, Trans } from 'app/core/internationalization';\nimport { AccessControlAction, UserDTO } from 'app/types';\n\ninterface Props {\n  user: UserDTO;\n\n  onUserUpdate: (user: UserDTO) => void;\n  onUserDelete: (userUid: string) => void;\n  onUserDisable: (userUid: string) => void;\n  onUserEnable: (userUid: string) => void;\n  onPasswordChange(password: string): void;\n}\n\nexport function UserProfile({\n  user,\n  onUserUpdate,\n  onUserDelete,\n  onUserDisable,\n  onUserEnable,\n  onPasswordChange,\n}: Props) {\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [showDisableModal, setShowDisableModal] = useState(false);\n\n  const deleteUserRef = useRef<HTMLButtonElement | null>(null);\n  const showDeleteUserModal = (show: boolean) => () => {\n    setShowDeleteModal(show);\n    if (!show && deleteUserRef.current) {\n      deleteUserRef.current.focus();\n    }\n  };\n\n  const disableUserRef = useRef<HTMLButtonElement | null>(null);\n  const showDisableUserModal = (show: boolean) => () => {\n    setShowDisableModal(show);\n    if (!show && disableUserRef.current) {\n      disableUserRef.current.focus();\n    }\n  };\n\n  const handleUserDelete = () => onUserDelete(user.uid);\n\n  const handleUserDisable = () => onUserDisable(user.uid);\n\n  const handleUserEnable = () => onUserEnable(user.uid);\n\n  const onUserNameChange = (newValue: string) => {\n    onUserUpdate({\n      ...user,\n      name: newValue,\n    });\n  };\n\n  const onUserEmailChange = (newValue: string) => {\n    onUserUpdate({\n      ...user,\n      email: newValue,\n    });\n  };\n\n  const onUserLoginChange = (newValue: string) => {\n    onUserUpdate({\n      ...user,\n      login: newValue,\n    });\n  };\n\n  let authSource = user.authLabels?.length && user.authLabels[0];\n  if (user.isProvisioned) {\n    authSource = 'SCIM';\n  }\n  const lockMessage = authSource ? `Synced via ${authSource}` : '';\n\n  const editLocked =\n    user.isExternal || user.isProvisioned || !contextSrv.hasPermissionInMetadata(AccessControlAction.UsersWrite, user);\n  const passwordChangeLocked =\n    user.isExternal ||\n    user.isProvisioned ||\n    !contextSrv.hasPermissionInMetadata(AccessControlAction.UsersPasswordUpdate, user);\n  const canDelete = contextSrv.hasPermissionInMetadata(AccessControlAction.UsersDelete, user);\n  const canDisable = contextSrv.hasPermissionInMetadata(AccessControlAction.UsersDisable, user);\n  const canEnable = contextSrv.hasPermissionInMetadata(AccessControlAction.UsersEnable, user);\n\n  return (\n    <div>\n      <h3 className=\"page-heading\">\n        <Trans i18nKey=\"admin.user-profile.title\">User information</Trans>\n      </h3>\n      <Stack direction=\"column\" gap={1.5}>\n        <div>\n          <table className=\"filter-table form-inline\">\n            <tbody>\n              <UserProfileRow\n                label={t('admin.user-profile.label-numerical-identifier', 'Numerical identifier')}\n                value={user.id.toString()}\n                locked={true}\n              />\n              <UserProfileRow\n                label={t('admin.user-profile.label-name', 'Name')}\n                value={user.name}\n                locked={editLocked}\n                lockMessage={lockMessage}\n                onChange={onUserNameChange}\n              />\n              <UserProfileRow\n                label={t('admin.user-profile.label-email', 'Email')}\n                value={user.email}\n                locked={editLocked}\n                lockMessage={lockMessage}\n                onChange={onUserEmailChange}\n              />\n              <UserProfileRow\n                label={t('admin.user-profile.label-username', 'Username')}\n                value={user.login}\n                locked={editLocked}\n                lockMessage={lockMessage}\n                onChange={onUserLoginChange}\n              />\n              <UserProfileRow\n                label={t('admin.user-profile.label-password', 'Password')}\n                value=\"********\"\n                inputType=\"password\"\n                locked={passwordChangeLocked}\n                lockMessage={lockMessage}\n                onChange={onPasswordChange}\n              />\n            </tbody>\n          </table>\n        </div>\n        <Stack gap={2}>\n          {canDelete && (\n            <>\n              <Button variant=\"destructive\" onClick={showDeleteUserModal(true)} ref={deleteUserRef}>\n                <Trans i18nKey=\"admin.user-profile.delete-button\">Delete user</Trans>\n              </Button>\n              <ConfirmModal\n                isOpen={showDeleteModal}\n                title={t('admin.user-profile.title-delete-user', 'Delete user')}\n                body=\"Are you sure you want to delete this user?\"\n                confirmText=\"Delete user\"\n                onConfirm={handleUserDelete}\n                onDismiss={showDeleteUserModal(false)}\n              />\n            </>\n          )}\n          {user.isDisabled && canEnable && (\n            <Button variant=\"secondary\" onClick={handleUserEnable}>\n              <Trans i18nKey=\"admin.user-profile.enable-button\">Enable user</Trans>\n            </Button>\n          )}\n          {!user.isDisabled && canDisable && (\n            <>\n              <Button variant=\"secondary\" onClick={showDisableUserModal(true)} ref={disableUserRef}>\n                <Trans i18nKey=\"admin.user-profile.disable-button\">Disable user</Trans>\n              </Button>\n              <ConfirmModal\n                isOpen={showDisableModal}\n                title={t('admin.user-profile.title-disable-user', 'Disable user')}\n                body=\"Are you sure you want to disable this user?\"\n                confirmText=\"Disable user\"\n                onConfirm={handleUserDisable}\n                onDismiss={showDisableUserModal(false)}\n              />\n            </>\n          )}\n        </Stack>\n      </Stack>\n    </div>\n  );\n}\n\ninterface UserProfileRowProps {\n  label: string;\n  value?: string;\n  locked?: boolean;\n  lockMessage?: string;\n  inputType?: string;\n  onChange?: (value: string) => void;\n}\n\ninterface UserProfileRowState {\n  value: string;\n  editing: boolean;\n}\n\nexport class UserProfileRow extends PureComponent<UserProfileRowProps, UserProfileRowState> {\n  inputElem?: HTMLInputElement;\n\n  static defaultProps: Partial<UserProfileRowProps> = {\n    value: '',\n    locked: false,\n    lockMessage: '',\n    inputType: 'text',\n  };\n\n  state = {\n    editing: false,\n    value: this.props.value || '',\n  };\n\n  setInputElem = (elem: HTMLInputElement) => {\n    this.inputElem = elem;\n  };\n\n  onEditClick = () => {\n    if (this.props.inputType === 'password') {\n      // Reset value for password field\n      this.setState({ editing: true, value: '' }, this.focusInput);\n    } else {\n      this.setState({ editing: true }, this.focusInput);\n    }\n  };\n\n  onCancelClick = () => {\n    this.setState({ editing: false, value: this.props.value || '' });\n  };\n\n  onInputChange = (event: React.ChangeEvent<HTMLInputElement>, status?: LegacyInputStatus) => {\n    if (status === LegacyInputStatus.Invalid) {\n      return;\n    }\n\n    this.setState({\n      value: event.target.value,\n    });\n  };\n\n  onInputBlur = (event: React.FocusEvent<HTMLInputElement>, status?: LegacyInputStatus) => {\n    if (status === LegacyInputStatus.Invalid) {\n      return;\n    }\n\n    this.setState({\n      value: event.target.value,\n    });\n  };\n\n  focusInput = () => {\n    if (this.inputElem && this.inputElem.focus) {\n      this.inputElem.focus();\n    }\n  };\n\n  onSave = () => {\n    if (this.props.onChange) {\n      this.props.onChange(this.state.value);\n    }\n  };\n\n  render() {\n    const { label, locked, lockMessage, inputType } = this.props;\n    const { value } = this.state;\n    const labelClass = cx(\n      'width-16',\n      css({\n        fontWeight: 500,\n      })\n    );\n\n    if (locked) {\n      return <LockedRow label={label} value={value} lockMessage={lockMessage} />;\n    }\n\n    const inputId = `${label}-input`;\n    return (\n      <tr>\n        <td className={labelClass}>\n          <label htmlFor={inputId}>{label}</label>\n        </td>\n        <td className=\"width-25\" colSpan={2}>\n          {this.state.editing ? (\n            <Input\n              id={inputId}\n              type={inputType}\n              defaultValue={value}\n              onBlur={this.onInputBlur}\n              onChange={this.onInputChange}\n              ref={this.setInputElem}\n              width={30}\n            />\n          ) : (\n            <span>{this.props.value}</span>\n          )}\n        </td>\n        <td>\n          <ConfirmButton\n            confirmText=\"Save\"\n            onClick={this.onEditClick}\n            onConfirm={this.onSave}\n            onCancel={this.onCancelClick}\n          >\n            {t('admin.user-profile.edit-button', 'Edit')}\n          </ConfirmButton>\n        </td>\n      </tr>\n    );\n  }\n}\n\ninterface LockedRowProps {\n  label: string;\n  value?: string;\n  lockMessage?: string;\n}\n\nexport const LockedRow = ({ label, value, lockMessage }: LockedRowProps) => {\n  const lockMessageClass = css({\n    fontStyle: 'italic',\n    marginRight: '0.6rem',\n  });\n  const labelClass = cx(\n    'width-16',\n    css({\n      fontWeight: 500,\n    })\n  );\n\n  return (\n    <tr>\n      <td className={labelClass}>{label}</td>\n      <td className=\"width-25\" colSpan={2}>\n        {value}\n      </td>\n      <td>\n        <span className={lockMessageClass}>{lockMessage}</span>\n      </td>\n    </tr>\n  );\n};\n","import { createRef, PureComponent } from 'react';\n\nimport { ConfirmButton, ConfirmModal, Button, Stack } from '@grafana/ui';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\nimport { contextSrv } from 'app/core/core';\nimport { t, Trans } from 'app/core/internationalization';\nimport { formatDate } from 'app/core/internationalization/dates';\nimport { AccessControlAction, UserSession } from 'app/types';\n\ninterface Props {\n  sessions: UserSession[];\n\n  onSessionRevoke: (id: number) => void;\n  onAllSessionsRevoke: () => void;\n}\n\ninterface State {\n  showLogoutModal: boolean;\n}\n\nclass BaseUserSessions extends PureComponent<Props, State> {\n  forceAllLogoutButton = createRef<HTMLButtonElement>();\n  state: State = {\n    showLogoutModal: false,\n  };\n\n  showLogoutConfirmationModal = () => {\n    this.setState({ showLogoutModal: true });\n  };\n\n  dismissLogoutConfirmationModal = () => {\n    this.setState({ showLogoutModal: false }, () => {\n      this.forceAllLogoutButton.current?.focus();\n    });\n  };\n\n  onSessionRevoke = (id: number) => {\n    return () => {\n      this.props.onSessionRevoke(id);\n    };\n  };\n\n  onAllSessionsRevoke = () => {\n    this.setState({ showLogoutModal: false });\n    this.props.onAllSessionsRevoke();\n  };\n\n  render() {\n    const { sessions } = this.props;\n    const { showLogoutModal } = this.state;\n\n    const canLogout = contextSrv.hasPermission(AccessControlAction.UsersLogout);\n\n    return (\n      <div>\n        <h3 className=\"page-heading\">\n          <Trans i18nKey=\"admin.user-sessions.title\">Sessions</Trans>\n        </h3>\n        <Stack direction=\"column\" gap={1.5}>\n          <div>\n            <table className=\"filter-table form-inline\">\n              <thead>\n                <tr>\n                  <th>\n                    <Trans i18nKey=\"admin.user-sessions.last-seen-column\">Last seen</Trans>\n                  </th>\n                  <th>\n                    <Trans i18nKey=\"admin.user-sessions.logged-on-column\">Logged on</Trans>\n                  </th>\n                  <th>\n                    <Trans i18nKey=\"admin.user-sessions.ip-column\">IP address</Trans>\n                  </th>\n                  <th>\n                    <Trans i18nKey=\"admin.user-sessions.browser-column\">Browser and OS</Trans>\n                  </th>\n                  <th colSpan={2}>\n                    <Trans i18nKey=\"user-session.auth-module-column\">Identity Provider</Trans>\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                {sessions &&\n                  sessions.map((session, index) => (\n                    <tr key={`${session.id}-${index}`}>\n                      <td>{session.isActive ? 'Now' : session.seenAt}</td>\n                      <td>{formatDate(session.createdAt, { dateStyle: 'long' })}</td>\n                      <td>{session.clientIp}</td>\n                      <td>{`${session.browser} on ${session.os} ${session.osVersion}`}</td>\n                      <td>\n                        {session.authModule && <TagBadge label={session.authModule} removeIcon={false} count={0} />}\n                      </td>\n                      <td>\n                        {canLogout && (\n                          <ConfirmButton\n                            confirmText=\"Confirm logout\"\n                            confirmVariant=\"destructive\"\n                            onConfirm={this.onSessionRevoke(session.id)}\n                          >\n                            {t('admin.user-sessions.force-logout-button', 'Force logout')}\n                          </ConfirmButton>\n                        )}\n                      </td>\n                    </tr>\n                  ))}\n              </tbody>\n            </table>\n          </div>\n\n          <div>\n            {canLogout && sessions.length > 0 && (\n              <Button variant=\"secondary\" onClick={this.showLogoutConfirmationModal} ref={this.forceAllLogoutButton}>\n                <Trans i18nKey=\"admin.user-sessions.force-logout-all-button\">Force logout from all devices</Trans>\n              </Button>\n            )}\n            <ConfirmModal\n              isOpen={showLogoutModal}\n              title={t('admin.base-user-sessions.title-force-logout-from-all-devices', 'Force logout from all devices')}\n              body=\"Are you sure you want to force logout from all devices?\"\n              confirmText=\"Force logout\"\n              onConfirm={this.onAllSessionsRevoke}\n              onDismiss={this.dismissLogoutConfirmationModal}\n            />\n          </div>\n        </Stack>\n      </div>\n    );\n  }\n}\n\nexport const UserSessions = BaseUserSessions;\n","import { useEffect } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { useParams } from 'react-router-dom-v5-compat';\n\nimport { NavModelItem } from '@grafana/data';\nimport { featureEnabled } from '@grafana/runtime';\nimport { Stack } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { StoreState, UserDTO, UserOrg, UserSession, SyncInfo, UserAdminError, AccessControlAction } from 'app/types';\n\nimport { UserLdapSyncInfo } from './UserLdapSyncInfo';\nimport { UserOrgs } from './UserOrgs';\nimport { UserPermissions } from './UserPermissions';\nimport { UserProfile } from './UserProfile';\nimport { UserSessions } from './UserSessions';\nimport {\n  loadAdminUserPage,\n  revokeSession,\n  revokeAllSessions,\n  updateUser,\n  setUserPassword,\n  disableUser,\n  enableUser,\n  deleteUser,\n  updateUserPermissions,\n  addOrgUser,\n  updateOrgUserRole,\n  deleteOrgUser,\n  syncLdapUser,\n} from './state/actions';\n\ninterface OwnProps {\n  user?: UserDTO;\n  orgs: UserOrg[];\n  sessions: UserSession[];\n  ldapSyncInfo?: SyncInfo;\n  isLoading: boolean;\n  error?: UserAdminError;\n}\n\nexport const UserAdminPage = ({\n  loadAdminUserPage,\n  user,\n  orgs,\n  sessions,\n  ldapSyncInfo,\n  isLoading,\n  updateUser,\n  setUserPassword,\n  deleteUser,\n  disableUser,\n  enableUser,\n  updateUserPermissions,\n  deleteOrgUser,\n  updateOrgUserRole,\n  addOrgUser,\n  revokeSession,\n  revokeAllSessions,\n  syncLdapUser,\n}: Props) => {\n  const { id = '' } = useParams();\n  useEffect(() => {\n    loadAdminUserPage(id);\n  }, [id, loadAdminUserPage]);\n\n  const onPasswordChange = (password: string) => {\n    if (user) {\n      setUserPassword(user.uid, password);\n    }\n  };\n\n  const onGrafanaAdminChange = (isGrafanaAdmin: boolean) => {\n    if (user) {\n      updateUserPermissions(user.uid, isGrafanaAdmin);\n    }\n  };\n\n  const onOrgRemove = (orgId: number) => {\n    if (user) {\n      deleteOrgUser(user.uid, orgId);\n    }\n  };\n\n  const onOrgRoleChange = (orgId: number, newRole: string) => {\n    if (user) {\n      updateOrgUserRole(user.uid, orgId, newRole);\n    }\n  };\n\n  const onOrgAdd = (orgId: number, role: string) => {\n    if (user) {\n      addOrgUser(user, orgId, role);\n    }\n  };\n\n  const onSessionRevoke = (tokenId: number) => {\n    if (user) {\n      revokeSession(tokenId, user.uid);\n    }\n  };\n\n  const onAllSessionsRevoke = () => {\n    if (user) {\n      revokeAllSessions(user.uid);\n    }\n  };\n\n  const onUserSync = () => {\n    if (user) {\n      syncLdapUser(user.id, user.uid);\n    }\n  };\n\n  const isLDAPUser = user?.isExternal && user?.authLabels?.includes('LDAP');\n  const canReadSessions = contextSrv.hasPermission(AccessControlAction.UsersAuthTokenList);\n  const canReadLDAPStatus = contextSrv.hasPermission(AccessControlAction.LDAPStatusRead);\n  let authSource = user?.authLabels?.[0];\n  if (user?.isProvisioned) {\n    authSource = 'SCIM';\n  }\n  const lockMessage = authSource ? `Synced via ${authSource}` : '';\n  const pageNav: NavModelItem = {\n    text: user?.login ?? '',\n    icon: 'shield',\n    subTitle: 'Manage settings for an individual user.',\n  };\n\n  return (\n    <Page navId=\"global-users\" pageNav={pageNav}>\n      <Page.Contents isLoading={isLoading}>\n        <Stack gap={5} direction=\"column\">\n          {user && (\n            <>\n              <UserProfile\n                user={user}\n                onUserUpdate={updateUser}\n                onUserDelete={deleteUser}\n                onUserDisable={disableUser}\n                onUserEnable={enableUser}\n                onPasswordChange={onPasswordChange}\n              />\n              {isLDAPUser &&\n                user?.isExternallySynced &&\n                featureEnabled('ldapsync') &&\n                ldapSyncInfo &&\n                canReadLDAPStatus && (\n                  <UserLdapSyncInfo ldapSyncInfo={ldapSyncInfo} user={user} onUserSync={onUserSync} />\n                )}\n              <UserPermissions\n                isGrafanaAdmin={user.isGrafanaAdmin}\n                isExternalUser={user?.isGrafanaAdminExternallySynced}\n                lockMessage={lockMessage}\n                onGrafanaAdminChange={onGrafanaAdminChange}\n              />\n            </>\n          )}\n          {orgs && (\n            <UserOrgs\n              user={user}\n              orgs={orgs}\n              isExternalUser={user?.isExternallySynced}\n              onOrgRemove={onOrgRemove}\n              onOrgRoleChange={onOrgRoleChange}\n              onOrgAdd={onOrgAdd}\n            />\n          )}\n          {sessions && canReadSessions && (\n            <UserSessions\n              sessions={sessions}\n              onSessionRevoke={onSessionRevoke}\n              onAllSessionsRevoke={onAllSessionsRevoke}\n            />\n          )}\n        </Stack>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nconst mapStateToProps = (state: StoreState) => ({\n  user: state.userAdmin.user,\n  sessions: state.userAdmin.sessions,\n  orgs: state.userAdmin.orgs,\n  ldapSyncInfo: state.ldap.syncInfo,\n  isLoading: state.userAdmin.isLoading,\n  error: state.userAdmin.error,\n});\n\nconst mapDispatchToProps = {\n  loadAdminUserPage,\n  updateUser,\n  setUserPassword,\n  disableUser,\n  enableUser,\n  deleteUser,\n  updateUserPermissions,\n  addOrgUser,\n  updateOrgUserRole,\n  deleteOrgUser,\n  revokeSession,\n  revokeAllSessions,\n  syncLdapUser,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\ntype Props = OwnProps & ConnectedProps<typeof connector>;\nexport default connector(UserAdminPage);\n"],"names":["UserRolePicker","basicRole","roles","userId","orgId","onBasicRoleChange","roleOptions","disabled","basicRoleDisabled","basicRoleDisabledMessage","apply","onApplyRoles","pendingRoles","maxWidth","width","isLoading","loading","appliedRoles","getUserRoles","onRolesChange","canUpdateRoles","options","OrgRolePicker","value","onChange","ariaLabel","inputId","autoFocus","restProps","val","format","debugLDAPMappingBaseURL","UserLdapSyncInfo","ldapSyncInfo","user","nextSyncTime","debugLDAPMappingURL","canReadLDAPUser","canSyncLDAPUser","TagBadge","Button","orgToSelectItem","org","OrgPicker","onSelected","className","excludeOrgs","defaultOrganization","selected","setSelected","orgOptionsState","getOrgOptions","useAsyncFn","allOrgs","idArray","anOrg","item","option","rawInput","input","UserOrgs","orgs","isExternalUser","onOrgRoleChange","onOrgRemove","onOrgAdd","showAddOrgModal","canAddToOrg","Stack","index","OrgRow","AddToOrgModal","getOrgRowStyles","stylesFactory","theme","UnThemedOrgRow","newRole","e","authSource","lockMessage","currentRole","isChangingRole","styles","labelClass","canChangeRole","canRemoveFromOrg","rolePickerDisabled","ExternalUserTooltip","ChangeOrgButton","ConfirmButton","getAddToOrgModalStyles","userOrg","selectedOrg","role","isOpen","userOrgs","Modal","Field","getChangeOrgButtonTheme","onChangeRoleClick","onOrgRoleSave","onCancelClick","Tooltip","Icon","getTooltipStyles","adminOptions","UserPermissions","isGrafanaAdmin","onGrafanaAdminChange","isEditing","setIsEditing","currentAdminOption","setCurrentAdminOption","onChangeClick","handleGrafanaAdminChange","canChangePermissions","RadioButtonGroup","UserProfile","onUserUpdate","onUserDelete","onUserDisable","onUserEnable","onPasswordChange","showDeleteModal","setShowDeleteModal","showDisableModal","setShowDisableModal","deleteUserRef","showDeleteUserModal","show","disableUserRef","showDisableUserModal","handleUserDelete","handleUserDisable","handleUserEnable","onUserNameChange","newValue","onUserEmailChange","onUserLoginChange","editLocked","passwordChangeLocked","canDelete","canDisable","canEnable","UserProfileRow","ConfirmModal","elem","event","status","label","locked","inputType","LockedRow","lockMessageClass","BaseUserSessions","id","sessions","showLogoutModal","canLogout","session","UserSessions","UserAdminPage","loadAdminUserPage","updateUser","setUserPassword","deleteUser","disableUser","enableUser","updateUserPermissions","deleteOrgUser","updateOrgUserRole","addOrgUser","revokeSession","revokeAllSessions","syncLdapUser","password","onSessionRevoke","tokenId","onAllSessionsRevoke","onUserSync","isLDAPUser","canReadSessions","canReadLDAPStatus","pageNav","Page","mapStateToProps","state","mapDispatchToProps"],"sourceRoot":""}