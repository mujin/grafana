{"version":3,"file":"OrgDetailsPage.1ed504872aa76686fde5.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/Form/Form.tsx","webpack://grafana/./public/app/features/org/OrgProfile.tsx","webpack://grafana/./public/app/features/org/OrgDetailsPage.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { HTMLProps, useEffect } from 'react';\nimport * as React from 'react';\nimport {\n  useForm,\n  Mode,\n  DefaultValues,\n  SubmitHandler,\n  FieldValues,\n  UseFormReturn,\n  FieldErrors,\n  FieldPath,\n} from 'react-hook-form';\n\nexport type FormAPI<T extends FieldValues> = Omit<UseFormReturn<T>, 'handleSubmit'> & {\n  errors: FieldErrors<T>;\n};\n\ninterface FormProps<T extends FieldValues> extends Omit<HTMLProps<HTMLFormElement>, 'onSubmit' | 'children'> {\n  validateOn?: Mode;\n  validateOnMount?: boolean;\n  validateFieldsOnMount?: FieldPath<T> | Array<FieldPath<T>>;\n  defaultValues?: DefaultValues<T>;\n  onSubmit: SubmitHandler<T>;\n  children: (api: FormAPI<T>) => React.ReactNode;\n  /** Sets max-width for container. Use it instead of setting individual widths on inputs.*/\n  maxWidth?: number | 'none';\n}\n\nexport function Form<T extends FieldValues>({\n  defaultValues,\n  onSubmit,\n  validateOnMount = false,\n  validateFieldsOnMount,\n  children,\n  validateOn = 'onSubmit',\n  maxWidth = 600,\n  ...htmlProps\n}: FormProps<T>) {\n  const { handleSubmit, trigger, formState, ...rest } = useForm<T>({\n    mode: validateOn,\n    defaultValues,\n  });\n\n  useEffect(() => {\n    if (validateOnMount) {\n      trigger(validateFieldsOnMount);\n    }\n  }, [trigger, validateFieldsOnMount, validateOnMount]);\n\n  return (\n    <form\n      className={css({\n        maxWidth: maxWidth !== 'none' ? maxWidth + 'px' : maxWidth,\n        width: '100%',\n      })}\n      onSubmit={handleSubmit(onSubmit)}\n      {...htmlProps}\n    >\n      {children({ errors: formState.errors, formState, trigger, ...rest })}\n    </form>\n  );\n}\n","import { Input, Field, FieldSet, Button } from '@grafana/ui';\nimport { Form } from 'app/core/components/Form/Form';\nimport { contextSrv } from 'app/core/core';\nimport { t, Trans } from 'app/core/internationalization';\nimport { AccessControlAction } from 'app/types';\n\nexport interface Props {\n  orgName: string;\n  onSubmit: (orgName: string) => void;\n}\n\ninterface FormDTO {\n  orgName: string;\n}\n\nconst OrgProfile = ({ onSubmit, orgName }: Props) => {\n  const canWriteOrg = contextSrv.hasPermission(AccessControlAction.OrgsWrite);\n\n  return (\n    <Form defaultValues={{ orgName }} onSubmit={({ orgName }: FormDTO) => onSubmit(orgName)}>\n      {({ register }) => (\n        <FieldSet\n          label={t('org.org-profile.label-organization-profile', 'Organization profile')}\n          disabled={!canWriteOrg}\n        >\n          <Field label={t('org.org-profile.label-organization-name', 'Organization name')}>\n            <Input id=\"org-name-input\" type=\"text\" {...register('orgName', { required: true })} />\n          </Field>\n\n          <Button type=\"submit\">\n            <Trans i18nKey=\"org.org-profile.update-organization-name\">Update organization name</Trans>\n          </Button>\n        </FieldSet>\n      )}\n    </Form>\n  );\n};\n\nexport default OrgProfile;\n","import { PureComponent } from 'react';\nimport { ConnectedProps, connect } from 'react-redux';\n\nimport { Stack } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport SharedPreferences from 'app/core/components/SharedPreferences/SharedPreferences';\nimport { appEvents, contextSrv } from 'app/core/core';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AccessControlAction, StoreState } from 'app/types';\nimport { ShowConfirmModalEvent } from 'app/types/events';\n\nimport OrgProfile from './OrgProfile';\nimport { loadOrganization, updateOrganization } from './state/actions';\nimport { setOrganizationName } from './state/reducers';\n\ninterface OwnProps {}\n\nexport class OrgDetailsPage extends PureComponent<Props> {\n  async componentDidMount() {\n    await this.props.loadOrganization();\n  }\n\n  onUpdateOrganization = (orgName: string) => {\n    this.props.setOrganizationName(orgName);\n    this.props.updateOrganization();\n  };\n\n  handleConfirm = () => {\n    return new Promise<boolean>((resolve) => {\n      appEvents.publish(\n        new ShowConfirmModalEvent({\n          title: 'Confirm preferences update',\n          text: 'This will update the preferences for the whole organization. Are you sure you want to update the preferences?',\n          yesText: 'Save',\n          yesButtonVariant: 'primary',\n          onConfirm: async () => resolve(true),\n          onDismiss: async () => resolve(false),\n        })\n      );\n    });\n  };\n\n  render() {\n    const { navModel, organization } = this.props;\n    const isLoading = Object.keys(organization).length === 0;\n    const canReadOrg = contextSrv.hasPermission(AccessControlAction.OrgsRead);\n    const canReadPreferences = contextSrv.hasPermission(AccessControlAction.OrgsPreferencesRead);\n    const canWritePreferences = contextSrv.hasPermission(AccessControlAction.OrgsPreferencesWrite);\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          {!isLoading && (\n            <Stack direction=\"column\" gap={3}>\n              {canReadOrg && <OrgProfile onSubmit={this.onUpdateOrganization} orgName={organization.name} />}\n              {canReadPreferences && (\n                <SharedPreferences\n                  resourceUri=\"org\"\n                  disabled={!canWritePreferences}\n                  preferenceType=\"org\"\n                  onConfirm={this.handleConfirm}\n                />\n              )}\n            </Stack>\n          )}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'org-settings'),\n    organization: state.organization.organization,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadOrganization,\n  setOrganizationName,\n  updateOrganization,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport default connector(OrgDetailsPage);\n"],"names":["Form","defaultValues","onSubmit","validateOnMount","validateFieldsOnMount","children","validateOn","maxWidth","htmlProps","handleSubmit","trigger","formState","rest","orgName","canWriteOrg","register","FieldSet","Field","Input","Button","OrgDetailsPage","resolve","navModel","organization","isLoading","canReadOrg","canReadPreferences","canWritePreferences","Page","Stack","SharedPreferences","mapStateToProps","state","mapDispatchToProps"],"sourceRoot":""}