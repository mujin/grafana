{"version":3,"file":"AlertingHome.c7e07c727848a2a77612.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/home/GettingStarted.tsx","webpack://grafana/./public/app/features/alerting/unified/insights/SectionFooter.tsx","webpack://grafana/./public/app/features/alerting/unified/insights/DataSourcesInfo.tsx","webpack://grafana/./public/app/features/alerting/unified/insights/SectionSubheader.tsx","webpack://grafana/./public/app/features/alerting/unified/insights/InsightsMenuButton.tsx","webpack://grafana/./public/app/features/alerting/unified/insights/grafana/Active.tsx","webpack://grafana/./public/app/features/alerting/unified/insights/grafana/AlertsByStateScene.tsx","webpack://grafana/./public/app/features/alerting/unified/insights/grafana/EvalSuccessVsFailuresScene.tsx","webpack://grafana/./public/app/features/alerting/unified/insights/grafana/InstanceStatusScene.tsx","webpack://grafana/./public/app/features/alerting/unified/insights/grafana/MissedIterationsScene.tsx","webpack://grafana/./public/app/features/alerting/unified/insights/grafana/MostFiredInstancesTable.tsx","webpack://grafana/./public/app/features/alerting/unified/insights/grafana/Paused.tsx","webpack://grafana/./public/app/features/alerting/unified/insights/grafana/RulesByEvaluation.tsx","webpack://grafana/./public/app/features/alerting/unified/insights/grafana/RulesByEvaluationPercentage.tsx","webpack://grafana/./public/app/features/alerting/unified/insights/grafana/alertmanager/AlertsByState.tsx","webpack://grafana/./public/app/features/alerting/unified/insights/grafana/alertmanager/SilencesByStateScene.tsx","webpack://grafana/./public/app/features/alerting/unified/insights/mimir/AlertsByState.tsx","webpack://grafana/./public/app/features/alerting/unified/insights/mimir/InvalidConfig.tsx","webpack://grafana/./public/app/features/alerting/unified/insights/mimir/Notifications.tsx","webpack://grafana/./public/app/features/alerting/unified/insights/mimir/Silences.tsx","webpack://grafana/./public/app/features/alerting/unified/insights/mimir/perGroup/RuleGroupEvaluationDurationIntervalRatioScene.tsx","webpack://grafana/./public/app/features/alerting/unified/insights/mimir/perGroup/RuleGroupEvaluationDurationScene.tsx","webpack://grafana/./public/app/features/alerting/unified/insights/mimir/perGroup/RuleGroupEvaluationsScene.tsx","webpack://grafana/./public/app/features/alerting/unified/insights/mimir/perGroup/RuleGroupIntervalScene.tsx","webpack://grafana/./public/app/features/alerting/unified/insights/mimir/perGroup/RulesPerGroupScene.tsx","webpack://grafana/./public/app/features/alerting/unified/insights/mimir/rules/EvalSuccessVsFailuresScene.tsx","webpack://grafana/./public/app/features/alerting/unified/insights/mimir/rules/Firing.tsx","webpack://grafana/./public/app/features/alerting/unified/insights/mimir/rules/InstancesByState.tsx","webpack://grafana/./public/app/features/alerting/unified/insights/mimir/rules/InstancesPercentageByState.tsx","webpack://grafana/./public/app/features/alerting/unified/insights/mimir/rules/MissedIterationsScene.tsx","webpack://grafana/./public/app/features/alerting/unified/insights/mimir/rules/MostFiredRules.tsx","webpack://grafana/./public/app/features/alerting/unified/insights/mimir/rules/Pending.tsx","webpack://grafana/./public/app/features/alerting/unified/home/Insights.tsx","webpack://grafana/./public/app/features/alerting/unified/home/PluginIntegrations.tsx","webpack://grafana/./public/app/features/alerting/unified/home/Home.tsx","webpack://grafana/./public/app/features/alerting/unified/plugins/useAlertingHomePageExtensions.ts"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport * as React from 'react';\nimport SVG from 'react-inlinesvg';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack, Text, TextLink, useStyles2, useTheme2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nexport default function GettingStarted() {\n  const theme = useTheme2();\n  const styles = useStyles2(getWelcomePageStyles);\n\n  return (\n    <div className={styles.grid}>\n      <ContentBox>\n        <Stack direction=\"column\" gap={1}>\n          <Text element=\"h3\">\n            <Trans i18nKey=\"alerting.getting-started.how-it-works\">How it works</Trans>\n          </Text>\n          <ul className={styles.list}>\n            <li>\n              Grafana alerting periodically queries data sources and evaluates the condition defined in the alert rule\n            </li>\n            <li>\n              <Trans i18nKey=\"alerting.getting-started.condition-breached-alert-instance-fires\">\n                If the condition is breached, an alert instance fires\n              </Trans>\n            </li>\n            <li>Firing instances are routed to notification policies based on matching labels</li>\n            <li>Notifications are sent out to the contact points specified in the notification policy</li>\n          </ul>\n          <div className={styles.svgContainer}>\n            <Stack justifyContent={'center'}>\n              <SVG\n                src={`public/img/alerting/at_a_glance_${theme.name.toLowerCase()}.svg`}\n                width={undefined}\n                height={undefined}\n              />\n            </Stack>\n          </div>\n        </Stack>\n      </ContentBox>\n      <ContentBox>\n        <Stack direction=\"column\" gap={1}>\n          <Text element=\"h3\">\n            <Trans i18nKey=\"alerting.getting-started.get-started\">Get started</Trans>\n          </Text>\n          <ul className={styles.list}>\n            <li>\n              <Text weight=\"bold\">Create an alert rule</Text> to query a data source and evaluate the condition defined\n              in the alert rule\n            </li>\n            <li>\n              <Text weight=\"bold\">Route alert notifications</Text> either directly to a contact point or through\n              notification policies for more flexibility\n            </li>\n            <li>\n              <Text weight=\"bold\">Monitor</Text> your alert rules using dashboards and visualizations\n            </li>\n          </ul>\n          <p>\n            For a hands-on introduction, refer to our{' '}\n            <TextLink\n              href=\"https://grafana.com/tutorials/alerting-get-started/\"\n              icon=\"angle-right\"\n              inline={true}\n              external\n            >\n              tutorial to get started with Grafana Alerting\n            </TextLink>\n          </p>\n        </Stack>\n      </ContentBox>\n    </div>\n  );\n}\n\nconst getWelcomePageStyles = (theme: GrafanaTheme2) => ({\n  grid: css({\n    display: 'grid',\n    gridTemplateRows: 'min-content auto auto',\n    gridTemplateColumns: '1fr',\n    gap: theme.spacing(2),\n    width: '100%',\n\n    [theme.breakpoints.up('lg')]: {\n      gridTemplateColumns: '3fr 2fr',\n    },\n  }),\n  ctaContainer: css({\n    gridColumn: '1 / span 5',\n  }),\n  svgContainer: css({\n    '& svg': {\n      maxWidth: '900px',\n      flex: 1,\n    },\n  }),\n  list: css({\n    margin: theme.spacing(0, 2),\n    '& > li': {\n      marginBottom: theme.spacing(1),\n    },\n  }),\n});\n\nexport function WelcomeHeader({ className }: { className?: string }) {\n  const styles = useStyles2(getWelcomeHeaderStyles);\n\n  return (\n    <Stack gap={2} direction=\"column\">\n      <ContentBox className={cx(styles.ctaContainer, className)}>\n        <WelcomeCTABox\n          title={t('alerting.welcome-header.title-alert-rules', 'Alert rules')}\n          description=\"Define the condition that must be met before an alert rule fires\"\n          href=\"/alerting/list\"\n          hrefText=\"Manage alert rules\"\n        />\n        <div className={styles.separator} />\n        <WelcomeCTABox\n          title={t('alerting.welcome-header.title-contact-points', 'Contact points')}\n          description={t(\n            'alerting.welcome-header.description-configure-receives-notifications',\n            'Configure who receives notifications and how they are sent'\n          )}\n          href=\"/alerting/notifications\"\n          hrefText=\"Manage contact points\"\n        />\n        <div className={styles.separator} />\n        <WelcomeCTABox\n          title={t('alerting.welcome-header.title-notification-policies', 'Notification policies')}\n          description={t(\n            'alerting.welcome-header.description-configure-firing-alert-instances-routed-contact',\n            'Configure how firing alert instances are routed to contact points'\n          )}\n          href=\"/alerting/routes\"\n          hrefText=\"Manage notification policies\"\n        />\n      </ContentBox>\n    </Stack>\n  );\n}\n\nconst getWelcomeHeaderStyles = (theme: GrafanaTheme2) => ({\n  ctaContainer: css({\n    padding: theme.spacing(2),\n    display: 'flex',\n    gap: theme.spacing(4),\n    justifyContent: 'space-between',\n    flexWrap: 'wrap',\n\n    [theme.breakpoints.down('lg')]: {\n      flexDirection: 'column',\n    },\n  }),\n  separator: css({\n    width: '1px',\n    backgroundColor: theme.colors.border.medium,\n\n    [theme.breakpoints.down('lg')]: {\n      display: 'none',\n    },\n  }),\n});\n\ninterface WelcomeCTABoxProps {\n  title: string;\n  description: string;\n  href: string;\n  hrefText: string;\n}\n\nfunction WelcomeCTABox({ title, description, href, hrefText }: WelcomeCTABoxProps) {\n  const styles = useStyles2(getWelcomeCTAButtonStyles);\n\n  return (\n    <div className={styles.container}>\n      <Text element=\"h2\" variant=\"h3\">\n        {title}\n      </Text>\n      <div className={styles.desc}>{description}</div>\n      <div className={styles.actionRow}>\n        <TextLink href={href} inline={false}>\n          {hrefText}\n        </TextLink>\n      </div>\n    </div>\n  );\n}\n\nconst getWelcomeCTAButtonStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    color: theme.colors.text.primary,\n    flex: 1,\n    minWidth: '240px',\n    display: 'grid',\n    rowGap: theme.spacing(1),\n    gridTemplateColumns: 'min-content 1fr 1fr 1fr',\n    gridTemplateRows: 'min-content auto min-content',\n\n    '& h2': {\n      marginBottom: 0,\n      gridColumn: '2 / span 3',\n      gridRow: 1,\n    },\n  }),\n\n  desc: css({\n    gridColumn: '2 / span 3',\n    gridRow: 2,\n  }),\n\n  actionRow: css({\n    gridColumn: '2 / span 3',\n    gridRow: 3,\n    maxWidth: '240px',\n  }),\n});\n\nfunction ContentBox({ children, className }: React.PropsWithChildren<{ className?: string }>) {\n  const styles = useStyles2(getContentBoxStyles);\n\n  return <div className={cx(styles.box, className)}>{children}</div>;\n}\n\nconst getContentBoxStyles = (theme: GrafanaTheme2) => ({\n  box: css({\n    padding: theme.spacing(2),\n    backgroundColor: theme.colors.background.secondary,\n    borderRadius: theme.shape.radius.default,\n  }),\n});\n","import { css } from '@emotion/css';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nexport function SectionFooter({ children }: React.PropsWithChildren<{}>) {\n  const styles = useStyles2(getStyles);\n\n  return <div className={styles.sectionFooter}>{children && <div>{children}</div>}</div>;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  sectionFooter: css({\n    marginBottom: theme.spacing(2),\n  }),\n});\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { DataSourceInformation } from '../home/Insights';\n\nexport function DataSourcesInfo({ datasources }: { datasources: DataSourceInformation[] }) {\n  const styles = useStyles2(getStyles);\n\n  const displayDs = datasources.map((ds) => (\n    <div key={ds.uid}>\n      {ds.settings?.meta.info.logos.small && (\n        <img className={styles.dsImage} src={ds.settings?.meta.info.logos.small} alt={ds.settings?.name || ds.uid} />\n      )}\n      <span>{ds.settings?.name || ds.uid}</span>\n    </div>\n  ));\n\n  return <div className={styles.dsContainer}>{displayDs}</div>;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  dsImage: css({\n    label: 'ds-image',\n    width: '16px',\n    marginRight: '3px',\n  }),\n  dsContainer: css({\n    display: 'flex',\n    flexDirection: 'row',\n    fontSize: theme.typography.bodySmall.fontSize,\n    gap: '10px',\n    marginBottom: '10px',\n    justifyContent: 'flex-end',\n  }),\n});\n","import { css } from '@emotion/css';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { DataSourceInformation } from '../home/Insights';\n\nimport { DataSourcesInfo } from './DataSourcesInfo';\n\nexport function SectionSubheader({\n  children,\n  datasources,\n}: React.PropsWithChildren<{ datasources?: DataSourceInformation[] }>) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.container}>\n      {children}\n      {datasources && <DataSourcesInfo datasources={datasources} />}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  }),\n});\n","import { css } from '@emotion/css';\nimport { useState } from 'react';\n\nimport { ExploreUrlState, GrafanaTheme2, serializeStateToUrlParam, toURLRange } from '@grafana/data';\nimport {\n  SceneComponentProps,\n  SceneObjectBase,\n  SceneObjectState,\n  SceneTimeRangeState,\n  SceneVariableSetState,\n  sceneGraph,\n} from '@grafana/scenes';\nimport { DataQuery } from '@grafana/schema';\nimport { Button, Dropdown, Icon, IconButton, Menu, Modal, useStyles2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { trackInsightsFeedback } from '../Analytics';\n\ntype DataQueryWithExpr = DataQuery & { expr: string };\n\nconst getPrometheusExploreUrl = ({\n  queries,\n  range,\n  variables,\n}: {\n  queries?: DataQueryWithExpr[];\n  range: SceneTimeRangeState;\n  variables: SceneVariableSetState;\n}): string => {\n  // In Mimir-per-group panels, replace `$rule_group` in the query expression with the actual rule group value\n  const ruleGroup = variables?.variables.find((v) => v.state.name === 'rule_group')?.getValue() || null;\n  if (ruleGroup !== null) {\n    queries = queries?.map((query) => {\n      return {\n        ...query,\n        expr: query.expr.replace('$rule_group', String(ruleGroup)),\n      };\n    });\n  }\n  const urlState: ExploreUrlState = {\n    datasource: (queries?.length && queries[0].datasource?.uid) || null,\n    queries:\n      queries?.map(({ expr, refId }, i) => {\n        return { expr, refId };\n      }) || [],\n    range: toURLRange(range ? { from: range.from, to: range.to } : { from: 'now-1h', to: 'now' }),\n  };\n\n  const param = encodeURIComponent(serializeStateToUrlParam(urlState));\n\n  return `/explore?left=${param}`;\n};\n\nconst InsightsMenuButtonRenderer = ({ model }: SceneComponentProps<InsightsMenuButton>) => {\n  const data = sceneGraph.getData(model).useState();\n  const timeRange = sceneGraph.getTimeRange(model).useState();\n  const variables = sceneGraph.getVariables(model).useState();\n  const panel = model.state.panel;\n\n  const url = getPrometheusExploreUrl({\n    queries: data.data?.request?.targets as DataQueryWithExpr[],\n    range: timeRange,\n    variables: variables,\n  });\n\n  const styles = useStyles2(getStyles);\n\n  const [showModal, setShowModal] = useState<boolean>(false);\n\n  const onDismiss = () => {\n    setShowModal(false);\n  };\n\n  const onButtonClick = (useful: boolean) => {\n    trackInsightsFeedback({ useful, panel: panel });\n    onDismiss();\n  };\n\n  const modal = (\n    <Modal\n      title={t('alerting.insights-menu-button-renderer.modal.title-rate-this-panel', 'Rate this panel')}\n      isOpen={showModal}\n      onDismiss={onDismiss}\n      onClickBackdrop={onDismiss}\n      className={styles.container}\n    >\n      <div>\n        <p>Help us improve this page by telling us whether this panel is useful to you!</p>\n        <div className={styles.buttonsContainer}>\n          <Button variant=\"secondary\" className={styles.buttonContainer} onClick={() => onButtonClick(false)}>\n            <div className={styles.button}>\n              <Icon name=\"thumbs-up\" className={styles.thumbsdown} size=\"xxxl\" />\n              <span>{`I don't like it`}</span>\n            </div>\n          </Button>\n          <Button variant=\"secondary\" className={styles.buttonContainer} onClick={() => onButtonClick(true)}>\n            <div className={styles.button}>\n              <Icon name=\"thumbs-up\" size=\"xxxl\" />\n              <span>\n                <Trans i18nKey=\"alerting.insights-menu-button-renderer.modal.i-like-it\">I like it</Trans>\n              </span>\n            </div>\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n\n  const menu = (\n    <Menu>\n      <Menu.Item\n        label={t('alerting.insights-menu-button-renderer.menu.label-explore', 'Explore')}\n        icon=\"compass\"\n        url={url}\n        target=\"_blank\"\n      />\n      <Menu.Item\n        label={t('alerting.insights-menu-button-renderer.menu.label-rate-this-panel', 'Rate this panel')}\n        icon=\"comment-alt-message\"\n        onClick={() => setShowModal(true)}\n      />\n    </Menu>\n  );\n\n  return (\n    <div>\n      <Dropdown overlay={menu} placement=\"bottom-start\">\n        <IconButton\n          name=\"ellipsis-v\"\n          variant=\"secondary\"\n          className={styles.menu}\n          aria-label={t('alerting.insights-menu-button-renderer.aria-label-rate-this-panel', 'Rate this panel')}\n        />\n      </Dropdown>\n      {modal}\n    </div>\n  );\n};\n\ninterface InsightsMenuButtonState extends SceneObjectState {\n  panel: string;\n}\n\nexport class InsightsMenuButton extends SceneObjectBase<InsightsMenuButtonState> {\n  static Component = InsightsMenuButtonRenderer;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  buttonsContainer: css({\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'stretch',\n    gap: '25px',\n  }),\n  buttonContainer: css({\n    height: '150px',\n    width: '150px',\n    cursor: 'pointer',\n    justifyContent: 'center',\n  }),\n  button: css({\n    display: 'flex',\n    flexDirection: 'column',\n  }),\n  container: css({\n    maxWidth: '370px',\n  }),\n  menu: css({\n    height: '25px',\n    margin: '0',\n  }),\n  thumbsdown: css({\n    transform: 'scale(-1, -1);',\n  }),\n});\n","import { ThresholdsMode } from '@grafana/data';\nimport { PanelBuilders, SceneFlexItem, SceneQueryRunner } from '@grafana/scenes';\nimport { DataSourceRef } from '@grafana/schema';\n\nimport { INSTANCE_ID, PANEL_STYLES } from '../../home/Insights';\nimport { InsightsMenuButton } from '../InsightsMenuButton';\n\nexport function getActiveGrafanaAlertsScene(datasource: DataSourceRef, panelTitle: string) {\n  const expr = INSTANCE_ID\n    ? `sum by (state) (grafanacloud_grafana_instance_alerting_rule_group_rules{state=\"active\", id=\"${INSTANCE_ID}\"})`\n    : `sum by (state) (grafanacloud_grafana_instance_alerting_rule_group_rules{state=\"active\"})`;\n\n  const query = new SceneQueryRunner({\n    datasource,\n    queries: [\n      {\n        refId: 'A',\n        instant: true,\n        expr,\n      },\n    ],\n  });\n\n  return new SceneFlexItem({\n    ...PANEL_STYLES,\n    body: PanelBuilders.stat()\n      .setTitle(panelTitle)\n      .setDescription('The number of currently active alert rules')\n      .setData(query)\n      .setThresholds({\n        mode: ThresholdsMode.Absolute,\n        steps: [\n          {\n            color: 'green',\n            value: 0,\n          },\n          {\n            color: 'green',\n            value: 80,\n          },\n        ],\n      })\n      .setNoValue('0')\n      .setHeaderActions([new InsightsMenuButton({ panel: panelTitle })])\n      .build(),\n  });\n}\n","import { PanelBuilders, SceneDataTransformer, SceneFlexItem, SceneQueryRunner } from '@grafana/scenes';\nimport { DataSourceRef, GraphDrawStyle, TooltipDisplayMode } from '@grafana/schema';\n\nimport { INSTANCE_ID, PANEL_STYLES, overrideToFixedColor } from '../../home/Insights';\nimport { InsightsMenuButton } from '../InsightsMenuButton';\n\nexport function getGrafanaInstancesByStateScene(datasource: DataSourceRef, panelTitle: string) {\n  const expr = INSTANCE_ID\n    ? `sum by(state) (grafanacloud_grafana_instance_alerting_alerts{id=\"${INSTANCE_ID}\"})`\n    : 'sum by (state) (grafanacloud_grafana_instance_alerting_alerts)';\n\n  const query = new SceneQueryRunner({\n    datasource,\n    queries: [\n      {\n        refId: 'A',\n        expr,\n        range: true,\n        legendFormat: '{{state}}',\n      },\n    ],\n  });\n\n  const transformation = new SceneDataTransformer({\n    $data: query,\n    transformations: [\n      {\n        id: 'renameByRegex',\n        options: {\n          regex: 'alerting',\n          renamePattern: 'firing',\n        },\n      },\n    ],\n  });\n\n  return new SceneFlexItem({\n    ...PANEL_STYLES,\n    height: '400px',\n    body: PanelBuilders.timeseries()\n      .setTitle(panelTitle)\n      .setDescription('A breakdown of all of your alert rule instances based on state')\n      .setData(transformation)\n      .setCustomFieldConfig('drawStyle', GraphDrawStyle.Line)\n      .setOption('tooltip', { mode: TooltipDisplayMode.Multi })\n      .setOverrides((b) =>\n        b\n          .matchFieldsWithName('firing')\n          .overrideColor(overrideToFixedColor('firing'))\n          .matchFieldsWithName('normal')\n          .overrideColor(overrideToFixedColor('normal'))\n          .matchFieldsWithName('pending')\n          .overrideColor(overrideToFixedColor('pending'))\n          .matchFieldsWithName('recovering')\n          .overrideColor(overrideToFixedColor('recovering'))\n          .matchFieldsWithName('error')\n          .overrideColor(overrideToFixedColor('error'))\n          .matchFieldsWithName('nodata')\n          .overrideColor(overrideToFixedColor('nodata'))\n      )\n      .setHeaderActions([new InsightsMenuButton({ panel: panelTitle })])\n      .build(),\n  });\n}\n","import { PanelBuilders, SceneFlexItem, SceneQueryRunner } from '@grafana/scenes';\nimport { DataSourceRef, GraphDrawStyle, TooltipDisplayMode } from '@grafana/schema';\n\nimport { INSTANCE_ID, PANEL_STYLES, overrideToFixedColor } from '../../home/Insights';\nimport { InsightsMenuButton } from '../InsightsMenuButton';\n\nexport function getGrafanaEvalSuccessVsFailuresScene(datasource: DataSourceRef, panelTitle: string) {\n  const exprA = INSTANCE_ID\n    ? `sum(grafanacloud_grafana_instance_alerting_rule_evaluations_total:rate5m{id=\"${INSTANCE_ID}\"}) - sum(grafanacloud_grafana_instance_alerting_rule_evaluation_failures_total:rate5m{id=\"${INSTANCE_ID}\"})`\n    : `sum(grafanacloud_grafana_instance_alerting_rule_evaluations_total:rate5m) - sum(grafanacloud_grafana_instance_alerting_rule_evaluation_failures_total:rate5m)`;\n\n  const exprB = INSTANCE_ID\n    ? `sum(grafanacloud_grafana_instance_alerting_rule_evaluation_failures_total:rate5m{id=\"${INSTANCE_ID}\"})`\n    : `sum(grafanacloud_grafana_instance_alerting_rule_evaluation_failures_total:rate5m)`;\n\n  const query = new SceneQueryRunner({\n    datasource,\n    queries: [\n      {\n        refId: 'A',\n        expr: exprA,\n        range: true,\n        legendFormat: 'success',\n      },\n      {\n        refId: 'B',\n        expr: exprB,\n        range: true,\n        legendFormat: 'failed',\n      },\n    ],\n  });\n\n  return new SceneFlexItem({\n    ...PANEL_STYLES,\n    body: PanelBuilders.timeseries()\n      .setTitle(panelTitle)\n      .setDescription('The number of successful and failed alert rule evaluations')\n      .setData(query)\n      .setOption('tooltip', { mode: TooltipDisplayMode.Multi })\n      .setCustomFieldConfig('drawStyle', GraphDrawStyle.Line)\n      .setOverrides((b) =>\n        b\n          .matchFieldsWithName('success')\n          .overrideColor(overrideToFixedColor('success'))\n          .matchFieldsWithName('failed')\n          .overrideColor(overrideToFixedColor('failed'))\n      )\n      .setHeaderActions([new InsightsMenuButton({ panel: panelTitle })])\n      .build(),\n  });\n}\n","import { PanelBuilders, SceneFlexItem, SceneQueryRunner } from '@grafana/scenes';\nimport { DataSourceRef } from '@grafana/schema';\n\nimport { INSTANCE_ID, overrideToFixedColor } from '../../home/Insights';\nimport { InsightsMenuButton } from '../InsightsMenuButton';\nexport function getInstanceStatByStatusScene(\n  datasource: DataSourceRef,\n  panelTitle: string,\n  panelDescription: string,\n  status: 'alerting' | 'pending' | 'nodata' | 'normal' | 'error' | 'recovering'\n) {\n  const expr = INSTANCE_ID\n    ? `sum by (state) (grafanacloud_grafana_instance_alerting_alerts{state=\"${status}\", id=\"${INSTANCE_ID}\"})`\n    : `sum by (state) (grafanacloud_grafana_instance_alerting_alerts{state=\"${status}\"})`;\n\n  const query = new SceneQueryRunner({\n    datasource,\n    queries: [\n      {\n        refId: 'A',\n        instant: true,\n        expr,\n        legendFormat: '{{state}}',\n      },\n    ],\n  });\n\n  return new SceneFlexItem({\n    height: '100%',\n    body: PanelBuilders.stat()\n      .setTitle(panelTitle)\n      .setDescription(panelDescription)\n      .setData(query)\n      .setOverrides((b) => b.matchFieldsWithName(status).overrideColor(overrideToFixedColor(status)))\n      .setNoValue('0')\n      .setHeaderActions([new InsightsMenuButton({ panel: panelTitle })])\n      .build(),\n  });\n}\n","import { Observable, map } from 'rxjs';\n\nimport { DataFrame } from '@grafana/data';\nimport {\n  CustomTransformOperator,\n  PanelBuilders,\n  SceneDataTransformer,\n  SceneFlexItem,\n  SceneQueryRunner,\n} from '@grafana/scenes';\nimport { DataSourceRef, GraphDrawStyle, TooltipDisplayMode } from '@grafana/schema';\n\nimport { INSTANCE_ID, PANEL_STYLES } from '../../home/Insights';\nimport { InsightsMenuButton } from '../InsightsMenuButton';\n\nexport function getGrafanaMissedIterationsScene(datasource: DataSourceRef, panelTitle: string) {\n  const expr = `sum by(rule_group) (grafanacloud_instance_rule_group_iterations_missed_total:rate5m{id=\"${INSTANCE_ID}\"})`;\n  const query = new SceneQueryRunner({\n    datasource,\n    queries: [\n      {\n        refId: 'A',\n        expr,\n        range: true,\n        legendFormat: '{{rule_group}}',\n      },\n    ],\n  });\n\n  const legendTransformation: CustomTransformOperator = () => (source: Observable<DataFrame[]>) => {\n    return source.pipe(\n      map((data: DataFrame[]) => {\n        return data.map((frame: DataFrame) => {\n          return {\n            ...frame,\n            fields: frame.fields.map((field) => {\n              const displayNameFromDs = field.config.displayNameFromDS || '';\n              const matches = displayNameFromDs.match(/\\/rules\\/\\d+\\/(\\w+);(\\w+)/);\n\n              if (matches) {\n                field.config.displayName = `Folder: ${matches[1]} - Group: ${matches[2]}`;\n              }\n\n              return field;\n            }),\n          };\n        });\n      })\n    );\n  };\n\n  const transformation = new SceneDataTransformer({\n    $data: query,\n    transformations: [legendTransformation],\n  });\n\n  return new SceneFlexItem({\n    ...PANEL_STYLES,\n    body: PanelBuilders.timeseries()\n      .setTitle(panelTitle)\n      .setDescription('The number of missed iterations per evaluation group')\n      .setData(transformation)\n      .setOption('tooltip', { mode: TooltipDisplayMode.Multi })\n      .setCustomFieldConfig('drawStyle', GraphDrawStyle.Line)\n      .setHeaderActions([new InsightsMenuButton({ panel: panelTitle })])\n      .build(),\n  });\n}\n","import { css } from '@emotion/css';\nimport { Observable, map } from 'rxjs';\n\nimport { DataFrame, Field, GrafanaTheme2 } from '@grafana/data';\nimport {\n  CustomTransformOperator,\n  PanelBuilders,\n  SceneDataTransformer,\n  SceneFlexItem,\n  SceneQueryRunner,\n} from '@grafana/scenes';\nimport { DataSourceRef } from '@grafana/schema';\nimport { Link, useStyles2 } from '@grafana/ui';\n\nimport { PANEL_STYLES } from '../../home/Insights';\nimport { createRelativeUrl } from '../../utils/url';\nimport { InsightsMenuButton } from '../InsightsMenuButton';\n\nexport function getMostFiredInstancesScene(datasource: DataSourceRef, panelTitle: string) {\n  const query = new SceneQueryRunner({\n    datasource,\n    queries: [\n      {\n        refId: 'A',\n        expr: 'topk(10, sum by(labels_alertname, ruleUID) (count_over_time({from=\"state-history\"} | json | current = `Alerting` [1w])))',\n        instant: true,\n      },\n    ],\n  });\n\n  const createRuleLink = (field: Field<string>, frame: DataFrame) => {\n    return {\n      ...field,\n      values: field.values.map((value, index) => {\n        const ruleUIDs = frame.fields.find((field) => field.name === 'ruleUID');\n        const ruleUID = ruleUIDs?.values[index];\n        return <RuleLink key={value} value={value} ruleUID={ruleUID} />;\n      }),\n    };\n  };\n\n  const ruleLinkTransformation: CustomTransformOperator = () => (source: Observable<DataFrame[]>) => {\n    return source.pipe(\n      map((data: DataFrame[]) => {\n        return data.map((frame: DataFrame) => {\n          return {\n            ...frame,\n            fields: frame.fields.map((field) => {\n              //Transforming the column `labels_alertname` to show a link to the rule view page next to the alert name\n              if (field.name === 'labels_alertname') {\n                return createRuleLink(field, frame);\n              }\n              return field;\n            }),\n          };\n        });\n      })\n    );\n  };\n\n  const transformation = new SceneDataTransformer({\n    $data: query,\n    transformations: [\n      ruleLinkTransformation,\n      {\n        id: 'sortBy',\n        options: {\n          fields: {},\n          sort: [\n            {\n              field: 'Value #A',\n              desc: true,\n            },\n          ],\n        },\n      },\n      {\n        id: 'organize',\n        options: {\n          excludeByName: {\n            Time: true,\n            ruleUID: true,\n          },\n          indexByName: {\n            labels_alertname: 0,\n            'Value #A': 1,\n          },\n          renameByName: {\n            labels_alertname: 'Alert rule name',\n            'Value #A': 'Number of fires',\n          },\n        },\n      },\n    ],\n  });\n\n  return new SceneFlexItem({\n    ...PANEL_STYLES,\n    body: PanelBuilders.table()\n      .setTitle(panelTitle)\n      .setDescription('The alert rule instances that have fired the most')\n      .setData(transformation)\n      .setNoValue('No new alerts fired last week')\n      .setHeaderActions([new InsightsMenuButton({ panel: panelTitle })])\n      .build(),\n  });\n}\n\nexport function RuleLink({ value, ruleUID }: { value: string; ruleUID: string }) {\n  const getStyles = (theme: GrafanaTheme2) => ({\n    link: css({\n      '& > a': {\n        color: theme.colors.text.link,\n      },\n    }),\n  });\n\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.link}>\n      <Link target=\"_blank\" href={createRelativeUrl(`/alerting/grafana/${ruleUID}/view`)}>\n        {value}\n      </Link>\n    </div>\n  );\n}\n","import { ThresholdsMode } from '@grafana/data';\nimport { PanelBuilders, SceneFlexItem, SceneQueryRunner } from '@grafana/scenes';\nimport { DataSourceRef } from '@grafana/schema';\n\nimport { INSTANCE_ID, PANEL_STYLES } from '../../home/Insights';\nimport { InsightsMenuButton } from '../InsightsMenuButton';\n\nexport function getPausedGrafanaAlertsScene(datasource: DataSourceRef, panelTitle: string) {\n  const expr = INSTANCE_ID\n    ? `sum by (state) (grafanacloud_grafana_instance_alerting_rule_group_rules{state=\"paused\", id=\"${INSTANCE_ID}\"})`\n    : `sum by (state) (grafanacloud_grafana_instance_alerting_rule_group_rules{state=\"paused\"})`;\n\n  const query = new SceneQueryRunner({\n    datasource,\n    queries: [\n      {\n        refId: 'A',\n        instant: true,\n        expr,\n      },\n    ],\n  });\n\n  return new SceneFlexItem({\n    ...PANEL_STYLES,\n    body: PanelBuilders.stat()\n      .setTitle(panelTitle)\n      .setDescription('The number of current paused alert rules')\n      .setData(query)\n      .setThresholds({\n        mode: ThresholdsMode.Absolute,\n        steps: [\n          {\n            color: 'yellow',\n            value: 0,\n          },\n          {\n            color: 'red',\n            value: 80,\n          },\n        ],\n      })\n      .setNoValue('0')\n      .setHeaderActions([new InsightsMenuButton({ panel: panelTitle })])\n      .build(),\n  });\n}\n","import { PanelBuilders, SceneFlexItem, SceneQueryRunner } from '@grafana/scenes';\nimport { DataSourceRef, GraphDrawStyle, TooltipDisplayMode } from '@grafana/schema';\n\nimport { INSTANCE_ID, PANEL_STYLES, overrideToFixedColor } from '../../home/Insights';\nimport { InsightsMenuButton } from '../InsightsMenuButton';\n\nexport function getGrafanaRulesByEvaluationScene(datasource: DataSourceRef, panelTitle: string) {\n  const expr = INSTANCE_ID\n    ? `sum by (state) (grafanacloud_grafana_instance_alerting_rule_group_rules{id=\"${INSTANCE_ID}\"})`\n    : `sum by (state) (grafanacloud_grafana_instance_alerting_rule_group_rules)`;\n\n  const query = new SceneQueryRunner({\n    datasource,\n    queries: [\n      {\n        refId: 'A',\n        expr,\n        range: true,\n        legendFormat: '{{state}} evaluation',\n      },\n    ],\n  });\n\n  return new SceneFlexItem({\n    ...PANEL_STYLES,\n    body: PanelBuilders.timeseries()\n      .setTitle(panelTitle)\n      .setDescription('See how many of your alert rules are paused or active')\n      .setData(query)\n      .setCustomFieldConfig('drawStyle', GraphDrawStyle.Line)\n      .setOption('tooltip', { mode: TooltipDisplayMode.Multi })\n      .setOverrides((b) =>\n        b.matchFieldsWithName('active evaluation').overrideColor(overrideToFixedColor('active evaluation'))\n      )\n      .setHeaderActions([new InsightsMenuButton({ panel: panelTitle })])\n      .build(),\n  });\n}\n","import { PanelBuilders, SceneFlexItem, SceneQueryRunner } from '@grafana/scenes';\nimport { DataSourceRef, GraphDrawStyle, TooltipDisplayMode } from '@grafana/schema';\n\nimport { INSTANCE_ID, PANEL_STYLES, overrideToFixedColor } from '../../home/Insights';\nimport { InsightsMenuButton } from '../InsightsMenuButton';\n\nexport function getGrafanaRulesByEvaluationPercentageScene(datasource: DataSourceRef, panelTitle: string) {\n  const expr = INSTANCE_ID\n    ? `sum by (state) (grafanacloud_grafana_instance_alerting_rule_group_rules{id=\"${INSTANCE_ID}\"}) / ignoring(state) group_left sum(grafanacloud_grafana_instance_alerting_rule_group_rules{id=\"${INSTANCE_ID}\"})`\n    : `sum by (state) (grafanacloud_grafana_instance_alerting_rule_group_rules) / ignoring(state) group_left sum(grafanacloud_grafana_instance_alerting_rule_group_rules)`;\n\n  const query = new SceneQueryRunner({\n    datasource,\n    queries: [\n      {\n        refId: 'A',\n        expr,\n        range: true,\n        legendFormat: '{{state}} evaluation',\n      },\n    ],\n  });\n\n  return new SceneFlexItem({\n    ...PANEL_STYLES,\n    body: PanelBuilders.timeseries()\n      .setTitle(panelTitle)\n      .setDescription('See what percentage of your alert rules are paused or active')\n      .setData(query)\n      .setCustomFieldConfig('drawStyle', GraphDrawStyle.Line)\n      .setCustomFieldConfig('fillOpacity', 45)\n      .setUnit('percentunit')\n      .setOption('tooltip', { mode: TooltipDisplayMode.Multi })\n      .setMax(1)\n      .setOverrides((b) =>\n        b.matchFieldsWithName('active evaluation').overrideColor(overrideToFixedColor('active evaluation'))\n      )\n      .setHeaderActions([new InsightsMenuButton({ panel: panelTitle })])\n      .build(),\n  });\n}\n","import { PanelBuilders, SceneFlexItem, SceneQueryRunner } from '@grafana/scenes';\nimport { DataSourceRef, GraphDrawStyle, TooltipDisplayMode } from '@grafana/schema';\n\nimport { INSTANCE_ID, PANEL_STYLES, overrideToFixedColor } from '../../../home/Insights';\nimport { InsightsMenuButton } from '../../InsightsMenuButton';\n\nexport function getAlertsByStateScene(datasource: DataSourceRef, panelTitle: string) {\n  const expr = INSTANCE_ID\n    ? `sum by (state) (grafanacloud_grafana_instance_alerting_alertmanager_alerts{id=\"${INSTANCE_ID}\"})`\n    : `sum by (state) (grafanacloud_grafana_instance_alerting_alertmanager_alerts)`;\n\n  const query = new SceneQueryRunner({\n    datasource,\n    queries: [\n      {\n        refId: 'A',\n        expr,\n        range: true,\n        legendFormat: '{{state}}',\n      },\n    ],\n  });\n\n  return new SceneFlexItem({\n    ...PANEL_STYLES,\n    body: PanelBuilders.timeseries()\n      .setTitle(panelTitle)\n      .setDescription('A breakdown of all of your firing alert rule instances based on state')\n      .setData(query)\n      .setCustomFieldConfig('drawStyle', GraphDrawStyle.Line)\n      .setOption('tooltip', { mode: TooltipDisplayMode.Multi })\n      .setOverrides((b) => b.matchFieldsWithName('active').overrideColor(overrideToFixedColor('active')))\n      .setHeaderActions([new InsightsMenuButton({ panel: panelTitle })])\n      .build(),\n  });\n}\n","import { PanelBuilders, SceneFlexItem, SceneQueryRunner } from '@grafana/scenes';\nimport { DataSourceRef, GraphDrawStyle, TooltipDisplayMode } from '@grafana/schema';\n\nimport { INSTANCE_ID, PANEL_STYLES } from '../../../home/Insights';\nimport { InsightsMenuButton } from '../../InsightsMenuButton';\n\nexport function getGrafanaAlertmanagerSilencesScene(datasource: DataSourceRef, panelTitle: string) {\n  const expr = INSTANCE_ID\n    ? `sum by (state) (grafanacloud_grafana_instance_alerting_silences{id=\"${INSTANCE_ID}\"})`\n    : `sum by (state) (grafanacloud_grafana_instance_alerting_silences)`;\n\n  const query = new SceneQueryRunner({\n    datasource,\n    queries: [\n      {\n        refId: 'A',\n        expr,\n        range: true,\n        legendFormat: '{{state}}',\n      },\n    ],\n  });\n\n  return new SceneFlexItem({\n    ...PANEL_STYLES,\n    body: PanelBuilders.timeseries()\n      .setTitle(panelTitle)\n      .setDescription('The number of silences by state')\n      .setData(query)\n      .setCustomFieldConfig('drawStyle', GraphDrawStyle.Line)\n      .setOption('tooltip', { mode: TooltipDisplayMode.Multi })\n      .setHeaderActions([new InsightsMenuButton({ panel: panelTitle })])\n      .build(),\n  });\n}\n","import { PanelBuilders, SceneFlexItem, SceneQueryRunner } from '@grafana/scenes';\nimport { DataSourceRef, GraphDrawStyle, TooltipDisplayMode } from '@grafana/schema';\n\nimport { INSTANCE_ID, PANEL_STYLES, overrideToFixedColor } from '../../home/Insights';\nimport { InsightsMenuButton } from '../InsightsMenuButton';\n\nexport function getAlertsByStateScene(datasource: DataSourceRef, panelTitle: string) {\n  const expr = INSTANCE_ID\n    ? `sum by (state) (grafanacloud_instance_alertmanager_alerts{stack_id=\"${INSTANCE_ID}\"})`\n    : `sum by (state) (grafanacloud_instance_alertmanager_alerts)`;\n\n  const query = new SceneQueryRunner({\n    datasource,\n    queries: [\n      {\n        refId: 'A',\n        expr,\n        range: true,\n        legendFormat: '{{state}}',\n      },\n    ],\n  });\n\n  return new SceneFlexItem({\n    ...PANEL_STYLES,\n    body: PanelBuilders.timeseries()\n      .setTitle(panelTitle)\n      .setDescription('A breakdown of all of your firing alert rule instances based on state')\n      .setData(query)\n      .setCustomFieldConfig('drawStyle', GraphDrawStyle.Line)\n      .setOption('tooltip', { mode: TooltipDisplayMode.Multi })\n      .setOverrides((b) => b.matchFieldsWithName('active').overrideColor(overrideToFixedColor('active')))\n      .setHeaderActions([new InsightsMenuButton({ panel: panelTitle })])\n      .build(),\n  });\n}\n","import { PanelBuilders, SceneFlexItem, SceneQueryRunner } from '@grafana/scenes';\nimport { BigValueGraphMode, DataSourceRef } from '@grafana/schema';\n\nimport { INSTANCE_ID, PANEL_STYLES } from '../../home/Insights';\nimport { InsightsMenuButton } from '../InsightsMenuButton';\n\nexport function getInvalidConfigScene(datasource: DataSourceRef, panelTitle: string) {\n  const expr = INSTANCE_ID\n    ? `sum by (cluster)(grafanacloud_instance_alertmanager_invalid_config{stack_id=\"${INSTANCE_ID}\"})`\n    : `sum by (cluster)(grafanacloud_instance_alertmanager_invalid_config)`;\n\n  const query = new SceneQueryRunner({\n    datasource,\n    queries: [\n      {\n        refId: 'A',\n        expr,\n        range: true,\n        legendFormat: '{{cluster}}',\n      },\n    ],\n  });\n\n  return new SceneFlexItem({\n    ...PANEL_STYLES,\n    body: PanelBuilders.stat()\n      .setTitle(panelTitle)\n      .setDescription('The current state of your alertmanager configuration')\n      .setData(query)\n      .setUnit('bool_yes_no')\n      .setOption('graphMode', BigValueGraphMode.None)\n      .setHeaderActions([new InsightsMenuButton({ panel: panelTitle })])\n      .build(),\n  });\n}\n","import { PanelBuilders, SceneFlexItem, SceneQueryRunner } from '@grafana/scenes';\nimport { DataSourceRef, GraphDrawStyle, TooltipDisplayMode } from '@grafana/schema';\n\nimport { INSTANCE_ID, PANEL_STYLES, overrideToFixedColor } from '../../home/Insights';\nimport { InsightsMenuButton } from '../InsightsMenuButton';\n\nexport function getNotificationsScene(datasource: DataSourceRef, panelTitle: string) {\n  const exprA = INSTANCE_ID\n    ? `sum by(cluster)(grafanacloud_instance_alertmanager_notifications_per_second{stack_id=\"${INSTANCE_ID}\"}) - sum by (cluster)(grafanacloud_instance_alertmanager_notifications_failed_per_second{stack_id=\"${INSTANCE_ID}\"})`\n    : `sum by(cluster)(grafanacloud_instance_alertmanager_notifications_per_second) - sum by (cluster)(grafanacloud_instance_alertmanager_notifications_failed_per_second)`;\n\n  const exprB = INSTANCE_ID\n    ? `sum by(cluster)(grafanacloud_instance_alertmanager_notifications_failed_per_second{stack_id=\"${INSTANCE_ID}\"})`\n    : `sum by(cluster)(grafanacloud_instance_alertmanager_notifications_failed_per_second)`;\n\n  const query = new SceneQueryRunner({\n    datasource,\n    queries: [\n      {\n        refId: 'A',\n        expr: exprA,\n        range: true,\n        legendFormat: 'success',\n      },\n      {\n        refId: 'B',\n        expr: exprB,\n        range: true,\n        legendFormat: 'failed',\n      },\n    ],\n  });\n\n  return new SceneFlexItem({\n    ...PANEL_STYLES,\n    body: PanelBuilders.timeseries()\n      .setTitle(panelTitle)\n      .setDescription('The number of successful and failed notifications')\n      .setData(query)\n      .setCustomFieldConfig('drawStyle', GraphDrawStyle.Line)\n      .setOption('tooltip', { mode: TooltipDisplayMode.Multi })\n      .setOverrides((b) =>\n        b\n          .matchFieldsWithName('success')\n          .overrideColor(overrideToFixedColor('success'))\n          .matchFieldsWithName('failed')\n          .overrideColor(overrideToFixedColor('failed'))\n      )\n      .setHeaderActions([new InsightsMenuButton({ panel: panelTitle })])\n      .build(),\n  });\n}\n","import { PanelBuilders, SceneFlexItem, SceneQueryRunner } from '@grafana/scenes';\nimport { DataSourceRef, GraphDrawStyle, TooltipDisplayMode } from '@grafana/schema';\n\nimport { INSTANCE_ID, PANEL_STYLES } from '../../home/Insights';\nimport { InsightsMenuButton } from '../InsightsMenuButton';\n\nexport function getSilencesScene(datasource: DataSourceRef, panelTitle: string) {\n  const expr = INSTANCE_ID\n    ? `sum by (state) (grafanacloud_instance_alertmanager_silences{stack_id=\"${INSTANCE_ID}\"})`\n    : `sum by (state) (grafanacloud_instance_alertmanager_silences)`;\n\n  const query = new SceneQueryRunner({\n    datasource,\n    queries: [\n      {\n        refId: 'A',\n        expr,\n        range: true,\n        legendFormat: '{{state}}',\n      },\n    ],\n  });\n\n  return new SceneFlexItem({\n    ...PANEL_STYLES,\n    body: PanelBuilders.timeseries()\n      .setTitle(panelTitle)\n      .setDescription('The number of silences by state')\n      .setData(query)\n      .setCustomFieldConfig('drawStyle', GraphDrawStyle.Line)\n      .setOption('tooltip', { mode: TooltipDisplayMode.Multi })\n      .setHeaderActions([new InsightsMenuButton({ panel: panelTitle })])\n      .build(),\n  });\n}\n","import { PanelBuilders, SceneFlexItem, SceneQueryRunner } from '@grafana/scenes';\nimport { DataSourceRef, GraphDrawStyle, ThresholdsMode, TooltipDisplayMode } from '@grafana/schema';\n\nimport { INSTANCE_ID, PANEL_STYLES } from '../../../home/Insights';\nimport { InsightsMenuButton } from '../../InsightsMenuButton';\n\nexport function getRuleGroupEvaluationDurationIntervalRatioScene(datasource: DataSourceRef, panelTitle: string) {\n  const expr = INSTANCE_ID\n    ? `grafanacloud_instance_rule_group_last_duration_seconds{rule_group=\"$rule_group\", stack_id=\"${INSTANCE_ID}\"} / grafanacloud_instance_rule_group_interval_seconds{rule_group=\"$rule_group\", stack_id=\"${INSTANCE_ID}\"}`\n    : `grafanacloud_instance_rule_group_last_duration_seconds{rule_group=\"$rule_group\"} / grafanacloud_instance_rule_group_interval_seconds{rule_group=\"$rule_group\"}`;\n\n  const query = new SceneQueryRunner({\n    datasource,\n    queries: [\n      {\n        refId: 'A',\n        expr,\n        range: true,\n        legendFormat: 'duration / interval',\n      },\n    ],\n  });\n\n  return new SceneFlexItem({\n    ...PANEL_STYLES,\n    body: PanelBuilders.timeseries()\n      .setTitle(panelTitle)\n      .setDescription('The percentage of interval time spent evaluating')\n      .setData(query)\n      .setCustomFieldConfig('drawStyle', GraphDrawStyle.Line)\n      .setOption('tooltip', { mode: TooltipDisplayMode.Multi })\n      .setOption('legend', { showLegend: false })\n      .setUnit('percentunit')\n      .setThresholds({\n        mode: ThresholdsMode.Percentage,\n        steps: [\n          {\n            color: 'green',\n            value: 0,\n          },\n          {\n            color: 'red',\n            value: 80,\n          },\n          {\n            color: 'yellow',\n            value: 60,\n          },\n        ],\n      })\n      .setHeaderActions([new InsightsMenuButton({ panel: panelTitle })])\n      .build(),\n  });\n}\n","import { PanelBuilders, SceneFlexItem, SceneQueryRunner } from '@grafana/scenes';\nimport { DataSourceRef, GraphDrawStyle, TooltipDisplayMode } from '@grafana/schema';\n\nimport { INSTANCE_ID, PANEL_STYLES } from '../../../home/Insights';\nimport { InsightsMenuButton } from '../../InsightsMenuButton';\n\nexport function getRuleGroupEvaluationDurationScene(datasource: DataSourceRef, panelTitle: string) {\n  const expr = INSTANCE_ID\n    ? `grafanacloud_instance_rule_group_last_duration_seconds{rule_group=\"$rule_group\", stack_id=\"${INSTANCE_ID}\"}`\n    : `grafanacloud_instance_rule_group_last_duration_seconds{rule_group=\"$rule_group\"}`;\n\n  const query = new SceneQueryRunner({\n    datasource,\n    queries: [\n      {\n        refId: 'A',\n        expr,\n        range: true,\n        legendFormat: '{{rule_group}}',\n      },\n    ],\n  });\n\n  return new SceneFlexItem({\n    ...PANEL_STYLES,\n    body: PanelBuilders.timeseries()\n      .setTitle(panelTitle)\n      .setDescription('How long it took to evaluate the rule group')\n      .setData(query)\n      .setCustomFieldConfig('drawStyle', GraphDrawStyle.Line)\n      .setUnit('s')\n      .setOption('tooltip', { mode: TooltipDisplayMode.Multi })\n      .setOption('legend', { showLegend: false })\n      .setOverrides((b) =>\n        b.matchFieldsByQuery('A').overrideColor({\n          mode: 'fixed',\n          fixedColor: 'blue',\n        })\n      )\n      .setHeaderActions([new InsightsMenuButton({ panel: panelTitle })])\n      .build(),\n  });\n}\n","import { PanelBuilders, SceneFlexItem, SceneQueryRunner } from '@grafana/scenes';\nimport { DataSourceRef, GraphDrawStyle, TooltipDisplayMode } from '@grafana/schema';\n\nimport { INSTANCE_ID, PANEL_STYLES, overrideToFixedColor } from '../../../home/Insights';\nimport { InsightsMenuButton } from '../../InsightsMenuButton';\n\nexport function getRuleGroupEvaluationsScene(datasource: DataSourceRef, panelTitle: string) {\n  const exprA = INSTANCE_ID\n    ? `grafanacloud_instance_rule_evaluations_total:rate5m{rule_group=\"$rule_group\", stack_id=\"${INSTANCE_ID}\"} - grafanacloud_instance_rule_evaluation_failures_total:rate5m{rule_group=~\"$rule_group\", stack_id=\"${INSTANCE_ID}\"}`\n    : `grafanacloud_instance_rule_evaluations_total:rate5m{rule_group=\"$rule_group\"} - grafanacloud_instance_rule_evaluation_failures_total:rate5m{rule_group=~\"$rule_group\"}`;\n\n  const exprB = INSTANCE_ID\n    ? `grafanacloud_instance_rule_evaluation_failures_total:rate5m{rule_group=~\"$rule_group\", stack_id=\"${INSTANCE_ID}\"}`\n    : `grafanacloud_instance_rule_evaluation_failures_total:rate5m{rule_group=~\"$rule_group\"}`;\n\n  const query = new SceneQueryRunner({\n    datasource,\n    queries: [\n      {\n        refId: 'A',\n        expr: exprA,\n        range: true,\n        legendFormat: 'success',\n      },\n      {\n        refId: 'B',\n        expr: exprB,\n        range: true,\n        legendFormat: 'failed',\n      },\n    ],\n  });\n\n  return new SceneFlexItem({\n    ...PANEL_STYLES,\n    body: PanelBuilders.timeseries()\n      .setTitle(panelTitle)\n      .setDescription('The number of successful and failed evaluations for the rule group')\n      .setData(query)\n      .setCustomFieldConfig('drawStyle', GraphDrawStyle.Line)\n      .setOption('tooltip', { mode: TooltipDisplayMode.Multi })\n      .setOverrides((b) =>\n        b\n          .matchFieldsWithName('success')\n          .overrideColor(overrideToFixedColor('success'))\n          .matchFieldsWithName('failed')\n          .overrideColor(overrideToFixedColor('failed'))\n      )\n      .setHeaderActions([new InsightsMenuButton({ panel: panelTitle })])\n      .build(),\n  });\n}\n","import { PanelBuilders, SceneFlexItem, SceneQueryRunner } from '@grafana/scenes';\nimport { BigValueGraphMode, DataSourceRef } from '@grafana/schema';\n\nimport { INSTANCE_ID, PANEL_STYLES } from '../../../home/Insights';\nimport { InsightsMenuButton } from '../../InsightsMenuButton';\n\nexport function getRuleGroupIntervalScene(datasource: DataSourceRef, panelTitle: string) {\n  const expr = INSTANCE_ID\n    ? `grafanacloud_instance_rule_group_interval_seconds{rule_group=\"$rule_group\", stack_id=\"${INSTANCE_ID}\"}`\n    : `grafanacloud_instance_rule_group_interval_seconds{rule_group=\"$rule_group\"}`;\n\n  const query = new SceneQueryRunner({\n    datasource,\n    queries: [\n      {\n        refId: 'A',\n        expr,\n        range: true,\n        legendFormat: 'interval',\n      },\n    ],\n  });\n\n  return new SceneFlexItem({\n    ...PANEL_STYLES,\n    body: PanelBuilders.stat()\n      .setTitle(panelTitle)\n      .setDescription('The current and historical rule group evaluation interval')\n      .setData(query)\n      .setUnit('s')\n      .setOption('graphMode', BigValueGraphMode.Area)\n      .setHeaderActions([new InsightsMenuButton({ panel: panelTitle })])\n      .build(),\n  });\n}\n","import { PanelBuilders, SceneFlexItem, SceneQueryRunner } from '@grafana/scenes';\nimport { BigValueGraphMode, DataSourceRef } from '@grafana/schema';\n\nimport { INSTANCE_ID, PANEL_STYLES } from '../../../home/Insights';\nimport { InsightsMenuButton } from '../../InsightsMenuButton';\n\nexport function getRulesPerGroupScene(datasource: DataSourceRef, panelTitle: string) {\n  const expr = INSTANCE_ID\n    ? `sum(grafanacloud_instance_rule_group_rules{rule_group=\"$rule_group\", stack_id=\"${INSTANCE_ID}\"})`\n    : `sum(grafanacloud_instance_rule_group_rules{rule_group=\"$rule_group\"})`;\n\n  const query = new SceneQueryRunner({\n    datasource,\n    queries: [\n      {\n        refId: 'A',\n        expr,\n        range: true,\n        legendFormat: 'number of rules',\n      },\n    ],\n  });\n\n  return new SceneFlexItem({\n    ...PANEL_STYLES,\n    body: PanelBuilders.stat()\n      .setTitle(panelTitle)\n      .setDescription('The current and historical number of alert rules in the rule group')\n      .setData(query)\n      .setUnit('none')\n      .setOption('graphMode', BigValueGraphMode.Area)\n      .setOverrides((b) =>\n        b.matchFieldsByQuery('A').overrideColor({\n          mode: 'fixed',\n          fixedColor: 'blue',\n        })\n      )\n      .setNoValue('0')\n      .setHeaderActions([new InsightsMenuButton({ panel: panelTitle })])\n      .build(),\n  });\n}\n","import { PanelBuilders, SceneFlexItem, SceneQueryRunner } from '@grafana/scenes';\nimport { DataSourceRef, GraphDrawStyle, TooltipDisplayMode } from '@grafana/schema';\n\nimport { INSTANCE_ID, PANEL_STYLES, overrideToFixedColor } from '../../../home/Insights';\nimport { InsightsMenuButton } from '../../InsightsMenuButton';\n\nexport function getEvalSuccessVsFailuresScene(datasource: DataSourceRef, panelTitle: string) {\n  const exprA = INSTANCE_ID\n    ? `sum(grafanacloud_instance_rule_evaluations_total:rate5m{stack_id=\"${INSTANCE_ID}\"}) - sum(grafanacloud_instance_rule_evaluation_failures_total:rate5m{stack_id=\"${INSTANCE_ID}\"})`\n    : `sum(grafanacloud_instance_rule_evaluations_total:rate5m) - sum(grafanacloud_instance_rule_evaluation_failures_total:rate5m)`;\n\n  const exprB = INSTANCE_ID\n    ? `sum(grafanacloud_instance_rule_evaluation_failures_total:rate5m{stack_id=\"${INSTANCE_ID}\"})`\n    : `sum(grafanacloud_instance_rule_evaluation_failures_total:rate5m)`;\n\n  const query = new SceneQueryRunner({\n    datasource,\n    queries: [\n      {\n        refId: 'A',\n        expr: exprA,\n        range: true,\n        legendFormat: 'success',\n      },\n      {\n        refId: 'B',\n        expr: exprB,\n        range: true,\n        legendFormat: 'failed',\n      },\n    ],\n  });\n\n  return new SceneFlexItem({\n    ...PANEL_STYLES,\n    body: PanelBuilders.timeseries()\n      .setTitle(panelTitle)\n      .setDescription('The number of successful and failed alert rule evaluations')\n      .setData(query)\n      .setCustomFieldConfig('drawStyle', GraphDrawStyle.Line)\n      .setOption('tooltip', { mode: TooltipDisplayMode.Multi })\n      .setOverrides((b) => b.matchFieldsWithName('failed').overrideColor(overrideToFixedColor('failed')))\n      .setHeaderActions([new InsightsMenuButton({ panel: panelTitle })])\n      .build(),\n  });\n}\n","import { ThresholdsMode } from '@grafana/data';\nimport { PanelBuilders, SceneFlexItem, SceneQueryRunner } from '@grafana/scenes';\nimport { DataSourceRef } from '@grafana/schema';\n\nimport { PANEL_STYLES } from '../../../home/Insights';\nimport { InsightsMenuButton } from '../../InsightsMenuButton';\n\nexport function getFiringCloudAlertsScene(datasource: DataSourceRef, panelTitle: string) {\n  const query = new SceneQueryRunner({\n    datasource,\n    queries: [\n      {\n        refId: 'A',\n        instant: true,\n        expr: 'sum by (alertstate) (ALERTS{alertstate=\"firing\"})',\n      },\n    ],\n  });\n\n  return new SceneFlexItem({\n    ...PANEL_STYLES,\n    body: PanelBuilders.stat()\n      .setTitle(panelTitle)\n      .setDescription('The number of currently firing alert rule instances')\n      .setData(query)\n      .setThresholds({\n        mode: ThresholdsMode.Absolute,\n        steps: [\n          {\n            color: 'red',\n            value: 0,\n          },\n          {\n            color: 'red',\n            value: 80,\n          },\n        ],\n      })\n      .setNoValue('0')\n      .setHeaderActions([new InsightsMenuButton({ panel: panelTitle })])\n      .build(),\n  });\n}\n","import { PanelBuilders, SceneFlexItem, SceneQueryRunner } from '@grafana/scenes';\nimport { DataSourceRef, GraphDrawStyle, TooltipDisplayMode } from '@grafana/schema';\n\nimport { PANEL_STYLES, overrideToFixedColor } from '../../../home/Insights';\nimport { InsightsMenuButton } from '../../InsightsMenuButton';\n\nexport function getInstancesByStateScene(datasource: DataSourceRef, panelTitle: string) {\n  const query = new SceneQueryRunner({\n    datasource,\n    queries: [\n      {\n        refId: 'A',\n        expr: 'sum by (alertstate) (ALERTS)',\n        range: true,\n        legendFormat: '{{state}}',\n      },\n    ],\n  });\n\n  return new SceneFlexItem({\n    ...PANEL_STYLES,\n    body: PanelBuilders.timeseries()\n      .setTitle(panelTitle)\n      .setDescription('The number of firing and pending alert rule instances')\n      .setData(query)\n      .setCustomFieldConfig('drawStyle', GraphDrawStyle.Line)\n      .setOption('tooltip', { mode: TooltipDisplayMode.Multi })\n      .setOverrides((b) => b.matchFieldsWithName('firing').overrideColor(overrideToFixedColor('firing')))\n      .setHeaderActions([new InsightsMenuButton({ panel: panelTitle })])\n      .build(),\n  });\n}\n","import { PanelBuilders, SceneFlexItem, SceneQueryRunner } from '@grafana/scenes';\nimport { DataSourceRef, GraphDrawStyle, TooltipDisplayMode } from '@grafana/schema';\n\nimport { PANEL_STYLES, overrideToFixedColor } from '../../../home/Insights';\nimport { InsightsMenuButton } from '../../InsightsMenuButton';\n\nexport function getInstancesPercentageByStateScene(datasource: DataSourceRef, panelTitle: string) {\n  const query = new SceneQueryRunner({\n    datasource,\n    queries: [\n      {\n        refId: 'A',\n        expr: 'sum by (alertstate) (ALERTS) / ignoring(alertstate) group_left sum(ALERTS)',\n        range: true,\n        legendFormat: '{{alertstate}}',\n      },\n    ],\n  });\n\n  return new SceneFlexItem({\n    ...PANEL_STYLES,\n    body: PanelBuilders.timeseries()\n      .setTitle(panelTitle)\n      .setDescription('See what percentage of your alert rules are firing versus pending')\n      .setData(query)\n      .setCustomFieldConfig('drawStyle', GraphDrawStyle.Line)\n      .setCustomFieldConfig('fillOpacity', 45)\n      .setUnit('percentunit')\n      .setMax(1)\n      .setOption('tooltip', { mode: TooltipDisplayMode.Multi })\n      .setOverrides((b) => b.matchFieldsWithName('firing').overrideColor(overrideToFixedColor('firing')))\n      .setHeaderActions([new InsightsMenuButton({ panel: panelTitle })])\n      .build(),\n  });\n}\n","import { PanelBuilders, SceneFlexItem, SceneQueryRunner } from '@grafana/scenes';\nimport { DataSourceRef, GraphDrawStyle, TooltipDisplayMode } from '@grafana/schema';\n\nimport { INSTANCE_ID, PANEL_STYLES, overrideToFixedColor } from '../../../home/Insights';\nimport { InsightsMenuButton } from '../../InsightsMenuButton';\n\nexport function getMissedIterationsScene(datasource: DataSourceRef, panelTitle: string) {\n  const expr = INSTANCE_ID\n    ? `sum(grafanacloud_instance_rule_group_iterations_missed_total:rate5m{stack_id=\"${INSTANCE_ID}\"})`\n    : `sum(grafanacloud_instance_rule_group_iterations_missed_total:rate5m)`;\n\n  const query = new SceneQueryRunner({\n    datasource,\n    queries: [\n      {\n        refId: 'A',\n        expr,\n        range: true,\n        legendFormat: 'missed',\n      },\n    ],\n  });\n\n  return new SceneFlexItem({\n    ...PANEL_STYLES,\n    body: PanelBuilders.timeseries()\n      .setTitle(panelTitle)\n      .setDescription('The number of evaluations missed')\n      .setData(query)\n      .setCustomFieldConfig('drawStyle', GraphDrawStyle.Line)\n      .setOption('tooltip', { mode: TooltipDisplayMode.Multi })\n      .setOption('legend', { showLegend: false })\n      .setOverrides((b) => b.matchFieldsWithName('missed').overrideColor(overrideToFixedColor('missed')))\n      .setHeaderActions([new InsightsMenuButton({ panel: panelTitle })])\n      .build(),\n  });\n}\n","import { PanelBuilders, SceneDataTransformer, SceneFlexItem, SceneQueryRunner } from '@grafana/scenes';\nimport { DataSourceRef } from '@grafana/schema';\n\nimport { PANEL_STYLES } from '../../../home/Insights';\nimport { InsightsMenuButton } from '../../InsightsMenuButton';\n\nexport function getMostFiredRulesScene(datasource: DataSourceRef, panelTitle: string) {\n  const query = new SceneQueryRunner({\n    datasource,\n    queries: [\n      {\n        refId: 'A',\n        expr: 'topk(10, sum by(alertname) (ALERTS{alertstate=\"firing\"}))',\n        instant: true,\n        range: false,\n        format: 'table',\n      },\n    ],\n  });\n\n  const transformation = new SceneDataTransformer({\n    $data: query,\n    transformations: [\n      {\n        id: 'organize',\n        options: {\n          excludeByName: {\n            Time: true,\n          },\n          indexByName: {},\n          renameByName: {\n            Value: 'Number of fires',\n            alertname: 'Alert Rule Name',\n          },\n        },\n      },\n    ],\n  });\n\n  return new SceneFlexItem({\n    ...PANEL_STYLES,\n    body: PanelBuilders.table()\n      .setTitle(panelTitle)\n      .setDescription('The alert rules that have fired the most')\n      .setData(transformation)\n      .setHeaderActions([new InsightsMenuButton({ panel: panelTitle })])\n      .build(),\n  });\n}\n","import { ThresholdsMode } from '@grafana/data';\nimport { PanelBuilders, SceneFlexItem, SceneQueryRunner } from '@grafana/scenes';\nimport { DataSourceRef } from '@grafana/schema';\n\nimport { PANEL_STYLES } from '../../../home/Insights';\nimport { InsightsMenuButton } from '../../InsightsMenuButton';\n\nexport function getPendingCloudAlertsScene(datasource: DataSourceRef, panelTitle: string) {\n  const query = new SceneQueryRunner({\n    datasource,\n    queries: [\n      {\n        refId: 'A',\n        instant: true,\n        expr: 'sum by (alertstate) (ALERTS{alertstate=\"pending\"})',\n      },\n    ],\n  });\n\n  return new SceneFlexItem({\n    ...PANEL_STYLES,\n    body: PanelBuilders.stat()\n      .setTitle(panelTitle)\n      .setDescription('The number of currently pending alert rule instances')\n      .setData(query)\n      .setThresholds({\n        mode: ThresholdsMode.Absolute,\n        steps: [\n          {\n            color: 'yellow',\n            value: 0,\n          },\n          {\n            color: 'red',\n            value: 80,\n          },\n        ],\n      })\n      .setNoValue('0')\n      .setHeaderActions([new InsightsMenuButton({ panel: panelTitle })])\n      .build(),\n  });\n}\n","import { DataSourceInstanceSettings, DataSourceJsonData } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport {\n  EmbeddedScene,\n  NestedScene,\n  QueryVariable,\n  SceneControlsSpacer,\n  SceneFlexItem,\n  SceneFlexLayout,\n  SceneReactObject,\n  SceneRefreshPicker,\n  SceneTimePicker,\n  SceneTimeRange,\n  SceneVariableSet,\n  VariableValueSelectors,\n} from '@grafana/scenes';\nimport { Icon, Text, Tooltip } from '@grafana/ui';\n\nimport { getAPINamespace } from '../../../../api/utils';\nimport { SectionFooter } from '../insights/SectionFooter';\nimport { SectionSubheader } from '../insights/SectionSubheader';\nimport { getActiveGrafanaAlertsScene } from '../insights/grafana/Active';\nimport { getGrafanaInstancesByStateScene } from '../insights/grafana/AlertsByStateScene';\nimport { getGrafanaEvalSuccessVsFailuresScene } from '../insights/grafana/EvalSuccessVsFailuresScene';\nimport { getInstanceStatByStatusScene } from '../insights/grafana/InstanceStatusScene';\nimport { getGrafanaMissedIterationsScene } from '../insights/grafana/MissedIterationsScene';\nimport { getMostFiredInstancesScene } from '../insights/grafana/MostFiredInstancesTable';\nimport { getPausedGrafanaAlertsScene } from '../insights/grafana/Paused';\nimport { getGrafanaRulesByEvaluationScene } from '../insights/grafana/RulesByEvaluation';\nimport { getGrafanaRulesByEvaluationPercentageScene } from '../insights/grafana/RulesByEvaluationPercentage';\nimport { getAlertsByStateScene as getGrafanaAlertsByStateScene } from '../insights/grafana/alertmanager/AlertsByState';\nimport { getGrafanaAlertmanagerSilencesScene } from '../insights/grafana/alertmanager/SilencesByStateScene';\nimport { getAlertsByStateScene } from '../insights/mimir/AlertsByState';\nimport { getInvalidConfigScene } from '../insights/mimir/InvalidConfig';\nimport { getNotificationsScene } from '../insights/mimir/Notifications';\nimport { getSilencesScene } from '../insights/mimir/Silences';\nimport { getRuleGroupEvaluationDurationIntervalRatioScene } from '../insights/mimir/perGroup/RuleGroupEvaluationDurationIntervalRatioScene';\nimport { getRuleGroupEvaluationDurationScene } from '../insights/mimir/perGroup/RuleGroupEvaluationDurationScene';\nimport { getRuleGroupEvaluationsScene } from '../insights/mimir/perGroup/RuleGroupEvaluationsScene';\nimport { getRuleGroupIntervalScene } from '../insights/mimir/perGroup/RuleGroupIntervalScene';\nimport { getRulesPerGroupScene } from '../insights/mimir/perGroup/RulesPerGroupScene';\nimport { getEvalSuccessVsFailuresScene } from '../insights/mimir/rules/EvalSuccessVsFailuresScene';\nimport { getFiringCloudAlertsScene } from '../insights/mimir/rules/Firing';\nimport { getInstancesByStateScene } from '../insights/mimir/rules/InstancesByState';\nimport { getInstancesPercentageByStateScene } from '../insights/mimir/rules/InstancesPercentageByState';\nimport { getMissedIterationsScene } from '../insights/mimir/rules/MissedIterationsScene';\nimport { getMostFiredRulesScene } from '../insights/mimir/rules/MostFiredRules';\nimport { getPendingCloudAlertsScene } from '../insights/mimir/rules/Pending';\n\nexport interface DataSourceInformation {\n  type: string;\n  uid: string;\n  settings: DataSourceInstanceSettings<DataSourceJsonData> | undefined;\n}\nconst ashDs: DataSourceInformation = {\n  type: 'loki',\n  uid: 'grafanacloud-alert-state-history',\n  settings: undefined,\n};\n\nconst cloudUsageDs: DataSourceInformation = {\n  type: 'prometheus',\n  uid: 'grafanacloud-usage',\n  settings: undefined,\n};\n\nconst grafanaCloudPromDs: DataSourceInformation = {\n  type: 'prometheus',\n  uid: 'grafanacloud-prom',\n  settings: undefined,\n};\n\nconst SERIES_COLORS = {\n  alerting: 'red',\n  firing: 'red',\n  active: 'red',\n  missed: 'red',\n  failed: 'red',\n  pending: 'yellow',\n  recovering: 'yellow',\n  nodata: 'blue',\n  'active evaluation': 'blue',\n  normal: 'green',\n  success: 'green',\n  error: 'orange',\n};\n\nexport function overrideToFixedColor(key: keyof typeof SERIES_COLORS) {\n  return {\n    mode: 'fixed',\n    fixedColor: SERIES_COLORS[key],\n  };\n}\n\nexport const PANEL_STYLES = { minHeight: 300 };\n\nconst THIS_WEEK_TIME_RANGE = new SceneTimeRange({ from: 'now-1w', to: 'now' });\n\nconst namespace = getAPINamespace();\n\nexport const INSTANCE_ID = namespace.includes('stacks-') ? namespace.replace('stacks-', '') : undefined;\n\nconst getInsightsDataSources = () => {\n  const dataSourceSrv = getDataSourceSrv();\n\n  [ashDs, cloudUsageDs, grafanaCloudPromDs].forEach((ds) => {\n    ds.settings = dataSourceSrv.getInstanceSettings(ds.uid);\n  });\n  return [ashDs, cloudUsageDs, grafanaCloudPromDs];\n};\n\nexport const insightsIsAvailable = () => {\n  const [_, cloudUsageDs, __] = getInsightsDataSources();\n  return cloudUsageDs.settings;\n};\n\nexport function getInsightsScenes() {\n  const [ashDs, cloudUsageDs, grafanaCloudPromDs] = getInsightsDataSources();\n\n  const categories = [];\n\n  const showGrafanaManaged = ashDs.settings && cloudUsageDs.settings;\n  const showGrafanaAlertmanager = Boolean(cloudUsageDs.settings);\n  const showMimirAlertmanager = Boolean(cloudUsageDs.settings);\n  const showMimirManaged = cloudUsageDs.settings && grafanaCloudPromDs.settings;\n  const showMimirManagedPerGroup = Boolean(cloudUsageDs.settings);\n\n  if (showGrafanaManaged) {\n    categories.push(\n      new SceneFlexItem({\n        ySizing: 'content',\n        body: getGrafanaManagedScenes(),\n      })\n    );\n  }\n\n  if (showGrafanaAlertmanager) {\n    categories.push(\n      new SceneFlexItem({\n        ySizing: 'content',\n        body: getGrafanaAlertmanagerScenes(),\n      })\n    );\n  }\n\n  if (showMimirManaged) {\n    categories.push(\n      new SceneFlexItem({\n        ySizing: 'content',\n        body: getMimirManagedRulesScenes(),\n      })\n    );\n  }\n\n  if (showMimirManagedPerGroup) {\n    categories.push(\n      new SceneFlexItem({\n        ySizing: 'content',\n        body: getMimirManagedRulesPerGroupScenes(),\n      })\n    );\n  }\n\n  if (showMimirAlertmanager) {\n    categories.push(\n      new SceneFlexItem({\n        ySizing: 'content',\n        body: getCloudScenes(),\n      })\n    );\n  }\n\n  return new EmbeddedScene({\n    $timeRange: THIS_WEEK_TIME_RANGE,\n    controls: [\n      new SceneReactObject({\n        component: SectionSubheader,\n        props: {\n          children: (\n            <Text>\n              Monitor the status of your system{' '}\n              <Tooltip\n                content={\n                  <div>\n                    Alerting insights provides pre-built dashboards to monitor your alerting data.\n                    <br />\n                    <br />\n                    You can identify patterns in why things go wrong and discover trends in alerting performance within\n                    your organization.\n                  </div>\n                }\n              >\n                <Icon name=\"info-circle\" size=\"sm\" />\n              </Tooltip>\n            </Text>\n          ),\n        },\n      }),\n      new SceneControlsSpacer(),\n      new SceneTimePicker({}),\n      new SceneRefreshPicker({}),\n    ],\n    body: new SceneFlexLayout({\n      direction: 'column',\n      children: categories,\n    }),\n  });\n}\n\nfunction getGrafanaManagedScenes() {\n  return new NestedScene({\n    title: 'Grafana-managed alert rules',\n    canCollapse: true,\n    isCollapsed: false,\n    body: new SceneFlexLayout({\n      direction: 'column',\n      children: [\n        new SceneFlexLayout({\n          direction: 'column',\n          children: [\n            new SceneFlexLayout({\n              children: [\n                getMostFiredInstancesScene(ashDs, 'Top 10 firing instances'),\n                getActiveGrafanaAlertsScene(cloudUsageDs, 'Active rules'),\n                getPausedGrafanaAlertsScene(cloudUsageDs, 'Paused rules'),\n              ],\n            }),\n            new SceneFlexLayout({\n              children: [\n                getGrafanaInstancesByStateScene(cloudUsageDs, 'Alert instances by state'),\n                new SceneFlexLayout({\n                  height: '400px',\n                  direction: 'column',\n                  children: [\n                    new SceneFlexLayout({\n                      height: '400px',\n                      children: [\n                        getInstanceStatByStatusScene(\n                          cloudUsageDs,\n                          'Firing instances',\n                          'The number of currently firing alert rule instances',\n                          'alerting'\n                        ),\n                        getInstanceStatByStatusScene(\n                          cloudUsageDs,\n                          'Recovering instances',\n                          'The number of currently recovering alert rule instances',\n                          'recovering'\n                        ),\n                        getInstanceStatByStatusScene(\n                          cloudUsageDs,\n                          'Pending instances',\n                          'The number of currently pending alert rule instances',\n                          'pending'\n                        ),\n                      ],\n                    }),\n                    new SceneFlexLayout({\n                      children: [\n                        getInstanceStatByStatusScene(\n                          cloudUsageDs,\n                          'No data instances',\n                          'The current number of alert rule instances in No data state',\n                          'nodata'\n                        ),\n                        getInstanceStatByStatusScene(\n                          cloudUsageDs,\n                          'Error instances',\n                          'The current number of alert rule instances in Error state',\n                          'error'\n                        ),\n                      ],\n                    }),\n                  ],\n                }),\n              ],\n            }),\n            new SceneFlexLayout({\n              children: [\n                getGrafanaRulesByEvaluationScene(cloudUsageDs, 'Alert rule evaluation'),\n                getGrafanaRulesByEvaluationPercentageScene(cloudUsageDs, '% of alert rule evaluation'),\n              ],\n            }),\n            new SceneFlexLayout({\n              children: [\n                getGrafanaEvalSuccessVsFailuresScene(cloudUsageDs, 'Evaluation success vs failures'),\n                getGrafanaMissedIterationsScene(cloudUsageDs, 'Iterations missed per evaluation group'),\n              ],\n            }),\n          ],\n        }),\n        new SceneReactObject({\n          component: SectionFooter,\n        }),\n      ],\n    }),\n  });\n}\n\nfunction getGrafanaAlertmanagerScenes() {\n  return new NestedScene({\n    title: 'Grafana Alertmanager',\n    canCollapse: true,\n    isCollapsed: false,\n    body: new SceneFlexLayout({\n      direction: 'column',\n      children: [\n        new SceneFlexLayout({\n          children: [\n            getGrafanaAlertsByStateScene(cloudUsageDs, 'Firing alerts by state'),\n            // getGrafanaAlertmanagerNotificationsScene(cloudUsageDs, 'Notification delivery'),\n            getGrafanaAlertmanagerSilencesScene(cloudUsageDs, 'Silences'),\n          ],\n        }),\n        new SceneReactObject({\n          component: SectionFooter,\n        }),\n      ],\n    }),\n  });\n}\n\nfunction getCloudScenes() {\n  return new NestedScene({\n    title: 'Mimir Alertmanager',\n    canCollapse: true,\n    isCollapsed: false,\n    body: new SceneFlexLayout({\n      direction: 'column',\n      children: [\n        new SceneFlexItem({\n          body: new SceneReactObject({\n            component: SectionSubheader,\n            props: { datasources: [cloudUsageDs] },\n          }),\n        }),\n        new SceneFlexLayout({\n          children: [\n            getAlertsByStateScene(cloudUsageDs, 'Firing alerts by state'),\n            getNotificationsScene(cloudUsageDs, 'Notification delivery'),\n          ],\n        }),\n        new SceneFlexLayout({\n          children: [\n            getSilencesScene(cloudUsageDs, 'Silences'),\n            getInvalidConfigScene(cloudUsageDs, 'Invalid configuration'),\n          ],\n        }),\n        new SceneReactObject({\n          component: SectionFooter,\n        }),\n      ],\n    }),\n  });\n}\n\nfunction getMimirManagedRulesScenes() {\n  return new NestedScene({\n    title: 'Mimir-managed alert rules',\n    canCollapse: true,\n    isCollapsed: false,\n    body: new SceneFlexLayout({\n      direction: 'column',\n      children: [\n        new SceneFlexItem({\n          body: new SceneReactObject({\n            component: SectionSubheader,\n            props: { datasources: [grafanaCloudPromDs, cloudUsageDs] },\n          }),\n        }),\n        new SceneFlexLayout({\n          children: [\n            getMostFiredRulesScene(grafanaCloudPromDs, 'Top 10 firing rules'),\n            getFiringCloudAlertsScene(grafanaCloudPromDs, 'Firing instances'),\n            getPendingCloudAlertsScene(grafanaCloudPromDs, 'Pending instances'),\n          ],\n        }),\n        new SceneFlexLayout({\n          children: [\n            getInstancesByStateScene(grafanaCloudPromDs, 'Firing and pending alert instances'),\n            getInstancesPercentageByStateScene(grafanaCloudPromDs, '% of alert instances by state'),\n          ],\n        }),\n        new SceneFlexLayout({\n          children: [\n            getEvalSuccessVsFailuresScene(cloudUsageDs, 'Evaluation success vs failures'),\n            getMissedIterationsScene(cloudUsageDs, 'Missed evaluations'),\n          ],\n        }),\n        new SceneReactObject({\n          component: SectionFooter,\n        }),\n      ],\n    }),\n  });\n}\n\nfunction getMimirManagedRulesPerGroupScenes() {\n  const ruleGroupHandler = new QueryVariable({\n    label: 'Rule Group',\n    name: 'rule_group',\n    datasource: cloudUsageDs,\n    query: 'label_values(grafanacloud_instance_rule_group_rules,rule_group)',\n  });\n\n  return new NestedScene({\n    title: 'Mimir-managed alert rules - per rule group',\n    canCollapse: true,\n    isCollapsed: false,\n    body: new SceneFlexLayout({\n      direction: 'column',\n      children: [\n        new SceneFlexItem({\n          body: new SceneReactObject({\n            component: SectionSubheader,\n            props: { datasources: [cloudUsageDs] },\n          }),\n        }),\n        new SceneFlexLayout({\n          children: [\n            getRuleGroupEvaluationsScene(cloudUsageDs, 'Rule group evaluation'),\n            getRuleGroupIntervalScene(cloudUsageDs, 'Rule group interval'),\n          ],\n        }),\n        new SceneFlexLayout({\n          children: [\n            getRuleGroupEvaluationDurationScene(cloudUsageDs, 'Rule group evaluation duration'),\n            getRulesPerGroupScene(cloudUsageDs, 'Rules per group'),\n            getRuleGroupEvaluationDurationIntervalRatioScene(cloudUsageDs, 'Evaluation duration / interval ratio'),\n          ],\n        }),\n        new SceneReactObject({\n          component: SectionFooter,\n        }),\n      ],\n    }),\n    $variables: new SceneVariableSet({\n      variables: [ruleGroupHandler],\n    }),\n    controls: [new VariableValueSelectors({})],\n  });\n}\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack, Text, useStyles2 } from '@grafana/ui';\n\nimport { useAlertingHomePageExtensions } from '../plugins/useAlertingHomePageExtensions';\n\nexport function PluginIntegrations() {\n  const styles = useStyles2(getStyles);\n\n  const { components } = useAlertingHomePageExtensions();\n\n  if (components.length === 0) {\n    return null;\n  }\n\n  return (\n    <Stack direction=\"column\" gap={2}>\n      <Text element=\"h3\" variant=\"h4\">\n        Speed up your alerts creation now by using one of our tailored apps\n      </Text>\n      <Stack gap={2} wrap=\"wrap\" direction=\"row\">\n        {components.map((Component, i) => (\n          <div key={i} className={styles.box}>\n            <Component />\n          </div>\n        ))}\n      </Stack>\n    </Stack>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  box: css({\n    padding: theme.spacing(2),\n    flex: 1,\n    backgroundColor: theme.colors.background.secondary,\n    maxWidth: '460px',\n  }),\n});\n","import { useState } from 'react';\n\nimport { config } from '@grafana/runtime';\nimport { Box, Stack, Tab, TabContent, TabsBar } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { AlertingPageWrapper } from '../components/AlertingPageWrapper';\nimport { isLocalDevEnv } from '../utils/misc';\nimport { withPageErrorBoundary } from '../withPageErrorBoundary';\n\nimport GettingStarted, { WelcomeHeader } from './GettingStarted';\nimport { getInsightsScenes, insightsIsAvailable } from './Insights';\nimport { PluginIntegrations } from './PluginIntegrations';\n\nfunction Home() {\n  const insightsEnabled = (insightsIsAvailable() || isLocalDevEnv()) && Boolean(config.featureToggles.alertingInsights);\n\n  const [activeTab, setActiveTab] = useState<'insights' | 'overview'>(insightsEnabled ? 'insights' : 'overview');\n  const insightsScene = getInsightsScenes();\n\n  return (\n    <AlertingPageWrapper\n      title={t('alerting.home.title-alerting', 'Alerting')}\n      subTitle=\"Learn about problems in your systems moments after they occur\"\n      navId=\"alerting\"\n    >\n      <Stack gap={2} direction=\"column\">\n        <WelcomeHeader />\n        <PluginIntegrations />\n      </Stack>\n      <Box marginTop={{ lg: 2, md: 0, xs: 0 }}>\n        <TabsBar>\n          {insightsEnabled && (\n            <Tab\n              key=\"insights\"\n              label={t('alerting.home.label-insights', 'Insights')}\n              active={activeTab === 'insights'}\n              onChangeTab={() => setActiveTab('insights')}\n            />\n          )}\n          <Tab\n            key=\"overview\"\n            label={t('alerting.home.label-get-started', 'Get started')}\n            active={activeTab === 'overview'}\n            onChangeTab={() => setActiveTab('overview')}\n          />\n        </TabsBar>\n        <TabContent>\n          {activeTab === 'insights' && <insightsScene.Component model={insightsScene} />}\n          {activeTab === 'overview' && <GettingStarted />}\n        </TabContent>\n      </Box>\n    </AlertingPageWrapper>\n  );\n}\n\nexport default withPageErrorBoundary(Home);\n","import { PluginExtensionPoints } from '@grafana/data';\nimport { usePluginComponents } from '@grafana/runtime';\n\nexport function useAlertingHomePageExtensions() {\n  return usePluginComponents({\n    extensionPointId: PluginExtensionPoints.AlertingHomePage,\n    limitPerPlugin: 1,\n  });\n}\n"],"names":["GettingStarted","theme","styles","getWelcomePageStyles","ContentBox","Stack","Text","TextLink","WelcomeHeader","className","getWelcomeHeaderStyles","WelcomeCTABox","title","description","href","hrefText","getWelcomeCTAButtonStyles","children","getContentBoxStyles","SectionFooter","getStyles","DataSourcesInfo","datasources","displayDs","ds","SectionSubheader","getPrometheusExploreUrl","queries","range","variables","ruleGroup","v","query","urlState","expr","refId","i","InsightsMenuButtonRenderer","model","data","timeRange","panel","url","showModal","setShowModal","onDismiss","onButtonClick","useful","modal","Modal","Button","Icon","menu","Menu","Dropdown","IconButton","InsightsMenuButton","getActiveGrafanaAlertsScene","datasource","panelTitle","INSTANCE_ID","PANEL_STYLES","getGrafanaInstancesByStateScene","transformation","b","overrideToFixedColor","getGrafanaEvalSuccessVsFailuresScene","exprA","exprB","getInstanceStatByStatusScene","panelDescription","status","getGrafanaMissedIterationsScene","legendTransformation","source","map","frame","field","matches","getMostFiredInstancesScene","createRuleLink","value","index","ruleUID","RuleLink","ruleLinkTransformation","Link","getPausedGrafanaAlertsScene","getGrafanaRulesByEvaluationScene","getGrafanaRulesByEvaluationPercentageScene","getAlertsByStateScene","getGrafanaAlertmanagerSilencesScene","getInvalidConfigScene","getNotificationsScene","getSilencesScene","getRuleGroupEvaluationDurationIntervalRatioScene","getRuleGroupEvaluationDurationScene","getRuleGroupEvaluationsScene","getRuleGroupIntervalScene","getRulesPerGroupScene","getEvalSuccessVsFailuresScene","getFiringCloudAlertsScene","getInstancesByStateScene","getInstancesPercentageByStateScene","getMissedIterationsScene","getMostFiredRulesScene","getPendingCloudAlertsScene","ashDs","cloudUsageDs","grafanaCloudPromDs","SERIES_COLORS","key","THIS_WEEK_TIME_RANGE","namespace","getInsightsDataSources","dataSourceSrv","insightsIsAvailable","_","__","getInsightsScenes","categories","showGrafanaManaged","showGrafanaAlertmanager","showMimirAlertmanager","showMimirManaged","showMimirManagedPerGroup","getGrafanaManagedScenes","getGrafanaAlertmanagerScenes","getMimirManagedRulesScenes","getMimirManagedRulesPerGroupScenes","getCloudScenes","Tooltip","ruleGroupHandler","PluginIntegrations","components","useAlertingHomePageExtensions","Component","Home","insightsEnabled","config","activeTab","setActiveTab","insightsScene","AlertingPageWrapper","Box","TabsBar","Tab","TabContent","withPageErrorBoundary"],"sourceRoot":""}