{"version":3,"file":"6356.a476006e4de45bead349.js","mappings":"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","sources":["webpack://grafana/./packages/grafana-prometheus/src/querybuilder/QueryPattern.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/QueryPatternsModal.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/hooks/useFlag.ts","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/shared/types.ts","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/shared/QueryEditorModeToggle.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/shared/QueryHeaderSwitch.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/state.ts","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/shared/OperationInfoButton.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/shared/OperationHeader.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/shared/OperationParamEditor.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/shared/OperationEditor.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/shared/OperationList.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/shared/OperationsEditorRow.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/shared/QueryBuilderHints.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/components/NestedQuery.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/components/NestedQueryList.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/components/PromQueryBuilder.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/components/QueryPreview.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/components/PromQueryBuilderContainer.tsx","webpack://grafana/./packages/grafana-prometheus/src/components/PromExemplarField.tsx","webpack://grafana/./packages/grafana-prometheus/src/components/PromExploreExtraField.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/shared/QueryOptionGroup.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/components/PromQueryLegendEditor.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/components/PromQueryBuilderOptions.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/components/PromQueryCodeEditorAutocompleteInfo.tsx","webpack://grafana/./packages/grafana-prometheus/src/querybuilder/components/PromQueryEditorSelector.tsx","webpack://grafana/./packages/grafana-prometheus/src/components/PromQueryEditorForAlerting.tsx","webpack://grafana/./packages/grafana-prometheus/src/components/PromQueryEditorByApp.tsx","webpack://grafana/./packages/grafana-prometheus/src/components/PromCheatSheet.tsx","webpack://grafana/./node_modules/@grafana/azure-sdk/dist/esm/clouds.js","webpack://grafana/./node_modules/@grafana/azure-sdk/dist/esm/credentials/AzureCredentials.js","webpack://grafana/./node_modules/@grafana/azure-sdk/dist/esm/credentials/AzureCredentialsConfig.js","webpack://grafana/./node_modules/@grafana/azure-sdk/dist/esm/resources/ResourceTypes.js","webpack://grafana/./node_modules/@grafana/azure-sdk/dist/esm/resources/MetricsResourceTypes.js","webpack://grafana/./packages/grafana-prometheus/src/configuration/AlertingSettingsOverhaul.tsx","webpack://grafana/./packages/grafana-prometheus/src/configuration/ExemplarSetting.tsx","webpack://grafana/./packages/grafana-prometheus/src/configuration/ExemplarsSettings.tsx","webpack://grafana/./packages/grafana-prometheus/src/configuration/PromFlavorVersions.ts","webpack://grafana/./packages/grafana-prometheus/src/configuration/PromSettings.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/AzureCredentialsConfig.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/AzureCredentialsForm.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/AzureAuthSettings.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/DataSourceHttpSettingsOverhaulPackage.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/configuration/ConfigEditorPackage.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/module.ts","webpack://grafana/./node_modules/@grafana/plugin-ui/dist/esm/components/QueryEditor/EditorHeader.js","webpack://grafana/./node_modules/@grafana/plugin-ui/dist/esm/components/QueryEditor/FlexItem.js"],"sourcesContent":["// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/QueryPattern.tsx\nimport { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Card, useStyles2 } from '@grafana/ui';\n\nimport promqlGrammar from '../promql';\n\nimport { promQueryModeller } from './PromQueryModeller';\nimport { RawQuery } from './shared/RawQuery';\nimport { PromQueryPattern } from './types';\n\ntype Props = {\n  pattern: PromQueryPattern;\n  hasNewQueryOption: boolean;\n  hasPreviousQuery: boolean | string;\n  selectedPatternName: string | null;\n  setSelectedPatternName: (name: string | null) => void;\n  onPatternSelect: (pattern: PromQueryPattern, selectAsNewQuery?: boolean) => void;\n};\n\nexport const QueryPattern = (props: Props) => {\n  const { pattern, onPatternSelect, hasNewQueryOption, hasPreviousQuery, selectedPatternName, setSelectedPatternName } =\n    props;\n\n  const styles = useStyles2(getStyles);\n  const lang = { grammar: promqlGrammar, name: 'promql' };\n\n  return (\n    <Card className={styles.card}>\n      <Card.Heading>{pattern.name}</Card.Heading>\n      <div className={styles.rawQueryContainer}>\n        <RawQuery\n          aria-label={`${pattern.name} raw query`}\n          query={promQueryModeller.renderQuery({\n            labels: [],\n            operations: pattern.operations,\n            binaryQueries: pattern.binaryQueries,\n          })}\n          lang={lang}\n          className={styles.rawQuery}\n        />\n      </div>\n      <Card.Actions>\n        {selectedPatternName !== pattern.name ? (\n          <Button\n            size=\"sm\"\n            aria-label=\"use this query button\"\n            onClick={() => {\n              if (hasPreviousQuery) {\n                // If user has previous query, we need to confirm that they want to apply this query pattern\n                setSelectedPatternName(pattern.name);\n              } else {\n                onPatternSelect(pattern);\n              }\n            }}\n          >\n            Use this query\n          </Button>\n        ) : (\n          <>\n            <div className={styles.spacing}>\n              {`If you would like to use this query, ${\n                hasNewQueryOption\n                  ? 'you can either apply this query pattern or create a new query'\n                  : 'this query pattern will be applied to your current query'\n              }.`}\n            </div>\n            <Button size=\"sm\" aria-label=\"back button\" fill=\"outline\" onClick={() => setSelectedPatternName(null)}>\n              Back\n            </Button>\n            <Button\n              size=\"sm\"\n              aria-label=\"apply query starter button\"\n              onClick={() => {\n                onPatternSelect(pattern);\n              }}\n            >\n              Apply query\n            </Button>\n            {hasNewQueryOption && (\n              <Button\n                size=\"sm\"\n                aria-label=\"create new query button\"\n                onClick={() => {\n                  onPatternSelect(pattern, true);\n                }}\n              >\n                Create new query\n              </Button>\n            )}\n          </>\n        )}\n      </Card.Actions>\n    </Card>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    card: css({\n      width: '49.5%',\n      display: 'flex',\n      flexDirection: 'column',\n    }),\n    rawQueryContainer: css({\n      flexGrow: 1,\n    }),\n    rawQuery: css({\n      backgroundColor: theme.colors.background.primary,\n      padding: theme.spacing(1),\n      marginTop: theme.spacing(1),\n    }),\n    spacing: css({\n      marginBottom: theme.spacing(1),\n    }),\n  };\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/QueryPatternsModal.tsx\nimport { css } from '@emotion/css';\nimport { capitalize } from 'lodash';\nimport { useMemo, useState } from 'react';\n\nimport { CoreApp, DataQuery, getNextRefId, GrafanaTheme2 } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, Collapse, Modal, useStyles2 } from '@grafana/ui';\n\nimport { PromQuery } from '../types';\n\nimport { promQueryModeller } from './PromQueryModeller';\nimport { QueryPattern } from './QueryPattern';\nimport { buildVisualQueryFromString } from './parsing';\nimport { PromQueryPattern, PromQueryPatternType } from './types';\n\ntype Props = {\n  isOpen: boolean;\n  query: PromQuery;\n  queries: DataQuery[] | undefined;\n  app?: CoreApp;\n  onClose: () => void;\n  onChange: (query: PromQuery) => void;\n  onAddQuery?: (query: PromQuery) => void;\n};\n\nexport const QueryPatternsModal = (props: Props) => {\n  const { isOpen, onClose, onChange, onAddQuery, query, queries, app } = props;\n  const [openTabs, setOpenTabs] = useState<string[]>([]);\n  const [selectedPatternName, setSelectedPatternName] = useState<string | null>(null);\n\n  const styles = useStyles2(getStyles);\n  const hasNewQueryOption = !!onAddQuery;\n  const hasPreviousQuery = useMemo(() => {\n    const visualQuery = buildVisualQueryFromString(query.expr ?? '');\n    // has anything entered in the query, metric, labels, operations, or binary queries\n    const hasOperations = visualQuery.query.operations.length > 0,\n      hasMetric = visualQuery.query.metric,\n      hasLabels = visualQuery.query.labels.length > 0,\n      hasBinaryQueries = visualQuery.query.binaryQueries ? visualQuery.query.binaryQueries.length > 0 : false;\n\n    return hasOperations || hasMetric || hasLabels || hasBinaryQueries;\n  }, [query.expr]);\n\n  const onPatternSelect = (pattern: PromQueryPattern, selectAsNewQuery = false) => {\n    const visualQuery = buildVisualQueryFromString(selectAsNewQuery ? '' : query.expr);\n    reportInteraction('grafana_prom_kickstart_your_query_selected', {\n      app: app ?? '',\n      editorMode: query.editorMode,\n      selectedPattern: pattern.name,\n      preSelectedOperationsCount: visualQuery.query.operations.length,\n      preSelectedLabelsCount: visualQuery.query.labels.length,\n      createNewQuery: hasNewQueryOption && selectAsNewQuery,\n    });\n\n    visualQuery.query.operations = pattern.operations;\n    visualQuery.query.binaryQueries = pattern.binaryQueries;\n    if (hasNewQueryOption && selectAsNewQuery) {\n      onAddQuery({\n        ...query,\n        refId: getNextRefId(queries ?? [query]),\n        expr: promQueryModeller.renderQuery(visualQuery.query),\n      });\n    } else {\n      onChange({\n        ...query,\n        expr: promQueryModeller.renderQuery(visualQuery.query),\n      });\n    }\n    setSelectedPatternName(null);\n    onClose();\n  };\n\n  return (\n    <Modal aria-label=\"Kick start your query modal\" isOpen={isOpen} title=\"Kick start your query\" onDismiss={onClose}>\n      <div className={styles.spacing}>\n        Kick start your query by selecting one of these queries. You can then continue to complete your query.\n      </div>\n      {Object.values(PromQueryPatternType).map((patternType) => {\n        const isOpen = openTabs.includes(patternType);\n        return (\n          <Collapse\n            aria-label={`open and close ${patternType} query starter card`}\n            key={patternType}\n            label={`${capitalize(patternType)} query starters`}\n            isOpen={isOpen}\n            collapsible={true}\n            onToggle={() => {\n              const action = isOpen ? 'close' : 'open';\n              reportInteraction(`grafana_prom_kickstart_toggle_pattern_card`, {\n                action,\n                patternType,\n              });\n\n              setOpenTabs((tabs) =>\n                // close tab if it's already open, otherwise open it\n                tabs.includes(patternType) ? tabs.filter((t) => t !== patternType) : [...tabs, patternType]\n              );\n            }}\n          >\n            <div className={styles.cardsContainer}>\n              {promQueryModeller\n                .getQueryPatterns()\n                .filter((pattern) => pattern.type === patternType)\n                .map((pattern) => (\n                  <QueryPattern\n                    key={pattern.name}\n                    pattern={pattern}\n                    hasNewQueryOption={hasNewQueryOption}\n                    hasPreviousQuery={hasPreviousQuery}\n                    onPatternSelect={onPatternSelect}\n                    selectedPatternName={selectedPatternName}\n                    setSelectedPatternName={setSelectedPatternName}\n                  />\n                ))}\n            </div>\n          </Collapse>\n        );\n      })}\n      <Button aria-label=\"close kick start your query modal\" variant=\"secondary\" onClick={onClose}>\n        Close\n      </Button>\n    </Modal>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    cardsContainer: css({\n      display: 'flex',\n      flexDirection: 'row',\n      flexWrap: 'wrap',\n      justifyContent: 'space-between',\n    }),\n    spacing: css({\n      marginBottom: theme.spacing(1),\n    }),\n  };\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/hooks/useFlag.ts\nimport { useCallback, useState } from 'react';\n\nimport { store } from '@grafana/data';\n\nexport const promQueryEditorExplainKey = 'PrometheusQueryEditorExplainDefault';\n\nexport type QueryEditorFlags = typeof promQueryEditorExplainKey;\n\nfunction getFlagValue(key: QueryEditorFlags, defaultValue = false): boolean {\n  const val = store.get(key);\n  return val === undefined ? defaultValue : Boolean(parseInt(val, 10));\n}\n\nfunction setFlagValue(key: QueryEditorFlags, value: boolean) {\n  store.set(key, value ? '1' : '0');\n}\n\ntype UseFlagHookReturnType = { flag: boolean; setFlag: (val: boolean) => void };\n\n/**\n *\n * Use and store value of explain switch in local storage.\n * Needs to be a hook with local state to trigger re-renders.\n */\nexport function useFlag(key: QueryEditorFlags, defaultValue = false): UseFlagHookReturnType {\n  const [flag, updateFlag] = useState(getFlagValue(key, defaultValue));\n  const setter = useCallback(\n    (value: boolean) => {\n      setFlagValue(key, value);\n      updateFlag(value);\n    },\n    [key]\n  );\n\n  return { flag, setFlag: setter };\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/shared/types.ts\n/**\n * Shared types that can be reused by Loki and other data sources\n */\nimport { ComponentType } from 'react';\n\nimport { DataSourceApi, RegistryItem, SelectableValue, TimeRange } from '@grafana/data';\n\nexport interface QueryBuilderLabelFilter {\n  label: string;\n  op: string;\n  value: string;\n}\n\nexport interface QueryBuilderOperation {\n  id: string;\n  params: QueryBuilderOperationParamValue[];\n}\n\nexport interface QueryWithOperations {\n  operations: QueryBuilderOperation[];\n}\n\nexport interface QueryBuilderOperationDef<T = any> extends RegistryItem {\n  documentation?: string;\n  params: QueryBuilderOperationParamDef[];\n  defaultParams: QueryBuilderOperationParamValue[];\n  category: string;\n  hideFromList?: boolean;\n  alternativesKey?: string;\n  /** Can be used to control operation placement when adding a new operations, lower are placed first */\n  orderRank?: number;\n  renderer: QueryBuilderOperationRenderer;\n  addOperationHandler: QueryBuilderAddOperationHandler<T>;\n  paramChangedHandler?: QueryBuilderOnParamChangedHandler;\n  explainHandler?: QueryBuilderExplainOperationHandler;\n  changeTypeHandler?: (op: QueryBuilderOperation, newDef: QueryBuilderOperationDef<T>) => QueryBuilderOperation;\n}\n\nexport type QueryBuilderAddOperationHandler<T> = (\n  def: QueryBuilderOperationDef,\n  query: T,\n  modeller: VisualQueryModeller\n) => T;\n\nexport type QueryBuilderExplainOperationHandler = (op: QueryBuilderOperation, def?: QueryBuilderOperationDef) => string;\n\nexport type QueryBuilderOnParamChangedHandler = (\n  index: number,\n  operation: QueryBuilderOperation,\n  operationDef: QueryBuilderOperationDef\n) => QueryBuilderOperation;\n\nexport type QueryBuilderOperationRenderer = (\n  model: QueryBuilderOperation,\n  def: QueryBuilderOperationDef,\n  innerExpr: string\n) => string;\n\nexport type QueryBuilderOperationParamValue = string | number | boolean;\n\nexport interface QueryBuilderOperationParamDef {\n  name: string;\n  type: 'string' | 'number' | 'boolean';\n  options?: string[] | number[] | Array<SelectableValue<string>>;\n  hideName?: boolean;\n  restParam?: boolean;\n  optional?: boolean;\n  placeholder?: string;\n  description?: string;\n  minWidth?: number;\n  editor?: ComponentType<QueryBuilderOperationParamEditorProps>;\n  runQueryOnEnter?: boolean;\n}\n\nexport interface QueryBuilderOperationEditorProps {\n  operation: QueryBuilderOperation;\n  index: number;\n  query: any;\n  datasource: DataSourceApi;\n  queryModeller: VisualQueryModeller;\n  onChange: (index: number, update: QueryBuilderOperation) => void;\n  onRemove: (index: number) => void;\n}\n\nexport interface QueryBuilderOperationParamEditorProps {\n  value?: QueryBuilderOperationParamValue;\n  paramDef: QueryBuilderOperationParamDef;\n  /** Parameter index */\n  index: number;\n  operation: QueryBuilderOperation;\n  operationId: string;\n  query: any;\n  datasource: DataSourceApi;\n  timeRange: TimeRange;\n  onChange: (index: number, value: QueryBuilderOperationParamValue) => void;\n  onRunQuery: () => void;\n}\n\nexport enum QueryEditorMode {\n  Code = 'code',\n  Builder = 'builder',\n}\n\nexport interface VisualQueryModeller {\n  getOperationsForCategory(category: string): QueryBuilderOperationDef[];\n\n  getAlternativeOperations(key: string): QueryBuilderOperationDef[];\n\n  getCategories(): string[];\n\n  getOperationDef(id: string): QueryBuilderOperationDef | undefined;\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/shared/QueryEditorModeToggle.tsx\nimport { RadioButtonGroup } from '@grafana/ui';\n\nimport { QueryEditorMode } from './types';\n\nexport interface Props {\n  mode: QueryEditorMode;\n  onChange: (mode: QueryEditorMode) => void;\n}\n\nconst editorModes = [\n  { label: 'Builder', value: QueryEditorMode.Builder },\n  { label: 'Code', value: QueryEditorMode.Code },\n];\n\nexport function QueryEditorModeToggle({ mode, onChange }: Props) {\n  return (\n    <div data-testid={'QueryEditorModeToggle'}>\n      <RadioButtonGroup options={editorModes} size=\"sm\" value={mode} onChange={onChange} />\n    </div>\n  );\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/shared/QueryHeaderSwitch.tsx\nimport { css } from '@emotion/css';\nimport { uniqueId } from 'lodash';\nimport { HTMLProps, useRef } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Switch, useStyles2, Stack } from '@grafana/ui';\n\nexport interface Props extends Omit<HTMLProps<HTMLInputElement>, 'value' | 'ref'> {\n  value?: boolean;\n  label: string;\n}\n\nexport function QueryHeaderSwitch({ label, ...inputProps }: Props) {\n  const dashedLabel = label.replace(' ', '-');\n  const switchIdRef = useRef(uniqueId(`switch-${dashedLabel}`));\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Stack gap={1}>\n      <label htmlFor={switchIdRef.current} className={styles.switchLabel}>\n        {label}\n      </label>\n      <Switch {...inputProps} id={switchIdRef.current} />\n    </Stack>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    switchLabel: css({\n      color: theme.colors.text.secondary,\n      cursor: 'pointer',\n      fontSize: theme.typography.bodySmall.fontSize,\n      '&:hover': {\n        color: theme.colors.text.primary,\n      },\n    }),\n  };\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/state.ts\nimport { CoreApp, store } from '@grafana/data';\n\nimport { LegendFormatMode, PromQuery } from '../types';\n\nimport { QueryEditorMode } from './shared/types';\n\nconst queryEditorModeDefaultLocalStorageKey = 'PrometheusQueryEditorModeDefault';\n\nexport function changeEditorMode(query: PromQuery, editorMode: QueryEditorMode, onChange: (query: PromQuery) => void) {\n  // If empty query store new mode as default\n  if (query.expr === '') {\n    store.set(queryEditorModeDefaultLocalStorageKey, editorMode);\n  }\n\n  onChange({ ...query, editorMode });\n}\n\nfunction getDefaultEditorMode(expr: string, defaultEditor: QueryEditorMode = QueryEditorMode.Builder): QueryEditorMode {\n  // If we already have an expression default to code view\n  if (expr != null && expr !== '') {\n    return QueryEditorMode.Code;\n  }\n\n  const value: QueryEditorMode = store.get(queryEditorModeDefaultLocalStorageKey);\n  switch (value) {\n    case QueryEditorMode.Builder:\n    case QueryEditorMode.Code:\n      return value;\n    default:\n      return defaultEditor;\n  }\n}\n\n/**\n * Returns query with defaults, and boolean true/false depending on change was required\n */\nexport function getQueryWithDefaults(\n  query: PromQuery & { expr?: string },\n  app: CoreApp | undefined,\n  defaultEditor?: QueryEditorMode\n): PromQuery {\n  let result = query;\n\n  if (!query.editorMode) {\n    result = { ...query, editorMode: getDefaultEditorMode(query.expr, defaultEditor) };\n  }\n\n  // default query expr is now empty string, set in getDefaultQuery\n  // While expr is required in the types, it is not always defined at runtime, so we need to check for undefined and default to an empty string to prevent runtime errors\n  if (!query.expr) {\n    result = { ...result, expr: '', legendFormat: LegendFormatMode.Auto };\n  }\n\n  if (query.range == null && query.instant == null) {\n    // Default to range query\n    result = { ...result, range: true };\n\n    // In explore we default to both instant & range\n    if (app === CoreApp.Explore) {\n      result.instant = true;\n    }\n  }\n\n  // Unified Alerting does not support \"both\" for query type – fall back to \"range\".\n  const isBothInstantAndRange = query.instant && query.range;\n  if (app === CoreApp.UnifiedAlerting && isBothInstantAndRange) {\n    result = { ...result, instant: false, range: true };\n  }\n\n  return result;\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/shared/OperationInfoButton.tsx\nimport { css } from '@emotion/css';\nimport {\n  autoUpdate,\n  flip,\n  offset,\n  shift,\n  useClick,\n  useDismiss,\n  useFloating,\n  useInteractions,\n} from '@floating-ui/react';\nimport { memo, useState } from 'react';\n\nimport { GrafanaTheme2, renderMarkdown } from '@grafana/data';\nimport { FlexItem } from '@grafana/plugin-ui';\nimport { Button, Portal, useStyles2 } from '@grafana/ui';\n\nimport { QueryBuilderOperation, QueryBuilderOperationDef } from './types';\n\nexport interface Props {\n  operation: QueryBuilderOperation;\n  def: QueryBuilderOperationDef;\n}\n\nexport const OperationInfoButton = memo<Props>(({ def, operation }) => {\n  const styles = useStyles2(getStyles);\n  const [show, setShow] = useState(false);\n\n  // the order of middleware is important!\n  const middleware = [\n    offset(16),\n    flip({\n      fallbackAxisSideDirection: 'end',\n      // see https://floating-ui.com/docs/flip#combining-with-shift\n      crossAxis: false,\n      boundary: document.body,\n    }),\n    shift(),\n  ];\n\n  const { context, refs, floatingStyles } = useFloating({\n    open: show,\n    placement: 'top',\n    onOpenChange: setShow,\n    middleware,\n    whileElementsMounted: autoUpdate,\n  });\n\n  const click = useClick(context);\n  const dismiss = useDismiss(context);\n\n  const { getReferenceProps, getFloatingProps } = useInteractions([dismiss, click]);\n\n  return (\n    <>\n      <Button\n        title=\"Click to show description\"\n        ref={refs.setReference}\n        icon=\"info-circle\"\n        size=\"sm\"\n        variant=\"secondary\"\n        fill=\"text\"\n        {...getReferenceProps()}\n      />\n      {show && (\n        <Portal>\n          <div ref={refs.setFloating} style={floatingStyles} {...getFloatingProps()} className={styles.docBox}>\n            <div className={styles.docBoxHeader}>\n              <span>{def.renderer(operation, def, '<expr>')}</span>\n              <FlexItem grow={1} />\n              <Button\n                icon=\"times\"\n                onClick={() => setShow(false)}\n                fill=\"text\"\n                variant=\"secondary\"\n                title=\"Remove operation\"\n              />\n            </div>\n            <div\n              className={styles.docBoxBody}\n              dangerouslySetInnerHTML={{ __html: getOperationDocs(def, operation) }}\n            ></div>\n          </div>\n        </Portal>\n      )}\n    </>\n  );\n});\n\nOperationInfoButton.displayName = 'OperationDocs';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    docBox: css({\n      overflow: 'hidden',\n      background: theme.colors.background.elevated,\n      border: `1px solid ${theme.colors.border.weak}`,\n      boxShadow: theme.shadows.z3,\n      maxWidth: '600px',\n      padding: theme.spacing(1),\n      borderRadius: theme.shape.radius.default,\n      zIndex: theme.zIndex.tooltip,\n    }),\n    docBoxHeader: css({\n      fontSize: theme.typography.h5.fontSize,\n      fontFamily: theme.typography.fontFamilyMonospace,\n      paddingBottom: theme.spacing(1),\n      display: 'flex',\n      alignItems: 'center',\n    }),\n    docBoxBody: css({\n      // The markdown paragraph has a marginBottom this removes it\n      marginBottom: theme.spacing(-1),\n      color: theme.colors.text.secondary,\n    }),\n  };\n};\n\nfunction getOperationDocs(def: QueryBuilderOperationDef, op: QueryBuilderOperation): string {\n  return renderMarkdown(def.explainHandler ? def.explainHandler(op, def) : (def.documentation ?? 'no docs'));\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/shared/OperationHeader.tsx\nimport { css } from '@emotion/css';\nimport { DraggableProvided } from '@hello-pangea/dnd';\nimport { memo, useState } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { FlexItem } from '@grafana/plugin-ui';\nimport { Button, Select, useStyles2 } from '@grafana/ui';\n\nimport { OperationInfoButton } from './OperationInfoButton';\nimport { QueryBuilderOperation, QueryBuilderOperationDef, VisualQueryModeller } from './types';\n\nexport interface Props {\n  operation: QueryBuilderOperation;\n  def: QueryBuilderOperationDef;\n  index: number;\n  queryModeller: VisualQueryModeller;\n  dragHandleProps?: DraggableProvided['dragHandleProps'];\n  onChange: (index: number, update: QueryBuilderOperation) => void;\n  onRemove: (index: number) => void;\n}\n\ninterface State {\n  isOpen?: boolean;\n  alternatives?: Array<SelectableValue<QueryBuilderOperationDef>>;\n}\n\nexport const OperationHeader = memo<Props>(\n  ({ operation, def, index, onChange, onRemove, queryModeller, dragHandleProps }) => {\n    const styles = useStyles2(getStyles);\n    const [state, setState] = useState<State>({});\n\n    const onToggleSwitcher = () => {\n      if (state.isOpen) {\n        setState({ ...state, isOpen: false });\n      } else {\n        const alternatives = queryModeller\n          .getAlternativeOperations(def.alternativesKey!)\n          .map((alt) => ({ label: alt.name, value: alt }));\n        setState({ isOpen: true, alternatives });\n      }\n    };\n\n    return (\n      <div className={styles.header}>\n        {!state.isOpen && (\n          <>\n            <div {...dragHandleProps}>{def.name ?? def.id}</div>\n            <FlexItem grow={1} />\n            <div className={`${styles.operationHeaderButtons} operation-header-show-on-hover`}>\n              <Button\n                icon=\"angle-down\"\n                size=\"sm\"\n                onClick={onToggleSwitcher}\n                fill=\"text\"\n                variant=\"secondary\"\n                title=\"Click to view alternative operations\"\n              />\n              <OperationInfoButton def={def} operation={operation} />\n              <Button\n                icon=\"times\"\n                size=\"sm\"\n                onClick={() => onRemove(index)}\n                fill=\"text\"\n                variant=\"secondary\"\n                title=\"Remove operation\"\n              />\n            </div>\n          </>\n        )}\n        {state.isOpen && (\n          <div className={styles.selectWrapper}>\n            <Select\n              autoFocus\n              openMenuOnFocus\n              placeholder=\"Replace with\"\n              options={state.alternatives}\n              isOpen={true}\n              onCloseMenu={onToggleSwitcher}\n              onChange={(value) => {\n                if (value.value) {\n                  // Operation should exist if it is selectable\n                  const newDef = queryModeller.getOperationDef(value.value.id)!;\n\n                  // copy default params, and override with all current params\n                  const newParams = [...newDef.defaultParams];\n                  for (let i = 0; i < Math.min(operation.params.length, newParams.length); i++) {\n                    if (newDef.params[i].type === def.params[i].type) {\n                      newParams[i] = operation.params[i];\n                    }\n                  }\n\n                  const changedOp = { ...operation, params: newParams, id: value.value.id };\n                  onChange(index, def.changeTypeHandler ? def.changeTypeHandler(changedOp, newDef) : changedOp);\n                }\n              }}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n);\n\nOperationHeader.displayName = 'OperationHeader';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    header: css({\n      borderBottom: `1px solid ${theme.colors.border.medium}`,\n      padding: theme.spacing(0.5, 0.5, 0.5, 1),\n      display: 'flex',\n      alignItems: 'center',\n    }),\n    operationHeaderButtons: css({\n      opacity: 1,\n    }),\n    selectWrapper: css({\n      paddingRight: theme.spacing(2),\n    }),\n  };\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/shared/OperationParamEditor.tsx\nimport { css } from '@emotion/css';\nimport { ComponentType } from 'react';\n\nimport { GrafanaTheme2, SelectableValue, toOption } from '@grafana/data';\nimport { AutoSizeInput, Button, Checkbox, Select, useStyles2, Stack } from '@grafana/ui';\n\nimport { getOperationParamId } from '../operationUtils';\n\nimport { QueryBuilderOperationParamDef, QueryBuilderOperationParamEditorProps } from './types';\n\nexport function getOperationParamEditor(\n  paramDef: QueryBuilderOperationParamDef\n): ComponentType<QueryBuilderOperationParamEditorProps> {\n  if (paramDef.editor) {\n    return paramDef.editor;\n  }\n\n  if (paramDef.options) {\n    return SelectInputParamEditor;\n  }\n\n  switch (paramDef.type) {\n    case 'boolean':\n      return BoolInputParamEditor;\n    case 'number':\n    case 'string':\n    default:\n      return SimpleInputParamEditor;\n  }\n}\n\nfunction SimpleInputParamEditor(props: QueryBuilderOperationParamEditorProps) {\n  return (\n    <AutoSizeInput\n      id={getOperationParamId(props.operationId, props.index)}\n      defaultValue={props.value?.toString()}\n      minWidth={props.paramDef.minWidth}\n      placeholder={props.paramDef.placeholder}\n      title={props.paramDef.description}\n      maxWidth={(props.paramDef.minWidth || 20) * 3}\n      onCommitChange={(evt) => {\n        props.onChange(props.index, evt.currentTarget.value);\n        if (props.paramDef.runQueryOnEnter && evt.type === 'keydown') {\n          props.onRunQuery();\n        }\n      }}\n    />\n  );\n}\n\nfunction BoolInputParamEditor(props: QueryBuilderOperationParamEditorProps) {\n  return (\n    <Checkbox\n      id={getOperationParamId(props.operationId, props.index)}\n      value={Boolean(props.value)}\n      onChange={(evt) => props.onChange(props.index, evt.currentTarget.checked)}\n    />\n  );\n}\n\nfunction SelectInputParamEditor({\n  paramDef,\n  value,\n  index,\n  operationId,\n  onChange,\n}: QueryBuilderOperationParamEditorProps) {\n  const styles = useStyles2(getStyles);\n  let selectOptions = paramDef.options as SelectableValue[];\n\n  if (!selectOptions[0]?.label) {\n    selectOptions = paramDef.options!.map((option) => ({\n      label: option.toString(),\n      value: option,\n    }));\n  }\n\n  let valueOption = selectOptions.find((x) => x.value === value) ?? toOption(value as string);\n\n  // If we have optional options param and don't have value, we want to render button with which we add optional options.\n  // This makes it easier to understand what needs to be selected and what is optional.\n  if (!value && paramDef.optional) {\n    return (\n      <div className={styles.optionalParam}>\n        <Button\n          size=\"sm\"\n          variant=\"secondary\"\n          title={`Add ${paramDef.name}`}\n          icon=\"plus\"\n          onClick={() => onChange(index, selectOptions[0].value)}\n        >\n          {paramDef.name}\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <Stack gap={0.5} direction=\"row\" alignItems=\"center\">\n      <Select\n        id={getOperationParamId(operationId, index)}\n        value={valueOption}\n        options={selectOptions}\n        placeholder={paramDef.placeholder}\n        allowCustomValue={true}\n        onChange={(value) => onChange(index, value.value!)}\n        width={paramDef.minWidth || 'auto'}\n      />\n      {paramDef.optional && (\n        <Button\n          data-testid={`operations.${index}.remove-param`}\n          size=\"sm\"\n          fill=\"text\"\n          icon=\"times\"\n          variant=\"secondary\"\n          title={`Remove ${paramDef.name}`}\n          onClick={() => onChange(index, '')}\n        />\n      )}\n    </Stack>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    optionalParam: css({\n      marginTop: theme.spacing(1),\n    }),\n  };\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/shared/OperationEditor.tsx\nimport { css, cx } from '@emotion/css';\nimport { Draggable } from '@hello-pangea/dnd';\nimport { useEffect, useId, useState } from 'react';\nimport * as React from 'react';\n\nimport { DataSourceApi, GrafanaTheme2, TimeRange } from '@grafana/data';\nimport { Button, Icon, Stack, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { getOperationParamId } from '../operationUtils';\n\nimport { OperationHeader } from './OperationHeader';\nimport { getOperationParamEditor } from './OperationParamEditor';\nimport {\n  QueryBuilderOperation,\n  QueryBuilderOperationDef,\n  QueryBuilderOperationParamDef,\n  QueryBuilderOperationParamValue,\n  VisualQueryModeller,\n} from './types';\n\nexport interface Props {\n  operation: QueryBuilderOperation;\n  index: number;\n  query: any;\n  datasource: DataSourceApi;\n  queryModeller: VisualQueryModeller;\n  onChange: (index: number, update: QueryBuilderOperation) => void;\n  onRemove: (index: number) => void;\n  onRunQuery: () => void;\n  flash?: boolean;\n  highlight?: boolean;\n  timeRange: TimeRange;\n}\n\nexport function OperationEditor({\n  operation,\n  index,\n  onRemove,\n  onChange,\n  onRunQuery,\n  queryModeller,\n  query,\n  datasource,\n  flash,\n  highlight,\n  timeRange,\n}: Props) {\n  const styles = useStyles2(getStyles);\n  const def = queryModeller.getOperationDef(operation.id);\n  const shouldFlash = useFlash(flash);\n  const id = useId();\n\n  if (!def) {\n    return <span>Operation {operation.id} not found</span>;\n  }\n\n  const onParamValueChanged = (paramIdx: number, value: QueryBuilderOperationParamValue) => {\n    const update: QueryBuilderOperation = { ...operation, params: [...operation.params] };\n    update.params[paramIdx] = value;\n    callParamChangedThenOnChange(def, update, index, paramIdx, onChange);\n  };\n\n  const onAddRestParam = () => {\n    const update: QueryBuilderOperation = { ...operation, params: [...operation.params, ''] };\n    callParamChangedThenOnChange(def, update, index, operation.params.length, onChange);\n  };\n\n  const onRemoveRestParam = (paramIdx: number) => {\n    const update: QueryBuilderOperation = {\n      ...operation,\n      params: [...operation.params.slice(0, paramIdx), ...operation.params.slice(paramIdx + 1)],\n    };\n    callParamChangedThenOnChange(def, update, index, paramIdx, onChange);\n  };\n\n  const operationElements: React.ReactNode[] = [];\n\n  for (let paramIndex = 0; paramIndex < operation.params.length; paramIndex++) {\n    const paramDef = def.params[Math.min(def.params.length - 1, paramIndex)];\n    const Editor = getOperationParamEditor(paramDef);\n\n    operationElements.push(\n      <div className={styles.paramRow} key={`${paramIndex}-1`}>\n        {!paramDef.hideName && (\n          <div className={styles.paramName}>\n            <label htmlFor={getOperationParamId(id, paramIndex)}>{paramDef.name}</label>\n            {paramDef.description && (\n              <Tooltip placement=\"top\" content={paramDef.description} theme=\"info\">\n                <Icon name=\"info-circle\" size=\"sm\" className={styles.infoIcon} />\n              </Tooltip>\n            )}\n          </div>\n        )}\n        <div className={styles.paramValue}>\n          <Stack gap={0.5} direction=\"row\" alignItems=\"center\">\n            <Editor\n              index={paramIndex}\n              paramDef={paramDef}\n              value={operation.params[paramIndex]}\n              operation={operation}\n              operationId={id}\n              onChange={onParamValueChanged}\n              onRunQuery={onRunQuery}\n              query={query}\n              datasource={datasource}\n              timeRange={timeRange}\n            />\n            {paramDef.restParam && (operation.params.length > def.params.length || paramDef.optional) && (\n              <Button\n                data-testid={`operations.${index}.remove-rest-param`}\n                size=\"sm\"\n                fill=\"text\"\n                icon=\"times\"\n                variant=\"secondary\"\n                title={`Remove ${paramDef.name}`}\n                onClick={() => onRemoveRestParam(paramIndex)}\n              />\n            )}\n          </Stack>\n        </div>\n      </div>\n    );\n  }\n\n  // Handle adding button for rest params\n  let restParam: React.ReactNode | undefined;\n  if (def.params.length > 0) {\n    const lastParamDef = def.params[def.params.length - 1];\n    if (lastParamDef.restParam) {\n      restParam = renderAddRestParamButton(lastParamDef, onAddRestParam, index, operation.params.length, styles);\n    }\n  }\n\n  return (\n    <Draggable draggableId={`operation-${index}`} index={index}>\n      {(provided) => (\n        <div\n          className={cx(styles.card, (shouldFlash || highlight) && styles.cardHighlight)}\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          data-testid={`operations.${index}.wrapper`}\n        >\n          <OperationHeader\n            operation={operation}\n            dragHandleProps={provided.dragHandleProps}\n            def={def}\n            index={index}\n            onChange={onChange}\n            onRemove={onRemove}\n            queryModeller={queryModeller}\n          />\n          <div className={styles.body}>{operationElements}</div>\n          {restParam}\n          {index < query.operations.length - 1 && (\n            <div className={styles.arrow}>\n              <div className={styles.arrowLine} />\n              <div className={styles.arrowArrow} />\n            </div>\n          )}\n        </div>\n      )}\n    </Draggable>\n  );\n}\n\n/**\n * When flash is switched on makes sure it is switched of right away, so we just flash the highlight and then fade\n * out.\n * @param flash\n */\nfunction useFlash(flash?: boolean) {\n  const [keepFlash, setKeepFlash] = useState(true);\n  useEffect(() => {\n    let t: ReturnType<typeof setTimeout>;\n    if (flash) {\n      t = setTimeout(() => {\n        setKeepFlash(false);\n      }, 1000);\n    } else {\n      setKeepFlash(true);\n    }\n\n    return () => clearTimeout(t);\n  }, [flash]);\n\n  return keepFlash && flash;\n}\n\nfunction renderAddRestParamButton(\n  paramDef: QueryBuilderOperationParamDef,\n  onAddRestParam: () => void,\n  operationIndex: number,\n  paramIndex: number,\n  styles: OperationEditorStyles\n) {\n  return (\n    <div className={styles.restParam} key={`${paramIndex}-2`}>\n      <Button\n        size=\"sm\"\n        icon=\"plus\"\n        title={`Add ${paramDef.name}`.trimEnd()}\n        variant=\"secondary\"\n        onClick={onAddRestParam}\n        data-testid={`operations.${operationIndex}.add-rest-param`}\n      >\n        {paramDef.name}\n      </Button>\n    </div>\n  );\n}\n\nfunction callParamChangedThenOnChange(\n  def: QueryBuilderOperationDef,\n  operation: QueryBuilderOperation,\n  operationIndex: number,\n  paramIndex: number,\n  onChange: (index: number, update: QueryBuilderOperation) => void\n) {\n  if (def.paramChangedHandler) {\n    onChange(operationIndex, def.paramChangedHandler(paramIndex, operation, def));\n  } else {\n    onChange(operationIndex, operation);\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    cardWrapper: css({\n      alignItems: 'stretch',\n    }),\n    error: css({\n      marginBottom: theme.spacing(1),\n    }),\n    card: css({\n      background: theme.colors.background.primary,\n      border: `1px solid ${theme.colors.border.medium}`,\n      cursor: 'grab',\n      borderRadius: theme.shape.radius.default,\n      marginBottom: theme.spacing(1),\n      position: 'relative',\n      [theme.transitions.handleMotion('no-preference', 'reduce')]: {\n        transition: 'all 0.5s ease-in 0s',\n      },\n      height: '100%',\n    }),\n    cardError: css({\n      boxShadow: `0px 0px 4px 0px ${theme.colors.warning.main}`,\n      border: `1px solid ${theme.colors.warning.main}`,\n    }),\n    cardHighlight: css({\n      boxShadow: `0px 0px 4px 0px ${theme.colors.primary.border}`,\n      border: `1px solid ${theme.colors.primary.border}`,\n    }),\n    infoIcon: css({\n      marginLeft: theme.spacing(0.5),\n      color: theme.colors.text.secondary,\n      ':hover': {\n        color: theme.colors.text.primary,\n      },\n    }),\n    body: css({\n      margin: theme.spacing(1, 1, 0.5, 1),\n      display: 'table',\n    }),\n    paramRow: css({\n      label: 'paramRow',\n      display: 'table-row',\n      verticalAlign: 'middle',\n    }),\n    paramName: css({\n      display: 'table-cell',\n      padding: theme.spacing(0, 1, 0, 0),\n      fontSize: theme.typography.bodySmall.fontSize,\n      fontWeight: theme.typography.fontWeightMedium,\n      verticalAlign: 'middle',\n      height: '32px',\n    }),\n    paramValue: css({\n      label: 'paramValue',\n      display: 'table-cell',\n      verticalAlign: 'middle',\n    }),\n    restParam: css({\n      padding: theme.spacing(0, 1, 1, 1),\n    }),\n    arrow: css({\n      position: 'absolute',\n      top: '0',\n      right: '-18px',\n      display: 'flex',\n    }),\n    arrowLine: css({\n      height: '2px',\n      width: '8px',\n      backgroundColor: theme.colors.border.strong,\n      position: 'relative',\n      top: '14px',\n    }),\n    arrowArrow: css({\n      width: 0,\n      height: 0,\n      borderTop: `5px solid transparent`,\n      borderBottom: `5px solid transparent`,\n      borderLeft: `7px solid ${theme.colors.border.strong}`,\n      position: 'relative',\n      top: '10px',\n    }),\n  };\n};\n\ntype OperationEditorStyles = ReturnType<typeof getStyles>;\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/shared/OperationList.tsx\nimport { css } from '@emotion/css';\nimport { DragDropContext, Droppable, DropResult } from '@hello-pangea/dnd';\nimport { useState } from 'react';\nimport { useMountedState, usePrevious } from 'react-use';\n\nimport { DataSourceApi, GrafanaTheme2, TimeRange } from '@grafana/data';\nimport { Button, Cascader, CascaderOption, useStyles2, Stack } from '@grafana/ui';\n\nimport { OperationEditor } from './OperationEditor';\nimport { QueryBuilderOperation, QueryWithOperations, VisualQueryModeller } from './types';\n\nexport interface Props<T extends QueryWithOperations> {\n  query: T;\n  datasource: DataSourceApi;\n  onChange: (query: T) => void;\n  onRunQuery: () => void;\n  queryModeller: VisualQueryModeller;\n  explainMode?: boolean;\n  highlightedOp?: QueryBuilderOperation;\n  timeRange: TimeRange;\n}\n\nexport function OperationList<T extends QueryWithOperations>({\n  query,\n  datasource,\n  queryModeller,\n  onChange,\n  onRunQuery,\n  highlightedOp,\n  timeRange,\n}: Props<T>) {\n  const styles = useStyles2(getStyles);\n  const { operations } = query;\n\n  const opsToHighlight = useOperationsHighlight(operations);\n\n  const [cascaderOpen, setCascaderOpen] = useState(false);\n\n  const onOperationChange = (index: number, update: QueryBuilderOperation) => {\n    const updatedList = [...operations];\n    updatedList.splice(index, 1, update);\n    onChange({ ...query, operations: updatedList });\n  };\n\n  const onRemove = (index: number) => {\n    const updatedList = [...operations.slice(0, index), ...operations.slice(index + 1)];\n    onChange({ ...query, operations: updatedList });\n  };\n\n  const addOptions: CascaderOption[] = queryModeller.getCategories().map((category) => {\n    return {\n      value: category,\n      label: category,\n      items: queryModeller.getOperationsForCategory(category).map((operation) => ({\n        value: operation.id,\n        label: operation.name,\n        isLeaf: true,\n      })),\n    };\n  });\n\n  const onAddOperation = (value: string) => {\n    const operationDef = queryModeller.getOperationDef(value);\n    if (!operationDef) {\n      return;\n    }\n    onChange(operationDef.addOperationHandler(operationDef, query, queryModeller));\n    setCascaderOpen(false);\n  };\n\n  const onDragEnd = (result: DropResult) => {\n    if (!result.destination) {\n      return;\n    }\n\n    const updatedList = [...operations];\n    const element = updatedList[result.source.index];\n    updatedList.splice(result.source.index, 1);\n    updatedList.splice(result.destination.index, 0, element);\n    onChange({ ...query, operations: updatedList });\n  };\n\n  const onCascaderBlur = () => {\n    setCascaderOpen(false);\n  };\n\n  return (\n    <Stack gap={1} direction=\"column\">\n      <Stack gap={1}>\n        {operations.length > 0 && (\n          <DragDropContext onDragEnd={onDragEnd}>\n            <Droppable droppableId=\"sortable-field-mappings\" direction=\"horizontal\">\n              {(provided) => (\n                <div className={styles.operationList} ref={provided.innerRef} {...provided.droppableProps}>\n                  {operations.map((op, index) => {\n                    return (\n                      <OperationEditor\n                        key={op.id + JSON.stringify(op.params) + index}\n                        queryModeller={queryModeller}\n                        index={index}\n                        operation={op}\n                        query={query}\n                        datasource={datasource}\n                        onChange={onOperationChange}\n                        onRemove={onRemove}\n                        onRunQuery={onRunQuery}\n                        flash={opsToHighlight[index]}\n                        highlight={highlightedOp === op}\n                        timeRange={timeRange}\n                      />\n                    );\n                  })}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          </DragDropContext>\n        )}\n        <div className={styles.addButton}>\n          {cascaderOpen ? (\n            <Cascader\n              options={addOptions}\n              onSelect={onAddOperation}\n              onBlur={onCascaderBlur}\n              autoFocus={true}\n              alwaysOpen={true}\n              hideActiveLevelLabel={true}\n              placeholder={'Search'}\n            />\n          ) : (\n            <Button icon={'plus'} variant={'secondary'} onClick={() => setCascaderOpen(true)} title={'Add operation'}>\n              Operations\n            </Button>\n          )}\n        </div>\n      </Stack>\n    </Stack>\n  );\n}\n\n/**\n * Returns indexes of operations that should be highlighted. We check the diff of operations added but at the same time\n * we want to highlight operations only after the initial render, so we check for mounted state and calculate the diff\n * only after.\n * @param operations\n */\nfunction useOperationsHighlight(operations: QueryBuilderOperation[]) {\n  const isMounted = useMountedState();\n  const prevOperations = usePrevious(operations);\n\n  if (!isMounted()) {\n    return operations.map(() => false);\n  }\n\n  if (!prevOperations) {\n    return operations.map(() => true);\n  }\n\n  let newOps: boolean[] = [];\n\n  if (prevOperations.length - 1 === operations.length && operations.every((op) => prevOperations.includes(op))) {\n    // In case we remove one op and does not change any ops then don't highlight anything.\n    return operations.map(() => false);\n  }\n  if (prevOperations.length + 1 === operations.length && prevOperations.every((op) => operations.includes(op))) {\n    // If we add a single op just find it and highlight just that.\n    const newOp = operations.find((op) => !prevOperations.includes(op));\n    newOps = operations.map((op) => {\n      return op === newOp;\n    });\n  } else {\n    // Default diff of all ops.\n    newOps = operations.map((op, index) => {\n      return !isSameOp(op.id, prevOperations[index]?.id);\n    });\n  }\n  return newOps;\n}\n\nfunction isSameOp(op1?: string, op2?: string) {\n  return op1 === op2 || `__${op1}_by` === op2 || op1 === `__${op2}_by`;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    heading: css({\n      label: 'heading',\n      fontSize: 12,\n      fontWeight: theme.typography.fontWeightMedium,\n      marginBottom: 0,\n    }),\n    operationList: css({\n      label: 'operationList',\n      display: 'flex',\n      flexWrap: 'wrap',\n      gap: theme.spacing(2),\n    }),\n    addButton: css({\n      label: 'addButton',\n      width: 126,\n      paddingBottom: theme.spacing(1),\n    }),\n  };\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/shared/OperationsEditorRow.tsx\nimport { css } from '@emotion/css';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, Stack } from '@grafana/ui';\n\ninterface Props {\n  children: React.ReactNode;\n}\n\nexport function OperationsEditorRow({ children }: Props) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.root}>\n      <Stack gap={1}>{children}</Stack>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    root: css({\n      padding: theme.spacing(1, 1, 0, 1),\n      backgroundColor: theme.colors.background.secondary,\n      borderRadius: theme.shape.radius.default,\n    }),\n  };\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/shared/QueryBuilderHints.tsx\nimport { css } from '@emotion/css';\nimport { useEffect, useState } from 'react';\n\nimport { GrafanaTheme2, PanelData, QueryHint } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../../datasource';\n\nimport { LokiAndPromQueryModellerBase, PromLokiVisualQuery } from './LokiAndPromQueryModellerBase';\n\nexport interface Props<T extends PromLokiVisualQuery> {\n  query: T;\n  datasource: PrometheusDatasource;\n  queryModeller: LokiAndPromQueryModellerBase;\n  buildVisualQueryFromString: (expr: string) => { query: T };\n  onChange: (update: T) => void;\n  data?: PanelData;\n}\n\nexport const QueryBuilderHints = <T extends PromLokiVisualQuery>({\n  datasource,\n  query: visualQuery,\n  onChange,\n  data,\n  queryModeller,\n  buildVisualQueryFromString,\n}: Props<T>) => {\n  const [hints, setHints] = useState<QueryHint[]>([]);\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    const query = { expr: queryModeller.renderQuery(visualQuery), refId: '' };\n    // For now show only actionable hints\n    const hints = datasource.getQueryHints(query, data?.series || []).filter((hint) => hint.fix?.action);\n    setHints(hints);\n  }, [datasource, visualQuery, data, queryModeller]);\n\n  return (\n    <>\n      {hints.length > 0 && (\n        <div className={styles.container}>\n          {hints.map((hint) => {\n            return (\n              <Tooltip content={`${hint.label} ${hint.fix?.label}`} key={hint.type}>\n                <Button\n                  onClick={() => {\n                    reportInteraction('grafana_query_builder_hints_clicked', {\n                      hint: hint.type,\n                      datasourceType: datasource.type,\n                    });\n\n                    if (hint?.fix?.action) {\n                      const query = { expr: queryModeller.renderQuery(visualQuery), refId: '' };\n                      const newQuery = datasource.modifyQuery(query, hint.fix.action);\n                      const newVisualQuery = buildVisualQueryFromString(newQuery.expr);\n                      return onChange(newVisualQuery.query);\n                    }\n                  }}\n                  fill=\"outline\"\n                  size=\"sm\"\n                  className={styles.hint}\n                >\n                  hint: {hint.fix?.title || hint.fix?.action?.type.toLowerCase().replace('_', ' ')}\n                </Button>\n              </Tooltip>\n            );\n          })}\n        </div>\n      )}\n    </>\n  );\n};\n\nQueryBuilderHints.displayName = 'QueryBuilderHints';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      display: 'flex',\n      alignItems: 'start',\n    }),\n    hint: css({\n      marginRight: theme.spacing(1),\n    }),\n  };\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/NestedQuery.tsx\nimport { css } from '@emotion/css';\nimport { memo } from 'react';\n\nimport { GrafanaTheme2, toOption } from '@grafana/data';\nimport { EditorRows, FlexItem } from '@grafana/plugin-ui';\nimport { AutoSizeInput, IconButton, Select, useStyles2 } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { binaryScalarDefs } from '../binaryScalarOperations';\nimport { PromVisualQueryBinary } from '../types';\n\nimport { PromQueryBuilder } from './PromQueryBuilder';\n\nexport interface NestedQueryProps {\n  nestedQuery: PromVisualQueryBinary;\n  datasource: PrometheusDatasource;\n  index: number;\n  onChange: (index: number, update: PromVisualQueryBinary) => void;\n  onRemove: (index: number) => void;\n  onRunQuery: () => void;\n  showExplain: boolean;\n}\n\nexport const NestedQuery = memo<NestedQueryProps>((props) => {\n  const { nestedQuery, index, datasource, onChange, onRemove, onRunQuery, showExplain } = props;\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.card}>\n      <div className={styles.header}>\n        <div className={styles.name}>Operator</div>\n        <Select\n          width=\"auto\"\n          options={operators}\n          value={toOption(nestedQuery.operator)}\n          onChange={(value) => {\n            onChange(index, {\n              ...nestedQuery,\n              operator: value.value!,\n            });\n          }}\n        />\n        <div className={styles.name}>Vector matches</div>\n        <div className={styles.vectorMatchWrapper}>\n          <Select<PromVisualQueryBinary['vectorMatchesType']>\n            width=\"auto\"\n            value={nestedQuery.vectorMatchesType || 'on'}\n            allowCustomValue\n            options={[\n              { value: 'on', label: 'on' },\n              { value: 'ignoring', label: 'ignoring' },\n            ]}\n            onChange={(val) => {\n              onChange(index, {\n                ...nestedQuery,\n                vectorMatchesType: val.value,\n              });\n            }}\n          />\n          <AutoSizeInput\n            className={styles.vectorMatchInput}\n            minWidth={20}\n            defaultValue={nestedQuery.vectorMatches}\n            onCommitChange={(evt) => {\n              onChange(index, {\n                ...nestedQuery,\n                vectorMatches: evt.currentTarget.value,\n                vectorMatchesType: nestedQuery.vectorMatchesType || 'on',\n              });\n            }}\n          />\n        </div>\n        <FlexItem grow={1} />\n        <IconButton name=\"times\" size=\"sm\" onClick={() => onRemove(index)} tooltip=\"Remove match\" />\n      </div>\n      <div className={styles.body}>\n        <EditorRows>\n          <PromQueryBuilder\n            showExplain={showExplain}\n            query={nestedQuery.query}\n            datasource={datasource}\n            onRunQuery={onRunQuery}\n            onChange={(update) => {\n              onChange(index, { ...nestedQuery, query: update });\n            }}\n          />\n        </EditorRows>\n      </div>\n    </div>\n  );\n});\n\nconst operators = binaryScalarDefs.map((def) => ({ label: def.sign, value: def.sign }));\n\nNestedQuery.displayName = 'NestedQuery';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    card: css({\n      label: 'card',\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(0.5),\n    }),\n    header: css({\n      label: 'header',\n      padding: theme.spacing(0.5, 0.5, 0.5, 1),\n      gap: theme.spacing(1),\n      display: 'flex',\n      alignItems: 'center',\n    }),\n    name: css({\n      label: 'name',\n      whiteSpace: 'nowrap',\n    }),\n    body: css({\n      label: 'body',\n      paddingLeft: theme.spacing(2),\n    }),\n    vectorMatchInput: css({\n      label: 'vectorMatchInput',\n      marginLeft: -1,\n    }),\n    vectorMatchWrapper: css({\n      label: 'vectorMatchWrapper',\n      display: 'flex',\n    }),\n  };\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/NestedQueryList.tsx\nimport { Stack } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { PromVisualQuery, PromVisualQueryBinary } from '../types';\n\nimport { NestedQuery } from './NestedQuery';\n\nexport interface NestedQueryListProps {\n  query: PromVisualQuery;\n  datasource: PrometheusDatasource;\n  onChange: (query: PromVisualQuery) => void;\n  onRunQuery: () => void;\n  showExplain: boolean;\n}\n\nexport function NestedQueryList(props: NestedQueryListProps) {\n  const { query, datasource, onChange, onRunQuery, showExplain } = props;\n  const nestedQueries = query.binaryQueries ?? [];\n\n  const onNestedQueryUpdate = (index: number, update: PromVisualQueryBinary) => {\n    const updatedList = [...nestedQueries];\n    updatedList.splice(index, 1, update);\n    onChange({ ...query, binaryQueries: updatedList });\n  };\n\n  const onRemove = (index: number) => {\n    const updatedList = [...nestedQueries.slice(0, index), ...nestedQueries.slice(index + 1)];\n    onChange({ ...query, binaryQueries: updatedList });\n  };\n\n  return (\n    <Stack direction=\"column\" gap={1}>\n      {nestedQueries.map((nestedQuery, index) => (\n        <NestedQuery\n          key={index.toString()}\n          nestedQuery={nestedQuery}\n          index={index}\n          onChange={onNestedQueryUpdate}\n          datasource={datasource}\n          onRemove={onRemove}\n          onRunQuery={onRunQuery}\n          showExplain={showExplain}\n        />\n      ))}\n    </Stack>\n  );\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryBuilder.tsx\nimport { css } from '@emotion/css';\nimport { memo, useState } from 'react';\n\nimport { DataSourceApi, getDefaultTimeRange, PanelData } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorRow } from '@grafana/plugin-ui';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport promqlGrammar from '../../promql';\nimport { getInitHints } from '../../query_hints';\nimport { promQueryModeller } from '../PromQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { OperationExplainedBox } from '../shared/OperationExplainedBox';\nimport { OperationList } from '../shared/OperationList';\nimport { OperationListExplained } from '../shared/OperationListExplained';\nimport { OperationsEditorRow } from '../shared/OperationsEditorRow';\nimport { QueryBuilderHints } from '../shared/QueryBuilderHints';\nimport { RawQuery } from '../shared/RawQuery';\nimport { QueryBuilderOperation } from '../shared/types';\nimport { PromVisualQuery } from '../types';\n\nimport { MetricsLabelsSection } from './MetricsLabelsSection';\nimport { NestedQueryList } from './NestedQueryList';\nimport { EXPLAIN_LABEL_FILTER_CONTENT } from './PromQueryBuilderExplained';\n\nexport interface PromQueryBuilderProps {\n  query: PromVisualQuery;\n  datasource: PrometheusDatasource;\n  onChange: (update: PromVisualQuery) => void;\n  onRunQuery: () => void;\n  data?: PanelData;\n  showExplain: boolean;\n}\n\nexport const PromQueryBuilder = memo<PromQueryBuilderProps>((props) => {\n  const { datasource, query, onChange, onRunQuery, data, showExplain } = props;\n  const [highlightedOp, setHighlightedOp] = useState<QueryBuilderOperation | undefined>();\n\n  const lang = { grammar: promqlGrammar, name: 'promql' };\n\n  const initHints = getInitHints(datasource);\n\n  return (\n    <>\n      <EditorRow>\n        <MetricsLabelsSection\n          query={query}\n          onChange={onChange}\n          datasource={datasource}\n          timeRange={data?.timeRange ?? getDefaultTimeRange()}\n        />\n      </EditorRow>\n      {initHints.length ? (\n        <div\n          className={css({\n            flexBasis: '100%',\n          })}\n        >\n          <div className=\"text-warning\">\n            {initHints[0].label}{' '}\n            {initHints[0].fix ? (\n              <button type=\"button\" className={'text-warning'}>\n                {initHints[0].fix.label}\n              </button>\n            ) : null}\n          </div>\n        </div>\n      ) : null}\n      {showExplain && (\n        <OperationExplainedBox\n          stepNumber={1}\n          title={<RawQuery query={`${promQueryModeller.renderQuery(query)}`} lang={lang} />}\n        >\n          {EXPLAIN_LABEL_FILTER_CONTENT}\n        </OperationExplainedBox>\n      )}\n      <OperationsEditorRow>\n        <OperationList<PromVisualQuery>\n          queryModeller={promQueryModeller}\n          // eslint-ignore\n          datasource={datasource as DataSourceApi}\n          query={query}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          highlightedOp={highlightedOp}\n          timeRange={data?.timeRange ?? getDefaultTimeRange()}\n        />\n        <div data-testid={selectors.components.DataSource.Prometheus.queryEditor.builder.hints}>\n          <QueryBuilderHints<PromVisualQuery>\n            datasource={datasource}\n            query={query}\n            onChange={onChange}\n            data={data}\n            queryModeller={promQueryModeller}\n            buildVisualQueryFromString={buildVisualQueryFromString}\n          />\n        </div>\n      </OperationsEditorRow>\n      {showExplain && (\n        <OperationListExplained<PromVisualQuery>\n          lang={lang}\n          query={query}\n          stepNumber={2}\n          queryModeller={promQueryModeller}\n          onMouseEnter={(op) => setHighlightedOp(op)}\n          onMouseLeave={() => setHighlightedOp(undefined)}\n        />\n      )}\n      {query.binaryQueries && query.binaryQueries.length > 0 && (\n        <NestedQueryList\n          query={query}\n          datasource={datasource}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          showExplain={showExplain}\n        />\n      )}\n    </>\n  );\n});\n\nPromQueryBuilder.displayName = 'PromQueryBuilder';\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/QueryPreview.tsx\nimport { EditorFieldGroup, EditorRow } from '@grafana/plugin-ui';\n\nimport promqlGrammar from '../../promql';\nimport { RawQuery } from '../shared/RawQuery';\n\nexport interface QueryPreviewProps {\n  query: string;\n}\n\nexport function QueryPreview({ query }: QueryPreviewProps) {\n  if (!query) {\n    return null;\n  }\n\n  return (\n    <EditorRow>\n      <EditorFieldGroup>\n        <RawQuery query={query} lang={{ grammar: promqlGrammar, name: 'promql' }} />\n      </EditorFieldGroup>\n    </EditorRow>\n  );\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryBuilderContainer.tsx\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { useEffect, useReducer } from 'react';\n\nimport { PanelData } from '@grafana/data';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { PromQuery } from '../../types';\nimport { promQueryModeller } from '../PromQueryModeller';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { PromVisualQuery } from '../types';\n\nimport { PromQueryBuilder } from './PromQueryBuilder';\nimport { QueryPreview } from './QueryPreview';\nimport { getSettings, MetricsModalSettings } from './metrics-modal/state/state';\n\nexport interface PromQueryBuilderContainerProps {\n  query: PromQuery;\n  datasource: PrometheusDatasource;\n  onChange: (update: PromQuery) => void;\n  onRunQuery: () => void;\n  data?: PanelData;\n  showExplain: boolean;\n}\n\nexport interface State {\n  visQuery?: PromVisualQuery;\n  expr: string;\n}\n\n/**\n * This component is here just to contain the translation logic between string query and the visual query builder model.\n */\nexport function PromQueryBuilderContainer(props: PromQueryBuilderContainerProps) {\n  const { query, onChange, onRunQuery, datasource, data, showExplain } = props;\n  const [state, dispatch] = useReducer(stateSlice.reducer, { expr: query.expr });\n  // Only rebuild visual query if expr changes from outside\n  useEffect(() => {\n    dispatch(exprChanged(query.expr));\n    dispatch(\n      setMetricsModalSettings({\n        useBackend: query.useBackend ?? false,\n        disableTextWrap: query.disableTextWrap ?? false,\n        fullMetaSearch: query.fullMetaSearch ?? false,\n        includeNullMetadata: query.includeNullMetadata ?? true,\n      })\n    );\n  }, [query]);\n\n  useEffect(() => {\n    datasource.languageProvider.start(data?.timeRange);\n  }, [data?.timeRange, datasource.languageProvider]);\n\n  const onVisQueryChange = (visQuery: PromVisualQuery) => {\n    const expr = promQueryModeller.renderQuery(visQuery);\n    dispatch(visualQueryChange({ visQuery, expr }));\n\n    const metricsModalSettings = getSettings(visQuery);\n    onChange({ ...props.query, expr: expr, ...metricsModalSettings });\n  };\n\n  if (!state.visQuery) {\n    return null;\n  }\n\n  return (\n    <>\n      <PromQueryBuilder\n        query={state.visQuery}\n        datasource={datasource}\n        onChange={onVisQueryChange}\n        onRunQuery={onRunQuery}\n        data={data}\n        showExplain={showExplain}\n      />\n      {<QueryPreview query={query.expr} />}\n    </>\n  );\n}\n\nconst initialState: State = {\n  expr: '',\n};\n\nconst stateSlice = createSlice({\n  name: 'prom-builder-container',\n  initialState,\n  reducers: {\n    visualQueryChange: (state, action: PayloadAction<{ visQuery: PromVisualQuery; expr: string }>) => {\n      state.expr = action.payload.expr;\n      state.visQuery = action.payload.visQuery;\n    },\n    exprChanged: (state, action: PayloadAction<string>) => {\n      if (!state.visQuery || state.expr !== action.payload) {\n        state.expr = action.payload;\n        const parseResult = buildVisualQueryFromString(action.payload ?? '');\n\n        state.visQuery = parseResult.query;\n      }\n    },\n    setMetricsModalSettings: (state, action: PayloadAction<MetricsModalSettings>) => {\n      if (state.visQuery) {\n        state.visQuery.useBackend = action.payload.useBackend;\n        state.visQuery.disableTextWrap = action.payload.disableTextWrap;\n        state.visQuery.fullMetaSearch = action.payload.fullMetaSearch;\n        state.visQuery.includeNullMetadata = action.payload.includeNullMetadata;\n      }\n    },\n  },\n});\n\nconst { visualQueryChange, exprChanged, setMetricsModalSettings } = stateSlice.actions;\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/components/PromExemplarField.tsx\nimport { css, cx } from '@emotion/css';\nimport { useEffect, useState } from 'react';\nimport { usePrevious } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { IconButton, InlineLabel, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../datasource';\nimport { PromQuery } from '../types';\n\ninterface Props {\n  onChange: (exemplar: boolean) => void;\n  datasource: PrometheusDatasource;\n  query: PromQuery;\n  'data-testid'?: string;\n}\n\nexport function PromExemplarField({ datasource, onChange, query, ...rest }: Props) {\n  const [error, setError] = useState<string | null>(null);\n  const styles = useStyles2(getStyles);\n  const prevError = usePrevious(error);\n\n  useEffect(() => {\n    if (!datasource.exemplarsAvailable) {\n      setError('Exemplars for this query are not available');\n      onChange(false);\n    } else if (query.instant && !query.range) {\n      setError('Exemplars are not available for instant queries');\n      onChange(false);\n    } else {\n      setError(null);\n      // If error is cleared, we want to change exemplar to true\n      if (prevError && !error) {\n        onChange(true);\n      }\n    }\n  }, [datasource.exemplarsAvailable, query.instant, query.range, onChange, prevError, error]);\n\n  const iconButtonStyles = cx(\n    {\n      [styles.activeIcon]: !!query.exemplar,\n    },\n    styles.eyeIcon\n  );\n\n  return (\n    <InlineLabel width=\"auto\" data-testid={rest['data-testid']}>\n      <Tooltip content={error ?? ''}>\n        <div className={styles.iconWrapper}>\n          Exemplars\n          <IconButton\n            name=\"eye\"\n            tooltip={!!query.exemplar ? 'Disable query with exemplars' : 'Enable query with exemplars'}\n            disabled={!!error}\n            className={iconButtonStyles}\n            onClick={() => {\n              onChange(!query.exemplar);\n            }}\n          />\n        </div>\n      </Tooltip>\n    </InlineLabel>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    eyeIcon: css({\n      marginLeft: theme.spacing(2),\n    }),\n    activeIcon: css({\n      color: theme.colors.primary.main,\n    }),\n    iconWrapper: css({\n      display: 'flex',\n      alignItems: 'center',\n    }),\n  };\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/components/PromExploreExtraField.tsx\nimport { css, cx } from '@emotion/css';\nimport { isEqual } from 'lodash';\nimport { memo, useCallback } from 'react';\nimport * as React from 'react';\nimport { usePrevious } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { InlineFormLabel, RadioButtonGroup, useStyles2 } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../datasource';\nimport { PromQuery } from '../types';\n\nimport { PromExemplarField } from './PromExemplarField';\n\nexport interface PromExploreExtraFieldProps {\n  query: PromQuery;\n  onChange: (value: PromQuery) => void;\n  onRunQuery: () => void;\n  datasource: PrometheusDatasource;\n}\n\nexport const PromExploreExtraField = memo(({ query, datasource, onChange, onRunQuery }: PromExploreExtraFieldProps) => {\n  const rangeOptions = getQueryTypeOptions(true);\n  const prevQuery = usePrevious(query);\n  const styles = useStyles2(getStyles);\n\n  const onExemplarChange = useCallback(\n    (exemplar: boolean) => {\n      if (!isEqual(query, prevQuery) || exemplar !== query.exemplar) {\n        onChange({ ...query, exemplar });\n      }\n    },\n    [prevQuery, query, onChange]\n  );\n\n  function onChangeQueryStep(interval: string) {\n    onChange({ ...query, interval });\n  }\n\n  function onStepChange(e: React.SyntheticEvent<HTMLInputElement>) {\n    if (e.currentTarget.value !== query.interval) {\n      onChangeQueryStep(e.currentTarget.value);\n    }\n  }\n\n  function onReturnKeyDown(e: React.KeyboardEvent<HTMLInputElement>) {\n    if (e.key === 'Enter' && e.shiftKey) {\n      onRunQuery();\n    }\n  }\n\n  const onQueryTypeChange = getQueryTypeChangeHandler(query, onChange);\n\n  return (\n    <div\n      aria-label=\"Prometheus extra field\"\n      className=\"gf-form-inline\"\n      data-testid={promExploreExtraFieldTestIds.extraFieldEditor}\n    >\n      {/*Query type field*/}\n      <div\n        data-testid={promExploreExtraFieldTestIds.queryTypeField}\n        className={cx(\n          'gf-form',\n          styles.queryTypeField,\n          css({\n            flexWrap: 'nowrap',\n          })\n        )}\n        aria-label=\"Query type field\"\n      >\n        <InlineFormLabel width=\"auto\">Query type</InlineFormLabel>\n\n        <RadioButtonGroup\n          options={rangeOptions}\n          value={query.range && query.instant ? 'both' : query.instant ? 'instant' : 'range'}\n          onChange={onQueryTypeChange}\n        />\n      </div>\n      {/*Step field*/}\n      <div\n        data-testid={promExploreExtraFieldTestIds.stepField}\n        className={cx(\n          'gf-form',\n          css({\n            flexWrap: 'nowrap',\n          })\n        )}\n        aria-label=\"Step field\"\n      >\n        <InlineFormLabel\n          width={6}\n          tooltip={\n            'Time units and built-in variables can be used here, for example: $__interval, $__rate_interval, 5s, 1m, 3h, 1d, 1y (Default if no unit is specified: s)'\n          }\n        >\n          Min step\n        </InlineFormLabel>\n        <input\n          type={'text'}\n          className=\"gf-form-input width-4\"\n          placeholder={'auto'}\n          onChange={onStepChange}\n          onKeyDown={onReturnKeyDown}\n          value={query.interval ?? ''}\n        />\n      </div>\n\n      <PromExemplarField onChange={onExemplarChange} datasource={datasource} query={query} />\n    </div>\n  );\n});\n\nPromExploreExtraField.displayName = 'PromExploreExtraField';\n\nexport function getQueryTypeOptions(includeBoth: boolean) {\n  const rangeOptions = [\n    { value: 'range', label: 'Range', description: 'Run query over a range of time' },\n    {\n      value: 'instant',\n      label: 'Instant',\n      description: 'Run query against a single point in time. For this query, the \"To\" time is used',\n    },\n  ];\n\n  if (includeBoth) {\n    rangeOptions.push({ value: 'both', label: 'Both', description: 'Run an Instant query and a Range query' });\n  }\n\n  return rangeOptions;\n}\n\nexport function getQueryTypeChangeHandler(query: PromQuery, onChange: (update: PromQuery) => void) {\n  return (queryType: string) => {\n    if (queryType === 'instant') {\n      onChange({ ...query, instant: true, range: false, exemplar: false });\n    } else if (queryType === 'range') {\n      onChange({ ...query, instant: false, range: true });\n    } else {\n      onChange({ ...query, instant: true, range: true });\n    }\n  };\n}\n\nexport const promExploreExtraFieldTestIds = {\n  extraFieldEditor: 'prom-editor-extra-field',\n  stepField: 'prom-editor-extra-field-step',\n  queryTypeField: 'prom-editor-extra-field-query-type',\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  queryTypeField: css({\n    marginRight: theme.spacing(0.5),\n  }),\n});\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/shared/QueryOptionGroup.tsx\nimport { css } from '@emotion/css';\nimport * as React from 'react';\nimport { useToggle } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Collapse, useStyles2, Stack } from '@grafana/ui';\n\nexport interface Props {\n  title: string;\n  collapsedInfo: string[];\n  children: React.ReactNode;\n}\n\nexport function QueryOptionGroup({ title, children, collapsedInfo }: Props) {\n  const [isOpen, toggleOpen] = useToggle(false);\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.wrapper}>\n      <Collapse\n        className={styles.collapse}\n        collapsible\n        isOpen={isOpen}\n        onToggle={toggleOpen}\n        label={\n          <Stack gap={0}>\n            <h6 className={styles.title}>{title}</h6>\n            {!isOpen && (\n              <div className={styles.description}>\n                {collapsedInfo.map((x, i) => (\n                  <span key={i}>{x}</span>\n                ))}\n              </div>\n            )}\n          </Stack>\n        }\n      >\n        <div className={styles.body}>{children}</div>\n      </Collapse>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    collapse: css({\n      backgroundColor: 'unset',\n      border: 'unset',\n      marginBottom: 0,\n\n      ['> button']: {\n        padding: theme.spacing(0, 1),\n      },\n    }),\n    wrapper: css({\n      width: '100%',\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'baseline',\n    }),\n    title: css({\n      flexGrow: 1,\n      overflow: 'hidden',\n      fontSize: theme.typography.bodySmall.fontSize,\n      fontWeight: theme.typography.fontWeightMedium,\n      margin: 0,\n    }),\n    description: css({\n      color: theme.colors.text.secondary,\n      fontSize: theme.typography.bodySmall.fontSize,\n      fontWeight: theme.typography.bodySmall.fontWeight,\n      paddingLeft: theme.spacing(2),\n      gap: theme.spacing(2),\n      display: 'flex',\n    }),\n    body: css({\n      display: 'flex',\n      gap: theme.spacing(2),\n      flexWrap: 'wrap',\n    }),\n    tooltip: css({\n      marginRight: theme.spacing(0.25),\n    }),\n  };\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryLegendEditor.tsx\nimport { useRef } from 'react';\nimport * as React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorField } from '@grafana/plugin-ui';\nimport { AutoSizeInput, Select } from '@grafana/ui';\n\nimport { LegendFormatMode } from '../../types';\n\nexport interface PromQueryLegendEditorProps {\n  legendFormat: string | undefined;\n  onChange: (legendFormat: string) => void;\n  onRunQuery: () => void;\n}\n\nconst legendModeOptions = [\n  {\n    label: 'Auto',\n    value: LegendFormatMode.Auto,\n    description: 'Only includes unique labels',\n  },\n  { label: 'Verbose', value: LegendFormatMode.Verbose, description: 'All label names and values' },\n  { label: 'Custom', value: LegendFormatMode.Custom, description: 'Provide a naming template' },\n];\n\n/**\n * Tests for this component are on the parent level (PromQueryBuilderOptions).\n */\nexport const PromQueryLegendEditor = React.memo<PromQueryLegendEditorProps>(\n  ({ legendFormat, onChange, onRunQuery }) => {\n    const mode = getLegendMode(legendFormat);\n    const inputRef = useRef<HTMLInputElement | null>(null);\n\n    const onLegendFormatChanged = (evt: React.FormEvent<HTMLInputElement>) => {\n      let newFormat = evt.currentTarget.value;\n      if (newFormat.length === 0) {\n        newFormat = LegendFormatMode.Auto;\n      }\n\n      if (newFormat !== legendFormat) {\n        onChange(newFormat);\n        onRunQuery();\n      }\n    };\n\n    const onLegendModeChanged = (value: SelectableValue<LegendFormatMode>) => {\n      switch (value.value!) {\n        case LegendFormatMode.Auto:\n          onChange(LegendFormatMode.Auto);\n          break;\n        case LegendFormatMode.Custom:\n          onChange('{{label_name}}');\n          setTimeout(() => {\n            inputRef.current?.focus();\n            inputRef.current?.setSelectionRange(2, 12, 'forward');\n          }, 10);\n          break;\n        case LegendFormatMode.Verbose:\n          onChange('');\n          break;\n      }\n      onRunQuery();\n    };\n\n    return (\n      <EditorField\n        label=\"Legend\"\n        tooltip=\"Series name override or template. Ex. {{hostname}} will be replaced with label value for hostname.\"\n        data-testid={selectors.components.DataSource.Prometheus.queryEditor.legend}\n      >\n        <>\n          {mode === LegendFormatMode.Custom && (\n            <AutoSizeInput\n              id=\"legendFormat\"\n              minWidth={22}\n              placeholder=\"auto\"\n              defaultValue={legendFormat}\n              onCommitChange={onLegendFormatChanged}\n              ref={inputRef}\n            />\n          )}\n          {mode !== LegendFormatMode.Custom && (\n            <Select\n              inputId=\"legend.mode\"\n              isSearchable={false}\n              placeholder=\"Select legend mode\"\n              options={legendModeOptions}\n              width={22}\n              onChange={onLegendModeChanged}\n              value={legendModeOptions.find((x) => x.value === mode)}\n            />\n          )}\n        </>\n      </EditorField>\n    );\n  }\n);\n\nPromQueryLegendEditor.displayName = 'PromQueryLegendEditor';\n\nfunction getLegendMode(legendFormat: string | undefined) {\n  // This special value means the new smart minimal series naming\n  if (legendFormat === LegendFormatMode.Auto) {\n    return LegendFormatMode.Auto;\n  }\n\n  // Missing or empty legend format is the old verbose behavior\n  if (legendFormat == null || legendFormat === '') {\n    return LegendFormatMode.Verbose;\n  }\n\n  return LegendFormatMode.Custom;\n}\n\nexport function getLegendModeLabel(legendFormat: string | undefined) {\n  const mode = getLegendMode(legendFormat);\n  if (mode !== LegendFormatMode.Custom) {\n    return legendModeOptions.find((x) => x.value === mode)?.label;\n  }\n  return legendFormat;\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryBuilderOptions.tsx\nimport { SyntheticEvent } from 'react';\nimport * as React from 'react';\n\nimport { CoreApp, SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorField, EditorRow, EditorSwitch } from '@grafana/plugin-ui';\nimport { AutoSizeInput, RadioButtonGroup, Select } from '@grafana/ui';\n\nimport { getQueryTypeChangeHandler, getQueryTypeOptions } from '../../components/PromExploreExtraField';\nimport { PromQueryFormat } from '../../dataquery';\nimport { PromQuery } from '../../types';\nimport { QueryOptionGroup } from '../shared/QueryOptionGroup';\n\nimport { FORMAT_OPTIONS, INTERVAL_FACTOR_OPTIONS } from './PromQueryEditorSelector';\nimport { getLegendModeLabel, PromQueryLegendEditor } from './PromQueryLegendEditor';\n\nexport interface UIOptions {\n  exemplars: boolean;\n  type: boolean;\n  format: boolean;\n  minStep: boolean;\n  legend: boolean;\n  resolution: boolean;\n}\n\nexport interface PromQueryBuilderOptionsProps {\n  query: PromQuery;\n  app?: CoreApp;\n  onChange: (update: PromQuery) => void;\n  onRunQuery: () => void;\n}\n\nexport const PromQueryBuilderOptions = React.memo<PromQueryBuilderOptionsProps>(\n  ({ query, app, onChange, onRunQuery }) => {\n    const onChangeFormat = (value: SelectableValue<PromQueryFormat>) => {\n      onChange({ ...query, format: value.value });\n      onRunQuery();\n    };\n\n    const onChangeStep = (evt: React.FormEvent<HTMLInputElement>) => {\n      onChange({ ...query, interval: evt.currentTarget.value.trim() });\n      onRunQuery();\n    };\n\n    const queryTypeOptions = getQueryTypeOptions(\n      app === CoreApp.Explore || app === CoreApp.Correlations || app === CoreApp.PanelEditor\n    );\n\n    const onQueryTypeChange = getQueryTypeChangeHandler(query, onChange);\n\n    const onExemplarChange = (event: SyntheticEvent<HTMLInputElement>) => {\n      const isEnabled = event.currentTarget.checked;\n      onChange({ ...query, exemplar: isEnabled });\n      onRunQuery();\n    };\n\n    const onIntervalFactorChange = (value: SelectableValue<number>) => {\n      onChange({ ...query, intervalFactor: value.value });\n      onRunQuery();\n    };\n\n    const formatOption = FORMAT_OPTIONS.find((option) => option.value === query.format) || FORMAT_OPTIONS[0];\n    const queryTypeValue = getQueryTypeValue(query);\n    const queryTypeLabel = queryTypeOptions.find((x) => x.value === queryTypeValue)!.label;\n\n    return (\n      <EditorRow>\n        <div data-testid={selectors.components.DataSource.Prometheus.queryEditor.options}>\n          <QueryOptionGroup\n            title=\"Options\"\n            collapsedInfo={getCollapsedInfo(query, formatOption.label!, queryTypeLabel, app)}\n          >\n            <PromQueryLegendEditor\n              legendFormat={query.legendFormat}\n              onChange={(legendFormat) => onChange({ ...query, legendFormat })}\n              onRunQuery={onRunQuery}\n            />\n            <EditorField\n              label=\"Min step\"\n              tooltip={\n                <>\n                  An additional lower limit for the step parameter of the Prometheus query and for the{' '}\n                  <code>$__interval</code> and <code>$__rate_interval</code> variables.\n                </>\n              }\n            >\n              <AutoSizeInput\n                type=\"text\"\n                aria-label=\"Set lower limit for the step parameter\"\n                placeholder={'auto'}\n                minWidth={10}\n                onCommitChange={onChangeStep}\n                defaultValue={query.interval}\n                data-test-id=\"prometheus-step\"\n              />\n            </EditorField>\n            <EditorField label=\"Format\">\n              <Select\n                data-testid={selectors.components.DataSource.Prometheus.queryEditor.format}\n                value={formatOption}\n                allowCustomValue\n                onChange={onChangeFormat}\n                options={FORMAT_OPTIONS}\n              />\n            </EditorField>\n            <EditorField label=\"Type\" data-testid={selectors.components.DataSource.Prometheus.queryEditor.type}>\n              <RadioButtonGroup options={queryTypeOptions} value={queryTypeValue} onChange={onQueryTypeChange} />\n            </EditorField>\n            {shouldShowExemplarSwitch(query, app) && (\n              <EditorField label=\"Exemplars\">\n                <EditorSwitch\n                  value={query.exemplar || false}\n                  onChange={onExemplarChange}\n                  data-test-id=\"prometheus-exemplars\"\n                />\n              </EditorField>\n            )}\n            {query.intervalFactor && query.intervalFactor > 1 && (\n              <EditorField label=\"Resolution\">\n                <Select\n                  aria-label=\"Select resolution\"\n                  isSearchable={false}\n                  options={INTERVAL_FACTOR_OPTIONS}\n                  onChange={onIntervalFactorChange}\n                  value={INTERVAL_FACTOR_OPTIONS.find((option) => option.value === query.intervalFactor)}\n                />\n              </EditorField>\n            )}\n          </QueryOptionGroup>\n        </div>\n      </EditorRow>\n    );\n  }\n);\n\nfunction shouldShowExemplarSwitch(query: PromQuery, app?: CoreApp) {\n  if (app === CoreApp.UnifiedAlerting || !query.range) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction getQueryTypeValue(query: PromQuery) {\n  return query.range && query.instant ? 'both' : query.instant ? 'instant' : 'range';\n}\n\nfunction getCollapsedInfo(query: PromQuery, formatOption: string, queryType: string, app?: CoreApp): string[] {\n  const items: string[] = [];\n\n  items.push(`Legend: ${getLegendModeLabel(query.legendFormat)}`);\n  items.push(`Format: ${formatOption}`);\n  items.push(`Step: ${query.interval ?? 'auto'}`);\n  items.push(`Type: ${queryType}`);\n\n  if (shouldShowExemplarSwitch(query, app)) {\n    if (query.exemplar) {\n      items.push(`Exemplars: true`);\n    } else {\n      items.push(`Exemplars: false`);\n    }\n  }\n  return items;\n}\n\nPromQueryBuilderOptions.displayName = 'PromQueryBuilderOptions';\n","import { useState, useEffect, useCallback } from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config } from '@grafana/runtime';\nimport { IconButton, Text, Stack } from '@grafana/ui';\n\nimport {\n  CODE_MODE_SUGGESTIONS_INCOMPLETE_EVENT,\n  isSuggestionsIncompleteEvent,\n} from '../../components/monaco-query-field/monaco-completion-provider/data_provider';\nimport { PromQueryEditorProps } from '../../components/types';\nimport { QueryEditorMode } from '../shared/types';\n\ninterface Props {\n  datasourceUid: PromQueryEditorProps['datasource']['uid'];\n  editorMode: QueryEditorMode;\n}\n\nexport function PromQueryCodeEditorAutocompleteInfo(props: Readonly<Props>) {\n  const [autocompleteLimit, setAutocompleteLimit] = useState('n');\n  const [autocompleteLimitExceeded, setAutocompleteLimitExceeded] = useState(false);\n  const handleSuggestionsIncompleteEvent = useCallback(\n    (e: Event) => {\n      if (!isSuggestionsIncompleteEvent(e)) {\n        return;\n      }\n\n      if (e.detail.datasourceUid === props.datasourceUid) {\n        setAutocompleteLimitExceeded(true);\n        setAutocompleteLimit(e.detail.limit.toString());\n      }\n    },\n    [props.datasourceUid]\n  );\n\n  useEffect(() => {\n    addEventListener(CODE_MODE_SUGGESTIONS_INCOMPLETE_EVENT, handleSuggestionsIncompleteEvent);\n\n    return () => {\n      removeEventListener(CODE_MODE_SUGGESTIONS_INCOMPLETE_EVENT, handleSuggestionsIncompleteEvent);\n    };\n  }, [handleSuggestionsIncompleteEvent]);\n\n  const showCodeModeAutocompleteDisclaimer = (): boolean => {\n    return (\n      Boolean(config.featureToggles.prometheusCodeModeMetricNamesSearch) &&\n      props.editorMode === QueryEditorMode.Code &&\n      autocompleteLimitExceeded\n    );\n  };\n\n  if (!showCodeModeAutocompleteDisclaimer()) {\n    return null;\n  }\n\n  return (\n    <div data-testid={selectors.components.DataSource.Prometheus.queryEditor.code.metricsCountInfo}>\n      <Stack direction=\"row\" gap={1}>\n        <Text color=\"secondary\" element=\"p\" italic={true}>\n          Autocomplete suggestions limited\n        </Text>\n        <IconButton\n          name=\"info-circle\"\n          tooltip={`The number of metric names exceeds the autocomplete limit. Only the ${autocompleteLimit}-most relevant metrics are displayed. You can adjust the threshold in the data source settings.`}\n        />\n      </Stack>\n    </div>\n  );\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/querybuilder/components/PromQueryEditorSelector.tsx\nimport { isEqual, map } from 'lodash';\nimport { memo, SyntheticEvent, useCallback, useEffect, useState } from 'react';\n\nimport { CoreApp, LoadingState, SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorHeader, EditorRows, FlexItem } from '@grafana/plugin-ui';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, ConfirmModal, Space } from '@grafana/ui';\n\nimport { PromQueryEditorProps } from '../../components/types';\nimport { PromQueryFormat } from '../../dataquery';\nimport { PromQuery } from '../../types';\nimport { QueryPatternsModal } from '../QueryPatternsModal';\nimport { promQueryEditorExplainKey, useFlag } from '../hooks/useFlag';\nimport { buildVisualQueryFromString } from '../parsing';\nimport { QueryEditorModeToggle } from '../shared/QueryEditorModeToggle';\nimport { QueryHeaderSwitch } from '../shared/QueryHeaderSwitch';\nimport { QueryEditorMode } from '../shared/types';\nimport { changeEditorMode, getQueryWithDefaults } from '../state';\n\nimport { PromQueryBuilderContainer } from './PromQueryBuilderContainer';\nimport { PromQueryBuilderOptions } from './PromQueryBuilderOptions';\nimport { PromQueryCodeEditor } from './PromQueryCodeEditor';\nimport { PromQueryCodeEditorAutocompleteInfo } from './PromQueryCodeEditorAutocompleteInfo';\n\nexport const FORMAT_OPTIONS: Array<SelectableValue<PromQueryFormat>> = [\n  { label: 'Time series', value: 'time_series' },\n  { label: 'Table', value: 'table' },\n  { label: 'Heatmap', value: 'heatmap' },\n];\n\nexport const INTERVAL_FACTOR_OPTIONS: Array<SelectableValue<number>> = map([1, 2, 3, 4, 5, 10], (value: number) => ({\n  value,\n  label: '1/' + value,\n}));\n\ntype Props = PromQueryEditorProps;\n\nexport const PromQueryEditorSelector = memo<Props>((props) => {\n  const {\n    onChange,\n    onRunQuery,\n    data,\n    app,\n    onAddQuery,\n    datasource: { defaultEditor },\n    queries,\n  } = props;\n\n  const [parseModalOpen, setParseModalOpen] = useState(false);\n  const [queryPatternsModalOpen, setQueryPatternsModalOpen] = useState(false);\n  const [dataIsStale, setDataIsStale] = useState(false);\n  const { flag: explain, setFlag: setExplain } = useFlag(promQueryEditorExplainKey);\n\n  const query = getQueryWithDefaults(props.query, app, defaultEditor);\n  // This should be filled in from the defaults by now.\n  const editorMode = query.editorMode!;\n\n  const onEditorModeChange = useCallback(\n    (newMetricEditorMode: QueryEditorMode) => {\n      reportInteraction('user_grafana_prometheus_editor_mode_clicked', {\n        newEditor: newMetricEditorMode,\n        previousEditor: query.editorMode ?? '',\n        newQuery: !query.expr,\n        app: app ?? '',\n      });\n\n      if (newMetricEditorMode === QueryEditorMode.Builder) {\n        const result = buildVisualQueryFromString(query.expr || '');\n        // If there are errors, give user a chance to decide if they want to go to builder as that can lose some data.\n        if (result.errors.length) {\n          setParseModalOpen(true);\n          return;\n        }\n      }\n      changeEditorMode(query, newMetricEditorMode, onChange);\n    },\n    [onChange, query, app]\n  );\n\n  useEffect(() => {\n    setDataIsStale(false);\n  }, [data]);\n\n  const onChangeInternal = (query: PromQuery) => {\n    if (!isEqual(query, props.query)) {\n      setDataIsStale(true);\n    }\n    onChange(query);\n  };\n\n  const onShowExplainChange = (e: SyntheticEvent<HTMLInputElement>) => {\n    setExplain(e.currentTarget.checked);\n  };\n\n  const handleOpenQueryPatternsModal = useCallback(() => {\n    reportInteraction('grafana_prometheus_open_kickstart_clicked', {\n      app: app ?? '',\n    });\n    setQueryPatternsModalOpen(true);\n  }, [app]);\n\n  return (\n    <>\n      <ConfirmModal\n        isOpen={parseModalOpen}\n        title=\"Parsing error: Switch to the builder mode?\"\n        body=\"There is a syntax error, or the query structure cannot be visualized when switching to the builder mode. Parts of the query may be lost. \"\n        confirmText=\"Continue\"\n        onConfirm={() => {\n          changeEditorMode(query, QueryEditorMode.Builder, onChange);\n          setParseModalOpen(false);\n        }}\n        onDismiss={() => setParseModalOpen(false)}\n      />\n      <QueryPatternsModal\n        isOpen={queryPatternsModalOpen}\n        onClose={() => setQueryPatternsModalOpen(false)}\n        query={query}\n        queries={queries}\n        app={app}\n        onChange={onChange}\n        onAddQuery={onAddQuery}\n      />\n      <EditorHeader>\n        <Button\n          data-testid={selectors.components.QueryBuilder.queryPatterns}\n          variant=\"secondary\"\n          size=\"sm\"\n          onClick={handleOpenQueryPatternsModal}\n        >\n          Kick start your query\n        </Button>\n        <div data-testid={selectors.components.DataSource.Prometheus.queryEditor.explain}>\n          <QueryHeaderSwitch label=\"Explain\" value={explain} onChange={onShowExplainChange} />\n        </div>\n        <FlexItem grow={1} />\n        {app !== CoreApp.Explore && app !== CoreApp.Correlations && (\n          <Button\n            variant={dataIsStale ? 'primary' : 'secondary'}\n            size=\"sm\"\n            onClick={onRunQuery}\n            icon={data?.state === LoadingState.Loading ? 'spinner' : undefined}\n            disabled={data?.state === LoadingState.Loading}\n          >\n            Run queries\n          </Button>\n        )}\n        <PromQueryCodeEditorAutocompleteInfo datasourceUid={props.datasource.uid} editorMode={editorMode} />\n        <div data-testid={selectors.components.DataSource.Prometheus.queryEditor.editorToggle}>\n          <QueryEditorModeToggle mode={editorMode} onChange={onEditorModeChange} />\n        </div>\n      </EditorHeader>\n      <Space v={0.5} />\n      <EditorRows>\n        {editorMode === QueryEditorMode.Code && (\n          <PromQueryCodeEditor {...props} query={query} showExplain={explain} onChange={onChangeInternal} />\n        )}\n        {editorMode === QueryEditorMode.Builder && (\n          <PromQueryBuilderContainer\n            query={query}\n            datasource={props.datasource}\n            onChange={onChangeInternal}\n            onRunQuery={props.onRunQuery}\n            data={data}\n            showExplain={explain}\n          />\n        )}\n        <PromQueryBuilderOptions query={query} app={props.app} onChange={onChange} onRunQuery={onRunQuery} />\n      </EditorRows>\n    </>\n  );\n});\n\nPromQueryEditorSelector.displayName = 'PromQueryEditorSelector';\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/components/PromQueryEditorForAlerting.tsx\nimport { PromQueryField } from './PromQueryField';\nimport { PromQueryEditorProps } from './types';\n\nexport function PromQueryEditorForAlerting(props: PromQueryEditorProps) {\n  const { datasource, query, range, data, onChange, onRunQuery } = props;\n\n  return (\n    <PromQueryField\n      datasource={datasource}\n      query={query}\n      onRunQuery={onRunQuery}\n      onChange={onChange}\n      history={[]}\n      range={range}\n      data={data}\n      data-testid={alertingTestIds.editor}\n    />\n  );\n}\n\nexport const alertingTestIds = {\n  editor: 'prom-editor-cloud-alerting',\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/components/PromQueryEditorByApp.tsx\nimport { memo } from 'react';\n\nimport { CoreApp } from '@grafana/data';\n\nimport { PromQueryEditorSelector } from '../querybuilder/components/PromQueryEditorSelector';\n\nimport { PromQueryEditorForAlerting } from './PromQueryEditorForAlerting';\nimport { PromQueryEditorProps } from './types';\n\nfunction PromQueryEditorByAppBase(props: PromQueryEditorProps) {\n  const { app } = props;\n\n  switch (app) {\n    case CoreApp.CloudAlerting:\n      return <PromQueryEditorForAlerting {...props} />;\n    default:\n      return <PromQueryEditorSelector {...props} />;\n  }\n}\n\nexport const PromQueryEditorByApp = memo(PromQueryEditorByAppBase);\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/components/PromCheatSheet.tsx\nimport { css } from '@emotion/css';\n\nimport { GrafanaTheme2, QueryEditorHelpProps } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { PromQuery } from '../types';\n\nconst CHEAT_SHEET_ITEMS = [\n  {\n    title: 'Request Rate',\n    expression: 'rate(http_request_total[5m])',\n    label:\n      'Given an HTTP request counter, this query calculates the per-second average request rate over the last 5 minutes.',\n  },\n  {\n    title: '95th Percentile of Request Latencies',\n    expression: 'histogram_quantile(0.95, sum(rate(prometheus_http_request_duration_seconds_bucket[5m])) by (le))',\n    label: 'Calculates the 95th percentile of HTTP request rate over 5 minute windows.',\n  },\n  {\n    title: 'Alerts Firing',\n    expression: 'sort_desc(sum(sum_over_time(ALERTS{alertstate=\"firing\"}[24h])) by (alertname))',\n    label: 'Sums up the alerts that have been firing over the last 24 hours.',\n  },\n  {\n    title: 'Step',\n    label:\n      'Defines the graph resolution using a duration format (15s, 1m, 3h, ...). Small steps create high-resolution graphs but can be slow over larger time ranges. Using a longer step lowers the resolution and smooths the graph by producing fewer datapoints. If no step is given the resolution is calculated automatically.',\n  },\n];\n\nexport const PromCheatSheet = (props: QueryEditorHelpProps<PromQuery>) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div>\n      <h2>PromQL Cheat Sheet</h2>\n      {CHEAT_SHEET_ITEMS.map((item, index) => (\n        <div className={styles.cheatSheetItem} key={index}>\n          <div className={styles.cheatSheetItemTitle}>{item.title}</div>\n          {item.expression ? (\n            <button\n              type=\"button\"\n              className={styles.cheatSheetExample}\n              onClick={(e) => props.onClickExample({ refId: 'A', expr: item.expression })}\n            >\n              <code>{item.expression}</code>\n            </button>\n          ) : null}\n          {item.label}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  cheatSheetItem: css({\n    margin: theme.spacing(3, 0),\n  }),\n  cheatSheetItemTitle: css({\n    fontSize: theme.typography.h3.fontSize,\n  }),\n  cheatSheetExample: css({\n    margin: theme.spacing(0.5, 0),\n    // element is interactive, clear button styles\n    textAlign: 'left',\n    border: 'none',\n    background: 'transparent',\n    display: 'block',\n  }),\n});\n","import { config } from '@grafana/runtime';\n\nvar AzureCloud = /* @__PURE__ */ ((AzureCloud2) => {\n  AzureCloud2[\"Public\"] = \"AzureCloud\";\n  AzureCloud2[\"China\"] = \"AzureChinaCloud\";\n  AzureCloud2[\"USGovernment\"] = \"AzureUSGovernment\";\n  AzureCloud2[\"None\"] = \"\";\n  return AzureCloud2;\n})(AzureCloud || {});\nconst predefinedClouds = [\n  {\n    name: \"AzureCloud\",\n    displayName: \"Azure\"\n  },\n  {\n    name: \"AzureChinaCloud\",\n    displayName: \"Azure China\"\n  },\n  {\n    name: \"AzureUSGovernment\",\n    displayName: \"Azure US Government\"\n  }\n];\nfunction getAzureClouds() {\n  const settingsEx = config.azure;\n  if (Array.isArray(settingsEx.clouds) && settingsEx.clouds.length > 0) {\n    return settingsEx.clouds;\n  }\n  return predefinedClouds;\n}\nfunction getDefaultAzureCloud() {\n  return config.azure.cloud || \"AzureCloud\" /* Public */;\n}\nfunction resolveLegacyCloudName(cloudName) {\n  if (!cloudName) {\n    return void 0;\n  }\n  switch (cloudName) {\n    case \"azuremonitor\":\n      return \"AzureCloud\" /* Public */;\n    case \"chinaazuremonitor\":\n      return \"AzureChinaCloud\" /* China */;\n    case \"govazuremonitor\":\n      return \"AzureUSGovernment\" /* USGovernment */;\n    default:\n      throw new Error(`Azure cloud '${cloudName}' is not recognized by datasource.`);\n  }\n}\n\nexport { AzureCloud, getAzureClouds, getDefaultAzureCloud, resolveLegacyCloudName };\n//# sourceMappingURL=clouds.js.map\n","function instanceOfAzureCredential(authType, object) {\n  if (!object) {\n    return false;\n  }\n  return object.authType === authType;\n}\n\nexport { instanceOfAzureCredential };\n//# sourceMappingURL=AzureCredentials.js.map\n","import { config } from '@grafana/runtime';\nimport { getDefaultAzureCloud } from '../clouds.js';\nimport { instanceOfAzureCredential } from './AzureCredentials.js';\n\nconst concealed = Symbol(\"Concealed client secret\");\nconst concealedLegacy = Symbol(\"Concealed legacy client secret\");\nfunction isCredentialsComplete(credentials, ignoreSecret = false) {\n  const authType = credentials.authType;\n  switch (authType) {\n    case \"msi\":\n    case \"workloadidentity\":\n    case \"currentuser\":\n      return true;\n    case \"clientsecret\":\n    case \"clientsecret-obo\":\n      return !!(credentials.azureCloud && credentials.tenantId && credentials.clientId && // When ignoreSecret is set we consider the credentials complete without checking the secret\n      !!(ignoreSecret || credentials.clientSecret));\n    case \"ad-password\":\n      return !!(credentials.clientId && credentials.password && credentials.userId);\n    default:\n      throw new Error(`The auth type '${authType}' not supported.`);\n  }\n}\nfunction getClientSecret(options) {\n  if (!(\"secureJsonFields\" in options) || !options.hasOwnProperty(\"secureJsonFields\")) {\n    return void 0;\n  }\n  if (options.secureJsonFields.azureClientSecret) {\n    return concealed;\n  } else if (options.secureJsonFields.clientSecret) {\n    return concealedLegacy;\n  } else {\n    const secret = options.secureJsonData?.azureClientSecret;\n    return typeof secret === \"string\" && secret.length > 0 ? secret : void 0;\n  }\n}\nfunction getAdPassword(options) {\n  if (!(\"secureJsonFields\" in options) || !options.hasOwnProperty(\"secureJsonFields\")) {\n    return void 0;\n  }\n  if (options.secureJsonFields.password) {\n    return concealed;\n  } else {\n    const secret = options.secureJsonData?.password;\n    return typeof secret === \"string\" && secret.length > 0 ? secret : void 0;\n  }\n}\nfunction getDatasourceCredentials(options, oboEnabled) {\n  const credentials = options.jsonData.azureCredentials;\n  if (!credentials) {\n    return void 0;\n  }\n  const authType = credentials.authType;\n  switch (authType) {\n    case \"msi\":\n    case \"workloadidentity\":\n      if (authType === \"msi\" && config.azure.managedIdentityEnabled || authType === \"workloadidentity\" && config.azure.workloadIdentityEnabled) {\n        return {\n          authType\n        };\n      } else {\n        return void 0;\n      }\n    case \"clientsecret\":\n    case \"clientsecret-obo\":\n      if (authType === \"clientsecret-obo\" && !oboEnabled) {\n        return void 0;\n      }\n      return {\n        authType,\n        azureCloud: credentials.azureCloud || getDefaultAzureCloud(),\n        tenantId: credentials.tenantId,\n        clientId: credentials.clientId,\n        clientSecret: getClientSecret(options)\n      };\n    case \"ad-password\":\n      return {\n        authType,\n        userId: credentials.userId,\n        clientId: credentials.clientId,\n        password: getAdPassword(options)\n      };\n  }\n  if (instanceOfAzureCredential(authType, credentials)) {\n    if (!config.azure.userIdentityEnabled) {\n      return void 0;\n    }\n    if (instanceOfAzureCredential(\"clientsecret\", credentials.serviceCredentials)) {\n      const serviceCredentials = { ...credentials.serviceCredentials, clientSecret: getClientSecret(options) };\n      return {\n        authType,\n        serviceCredentialsEnabled: credentials.serviceCredentialsEnabled,\n        serviceCredentials\n      };\n    }\n    return {\n      authType,\n      serviceCredentialsEnabled: credentials.serviceCredentialsEnabled,\n      serviceCredentials: credentials.serviceCredentials\n    };\n  }\n  throw new Error(`The auth type '${authType}' is not supported.`);\n}\nfunction updateDatasourceCredentials(options, credentials, oboEnabled) {\n  options = {\n    ...options,\n    jsonData: {\n      ...options.jsonData,\n      azureAuthType: void 0,\n      cloudName: void 0,\n      tenantId: void 0,\n      clientId: void 0\n    }\n  };\n  const authType = credentials.authType;\n  switch (authType) {\n    case \"msi\":\n    case \"workloadidentity\":\n      if (authType === \"msi\" && !config.azure.managedIdentityEnabled) {\n        throw new Error(\"Managed Identity authentication is not enabled in Grafana config.\");\n      }\n      if (authType === \"workloadidentity\" && !config.azure.workloadIdentityEnabled) {\n        throw new Error(\"Workload Identity authentication is not enabled in Grafana config.\");\n      }\n      options = {\n        ...options,\n        jsonData: {\n          ...options.jsonData,\n          azureCredentials: {\n            authType\n          }\n        }\n      };\n      return options;\n    case \"clientsecret\":\n    case \"clientsecret-obo\":\n      if (authType === \"clientsecret-obo\" && !oboEnabled) {\n        throw new Error(\"Client Secret OBO authentication is not enabled in Grafana config.\");\n      }\n      options = {\n        ...options,\n        jsonData: {\n          ...options.jsonData,\n          azureCredentials: {\n            authType,\n            azureCloud: credentials.azureCloud || getDefaultAzureCloud(),\n            tenantId: credentials.tenantId,\n            clientId: credentials.clientId\n          }\n        },\n        secureJsonData: {\n          ...options.secureJsonData,\n          azureClientSecret: typeof credentials.clientSecret === \"string\" && credentials.clientSecret.length > 0 ? credentials.clientSecret : void 0\n        },\n        secureJsonFields: {\n          ...options.secureJsonFields,\n          azureClientSecret: credentials.clientSecret === concealed,\n          clientSecret: credentials.clientSecret === concealedLegacy\n        }\n      };\n      if (authType === \"clientsecret-obo\") {\n        options = {\n          ...options,\n          jsonData: {\n            ...options.jsonData,\n            oauthPassThru: true\n          }\n        };\n      }\n      return options;\n    case \"ad-password\":\n      options = {\n        ...options,\n        jsonData: {\n          ...options.jsonData,\n          azureCredentials: {\n            authType: \"ad-password\",\n            userId: credentials.userId,\n            clientId: credentials.clientId\n          }\n        },\n        secureJsonData: {\n          ...options.secureJsonData,\n          password: typeof credentials.password === \"string\" && credentials.password.length > 0 ? credentials.password : void 0\n        },\n        secureJsonFields: {\n          ...options.secureJsonFields,\n          password: typeof credentials.password === \"symbol\"\n        }\n      };\n      return options;\n  }\n  if (instanceOfAzureCredential(\"currentuser\", credentials)) {\n    if (!config.azure.userIdentityEnabled) {\n      throw new Error(\"User Identity authentication is not enabled in Grafana config.\");\n    }\n    const serviceCredentials = credentials.serviceCredentials;\n    let clientSecret;\n    if (instanceOfAzureCredential(\"clientsecret\", serviceCredentials)) {\n      clientSecret = serviceCredentials.clientSecret;\n      delete serviceCredentials.clientSecret;\n    }\n    options = {\n      ...options,\n      jsonData: {\n        ...options.jsonData,\n        azureCredentials: {\n          authType: \"currentuser\",\n          serviceCredentialsEnabled: credentials.serviceCredentialsEnabled,\n          serviceCredentials\n        },\n        oauthPassThru: true,\n        disableGrafanaCache: true\n      },\n      secureJsonData: {\n        ...options.secureJsonData,\n        azureClientSecret: typeof clientSecret === \"string\" && clientSecret.length > 0 ? clientSecret : void 0\n      },\n      secureJsonFields: {\n        ...options.secureJsonFields,\n        azureClientSecret: clientSecret === concealed,\n        clientSecret: clientSecret === concealedLegacy\n      }\n    };\n    return options;\n  }\n  throw new Error(`The auth type '${authType}' is not supported.`);\n}\nfunction hasCredentials(options) {\n  return !!options.jsonData.azureCredentials;\n}\n\nexport { concealed, concealedLegacy, getAdPassword, getClientSecret, getDatasourceCredentials, hasCredentials, isCredentialsComplete, updateDatasourceCredentials };\n//# sourceMappingURL=AzureCredentialsConfig.js.map\n","const ResourceTypes = {\n  AnalysisServices: \"microsoft.analysisservices/servers\",\n  ApiManagementService: \"microsoft.apimanagement/service\",\n  ApplicationGateways: \"microsoft.network/applicationgateways\",\n  ApplicationGatewayforContainers: \"microsoft.servicenetworking/trafficcontrollers\",\n  ApplicationInsights: \"microsoft.insights/components\",\n  AppServiceEnvironments: \"microsoft.web/hostingenvironments\",\n  AppServicePlans: \"microsoft.web/serverfarms\",\n  AppServices: \"microsoft.web/sites\",\n  ArcMachines: \"microsoft.hybridcompute/machines\",\n  AutomationAccounts: \"microsoft.automation/automationaccounts\",\n  AutonomousDatabases: \"oracle.database/autonomousdatabases\",\n  AutoscaleSettings: \"microsoft.insights/autoscalesettings\",\n  AzureAD: \"microsoft.aadiam/azureadmetrics\",\n  AzureADDomainServices: \"microsoft.aad/domainservices\",\n  AzureDatabricks: \"microsoft.databricks/workspaces\",\n  AzureBotService: \"microsoft.botservice/botservices\",\n  AzureElasticSAN: \"microsoft.elasticsan/elasticsans\",\n  AzureResourceManager: \"microsoft.resources/subscriptions\",\n  AzureSpringCloud: \"microsoft.appplatform/spring\",\n  AzureStackHCI: \"microsoft.azurestackhci/clusters\",\n  AzureVMWarePrivateClouds: \"microsoft.avs/privateclouds\",\n  AzsResourceMonitor: \"microsoft.azurestackresourcemonitor/storageaccountmonitor\",\n  // AzureStack Resource\n  BackupVaults: \"microsoft.dataprotection/backupvaults\",\n  BareMetalMachine: \"microsoft.networkcloud/baremetalmachines\",\n  Bastion: \"microsoft.network/bastionhosts\",\n  BatchAccounts: \"microsoft.batch/batchaccounts\",\n  BatchAi: \"microsoft.batchai/workspaces\",\n  CdnProfile: \"microsoft.cdn/profiles\",\n  CdnWafPolicy: \"microsoft.cdn/cdnwebapplicationfirewallpolicies\",\n  ClassicCloudServices: \"microsoft.classiccompute/domainnames\",\n  CloudServiceExtendedSupport: \"microsoft.compute/cloudservices\",\n  ClassicComputeVirtualMachines: \"microsoft.classiccompute/virtualmachines\",\n  CloudSimple: \"microsoft.vmwarecloudsimple/virtualmachines\",\n  // 3rd party resource\n  Cluster: \"microsoft.networkcloud/clusters\",\n  ClusterManagers: \"microsoft.networkcloud/clustermanagers\",\n  CognitiveServices: \"microsoft.cognitiveservices/accounts\",\n  CommunicationsGateways: \"microsoft.voiceservices/communicationsgateways\",\n  CodeSigningAccounts: \"microsoft.codesigning/codesigningaccounts\",\n  ConfigurationStores: \"microsoft.appconfiguration/configurationstores\",\n  Connections: \"microsoft.network/connections\",\n  ConnectedVehicle: \"microsoft.connectedvehicle/platformaccounts\",\n  ContactProfiles: \"microsoft.orbital/contactprofiles\",\n  ContainerApps: \"microsoft.app/containerapps\",\n  ContainerAppsEnvironment: \"microsoft.app/managedenvironments\",\n  ContainerGroups: \"microsoft.containerinstance/containergroups\",\n  ContainerRegistries: \"microsoft.containerregistry/registries\",\n  ContainerServicesManaged: \"microsoft.containerservice/managedclusters\",\n  CosmosDB: \"microsoft.documentdb/databaseaccounts\",\n  CosmosCassandra: \"microsoft.documentdb/cassandraClusters\",\n  CosmosMongo: \"microsoft.documentdb/mongoClusters\",\n  CustomerInsights: \"microsoft.customerinsights/hubs\",\n  CustomMetricUsage: \"microsoft.insights/qos\",\n  DataboxEdge: \"microsoft.databoxedge/databoxedgedevices\",\n  DataFactories: \"microsoft.datafactory/datafactories\",\n  DataFactoriesv2: \"microsoft.datafactory/factories\",\n  DataCollectionRules: \"microsoft.insights/datacollectionrules\",\n  DataLakeAnalytics: \"microsoft.datalakeanalytics/accounts\",\n  DataLakeStore: \"microsoft.datalakestore/accounts\",\n  DataShare: \"microsoft.datashare/accounts\",\n  DBForMySql: \"microsoft.dbformysql/servers\",\n  DeviceProvisioningServices: \"microsoft.devices/provisioningservices\",\n  DevCenters: \"microsoft.devcenter/devcenters\",\n  Disks: \"microsoft.compute/disks\",\n  DNSZones: \"microsoft.network/dnszones\",\n  DNSPrivateResolver: \"microsoft.network/dnsresolvers\",\n  DNSForwardingRuleset: \"microsoft.network/dnsforwardingrulesets\",\n  EnterpriseGraph: \"microsoft.enterpriseknowledgegraph/services\",\n  EventGridDomains: \"microsoft.eventgrid/domains\",\n  EventGridTopics: \"microsoft.eventgrid/topics\",\n  EventGridSystemTopics: \"microsoft.eventgrid/systemtopics\",\n  EventHubs: \"microsoft.eventhub/namespaces\",\n  EventHubsClusters: \"microsoft.eventhub/clusters\",\n  ExpressRouteCircuits: \"microsoft.network/expressroutecircuits\",\n  ExpressRouteGateways: \"microsoft.network/expressroutegateways\",\n  ExpressRoutePorts: \"microsoft.network/expressrouteports\",\n  FabricLocations: \"microsoft.fabric.admin/fabriclocations\",\n  // AzureStack Resource\n  Firewall: \"microsoft.network/azurefirewalls\",\n  FrontDoor: \"microsoft.network/frontdoors\",\n  Grafana: \"microsoft.dashboard/grafana\",\n  HDInsights: \"microsoft.hdinsight/clusters\",\n  IoTCentralApplications: \"microsoft.iotcentral/iotapps\",\n  IoTHub: \"microsoft.devices/iothubs\",\n  IotSpaces: \"microsoft.iotspaces/graph\",\n  KeyVault: \"microsoft.keyvault/vaults\",\n  KubernetesArc: \"microsoft.kubernetes/connectedclusters\",\n  KustoClusters: \"microsoft.kusto/clusters\",\n  Layer2IsolationDomain: \"microsoft.managednetworkfabric/l2isolationdomains\",\n  Layer3IsolationDomain: \"microsoft.managednetworkfabric/l3isolationdomains\",\n  LoadBalancers: \"microsoft.network/loadbalancers\",\n  LogAnalytics: \"microsoft.operationalinsights/workspaces\",\n  LogicApps: \"microsoft.logic/workflows\",\n  LogicIntegrationServiceEnvironment: \"microsoft.logic/integrationserviceenvironments\",\n  MachineLearningServiceWorkspace: \"microsoft.machinelearningservices/workspaces\",\n  MariaDB: \"microsoft.dbformariadb/servers\",\n  ManagedHsms: \"microsoft.keyvault/managedhsms\",\n  ManagedLustre: \"microsoft.storagecache/amlfilesystems\",\n  ManagedNetworkFabricNetworkDevices: \"microsoft.managednetworkfabric/networkdevices\",\n  MediaServices: \"microsoft.media/mediaservices\",\n  MonitorAccounts: \"microsoft.monitor/accounts\",\n  MySQLFlexibleServers: \"microsoft.dbformysql/flexibleservers\",\n  NatGateway: \"microsoft.network/natgateways\",\n  NetworkInterfaces: \"microsoft.network/networkinterfaces\",\n  NetworkVirtualAppliances: \"microsoft.network/networkvirtualappliances\",\n  NetAppCapacityPools: \"microsoft.netapp/netappaccounts/capacitypools\",\n  NetworkWatcher: \"microsoft.network/networkwatchers\",\n  NGINXaaS: \"nginx.nginxplus/nginxdeployments\",\n  ConnectionMonitor: \"microsoft.network/networkwatchers/connectionmonitors\",\n  NotificationHubs: \"microsoft.notificationhubs/namespaces/notificationhubs\",\n  OracleExadataVMCluster: \"oracle.database/cloudvmclusters\",\n  OracleExadbVMCluster: \"oracle.database/exadbVmClusters\",\n  OrbitalL2Connections: \"microsoft.orbital/l2connections\",\n  MobileNetworkSite: \"microsoft.mobilenetwork/mobilenetworks/sites\",\n  RadioAccessNetwork: \"microsoft.mobilenetwork/radioaccessnetworks\",\n  PacketCoreControlPlane: \"microsoft.mobilenetwork/packetcorecontrolplanes\",\n  PacketCoreDataPlane: \"microsoft.mobilenetwork/packetcorecontrolplanes/packetcoredataplanes\",\n  PeeringServices: \"microsoft.peering/peeringservices\",\n  PlayFabTitles: \"microsoft.playfab/titles\",\n  PointToSiteVPN: \"microsoft.network/p2svpngateways\",\n  PostgreSQLFlexibleServers: \"microsoft.dbforpostgresql/flexibleservers\",\n  PostgreSQLServers: \"microsoft.dbforpostgresql/servers\",\n  PostgreSQLServersV2: \"microsoft.dbforpostgresql/serversv2\",\n  PowerBIDedicatedCapacities: \"microsoft.powerbidedicated/capacities\",\n  PrivateEndpoint: \"microsoft.network/privateendpoints\",\n  PrivateLinkService: \"microsoft.network/privatelinkservices\",\n  ProviderMonitorSettings: \"Microsoft.ProviderHub/providerMonitorSettings\",\n  ProvisionedClusters: \"microsoft.hybridcontainerservice/provisionedclusters\",\n  PublicIPAddresses: \"microsoft.network/publicipaddresses\",\n  PublicIPPrefixes: \"microsoft.network/publicipprefixes\",\n  RecoveryServicesVault: \"microsoft.recoveryservices/vaults\",\n  RedisCaches: \"microsoft.cache/redis\",\n  RedisEnterprise: \"microsoft.cache/redisenterprise\",\n  Relay: \"microsoft.relay/namespaces\",\n  SearchServices: \"microsoft.search/searchservices\",\n  ServerGroups: \"microsoft.dbforpostgresql/servergroupsv2\",\n  ServiceBus: \"microsoft.servicebus/namespaces\",\n  ServiceFabricMesh: \"microsoft.servicefabricmesh/applications\",\n  SignalRService: \"microsoft.signalrservice/signalr\",\n  SignalRServiceWebPubSub: \"microsoft.signalrservice/webpubsub\",\n  Solutions: \"microsoft.operationsmanagement/solutions\",\n  Spacecrafts: \"microsoft.orbital/spacecrafts\",\n  SqlManaged: \"microsoft.sql/managedinstances\",\n  SqlServersDatabases: \"microsoft.sql/servers/databases\",\n  SqlServersElasticPools: \"microsoft.sql/servers/elasticpools\",\n  SqlServersElasticJobAgents: \"microsoft.sql/servers/jobagents\",\n  StaticSites: \"Microsoft.web/staticSites\",\n  Storage: \"microsoft.storage/storageaccounts\",\n  StorageAppliance: \"microsoft.networkcloud/storageappliances\",\n  StorageCaches: \"microsoft.storagecache/caches\",\n  StorageMover: \"microsoft.storagemover/storagemovers\",\n  StorageClassic: \"microsoft.classicstorage/storageaccounts\",\n  StorageSync: \"microsoft.storagesync/storagesyncservices\",\n  StreamAnalyticsJobs: \"microsoft.streamanalytics/streamingjobs\",\n  SynapseWorkspace: \"microsoft.synapse/workspaces\",\n  TimeseriesInsightsEnvironments: \"microsoft.timeseriesinsights/environments\",\n  TrafficManagerProfiles: \"microsoft.network/trafficmanagerprofiles\",\n  VirtualHubs: \"microsoft.network/virtualhubs\",\n  VirtualMachines: \"microsoft.compute/virtualmachines\",\n  VirtualMachinesScaleSets: \"microsoft.compute/virtualmachinescalesets\",\n  VirtualNetworkFunctions: \"microsoft.hybridnetwork/virtualnetworkfunctions\",\n  VirtualNetworkGateWays: \"microsoft.network/virtualnetworkgateways\",\n  VirtualWANs: \"microsoft.network/virtualwans\",\n  VPNGateways: \"microsoft.network/vpngateways\",\n  WebsitesSlots: \"microsoft.web/sites/slots\",\n  WorkerPools: \"microsoft.web/hostingenvironments/workerpools\",\n  ActivityLogAlertRules: \"microsoft.insights/activitylogalerts\",\n  MetricAlertRules: \"microsoft.insights/metricalerts\",\n  LogAlertRules: \"microsoft.insights/scheduledqueryrules\",\n  ActionGroups: \"microsoft.insights/actiongroups\",\n  AlertProcessingRules: \"microsoft.alertsmanagement/actionrules\",\n  SmartAlertRules: \"microsoft.alertsmanagement/smartdetectoralertrules\",\n  PrometheusRuleGroups: \"microsoft.alertsmanagement/prometheusrulegroups\"\n};\n\nexport { ResourceTypes };\n//# sourceMappingURL=ResourceTypes.js.map\n","import { ResourceTypes } from './ResourceTypes.js';\n\nconst MetricsSupportedTypes = [\n  ResourceTypes.AnalysisServices,\n  ResourceTypes.ApiManagementService,\n  ResourceTypes.ApplicationGateways,\n  ResourceTypes.ApplicationGatewayforContainers,\n  ResourceTypes.ApplicationInsights,\n  ResourceTypes.AppServiceEnvironments,\n  ResourceTypes.AppServicePlans,\n  ResourceTypes.AppServices,\n  ResourceTypes.AutomationAccounts,\n  ResourceTypes.AutonomousDatabases,\n  ResourceTypes.AzureADDomainServices,\n  ResourceTypes.AzureBotService,\n  ResourceTypes.AzureDatabricks,\n  ResourceTypes.AzureElasticSAN,\n  ResourceTypes.AzureSpringCloud,\n  ResourceTypes.AzureStackHCI,\n  ResourceTypes.AzureVMWarePrivateClouds,\n  ResourceTypes.BackupVaults,\n  ResourceTypes.BareMetalMachine,\n  ResourceTypes.Bastion,\n  ResourceTypes.BatchAccounts,\n  ResourceTypes.DataCollectionRules,\n  ResourceTypes.BatchAi,\n  ResourceTypes.CdnProfile,\n  ResourceTypes.CdnWafPolicy,\n  ResourceTypes.ClassicCloudServices,\n  ResourceTypes.ClassicComputeVirtualMachines,\n  ResourceTypes.CloudServiceExtendedSupport,\n  ResourceTypes.CloudSimple,\n  ResourceTypes.Cluster,\n  ResourceTypes.ClusterManagers,\n  ResourceTypes.CodeSigningAccounts,\n  ResourceTypes.CognitiveServices,\n  ResourceTypes.CommunicationsGateways,\n  ResourceTypes.ConfigurationStores,\n  ResourceTypes.Connections,\n  ResourceTypes.ConnectedVehicle,\n  ResourceTypes.ContainerAppsEnvironment,\n  ResourceTypes.ContainerGroups,\n  ResourceTypes.ContainerRegistries,\n  ResourceTypes.ContainerServicesManaged,\n  ResourceTypes.CosmosDB,\n  ResourceTypes.CosmosCassandra,\n  ResourceTypes.CosmosMongo,\n  ResourceTypes.DataboxEdge,\n  ResourceTypes.DataFactories,\n  ResourceTypes.DataFactoriesv2,\n  ResourceTypes.DataLakeAnalytics,\n  ResourceTypes.DataLakeStore,\n  ResourceTypes.DataShare,\n  ResourceTypes.DBForMySql,\n  ResourceTypes.DeviceProvisioningServices,\n  ResourceTypes.DevCenters,\n  ResourceTypes.Disks,\n  ResourceTypes.DNSZones,\n  ResourceTypes.DNSPrivateResolver,\n  ResourceTypes.DNSForwardingRuleset,\n  ResourceTypes.EnterpriseGraph,\n  ResourceTypes.EventGridDomains,\n  ResourceTypes.EventGridTopics,\n  ResourceTypes.EventGridSystemTopics,\n  ResourceTypes.EventHubs,\n  ResourceTypes.EventHubsClusters,\n  ResourceTypes.ExpressRouteCircuits,\n  ResourceTypes.ExpressRoutePorts,\n  ResourceTypes.Firewall,\n  ResourceTypes.FrontDoor,\n  ResourceTypes.HDInsights,\n  ResourceTypes.IoTCentralApplications,\n  ResourceTypes.IoTHub,\n  ResourceTypes.IotSpaces,\n  ResourceTypes.KeyVault,\n  ResourceTypes.KubernetesArc,\n  ResourceTypes.KustoClusters,\n  ResourceTypes.Layer2IsolationDomain,\n  ResourceTypes.Layer3IsolationDomain,\n  ResourceTypes.LoadBalancers,\n  ResourceTypes.LogAnalytics,\n  ResourceTypes.LogicApps,\n  ResourceTypes.LogicIntegrationServiceEnvironment,\n  ResourceTypes.MachineLearningServiceWorkspace,\n  ResourceTypes.ManagedNetworkFabricNetworkDevices,\n  ResourceTypes.MariaDB,\n  ResourceTypes.ManagedHsms,\n  ResourceTypes.MediaServices,\n  ResourceTypes.MonitorAccounts,\n  ResourceTypes.MySQLFlexibleServers,\n  ResourceTypes.NatGateway,\n  ResourceTypes.NetAppCapacityPools,\n  ResourceTypes.NetworkInterfaces,\n  ResourceTypes.NGINXaaS,\n  ResourceTypes.NotificationHubs,\n  ResourceTypes.OracleExadataVMCluster,\n  ResourceTypes.OracleExadbVMCluster,\n  ResourceTypes.OrbitalL2Connections,\n  ResourceTypes.MobileNetworkSite,\n  ResourceTypes.RadioAccessNetwork,\n  ResourceTypes.PacketCoreControlPlane,\n  ResourceTypes.PacketCoreDataPlane,\n  ResourceTypes.PeeringServices,\n  ResourceTypes.PlayFabTitles,\n  ResourceTypes.PostgreSQLServers,\n  ResourceTypes.PostgreSQLServersV2,\n  ResourceTypes.PowerBIDedicatedCapacities,\n  ResourceTypes.PrivateEndpoint,\n  ResourceTypes.PrivateLinkService,\n  ResourceTypes.ProviderMonitorSettings,\n  ResourceTypes.ProvisionedClusters,\n  ResourceTypes.PublicIPAddresses,\n  ResourceTypes.PublicIPPrefixes,\n  ResourceTypes.RecoveryServicesVault,\n  ResourceTypes.RedisCaches,\n  ResourceTypes.RedisEnterprise,\n  ResourceTypes.Relay,\n  ResourceTypes.SearchServices,\n  ResourceTypes.ServerGroups,\n  ResourceTypes.ServiceBus,\n  ResourceTypes.ServiceFabricMesh,\n  ResourceTypes.SignalRService,\n  ResourceTypes.SignalRServiceWebPubSub,\n  ResourceTypes.Solutions,\n  ResourceTypes.SqlManaged,\n  ResourceTypes.SqlServersDatabases,\n  ResourceTypes.SqlServersElasticPools,\n  ResourceTypes.SqlServersElasticJobAgents,\n  ResourceTypes.StaticSites,\n  ResourceTypes.Storage,\n  ResourceTypes.StorageAppliance,\n  ResourceTypes.StorageCaches,\n  ResourceTypes.StorageClassic,\n  ResourceTypes.StorageMover,\n  ResourceTypes.StorageSync,\n  ResourceTypes.StreamAnalyticsJobs,\n  ResourceTypes.SynapseWorkspace,\n  ResourceTypes.TimeseriesInsightsEnvironments,\n  ResourceTypes.TrafficManagerProfiles,\n  ResourceTypes.VirtualMachines,\n  ResourceTypes.VirtualMachinesScaleSets,\n  ResourceTypes.VirtualNetworkGateWays,\n  ResourceTypes.WebsitesSlots,\n  ResourceTypes.AutoscaleSettings,\n  ResourceTypes.AzureAD,\n  ResourceTypes.AzsResourceMonitor,\n  ResourceTypes.ConnectionMonitor,\n  ResourceTypes.ContainerApps,\n  ResourceTypes.CustomerInsights,\n  ResourceTypes.ExpressRouteGateways,\n  ResourceTypes.FabricLocations,\n  ResourceTypes.NetworkVirtualAppliances,\n  ResourceTypes.NetworkWatcher,\n  ResourceTypes.PointToSiteVPN,\n  ResourceTypes.PostgreSQLFlexibleServers,\n  ResourceTypes.VPNGateways,\n  ResourceTypes.VirtualHubs,\n  ResourceTypes.WorkerPools,\n  ResourceTypes.ManagedLustre,\n  ResourceTypes.Grafana,\n  ResourceTypes.ContactProfiles,\n  ResourceTypes.Spacecrafts\n];\n\nexport { MetricsSupportedTypes };\n//# sourceMappingURL=MetricsResourceTypes.js.map\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/configuration/AlertingSettingsOverhaul.tsx\nimport { cx } from '@emotion/css';\n\nimport { DataSourceJsonData, DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { ConfigSubSection } from '@grafana/plugin-ui';\nimport { config } from '@grafana/runtime';\nimport { InlineField, Switch, useTheme2 } from '@grafana/ui';\n\nimport { docsTip, overhaulStyles } from './ConfigEditor';\n\ninterface Props<T extends DataSourceJsonData>\n  extends Pick<DataSourcePluginOptionsEditorProps<T>, 'options' | 'onOptionsChange'> {}\n\ninterface AlertingConfig extends DataSourceJsonData {\n  manageAlerts?: boolean;\n}\n\nexport function AlertingSettingsOverhaul<T extends AlertingConfig>({\n  options,\n  onOptionsChange,\n}: Props<T>): JSX.Element {\n  const theme = useTheme2();\n  // imported GrafanaTheme2 from @grafana/data does not match type of same from @grafana/ui\n  // @ts-ignore\n  const styles = overhaulStyles(theme);\n\n  return (\n    <ConfigSubSection title=\"Alerting\" className={cx(styles.container, styles.alertingTop)}>\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineField\n              labelWidth={30}\n              label=\"Manage alerts via Alerting UI\"\n              disabled={options.readOnly}\n              tooltip={\n                <>\n                  Manage alert rules for this data source. To manage other alerting resources, add an Alertmanager data\n                  source. {docsTip()}\n                </>\n              }\n              interactive={true}\n              className={styles.switchField}\n            >\n              <Switch\n                value={options.jsonData.manageAlerts ?? config.defaultDatasourceManageAlertsUiToggle}\n                onChange={(event) =>\n                  onOptionsChange({\n                    ...options,\n                    jsonData: { ...options.jsonData, manageAlerts: event!.currentTarget.checked },\n                  })\n                }\n                id={selectors.components.DataSource.Prometheus.configPage.manageAlerts}\n              />\n            </InlineField>\n          </div>\n        </div>\n      </div>\n    </ConfigSubSection>\n  );\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/configuration/ExemplarSetting.tsx\nimport { useState } from 'react';\n\nimport { DataSourceInstanceSettings } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config, DataSourcePicker } from '@grafana/runtime';\nimport { Button, InlineField, Input, Switch, useTheme2 } from '@grafana/ui';\n\nimport { ExemplarTraceIdDestination } from '../types';\n\nimport { docsTip, overhaulStyles, PROM_CONFIG_LABEL_WIDTH } from './ConfigEditor';\n\ntype Props = {\n  value: ExemplarTraceIdDestination;\n  onChange: (value: ExemplarTraceIdDestination) => void;\n  onDelete: () => void;\n  disabled?: boolean;\n};\n\nexport function ExemplarSetting({ value, onChange, onDelete, disabled }: Props) {\n  const [isInternalLink, setIsInternalLink] = useState(Boolean(value.datasourceUid));\n\n  const theme = useTheme2();\n  const styles = overhaulStyles(theme);\n\n  return (\n    <div className=\"gf-form-group\">\n      <InlineField\n        label=\"Internal link\"\n        labelWidth={PROM_CONFIG_LABEL_WIDTH}\n        disabled={disabled}\n        tooltip={\n          <>\n            Enable this option if you have an internal link. When enabled, this reveals the data source selector. Select\n            the backend tracing data store for your exemplar data. {docsTip()}\n          </>\n        }\n        interactive={true}\n        className={styles.switchField}\n      >\n        <>\n          <Switch\n            value={isInternalLink}\n            data-testid={selectors.components.DataSource.Prometheus.configPage.internalLinkSwitch}\n            onChange={(ev) => setIsInternalLink(ev.currentTarget.checked)}\n          />\n        </>\n      </InlineField>\n\n      {isInternalLink ? (\n        <InlineField\n          label=\"Data source\"\n          labelWidth={PROM_CONFIG_LABEL_WIDTH}\n          tooltip={<>The data source the exemplar is going to navigate to. {docsTip()}</>}\n          disabled={disabled}\n          interactive={true}\n        >\n          <DataSourcePicker\n            filter={\n              config.featureToggles.azureMonitorPrometheusExemplars\n                ? undefined\n                : (ds) => ds.type !== 'grafana-azure-monitor-datasource'\n            }\n            tracing={true}\n            current={value.datasourceUid}\n            noDefault={true}\n            width={40}\n            onChange={(ds: DataSourceInstanceSettings) =>\n              onChange({\n                ...value,\n                datasourceUid: ds.uid,\n                url: undefined,\n              })\n            }\n          />\n        </InlineField>\n      ) : (\n        <InlineField\n          label=\"URL\"\n          labelWidth={PROM_CONFIG_LABEL_WIDTH}\n          tooltip={<>The URL of the trace backend the user would go to see its trace. {docsTip()}</>}\n          disabled={disabled}\n          interactive={true}\n        >\n          <Input\n            placeholder=\"https://example.com/${__value.raw}\"\n            spellCheck={false}\n            width={40}\n            value={value.url}\n            onChange={(event) =>\n              onChange({\n                ...value,\n                datasourceUid: undefined,\n                url: event.currentTarget.value,\n              })\n            }\n          />\n        </InlineField>\n      )}\n\n      <InlineField\n        label=\"URL Label\"\n        labelWidth={PROM_CONFIG_LABEL_WIDTH}\n        tooltip={<>Use to override the button label on the exemplar traceID field. {docsTip()}</>}\n        disabled={disabled}\n        interactive={true}\n      >\n        <Input\n          placeholder=\"Go to example.com\"\n          spellCheck={false}\n          width={40}\n          value={value.urlDisplayLabel}\n          onChange={(event) =>\n            onChange({\n              ...value,\n              urlDisplayLabel: event.currentTarget.value,\n            })\n          }\n        />\n      </InlineField>\n      <InlineField\n        label=\"Label name\"\n        labelWidth={PROM_CONFIG_LABEL_WIDTH}\n        tooltip={<>The name of the field in the labels object that should be used to get the traceID. {docsTip()}</>}\n        disabled={disabled}\n        interactive={true}\n      >\n        <Input\n          placeholder=\"traceID\"\n          spellCheck={false}\n          width={40}\n          value={value.name}\n          onChange={(event) =>\n            onChange({\n              ...value,\n              name: event.currentTarget.value,\n            })\n          }\n        />\n      </InlineField>\n      {!disabled && (\n        <InlineField label=\"Remove exemplar link\" labelWidth={PROM_CONFIG_LABEL_WIDTH} disabled={disabled}>\n          <Button\n            variant=\"destructive\"\n            title=\"Remove exemplar link\"\n            icon=\"times\"\n            onClick={(event) => {\n              event.preventDefault();\n              onDelete();\n            }}\n          />\n        </InlineField>\n      )}\n    </div>\n  );\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/configuration/ExemplarsSettings.tsx\nimport { css } from '@emotion/css';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { ConfigSubSection } from '@grafana/plugin-ui';\nimport { Button, useTheme2 } from '@grafana/ui';\n\nimport { ExemplarTraceIdDestination } from '../types';\n\nimport { overhaulStyles } from './ConfigEditor';\nimport { ExemplarSetting } from './ExemplarSetting';\n\ntype Props = {\n  options?: ExemplarTraceIdDestination[];\n  onChange: (value: ExemplarTraceIdDestination[]) => void;\n  disabled?: boolean;\n};\n\nexport function ExemplarsSettings({ options, onChange, disabled }: Props) {\n  const theme = useTheme2();\n  const styles = overhaulStyles(theme);\n  return (\n    <div className={styles.sectionBottomPadding}>\n      <ConfigSubSection title=\"Exemplars\" className={styles.container}>\n        {options &&\n          options.map((option, index) => {\n            return (\n              <ExemplarSetting\n                key={index}\n                value={option}\n                onChange={(newField) => {\n                  const newOptions = [...options];\n                  newOptions.splice(index, 1, newField);\n                  onChange(newOptions);\n                }}\n                onDelete={() => {\n                  const newOptions = [...options];\n                  newOptions.splice(index, 1);\n                  onChange(newOptions);\n                }}\n                disabled={disabled}\n              />\n            );\n          })}\n\n        {!disabled && (\n          <Button\n            variant=\"secondary\"\n            data-testid={selectors.components.DataSource.Prometheus.configPage.exemplarsAddButton}\n            className={css({\n              marginBottom: '10px',\n            })}\n            icon=\"plus\"\n            onClick={(event) => {\n              event.preventDefault();\n              const newOptions = [...(options || []), { name: 'traceID' }];\n              onChange(newOptions);\n            }}\n          >\n            Add\n          </Button>\n        )}\n        {disabled && !options && <i>No exemplars configurations</i>}\n      </ConfigSubSection>\n    </div>\n  );\n}\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/configuration/PromFlavorVersions.ts\nexport const PromFlavorVersions: { [index: string]: Array<{ value?: string; label: string }> } = {\n  Prometheus: [\n    { value: undefined, label: 'Please select' },\n    { value: '2.0.0', label: '< 2.14.x' },\n    { value: '2.14.0', label: '2.14.x' },\n    { value: '2.15.0', label: '2.15.x' },\n    { value: '2.16.0', label: '2.16.x' },\n    { value: '2.17.0', label: '2.17.x' },\n    { value: '2.18.0', label: '2.18.x' },\n    { value: '2.19.0', label: '2.19.x' },\n    { value: '2.20.0', label: '2.20.x' },\n    { value: '2.21.0', label: '2.21.x' },\n    { value: '2.22.0', label: '2.22.x' },\n    { value: '2.23.0', label: '2.23.x' },\n    { value: '2.24.0', label: '2.24.x' },\n    { value: '2.25.0', label: '2.25.x' },\n    { value: '2.26.0', label: '2.26.x' },\n    { value: '2.27.0', label: '2.27.x' },\n    { value: '2.28.0', label: '2.28.x' },\n    { value: '2.29.0', label: '2.29.x' },\n    { value: '2.30.0', label: '2.30.x' },\n    { value: '2.31.0', label: '2.31.x' },\n    { value: '2.32.0', label: '2.32.x' },\n    { value: '2.33.0', label: '2.33.x' },\n    { value: '2.34.0', label: '2.34.x' },\n    { value: '2.35.0', label: '2.35.x' },\n    { value: '2.36.0', label: '2.36.x' },\n    { value: '2.37.0', label: '2.37.x' },\n    { value: '2.38.0', label: '2.38.x' },\n    { value: '2.39.0', label: '2.39.x' },\n    { value: '2.40.0', label: '2.40.x' },\n    { value: '2.41.0', label: '2.41.x' },\n    { value: '2.42.0', label: '2.42.x' },\n    { value: '2.43.0', label: '2.43.x' },\n    { value: '2.44.0', label: '2.44.x' },\n    { value: '2.45.0', label: '2.45.x' },\n    { value: '2.46.0', label: '2.46.x' },\n    { value: '2.47.0', label: '2.47.x' },\n    { value: '2.48.0', label: '2.48.x' },\n    { value: '2.49.0', label: '2.49.x' },\n    { value: '2.50.0', label: '2.50.x' },\n\n    // This value will be returned for future versions of prometheus until we add new entries to this object\n    { value: '2.50.1', label: '> 2.50.x' },\n  ],\n  Mimir: [\n    { value: undefined, label: 'Please select' },\n    { value: '2.0.0', label: '2.0.x' },\n    { value: '2.1.0', label: '2.1.x' },\n    { value: '2.2.0', label: '2.2.x' },\n    { value: '2.3.0', label: '2.3.x' },\n    { value: '2.4.0', label: '2.4.x' },\n    { value: '2.5.0', label: '2.5.x' },\n    { value: '2.6.0', label: '2.6.x' },\n    { value: '2.7.0', label: '2.7.x' },\n    { value: '2.8.0', label: '2.8.x' },\n    { value: '2.9.0', label: '2.9.x' },\n    { value: '2.9.1', label: '> 2.9.x' },\n  ],\n  Thanos: [\n    { value: undefined, label: 'Please select' },\n    { value: '0.0.0', label: '< 0.16.x' },\n    { value: '0.16.0', label: '0.16.x' },\n    { value: '0.17.0', label: '0.17.x' },\n    { value: '0.18.0', label: '0.18.x' },\n    { value: '0.19.0', label: '0.19.x' },\n    { value: '0.20.0', label: '0.20.x' },\n    { value: '0.21.0', label: '0.21.x' },\n    { value: '0.22.0', label: '0.22.x' },\n    { value: '0.23.0', label: '0.23.x' },\n    { value: '0.24.0', label: '0.24.x' },\n    { value: '0.25.0', label: '0.25.x' },\n    { value: '0.26.0', label: '0.26.x' },\n    { value: '0.27.0', label: '0.27.x' },\n    { value: '0.28.0', label: '0.28.x' },\n    { value: '0.29.0', label: '0.29.x' },\n    { value: '0.30.0', label: '0.30.x' },\n    { value: '0.31.0', label: '0.31.x' },\n    { value: '0.31.1', label: '> 0.31.x' },\n  ],\n  Cortex: [\n    { value: undefined, label: 'Please select' },\n    { value: '0.0.0', label: '< 1.0.0' },\n    { value: '1.0.0', label: '1.0.0' },\n    { value: '1.1.0', label: '1.1.x' },\n    { value: '1.2.0', label: '1.2.x' },\n    { value: '1.3.0', label: '1.3.x' },\n    { value: '1.4.0', label: '1.4.x' },\n    { value: '1.5.0', label: '1.5.x' },\n    { value: '1.6.0', label: '1.6.x' },\n    { value: '1.7.0', label: '1.7.x' },\n    { value: '1.8.0', label: '1.8.x' },\n    { value: '1.9.0', label: '1.9.x' },\n    { value: '1.10.0', label: '1.10.x' },\n    { value: '1.11.0', label: '1.11.x' },\n    { value: '1.13.0', label: '1.13.x' },\n    { value: '1.14.0', label: '> 1.13.x' },\n  ],\n};\n","// Core Grafana history https://github.com/grafana/grafana/blob/v11.0.0-preview/public/app/plugins/datasource/prometheus/configuration/PromSettings.tsx\nimport { SyntheticEvent, useState } from 'react';\n\nimport {\n  DataSourcePluginOptionsEditorProps,\n  onUpdateDatasourceJsonDataOptionChecked,\n  SelectableValue,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { ConfigSubSection } from '@grafana/plugin-ui';\nimport { config } from '@grafana/runtime';\nimport { InlineField, Input, Select, Switch, useTheme2 } from '@grafana/ui';\n\nimport { SUGGESTIONS_LIMIT } from '../language_provider';\nimport { QueryEditorMode } from '../querybuilder/shared/types';\nimport { defaultPrometheusQueryOverlapWindow } from '../querycache/QueryCache';\nimport { PromApplication, PrometheusCacheLevel, PromOptions } from '../types';\n\nimport { docsTip, overhaulStyles, PROM_CONFIG_LABEL_WIDTH, validateInput } from './ConfigEditor';\nimport { ExemplarsSettings } from './ExemplarsSettings';\nimport { PromFlavorVersions } from './PromFlavorVersions';\n\nconst httpOptions = [\n  { value: 'POST', label: 'POST' },\n  { value: 'GET', label: 'GET' },\n];\n\nconst editorOptions = [\n  { value: QueryEditorMode.Builder, label: 'Builder' },\n  { value: QueryEditorMode.Code, label: 'Code' },\n];\n\nconst cacheValueOptions = [\n  { value: PrometheusCacheLevel.Low, label: 'Low' },\n  { value: PrometheusCacheLevel.Medium, label: 'Medium' },\n  { value: PrometheusCacheLevel.High, label: 'High' },\n  { value: PrometheusCacheLevel.None, label: 'None' },\n];\n\ntype PrometheusSelectItemsType = Array<{ value: PromApplication; label: PromApplication }>;\n\nconst prometheusFlavorSelectItems: PrometheusSelectItemsType = [\n  { value: PromApplication.Prometheus, label: PromApplication.Prometheus },\n  { value: PromApplication.Cortex, label: PromApplication.Cortex },\n  { value: PromApplication.Mimir, label: PromApplication.Mimir },\n  { value: PromApplication.Thanos, label: PromApplication.Thanos },\n];\n\ntype Props = Pick<DataSourcePluginOptionsEditorProps<PromOptions>, 'options' | 'onOptionsChange'>;\n\n// single duration input\nexport const DURATION_REGEX = /^$|^\\d+(ms|[Mwdhmsy])$/;\n\n// multiple duration input\nexport const MULTIPLE_DURATION_REGEX = /(\\d+)(.+)/;\n\nexport const NON_NEGATIVE_INTEGER_REGEX = /^(0|[1-9]\\d*)(\\.\\d+)?(e\\+?\\d+)?$/; // non-negative integers, including scientific notation\n\nconst durationError = 'Value is not valid, you can use number with time unit specifier: y, M, w, d, h, m, s';\nexport const countError = 'Value is not valid, you can use non-negative integers, including scientific notation';\n\nexport const PromSettings = (props: Props) => {\n  const { options, onOptionsChange } = props;\n\n  // We are explicitly adding httpMethod so, it is correctly displayed in dropdown.\n  // This way, it is more predictable for users.\n  if (!options.jsonData.httpMethod) {\n    options.jsonData.httpMethod = 'POST';\n  }\n\n  const theme = useTheme2();\n  const styles = overhaulStyles(theme);\n\n  type ValidDuration = {\n    timeInterval: string;\n    queryTimeout: string;\n    incrementalQueryOverlapWindow: string;\n  };\n\n  const [validDuration, updateValidDuration] = useState<ValidDuration>({\n    timeInterval: '',\n    queryTimeout: '',\n    incrementalQueryOverlapWindow: '',\n  });\n\n  type ValidCount = {\n    codeModeMetricNamesSuggestionLimit: string;\n  };\n\n  const [validCount, updateValidCount] = useState<ValidCount>({\n    codeModeMetricNamesSuggestionLimit: '',\n  });\n\n  return (\n    <>\n      <ConfigSubSection title=\"Interval behaviour\" className={styles.container}>\n        <div className=\"gf-form-group\">\n          {/* Scrape interval */}\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineField\n                label=\"Scrape interval\"\n                labelWidth={PROM_CONFIG_LABEL_WIDTH}\n                tooltip={\n                  <>\n                    This interval is how frequently Prometheus scrapes targets. Set this to the typical scrape and\n                    evaluation interval configured in your Prometheus config file. If you set this to a greater value\n                    than your Prometheus config file interval, Grafana will evaluate the data according to this interval\n                    and you will see less data points. Defaults to 15s. {docsTip()}\n                  </>\n                }\n                interactive={true}\n                disabled={options.readOnly}\n              >\n                <>\n                  <Input\n                    className=\"width-20\"\n                    value={options.jsonData.timeInterval}\n                    spellCheck={false}\n                    placeholder=\"15s\"\n                    onChange={onChangeHandler('timeInterval', options, onOptionsChange)}\n                    onBlur={(e) =>\n                      updateValidDuration({\n                        ...validDuration,\n                        timeInterval: e.currentTarget.value,\n                      })\n                    }\n                    data-testid={selectors.components.DataSource.Prometheus.configPage.scrapeInterval}\n                  />\n                  {validateInput(validDuration.timeInterval, DURATION_REGEX, durationError)}\n                </>\n              </InlineField>\n            </div>\n          </div>\n          {/* Query Timeout */}\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineField\n                label=\"Query timeout\"\n                labelWidth={PROM_CONFIG_LABEL_WIDTH}\n                tooltip={<>Set the Prometheus query timeout. {docsTip()}</>}\n                interactive={true}\n                disabled={options.readOnly}\n              >\n                <>\n                  <Input\n                    className=\"width-20\"\n                    value={options.jsonData.queryTimeout}\n                    onChange={onChangeHandler('queryTimeout', options, onOptionsChange)}\n                    spellCheck={false}\n                    placeholder=\"60s\"\n                    onBlur={(e) =>\n                      updateValidDuration({\n                        ...validDuration,\n                        queryTimeout: e.currentTarget.value,\n                      })\n                    }\n                    data-testid={selectors.components.DataSource.Prometheus.configPage.queryTimeout}\n                  />\n                  {validateInput(validDuration.queryTimeout, DURATION_REGEX, durationError)}\n                </>\n              </InlineField>\n            </div>\n          </div>\n        </div>\n      </ConfigSubSection>\n\n      <ConfigSubSection title=\"Query editor\" className={styles.container}>\n        <div className=\"gf-form-group\">\n          <div className=\"gf-form\">\n            <InlineField\n              label=\"Default editor\"\n              labelWidth={PROM_CONFIG_LABEL_WIDTH}\n              tooltip={<>Set default editor option for all users of this data source. {docsTip()}</>}\n              interactive={true}\n              disabled={options.readOnly}\n            >\n              <Select\n                aria-label={`Default Editor (Code or Builder)`}\n                options={editorOptions}\n                value={\n                  editorOptions.find((o) => o.value === options.jsonData.defaultEditor) ??\n                  editorOptions.find((o) => o.value === QueryEditorMode.Builder)\n                }\n                onChange={onChangeHandler('defaultEditor', options, onOptionsChange)}\n                width={40}\n                data-testid={selectors.components.DataSource.Prometheus.configPage.defaultEditor}\n              />\n            </InlineField>\n          </div>\n          <div className=\"gf-form\">\n            <InlineField\n              labelWidth={PROM_CONFIG_LABEL_WIDTH}\n              label=\"Disable metrics lookup\"\n              tooltip={\n                <>\n                  Checking this option will disable the metrics chooser and metric/label support in the query\n                  field&apos;s autocomplete. This helps if you have performance issues with bigger Prometheus instances.{' '}\n                  {docsTip()}\n                </>\n              }\n              interactive={true}\n              disabled={options.readOnly}\n              className={styles.switchField}\n            >\n              <Switch\n                value={options.jsonData.disableMetricsLookup ?? false}\n                onChange={onUpdateDatasourceJsonDataOptionChecked(props, 'disableMetricsLookup')}\n                id={selectors.components.DataSource.Prometheus.configPage.disableMetricLookup}\n              />\n            </InlineField>\n          </div>\n        </div>\n      </ConfigSubSection>\n\n      <ConfigSubSection title=\"Performance\" className={styles.container}>\n        {!options.jsonData.prometheusType && !options.jsonData.prometheusVersion && options.readOnly && (\n          <div className={styles.versionMargin}>\n            For more information on configuring prometheus type and version in data sources, see the{' '}\n            <a\n              className={styles.textUnderline}\n              href=\"https://grafana.com/docs/grafana/latest/administration/provisioning/\"\n            >\n              provisioning documentation\n            </a>\n            .\n          </div>\n        )}\n        <div className=\"gf-form-group\">\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineField\n                label=\"Prometheus type\"\n                labelWidth={PROM_CONFIG_LABEL_WIDTH}\n                tooltip={\n                  <>\n                    {/* , and attempt to detect the version */}\n                    Set this to the type of your prometheus database, e.g. Prometheus, Cortex, Mimir or Thanos. Changing\n                    this field will save your current settings. Certain types of Prometheus supports or does not support\n                    various APIs. For example, some types support regex matching for label queries to improve\n                    performance. Some types have an API for metadata. If you set this incorrectly you may experience odd\n                    behavior when querying metrics and labels. Please check your Prometheus documentation to ensure you\n                    enter the correct type. {docsTip()}\n                  </>\n                }\n                interactive={true}\n                disabled={options.readOnly}\n              >\n                <Select\n                  aria-label=\"Prometheus type\"\n                  options={prometheusFlavorSelectItems}\n                  value={prometheusFlavorSelectItems.find((o) => o.value === options.jsonData.prometheusType)}\n                  onChange={onChangeHandler('prometheusType', options, onOptionsChange)}\n                  width={40}\n                  data-testid={selectors.components.DataSource.Prometheus.configPage.prometheusType}\n                />\n              </InlineField>\n            </div>\n          </div>\n          <div className=\"gf-form-inline\">\n            {options.jsonData.prometheusType && (\n              <div className=\"gf-form\">\n                <InlineField\n                  label={`${options.jsonData.prometheusType} version`}\n                  labelWidth={PROM_CONFIG_LABEL_WIDTH}\n                  tooltip={\n                    <>\n                      Use this to set the version of your {options.jsonData.prometheusType} instance if it is not\n                      automatically configured. {docsTip()}\n                    </>\n                  }\n                  interactive={true}\n                  disabled={options.readOnly}\n                >\n                  <Select\n                    aria-label={`${options.jsonData.prometheusType} type`}\n                    options={PromFlavorVersions[options.jsonData.prometheusType]}\n                    value={PromFlavorVersions[options.jsonData.prometheusType]?.find(\n                      (o) => o.value === options.jsonData.prometheusVersion\n                    )}\n                    onChange={onChangeHandler('prometheusVersion', options, onOptionsChange)}\n                    width={40}\n                    data-testid={selectors.components.DataSource.Prometheus.configPage.prometheusVersion}\n                  />\n                </InlineField>\n              </div>\n            )}\n          </div>\n\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form max-width-30\">\n              <InlineField\n                label=\"Cache level\"\n                labelWidth={PROM_CONFIG_LABEL_WIDTH}\n                tooltip={\n                  <>\n                    Sets the browser caching level for editor queries. Higher cache settings are recommended for high\n                    cardinality data sources.\n                  </>\n                }\n                interactive={true}\n                disabled={options.readOnly}\n              >\n                <Select\n                  width={40}\n                  onChange={onChangeHandler('cacheLevel', options, onOptionsChange)}\n                  options={cacheValueOptions}\n                  value={\n                    cacheValueOptions.find((o) => o.value === options.jsonData.cacheLevel) ?? PrometheusCacheLevel.Low\n                  }\n                  data-testid={selectors.components.DataSource.Prometheus.configPage.cacheLevel}\n                />\n              </InlineField>\n            </div>\n          </div>\n\n          {config.featureToggles.prometheusCodeModeMetricNamesSearch && (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineField\n                  label=\"Metric names suggestion limit\"\n                  labelWidth={PROM_CONFIG_LABEL_WIDTH}\n                  tooltip={\n                    <>\n                      The maximum number of metric names that may appear as autocomplete suggestions in the query\n                      editor&apos;s Code mode.\n                    </>\n                  }\n                  interactive={true}\n                  disabled={options.readOnly}\n                >\n                  <>\n                    <Input\n                      className=\"width-20\"\n                      value={options.jsonData.codeModeMetricNamesSuggestionLimit}\n                      onChange={onChangeHandler('codeModeMetricNamesSuggestionLimit', options, onOptionsChange)}\n                      spellCheck={false}\n                      placeholder={SUGGESTIONS_LIMIT.toString()}\n                      onBlur={(e) =>\n                        updateValidCount({\n                          ...validCount,\n                          codeModeMetricNamesSuggestionLimit: e.currentTarget.value,\n                        })\n                      }\n                      data-testid={\n                        selectors.components.DataSource.Prometheus.configPage.codeModeMetricNamesSuggestionLimit\n                      }\n                    />\n                    {validateInput(\n                      validCount.codeModeMetricNamesSuggestionLimit,\n                      NON_NEGATIVE_INTEGER_REGEX,\n                      countError\n                    )}\n                  </>\n                </InlineField>\n              </div>\n            </div>\n          )}\n\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form max-width-30\">\n              <InlineField\n                label=\"Incremental querying (beta)\"\n                labelWidth={PROM_CONFIG_LABEL_WIDTH}\n                tooltip={\n                  <>\n                    This feature will change the default behavior of relative queries to always request fresh data from\n                    the prometheus instance, instead query results will be cached, and only new records are requested.\n                    Turn this on to decrease database and network load.\n                  </>\n                }\n                interactive={true}\n                className={styles.switchField}\n                disabled={options.readOnly}\n              >\n                <Switch\n                  value={options.jsonData.incrementalQuerying ?? false}\n                  onChange={onUpdateDatasourceJsonDataOptionChecked(props, 'incrementalQuerying')}\n                  id={selectors.components.DataSource.Prometheus.configPage.incrementalQuerying}\n                />\n              </InlineField>\n            </div>\n          </div>\n\n          <div className=\"gf-form-inline\">\n            {options.jsonData.incrementalQuerying && (\n              <InlineField\n                label=\"Query overlap window\"\n                labelWidth={PROM_CONFIG_LABEL_WIDTH}\n                tooltip={\n                  <>\n                    Set a duration like 10m or 120s or 0s. Default of 10 minutes. This duration will be added to the\n                    duration of each incremental request.\n                  </>\n                }\n                interactive={true}\n                disabled={options.readOnly}\n              >\n                <>\n                  <Input\n                    onBlur={(e) =>\n                      updateValidDuration({\n                        ...validDuration,\n                        incrementalQueryOverlapWindow: e.currentTarget.value,\n                      })\n                    }\n                    className=\"width-20\"\n                    value={options.jsonData.incrementalQueryOverlapWindow ?? defaultPrometheusQueryOverlapWindow}\n                    onChange={onChangeHandler('incrementalQueryOverlapWindow', options, onOptionsChange)}\n                    spellCheck={false}\n                    data-testid={selectors.components.DataSource.Prometheus.configPage.queryOverlapWindow}\n                  />\n                  {validateInput(validDuration.incrementalQueryOverlapWindow, MULTIPLE_DURATION_REGEX, durationError)}\n                </>\n              </InlineField>\n            )}\n          </div>\n\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form max-width-30\">\n              <InlineField\n                label=\"Disable recording rules (beta)\"\n                labelWidth={PROM_CONFIG_LABEL_WIDTH}\n                tooltip={<>This feature will disable recording rules Turn this on to improve dashboard performance</>}\n                interactive={true}\n                className={styles.switchField}\n                disabled={options.readOnly}\n              >\n                <Switch\n                  value={options.jsonData.disableRecordingRules ?? false}\n                  onChange={onUpdateDatasourceJsonDataOptionChecked(props, 'disableRecordingRules')}\n                  id={selectors.components.DataSource.Prometheus.configPage.disableRecordingRules}\n                />\n              </InlineField>\n            </div>\n          </div>\n        </div>\n      </ConfigSubSection>\n\n      <ConfigSubSection title=\"Other\" className={styles.container}>\n        <div className=\"gf-form-group\">\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form max-width-30\">\n              <InlineField\n                label=\"Custom query parameters\"\n                labelWidth={PROM_CONFIG_LABEL_WIDTH}\n                tooltip={\n                  <>\n                    Add custom parameters to the Prometheus query URL. For example timeout, partial_response, dedup, or\n                    max_source_resolution. Multiple parameters should be concatenated together with an ‘&’. {docsTip()}\n                  </>\n                }\n                interactive={true}\n                disabled={options.readOnly}\n              >\n                <Input\n                  className=\"width-20\"\n                  value={options.jsonData.customQueryParameters}\n                  onChange={onChangeHandler('customQueryParameters', options, onOptionsChange)}\n                  spellCheck={false}\n                  placeholder=\"Example: max_source_resolution=5m&timeout=10\"\n                  data-testid={selectors.components.DataSource.Prometheus.configPage.customQueryParameters}\n                />\n              </InlineField>\n            </div>\n          </div>\n          <div className=\"gf-form-inline\">\n            {/* HTTP Method */}\n            <div className=\"gf-form\">\n              <InlineField\n                labelWidth={PROM_CONFIG_LABEL_WIDTH}\n                tooltip={\n                  <>\n                    You can use either POST or GET HTTP method to query your Prometheus data source. POST is the\n                    recommended method as it allows bigger queries. Change this to GET if you have a Prometheus version\n                    older than 2.1 or if POST requests are restricted in your network. {docsTip()}\n                  </>\n                }\n                interactive={true}\n                label=\"HTTP method\"\n                disabled={options.readOnly}\n              >\n                <Select\n                  width={40}\n                  aria-label=\"Select HTTP method\"\n                  options={httpOptions}\n                  value={httpOptions.find((o) => o.value === options.jsonData.httpMethod)}\n                  onChange={onChangeHandler('httpMethod', options, onOptionsChange)}\n                  data-testid={selectors.components.DataSource.Prometheus.configPage.httpMethod}\n                />\n              </InlineField>\n            </div>\n          </div>\n          <InlineField\n            labelWidth={PROM_CONFIG_LABEL_WIDTH}\n            label=\"Use series endpoint\"\n            tooltip={\n              <>\n                Checking this option will favor the series endpoint with match[] parameter over the label values\n                endpoint with match[] parameter. While the label values endpoint is considered more performant, some\n                users may prefer the series because it has a POST method while the label values endpoint only has a GET\n                method. {docsTip()}\n              </>\n            }\n            interactive={true}\n            disabled={options.readOnly}\n            className={styles.switchField}\n          >\n            <Switch\n              value={options.jsonData.seriesEndpoint ?? false}\n              onChange={onUpdateDatasourceJsonDataOptionChecked(props, 'seriesEndpoint')}\n            />\n          </InlineField>\n        </div>\n      </ConfigSubSection>\n\n      <ExemplarsSettings\n        options={options.jsonData.exemplarTraceIdDestinations}\n        onChange={(exemplarOptions) =>\n          updateDatasourcePluginJsonDataOption(\n            { onOptionsChange, options },\n            'exemplarTraceIdDestinations',\n            exemplarOptions\n          )\n        }\n        disabled={options.readOnly}\n      />\n    </>\n  );\n};\n\nexport const getValueFromEventItem = (eventItem: SyntheticEvent<HTMLInputElement> | SelectableValue<string>) => {\n  if (!eventItem) {\n    return '';\n  }\n\n  if ('currentTarget' in eventItem) {\n    return eventItem.currentTarget.value;\n  }\n\n  return eventItem.value;\n};\n\nconst onChangeHandler =\n  (key: keyof PromOptions, options: Props['options'], onOptionsChange: Props['onOptionsChange']) =>\n  (eventItem: SyntheticEvent<HTMLInputElement> | SelectableValue<string>) => {\n    onOptionsChange({\n      ...options,\n      jsonData: {\n        ...options.jsonData,\n        [key]: getValueFromEventItem(eventItem),\n      },\n    });\n  };\n","import {\n  AzureCredentials,\n  AzureDataSourceJsonData,\n  AzureDataSourceSecureJsonData,\n  AzureDataSourceSettings,\n  getAzureClouds,\n  getDatasourceCredentials,\n  getDefaultAzureCloud,\n  updateDatasourceCredentials,\n} from '@grafana/azure-sdk';\nimport { DataSourceSettings, SelectableValue } from '@grafana/data';\nimport { PromOptions } from '@grafana/prometheus';\nimport { config } from '@grafana/runtime';\n\nexport function getAzureCloudOptions(): Array<SelectableValue<string>> {\n  const cloudInfo = getAzureClouds();\n\n  return cloudInfo.map((cloud) => ({\n    value: cloud.name,\n    label: cloud.displayName,\n  }));\n}\n\nexport function getDefaultCredentials(): AzureCredentials {\n  if (config.azure.managedIdentityEnabled) {\n    return { authType: 'msi' };\n  } else {\n    return { authType: 'clientsecret', azureCloud: getDefaultAzureCloud() };\n  }\n}\n\nexport function getCredentials(options: AzureDataSourceSettings): AzureCredentials {\n  const credentials = getDatasourceCredentials(options);\n  if (credentials) {\n    return credentials;\n  }\n\n  // If no credentials saved, then return empty credentials\n  // of type based on whether the managed identity enabled\n  return getDefaultCredentials();\n}\n\nexport function updateCredentials(\n  options: AzurePromDataSourceSettings,\n  credentials: AzureCredentials\n): AzurePromDataSourceSettings {\n  return updateDatasourceCredentials(options, credentials);\n}\n\nexport function setDefaultCredentials(options: AzurePromDataSourceSettings): Partial<AzurePromDataSourceSettings> {\n  return {\n    jsonData: {\n      ...options.jsonData,\n      azureCredentials: getDefaultCredentials(),\n    },\n  };\n}\n\nexport function resetCredentials(options: AzurePromDataSourceSettings): Partial<AzurePromDataSourceSettings> {\n  return {\n    jsonData: {\n      ...options.jsonData,\n      azureCredentials: undefined,\n      azureEndpointResourceId: undefined,\n    },\n  };\n}\n\nexport interface AzurePromDataSourceOptions extends PromOptions, AzureDataSourceJsonData {\n  azureEndpointResourceId?: string;\n}\n\nexport type AzurePromDataSourceSettings = DataSourceSettings<AzurePromDataSourceOptions, AzureDataSourceSecureJsonData>;\n","import { cx } from '@emotion/css';\nimport { ChangeEvent, useMemo } from 'react';\n\nimport { AzureAuthType, AzureCredentials } from '@grafana/azure-sdk';\nimport { SelectableValue } from '@grafana/data';\nimport { InlineFormLabel, Button, Select, Input } from '@grafana/ui';\n\nexport interface Props {\n  managedIdentityEnabled: boolean;\n  workloadIdentityEnabled: boolean;\n  credentials: AzureCredentials;\n  azureCloudOptions?: SelectableValue[];\n  onCredentialsChange: (updatedCredentials: AzureCredentials) => void;\n  getSubscriptions?: () => Promise<SelectableValue[]>;\n  disabled?: boolean;\n}\n\nexport const AzureCredentialsForm = (props: Props) => {\n  const {\n    credentials,\n    azureCloudOptions,\n    onCredentialsChange,\n    disabled,\n    managedIdentityEnabled,\n    workloadIdentityEnabled,\n  } = props;\n\n  const authTypeOptions = useMemo(() => {\n    let opts: Array<SelectableValue<AzureAuthType>> = [\n      {\n        value: 'clientsecret',\n        label: 'App Registration',\n      },\n    ];\n\n    if (managedIdentityEnabled) {\n      opts.push({\n        value: 'msi',\n        label: 'Managed Identity',\n      });\n    }\n\n    if (workloadIdentityEnabled) {\n      opts.push({\n        value: 'workloadidentity',\n        label: 'Workload Identity',\n      });\n    }\n    return opts;\n  }, [managedIdentityEnabled, workloadIdentityEnabled]);\n\n  const onAuthTypeChange = (selected: SelectableValue<AzureAuthType>) => {\n    const defaultAuthType = managedIdentityEnabled\n      ? 'msi'\n      : workloadIdentityEnabled\n        ? 'workloadidentity'\n        : 'clientsecret';\n    const updated: AzureCredentials = {\n      ...credentials,\n      authType: selected.value || defaultAuthType,\n    };\n    onCredentialsChange(updated);\n  };\n\n  const onAzureCloudChange = (selected: SelectableValue<string>) => {\n    if (credentials.authType === 'clientsecret') {\n      const updated: AzureCredentials = {\n        ...credentials,\n        azureCloud: selected.value,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onTenantIdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (credentials.authType === 'clientsecret') {\n      const updated: AzureCredentials = {\n        ...credentials,\n        tenantId: event.target.value,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientIdChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (credentials.authType === 'clientsecret') {\n      const updated: AzureCredentials = {\n        ...credentials,\n        clientId: event.target.value,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientSecretChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (credentials.authType === 'clientsecret') {\n      const updated: AzureCredentials = {\n        ...credentials,\n        clientSecret: event.target.value,\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  const onClientSecretReset = () => {\n    if (credentials.authType === 'clientsecret') {\n      const updated: AzureCredentials = {\n        ...credentials,\n        clientSecret: '',\n      };\n      onCredentialsChange(updated);\n    }\n  };\n\n  return (\n    <div className=\"gf-form-group\">\n      {authTypeOptions.length > 1 && (\n        <div className=\"gf-form-inline\">\n          <div className=\"gf-form\">\n            <InlineFormLabel className=\"width-12\" tooltip=\"Choose the type of authentication to Azure services\">\n              Authentication\n            </InlineFormLabel>\n            <Select\n              className=\"width-15\"\n              value={authTypeOptions.find((opt) => opt.value === credentials.authType)}\n              options={authTypeOptions}\n              onChange={onAuthTypeChange}\n              isDisabled={disabled}\n            />\n          </div>\n        </div>\n      )}\n      {credentials.authType === 'clientsecret' && (\n        <>\n          {azureCloudOptions && (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel className=\"width-12\" tooltip=\"Choose an Azure Cloud\">\n                  Azure Cloud\n                </InlineFormLabel>\n                <Select\n                  className=\"width-15\"\n                  value={azureCloudOptions.find((opt) => opt.value === credentials.azureCloud)}\n                  options={azureCloudOptions}\n                  onChange={onAzureCloudChange}\n                  isDisabled={disabled}\n                />\n              </div>\n            </div>\n          )}\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-12\">Directory (tenant) ID</InlineFormLabel>\n              <div className=\"width-15\">\n                <Input\n                  className={cx('width-20')}\n                  placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                  value={credentials.tenantId || ''}\n                  onChange={onTenantIdChange}\n                  disabled={disabled}\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"gf-form-inline\">\n            <div className=\"gf-form\">\n              <InlineFormLabel className=\"width-12\">Application (client) ID</InlineFormLabel>\n              <div className=\"width-15\">\n                <Input\n                  className={cx('width-20')}\n                  placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                  value={credentials.clientId || ''}\n                  onChange={onClientIdChange}\n                  disabled={disabled}\n                />\n              </div>\n            </div>\n          </div>\n          {typeof credentials.clientSecret === 'symbol' ? (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel htmlFor=\"azure-client-secret\" className=\"width-12\">\n                  Client Secret\n                </InlineFormLabel>\n                <Input id=\"azure-client-secret\" className={cx('width-20')} placeholder=\"configured\" disabled />\n              </div>\n              {!disabled && (\n                <div className=\"gf-form\">\n                  <div className={cx('max-width-20 gf-form-inline')}>\n                    <Button variant=\"secondary\" type=\"button\" onClick={onClientSecretReset}>\n                      reset\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </div>\n          ) : (\n            <div className=\"gf-form-inline\">\n              <div className=\"gf-form\">\n                <InlineFormLabel className=\"width-12\">Client Secret</InlineFormLabel>\n                <div className=\"width-15\">\n                  <Input\n                    className={cx('width-20')}\n                    placeholder=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n                    value={credentials.clientSecret || ''}\n                    onChange={onClientSecretChange}\n                    disabled={disabled}\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default AzureCredentialsForm;\n","import { cx } from '@emotion/css';\nimport { FormEvent, useMemo, useState } from 'react';\nimport { useEffectOnce } from 'react-use';\n\nimport { AzureCredentials } from '@grafana/azure-sdk';\nimport { config } from '@grafana/runtime';\nimport { InlineField, InlineFieldRow, InlineSwitch, Input } from '@grafana/ui';\nimport { HttpSettingsBaseProps } from '@grafana/ui/internal';\n\nimport { getAzureCloudOptions, getCredentials, updateCredentials } from './AzureCredentialsConfig';\nimport { AzureCredentialsForm } from './AzureCredentialsForm';\n\nexport const AzureAuthSettings = (props: HttpSettingsBaseProps) => {\n  const { dataSourceConfig, onChange } = props;\n\n  const [overrideAudienceAllowed] = useState<boolean>(!!config.featureToggles.prometheusAzureOverrideAudience);\n  const [overrideAudienceChecked, setOverrideAudienceChecked] = useState<boolean>(\n    !!dataSourceConfig.jsonData.azureEndpointResourceId\n  );\n\n  const credentials = useMemo(() => getCredentials(dataSourceConfig), [dataSourceConfig]);\n\n  const onCredentialsChange = (credentials: AzureCredentials): void => {\n    onChange(updateCredentials(dataSourceConfig, credentials));\n  };\n\n  const onOverrideAudienceChange = (ev: FormEvent<HTMLInputElement>): void => {\n    setOverrideAudienceChecked(ev.currentTarget.checked);\n    if (!ev.currentTarget.checked) {\n      onChange({\n        ...dataSourceConfig,\n        jsonData: { ...dataSourceConfig.jsonData, azureEndpointResourceId: undefined },\n      });\n    }\n  };\n\n  const onResourceIdChange = (ev: FormEvent<HTMLInputElement>): void => {\n    if (overrideAudienceChecked) {\n      onChange({\n        ...dataSourceConfig,\n        jsonData: { ...dataSourceConfig.jsonData, azureEndpointResourceId: ev.currentTarget.value },\n      });\n    }\n  };\n\n  // The auth type needs to be set on the first load of the data source\n  useEffectOnce(() => {\n    if (!dataSourceConfig.jsonData.authType) {\n      onCredentialsChange(credentials);\n    }\n  });\n\n  return (\n    <>\n      <h6>Azure authentication</h6>\n      <AzureCredentialsForm\n        managedIdentityEnabled={config.azure.managedIdentityEnabled}\n        workloadIdentityEnabled={config.azure.workloadIdentityEnabled}\n        credentials={credentials}\n        azureCloudOptions={getAzureCloudOptions()}\n        onCredentialsChange={onCredentialsChange}\n        disabled={dataSourceConfig.readOnly}\n      />\n      {overrideAudienceAllowed && (\n        <>\n          <h6>Azure configuration</h6>\n          <div className=\"gf-form-group\">\n            <InlineFieldRow>\n              <InlineField labelWidth={24} label=\"Override AAD audience\" disabled={dataSourceConfig.readOnly}>\n                <InlineSwitch value={overrideAudienceChecked} onChange={onOverrideAudienceChange} />\n              </InlineField>\n            </InlineFieldRow>\n            {overrideAudienceChecked && (\n              <InlineFieldRow>\n                <InlineField labelWidth={24} label=\"Resource ID\" disabled={dataSourceConfig.readOnly}>\n                  <Input\n                    className={cx('width-20')}\n                    value={dataSourceConfig.jsonData.azureEndpointResourceId || ''}\n                    onChange={onResourceIdChange}\n                  />\n                </InlineField>\n              </InlineFieldRow>\n            )}\n          </div>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default AzureAuthSettings;\n","import { ReactElement, useState } from 'react';\nimport * as React from 'react';\n\nimport { Auth, ConnectionSettings, convertLegacyAuthProps, AuthMethod } from '@grafana/plugin-ui';\nimport { docsTip, overhaulStyles } from '@grafana/prometheus';\nimport { Alert, SecureSocksProxySettings, useTheme2 } from '@grafana/ui';\n// NEED TO EXPORT THIS FROM GRAFANA/UI FOR EXTERNAL DS\nimport { AzureAuthSettings } from '@grafana/ui/internal';\n\nimport { AzurePromDataSourceSettings } from './AzureCredentialsConfig';\n\ntype Props = {\n  options: AzurePromDataSourceSettings;\n  onOptionsChange: (options: AzurePromDataSourceSettings) => void;\n  azureAuthSettings: AzureAuthSettings;\n  sigV4AuthToggleEnabled: boolean | undefined;\n  renderSigV4Editor: React.ReactNode;\n  secureSocksDSProxyEnabled: boolean;\n};\n\n// these are not available yet in grafana\nexport type CustomMethodId = `custom-${string}`;\n\nexport type CustomMethod = {\n  id: CustomMethodId;\n  label: string;\n  description: string;\n  component: ReactElement;\n};\n\nexport const DataSourcehttpSettingsOverhaul = (props: Props) => {\n  const {\n    options,\n    onOptionsChange,\n    azureAuthSettings,\n    sigV4AuthToggleEnabled,\n    renderSigV4Editor,\n    secureSocksDSProxyEnabled,\n  } = props;\n\n  const newAuthProps = convertLegacyAuthProps({\n    config: options,\n    onChange: onOptionsChange,\n  });\n\n  const theme = useTheme2();\n  const styles = overhaulStyles(theme);\n\n  // for custom auth methods sigV4 and azure auth\n  let customMethods: CustomMethod[] = [];\n\n  const [sigV4Selected, setSigV4Selected] = useState<boolean>(options.jsonData.sigV4Auth || false);\n\n  const sigV4Id = 'custom-sigV4Id';\n\n  const sigV4Option: CustomMethod = {\n    id: sigV4Id,\n    label: 'SigV4 auth',\n    description: 'This is SigV4 auth description',\n    component: <>{renderSigV4Editor}</>,\n  };\n\n  if (sigV4AuthToggleEnabled) {\n    customMethods.push(sigV4Option);\n  }\n\n  const azureAuthEnabled: boolean =\n    (azureAuthSettings?.azureAuthSupported && azureAuthSettings.getAzureAuthEnabled(options)) || false;\n\n  const [azureAuthSelected, setAzureAuthSelected] = useState<boolean>(azureAuthEnabled);\n\n  const azureAuthId = 'custom-azureAuthId';\n\n  const azureAuthOption: CustomMethod = {\n    id: azureAuthId,\n    label: 'Azure auth',\n    description: 'Authenticate with Azure',\n    component: (\n      <>\n        {azureAuthSettings.azureSettingsUI && (\n          <azureAuthSettings.azureSettingsUI dataSourceConfig={options} onChange={onOptionsChange} />\n        )}\n      </>\n    ),\n  };\n\n  // allow the option to show in the dropdown\n  if (azureAuthSettings?.azureAuthSupported) {\n    customMethods.push(azureAuthOption);\n  }\n\n  function returnSelectedMethod() {\n    if (sigV4Selected) {\n      return sigV4Id;\n    }\n\n    if (azureAuthSelected) {\n      return azureAuthId;\n    }\n\n    return newAuthProps.selectedMethod;\n  }\n\n  // Do we need this switch anymore? Update the language.\n  let urlTooltip;\n  switch (options.access) {\n    case 'direct':\n      urlTooltip = (\n        <>\n          Your access method is <em>Browser</em>, this means the URL needs to be accessible from the browser.\n          {docsTip()}\n        </>\n      );\n      break;\n    case 'proxy':\n      urlTooltip = (\n        <>\n          Your access method is <em>Server</em>, this means the URL needs to be accessible from the grafana\n          backend/server.\n          {docsTip()}\n        </>\n      );\n      break;\n    default:\n      urlTooltip = <>Specify a complete HTTP URL (for example http://your_server:8080) {docsTip()}</>;\n  }\n\n  return (\n    <>\n      <ConnectionSettings\n        urlPlaceholder=\"http://localhost:9090\"\n        config={options}\n        onChange={onOptionsChange}\n        urlLabel=\"Prometheus server URL\"\n        urlTooltip={urlTooltip}\n      />\n      <hr className={`${styles.hrTopSpace} ${styles.hrBottomSpace}`} />\n      {sigV4Selected && (\n        <Alert title=\"Deprecation Notice\" severity=\"warning\">\n          The SigV4 authentication in the core Prometheus data source is deprecated. Please use the Amazon Managed\n          Service for Prometheus data source to authenticate with SigV4.\n        </Alert>\n      )}\n      <Auth\n        {...newAuthProps}\n        customMethods={customMethods}\n        onAuthMethodSelect={(method) => {\n          // sigV4Id\n          if (sigV4AuthToggleEnabled) {\n            setSigV4Selected(method === sigV4Id);\n          }\n\n          // Azure\n          if (azureAuthSettings?.azureAuthSupported) {\n            setAzureAuthSelected(method === azureAuthId);\n            azureAuthSettings.setAzureAuthEnabled(options, method === azureAuthId);\n          }\n\n          onOptionsChange({\n            ...options,\n            basicAuth: method === AuthMethod.BasicAuth,\n            withCredentials: method === AuthMethod.CrossSiteCredentials,\n            jsonData: {\n              ...options.jsonData,\n              azureCredentials: method === azureAuthId ? options.jsonData.azureCredentials : undefined,\n              sigV4Auth: method === sigV4Id,\n              oauthPassThru: method === AuthMethod.OAuthForward,\n            },\n          });\n        }}\n        // If your method is selected pass its id to `selectedMethod`,\n        // otherwise pass the id from converted legacy data\n        selectedMethod={returnSelectedMethod()}\n      />\n      <div className={styles.sectionBottomPadding} />\n      {secureSocksDSProxyEnabled && (\n        <>\n          <SecureSocksProxySettings options={options} onOptionsChange={onOptionsChange} />\n          <div className={styles.sectionBottomPadding} />\n        </>\n      )}\n    </>\n  );\n};\n","import { css } from '@emotion/css';\n\nimport { SIGV4ConnectionConfig } from '@grafana/aws-sdk';\nimport { hasCredentials } from '@grafana/azure-sdk';\nimport { DataSourcePluginOptionsEditorProps, GrafanaTheme2 } from '@grafana/data';\nimport { AdvancedHttpSettings, ConfigSection, DataSourceDescription } from '@grafana/plugin-ui';\nimport { AlertingSettingsOverhaul, PromOptions, PromSettings } from '@grafana/prometheus';\nimport { config } from '@grafana/runtime';\nimport { Alert, FieldValidationMessage, useTheme2 } from '@grafana/ui';\n\nimport { AzureAuthSettings } from './AzureAuthSettings';\nimport { AzurePromDataSourceSettings, setDefaultCredentials, resetCredentials } from './AzureCredentialsConfig';\nimport { DataSourcehttpSettingsOverhaul } from './DataSourceHttpSettingsOverhaulPackage';\n\nexport const PROM_CONFIG_LABEL_WIDTH = 30;\n\nexport type Props = DataSourcePluginOptionsEditorProps<PromOptions>;\n\nexport const ConfigEditor = (props: Props) => {\n  const { options, onOptionsChange } = props;\n\n  const azureAuthSettings = {\n    azureAuthSupported: config.azureAuthEnabled,\n    getAzureAuthEnabled: (config: AzurePromDataSourceSettings): boolean => hasCredentials(config),\n    setAzureAuthEnabled: (config: AzurePromDataSourceSettings, enabled: boolean) =>\n      enabled ? setDefaultCredentials(config) : resetCredentials(config),\n    azureSettingsUI: AzureAuthSettings,\n  };\n\n  const theme = useTheme2();\n  const styles = overhaulStyles(theme);\n\n  return (\n    <>\n      {options.access === 'direct' && (\n        <Alert title=\"Error\" severity=\"error\">\n          Browser access mode in the Prometheus data source is no longer available. Switch to server access mode.\n        </Alert>\n      )}\n      <DataSourceDescription\n        dataSourceName=\"Prometheus\"\n        docsLink=\"https://grafana.com/docs/grafana/latest/datasources/prometheus/configure-prometheus-data-source/\"\n      />\n      <hr className={`${styles.hrTopSpace} ${styles.hrBottomSpace}`} />\n      <DataSourcehttpSettingsOverhaul\n        options={options}\n        onOptionsChange={onOptionsChange}\n        azureAuthSettings={azureAuthSettings}\n        sigV4AuthToggleEnabled={config.sigV4AuthEnabled}\n        renderSigV4Editor={\n          <SIGV4ConnectionConfig inExperimentalAuthComponent={true} {...props}></SIGV4ConnectionConfig>\n        }\n        secureSocksDSProxyEnabled={config.secureSocksDSProxyEnabled}\n      />\n      <hr />\n      <ConfigSection\n        className={styles.advancedSettings}\n        title=\"Advanced settings\"\n        description=\"Additional settings are optional settings that can be configured for more control over your data source.\"\n      >\n        <AdvancedHttpSettings\n          className={styles.advancedHTTPSettingsMargin}\n          config={options}\n          onChange={onOptionsChange}\n        />\n        <AlertingSettingsOverhaul<PromOptions> options={options} onOptionsChange={onOptionsChange} />\n        <PromSettings options={options} onOptionsChange={onOptionsChange} />\n      </ConfigSection>\n    </>\n  );\n};\n/**\n * Use this to return a url in a tooltip in a field. Don't forget to make the field interactive to be able to click on the tooltip\n * @param url\n * @returns\n */\nexport function docsTip(url?: string) {\n  const docsUrl = 'https://grafana.com/docs/grafana/latest/datasources/prometheus/#configure-the-data-source';\n\n  return (\n    <a href={url ? url : docsUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n      Visit docs for more details here.\n    </a>\n  );\n}\n\nexport const validateInput = (\n  input: string,\n  pattern: string | RegExp,\n  errorMessage?: string\n): boolean | JSX.Element => {\n  const defaultErrorMessage = 'Value is not valid';\n  if (input && !input.match(pattern)) {\n    return <FieldValidationMessage>{errorMessage ? errorMessage : defaultErrorMessage}</FieldValidationMessage>;\n  } else {\n    return true;\n  }\n};\n\nexport function overhaulStyles(theme: GrafanaTheme2) {\n  return {\n    additionalSettings: css({\n      marginBottom: '25px',\n    }),\n    secondaryGrey: css({\n      color: `${theme.colors.secondary.text}`,\n      opacity: '65%',\n    }),\n    inlineError: css({\n      margin: '0px 0px 4px 245px',\n    }),\n    switchField: css({\n      alignItems: 'center',\n    }),\n    sectionHeaderPadding: css({\n      paddingTop: '32px',\n    }),\n    sectionBottomPadding: css({\n      paddingBottom: '28px',\n    }),\n    subsectionText: css({\n      fontSize: '12px',\n    }),\n    hrBottomSpace: css({\n      marginBottom: '56px',\n    }),\n    hrTopSpace: css({\n      marginTop: '50px',\n    }),\n    textUnderline: css({\n      textDecoration: 'underline',\n    }),\n    versionMargin: css({\n      marginBottom: '12px',\n    }),\n    advancedHTTPSettingsMargin: css({\n      margin: '24px 0 8px 0',\n    }),\n    advancedSettings: css({\n      paddingTop: '32px',\n    }),\n    alertingTop: css({\n      marginTop: '40px !important',\n    }),\n    overhaulPageHeading: css({\n      fontWeight: '400',\n    }),\n    container: css({\n      maxwidth: '578',\n    }),\n  };\n}\n","import { DataSourcePlugin } from '@grafana/data';\nimport { PrometheusDatasource, PromQueryEditorByApp, PromCheatSheet } from '@grafana/prometheus';\n\nimport { ConfigEditor } from './configuration/ConfigEditorPackage';\n\nexport const plugin = new DataSourcePlugin(PrometheusDatasource)\n  .setQueryEditor(PromQueryEditorByApp)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditorHelp(PromCheatSheet);\n","import { css } from '@emotion/css';\nimport React__default from 'react';\nimport '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nconst EditorHeader = ({ children }) => {\n  const styles = useStyles2(getStyles);\n  return /* @__PURE__ */ React__default.createElement(\"div\", { className: styles.root }, children);\n};\nconst getStyles = (theme) => ({\n  root: css({\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    alignItems: \"center\",\n    gap: theme.spacing(3),\n    minHeight: theme.spacing(4)\n  })\n});\n\nexport { EditorHeader };\n//# sourceMappingURL=EditorHeader.js.map\n","import React__default from 'react';\n\nconst FlexItem = ({ grow, shrink }) => {\n  return /* @__PURE__ */ React__default.createElement(\"div\", { style: { display: \"block\", flexGrow: grow, flexShrink: shrink } });\n};\n\nexport { FlexItem };\n//# sourceMappingURL=FlexItem.js.map\n"],"names":["QueryPattern","props","pattern","onPatternSelect","hasNewQueryOption","hasPreviousQuery","selectedPatternName","setSelectedPatternName","styles","getStyles","lang","promql","Card","RawQuery","Button","theme","QueryPatternsModal","isOpen","onClose","onChange","onAddQuery","query","queries","app","openTabs","setOpenTabs","visualQuery","hasOperations","hasMetric","hasLabels","hasBinaryQueries","selectAsNewQuery","Modal","patternType","Collapse","action","tabs","t","promQueryEditorExplainKey","getFlagValue","key","defaultValue","val","store","setFlagValue","value","useFlag","flag","updateFlag","setter","QueryEditorMode","editorModes","QueryEditorModeToggle","mode","RadioButtonGroup","QueryHeaderSwitch","label","inputProps","dashedLabel","switchIdRef","Stack","Switch","queryEditorModeDefaultLocalStorageKey","changeEditorMode","editorMode","getDefaultEditorMode","expr","defaultEditor","getQueryWithDefaults","result","isBothInstantAndRange","OperationInfoButton","def","operation","show","setShow","middleware","context","refs","floatingStyles","click","dismiss","getReferenceProps","getFloatingProps","Portal","FlexItem","getOperationDocs","op","OperationHeader","index","onRemove","queryModeller","dragHandleProps","state","setState","onToggleSwitcher","alternatives","alt","Select","newDef","newParams","i","changedOp","getOperationParamEditor","paramDef","SelectInputParamEditor","BoolInputParamEditor","SimpleInputParamEditor","AutoSizeInput","evt","Checkbox","operationId","selectOptions","option","valueOption","x","OperationEditor","onRunQuery","datasource","flash","highlight","timeRange","shouldFlash","useFlash","id","onParamValueChanged","paramIdx","update","callParamChangedThenOnChange","onAddRestParam","onRemoveRestParam","operationElements","paramIndex","Editor","Tooltip","Icon","restParam","lastParamDef","renderAddRestParamButton","provided","keepFlash","setKeepFlash","operationIndex","OperationList","highlightedOp","operations","opsToHighlight","useOperationsHighlight","cascaderOpen","setCascaderOpen","onOperationChange","updatedList","addOptions","category","onAddOperation","operationDef","onDragEnd","element","onCascaderBlur","Cascader","isMounted","useMountedState","prevOperations","usePrevious","newOps","newOp","isSameOp","op1","op2","OperationsEditorRow","children","QueryBuilderHints","data","buildVisualQueryFromString","hints","setHints","hint","newQuery","newVisualQuery","NestedQuery","nestedQuery","showExplain","operators","IconButton","EditorRows","PromQueryBuilder","NestedQueryList","nestedQueries","onNestedQueryUpdate","setHighlightedOp","initHints","EditorRow","MetricsLabelsSection","OperationExplainedBox","selectors","OperationListExplained","QueryPreview","EditorFieldGroup","PromQueryBuilderContainer","dispatch","stateSlice","exprChanged","setMetricsModalSettings","onVisQueryChange","visQuery","visualQueryChange","metricsModalSettings","initialState","parseResult","PromExemplarField","rest","error","setError","prevError","iconButtonStyles","InlineLabel","PromExploreExtraField","rangeOptions","getQueryTypeOptions","prevQuery","onExemplarChange","exemplar","onChangeQueryStep","interval","onStepChange","e","onReturnKeyDown","onQueryTypeChange","getQueryTypeChangeHandler","promExploreExtraFieldTestIds","includeBoth","queryType","QueryOptionGroup","title","collapsedInfo","toggleOpen","useToggle","legendModeOptions","PromQueryLegendEditor","legendFormat","getLegendMode","inputRef","onLegendFormatChanged","newFormat","onLegendModeChanged","EditorField","getLegendModeLabel","PromQueryBuilderOptions","onChangeFormat","onChangeStep","queryTypeOptions","event","isEnabled","onIntervalFactorChange","formatOption","FORMAT_OPTIONS","queryTypeValue","getQueryTypeValue","queryTypeLabel","getCollapsedInfo","shouldShowExemplarSwitch","EditorSwitch","INTERVAL_FACTOR_OPTIONS","items","PromQueryCodeEditorAutocompleteInfo","autocompleteLimit","setAutocompleteLimit","autocompleteLimitExceeded","setAutocompleteLimitExceeded","handleSuggestionsIncompleteEvent","config","Text","PromQueryEditorSelector","parseModalOpen","setParseModalOpen","queryPatternsModalOpen","setQueryPatternsModalOpen","dataIsStale","setDataIsStale","explain","setExplain","onEditorModeChange","newMetricEditorMode","onChangeInternal","onShowExplainChange","handleOpenQueryPatternsModal","ConfirmModal","EditorHeader","Space","PromQueryCodeEditor","PromQueryEditorForAlerting","range","PromQueryField","alertingTestIds","PromQueryEditorByAppBase","PromQueryEditorByApp","CHEAT_SHEET_ITEMS","PromCheatSheet","item","AzureCloud","AzureCloud2","predefinedClouds","getAzureClouds","settingsEx","getDefaultAzureCloud","resolveLegacyCloudName","cloudName","instanceOfAzureCredential","authType","object","concealed","concealedLegacy","isCredentialsComplete","credentials","ignoreSecret","getClientSecret","options","secret","getAdPassword","getDatasourceCredentials","oboEnabled","serviceCredentials","updateDatasourceCredentials","clientSecret","hasCredentials","ResourceTypes","MetricsSupportedTypes","AlertingSettingsOverhaul","onOptionsChange","ConfigSubSection","InlineField","ExemplarSetting","onDelete","disabled","isInternalLink","setIsInternalLink","ev","DataSourcePicker","ds","Input","ExemplarsSettings","newField","newOptions","PromFlavorVersions","httpOptions","editorOptions","cacheValueOptions","prometheusFlavorSelectItems","DURATION_REGEX","MULTIPLE_DURATION_REGEX","NON_NEGATIVE_INTEGER_REGEX","durationError","countError","PromSettings","validDuration","updateValidDuration","validCount","updateValidCount","onChangeHandler","o","exemplarOptions","getValueFromEventItem","eventItem","getAzureCloudOptions","cloud","getDefaultCredentials","getCredentials","updateCredentials","setDefaultCredentials","resetCredentials","AzureCredentialsForm","azureCloudOptions","onCredentialsChange","managedIdentityEnabled","workloadIdentityEnabled","authTypeOptions","opts","onAuthTypeChange","selected","defaultAuthType","updated","onAzureCloudChange","onTenantIdChange","onClientIdChange","onClientSecretChange","onClientSecretReset","opt","AzureAuthSettings","dataSourceConfig","overrideAudienceAllowed","overrideAudienceChecked","setOverrideAudienceChecked","onOverrideAudienceChange","onResourceIdChange","useEffectOnce","InlineFieldRow","DataSourcehttpSettingsOverhaul","azureAuthSettings","sigV4AuthToggleEnabled","renderSigV4Editor","secureSocksDSProxyEnabled","newAuthProps","customMethods","sigV4Selected","setSigV4Selected","sigV4Id","sigV4Option","azureAuthEnabled","azureAuthSelected","setAzureAuthSelected","azureAuthId","azureAuthOption","returnSelectedMethod","urlTooltip","ConnectionSettings","Alert","Auth","method","SecureSocksProxySettings","PROM_CONFIG_LABEL_WIDTH","enabled","overhaulStyles","DataSourceDescription","ConfigSection","AdvancedHttpSettings","docsTip","url","validateInput","input","errorMessage","defaultErrorMessage","grow","shrink"],"sourceRoot":""}