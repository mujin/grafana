{"version":3,"file":"3158.54aa968e02667a9c7cb6.js","mappings":"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","sources":["webpack://grafana/./public/app/features/correlations/Forms/types.ts","webpack://grafana/./node_modules/react-use/esm/useBeforeUnload.js","webpack://grafana/./public/app/features/explore/CorrelationUnsavedChangesModal.tsx","webpack://grafana/./public/app/features/explore/correlationEditLogic.ts","webpack://grafana/./public/app/features/explore/CorrelationEditorModeBar.tsx","webpack://grafana/./public/app/features/explore/ExploreActions.tsx","webpack://grafana/./public/app/features/explore/ExploreDrawer.tsx","webpack://grafana/./node_modules/react-use/esm/useScroll.js","webpack://grafana/./public/app/features/explore/ContentOutline/ContentOutlineContext.tsx","webpack://grafana/./public/app/features/explore/ContentOutline/ContentOutlineItemButton.tsx","webpack://grafana/./public/app/features/explore/ContentOutline/ContentOutline.tsx","webpack://grafana/./public/app/features/explore/ContentOutline/ContentOutlineItem.tsx","webpack://grafana/./public/app/features/explore/CorrelationTransformationAddModal.tsx","webpack://grafana/./public/app/features/explore/CorrelationHelper.tsx","webpack://grafana/./public/app/features/explore/CustomContainer.tsx","webpack://grafana/./public/app/features/explore/DrilldownAlertBox.tsx","webpack://grafana/./public/app/features/explore/TimeSyncButton.tsx","webpack://grafana/./public/app/features/explore/ExploreTimeControls.tsx","webpack://grafana/./public/app/features/explore/LiveTailButton.tsx","webpack://grafana/./public/app/features/explore/ShortLinkButtonMenu.tsx","webpack://grafana/./public/app/features/explore/extensions/toolbar/BasicExtensions.tsx","webpack://grafana/./public/app/features/explore/extensions/toolbar/QuerylessAppsExtensions.tsx","webpack://grafana/./public/app/features/explore/extensions/ToolbarExtensionPoint.tsx","webpack://grafana/./public/app/features/explore/useLiveTailControls.ts","webpack://grafana/./public/app/features/explore/ExploreToolbar.tsx","webpack://grafana/./public/app/features/explore/FlameGraph/FlameGraphExploreContainer.tsx","webpack://grafana/./public/app/features/explore/ElapsedTime.tsx","webpack://grafana/./public/app/features/explore/Logs/LiveLogs.tsx","webpack://grafana/./public/app/features/explore/Logs/LogsColumnSearch.tsx","webpack://grafana/./public/app/features/explore/Logs/LogsTableEmptyFields.tsx","webpack://grafana/./public/app/features/explore/Logs/LogsTableNavField.tsx","webpack://grafana/./public/app/features/explore/Logs/LogsTableActiveFields.tsx","webpack://grafana/./public/app/features/explore/Logs/LogsTableAvailableFields.tsx","webpack://grafana/./public/app/features/explore/Logs/LogsTableMultiSelect.tsx","webpack://grafana/./public/app/features/explore/Logs/utils/uFuzzy.ts","webpack://grafana/./public/app/features/explore/Logs/LogsTableWrap.tsx","webpack://grafana/./public/app/features/logs/components/ControlledLogsTable.tsx","webpack://grafana/./public/app/features/logs/components/ControlledLogRows.tsx","webpack://grafana/./public/app/features/explore/ContentOutline/ContentOutlineAnalyticEvents.ts","webpack://grafana/./public/app/features/explore/Logs/LogsFeedback.tsx","webpack://grafana/./public/app/features/explore/MetaInfoText.tsx","webpack://grafana/./public/app/features/explore/Logs/LogsMetaRow.tsx","webpack://grafana/./public/app/features/explore/Logs/LogsNavigationPages.tsx","webpack://grafana/./public/app/features/explore/Logs/LogsNavigation.tsx","webpack://grafana/./public/app/features/explore/SupplementaryResultError.tsx","webpack://grafana/./public/app/features/explore/Logs/LogsVolumePanel.tsx","webpack://grafana/./public/app/features/explore/Logs/utils/logsVolumeResponse.ts","webpack://grafana/./public/app/features/explore/Logs/LogsVolumePanelList.tsx","webpack://grafana/./public/app/features/explore/Logs/Logs.tsx","webpack://grafana/./public/app/features/explore/Logs/utils/LogsCrossFadeTransition.tsx","webpack://grafana/./public/app/features/explore/Logs/LogsContainer.tsx","webpack://grafana/./public/app/features/explore/Logs/LogsSamplePanel.tsx","webpack://grafana/./public/app/features/explore/NoData.tsx","webpack://grafana/./public/app/features/explore/NoDataSourceCallToAction.tsx","webpack://grafana/./public/app/features/explore/NodeGraph/NodeGraphContainer.tsx","webpack://grafana/./public/app/features/explore/QueryRows.tsx","webpack://grafana/./public/app/features/explore/PrometheusListView/RawListContainer.tsx","webpack://grafana/./public/app/features/explore/RawPrometheus/RawPrometheusContainer.tsx","webpack://grafana/./public/app/core/components/Animations/FadeIn.tsx","webpack://grafana/./public/app/features/explore/ErrorContainer.tsx","webpack://grafana/./public/app/features/explore/ResponseErrorContainer.tsx","webpack://grafana/./public/app/features/explore/SecondaryActions.tsx","webpack://grafana/./public/app/features/explore/Table/TableContainer.tsx","webpack://grafana/./public/app/features/explore/TraceView/TraceViewContainer.tsx","webpack://grafana/./public/app/features/explore/Explore.tsx","webpack://grafana/./public/app/features/explore/ExploreQueryInspector.tsx","webpack://grafana/./public/app/features/explore/ExplorePaneContainer.tsx","webpack://grafana/./public/app/features/explore/QueriesDrawer/utils.ts","webpack://grafana/./public/app/features/explore/ExploreRunQueryButton.tsx","webpack://grafana/./public/app/features/explore/RichHistory/RichHistoryAddToLibrary.tsx","webpack://grafana/./public/app/features/explore/RichHistory/RichHistoryCard.tsx","webpack://grafana/./public/app/features/explore/RichHistory/RichHistoryQueriesTab.tsx","webpack://grafana/./public/app/features/explore/RichHistory/RichHistorySettingsTab.tsx","webpack://grafana/./public/app/features/explore/RichHistory/RichHistoryStarredTab.tsx","webpack://grafana/./public/app/features/explore/RichHistory/RichHistory.tsx","webpack://grafana/./public/app/features/explore/RichHistory/RichHistoryContainer.tsx","webpack://grafana/./public/app/features/explore/hooks/useExplorePageTitle.ts","webpack://grafana/./public/app/features/explore/hooks/useKeyboardShortcuts.ts","webpack://grafana/./public/app/features/explore/hooks/useSplitSizeUpdater.ts","webpack://grafana/./public/app/features/explore/hooks/useTimeSrvFix.ts","webpack://grafana/./public/app/features/explore/ExplorePage.tsx","webpack://grafana/./public/app/plugins/panel/table/migrations.ts","webpack://grafana/./node_modules/react-use/esm/useInterval.js"],"sourcesContent":["import { DeepMap, FieldError, FieldErrors } from 'react-hook-form';\n\nimport { SupportedTransformationType } from '@grafana/data';\nimport { CorrelationExternal, CorrelationQuery } from '@grafana/runtime';\nimport { t } from 'app/core/internationalization';\n\nimport { OmitUnion } from '../types';\n\nexport interface FormExternalDTO {\n  sourceUID: string;\n  label: string;\n  description: string;\n  type: 'external';\n  config: CorrelationExternal['config'];\n}\n\nexport interface FormQueryDTO {\n  sourceUID: string;\n  targetUID: string;\n  label: string;\n  description: string;\n  type: 'query';\n  config: CorrelationQuery['config'];\n}\n\nexport type FormDTO = FormExternalDTO | FormQueryDTO;\n\nexport function assertIsQueryTypeError(\n  errors: FieldErrors<FormDTO>\n): asserts errors is DeepMap<FormQueryDTO, FieldError> {\n  // explicitly assert the type so that TS can narrow down FormDTO to FormQueryDTO\n}\n\nexport type EditFormDTO = OmitUnion<FormDTO, 'targetUID' | 'sourceUID'>;\n\nexport type TransformationDTO = {\n  type: SupportedTransformationType;\n  expression?: string;\n  mapValue?: string;\n};\n\nexport interface TransformationFieldDetails {\n  show: boolean;\n  required?: boolean;\n  helpText?: string;\n}\n\ninterface SupportedTransformationTypeDetails {\n  label: string;\n  value: SupportedTransformationType;\n  description?: string;\n  expressionDetails: TransformationFieldDetails;\n  mapValueDetails: TransformationFieldDetails;\n}\n\nexport function getSupportedTransTypeDetails(\n  transType: SupportedTransformationType\n): SupportedTransformationTypeDetails {\n  switch (transType) {\n    case SupportedTransformationType.Logfmt:\n      return {\n        label: t('correlations.trans-details.logfmt-label', 'Logfmt'),\n        value: SupportedTransformationType.Logfmt,\n        description: t(\n          'correlations.trans-details.logfmt-description',\n          'Parse provided field with logfmt to get variables'\n        ),\n        expressionDetails: { show: false },\n        mapValueDetails: { show: false },\n      };\n    case SupportedTransformationType.Regex:\n      return {\n        label: t('correlations.trans-details.regex-label', 'Regular expression'),\n        value: SupportedTransformationType.Regex,\n        description: t(\n          'correlations.trans-details.regex-description',\n          'Field will be parsed with regex. Use named capture groups to return multiple variables, or a single unnamed capture group to add variable to named map value. Regex is case insensitive.'\n        ),\n        expressionDetails: {\n          show: true,\n          required: true,\n          helpText: t(\n            'correlations.trans-details.regex-expression',\n            'Use capture groups to extract a portion of the field.'\n          ),\n        },\n        mapValueDetails: {\n          show: true,\n          required: false,\n          helpText: t(\n            'correlations.trans-details.regex-map-values',\n            'Defines the name of the variable if the capture group is not named.'\n          ),\n        },\n      };\n    default:\n      return {\n        label: transType,\n        value: transType,\n        expressionDetails: { show: false },\n        mapValueDetails: { show: false },\n      };\n  }\n}\n\nexport const getTransformOptions = () => {\n  return Object.values(SupportedTransformationType).map((transformationType) => {\n    const transType = getSupportedTransTypeDetails(transformationType);\n    return {\n      label: transType.label,\n      value: transType.value,\n      description: transType.description,\n    };\n  });\n};\n","import { useCallback, useEffect } from 'react';\nimport { off, on } from './misc/util';\nvar useBeforeUnload = function (enabled, message) {\n    if (enabled === void 0) { enabled = true; }\n    var handler = useCallback(function (event) {\n        var finalEnabled = typeof enabled === 'function' ? enabled() : true;\n        if (!finalEnabled) {\n            return;\n        }\n        event.preventDefault();\n        if (message) {\n            event.returnValue = message;\n        }\n        return message;\n    }, [enabled, message]);\n    useEffect(function () {\n        if (!enabled) {\n            return;\n        }\n        on(window, 'beforeunload', handler);\n        return function () { return off(window, 'beforeunload', handler); };\n    }, [enabled, handler]);\n};\nexport default useBeforeUnload;\n","import { css } from '@emotion/css';\n\nimport { Button, Modal } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\ninterface UnsavedChangesModalProps {\n  message: string;\n  onDiscard: () => void;\n  onCancel: () => void;\n  onSave: () => void;\n}\n\nexport const CorrelationUnsavedChangesModal = ({ onSave, onDiscard, onCancel, message }: UnsavedChangesModalProps) => {\n  return (\n    <Modal\n      isOpen={true}\n      title={`Unsaved changes to correlation`}\n      onDismiss={onCancel}\n      icon=\"exclamation-triangle\"\n      className={css({ width: '600px' })}\n    >\n      <h5>{message}</h5>\n      <Modal.ButtonRow>\n        <Button variant=\"secondary\" onClick={onCancel} fill=\"outline\">\n          <Trans i18nKey=\"explore.correlation-unsaved-changes-modal.cancel\">Cancel</Trans>\n        </Button>\n        <Button variant=\"destructive\" onClick={onDiscard}>\n          <Trans i18nKey=\"explore.correlation-unsaved-changes-modal.continue-without-saving\">\n            Continue without saving\n          </Trans>\n        </Button>\n        <Button variant=\"primary\" onClick={onSave}>\n          <Trans i18nKey=\"explore.correlation-unsaved-changes-modal.save-correlation\">Save correlation</Trans>\n        </Button>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n","import { template } from 'lodash';\n\nimport { CORRELATION_EDITOR_POST_CONFIRM_ACTION } from 'app/types';\n\nenum CONSEQUENCES {\n  SOURCE_TARGET_CHANGE = 'cause the query in the right pane to be re-ran and links added to that data',\n  FULL_QUERY_LOSS = 'lose the changed query',\n  FULL_CORR_LOSS = 'cause the correlation in progress to be lost',\n  INVALID_VAR = 'remove the variables, and your changed query may no longer be valid',\n}\n\n// returns a string if the modal should show, with what the message string should be\n// returns undefined if the modal shouldn't show\nexport const showModalMessage = (\n  action: CORRELATION_EDITOR_POST_CONFIRM_ACTION,\n  isActionLeft: boolean,\n  dirtyCorrelation: boolean,\n  dirtyQueryEditor: boolean\n) => {\n  const messageTemplate = template(\n    '<%= actionStr %> will <%= consequenceStr %>. Would you like to save before continuing?'\n  );\n  let actionStr = '';\n  let consequenceStr = '';\n\n  // dirty correlation message always takes priority over dirty query\n  if (action === CORRELATION_EDITOR_POST_CONFIRM_ACTION.CLOSE_PANE) {\n    actionStr = 'Closing the pane';\n    if (isActionLeft) {\n      if (dirtyCorrelation) {\n        consequenceStr = CONSEQUENCES.FULL_CORR_LOSS;\n      } else if (dirtyQueryEditor) {\n        consequenceStr = CONSEQUENCES.SOURCE_TARGET_CHANGE;\n      } else {\n        return undefined;\n      }\n    } else {\n      // right pane close\n      if (dirtyCorrelation) {\n        consequenceStr = CONSEQUENCES.FULL_CORR_LOSS;\n      } else if (dirtyQueryEditor) {\n        consequenceStr = CONSEQUENCES.FULL_QUERY_LOSS;\n      } else {\n        return undefined;\n      }\n    }\n  } else if (action === CORRELATION_EDITOR_POST_CONFIRM_ACTION.CHANGE_DATASOURCE) {\n    actionStr = 'Changing the datasource';\n    if (isActionLeft) {\n      if (dirtyCorrelation) {\n        consequenceStr = CONSEQUENCES.FULL_CORR_LOSS;\n      } else {\n        return undefined;\n      }\n    } else {\n      // right datasource change\n      if (dirtyQueryEditor) {\n        consequenceStr = CONSEQUENCES.FULL_QUERY_LOSS;\n      } else {\n        return undefined;\n      }\n    }\n  } else if (action === CORRELATION_EDITOR_POST_CONFIRM_ACTION.CLOSE_EDITOR) {\n    actionStr = 'Closing the editor';\n    if (dirtyCorrelation) {\n      consequenceStr = CONSEQUENCES.FULL_CORR_LOSS;\n    } else if (dirtyQueryEditor) {\n      consequenceStr = CONSEQUENCES.INVALID_VAR;\n    } else {\n      return undefined;\n    }\n  }\n  return messageTemplate({ actionStr, consequenceStr });\n};\n","import { css } from '@emotion/css';\nimport { useEffect, useState } from 'react';\nimport { useBeforeUnload, useUnmount } from 'react-use';\n\nimport { GrafanaTheme2, colorManipulator } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, Icon, Stack, Tooltip, useStyles2 } from '@grafana/ui';\nimport { Prompt } from 'app/core/components/FormPrompt/Prompt';\nimport { Trans } from 'app/core/internationalization';\nimport { CORRELATION_EDITOR_POST_CONFIRM_ACTION, ExploreItemState, useDispatch, useSelector } from 'app/types';\n\nimport { CorrelationUnsavedChangesModal } from './CorrelationUnsavedChangesModal';\nimport { showModalMessage } from './correlationEditLogic';\nimport { saveCurrentCorrelation } from './state/correlations';\nimport { changeDatasource } from './state/datasource';\nimport { changeCorrelationHelperData } from './state/explorePane';\nimport { changeCorrelationEditorDetails, splitClose } from './state/main';\nimport { runQueries } from './state/query';\nimport { selectCorrelationDetails, selectIsHelperShowing } from './state/selectors';\n\nexport const CorrelationEditorModeBar = ({ panes }: { panes: Array<[string, ExploreItemState]> }) => {\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n  const correlationDetails = useSelector(selectCorrelationDetails);\n  const isHelperShowing = useSelector(selectIsHelperShowing);\n  const [saveMessage, setSaveMessage] = useState<string | undefined>(undefined); // undefined means do not show\n\n  // handle refreshing and closing the tab\n  useBeforeUnload(correlationDetails?.correlationDirty || false, 'Save correlation?');\n  useBeforeUnload(\n    (!correlationDetails?.correlationDirty && correlationDetails?.queryEditorDirty) || false,\n    'The query editor was changed. Save correlation before continuing?'\n  );\n\n  // decide if we are displaying prompt, perform action if not\n  useEffect(() => {\n    if (correlationDetails?.isExiting) {\n      const { correlationDirty, queryEditorDirty } = correlationDetails;\n      let isActionLeft = undefined;\n      let action = undefined;\n      if (correlationDetails.postConfirmAction) {\n        isActionLeft = correlationDetails.postConfirmAction.isActionLeft;\n        action = correlationDetails.postConfirmAction.action;\n      } else {\n        // closing the editor only\n        action = CORRELATION_EDITOR_POST_CONFIRM_ACTION.CLOSE_EDITOR;\n        isActionLeft = false;\n      }\n\n      const modalMessage = showModalMessage(action, isActionLeft, correlationDirty, queryEditorDirty);\n      if (modalMessage !== undefined) {\n        setSaveMessage(modalMessage);\n      } else {\n        // if no prompt, perform action\n        if (\n          action === CORRELATION_EDITOR_POST_CONFIRM_ACTION.CHANGE_DATASOURCE &&\n          correlationDetails.postConfirmAction\n        ) {\n          const { exploreId, changeDatasourceUid } = correlationDetails?.postConfirmAction;\n          if (exploreId && changeDatasourceUid) {\n            dispatch(\n              changeDatasource({ exploreId, datasource: changeDatasourceUid, options: { importQueries: true } })\n            );\n            dispatch(\n              changeCorrelationEditorDetails({\n                isExiting: false,\n              })\n            );\n          }\n        } else if (\n          action === CORRELATION_EDITOR_POST_CONFIRM_ACTION.CLOSE_PANE &&\n          correlationDetails.postConfirmAction\n        ) {\n          const { exploreId } = correlationDetails?.postConfirmAction;\n          if (exploreId !== undefined) {\n            dispatch(splitClose(exploreId));\n            dispatch(\n              changeCorrelationEditorDetails({\n                isExiting: false,\n              })\n            );\n          }\n        } else if (action === CORRELATION_EDITOR_POST_CONFIRM_ACTION.CLOSE_EDITOR) {\n          dispatch(\n            changeCorrelationEditorDetails({\n              editorMode: false,\n            })\n          );\n        }\n      }\n    }\n  }, [correlationDetails, dispatch, isHelperShowing]);\n\n  // clear data when unmounted\n  useUnmount(() => {\n    dispatch(\n      changeCorrelationEditorDetails({\n        editorMode: false,\n        isExiting: false,\n        correlationDirty: false,\n        label: undefined,\n        description: undefined,\n        canSave: false,\n      })\n    );\n\n    panes.forEach((pane) => {\n      dispatch(\n        changeCorrelationHelperData({\n          exploreId: pane[0],\n          correlationEditorHelperData: undefined,\n        })\n      );\n      dispatch(runQueries({ exploreId: pane[0] }));\n    });\n  });\n\n  const resetEditor = () => {\n    dispatch(\n      changeCorrelationEditorDetails({\n        editorMode: true,\n        isExiting: false,\n        correlationDirty: false,\n        label: undefined,\n        description: undefined,\n        canSave: false,\n      })\n    );\n\n    panes.forEach((pane) => {\n      dispatch(\n        changeCorrelationHelperData({\n          exploreId: pane[0],\n          correlationEditorHelperData: undefined,\n        })\n      );\n      dispatch(runQueries({ exploreId: pane[0] }));\n    });\n  };\n\n  const closePane = (exploreId: string) => {\n    setSaveMessage(undefined);\n    dispatch(splitClose(exploreId));\n    reportInteraction('grafana_explore_split_view_closed');\n  };\n\n  const changeDatasourcePostAction = (exploreId: string, datasourceUid: string) => {\n    setSaveMessage(undefined);\n    dispatch(changeDatasource({ exploreId, datasource: datasourceUid, options: { importQueries: true } }));\n  };\n\n  const saveCorrelationPostAction = (skipPostConfirmAction: boolean) => {\n    dispatch(\n      saveCurrentCorrelation(\n        correlationDetails?.label,\n        correlationDetails?.description,\n        correlationDetails?.transformations\n      )\n    );\n    if (!skipPostConfirmAction && correlationDetails?.postConfirmAction !== undefined) {\n      const { exploreId, action, changeDatasourceUid } = correlationDetails?.postConfirmAction;\n      if (action === CORRELATION_EDITOR_POST_CONFIRM_ACTION.CLOSE_PANE) {\n        closePane(exploreId);\n        resetEditor();\n      } else if (\n        action === CORRELATION_EDITOR_POST_CONFIRM_ACTION.CHANGE_DATASOURCE &&\n        changeDatasourceUid !== undefined\n      ) {\n        changeDatasource({ exploreId, datasource: changeDatasourceUid });\n        resetEditor();\n      }\n    } else {\n      dispatch(changeCorrelationEditorDetails({ editorMode: false, correlationDirty: false, isExiting: false }));\n    }\n  };\n\n  return (\n    <>\n      {/* Handle navigating outside Explore */}\n      <Prompt\n        message={(location) => {\n          if (\n            location.pathname !== '/explore' &&\n            correlationDetails?.editorMode &&\n            correlationDetails?.correlationDirty\n          ) {\n            return 'You have unsaved correlation data. Continue?';\n          } else {\n            return true;\n          }\n        }}\n      />\n\n      {saveMessage !== undefined && (\n        <CorrelationUnsavedChangesModal\n          onDiscard={() => {\n            if (correlationDetails?.postConfirmAction !== undefined) {\n              const { exploreId, action, changeDatasourceUid } = correlationDetails?.postConfirmAction;\n              if (action === CORRELATION_EDITOR_POST_CONFIRM_ACTION.CLOSE_PANE) {\n                closePane(exploreId);\n              } else if (\n                action === CORRELATION_EDITOR_POST_CONFIRM_ACTION.CHANGE_DATASOURCE &&\n                changeDatasourceUid !== undefined\n              ) {\n                changeDatasourcePostAction(exploreId, changeDatasourceUid);\n              }\n              dispatch(changeCorrelationEditorDetails({ isExiting: false }));\n            } else {\n              // exit correlations mode\n              // if we are discarding the in progress correlation, reset everything\n              // this modal only shows if the editorMode is false, so we just need to update the dirty state\n              dispatch(\n                changeCorrelationEditorDetails({\n                  editorMode: false,\n                  correlationDirty: false,\n                  isExiting: false,\n                })\n              );\n            }\n          }}\n          onCancel={() => {\n            // if we are cancelling the exit, set the editor mode back to true and hide the prompt\n            dispatch(changeCorrelationEditorDetails({ isExiting: false }));\n            setSaveMessage(undefined);\n          }}\n          onSave={() => {\n            saveCorrelationPostAction(false);\n          }}\n          message={saveMessage}\n        />\n      )}\n      <div className={styles.correlationEditorTop}>\n        <Stack gap={2} justifyContent=\"flex-end\" alignItems=\"center\">\n          <Tooltip content=\"Correlations editor in Explore is an experimental feature.\">\n            <Icon className={styles.iconColor} name=\"info-circle\" size=\"xl\" />\n          </Tooltip>\n          <Button\n            variant=\"secondary\"\n            disabled={!correlationDetails?.canSave}\n            fill=\"outline\"\n            className={correlationDetails?.canSave ? styles.buttonColor : styles.disabledButtonColor}\n            onClick={() => {\n              saveCorrelationPostAction(true);\n            }}\n          >\n            <Trans i18nKey=\"explore.correlation-editor-mode-bar.save\">Save</Trans>\n          </Button>\n          <Button\n            variant=\"secondary\"\n            fill=\"outline\"\n            className={styles.buttonColor}\n            icon=\"times\"\n            onClick={() => {\n              dispatch(changeCorrelationEditorDetails({ isExiting: true }));\n              reportInteraction('grafana_explore_correlation_editor_exit_pressed');\n            }}\n          >\n            <Trans i18nKey=\"explore.correlation-editor-mode-bar.exit-correlation-editor\">Exit correlation editor</Trans>\n          </Button>\n        </Stack>\n      </div>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const contrastColor = theme.colors.getContrastText(theme.colors.primary.main);\n  const lighterBackgroundColor = colorManipulator.lighten(theme.colors.primary.main, 0.1);\n  const darkerBackgroundColor = colorManipulator.darken(theme.colors.primary.main, 0.2);\n\n  const disabledColor = colorManipulator.darken(contrastColor, 0.2);\n\n  return {\n    correlationEditorTop: css({\n      backgroundColor: theme.colors.primary.main,\n      marginTop: '3px',\n      padding: theme.spacing(1),\n    }),\n    iconColor: css({\n      color: contrastColor,\n    }),\n    buttonColor: css({\n      color: contrastColor,\n      borderColor: contrastColor,\n      '&:hover': {\n        color: contrastColor,\n        borderColor: contrastColor,\n        backgroundColor: lighterBackgroundColor,\n      },\n    }),\n    // important needed to override disabled state styling\n    disabledButtonColor: css({\n      color: `${disabledColor} !important`,\n      backgroundColor: `${darkerBackgroundColor} !important`,\n    }),\n  };\n};\n","import { useRegisterActions, useKBar, Action, Priority } from 'kbar';\nimport { useEffect, useState } from 'react';\n\nimport { config } from '@grafana/runtime';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { MIXED_DATASOURCE_NAME } from 'app/plugins/datasource/mixed/MixedDataSource';\nimport { AccessControlAction, useDispatch, useSelector } from 'app/types';\n\nimport { splitOpen, splitClose, changeCorrelationEditorDetails } from './state/main';\nimport { runQueries } from './state/query';\nimport { isSplit, selectPanes } from './state/selectors';\n\n// FIXME: this should use the new IDs\nexport const ExploreActions = () => {\n  const [actions, setActions] = useState<Action[]>([]);\n  const { query } = useKBar();\n  const dispatch = useDispatch();\n  const panes = useSelector(selectPanes);\n  const splitted = useSelector(isSplit);\n\n  const canWriteCorrelations = contextSrv.hasPermission(AccessControlAction.DataSourcesWrite);\n\n  useEffect(() => {\n    const keys = Object.keys(panes);\n    const exploreSection = {\n      name: 'Explore',\n      priority: Priority.HIGH + 1,\n    };\n\n    const actionsArr: Action[] = [];\n\n    if (splitted) {\n      actionsArr.push({\n        id: 'explore/run-query-left',\n        name: 'Run query (left)',\n        keywords: 'query left',\n        perform: () => {\n          dispatch(runQueries({ exploreId: keys[0] }));\n        },\n        section: exploreSection,\n      });\n      if (panes[1]) {\n        // we should always have the right exploreId if split\n        actionsArr.push({\n          id: 'explore/run-query-right',\n          name: 'Run query (right)',\n          keywords: 'query right',\n          perform: () => {\n            dispatch(runQueries({ exploreId: keys[1] }));\n          },\n          section: exploreSection,\n        });\n        actionsArr.push({\n          id: 'explore/split-view-close-left',\n          name: 'Close split view left',\n          keywords: 'split',\n          perform: () => {\n            dispatch(splitClose(keys[0]));\n          },\n          section: exploreSection,\n        });\n        actionsArr.push({\n          id: 'explore/split-view-close-right',\n          name: 'Close split view right',\n          keywords: 'split',\n          perform: () => {\n            dispatch(splitClose(keys[1]));\n          },\n          section: exploreSection,\n        });\n      }\n    } else {\n      // command palette doesn't know what pane we're in, only show option if not split and no datasource is mixed\n      const hasMixed = Object.values(panes).some((pane) => {\n        return pane?.datasourceInstance?.uid === MIXED_DATASOURCE_NAME;\n      });\n\n      if (config.featureToggles.correlations && canWriteCorrelations && !hasMixed) {\n        actionsArr.push({\n          id: 'explore/correlations-editor',\n          name: 'Correlations editor',\n          perform: () => {\n            dispatch(changeCorrelationEditorDetails({ editorMode: true }));\n            dispatch(runQueries({ exploreId: keys[0] }));\n          },\n          section: exploreSection,\n        });\n      }\n\n      actionsArr.push({\n        id: 'explore/run-query',\n        name: 'Run query',\n        keywords: 'query',\n        perform: () => {\n          dispatch(runQueries({ exploreId: keys[0] }));\n        },\n        section: exploreSection,\n      });\n      actionsArr.push({\n        id: 'explore/split-view-open',\n        name: 'Open split view',\n        keywords: 'split',\n        perform: () => {\n          dispatch(splitOpen());\n        },\n        section: exploreSection,\n      });\n    }\n    setActions(actionsArr);\n  }, [panes, splitted, query, dispatch, canWriteCorrelations]);\n\n  useRegisterActions(!query ? [] : actions, [actions, query]);\n\n  return null;\n};\n","// Libraries\nimport { css, cx, keyframes } from '@emotion/css';\nimport { Resizable, ResizeCallback } from 're-resizable';\nimport * as React from 'react';\n\n// Services & Utils\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { getDragStyles, useStyles2, useTheme2 } from '@grafana/ui';\n\nexport interface Props {\n  children: React.ReactNode;\n  onResize?: ResizeCallback;\n  initialHeight?: string;\n}\n\nexport function ExploreDrawer(props: Props) {\n  const { children, onResize, initialHeight } = props;\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n  const dragStyles = getDragStyles(theme);\n\n  const height = initialHeight || `${theme.components.horizontalDrawer.defaultHeight}px`;\n\n  return (\n    <Resizable\n      className={cx(styles.fixed, styles.container, styles.drawerActive)}\n      defaultSize={{ width: '100%', height }}\n      handleClasses={{ top: dragStyles.dragHandleHorizontal }}\n      enable={{\n        top: true,\n        right: false,\n        bottom: false,\n        left: false,\n        topRight: false,\n        bottomRight: false,\n        bottomLeft: false,\n        topLeft: false,\n      }}\n      maxHeight=\"100vh\"\n      onResize={onResize}\n    >\n      {children}\n    </Resizable>\n  );\n}\n\nconst drawerSlide = (theme: GrafanaTheme2) => keyframes`\n  0% {\n    transform: translateY(${theme.components.horizontalDrawer.defaultHeight}px);\n  }\n\n  100% {\n    transform: translateY(0px);\n  }\n`;\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  // @ts-expect-error csstype doesn't allow !important. see https://github.com/frenic/csstype/issues/114\n  fixed: css({\n    position: 'absolute !important',\n  }),\n  container: css({\n    bottom: 0,\n    background: theme.colors.background.primary,\n    borderTop: `1px solid ${theme.colors.border.weak}`,\n    boxShadow: theme.shadows.z3,\n    zIndex: theme.zIndex.navbarFixed,\n  }),\n  drawerActive: css({\n    opacity: 1,\n    [theme.transitions.handleMotion('no-preference')]: {\n      animation: `0.5s ease-out ${drawerSlide(theme)}`,\n    },\n  }),\n});\n","import { useEffect } from 'react';\nimport useRafState from './useRafState';\nimport { off, on } from './misc/util';\nvar useScroll = function (ref) {\n    if (process.env.NODE_ENV === 'development') {\n        if (typeof ref !== 'object' || typeof ref.current === 'undefined') {\n            console.error('`useScroll` expects a single ref argument.');\n        }\n    }\n    var _a = useRafState({\n        x: 0,\n        y: 0,\n    }), state = _a[0], setState = _a[1];\n    useEffect(function () {\n        var handler = function () {\n            if (ref.current) {\n                setState({\n                    x: ref.current.scrollLeft,\n                    y: ref.current.scrollTop,\n                });\n            }\n        };\n        if (ref.current) {\n            on(ref.current, 'scroll', handler, {\n                capture: false,\n                passive: true,\n            });\n        }\n        return function () {\n            if (ref.current) {\n                off(ref.current, 'scroll', handler);\n            }\n        };\n    }, [ref]);\n    return state;\n};\nexport default useScroll;\n","import { uniqueId } from 'lodash';\nimport { useState, useContext, createContext, ReactNode, useCallback, useRef, useEffect } from 'react';\nimport { SetOptional } from 'type-fest';\n\nimport { ContentOutlineItemBaseProps, ITEM_TYPES } from './ContentOutlineItem';\n\nexport interface ContentOutlineItemContextProps extends ContentOutlineItemBaseProps {\n  id: string;\n  ref: HTMLElement | null;\n  color?: string;\n  children?: ContentOutlineItemContextProps[];\n}\n\ntype RegisterFunction = (outlineItem: SetOptional<ContentOutlineItemContextProps, 'id'>) => string;\n\nexport interface ContentOutlineContextProps {\n  outlineItems: ContentOutlineItemContextProps[];\n  register: RegisterFunction;\n  unregister: (id: string) => void;\n  unregisterAllChildren: (\n    parentIdGetter: (items: ContentOutlineItemContextProps[]) => string | undefined,\n    childType: ITEM_TYPES\n  ) => void;\n  updateOutlineItems: (newItems: ContentOutlineItemContextProps[]) => void;\n  updateItem: (id: string, properties: Partial<Omit<ContentOutlineItemContextProps, 'id'>>) => void;\n}\n\ninterface ContentOutlineContextProviderProps {\n  children: ReactNode;\n  /**\n   * used to resort children of an outline item when the dependencies change\n   * e.g. when the order of query rows changes on drag and drop\n   */\n  refreshDependencies?: unknown[];\n}\n\ninterface ParentlessItems {\n  [panelId: string]: ContentOutlineItemContextProps[];\n}\n\nexport const ContentOutlineContext = createContext<ContentOutlineContextProps | undefined>(undefined);\n\nexport function ContentOutlineContextProvider({ children, refreshDependencies }: ContentOutlineContextProviderProps) {\n  const [outlineItems, setOutlineItems] = useState<ContentOutlineItemContextProps[]>([]);\n  const parentlessItemsRef = useRef<ParentlessItems>({});\n\n  const register: RegisterFunction = useCallback((outlineItem) => {\n    // Allow the caller to define unique ID so the outlineItem can be differentiated\n    const id = outlineItem.id\n      ? outlineItem.id\n      : uniqueId(`${outlineItem.panelId}-${outlineItem.title}-${outlineItem.icon}_`);\n\n    setOutlineItems((prevItems) => {\n      if (outlineItem.level === 'root') {\n        const parentlessItems = parentlessItemsRef.current[outlineItem.panelId] || [];\n\n        // if item has children in parentlessItemsRef and they are filters,\n        // modify each child to have ref = outlineItem.ref\n        // so that clicking on the filter will also bring the parent item into view\n        if (parentlessItems.length > 0) {\n          parentlessItemsRef.current[outlineItem.panelId].forEach((item) => {\n            if (item.type === 'filter') {\n              item.ref = outlineItem.ref;\n            }\n          });\n        }\n\n        // remove children from parentlessItemsRef\n        parentlessItemsRef.current[outlineItem.panelId] = [];\n\n        const updatedItems = [\n          ...prevItems,\n          {\n            ...outlineItem,\n            id,\n            children: parentlessItems,\n          },\n        ];\n\n        return updatedItems.sort(sortElementsByDocumentPosition);\n      }\n\n      if (outlineItem.level === 'child') {\n        let siblingWithSameTitleFound = false;\n        // items with type filter should not have siblings with the same title\n        // look at all parentless items and check if there is a sibling with the same title\n        Object.keys(parentlessItemsRef.current).forEach((key) => {\n          const siblingWithSameTitle = parentlessItemsRef.current[key].find(\n            (item) =>\n              item.title === outlineItem.title && outlineItem.type === 'filter' && outlineItem.panelId === item.panelId\n          );\n          if (siblingWithSameTitle) {\n            siblingWithSameTitleFound = true;\n            return;\n          }\n        });\n\n        if (siblingWithSameTitleFound) {\n          return [...prevItems];\n        }\n\n        const parentIndex = prevItems.findIndex(\n          (item) => item.panelId === outlineItem.panelId && item.level === 'root'\n        );\n        if (parentIndex === -1) {\n          const parentlessItemSibling = Object.keys(parentlessItemsRef.current).find(\n            (key) => key === outlineItem.panelId\n          );\n\n          if (parentlessItemSibling) {\n            parentlessItemsRef.current[outlineItem.panelId].push({\n              ...outlineItem,\n              id,\n            });\n          } else {\n            parentlessItemsRef.current[outlineItem.panelId] = [\n              {\n                ...outlineItem,\n                id,\n              },\n            ];\n          }\n          return [...prevItems];\n        }\n\n        const newItems = [...prevItems];\n        const parent = { ...newItems[parentIndex] };\n\n        // look at all registered items inside items parent and check if there is\n        // a filter sibling with the same title\n        const siblingWithSameTitle = parent.children?.find(\n          (item) =>\n            item.title === outlineItem.title && outlineItem.type === 'filter' && outlineItem.panelId === item.panelId\n        );\n        // check if sibling's highlight property has updated\n        if (siblingWithSameTitle && siblingWithSameTitle.highlight !== outlineItem.highlight) {\n          parent.children?.map((child) => {\n            if (child.title === siblingWithSameTitle?.title) {\n              child.highlight = outlineItem.highlight;\n            }\n          });\n          return [...prevItems];\n        } else if (siblingWithSameTitle) {\n          return [...prevItems];\n        }\n\n        let ref = outlineItem.ref;\n        if (outlineItem.type === 'filter') {\n          ref = parent.ref;\n        }\n\n        let childrenUpdated = [{ ...outlineItem, id, ref }, ...(parent.children || [])];\n\n        if (!outlineItem.childOnTop) {\n          childrenUpdated = sortItems(childrenUpdated);\n        }\n\n        newItems[parentIndex] = {\n          ...parent,\n          children: childrenUpdated,\n        };\n\n        return newItems;\n      }\n\n      return [...prevItems];\n    });\n\n    return id;\n  }, []);\n\n  const unregister = useCallback((id: string) => {\n    setOutlineItems((prevItems) =>\n      prevItems\n        .filter((item) => item.id !== id)\n        .map((item) => {\n          if (item.children) {\n            item.children = item.children.filter((child) => child.id !== id);\n          }\n          return item;\n        })\n    );\n  }, []);\n\n  const updateOutlineItems = useCallback((newItems: ContentOutlineItemContextProps[]) => {\n    setOutlineItems(newItems);\n  }, []);\n\n  const updateItem = useCallback((id: string, properties: Partial<Omit<ContentOutlineItemContextProps, 'id'>>) => {\n    setOutlineItems((prevItems) =>\n      prevItems.map((item) => {\n        if (item.id === id) {\n          return {\n            ...item,\n            ...properties,\n          };\n        }\n        return item;\n      })\n    );\n  }, []);\n\n  const unregisterAllChildren = useCallback(\n    (parentIdGetter: (items: ContentOutlineItemContextProps[]) => string | undefined, childType: ITEM_TYPES) => {\n      setOutlineItems((prevItems) => {\n        const parentId = parentIdGetter(prevItems);\n        if (!parentId) {\n          return prevItems;\n        }\n        return prevItems.map((item) => {\n          if (item.id === parentId) {\n            item.children = item.children?.filter((child) => child.type !== childType);\n          }\n          return item;\n        });\n      });\n    },\n    []\n  );\n\n  useEffect(() => {\n    setOutlineItems((prevItems) => {\n      const newItems = [...prevItems];\n      for (const item of newItems) {\n        const sortedItems = sortItems(item.children || []);\n        item.children = sortedItems;\n      }\n      return newItems;\n    });\n  }, [refreshDependencies]);\n\n  return (\n    <ContentOutlineContext.Provider\n      value={{ outlineItems, register, unregister, updateOutlineItems, unregisterAllChildren, updateItem }}\n    >\n      {children}\n    </ContentOutlineContext.Provider>\n  );\n}\n\nfunction sortElementsByDocumentPosition(a: ContentOutlineItemContextProps, b: ContentOutlineItemContextProps) {\n  if (a.ref && b.ref) {\n    const diff = a.ref.compareDocumentPosition(b.ref);\n    if (diff === Node.DOCUMENT_POSITION_PRECEDING) {\n      return 1;\n    } else if (diff === Node.DOCUMENT_POSITION_FOLLOWING) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\nfunction sortItems(outlineItems: ContentOutlineItemContextProps[]): ContentOutlineItemContextProps[] {\n  const [skipSort, sortable] = outlineItems.reduce<\n    [ContentOutlineItemContextProps[], ContentOutlineItemContextProps[]]\n  >(\n    (acc, item) => {\n      item.childOnTop ? acc[0].push(item) : acc[1].push(item);\n      return acc;\n    },\n    [[], []]\n  );\n\n  sortable.sort(sortElementsByDocumentPosition);\n\n  return [...skipSort, ...sortable];\n}\n\nexport function useContentOutlineContext() {\n  return useContext(ContentOutlineContext);\n}\n","import { cx, css } from '@emotion/css';\nimport { ButtonHTMLAttributes, useEffect, useRef, useState } from 'react';\nimport * as React from 'react';\n\nimport { IconName, isIconName, GrafanaTheme2 } from '@grafana/data';\nimport { Button, Icon, Tooltip, useTheme2 } from '@grafana/ui';\nimport { TooltipPlacement } from '@grafana/ui/internal';\nimport { t } from 'app/core/internationalization';\n\ntype CommonProps = {\n  contentOutlineExpanded?: boolean;\n  title?: string;\n  icon?: IconName | React.ReactNode;\n  tooltip?: string;\n  tooltipPlacement?: TooltipPlacement;\n  className?: string;\n  indentStyle?: string;\n  collapsible?: boolean;\n  collapsed?: boolean;\n  isActive?: boolean;\n  extraHighlight?: boolean;\n  sectionId?: string;\n  toggleCollapsed?: () => void;\n  color?: string;\n  onRemove?: () => void;\n};\n\nexport type ContentOutlineItemButtonProps = CommonProps & ButtonHTMLAttributes<HTMLButtonElement>;\n\nexport function ContentOutlineItemButton({\n  contentOutlineExpanded,\n  title,\n  icon,\n  tooltip,\n  tooltipPlacement = 'bottom',\n  className,\n  indentStyle,\n  collapsible,\n  collapsed,\n  isActive,\n  extraHighlight,\n  sectionId,\n  toggleCollapsed,\n  color,\n  onRemove,\n  ...rest\n}: ContentOutlineItemButtonProps) {\n  const theme = useTheme2();\n  const styles = getStyles(theme, color);\n\n  const buttonStyles = cx(styles.button, className);\n\n  const textRef = useRef<HTMLElement>(null);\n  const [isOverflowing, setIsOverflowing] = useState(false);\n\n  useEffect(() => {\n    if (textRef.current) {\n      setIsOverflowing(textRef.current?.scrollWidth > textRef.current?.clientWidth);\n    }\n  }, [title]);\n\n  const body = (\n    <div className={cx(styles.buttonContainer, indentStyle)}>\n      {collapsible && (\n        <button\n          className={styles.collapseButton}\n          onClick={toggleCollapsed}\n          aria-label={t(\n            'explore.content-outline-item-button.body.aria-label-content-outline-item-collapse-button',\n            'Content outline item collapse button'\n          )}\n          aria-expanded={!collapsed}\n          aria-controls={sectionId}\n        >\n          <OutlineIcon icon={collapsed ? 'angle-right' : 'angle-down'} />\n        </button>\n      )}\n      <button\n        className={cx(buttonStyles, {\n          [styles.active]: isActive,\n          [styles.extraHighlight]: extraHighlight,\n        })}\n        aria-label={tooltip}\n        {...rest}\n      >\n        <OutlineIcon icon={icon} />\n        {title && (\n          <span className={styles.textContainer} ref={textRef}>\n            {title}\n          </span>\n        )}\n      </button>\n      {onRemove && (\n        <Button\n          variant=\"destructive\"\n          className={styles.deleteButton}\n          icon=\"times\"\n          onClick={() => onRemove()}\n          data-testid=\"content-outline-item-delete-button\"\n        />\n      )}\n    </div>\n  );\n\n  // if there's a tooltip we want to show it if the text is overflowing\n  const showTooltip = tooltip && (!contentOutlineExpanded || isOverflowing);\n\n  return showTooltip ? (\n    <Tooltip content={tooltip} placement={tooltipPlacement}>\n      {body}\n    </Tooltip>\n  ) : (\n    body\n  );\n}\n\nfunction OutlineIcon({ icon }: { icon: IconName | React.ReactNode }) {\n  if (!icon) {\n    return null;\n  }\n\n  if (isIconName(icon)) {\n    return <Icon name={icon} size={'lg'} title={icon} />;\n  }\n\n  return icon;\n}\n\nconst getStyles = (theme: GrafanaTheme2, color?: string) => {\n  return {\n    buttonContainer: css({\n      position: 'relative',\n      display: 'flex',\n      alignItems: 'center',\n      flexGrow: 1,\n      gap: theme.spacing(0.25),\n      width: '100%',\n      overflow: 'hidden',\n    }),\n    button: css({\n      label: 'content-outline-item-button',\n      display: 'flex',\n      alignItems: 'center',\n      height: theme.spacing(theme.components.height.md),\n      gap: theme.spacing(0.5),\n      color: theme.colors.text.secondary,\n      width: '100%',\n      background: 'transparent',\n      overflow: 'hidden',\n      border: 'none',\n    }),\n    collapseButton: css({\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      width: theme.spacing(3),\n      height: theme.spacing(4),\n      borderRadius: theme.shape.radius.default,\n      color: theme.colors.text.secondary,\n      background: 'transparent',\n      border: 'none',\n      overflow: 'hidden',\n\n      '&:hover': {\n        color: theme.colors.text.primary,\n        background: theme.colors.secondary.shade,\n      },\n    }),\n    textContainer: css({\n      whiteSpace: 'nowrap',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      fontSize: theme.typography.bodySmall.fontSize,\n      marginLeft: theme.spacing(0.5),\n    }),\n    active: css({\n      backgroundColor: theme.colors.background.secondary,\n      borderTopRightRadius: theme.shape.radius.default,\n      borderBottomRightRadius: theme.shape.radius.default,\n      position: 'relative',\n      height: theme.spacing(theme.components.height.md),\n\n      '&::before': {\n        backgroundImage: color !== undefined ? 'none' : theme.colors.gradients.brandVertical,\n        backgroundColor: color !== undefined ? color : 'none',\n        borderRadius: theme.shape.radius.default,\n        content: '\" \"',\n        display: 'block',\n        height: '100%',\n        position: 'absolute',\n        transform: 'translateX(-50%)',\n        width: theme.spacing(0.5),\n        left: '2px',\n      },\n    }),\n    extraHighlight: css({\n      backgroundColor: theme.colors.background.secondary,\n      borderTopRightRadius: theme.shape.radius.default,\n      borderBottomRightRadius: theme.shape.radius.default,\n      position: 'relative',\n\n      '&::before': {\n        backgroundImage: color !== undefined ? 'none' : theme.colors.gradients.brandVertical,\n        backgroundColor: color !== undefined ? color : 'none',\n        borderRadius: theme.shape.radius.default,\n        content: '\" \"',\n        display: 'block',\n        height: '100%',\n        position: 'absolute',\n        transform: 'translateX(-50%)',\n        width: theme.spacing(0.5),\n        left: '2px',\n      },\n    }),\n    deleteButton: css({\n      width: theme.spacing(1),\n      height: theme.spacing(1),\n      padding: theme.spacing(0.75, 0.75),\n      marginRight: theme.spacing(0.5),\n    }),\n  };\n};\n","import { css, cx } from '@emotion/css';\nimport { Fragment, useEffect, useRef, useState } from 'react';\nimport { useToggle, useScroll } from 'react-use';\n\nimport { GrafanaTheme2, store } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { useStyles2, PanelContainer, ScrollContainer } from '@grafana/ui';\n\nimport { ContentOutlineItemContextProps, useContentOutlineContext } from './ContentOutlineContext';\nimport { ContentOutlineItemButton } from './ContentOutlineItemButton';\n\nfunction scrollableChildren(item: ContentOutlineItemContextProps) {\n  return item.children?.filter((child) => child.type !== 'filter') || [];\n}\n\ntype SectionsExpanded = Record<string, boolean>;\n\nfunction shouldBeActive(\n  item: ContentOutlineItemContextProps,\n  activeSectionId: string,\n  activeSectionChildId: string | undefined,\n  sectionsExpanded: SectionsExpanded\n) {\n  const isAnActiveParent = activeSectionId === item.id;\n  const isAnActiveChild = activeSectionChildId === item.id;\n  const isCollapsed = !sectionsExpanded[item.id];\n  const containsScrollableChildren = scrollableChildren(item).length > 0;\n  const anyChildActive = isChildActive(item, activeSectionChildId) && !sectionsExpanded[item.id];\n\n  if (containsScrollableChildren) {\n    return isCollapsed && (isAnActiveParent || anyChildActive);\n  } else {\n    return isAnActiveParent || isAnActiveChild;\n  }\n}\n\nexport const CONTENT_OUTLINE_LOCAL_STORAGE_KEYS = {\n  visible: 'grafana.explore.contentOutline.visible',\n  expanded: 'grafana.explore.contentOutline.expanded',\n};\n\nexport function ContentOutline({ scroller, panelId }: { scroller: HTMLElement | undefined; panelId: string }) {\n  const [contentOutlineExpanded, toggleContentOutlineExpanded] = useToggle(\n    store.getBool(CONTENT_OUTLINE_LOCAL_STORAGE_KEYS.expanded, true)\n  );\n  const styles = useStyles2(getStyles, contentOutlineExpanded);\n  const scrollerRef = useRef(scroller || null);\n  const { y: verticalScroll } = useScroll(scrollerRef);\n  const { outlineItems } = useContentOutlineContext() ?? { outlineItems: [] };\n  const [activeSectionId, setActiveSectionId] = useState(outlineItems[0]?.id);\n  const [activeSectionChildId, setActiveSectionChildId] = useState(outlineItems[0]?.children?.[0]?.id);\n\n  const outlineItemsShouldIndent = outlineItems.some(\n    (item) => item.children && !(item.mergeSingleChild && item.children?.length === 1) && item.children.length > 0\n  );\n\n  const outlineItemsHaveDeleteButton = outlineItems.some((item) => item.children?.some((child) => child.onRemove));\n\n  const [sectionsExpanded, setSectionsExpanded] = useState(() => {\n    return outlineItems.reduce((acc: { [key: string]: boolean }, item) => {\n      acc[item.id] = !!item.expanded;\n      return acc;\n    }, {});\n  });\n\n  const scrollIntoView = (ref: HTMLElement | null, customOffsetTop = 0) => {\n    let scrollValue = 0;\n    let el: HTMLElement | null | undefined = ref;\n\n    if (!el) {\n      return;\n    }\n\n    do {\n      scrollValue += el?.offsetTop || 0;\n      el = el?.offsetParent instanceof HTMLElement ? el.offsetParent : undefined;\n    } while (el && el !== scroller);\n\n    scroller?.scroll({\n      top: scrollValue + customOffsetTop,\n      behavior: 'smooth',\n    });\n  };\n\n  const handleItemClicked = (item: ContentOutlineItemContextProps) => {\n    if (item.level === 'child' && item.type === 'filter') {\n      const activeParent = outlineItems.find((parent) => {\n        return parent.children?.find((child) => child.id === item.id);\n      });\n\n      if (activeParent) {\n        scrollIntoView(activeParent.ref, activeParent.customTopOffset);\n      }\n    } else {\n      scrollIntoView(item.ref, item.customTopOffset);\n      reportInteraction('explore_toolbar_contentoutline_clicked', {\n        item: 'select_section',\n        type: item.panelId,\n      });\n    }\n  };\n\n  const toggle = () => {\n    store.set(CONTENT_OUTLINE_LOCAL_STORAGE_KEYS.expanded, !contentOutlineExpanded);\n    toggleContentOutlineExpanded();\n    reportInteraction('explore_toolbar_contentoutline_clicked', {\n      item: 'outline',\n      type: contentOutlineExpanded ? 'minimize' : 'expand',\n    });\n  };\n\n  const toggleSection = (itemId: string) => {\n    setSectionsExpanded((prev) => ({\n      ...prev,\n      [itemId]: !prev[itemId],\n    }));\n    reportInteraction('explore_toolbar_contentoutline_clicked', {\n      item: 'section',\n      type: !sectionsExpanded[itemId] ? 'minimize' : 'expand',\n    });\n  };\n\n  useEffect(() => {\n    let activeItem;\n\n    for (const item of outlineItems) {\n      let top = item?.ref?.getBoundingClientRect().top;\n\n      // Check item\n      if (top && top >= 0) {\n        activeItem = item;\n      }\n\n      // Check children\n      const activeChild = scrollableChildren(item).find((child) => {\n        const offsetTop = child.customTopOffset || 0;\n        let childTop = child?.ref?.getBoundingClientRect().top;\n        return childTop && childTop >= offsetTop;\n      });\n\n      if (activeChild && isCollapsible(item)) {\n        setActiveSectionChildId(activeChild.id);\n        setActiveSectionId(item.id);\n        break;\n      }\n\n      if (activeItem) {\n        setActiveSectionId(activeItem.id);\n        setActiveSectionChildId(undefined);\n        break;\n      }\n    }\n  }, [outlineItems, verticalScroll]);\n\n  return (\n    <PanelContainer className={styles.wrapper} id={panelId}>\n      <ScrollContainer>\n        <div className={styles.content}>\n          <ContentOutlineItemButton\n            icon={'arrow-from-right'}\n            tooltip={contentOutlineExpanded ? 'Collapse outline' : 'Expand outline'}\n            tooltipPlacement={contentOutlineExpanded ? 'right' : 'bottom'}\n            onClick={toggle}\n            className={cx(styles.toggleContentOutlineButton, {\n              [styles.justifyCenter]: !contentOutlineExpanded && !outlineItemsShouldIndent,\n            })}\n            aria-expanded={contentOutlineExpanded}\n          />\n\n          {outlineItems.map((item) => {\n            return (\n              <Fragment key={item.id}>\n                <ContentOutlineItemButton\n                  key={item.id}\n                  title={contentOutlineExpanded ? item.title : undefined}\n                  contentOutlineExpanded={contentOutlineExpanded}\n                  className={cx(styles.buttonStyles, {\n                    [styles.justifyCenter]: !contentOutlineExpanded && !outlineItemsHaveDeleteButton,\n                    [styles.sectionHighlighter]: isChildActive(item, activeSectionChildId) && !contentOutlineExpanded,\n                  })}\n                  indentStyle={cx({\n                    [styles.indentRoot]: !isCollapsible(item) && outlineItemsShouldIndent,\n                    [styles.sectionHighlighter]:\n                      isChildActive(item, activeSectionChildId) && !contentOutlineExpanded && sectionsExpanded[item.id],\n                  })}\n                  icon={item.icon}\n                  onClick={() => handleItemClicked(item)}\n                  tooltip={item.title}\n                  collapsible={isCollapsible(item)}\n                  collapsed={!sectionsExpanded[item.id]}\n                  toggleCollapsed={() => toggleSection(item.id)}\n                  isActive={shouldBeActive(item, activeSectionId, activeSectionChildId, sectionsExpanded)}\n                  sectionId={item.id}\n                  color={item.color}\n                />\n                <div id={item.id} data-testid={`section-wrapper-${item.id}`}>\n                  {item.children &&\n                    isCollapsible(item) &&\n                    sectionsExpanded[item.id] &&\n                    item.children.map((child, i) => (\n                      <div key={child.id} className={styles.itemWrapper}>\n                        {contentOutlineExpanded && (\n                          <div\n                            className={cx(styles.itemConnector, {\n                              [styles.firstItemConnector]: i === 0,\n                              [styles.lastItemConnector]: i === (item.children?.length || 0) - 1,\n                            })}\n                          />\n                        )}\n                        <ContentOutlineItemButton\n                          key={child.id}\n                          title={contentOutlineExpanded ? child.title : undefined}\n                          contentOutlineExpanded={contentOutlineExpanded}\n                          icon={contentOutlineExpanded ? undefined : item.icon}\n                          className={cx(styles.buttonStyles, {\n                            [styles.justifyCenter]: !contentOutlineExpanded && !outlineItemsHaveDeleteButton,\n                            [styles.sectionHighlighter]:\n                              isChildActive(item, activeSectionChildId) && !contentOutlineExpanded,\n                          })}\n                          indentStyle={styles.indentChild}\n                          onClick={(e) => {\n                            handleItemClicked(child);\n                            child.onClick?.(e);\n                          }}\n                          tooltip={child.title}\n                          isActive={shouldBeActive(child, activeSectionId, activeSectionChildId, sectionsExpanded)}\n                          extraHighlight={child.highlight}\n                          color={child.color}\n                          onRemove={child.onRemove ? () => child.onRemove?.(child.id) : undefined}\n                        />\n                      </div>\n                    ))}\n                </div>\n              </Fragment>\n            );\n          })}\n        </div>\n      </ScrollContainer>\n    </PanelContainer>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2, expanded: boolean) => {\n  return {\n    wrapper: css({\n      label: 'wrapper',\n      position: 'relative',\n      display: 'flex',\n      justifyContent: 'center',\n      marginRight: theme.spacing(1),\n      height: '100%',\n      backgroundColor: theme.colors.background.primary,\n      width: expanded ? '160px' : undefined,\n      minWidth: expanded ? '160px' : undefined,\n    }),\n    content: css({\n      label: 'content',\n      marginLeft: theme.spacing(0.5),\n      top: 0,\n    }),\n    buttonStyles: css({\n      display: 'flex',\n      '&:hover': {\n        color: theme.colors.text.primary,\n        textDecoration: 'underline',\n      },\n    }),\n    toggleContentOutlineButton: css({\n      '&:hover': {\n        color: theme.colors.text.primary,\n      },\n      transform: expanded ? 'rotate(180deg)' : '',\n      marginRight: expanded ? theme.spacing(0.5) : undefined,\n    }),\n    indentRoot: css({\n      paddingLeft: theme.spacing(3),\n    }),\n    indentChild: css({\n      paddingLeft: expanded ? theme.spacing(5) : theme.spacing(2.75),\n    }),\n    itemWrapper: css({\n      display: 'flex',\n      height: theme.spacing(4),\n      alignItems: 'center',\n    }),\n    itemConnector: css({\n      position: 'relative',\n      height: '100%',\n      width: theme.spacing(1.5),\n      '&::before': {\n        borderRight: `1px solid ${theme.colors.border.medium}`,\n        content: '\"\"',\n        height: '100%',\n        left: theme.spacing(4.75),\n        position: 'absolute',\n        transform: 'translateX(50%)',\n      },\n    }),\n    firstItemConnector: css({\n      '&::before': {\n        top: theme.spacing(1),\n        height: `calc(100% - ${theme.spacing(1)})`,\n      },\n    }),\n    lastItemConnector: css({\n      '&::before': {\n        height: `calc(100% - ${theme.spacing(1)})`,\n      },\n    }),\n    justifyCenter: css({\n      justifyContent: 'center',\n    }),\n    sectionHighlighter: css({\n      backgroundColor: theme.colors.background.secondary,\n    }),\n  };\n};\n\nfunction isCollapsible(item: ContentOutlineItemContextProps): boolean {\n  return !!(item.children && item.children.length > 0 && (!item.mergeSingleChild || item.children.length !== 1));\n}\n\nfunction isChildActive(item: ContentOutlineItemContextProps, activeSectionChildId: string | undefined) {\n  return item.children?.some((child) => child.id === activeSectionChildId);\n}\n","import { useEffect, useRef, ReactNode } from 'react';\nimport * as React from 'react';\n\nimport { useContentOutlineContext } from './ContentOutlineContext';\n\ntype INDENT_LEVELS = 'root' | 'child';\n\nexport type ITEM_TYPES = 'scrollIntoView' | 'filter';\n\nexport interface ContentOutlineItemBaseProps {\n  panelId: string;\n  title: string;\n  icon: string;\n  /**\n   * Custom offset from the top of the Explore container when scrolling to this item.\n   * Items like query row need some offset so the top of the query row is not hidden behind the header.\n   */\n  customTopOffset?: number;\n  /**\n   * The level of indentation for this item.\n   * - `root` is the top level item.\n   * - `child` is an item that is a child of an item with `root` level.\n   */\n  level?: INDENT_LEVELS;\n  /**\n   * Merges a single child of this item with this item.\n   * e.g. It doesn't make sense to nest a single query row under a queries container\n   * because user can navigate to the query row by navigating to the queries container.\n   */\n  mergeSingleChild?: boolean;\n  // callback that is called when the item is clicked\n  // need this for filtering logs\n  onClick?: (e: React.MouseEvent) => void;\n  type?: ITEM_TYPES;\n  /**\n   * Client can additionally mark filter actions as highlighted\n   */\n  highlight?: boolean;\n  onRemove?: (id: string) => void;\n  /**\n   * Child that will always be on top of the list\n   * e.g. pinned log in Logs section\n   */\n  childOnTop?: boolean;\n  expanded?: boolean;\n}\n\ninterface ContentOutlineItemProps extends ContentOutlineItemBaseProps {\n  children: ReactNode;\n  className?: string;\n}\n\nexport function ContentOutlineItem({\n  panelId,\n  title,\n  icon,\n  customTopOffset,\n  children,\n  className,\n  level = 'root',\n  mergeSingleChild,\n  type = 'scrollIntoView',\n  onClick,\n}: ContentOutlineItemProps) {\n  const { register, unregister } = useContentOutlineContext() ?? {};\n  const ref = useRef(null);\n\n  useEffect(() => {\n    if (!register || !unregister) {\n      return;\n    }\n\n    // When the component mounts, register it and get its unique ID.\n    const id = register({\n      panelId: panelId,\n      title: title,\n      icon: icon,\n      ref: ref.current,\n      customTopOffset: customTopOffset,\n      level: level,\n      mergeSingleChild,\n      type,\n    });\n\n    // When the component unmounts, unregister it using its unique ID.\n    return () => unregister(id);\n  }, [panelId, title, icon, customTopOffset, level, mergeSingleChild, register, unregister, type, onClick]);\n\n  return (\n    <div className={className} ref={ref}>\n      {children}\n    </div>\n  );\n}\n","import { css } from '@emotion/css';\nimport { useId, useState, useMemo, useEffect } from 'react';\nimport Highlighter from 'react-highlight-words';\nimport { useForm, Controller } from 'react-hook-form';\n\nimport { DataLinkTransformationConfig, ScopedVars } from '@grafana/data';\nimport { Button, Field, Icon, Input, Label, Modal, Select, Tooltip, Stack } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport {\n  getSupportedTransTypeDetails,\n  getTransformOptions,\n  TransformationFieldDetails,\n} from '../correlations/Forms/types';\nimport { getTransformationVars } from '../correlations/transformations';\n\ninterface CorrelationTransformationAddModalProps {\n  onCancel: () => void;\n  onSave: (transformation: DataLinkTransformationConfig) => void;\n  fieldList: Record<string, string>;\n  transformationToEdit?: DataLinkTransformationConfig;\n}\n\ninterface ShowFormFields {\n  expressionDetails: TransformationFieldDetails;\n  mapValueDetails: TransformationFieldDetails;\n}\n\nconst LabelWithTooltip = ({ label, tooltipText }: { label: string; tooltipText: string }) => (\n  <Stack gap={1} direction=\"row\" wrap=\"wrap\" alignItems=\"flex-start\">\n    <Label>{label}</Label>\n    <Tooltip content={tooltipText}>\n      <Icon name=\"info-circle\" size=\"sm\" />\n    </Tooltip>\n  </Stack>\n);\n\nexport const CorrelationTransformationAddModal = ({\n  onSave,\n  onCancel,\n  fieldList,\n  transformationToEdit,\n}: CorrelationTransformationAddModalProps) => {\n  const [exampleValue, setExampleValue] = useState<string | undefined>(undefined);\n  const [transformationVars, setTransformationVars] = useState<ScopedVars>({});\n  const [formFieldsVis, setFormFieldsVis] = useState<ShowFormFields>({\n    mapValueDetails: { show: false },\n    expressionDetails: { show: false },\n  });\n  const [isExpValid, setIsExpValid] = useState(false); // keep the highlighter from erroring on bad expressions\n  const [validToSave, setValidToSave] = useState(false);\n  const { getValues, control, register, watch } = useForm<DataLinkTransformationConfig>({\n    defaultValues: useMemo(() => {\n      if (transformationToEdit) {\n        const exampleVal = fieldList[transformationToEdit?.field!];\n        setExampleValue(exampleVal);\n        if (transformationToEdit?.expression) {\n          setIsExpValid(true);\n        }\n        const transformationTypeDetails = getSupportedTransTypeDetails(transformationToEdit?.type!);\n        setFormFieldsVis({\n          mapValueDetails: transformationTypeDetails.mapValueDetails,\n          expressionDetails: transformationTypeDetails.expressionDetails,\n        });\n\n        const transformationVars = getTransformationVars(\n          {\n            type: transformationToEdit?.type!,\n            expression: transformationToEdit?.expression,\n            mapValue: transformationToEdit?.mapValue,\n          },\n          exampleVal || '',\n          transformationToEdit?.field!\n        );\n        setTransformationVars({ ...transformationVars });\n        setValidToSave(true);\n        return {\n          type: transformationToEdit?.type,\n          field: transformationToEdit?.field,\n          mapValue: transformationToEdit?.mapValue,\n          expression: transformationToEdit?.expression,\n        };\n      } else {\n        return undefined;\n      }\n    }, [fieldList, transformationToEdit]),\n  });\n  const id = useId();\n\n  useEffect(() => {\n    const subscription = watch((formValues) => {\n      const expression = formValues.expression;\n      let isExpressionValid = false;\n      if (expression !== undefined) {\n        isExpressionValid = true;\n        try {\n          new RegExp(expression);\n        } catch (e) {\n          isExpressionValid = false;\n        }\n      } else {\n        isExpressionValid = !formFieldsVis.expressionDetails.show;\n      }\n      setIsExpValid(isExpressionValid);\n      let transKeys = [];\n      if (formValues.type) {\n        const transformationVars = getTransformationVars(\n          {\n            type: formValues.type,\n            expression: isExpressionValid ? expression : '',\n            mapValue: formValues.mapValue,\n          },\n          fieldList[formValues.field!] || '',\n          formValues.field!\n        );\n\n        transKeys = Object.keys(transformationVars);\n        setTransformationVars(transKeys.length > 0 ? { ...transformationVars } : {});\n      }\n\n      if (transKeys.length === 0 || !isExpressionValid) {\n        setValidToSave(false);\n      } else {\n        setValidToSave(true);\n      }\n    });\n    return () => subscription.unsubscribe();\n  }, [fieldList, formFieldsVis.expressionDetails.show, watch]);\n\n  return (\n    <Modal\n      isOpen={true}\n      title={`${transformationToEdit ? 'Edit' : 'Add'} transformation`}\n      onDismiss={onCancel}\n      className={css({ width: '700px' })}\n    >\n      <p>\n        A transformation extracts variables out of a single field. These variables will be available along with your\n        field variables.\n      </p>\n      <Field label={t('explore.correlation-transformation-add-modal.label-field', 'Field')}>\n        <Controller\n          control={control}\n          render={({ field: { onChange, ref, ...field } }) => (\n            <Select\n              {...field}\n              onChange={(value) => {\n                if (value.value) {\n                  onChange(value.value);\n                  setExampleValue(fieldList[value.value]);\n                }\n              }}\n              options={Object.entries(fieldList).map((entry) => {\n                return { label: entry[0], value: entry[0] };\n              })}\n              aria-label={t('explore.correlation-transformation-add-modal.aria-label-field', 'Field')}\n            />\n          )}\n          name={`field` as const}\n        />\n      </Field>\n\n      {exampleValue && (\n        <>\n          <pre>\n            <Highlighter\n              textToHighlight={exampleValue}\n              searchWords={[isExpValid ? (getValues('expression') ?? '') : '']}\n              autoEscape={false}\n            />\n          </pre>\n          <Field label={t('explore.correlation-transformation-add-modal.label-type', 'Type')}>\n            <Controller\n              control={control}\n              render={({ field: { onChange, ref, ...field } }) => (\n                <Select\n                  {...field}\n                  onChange={(value) => {\n                    onChange(value.value);\n                    const transformationTypeDetails = getSupportedTransTypeDetails(value.value!);\n                    setFormFieldsVis({\n                      mapValueDetails: transformationTypeDetails.mapValueDetails,\n                      expressionDetails: transformationTypeDetails.expressionDetails,\n                    });\n                  }}\n                  options={getTransformOptions()}\n                  aria-label={t('explore.correlation-transformation-add-modal.aria-label-type', 'Type')}\n                />\n              )}\n              name={`type` as const}\n            />\n          </Field>\n          {formFieldsVis.expressionDetails.show && (\n            <Field\n              label={\n                formFieldsVis.expressionDetails.helpText ? (\n                  <LabelWithTooltip\n                    label={t('explore.correlation-transformation-add-modal.label-expression', 'Expression')}\n                    tooltipText={formFieldsVis.expressionDetails.helpText}\n                  />\n                ) : (\n                  'Expression'\n                )\n              }\n              htmlFor={`${id}-expression`}\n              required={formFieldsVis.expressionDetails.required}\n            >\n              <Input {...register('expression')} id={`${id}-expression`} />\n            </Field>\n          )}\n          {formFieldsVis.mapValueDetails.show && (\n            <Field\n              label={\n                formFieldsVis.mapValueDetails.helpText ? (\n                  <LabelWithTooltip\n                    label={t('explore.correlation-transformation-add-modal.label-variable-name', 'Variable name')}\n                    tooltipText={formFieldsVis.mapValueDetails.helpText}\n                  />\n                ) : (\n                  'Variable name'\n                )\n              }\n              htmlFor={`${id}-mapValue`}\n            >\n              <Input {...register('mapValue')} id={`${id}-mapValue`} />\n            </Field>\n          )}\n          {Object.entries(transformationVars).length > 0 && (\n            <>\n              This transformation will add the following variables:\n              <pre>\n                {Object.entries(transformationVars).map((entry) => {\n                  return `\\$\\{${entry[0]}\\} = ${entry[1]?.value}\\n`;\n                })}\n              </pre>\n            </>\n          )}\n        </>\n      )}\n      <Modal.ButtonRow>\n        <Button variant=\"secondary\" onClick={onCancel} fill=\"outline\">\n          <Trans i18nKey=\"explore.correlation-transformation-add-modal.cancel\">Cancel</Trans>\n        </Button>\n        <Button variant=\"primary\" onClick={() => onSave(getValues())} disabled={!validToSave}>\n          {transformationToEdit ? 'Edit transformation' : 'Add transformation to correlation'}\n        </Button>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n","import { css } from '@emotion/css';\nimport { useState, useEffect, useId } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useAsync } from 'react-use';\n\nimport { DataLinkTransformationConfig, ExploreCorrelationHelperData, GrafanaTheme2 } from '@grafana/data';\nimport {\n  Collapse,\n  Alert,\n  Field,\n  Input,\n  Button,\n  Card,\n  IconButton,\n  useStyles2,\n  DeleteButton,\n  Tooltip,\n  Icon,\n  Stack,\n} from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\nimport { useDispatch, useSelector } from 'app/types';\n\nimport { getTransformationVars } from '../correlations/transformations';\nimport { generateDefaultLabel } from '../correlations/utils';\n\nimport { CorrelationTransformationAddModal } from './CorrelationTransformationAddModal';\nimport { changeCorrelationHelperData } from './state/explorePane';\nimport { changeCorrelationEditorDetails } from './state/main';\nimport { selectCorrelationDetails, selectPanes } from './state/selectors';\n\ninterface Props {\n  exploreId: string;\n  correlations: ExploreCorrelationHelperData;\n}\n\ninterface FormValues {\n  label: string;\n  description: string;\n}\n\nexport const CorrelationHelper = ({ exploreId, correlations }: Props) => {\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n  const panes = useSelector(selectPanes);\n  const panesVals = Object.values(panes);\n  const { value: defaultLabel, loading: loadingLabel } = useAsync(\n    async () => await generateDefaultLabel(panesVals[0]!, panesVals[1]!),\n    [\n      panesVals[0]?.datasourceInstance,\n      panesVals[0]?.queries[0].datasource,\n      panesVals[1]?.datasourceInstance,\n      panesVals[1]?.queries[0].datasource,\n    ]\n  );\n\n  const { register, watch, getValues, setValue } = useForm<FormValues>();\n  const [isLabelDescOpen, setIsLabelDescOpen] = useState(false);\n  const [isTransformOpen, setIsTransformOpen] = useState(false);\n  const [showTransformationAddModal, setShowTransformationAddModal] = useState(false);\n  const [transformations, setTransformations] = useState<DataLinkTransformationConfig[]>([]);\n  const [transformationIdxToEdit, setTransformationIdxToEdit] = useState<number | undefined>(undefined);\n  const correlationDetails = useSelector(selectCorrelationDetails);\n  const id = useId();\n\n  // only fire once on mount to allow save button to enable / disable when unmounted\n  useEffect(() => {\n    dispatch(changeCorrelationEditorDetails({ canSave: true }));\n    return () => {\n      dispatch(changeCorrelationEditorDetails({ canSave: false }));\n    };\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (\n      !loadingLabel &&\n      defaultLabel !== undefined &&\n      !correlationDetails?.correlationDirty &&\n      getValues('label') !== ''\n    ) {\n      setValue('label', defaultLabel);\n    }\n  }, [correlationDetails?.correlationDirty, defaultLabel, getValues, loadingLabel, setValue]);\n\n  useEffect(() => {\n    const subscription = watch((value) => {\n      let dirty = correlationDetails?.correlationDirty || false;\n      let description = value.description || '';\n      if (!dirty && (value.label !== defaultLabel || description !== '')) {\n        dirty = true;\n      } else if (dirty && value.label === defaultLabel && description.trim() === '') {\n        dirty = false;\n      }\n      dispatch(\n        changeCorrelationEditorDetails({ label: value.label, description: value.description, correlationDirty: dirty })\n      );\n    });\n    return () => subscription.unsubscribe();\n  }, [correlationDetails?.correlationDirty, defaultLabel, dispatch, watch]);\n\n  useEffect(() => {\n    const dirty =\n      !correlationDetails?.correlationDirty && transformations.length > 0 ? true : correlationDetails?.correlationDirty;\n    dispatch(changeCorrelationEditorDetails({ transformations: transformations, correlationDirty: dirty }));\n    let transVarRecords: Record<string, string> = {};\n    transformations.forEach((transformation) => {\n      const transformationVars = getTransformationVars(\n        {\n          type: transformation.type,\n          expression: transformation.expression,\n          mapValue: transformation.mapValue,\n        },\n        correlations.vars[transformation.field!],\n        transformation.field!\n      );\n\n      Object.keys(transformationVars).forEach((key) => {\n        transVarRecords[key] = transformationVars[key]?.value;\n      });\n    });\n\n    dispatch(\n      changeCorrelationHelperData({\n        exploreId: exploreId,\n        correlationEditorHelperData: {\n          resultField: correlations.resultField,\n          origVars: correlations.origVars,\n          vars: { ...correlations.origVars, ...transVarRecords },\n        },\n      })\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, transformations]);\n\n  return (\n    <>\n      {showTransformationAddModal && (\n        <CorrelationTransformationAddModal\n          onCancel={() => {\n            setTransformationIdxToEdit(undefined);\n            setShowTransformationAddModal(false);\n          }}\n          onSave={(transformation: DataLinkTransformationConfig) => {\n            if (transformationIdxToEdit !== undefined) {\n              const editTransformations = [...transformations];\n              editTransformations[transformationIdxToEdit] = transformation;\n              setTransformations(editTransformations);\n              setTransformationIdxToEdit(undefined);\n            } else {\n              setTransformations([...transformations, transformation]);\n            }\n            setShowTransformationAddModal(false);\n          }}\n          fieldList={correlations.origVars}\n          transformationToEdit={\n            transformationIdxToEdit !== undefined ? transformations[transformationIdxToEdit] : undefined\n          }\n        />\n      )}\n      <Alert title={t('explore.correlation-helper.title-correlation-details', 'Correlation details')} severity=\"info\">\n        The correlation link will appear by the <code>{correlations.resultField}</code> field. You can use the following\n        variables to set up your correlations:\n        <pre>\n          {Object.entries(correlations.vars).map((entry) => {\n            return `\\$\\{${entry[0]}\\} = ${entry[1]}\\n`;\n          })}\n        </pre>\n        <Collapse\n          collapsible\n          isOpen={isLabelDescOpen}\n          onToggle={() => {\n            setIsLabelDescOpen(!isLabelDescOpen);\n          }}\n          label={\n            <Stack gap={1} direction=\"row\" wrap=\"wrap\" alignItems=\"center\">\n              Label / Description\n              {!isLabelDescOpen && !loadingLabel && (\n                <span className={styles.labelCollapseDetails}>{`Label: ${getValues('label') || defaultLabel}`}</span>\n              )}\n            </Stack>\n          }\n        >\n          <Field label={t('explore.correlation-helper.label-label', 'Label')} htmlFor={`${id}-label`}>\n            <Input\n              {...register('label')}\n              id={`${id}-label`}\n              onBlur={() => {\n                if (getValues('label') === '' && defaultLabel !== undefined) {\n                  setValue('label', defaultLabel);\n                }\n              }}\n            />\n          </Field>\n          <Field label={t('explore.correlation-helper.label-description', 'Description')} htmlFor={`${id}-description`}>\n            <Input {...register('description')} id={`${id}-description`} />\n          </Field>\n        </Collapse>\n        <Collapse\n          collapsible\n          isOpen={isTransformOpen}\n          onToggle={() => {\n            setIsTransformOpen(!isTransformOpen);\n          }}\n          label={\n            <Stack gap={1} direction=\"row\" wrap=\"wrap\" alignItems=\"center\">\n              Transformations\n              <Tooltip content=\"A transformation extracts one or more variables out of a single field.\">\n                <Icon name=\"info-circle\" size=\"sm\" />\n              </Tooltip>\n            </Stack>\n          }\n        >\n          <Button\n            variant=\"secondary\"\n            fill=\"outline\"\n            onClick={() => {\n              setShowTransformationAddModal(true);\n            }}\n            className={styles.transformationAction}\n          >\n            <Trans i18nKey=\"explore.correlation-helper.add-transformation\">Add transformation</Trans>\n          </Button>\n          {transformations.map((transformation, i) => {\n            const { type, field, expression, mapValue } = transformation;\n            const detailsString = [\n              (mapValue ?? '').length > 0 ? `Variable name: ${mapValue}` : undefined,\n              (expression ?? '').length > 0 ? (\n                <>\n                  Expression: <code>{expression}</code>\n                </>\n              ) : undefined,\n            ].filter((val) => val);\n            return (\n              <Card key={`trans-${i}`}>\n                <Card.Heading>\n                  {field}: {type}\n                </Card.Heading>\n                {detailsString.length > 0 && (\n                  <Card.Meta className={styles.transformationMeta}>{detailsString}</Card.Meta>\n                )}\n                <Card.SecondaryActions>\n                  <IconButton\n                    key=\"edit\"\n                    name=\"edit\"\n                    aria-label={t('explore.correlation-helper.aria-label-edit-transformation', 'Edit transformation')}\n                    onClick={() => {\n                      setTransformationIdxToEdit(i);\n                      setShowTransformationAddModal(true);\n                    }}\n                  />\n                  <DeleteButton\n                    aria-label={t(\n                      'explore.correlation-helper.aria-label-delete-transformation',\n                      'Delete transformation'\n                    )}\n                    onConfirm={() => setTransformations(transformations.filter((_, idx) => i !== idx))}\n                    closeOnConfirm\n                  />\n                </Card.SecondaryActions>\n              </Card>\n            );\n          })}\n        </Collapse>\n      </Alert>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    labelCollapseDetails: css({\n      marginLeft: theme.spacing(2),\n      ...theme.typography['bodySmall'],\n      fontStyle: 'italic',\n    }),\n    transformationAction: css({\n      marginBottom: theme.spacing(2),\n    }),\n    transformationMeta: css({\n      alignItems: 'baseline',\n    }),\n  };\n};\n","import { DataFrame, EventBus, LoadingState, SplitOpen, TimeRange } from '@grafana/data';\nimport { PanelRenderer } from '@grafana/runtime';\nimport { PanelChrome, PanelContext, PanelContextProvider } from '@grafana/ui';\n\nimport { getPanelPluginMeta } from '../plugins/importPanelPlugin';\n\nimport { useExploreDataLinkPostProcessor } from './hooks/useExploreDataLinkPostProcessor';\n\nexport interface Props {\n  width: number;\n  height: number;\n  timeZone: string;\n  pluginId: string;\n  frames: DataFrame[];\n  timeRange: TimeRange;\n  state: LoadingState;\n  splitOpenFn: SplitOpen;\n  eventBus: EventBus;\n}\n\nexport function CustomContainer({\n  width,\n  height,\n  timeZone,\n  state,\n  pluginId,\n  frames,\n  timeRange,\n  splitOpenFn,\n  eventBus,\n}: Props) {\n  const plugin = getPanelPluginMeta(pluginId);\n\n  const dataLinkPostProcessor = useExploreDataLinkPostProcessor(splitOpenFn, timeRange);\n\n  const panelContext: PanelContext = {\n    dataLinkPostProcessor,\n    eventBus,\n    eventsScope: 'explore',\n  };\n\n  return (\n    <PanelContextProvider value={panelContext}>\n      <PanelChrome title={plugin.name} width={width} height={height} loadingState={state}>\n        {(innerWidth, innerHeight) => (\n          <PanelRenderer\n            data={{ series: frames, state: state, timeRange }}\n            pluginId={pluginId}\n            title=\"\"\n            width={innerWidth}\n            height={innerHeight}\n            timeZone={timeZone}\n          />\n        )}\n      </PanelChrome>\n    </PanelContextProvider>\n  );\n}\n","import { useLocalStorage } from 'react-use';\n\nimport { Alert, LinkButton, Stack } from '@grafana/ui';\n\nimport { t, Trans } from '../../core/internationalization';\n\ntype Props = {\n  datasourceType: string;\n};\n\nexport function DrilldownAlertBox(props: Props) {\n  const isDsCompatibleWithDrilldown = [\n    'prometheus',\n    'grafana-amazonprometheus-datasource',\n    'grafana-azureprometheus-datasource',\n    'loki',\n    'tempo',\n    'grafana-pyroscope-datasource',\n  ].includes(props.datasourceType);\n\n  const [dismissed, setDismissed] = useLocalStorage('grafana.explore.drilldownsBoxDismissed', false);\n\n  return (\n    isDsCompatibleWithDrilldown &&\n    !dismissed && (\n      <Alert\n        severity={'info'}\n        title={t('explore.drilldownInfo.title', 'Explore Metrics, Logs, Traces and Profiles have moved!')}\n        onRemove={() => {\n          setDismissed(true);\n        }}\n      >\n        <Stack gap={1} alignItems=\"flex-end\" justifyContent={'space-between'}>\n          <span>\n            <Trans i18nKey={'explore.drilldownInfo.description'}>\n              Looking for the Grafana Explore apps? They are now called the Grafana Drilldown apps and can be found\n              under <b>Menu &gt; Drilldown</b>\n            </Trans>\n          </span>\n          <LinkButton variant={'secondary'} href=\"/drilldown\">\n            <Trans i18nKey={'explore.drilldownInfo.action'}>Go to Grafana Drilldown</Trans>\n          </LinkButton>\n        </Stack>\n      </Alert>\n    )\n  );\n}\n","import { Tooltip, ToolbarButton } from '@grafana/ui';\n\ninterface TimeSyncButtonProps {\n  isSynced: boolean;\n  onClick: () => void;\n}\n\nexport function TimeSyncButton(props: TimeSyncButtonProps) {\n  const { onClick, isSynced } = props;\n\n  const syncTimesTooltip = () => {\n    const { isSynced } = props;\n    const tooltip = isSynced ? 'Unsync all views' : 'Sync all views to this time range';\n    return <>{tooltip}</>;\n  };\n\n  return (\n    <Tooltip content={syncTimesTooltip} placement=\"bottom\">\n      <ToolbarButton\n        icon=\"link\"\n        variant={isSynced ? 'active' : 'canvas'}\n        aria-label={isSynced ? 'Synced times' : 'Unsynced times'}\n        onClick={onClick}\n      />\n    </Tooltip>\n  );\n}\n","import { Component } from 'react';\n\nimport { TimeRange, RawTimeRange, dateTimeForTimeZone, dateMath } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { TimeZone } from '@grafana/schema';\nimport { TimePickerWithHistory } from 'app/core/components/TimePicker/TimePickerWithHistory';\nimport { getShiftedTimeRange, getZoomedTimeRange } from 'app/core/utils/timePicker';\n\nimport { TimeSyncButton } from './TimeSyncButton';\n\nexport interface Props {\n  exploreId: string;\n  hideText?: boolean;\n  range: TimeRange;\n  timeZone: TimeZone;\n  fiscalYearStartMonth: number;\n  splitted: boolean;\n  syncedTimes: boolean;\n  onChangeTimeSync: () => void;\n  onChangeTime: (range: RawTimeRange) => void;\n  onChangeTimeZone: (timeZone: TimeZone) => void;\n  onChangeFiscalYearStartMonth: (fiscalYearStartMonth: number) => void;\n}\n\nexport class ExploreTimeControls extends Component<Props> {\n  onMoveTimePicker = (direction: number) => {\n    const { range, onChangeTime, timeZone } = this.props;\n    const { from, to } = getShiftedTimeRange(direction, range);\n    const nextTimeRange = {\n      from: dateTimeForTimeZone(timeZone, from),\n      to: dateTimeForTimeZone(timeZone, to),\n    };\n\n    onChangeTime(nextTimeRange);\n  };\n\n  onMoveForward = () => this.onMoveTimePicker(1);\n  onMoveBack = () => this.onMoveTimePicker(-1);\n\n  onChangeTimePicker = (timeRange: TimeRange) => {\n    const adjustedFrom = dateMath.isMathString(timeRange.raw.from) ? timeRange.raw.from : timeRange.from;\n    const adjustedTo = dateMath.isMathString(timeRange.raw.to) ? timeRange.raw.to : timeRange.to;\n\n    this.props.onChangeTime({\n      from: adjustedFrom,\n      to: adjustedTo,\n    });\n\n    reportInteraction('grafana_explore_time_picker_time_range_changed', {\n      timeRangeFrom: adjustedFrom,\n      timeRangeTo: adjustedTo,\n    });\n  };\n\n  onZoom = () => {\n    const { range, onChangeTime, timeZone } = this.props;\n    const { from, to } = getZoomedTimeRange(range, 2);\n    const nextTimeRange = {\n      from: dateTimeForTimeZone(timeZone, from),\n      to: dateTimeForTimeZone(timeZone, to),\n    };\n\n    onChangeTime(nextTimeRange);\n  };\n\n  render() {\n    const {\n      range,\n      timeZone,\n      fiscalYearStartMonth,\n      splitted,\n      syncedTimes,\n      onChangeTimeSync,\n      hideText,\n      onChangeTimeZone,\n      onChangeFiscalYearStartMonth,\n    } = this.props;\n    const timeSyncButton = splitted ? <TimeSyncButton onClick={onChangeTimeSync} isSynced={syncedTimes} /> : undefined;\n    const timePickerCommonProps = {\n      value: range,\n      timeZone,\n      fiscalYearStartMonth,\n      onMoveBackward: this.onMoveBack,\n      onMoveForward: this.onMoveForward,\n      onZoom: this.onZoom,\n      hideText,\n    };\n\n    return (\n      <TimePickerWithHistory\n        isOnCanvas\n        {...timePickerCommonProps}\n        timeSyncButton={timeSyncButton}\n        isSynced={syncedTimes}\n        widthOverride={splitted ? window.innerWidth / 2 : undefined}\n        onChange={this.onChangeTimePicker}\n        onChangeTimeZone={onChangeTimeZone}\n        onChangeFiscalYearStartMonth={onChangeFiscalYearStartMonth}\n      />\n    );\n  }\n}\n","import { css } from '@emotion/css';\nimport { useRef } from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nimport { Tooltip, ButtonGroup, ToolbarButton } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\ntype LiveTailButtonProps = {\n  splitted: boolean;\n  start: () => void;\n  stop: () => void;\n  pause: () => void;\n  resume: () => void;\n  isLive: boolean;\n  isPaused: boolean;\n};\n\nexport function LiveTailButton(props: LiveTailButtonProps) {\n  const transitionRef = useRef(null);\n  const { start, pause, resume, isLive, isPaused, stop, splitted } = props;\n  const buttonVariant = isLive && !isPaused ? 'active' : 'canvas';\n  const onClickMain = isLive ? (isPaused ? resume : pause) : start;\n\n  return (\n    <ButtonGroup>\n      <Tooltip\n        content={\n          isLive && !isPaused ? (\n            <>\n              <Trans i18nKey=\"explore.live-tail-button.pause-the-live-stream\">Pause the live stream</Trans>\n            </>\n          ) : (\n            <>\n              <Trans i18nKey=\"explore.live-tail-button.start-live-stream-your-logs\">Start live stream your logs</Trans>\n            </>\n          )\n        }\n        placement=\"bottom\"\n      >\n        <ToolbarButton\n          iconOnly={splitted}\n          variant={buttonVariant}\n          icon={!isLive || isPaused ? 'play' : 'pause'}\n          onClick={onClickMain}\n        >\n          {isLive && isPaused ? 'Paused' : 'Live'}\n        </ToolbarButton>\n      </Tooltip>\n\n      <CSSTransition\n        mountOnEnter={true}\n        unmountOnExit={true}\n        timeout={100}\n        in={isLive}\n        classNames={{\n          enter: styles.stopButtonEnter,\n          enterActive: styles.stopButtonEnterActive,\n          exit: styles.stopButtonExit,\n          exitActive: styles.stopButtonExitActive,\n        }}\n        nodeRef={transitionRef}\n      >\n        <Tooltip\n          content={\n            <>\n              <Trans i18nKey=\"explore.live-tail-button.stop-and-exit-the-live-stream\">\n                Stop and exit the live stream\n              </Trans>\n            </>\n          }\n          placement=\"bottom\"\n        >\n          <ToolbarButton ref={transitionRef} variant={buttonVariant} onClick={stop} icon=\"square-shape\" />\n        </Tooltip>\n      </CSSTransition>\n    </ButtonGroup>\n  );\n}\n\nconst styles = {\n  stopButtonEnter: css({\n    label: 'stopButtonEnter',\n    width: 0,\n    opacity: 0,\n    overflow: 'hidden',\n  }),\n  stopButtonEnterActive: css({\n    label: 'stopButtonEnterActive',\n    opacity: 1,\n    width: '32px',\n  }),\n  stopButtonExit: css({\n    label: 'stopButtonExit',\n    width: '32px',\n    opacity: 1,\n    overflow: 'hidden',\n  }),\n  stopButtonExitActive: css({\n    label: 'stopButtonExitActive',\n    opacity: 0,\n    width: 0,\n  }),\n};\n","import { useState } from 'react';\n\nimport { IconName } from '@grafana/data';\nimport { reportInteraction, config } from '@grafana/runtime';\nimport { Dropdown, Menu, MenuGroup, ButtonGroup, Button } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\nimport { copyStringToClipboard } from 'app/core/utils/explore';\nimport { createAndCopyShortLink } from 'app/core/utils/shortLinks';\nimport { useSelector } from 'app/types';\n\nimport { selectPanes } from './state/selectors';\nimport { constructAbsoluteUrl } from './utils/links';\n\ninterface ShortLinkGroupData {\n  key: string;\n  label: string;\n  items: ShortLinkMenuItemData[];\n}\n\ninterface ShortLinkMenuItemData {\n  key: string;\n  label: string;\n  icon: IconName;\n  getUrl: Function;\n  shorten: boolean;\n  absTime: boolean;\n}\n\nconst defaultMode: ShortLinkMenuItemData = {\n  key: 'copy-link',\n  label: t('explore.toolbar.copy-shortened-link', 'Copy shortened URL'),\n  icon: 'share-alt',\n  getUrl: () => undefined,\n  shorten: true,\n  absTime: false,\n};\n\nexport function ShortLinkButtonMenu() {\n  const panes = useSelector(selectPanes);\n  const [isOpen, setIsOpen] = useState(false);\n  const [lastSelected, setLastSelected] = useState(defaultMode);\n  const onCopyLink = (shorten: boolean, absTime: boolean, url?: string) => {\n    if (shorten) {\n      createAndCopyShortLink(url || global.location.href);\n      reportInteraction('grafana_explore_shortened_link_clicked', { isAbsoluteTime: absTime });\n    } else {\n      copyStringToClipboard(\n        url !== undefined\n          ? `${window.location.protocol}//${window.location.host}${config.appSubUrl}${url}`\n          : global.location.href\n      );\n      reportInteraction('grafana_explore_copy_link_clicked', { isAbsoluteTime: absTime });\n    }\n  };\n\n  const menuOptions: ShortLinkGroupData[] = [\n    {\n      key: 'normal',\n      label: t('explore.toolbar.copy-links-normal-category', 'Normal URL links'),\n      items: [\n        {\n          key: 'copy-shortened-link',\n          icon: 'link',\n          label: t('explore.toolbar.copy-shortened-link', 'Copy shortened URL'),\n          getUrl: () => undefined,\n          shorten: true,\n          absTime: false,\n        },\n        {\n          key: 'copy-link',\n          icon: 'link',\n          label: t('explore.toolbar.copy-link', 'Copy URL'),\n          getUrl: () => undefined,\n          shorten: false,\n          absTime: false,\n        },\n      ],\n    },\n    {\n      key: 'timesync',\n      label: t('explore.toolbar.copy-links-absolute-category', 'Time-sync URL links (share with time range intact)'),\n      items: [\n        {\n          key: 'copy-short-link-abs-time',\n          icon: 'clock-nine',\n          label: t('explore.toolbar.copy-shortened-link-abs-time', 'Copy absolute shortened URL'),\n          shorten: true,\n          getUrl: () => {\n            return constructAbsoluteUrl(panes);\n          },\n          absTime: true,\n        },\n        {\n          key: 'copy-link-abs-time',\n          icon: 'clock-nine',\n          label: t('explore.toolbar.copy-link-abs-time', 'Copy absolute URL'),\n          shorten: false,\n          getUrl: () => {\n            return constructAbsoluteUrl(panes);\n          },\n          absTime: true,\n        },\n      ],\n    },\n  ];\n\n  const MenuActions = (\n    <Menu>\n      {menuOptions.map((groupOption) => {\n        return (\n          <MenuGroup key={groupOption.key} label={groupOption.label}>\n            {groupOption.items.map((option) => {\n              return (\n                <Menu.Item\n                  key={option.key}\n                  label={option.label}\n                  icon={option.icon}\n                  onClick={() => {\n                    const url = option.getUrl();\n                    onCopyLink(option.shorten, option.absTime, url);\n                    setLastSelected(option);\n                  }}\n                />\n              );\n            })}\n          </MenuGroup>\n        );\n      })}\n    </Menu>\n  );\n\n  // we need the Toolbar button click to be an action separate from opening/closing the menu\n  return (\n    <ButtonGroup>\n      <Button\n        tooltip={lastSelected.label}\n        icon={lastSelected.icon}\n        size=\"sm\"\n        variant=\"secondary\"\n        onClick={() => {\n          const url = lastSelected.getUrl();\n          onCopyLink(lastSelected.shorten, lastSelected.absTime, url);\n        }}\n        aria-label={t('explore.toolbar.copy-shortened-link', 'Copy shortened URL')}\n      >\n        <Trans i18nKey=\"explore.toolbar.copy-shortened-link-label\">Share</Trans>\n      </Button>\n      <Dropdown overlay={MenuActions} placement=\"bottom-end\" onVisibleChange={setIsOpen}>\n        <Button\n          variant={'secondary'}\n          size=\"sm\"\n          icon={isOpen ? 'angle-up' : 'angle-down'}\n          aria-label={t('explore.toolbar.copy-shortened-link-menu', 'Open copy link options')}\n        />\n      </Dropdown>\n    </ButtonGroup>\n  );\n}\n","import { lazy, Suspense } from 'react';\n\nimport { Dropdown, ToolbarButton } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction } from 'app/types/accessControl';\n\nimport { Trans } from '../../../../core/internationalization';\nimport { ToolbarExtensionPointMenu } from '../ToolbarExtensionPointMenu';\n\nimport { ExtensionDropdownProps } from './types';\n\nconst AddToDashboard = lazy(() =>\n  import('./../AddToDashboard').then(({ AddToDashboard }) => ({ default: AddToDashboard }))\n);\n\nexport function BasicExtensions(props: ExtensionDropdownProps) {\n  const { exploreId, links, setSelectedExtension, setIsModalOpen, isModalOpen, noQueriesInPane } = props;\n  // If we only have the explore core extension point registered we show the old way of\n  // adding a query to a dashboard.\n  if (links.length <= 1) {\n    const canAddPanelToDashboard =\n      contextSrv.hasPermission(AccessControlAction.DashboardsCreate) ||\n      contextSrv.hasPermission(AccessControlAction.DashboardsWrite);\n\n    if (!canAddPanelToDashboard) {\n      return null;\n    }\n\n    return (\n      <Suspense fallback={null}>\n        <AddToDashboard exploreId={exploreId} />\n      </Suspense>\n    );\n  }\n\n  const menu = <ToolbarExtensionPointMenu extensions={links} onSelect={setSelectedExtension} />;\n\n  return (\n    <>\n      <Dropdown onVisibleChange={setIsModalOpen} placement=\"bottom-start\" overlay={menu}>\n        <ToolbarButton\n          aria-label={t('explore.basic-extensions.aria-label-add', 'Add')}\n          disabled={!Boolean(noQueriesInPane)}\n          variant=\"canvas\"\n          isOpen={isModalOpen}\n        >\n          <Trans i18nKey=\"explore.toolbar.add-to-extensions\">Add</Trans>\n        </ToolbarButton>\n      </Dropdown>\n    </>\n  );\n}\n","import { first } from 'lodash';\n\nimport { Dropdown, ToolbarButton } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { Trans } from '../../../../core/internationalization';\nimport { ToolbarExtensionPointMenu } from '../ToolbarExtensionPointMenu';\n\nimport { ExtensionDropdownProps } from './types';\n\nexport function QuerylessAppsExtensions(props: ExtensionDropdownProps) {\n  const { links, setSelectedExtension, setIsModalOpen, isModalOpen, noQueriesInPane } = props;\n\n  if (links.length === 0) {\n    return undefined;\n  }\n\n  const menu = <ToolbarExtensionPointMenu extensions={links} onSelect={setSelectedExtension} />;\n\n  if (links.length === 1) {\n    const link = first(links)!;\n    return (\n      <ToolbarButton variant=\"canvas\" icon={link.icon} onClick={() => setSelectedExtension(link)}>\n        <Trans i18nKey=\"explore.toolbar.add-to-queryless-extensions\">Go queryless</Trans>\n      </ToolbarButton>\n    );\n  }\n\n  return (\n    <>\n      <Dropdown onVisibleChange={setIsModalOpen} placement=\"bottom-start\" overlay={menu}>\n        <ToolbarButton\n          aria-label={t('explore.queryless-apps-extensions.aria-label-go-queryless', 'Go queryless')}\n          disabled={!Boolean(noQueriesInPane)}\n          variant=\"canvas\"\n          isOpen={isModalOpen}\n        >\n          <Trans i18nKey=\"explore.toolbar.add-to-queryless-extensions\">Go queryless</Trans>\n        </ToolbarButton>\n      </Dropdown>\n    </>\n  );\n}\n","import { ReactElement, useMemo, useState } from 'react';\n\nimport { type PluginExtensionLink, PluginExtensionPoints, RawTimeRange, getTimeZone } from '@grafana/data';\nimport { config, reportInteraction, usePluginLinks } from '@grafana/runtime';\nimport { DataQuery, TimeZone } from '@grafana/schema';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction, ExplorePanelData, useSelector } from 'app/types';\n\nimport { getExploreItemSelector, isLeftPaneSelector, selectCorrelationDetails } from '../state/selectors';\n\nimport { ConfirmNavigationModal } from './ConfirmNavigationModal';\nimport { BasicExtensions } from './toolbar/BasicExtensions';\nimport { QuerylessAppsExtensions } from './toolbar/QuerylessAppsExtensions';\n\ntype Props = {\n  exploreId: string;\n  timeZone: TimeZone;\n  extensionsToShow: 'queryless' | 'basic';\n};\n\nconst QUERYLESS_APPS = [\n  'grafana-pyroscope-app',\n  'grafana-lokiexplore-app',\n  'grafana-exploretraces-app',\n  'grafana-metricsdrilldown-app',\n];\n\nexport function ToolbarExtensionPoint(props: Props): ReactElement | null {\n  const { exploreId, extensionsToShow } = props;\n  const [selectedExtension, setSelectedExtension] = useState<PluginExtensionLink | undefined>();\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const context = useExtensionPointContext(props);\n  // TODO: Pull it up to avoid calling it twice\n  const { links } = usePluginLinks({\n    extensionPointId: PluginExtensionPoints.ExploreToolbarAction,\n    context: context,\n    limitPerPlugin: 3,\n  });\n  const selectExploreItem = getExploreItemSelector(exploreId);\n  const noQueriesInPane = Boolean(useSelector(selectExploreItem)?.queries?.length);\n\n  const querylessLinks = links.filter((link) => QUERYLESS_APPS.includes(link.pluginId));\n  const commonLinks = links.filter((link) => !QUERYLESS_APPS.includes(link.pluginId));\n\n  return (\n    <>\n      {extensionsToShow === 'queryless' && (\n        <QuerylessAppsExtensions\n          links={querylessLinks}\n          noQueriesInPane={noQueriesInPane}\n          exploreId={exploreId}\n          setSelectedExtension={(extension) => {\n            setSelectedExtension(extension);\n            reportInteraction('grafana_explore_queryless_app_link_clicked', {\n              pluginId: extension.pluginId,\n            });\n          }}\n          setIsModalOpen={setIsOpen}\n          isModalOpen={isOpen}\n        />\n      )}\n      {extensionsToShow === 'basic' && (\n        <BasicExtensions\n          links={commonLinks}\n          noQueriesInPane={noQueriesInPane}\n          exploreId={exploreId}\n          setSelectedExtension={setSelectedExtension}\n          setIsModalOpen={setIsOpen}\n          isModalOpen={isOpen}\n        />\n      )}\n      {!!selectedExtension && !!selectedExtension.path && (\n        <ConfirmNavigationModal\n          path={selectedExtension.path}\n          title={selectedExtension.title}\n          onDismiss={() => setSelectedExtension(undefined)}\n        />\n      )}\n    </>\n  );\n}\n\nexport type PluginExtensionExploreContext = {\n  exploreId: string;\n  targets: DataQuery[];\n  data: ExplorePanelData;\n  timeRange: RawTimeRange;\n  timeZone: TimeZone;\n  shouldShowAddCorrelation: boolean;\n};\n\nfunction useExtensionPointContext(props: Props): PluginExtensionExploreContext {\n  const { exploreId, timeZone } = props;\n  const isCorrelationDetails = useSelector(selectCorrelationDetails);\n  const isCorrelationsEditorMode = isCorrelationDetails?.editorMode || false;\n  const { queries, queryResponse, range } = useSelector(getExploreItemSelector(exploreId))!;\n  const isLeftPane = useSelector(isLeftPaneSelector(exploreId));\n\n  const datasourceUids = queries.map((query) => query?.datasource?.uid).filter((uid) => uid !== undefined);\n  const numUniqueIds = [...new Set(datasourceUids)].length;\n  const canWriteCorrelations = contextSrv.hasPermission(AccessControlAction.DataSourcesWrite);\n\n  return useMemo(() => {\n    return {\n      exploreId,\n      targets: queries,\n      data: queryResponse,\n      timeRange: range.raw,\n      timeZone: getTimeZone({ timeZone }),\n      shouldShowAddCorrelation:\n        config.featureToggles.correlations === true &&\n        canWriteCorrelations &&\n        !isCorrelationsEditorMode &&\n        isLeftPane &&\n        numUniqueIds === 1,\n    };\n  }, [\n    exploreId,\n    queries,\n    queryResponse,\n    range.raw,\n    timeZone,\n    canWriteCorrelations,\n    isCorrelationsEditorMode,\n    isLeftPane,\n    numUniqueIds,\n  ]);\n}\n","import { useCallback } from 'react';\nimport * as React from 'react';\n\nimport { RefreshPicker } from '@grafana/ui';\nimport { useDispatch } from 'app/types';\n\nimport { setPausedStateAction, runQueries, clearLogs } from './state/query';\nimport { changeRefreshInterval } from './state/time';\n\n/**\n * Hook that gives you all the functions needed to control the live tailing.\n */\nexport function useLiveTailControls(exploreId: string) {\n  const dispatch = useDispatch();\n\n  const pause = useCallback(() => {\n    dispatch(setPausedStateAction({ exploreId, isPaused: true }));\n  }, [exploreId, dispatch]);\n\n  const resume = useCallback(() => {\n    dispatch(setPausedStateAction({ exploreId, isPaused: false }));\n  }, [exploreId, dispatch]);\n\n  const stop = useCallback(() => {\n    // We need to pause here first because there is transition where we are not live but live logs are still shown\n    // to cross fade with the normal view. This will prevent reordering of the logs in the live view during the\n    // transition.\n    pause();\n\n    // TODO referencing this from perspective of refresh picker when there is designated button for it now is not\n    //  great. Needs a bit of refactoring.\n    dispatch(changeRefreshInterval({ exploreId, refreshInterval: RefreshPicker.offOption.value }));\n    dispatch(runQueries({ exploreId }));\n  }, [exploreId, dispatch, pause]);\n\n  const start = useCallback(() => {\n    dispatch(changeRefreshInterval({ exploreId, refreshInterval: RefreshPicker.liveOption.value }));\n  }, [exploreId, dispatch]);\n\n  const clear = useCallback(() => {\n    dispatch(clearLogs({ exploreId }));\n  }, [exploreId, dispatch]);\n\n  return {\n    pause,\n    resume,\n    stop,\n    start,\n    clear,\n  };\n}\n\ntype Props = {\n  exploreId: string;\n  children: (controls: ReturnType<typeof useLiveTailControls>) => React.ReactElement;\n};\n\n/**\n * If you can't use the hook you can use this as a render prop pattern.\n */\nexport function LiveTailControls(props: Props) {\n  const controls = useLiveTailControls(props.exploreId);\n  return props.children(controls);\n}\n","import { css, cx } from '@emotion/css';\nimport { pick } from 'lodash';\nimport { useMemo } from 'react';\nimport { shallowEqual } from 'react-redux';\n\nimport { DataSourceInstanceSettings, RawTimeRange, GrafanaTheme2 } from '@grafana/data';\nimport { Components } from '@grafana/e2e-selectors';\nimport { reportInteraction } from '@grafana/runtime';\nimport {\n  defaultIntervals,\n  PageToolbar,\n  RefreshPicker,\n  SetInterval,\n  ToolbarButton,\n  ButtonGroup,\n  useStyles2,\n  Button,\n} from '@grafana/ui';\nimport { AppChromeUpdate } from 'app/core/components/AppChrome/AppChromeUpdate';\nimport { t, Trans } from 'app/core/internationalization';\nimport { DataSourcePicker } from 'app/features/datasources/components/picker/DataSourcePicker';\nimport { CORRELATION_EDITOR_POST_CONFIRM_ACTION } from 'app/types/explore';\nimport { StoreState, useDispatch, useSelector } from 'app/types/store';\n\nimport { contextSrv } from '../../core/core';\nimport { updateFiscalYearStartMonthForSession, updateTimeZoneForSession } from '../profile/state/reducers';\nimport { getFiscalYearStartMonth, getTimeZone } from '../profile/state/selectors';\n\nimport { ExploreTimeControls } from './ExploreTimeControls';\nimport { LiveTailButton } from './LiveTailButton';\nimport { useQueriesDrawerContext } from './QueriesDrawer/QueriesDrawerContext';\nimport { ShortLinkButtonMenu } from './ShortLinkButtonMenu';\nimport { ToolbarExtensionPoint } from './extensions/ToolbarExtensionPoint';\nimport { changeDatasource } from './state/datasource';\nimport { changeCorrelationHelperData } from './state/explorePane';\nimport {\n  splitClose,\n  splitOpen,\n  maximizePaneAction,\n  evenPaneResizeAction,\n  changeCorrelationEditorDetails,\n} from './state/main';\nimport { cancelQueries, runQueries, selectIsWaitingForData } from './state/query';\nimport { isLeftPaneSelector, isSplit, selectCorrelationDetails, selectPanesEntries } from './state/selectors';\nimport { syncTimes, changeRefreshInterval } from './state/time';\nimport { LiveTailControls } from './useLiveTailControls';\n\nconst getStyles = (theme: GrafanaTheme2, splitted: Boolean) => ({\n  rotateIcon: css({\n    '> div > svg': {\n      transform: 'rotate(180deg)',\n    },\n  }),\n  toolbarButton: css({\n    display: 'flex',\n    justifyContent: 'center',\n    marginRight: theme.spacing(0.5),\n    width: splitted && theme.spacing(6),\n  }),\n});\n\ninterface Props {\n  exploreId: string;\n  onChangeTime: (range: RawTimeRange, changedByScanner?: boolean) => void;\n  onContentOutlineToogle: () => void;\n  isContentOutlineOpen: boolean;\n}\n\nexport function ExploreToolbar({ exploreId, onChangeTime, onContentOutlineToogle, isContentOutlineOpen }: Props) {\n  const dispatch = useDispatch();\n  const splitted = useSelector(isSplit);\n  const styles = useStyles2(getStyles, splitted);\n\n  const timeZone = useSelector((state: StoreState) => getTimeZone(state.user));\n  const fiscalYearStartMonth = useSelector((state: StoreState) => getFiscalYearStartMonth(state.user));\n  const { refreshInterval, datasourceInstance, range, isLive, isPaused, syncedTimes } = useSelector(\n    (state: StoreState) => ({\n      ...pick(state.explore.panes[exploreId]!, 'refreshInterval', 'datasourceInstance', 'range', 'isLive', 'isPaused'),\n      syncedTimes: state.explore.syncedTimes,\n    }),\n    shallowEqual\n  );\n  const loading = useSelector(selectIsWaitingForData(exploreId));\n  const isLargerPane = useSelector((state: StoreState) => state.explore.largerExploreId === exploreId);\n  const showSmallTimePicker = useSelector((state) => splitted || state.explore.panes[exploreId]!.containerWidth < 1210);\n  const showSmallDataSourcePicker = useSelector(\n    (state) => state.explore.panes[exploreId]!.containerWidth < (splitted ? 700 : 800)\n  );\n\n  const panes = useSelector(selectPanesEntries);\n  const correlationDetails = useSelector(selectCorrelationDetails);\n  const isCorrelationsEditorMode = correlationDetails?.editorMode || false;\n  const isLeftPane = useSelector(isLeftPaneSelector(exploreId));\n  const { drawerOpened, setDrawerOpened } = useQueriesDrawerContext();\n\n  const shouldRotateSplitIcon = useMemo(\n    () => (isLeftPane && isLargerPane) || (!isLeftPane && !isLargerPane),\n    [isLeftPane, isLargerPane]\n  );\n\n  const refreshPickerLabel = loading\n    ? t('explore.toolbar.refresh-picker-cancel', 'Cancel')\n    : t('explore.toolbar.refresh-picker-run', 'Run query');\n\n  const onChangeDatasource = async (dsSettings: DataSourceInstanceSettings) => {\n    if (!isCorrelationsEditorMode) {\n      dispatch(changeDatasource({ exploreId, datasource: dsSettings.uid, options: { importQueries: true } }));\n    } else {\n      if (correlationDetails?.correlationDirty || correlationDetails?.queryEditorDirty) {\n        // prompt will handle datasource change if needed\n        dispatch(\n          changeCorrelationEditorDetails({\n            isExiting: true,\n            postConfirmAction: {\n              exploreId: exploreId,\n              action: CORRELATION_EDITOR_POST_CONFIRM_ACTION.CHANGE_DATASOURCE,\n              changeDatasourceUid: dsSettings.uid,\n              isActionLeft: isLeftPane,\n            },\n          })\n        );\n      } else {\n        // if the left pane is changing, clear helper data for right pane\n        if (isLeftPane) {\n          panes.forEach((pane) => {\n            dispatch(\n              changeCorrelationHelperData({\n                exploreId: pane[0],\n                correlationEditorHelperData: undefined,\n              })\n            );\n          });\n        }\n\n        dispatch(changeDatasource({ exploreId, datasource: dsSettings.uid, options: { importQueries: true } }));\n      }\n    }\n  };\n\n  const onRunQuery = (loading = false) => {\n    if (loading) {\n      return dispatch(cancelQueries(exploreId));\n    } else {\n      return dispatch(runQueries({ exploreId }));\n    }\n  };\n\n  const onChangeTimeZone = (timezone: string) => dispatch(updateTimeZoneForSession(timezone));\n\n  const onOpenSplitView = () => {\n    dispatch(splitOpen());\n    reportInteraction('grafana_explore_split_view_opened', { origin: 'menu' });\n  };\n\n  const onCloseSplitView = () => {\n    if (isCorrelationsEditorMode) {\n      if (correlationDetails?.correlationDirty || correlationDetails?.queryEditorDirty) {\n        // if dirty, prompt\n        dispatch(\n          changeCorrelationEditorDetails({\n            isExiting: true,\n            postConfirmAction: {\n              exploreId: exploreId,\n              action: CORRELATION_EDITOR_POST_CONFIRM_ACTION.CLOSE_PANE,\n              isActionLeft: isLeftPane,\n            },\n          })\n        );\n      } else {\n        // otherwise, clear helper data and close\n        panes.forEach((pane) => {\n          dispatch(\n            changeCorrelationHelperData({\n              exploreId: pane[0],\n              correlationEditorHelperData: undefined,\n            })\n          );\n        });\n        dispatch(splitClose(exploreId));\n        reportInteraction('grafana_explore_split_view_closed');\n      }\n    } else {\n      dispatch(splitClose(exploreId));\n      reportInteraction('grafana_explore_split_view_closed');\n    }\n  };\n\n  const onClickResize = () => {\n    if (isLargerPane) {\n      dispatch(evenPaneResizeAction());\n    } else {\n      dispatch(maximizePaneAction({ exploreId }));\n    }\n  };\n\n  const onChangeTimeSync = () => {\n    dispatch(syncTimes(exploreId));\n  };\n\n  const onChangeFiscalYearStartMonth = (fiscalyearStartMonth: number) =>\n    dispatch(updateFiscalYearStartMonthForSession(fiscalyearStartMonth));\n\n  const onChangeRefreshInterval = (refreshInterval: string) => {\n    dispatch(changeRefreshInterval({ exploreId, refreshInterval }));\n  };\n\n  const navBarActions = [\n    <Button\n      key=\"query-history\"\n      size=\"sm\"\n      variant={'secondary'}\n      aria-label={t('explore.secondary-actions.query-history-button-aria-label', 'Query history')}\n      onClick={() => setDrawerOpened(!drawerOpened)}\n      data-testid={Components.QueryTab.queryHistoryButton}\n      icon=\"history\"\n    >\n      <Trans i18nKey=\"explore.secondary-actions.query-history-button\">Query history</Trans>\n    </Button>,\n    <ShortLinkButtonMenu key=\"share\" />,\n  ];\n\n  return (\n    <div>\n      {refreshInterval && <SetInterval func={onRunQuery} interval={refreshInterval} loading={loading} />}\n      <AppChromeUpdate actions={navBarActions} />\n      <PageToolbar\n        aria-label={t('explore.toolbar.aria-label', 'Explore toolbar')}\n        leftItems={[\n          <ToolbarButton\n            key=\"content-outline\"\n            variant=\"canvas\"\n            tooltip={t('explore.explore-toolbar.tooltip-content-outline', 'Content outline')}\n            icon=\"list-ui-alt\"\n            iconOnly={splitted}\n            onClick={onContentOutlineToogle}\n            aria-expanded={isContentOutlineOpen}\n            aria-controls={isContentOutlineOpen ? 'content-outline-container' : undefined}\n            className={styles.toolbarButton}\n          >\n            <Trans i18nKey=\"explore.explore-toolbar.outline\">Outline</Trans>\n          </ToolbarButton>,\n          <DataSourcePicker\n            key={`${exploreId}-ds-picker`}\n            mixed={!isCorrelationsEditorMode}\n            onChange={onChangeDatasource}\n            current={datasourceInstance?.getRef()}\n            hideTextValue={showSmallDataSourcePicker}\n            width={showSmallDataSourcePicker ? 8 : undefined}\n          />,\n          <ToolbarExtensionPoint\n            key=\"toolbar-extension-point\"\n            exploreId={exploreId}\n            timeZone={timeZone}\n            extensionsToShow=\"queryless\"\n          />,\n        ].filter(Boolean)}\n        forceShowLeftItems\n      >\n        {[\n          !splitted ? (\n            <ToolbarButton\n              variant=\"canvas\"\n              key=\"split\"\n              tooltip={t('explore.toolbar.split-tooltip', 'Split the pane')}\n              onClick={onOpenSplitView}\n              icon=\"columns\"\n              disabled={isLive}\n            >\n              <Trans i18nKey=\"explore.toolbar.split-title\">Split</Trans>\n            </ToolbarButton>\n          ) : (\n            <ButtonGroup key=\"split-controls\">\n              <ToolbarButton\n                variant=\"canvas\"\n                tooltip={\n                  isLargerPane\n                    ? t('explore.toolbar.split-narrow', 'Narrow pane')\n                    : t('explore.toolbar.split-widen', 'Widen pane')\n                }\n                onClick={onClickResize}\n                icon={isLargerPane ? 'gf-movepane-left' : 'gf-movepane-right'}\n                iconOnly={true}\n                className={cx(shouldRotateSplitIcon && styles.rotateIcon)}\n              />\n              <ToolbarButton\n                tooltip={t('explore.toolbar.split-close-tooltip', 'Close split pane')}\n                onClick={onCloseSplitView}\n                icon=\"times\"\n                variant=\"canvas\"\n              >\n                <Trans i18nKey=\"explore.toolbar.split-close\"> Close </Trans>\n              </ToolbarButton>\n            </ButtonGroup>\n          ),\n          <ToolbarExtensionPoint\n            key=\"toolbar-extension-point\"\n            exploreId={exploreId}\n            timeZone={timeZone}\n            extensionsToShow=\"basic\"\n          />,\n          !isLive && (\n            <ExploreTimeControls\n              key=\"timeControls\"\n              exploreId={exploreId}\n              range={range}\n              timeZone={timeZone}\n              fiscalYearStartMonth={fiscalYearStartMonth}\n              onChangeTime={onChangeTime}\n              splitted={splitted}\n              syncedTimes={syncedTimes}\n              onChangeTimeSync={onChangeTimeSync}\n              hideText={showSmallTimePicker}\n              onChangeTimeZone={onChangeTimeZone}\n              onChangeFiscalYearStartMonth={onChangeFiscalYearStartMonth}\n            />\n          ),\n          <RefreshPicker\n            key=\"refreshPicker\"\n            onIntervalChanged={onChangeRefreshInterval}\n            value={refreshInterval}\n            isLoading={loading}\n            text={showSmallTimePicker ? undefined : refreshPickerLabel}\n            tooltip={showSmallTimePicker ? refreshPickerLabel : undefined}\n            intervals={contextSrv.getValidIntervals(defaultIntervals)}\n            isLive={isLive}\n            onRefresh={() => onRunQuery(loading)}\n            noIntervalPicker={isLive}\n            primary={true}\n            width={(showSmallTimePicker ? 35 : 108) + 'px'}\n          />,\n          datasourceInstance?.meta.streaming && (\n            <LiveTailControls key=\"liveControls\" exploreId={exploreId}>\n              {(c) => {\n                const controls = {\n                  ...c,\n                  start: () => {\n                    reportInteraction('grafana_explore_logs_live_tailing_clicked', {\n                      datasourceType: datasourceInstance?.type,\n                    });\n                    c.start();\n                  },\n                };\n                return (\n                  <LiveTailButton\n                    splitted={splitted}\n                    isLive={isLive}\n                    isPaused={isPaused}\n                    start={controls.start}\n                    pause={controls.pause}\n                    resume={controls.resume}\n                    stop={controls.stop}\n                  />\n                );\n              }}\n            </LiveTailControls>\n          ),\n        ].filter(Boolean)}\n      </PageToolbar>\n    </div>\n  );\n}\n","import { css } from '@emotion/css';\n\nimport { DataFrame, GrafanaTheme2, CoreApp } from '@grafana/data';\nimport { FlameGraph } from '@grafana/flamegraph';\nimport { reportInteraction, config } from '@grafana/runtime';\nimport { useStyles2 } from '@grafana/ui';\n\ninterface Props {\n  dataFrames: DataFrame[];\n}\n\nfunction interaction(name: string, context: Record<string, string | number> = {}) {\n  reportInteraction(`grafana_flamegraph_${name}`, {\n    app: CoreApp.Unknown,\n    grafana_version: config.buildInfo.version,\n    ...context,\n  });\n}\n\nexport const FlameGraphExploreContainer = (props: Props) => {\n  const styles = useStyles2((theme) => getStyles(theme));\n\n  return (\n    <div className={styles.container}>\n      <FlameGraph\n        data={props.dataFrames[0]}\n        stickyHeader={true}\n        getTheme={() => config.theme2}\n        onTableSymbolClick={() => interaction('table_item_selected')}\n        onViewSelected={(view: string) => interaction('view_selected', { view })}\n        onTextAlignSelected={(align: string) => interaction('text_align_selected', { align })}\n        onTableSort={(sort: string) => interaction('table_sort_selected', { sort })}\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    background: theme.colors.background.primary,\n    display: 'flow-root',\n    padding: theme.spacing(0, 1, 1, 1),\n    border: `1px solid ${theme.components.panel.borderColor}`,\n    borderRadius: theme.shape.radius.default,\n  }),\n});\n","import { useState, useEffect } from 'react';\nimport { useInterval } from 'react-use';\n\nimport { Time, TimeProps } from './Time';\n\nconst INTERVAL = 150;\n\nexport interface ElapsedTimeProps extends Omit<TimeProps, 'timeInMs'> {\n  // Use this to reset the timer. Any value is allowed just need to be !== from the previous.\n  // Keep in mind things like [] !== [] or {} !== {}.\n  resetKey?: unknown;\n}\n\nexport const ElapsedTime = ({ resetKey, humanize, className }: ElapsedTimeProps) => {\n  const [elapsed, setElapsed] = useState(0); // the current value of elapsed\n\n  // hook that will schedule a interval and then update the elapsed value on every tick.\n  useInterval(() => setElapsed(elapsed + INTERVAL), INTERVAL);\n  // this effect will only be run when resetKey changes. This will reset the elapsed to 0.\n  useEffect(() => setElapsed(0), [resetKey]);\n\n  return <Time timeInMs={elapsed} className={className} humanize={humanize} />;\n};\n","import { css, cx, keyframes } from '@emotion/css';\nimport { PureComponent } from 'react';\nimport * as React from 'react';\nimport tinycolor from 'tinycolor2';\n\nimport { LogRowModel, dateTimeFormat, GrafanaTheme2, LogsSortOrder } from '@grafana/data';\nimport { TimeZone } from '@grafana/schema';\nimport { Button, Themeable2, withTheme2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nimport { LogMessageAnsi } from '../../logs/components/LogMessageAnsi';\nimport { getLogRowStyles } from '../../logs/components/getLogRowStyles';\nimport { sortLogRows } from '../../logs/utils';\nimport { ElapsedTime } from '../ElapsedTime';\nimport { filterLogRowsByIndex } from '../state/utils';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const fade = keyframes({\n    from: {\n      backgroundColor: tinycolor(theme.colors.info.transparent).setAlpha(0.25).toString(),\n    },\n    to: {\n      backgroundColor: 'transparent',\n    },\n  });\n\n  return {\n    logsRowsLive: css({\n      label: 'logs-rows-live',\n      fontFamily: theme.typography.fontFamilyMonospace,\n      fontSize: theme.typography.bodySmall.fontSize,\n      display: 'flex',\n      flexFlow: 'column nowrap',\n      height: '60vh',\n      overflowY: 'scroll',\n      ':first-child': {\n        marginTop: 'auto !important',\n      },\n    }),\n    logsRowFade: css({\n      label: 'logs-row-fresh',\n      color: theme.colors.text.primary,\n      backgroundColor: tinycolor(theme.colors.info.transparent).setAlpha(0.25).toString(),\n      [theme.transitions.handleMotion('no-preference', 'reduce')]: {\n        animation: `${fade} 1s ease-out 1s 1 normal forwards`,\n      },\n    }),\n    logsRowsIndicator: css({\n      fontSize: theme.typography.h6.fontSize,\n      paddingTop: theme.spacing(1),\n      display: 'flex',\n      alignItems: 'center',\n    }),\n    button: css({\n      marginRight: theme.spacing(1),\n    }),\n    fullWidth: css({\n      width: '100%',\n    }),\n  };\n};\n\nexport interface Props extends Themeable2 {\n  logRows?: LogRowModel[];\n  timeZone: TimeZone;\n  stopLive: () => void;\n  onPause: () => void;\n  onResume: () => void;\n  onClear: () => void;\n  clearedAtIndex: number | null;\n  isPaused: boolean;\n}\n\ninterface State {\n  logRowsToRender?: LogRowModel[];\n}\n\nclass LiveLogs extends PureComponent<Props, State> {\n  private liveEndDiv: HTMLDivElement | null = null;\n  private scrollContainerRef = React.createRef<HTMLTableSectionElement>();\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      logRowsToRender: props.logRows,\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps: Props, state: State) {\n    if (nextProps.isPaused && nextProps.clearedAtIndex) {\n      return {\n        logRowsToRender: filterLogRowsByIndex(nextProps.clearedAtIndex, state.logRowsToRender),\n      };\n    }\n\n    if (nextProps.isPaused) {\n      return null;\n    }\n\n    return {\n      // We update what we show only if not paused. We keep any background subscriptions running and keep updating\n      // our state, but we do not show the updates, this allows us start again showing correct result after resuming\n      // without creating a gap in the log results.\n      logRowsToRender: nextProps.logRows,\n    };\n  }\n\n  /**\n   * Handle pausing when user scrolls up so that we stop resetting his position to the bottom when new row arrives.\n   * We do not need to throttle it here much, adding new rows should be throttled/buffered itself in the query epics\n   * and after you pause we remove the handler and add it after you manually resume, so this should not be fired often.\n   */\n  onScroll = (event: React.SyntheticEvent) => {\n    const { isPaused, onPause } = this.props;\n    const { scrollTop, clientHeight, scrollHeight } = event.currentTarget;\n    const distanceFromBottom = scrollHeight - (scrollTop + clientHeight);\n    if (distanceFromBottom >= 5 && !isPaused) {\n      onPause();\n    }\n  };\n\n  rowsToRender = () => {\n    const { isPaused } = this.props;\n    let { logRowsToRender: rowsToRender = [] } = this.state;\n    if (!isPaused) {\n      // A perf optimisation here. Show just 100 rows when streaming and full length when the streaming is paused.\n      rowsToRender = sortLogRows(rowsToRender, LogsSortOrder.Ascending).slice(-100);\n    }\n    return rowsToRender;\n  };\n\n  render() {\n    const { theme, timeZone, onPause, onResume, onClear, isPaused } = this.props;\n    const styles = getStyles(theme);\n    const { logsRow, logsRowLocalTime, logsRowMessage } = getLogRowStyles(theme);\n\n    return (\n      <div>\n        <table className={styles.fullWidth}>\n          <tbody\n            onScroll={isPaused ? undefined : this.onScroll}\n            className={styles.logsRowsLive}\n            ref={this.scrollContainerRef}\n          >\n            {this.rowsToRender().map((row: LogRowModel) => {\n              return (\n                <tr className={cx(logsRow, styles.logsRowFade)} key={row.uid}>\n                  <td className={logsRowLocalTime}>{dateTimeFormat(row.timeEpochMs, { timeZone })}</td>\n                  <td className={logsRowMessage}>{row.hasAnsi ? <LogMessageAnsi value={row.raw} /> : row.entry}</td>\n                </tr>\n              );\n            })}\n            <tr\n              ref={(element) => {\n                this.liveEndDiv = element;\n                // This is triggered on every update so on every new row. It keeps the view scrolled at the bottom by\n                // default.\n                // As scrollTo is not implemented in JSDOM it needs to be part of the condition\n                if (this.liveEndDiv && this.scrollContainerRef.current?.scrollTo && !isPaused) {\n                  this.scrollContainerRef.current?.scrollTo(0, this.scrollContainerRef.current.scrollHeight);\n                }\n              }}\n            />\n          </tbody>\n        </table>\n        <div className={styles.logsRowsIndicator}>\n          <Button\n            icon={isPaused ? 'play' : 'pause'}\n            variant=\"secondary\"\n            onClick={isPaused ? onResume : onPause}\n            className={styles.button}\n          >\n            {isPaused ? 'Resume' : 'Pause'}\n          </Button>\n          <Button icon=\"trash-alt\" variant=\"secondary\" onClick={onClear} className={styles.button}>\n            <Trans i18nKey=\"explore.live-logs.clear-logs\">Clear logs</Trans>\n          </Button>\n          <Button icon=\"square-shape\" variant=\"secondary\" onClick={this.props.stopLive} className={styles.button}>\n            <Trans i18nKey=\"explore.live-logs.exit-live-mode\">Exit live mode</Trans>\n          </Button>\n          {isPaused ||\n            (this.rowsToRender().length > 0 && (\n              <span>\n                Last line received: <ElapsedTime resetKey={this.props.logRows} humanize={true} /> ago\n              </span>\n            ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport const LiveLogsWithTheme = withTheme2(LiveLogs);\n","import { css } from '@emotion/css';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Field, Input, useTheme2 } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    searchWrap: css({\n      padding: `${theme.spacing(0.4)} 0 ${theme.spacing(0.4)} ${theme.spacing(0.4)}`,\n    }),\n  };\n}\n\nexport function LogsColumnSearch(props: { onChange: (e: React.FormEvent<HTMLInputElement>) => void; value: string }) {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n  return (\n    <Field className={styles.searchWrap}>\n      <Input\n        value={props.value}\n        type={'text'}\n        placeholder={t('explore.logs-column-search.placeholder-search-fields-by-name', 'Search fields by name')}\n        onChange={props.onChange}\n      />\n    </Field>\n  );\n}\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useTheme2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    empty: css({\n      marginBottom: theme.spacing(2),\n      marginLeft: theme.spacing(1.75),\n      fontSize: theme.typography.fontSize,\n    }),\n  };\n}\n\nexport function LogsTableEmptyFields() {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n  return (\n    <div className={styles.empty}>\n      <Trans i18nKey=\"explore.logs-table-empty-fields.no-fields\">No fields</Trans>\n    </div>\n  );\n}\n","import { css } from '@emotion/css';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Checkbox, Icon, useTheme2 } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { FieldNameMeta } from './LogsTableWrap';\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    dragIcon: css({\n      cursor: 'drag',\n      marginLeft: theme.spacing(1),\n      opacity: 0.4,\n    }),\n    labelCount: css({\n      marginLeft: theme.spacing(0.5),\n      marginRight: theme.spacing(0.5),\n      appearance: 'none',\n      background: 'none',\n      border: 'none',\n      fontSize: theme.typography.pxToRem(11),\n      opacity: 0.6,\n    }),\n    contentWrap: css({\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      width: '100%',\n    }),\n    // Hide text that overflows, had to select elements within the Checkbox component, so this is a bit fragile\n    checkboxLabel: css({\n      '> span': {\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n        display: 'block',\n        maxWidth: '100%',\n      },\n    }),\n  };\n}\n\nexport function LogsTableNavField(props: {\n  label: string;\n  onChange: () => void;\n  labels: Record<string, FieldNameMeta>;\n  draggable?: boolean;\n  showCount?: boolean;\n}): React.JSX.Element | undefined {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  if (props.labels[props.label]) {\n    return (\n      <>\n        <div className={styles.contentWrap}>\n          <Checkbox\n            className={styles.checkboxLabel}\n            label={props.label}\n            onChange={props.onChange}\n            checked={props.labels[props.label]?.active ?? false}\n          />\n          {props.showCount && (\n            <button className={styles.labelCount} onClick={props.onChange}>\n              {props.labels[props.label]?.percentOfLinesWithLabel}%\n            </button>\n          )}\n        </div>\n        {props.draggable && (\n          <Icon\n            aria-label={t('explore.logs-table-nav-field.aria-label-drag-and-drop-icon', 'Drag and drop icon')}\n            title={t('explore.logs-table-nav-field.title-drag-and-drop-to-reorder', 'Drag and drop to reorder')}\n            name=\"draggabledots\"\n            size=\"lg\"\n            className={styles.dragIcon}\n          />\n        )}\n      </>\n    );\n  }\n  return undefined;\n}\n","import { css, cx } from '@emotion/css';\nimport { DragDropContext, Draggable, DraggableProvided, Droppable, DropResult } from '@hello-pangea/dnd';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useTheme2 } from '@grafana/ui';\n\nimport { LogsTableEmptyFields } from './LogsTableEmptyFields';\nimport { LogsTableNavField } from './LogsTableNavField';\nimport { FieldNameMeta } from './LogsTableWrap';\n\nexport function getLogsFieldsStyles(theme: GrafanaTheme2) {\n  return {\n    wrap: css({\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1),\n      display: 'flex',\n      background: theme.colors.background.primary,\n    }),\n    dragging: css({\n      background: theme.colors.background.secondary,\n    }),\n    columnWrapper: css({\n      marginBottom: theme.spacing(1.5),\n      // need some space or the outline of the checkbox is cut off\n      paddingLeft: theme.spacing(0.5),\n    }),\n  };\n}\n\nfunction sortLabels(labels: Record<string, FieldNameMeta>) {\n  return (a: string, b: string) => {\n    const la = labels[a];\n    const lb = labels[b];\n\n    // Sort by index\n    if (la.index != null && lb.index != null) {\n      return la.index - lb.index;\n    }\n\n    // otherwise do not sort\n    return 0;\n  };\n}\n\nexport const LogsTableActiveFields = (props: {\n  labels: Record<string, FieldNameMeta>;\n  valueFilter: (value: string) => boolean;\n  toggleColumn: (columnName: string) => void;\n  reorderColumn: (sourceIndex: number, destinationIndex: number) => void;\n  id: string;\n}): JSX.Element => {\n  const { reorderColumn, labels, valueFilter, toggleColumn } = props;\n  const theme = useTheme2();\n  const styles = getLogsFieldsStyles(theme);\n  const labelKeys = Object.keys(labels).filter((labelName) => valueFilter(labelName));\n\n  const onDragEnd = (result: DropResult) => {\n    if (!result.destination) {\n      return;\n    }\n    reorderColumn(result.source.index, result.destination.index);\n  };\n\n  const renderTitle = (labelName: string) => {\n    const label = labels[labelName];\n    if (label) {\n      return `${labelName} appears in ${label?.percentOfLinesWithLabel}% of log lines`;\n    }\n\n    return undefined;\n  };\n\n  if (labelKeys.length) {\n    return (\n      <DragDropContext onDragEnd={onDragEnd}>\n        <Droppable droppableId=\"order-fields\" direction=\"vertical\">\n          {(provided) => (\n            <div className={styles.columnWrapper} {...provided.droppableProps} ref={provided.innerRef}>\n              {labelKeys.sort(sortLabels(labels)).map((labelName, index) => (\n                <Draggable draggableId={labelName} key={labelName} index={index}>\n                  {(provided: DraggableProvided, snapshot) => (\n                    <div\n                      className={cx(styles.wrap, snapshot.isDragging ? styles.dragging : undefined)}\n                      ref={provided.innerRef}\n                      {...provided.draggableProps}\n                      {...provided.dragHandleProps}\n                      title={renderTitle(labelName)}\n                    >\n                      <LogsTableNavField\n                        label={labelName}\n                        onChange={() => toggleColumn(labelName)}\n                        labels={labels}\n                        draggable={true}\n                      />\n                    </div>\n                  )}\n                </Draggable>\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n    );\n  }\n\n  return <LogsTableEmptyFields />;\n};\n","import { useTheme2 } from '@grafana/ui';\n\nimport { getLogsFieldsStyles } from './LogsTableActiveFields';\nimport { LogsTableEmptyFields } from './LogsTableEmptyFields';\nimport { LogsTableNavField } from './LogsTableNavField';\nimport { FieldNameMeta } from './LogsTableWrap';\n\nconst collator = new Intl.Collator(undefined, { sensitivity: 'base' });\n\nfunction sortLabels(labels: Record<string, FieldNameMeta>) {\n  return (a: string, b: string) => {\n    const la = labels[a];\n    const lb = labels[b];\n\n    // ...sort by type and alphabetically\n    if (la != null && lb != null) {\n      return (\n        Number(lb.type === 'TIME_FIELD') - Number(la.type === 'TIME_FIELD') ||\n        Number(lb.type === 'BODY_FIELD') - Number(la.type === 'BODY_FIELD') ||\n        collator.compare(a, b)\n      );\n    }\n\n    // otherwise do not sort\n    return 0;\n  };\n}\n\nexport const LogsTableAvailableFields = (props: {\n  labels: Record<string, FieldNameMeta>;\n  valueFilter: (value: string) => boolean;\n  toggleColumn: (columnName: string) => void;\n}): JSX.Element => {\n  const { labels, valueFilter, toggleColumn } = props;\n  const theme = useTheme2();\n  const styles = getLogsFieldsStyles(theme);\n  const labelKeys = Object.keys(labels).filter((labelName) => valueFilter(labelName));\n  if (labelKeys.length) {\n    // Otherwise show list with a hardcoded order\n    return (\n      <div className={styles.columnWrapper}>\n        {labelKeys.sort(sortLabels(labels)).map((labelName, index) => (\n          <div\n            key={labelName}\n            className={styles.wrap}\n            title={`${labelName} appears in ${labels[labelName]?.percentOfLinesWithLabel}% of log lines`}\n          >\n            <LogsTableNavField\n              showCount={true}\n              label={labelName}\n              onChange={() => toggleColumn(labelName)}\n              labels={labels}\n            />\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  return <LogsTableEmptyFields />;\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useTheme2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nimport { LogsTableActiveFields } from './LogsTableActiveFields';\nimport { LogsTableAvailableFields } from './LogsTableAvailableFields';\nimport { FieldNameMeta } from './LogsTableWrap';\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    sidebarWrap: css({\n      overflowY: 'scroll',\n      height: 'calc(100% - 50px)',\n      /* Hide scrollbar for Chrome, Safari, and Opera */\n      '&::-webkit-scrollbar': {\n        display: 'none',\n      },\n      /* Hide scrollbar for Firefox */\n      scrollbarWidth: 'none',\n    }),\n    columnHeaderButton: css({\n      appearance: 'none',\n      background: 'none',\n      border: 'none',\n      fontSize: theme.typography.pxToRem(11),\n    }),\n    columnHeader: css({\n      display: 'flex',\n      justifyContent: 'space-between',\n      fontSize: theme.typography.h6.fontSize,\n      background: theme.colors.background.secondary,\n      position: 'sticky',\n      top: 0,\n      left: 0,\n      paddingTop: theme.spacing(0.75),\n      paddingRight: theme.spacing(0.75),\n      paddingBottom: theme.spacing(0.75),\n      paddingLeft: theme.spacing(1.5),\n      zIndex: 3,\n      marginBottom: theme.spacing(2),\n    }),\n  };\n}\n\nexport const LogsTableMultiSelect = (props: {\n  toggleColumn: (columnName: string) => void;\n  filteredColumnsWithMeta: Record<string, FieldNameMeta> | undefined;\n  columnsWithMeta: Record<string, FieldNameMeta>;\n  clear: () => void;\n  reorderColumn: (oldIndex: number, newIndex: number) => void;\n}) => {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  return (\n    <div className={styles.sidebarWrap}>\n      {/* Sidebar columns */}\n      <>\n        <div className={styles.columnHeader}>\n          Selected fields\n          <button onClick={props.clear} className={styles.columnHeaderButton}>\n            Reset\n          </button>\n        </div>\n        <LogsTableActiveFields\n          reorderColumn={props.reorderColumn}\n          toggleColumn={props.toggleColumn}\n          labels={props.filteredColumnsWithMeta ?? props.columnsWithMeta}\n          valueFilter={(value) => props.columnsWithMeta[value]?.active ?? false}\n          id={'selected-fields'}\n        />\n\n        <div className={styles.columnHeader}>\n          <Trans i18nKey=\"explore.logs-table-multi-select.fields\">Fields</Trans>\n        </div>\n        <LogsTableAvailableFields\n          toggleColumn={props.toggleColumn}\n          labels={props.filteredColumnsWithMeta ?? props.columnsWithMeta}\n          valueFilter={(value) => !props.columnsWithMeta[value]?.active}\n        />\n      </>\n    </div>\n  );\n};\n","import uFuzzy from '@leeoniya/ufuzzy';\nimport { debounce as debounceLodash } from 'lodash';\n\nconst uf = new uFuzzy({\n  intraMode: 1,\n  intraIns: 1,\n  intraSub: 1,\n  intraTrn: 1,\n  intraDel: 1,\n});\n\nexport function fuzzySearch(haystack: string[], query: string, dispatcher: (data: string[][]) => void) {\n  const [idxs, info, order] = uf.search(haystack, query, 0, 1e5);\n\n  let haystackOrder: string[] = [];\n  let matchesSet: Set<string> = new Set();\n  if (idxs && order) {\n    /**\n     * get the fuzzy matches for hilighting\n     * @param part\n     * @param matched\n     */\n    const mark = (part: string, matched: boolean) => {\n      if (matched) {\n        matchesSet.add(part);\n      }\n    };\n\n    // Iterate to create the order of needles(queries) and the matches\n    for (let i = 0; i < order.length; i++) {\n      let infoIdx = order[i];\n\n      /** Evaluate the match, get the matches for highlighting */\n      uFuzzy.highlight(haystack[info.idx[infoIdx]], info.ranges[infoIdx], mark);\n      /** Get the order */\n      haystackOrder.push(haystack[info.idx[infoIdx]]);\n    }\n\n    dispatcher([haystackOrder, [...matchesSet]]);\n  } else if (!query) {\n    dispatcher([[], []]);\n  }\n}\n\nexport const debouncedFuzzySearch = debounceLodash(fuzzySearch, 300);\n","import { css } from '@emotion/css';\nimport { Resizable, ResizeCallback } from 're-resizable';\nimport { useCallback, useEffect, useState } from 'react';\nimport * as React from 'react';\n\nimport {\n  DataFrame,\n  ExploreLogsPanelState,\n  GrafanaTheme2,\n  Labels,\n  LogsSortOrder,\n  SelectableValue,\n  SplitOpen,\n  TimeRange,\n} from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { InlineField, Select, Themeable2 } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { parseLogsFrame } from '../../logs/logsFrame';\n\nimport { LogsColumnSearch } from './LogsColumnSearch';\nimport { LogsTable } from './LogsTable';\nimport { LogsTableMultiSelect } from './LogsTableMultiSelect';\nimport { fuzzySearch } from './utils/uFuzzy';\n\ninterface Props extends Themeable2 {\n  logsFrames: DataFrame[];\n  width: number;\n  timeZone: string;\n  splitOpen: SplitOpen;\n  range: TimeRange;\n  logsSortOrder: LogsSortOrder;\n  panelState: ExploreLogsPanelState | undefined;\n  updatePanelState: (panelState: Partial<ExploreLogsPanelState>) => void;\n  onClickFilterLabel?: (key: string, value: string, frame?: DataFrame) => void;\n  onClickFilterOutLabel?: (key: string, value: string, frame?: DataFrame) => void;\n  datasourceType?: string;\n}\n\ntype ActiveFieldMeta = {\n  active: false;\n  index: undefined; // if undefined the column is not selected\n};\n\ntype InactiveFieldMeta = {\n  active: true;\n  index: number; // if undefined the column is not selected\n};\n\ntype GenericMeta = {\n  percentOfLinesWithLabel: number;\n  type?: 'BODY_FIELD' | 'TIME_FIELD';\n};\n\nexport type FieldNameMeta = (InactiveFieldMeta | ActiveFieldMeta) & GenericMeta;\n\ntype FieldName = string;\ntype FieldNameMetaStore = Record<FieldName, FieldNameMeta>;\n\nexport function LogsTableWrap(props: Props) {\n  const { logsFrames, updatePanelState, panelState } = props;\n  const propsColumns = panelState?.columns;\n  // Save the normalized cardinality of each label\n  const [columnsWithMeta, setColumnsWithMeta] = useState<FieldNameMetaStore | undefined>(undefined);\n\n  // Filtered copy of columnsWithMeta that only includes matching results\n  const [filteredColumnsWithMeta, setFilteredColumnsWithMeta] = useState<FieldNameMetaStore | undefined>(undefined);\n  const [searchValue, setSearchValue] = useState<string>('');\n\n  const height = getLogsTableHeight();\n  const panelStateRefId = props?.panelState?.refId;\n\n  // The current dataFrame containing the refId of the current query\n  const [currentDataFrame, setCurrentDataFrame] = useState<DataFrame>(\n    logsFrames.find((f) => f.refId === panelStateRefId) ?? logsFrames[0]\n  );\n\n  const getColumnsFromProps = useCallback(\n    (fieldNames: FieldNameMetaStore) => {\n      const previouslySelected = props.panelState?.columns;\n      if (previouslySelected) {\n        Object.values(previouslySelected).forEach((key, index) => {\n          if (fieldNames[key]) {\n            fieldNames[key].active = true;\n            fieldNames[key].index = index;\n          }\n        });\n      }\n      return fieldNames;\n    },\n    [props.panelState?.columns]\n  );\n  const logsFrame = parseLogsFrame(currentDataFrame);\n\n  useEffect(() => {\n    if (logsFrame?.timeField.name && logsFrame?.bodyField.name && !propsColumns) {\n      const defaultColumns = { 0: logsFrame?.timeField.name ?? '', 1: logsFrame?.bodyField.name ?? '' };\n      updatePanelState({\n        columns: Object.values(defaultColumns),\n        visualisationType: 'table',\n        labelFieldName: logsFrame?.getLabelFieldName() ?? undefined,\n      });\n    }\n  }, [logsFrame, propsColumns, updatePanelState]);\n\n  /**\n   * When logs frame updates (e.g. query|range changes), we need to set the selected frame to state\n   */\n  useEffect(() => {\n    const newFrame = logsFrames.find((f) => f.refId === panelStateRefId) ?? logsFrames[0];\n    if (newFrame) {\n      setCurrentDataFrame(newFrame);\n    }\n  }, [logsFrames, panelStateRefId]);\n\n  /**\n   * Keeps the filteredColumnsWithMeta state in sync with the columnsWithMeta state,\n   * which can be updated by explore browser history state changes\n   * This prevents an edge case bug where the user is navigating while a search is open.\n   */\n  useEffect(() => {\n    if (!columnsWithMeta || !filteredColumnsWithMeta) {\n      return;\n    }\n    let newFiltered = { ...filteredColumnsWithMeta };\n    let flag = false;\n    Object.keys(columnsWithMeta).forEach((key) => {\n      if (newFiltered[key] && newFiltered[key].active !== columnsWithMeta[key].active) {\n        newFiltered[key] = columnsWithMeta[key];\n        flag = true;\n      }\n    });\n    if (flag) {\n      setFilteredColumnsWithMeta(newFiltered);\n    }\n  }, [columnsWithMeta, filteredColumnsWithMeta]);\n\n  /**\n   * when the query results change, we need to update the columnsWithMeta state\n   * and reset any local search state\n   *\n   * This will also find all the unique labels, and calculate how many log lines have each label into the labelCardinality Map\n   * Then it normalizes the counts\n   *\n   */\n  useEffect(() => {\n    // If the data frame is empty, there's nothing to viz, it could mean the user has unselected all columns\n    if (!currentDataFrame.length) {\n      return;\n    }\n    const numberOfLogLines = currentDataFrame ? currentDataFrame.length : 0;\n    const logsFrame = parseLogsFrame(currentDataFrame);\n    const labels = logsFrame?.getLogFrameLabelsAsLabels();\n\n    const otherFields = [];\n\n    if (logsFrame) {\n      otherFields.push(...logsFrame.extraFields.filter((field) => !field?.config?.custom?.hidden));\n    }\n    if (logsFrame?.severityField) {\n      otherFields.push(logsFrame?.severityField);\n    }\n    if (logsFrame?.bodyField) {\n      otherFields.push(logsFrame?.bodyField);\n    }\n    if (logsFrame?.timeField) {\n      otherFields.push(logsFrame?.timeField);\n    }\n\n    // Use a map to dedupe labels and count their occurrences in the logs\n    const labelCardinality = new Map<FieldName, FieldNameMeta>();\n\n    // What the label state will look like\n    let pendingLabelState: FieldNameMetaStore = {};\n\n    // If we have labels and log lines\n    if (labels?.length && numberOfLogLines) {\n      // Iterate through all of Labels\n      labels.forEach((labels: Labels) => {\n        const labelsArray = Object.keys(labels);\n        // Iterate through the label values\n        labelsArray.forEach((label) => {\n          // If it's already in our map, increment the count\n          if (labelCardinality.has(label)) {\n            const value = labelCardinality.get(label);\n            if (value) {\n              if (value?.active) {\n                labelCardinality.set(label, {\n                  percentOfLinesWithLabel: value.percentOfLinesWithLabel + 1,\n                  active: true,\n                  index: value.index,\n                });\n              } else {\n                labelCardinality.set(label, {\n                  percentOfLinesWithLabel: value.percentOfLinesWithLabel + 1,\n                  active: false,\n                  index: undefined,\n                });\n              }\n            }\n            // Otherwise add it\n          } else {\n            labelCardinality.set(label, { percentOfLinesWithLabel: 1, active: false, index: undefined });\n          }\n        });\n      });\n\n      // Converting the map to an object\n      pendingLabelState = Object.fromEntries(labelCardinality);\n\n      // Convert count to percent of log lines\n      Object.keys(pendingLabelState).forEach((key) => {\n        pendingLabelState[key].percentOfLinesWithLabel = normalize(\n          pendingLabelState[key].percentOfLinesWithLabel,\n          numberOfLogLines\n        );\n      });\n    }\n\n    // Normalize the other fields\n    otherFields.forEach((field) => {\n      const isActive = pendingLabelState[field.name]?.active;\n      const index = pendingLabelState[field.name]?.index;\n      if (isActive && index !== undefined) {\n        pendingLabelState[field.name] = {\n          percentOfLinesWithLabel: normalize(\n            field.values.filter((value) => value !== null && value !== undefined).length,\n            numberOfLogLines\n          ),\n          active: true,\n          index: index,\n        };\n      } else {\n        pendingLabelState[field.name] = {\n          percentOfLinesWithLabel: normalize(\n            field.values.filter((value) => value !== null && value !== undefined).length,\n            numberOfLogLines\n          ),\n          active: false,\n          index: undefined,\n        };\n      }\n    });\n\n    pendingLabelState = getColumnsFromProps(pendingLabelState);\n\n    // Get all active columns\n    const active = Object.keys(pendingLabelState).filter((key) => pendingLabelState[key].active);\n\n    // If nothing is selected, then select the default columns\n    if (active.length === 0) {\n      if (logsFrame?.bodyField?.name) {\n        pendingLabelState[logsFrame.bodyField.name].active = true;\n      }\n      if (logsFrame?.timeField?.name) {\n        pendingLabelState[logsFrame.timeField.name].active = true;\n      }\n    }\n\n    if (logsFrame?.bodyField?.name && logsFrame?.timeField?.name) {\n      pendingLabelState[logsFrame.bodyField.name].type = 'BODY_FIELD';\n      pendingLabelState[logsFrame.timeField.name].type = 'TIME_FIELD';\n    }\n\n    setColumnsWithMeta(pendingLabelState);\n\n    // The panel state is updated when the user interacts with the multi-select sidebar\n  }, [currentDataFrame, getColumnsFromProps]);\n\n  const [sidebarWidth, setSidebarWidth] = useState(220);\n  const tableWidth = props.width - sidebarWidth;\n\n  if (!columnsWithMeta) {\n    return null;\n  }\n\n  function columnFilterEvent(columnName: string) {\n    if (columnsWithMeta) {\n      const newState = !columnsWithMeta[columnName]?.active;\n      const priorActiveCount = Object.keys(columnsWithMeta).filter((column) => columnsWithMeta[column]?.active)?.length;\n      const event = {\n        columnAction: newState ? 'add' : 'remove',\n        columnCount: newState ? priorActiveCount + 1 : priorActiveCount - 1,\n        datasourceType: props.datasourceType,\n      };\n      reportInteraction('grafana_explore_logs_table_column_filter_clicked', event);\n    }\n  }\n\n  function searchFilterEvent(searchResultCount: number) {\n    reportInteraction('grafana_explore_logs_table_text_search_result_count', {\n      resultCount: searchResultCount,\n      datasourceType: props.datasourceType ?? 'unknown',\n    });\n  }\n\n  const clearSelection = () => {\n    const pendingLabelState = { ...columnsWithMeta };\n    let index = 0;\n    Object.keys(pendingLabelState).forEach((key) => {\n      const isDefaultField = !!pendingLabelState[key].type;\n      // after reset the only active fields are the special time and body fields\n      pendingLabelState[key].active = isDefaultField;\n      // reset the index\n      pendingLabelState[key].index = isDefaultField ? index++ : undefined;\n    });\n    setColumnsWithMeta(pendingLabelState);\n  };\n\n  const reorderColumn = (sourceIndex: number, destinationIndex: number) => {\n    if (sourceIndex === destinationIndex) {\n      return;\n    }\n\n    const pendingLabelState = { ...columnsWithMeta };\n\n    const keys = Object.keys(pendingLabelState)\n      .filter((key) => pendingLabelState[key].active)\n      .map((key) => ({\n        fieldName: key,\n        index: pendingLabelState[key].index ?? 0,\n      }))\n      .sort((a, b) => a.index - b.index);\n\n    const [source] = keys.splice(sourceIndex, 1);\n    keys.splice(destinationIndex, 0, source);\n\n    keys.forEach((key, index) => {\n      pendingLabelState[key.fieldName].index = index;\n    });\n\n    // Set local state\n    setColumnsWithMeta(pendingLabelState);\n\n    // Sync the explore state\n    updateExploreState(pendingLabelState);\n  };\n\n  function updateExploreState(pendingLabelState: FieldNameMetaStore) {\n    // Get all active columns and sort by index\n    const newColumnsArray = Object.keys(pendingLabelState)\n      // Only include active filters\n      .filter((key) => pendingLabelState[key]?.active)\n      .sort((a, b) => {\n        const pa = pendingLabelState[a];\n        const pb = pendingLabelState[b];\n        if (pa.index !== undefined && pb.index !== undefined) {\n          return pa.index - pb.index; // sort by index\n        }\n        return 0;\n      });\n\n    const newColumns: Record<number, string> = Object.assign(\n      {},\n      // Get the keys of the object as an array\n      newColumnsArray\n    );\n\n    const defaultColumns = { 0: logsFrame?.timeField.name ?? '', 1: logsFrame?.bodyField.name ?? '' };\n    const newPanelState: ExploreLogsPanelState = {\n      ...props.panelState,\n      // URL format requires our array of values be an object, so we convert it using object.assign\n      columns: Object.keys(newColumns).length ? newColumns : defaultColumns,\n      refId: currentDataFrame.refId,\n      visualisationType: 'table',\n      labelFieldName: logsFrame?.getLabelFieldName() ?? undefined,\n    };\n\n    // Update url state\n    updatePanelState(newPanelState);\n  }\n\n  // Toggle a column on or off when the user interacts with an element in the multi-select sidebar\n  const toggleColumn = (columnName: FieldName) => {\n    if (!columnsWithMeta || !(columnName in columnsWithMeta)) {\n      console.warn('failed to get column', columnsWithMeta);\n      return;\n    }\n\n    const length = Object.keys(columnsWithMeta).filter((c) => columnsWithMeta[c].active).length;\n    const isActive = !columnsWithMeta[columnName].active ? true : undefined;\n\n    let pendingLabelState: FieldNameMetaStore;\n    if (isActive) {\n      pendingLabelState = {\n        ...columnsWithMeta,\n        [columnName]: {\n          ...columnsWithMeta[columnName],\n          active: isActive,\n          index: length,\n        },\n      };\n    } else {\n      pendingLabelState = {\n        ...columnsWithMeta,\n        [columnName]: {\n          ...columnsWithMeta[columnName],\n          active: false,\n          index: undefined,\n        },\n      };\n    }\n\n    // Analytics\n    columnFilterEvent(columnName);\n\n    // Set local state\n    setColumnsWithMeta(pendingLabelState);\n\n    // If user is currently filtering, update filtered state\n    if (filteredColumnsWithMeta) {\n      const active = !filteredColumnsWithMeta[columnName]?.active;\n      let pendingFilteredLabelState: FieldNameMetaStore;\n      if (active) {\n        pendingFilteredLabelState = {\n          ...filteredColumnsWithMeta,\n          [columnName]: {\n            ...filteredColumnsWithMeta[columnName],\n            active: active,\n            index: length,\n          },\n        };\n      } else {\n        pendingFilteredLabelState = {\n          ...filteredColumnsWithMeta,\n          [columnName]: {\n            ...filteredColumnsWithMeta[columnName],\n            active: false,\n            index: undefined,\n          },\n        };\n      }\n\n      setFilteredColumnsWithMeta(pendingFilteredLabelState);\n    }\n\n    updateExploreState(pendingLabelState);\n  };\n\n  // uFuzzy search dispatcher, adds any matches to the local state\n  const dispatcher = (data: string[][]) => {\n    const matches = data[0];\n    let newColumnsWithMeta: FieldNameMetaStore = {};\n    let numberOfResults = 0;\n    matches.forEach((match) => {\n      if (match in columnsWithMeta) {\n        newColumnsWithMeta[match] = columnsWithMeta[match];\n        numberOfResults++;\n      }\n    });\n    setFilteredColumnsWithMeta(newColumnsWithMeta);\n    searchFilterEvent(numberOfResults);\n  };\n\n  // uFuzzy search\n  const search = (needle: string) => {\n    fuzzySearch(Object.keys(columnsWithMeta), needle, dispatcher);\n  };\n\n  // onChange handler for search input\n  const onSearchInputChange = (e: React.FormEvent<HTMLInputElement>) => {\n    const value = e.currentTarget?.value;\n    setSearchValue(value);\n    if (value) {\n      search(value);\n    } else {\n      // If the search input is empty, reset the local search state.\n      setFilteredColumnsWithMeta(undefined);\n    }\n  };\n\n  const onFrameSelectorChange = (value: SelectableValue<string>) => {\n    const matchingDataFrame = logsFrames.find((frame) => frame.refId === value.value);\n    if (matchingDataFrame) {\n      setCurrentDataFrame(logsFrames.find((frame) => frame.refId === value.value) ?? logsFrames[0]);\n    }\n    props.updatePanelState({ refId: value.value, labelFieldName: logsFrame?.getLabelFieldName() ?? undefined });\n  };\n\n  const styles = getStyles(props.theme, height, sidebarWidth);\n\n  const getOnResize: ResizeCallback = (event, direction, ref) => {\n    const newSidebarWidth = Number(ref.style.width.slice(0, -2));\n    if (!isNaN(newSidebarWidth)) {\n      setSidebarWidth(newSidebarWidth);\n    }\n  };\n\n  return (\n    <>\n      <div>\n        {logsFrames.length > 1 && (\n          <div>\n            <InlineField\n              label={t('explore.logs-table-wrap.label-select-query', 'Select query')}\n              htmlFor=\"explore_logs_table_frame_selector\"\n              labelWidth={22}\n              tooltip={t(\n                'explore.logs-table-wrap.tooltip-select-query-visualize-table',\n                'Select a query to visualize in the table'\n              )}\n            >\n              <Select\n                inputId={'explore_logs_table_frame_selector'}\n                aria-label={t('explore.logs-table-wrap.aria-label-select-query-by-name', 'Select query by name')}\n                value={currentDataFrame.refId}\n                options={logsFrames.map((frame) => {\n                  return {\n                    label: frame.refId,\n                    value: frame.refId,\n                  };\n                })}\n                onChange={onFrameSelectorChange}\n              />\n            </InlineField>\n          </div>\n        )}\n      </div>\n      <div className={styles.wrapper}>\n        <Resizable\n          enable={{\n            right: true,\n          }}\n          handleClasses={{ right: styles.rzHandle }}\n          onResize={getOnResize}\n        >\n          <section className={styles.sidebar}>\n            <LogsColumnSearch value={searchValue} onChange={onSearchInputChange} />\n            <LogsTableMultiSelect\n              reorderColumn={reorderColumn}\n              toggleColumn={toggleColumn}\n              filteredColumnsWithMeta={filteredColumnsWithMeta}\n              columnsWithMeta={columnsWithMeta}\n              clear={clearSelection}\n            />\n          </section>\n        </Resizable>\n        <LogsTable\n          logsFrame={logsFrame}\n          onClickFilterLabel={props.onClickFilterLabel}\n          onClickFilterOutLabel={props.onClickFilterOutLabel}\n          logsSortOrder={props.logsSortOrder}\n          range={props.range}\n          splitOpen={props.splitOpen}\n          timeZone={props.timeZone}\n          width={tableWidth}\n          dataFrame={currentDataFrame}\n          columnsWithMeta={columnsWithMeta}\n          height={height}\n        />\n      </div>\n    </>\n  );\n}\n\nconst normalize = (value: number, total: number): number => {\n  return Math.ceil((100 * value) / total);\n};\n\nfunction getStyles(theme: GrafanaTheme2, height: number, width: number) {\n  return {\n    wrapper: css({\n      display: 'flex',\n    }),\n    sidebar: css({\n      height: height,\n      fontSize: theme.typography.pxToRem(11),\n      overflowY: 'hidden',\n      width: width,\n      paddingRight: theme.spacing(3),\n    }),\n    rzHandle: css({\n      background: theme.colors.secondary.main,\n      [theme.transitions.handleMotion('no-preference', 'reduce')]: {\n        transition: '0.3s background ease-in-out',\n      },\n      position: 'relative',\n      height: '50% !important',\n      width: `${theme.spacing(1)} !important`,\n      top: '25% !important',\n      right: `${theme.spacing(1)} !important`,\n      cursor: 'grab',\n      borderRadius: theme.shape.radius.pill,\n      ['&:hover']: {\n        background: theme.colors.secondary.shade,\n      },\n    }),\n  };\n}\n\nexport const getLogsTableHeight = () => {\n  // Instead of making the height of the table based on the content (like in the table panel itself), let's try to use the vertical space that is available.\n  // Since this table is in explore, we can expect the user to be running multiple queries that return disparate numbers of rows and labels in the same session\n  // Also changing the height of the table between queries can be and cause content to jump, so we'll set a minimum height of 500px, and a max based on the innerHeight\n  // Ideally the table container should always be able to fit in the users viewport without needing to scroll\n  return Math.max(window.innerHeight - 500, 500);\n};\n","import { css } from '@emotion/css';\nimport { useMemo } from 'react';\n\nimport { EventBusSrv, GrafanaTheme2 } from '@grafana/data';\nimport { useTheme2 } from '@grafana/ui';\n\nimport { LogsTableWrap } from '../../explore/Logs/LogsTableWrap';\n\nimport { LogRowsComponentProps } from './ControlledLogRows';\nimport { useLogListContext } from './panel/LogListContext';\nimport { LogListControls } from './panel/LogListControls';\n\nexport const ControlledLogsTable = ({\n  loading,\n  loadMoreLogs,\n  deduplicatedRows = [],\n  range,\n  splitOpen,\n  onClickFilterLabel,\n  onClickFilterOutLabel,\n  panelState,\n  datasourceType,\n  updatePanelState,\n  width,\n  logsTableFrames,\n  visualisationType,\n  ...rest\n}: LogRowsComponentProps) => {\n  const { sortOrder } = useLogListContext();\n  const eventBus = useMemo(() => new EventBusSrv(), []);\n\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  return (\n    <div className={styles.logRowsContainer}>\n      <LogListControls eventBus={eventBus} visualisationType={visualisationType} />\n      <div className={styles.logRows} data-testid=\"logRowsTable\">\n        {/* Width should be full width minus logs navigation and padding */}\n        <LogsTableWrap\n          logsSortOrder={sortOrder}\n          range={range}\n          splitOpen={splitOpen}\n          timeZone={rest.timeZone}\n          width={width - 45}\n          logsFrames={logsTableFrames ?? []}\n          onClickFilterLabel={onClickFilterLabel}\n          onClickFilterOutLabel={onClickFilterOutLabel}\n          panelState={panelState}\n          theme={theme}\n          updatePanelState={updatePanelState}\n          datasourceType={datasourceType}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    logRows: css({\n      overflowY: 'visible',\n      width: '100%',\n    }),\n    logRowsContainer: css({\n      display: 'flex',\n      flexDirection: 'row-reverse',\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport { useEffect, useMemo, useRef } from 'react';\n\nimport {\n  AbsoluteTimeRange,\n  CoreApp,\n  DataFrame,\n  EventBusSrv,\n  ExploreLogsPanelState,\n  LogsMetaItem,\n  LogsSortOrder,\n  SplitOpen,\n  TimeRange,\n} from '@grafana/data';\nimport { config } from '@grafana/runtime';\n\nimport { LogsVisualisationType } from '../../explore/Logs/Logs';\n\nimport { ControlledLogsTable } from './ControlledLogsTable';\nimport { InfiniteScroll } from './InfiniteScroll';\nimport { LogRows, Props } from './LogRows';\nimport { LogListControlOptions } from './panel/LogList';\nimport { LogListContextProvider, useLogListContext } from './panel/LogListContext';\nimport { LogListControls } from './panel/LogListControls';\nimport { ScrollToLogsEvent } from './panel/virtualization';\n\nexport interface ControlledLogRowsProps extends Omit<Props, 'scrollElement'> {\n  hasUnescapedContent?: boolean;\n  loading: boolean;\n  logsMeta?: LogsMetaItem[];\n  loadMoreLogs?: (range: AbsoluteTimeRange) => void;\n  logOptionsStorageKey?: string;\n  onLogOptionsChange?: (option: keyof LogListControlOptions, value: string | boolean | string[]) => void;\n  range: TimeRange;\n\n  /** Props added for Table **/\n  visualisationType: LogsVisualisationType;\n  splitOpen: SplitOpen;\n  panelState: ExploreLogsPanelState | undefined;\n  updatePanelState: (panelState: Partial<ExploreLogsPanelState>) => void;\n  datasourceType?: string;\n  width: number;\n  logsTableFrames: DataFrame[] | undefined;\n}\n\nexport type LogRowsComponentProps = Omit<\n  ControlledLogRowsProps,\n  'app' | 'dedupStrategy' | 'showLabels' | 'showTime' | 'logsSortOrder' | 'prettifyLogMessage' | 'wrapLogMessage'\n>;\n\nexport const ControlledLogRows = ({\n  deduplicatedRows,\n  dedupStrategy,\n  hasUnescapedContent,\n  showLabels,\n  showTime,\n  logsMeta,\n  logOptionsStorageKey,\n  logsSortOrder,\n  prettifyLogMessage,\n  onLogOptionsChange,\n  wrapLogMessage,\n  ...rest\n}: ControlledLogRowsProps) => {\n  return (\n    <LogListContextProvider\n      app={rest.app || CoreApp.Unknown}\n      displayedFields={[]}\n      dedupStrategy={dedupStrategy}\n      hasUnescapedContent={hasUnescapedContent}\n      logOptionsStorageKey={logOptionsStorageKey}\n      logs={deduplicatedRows ?? []}\n      logsMeta={logsMeta}\n      prettifyJSON={prettifyLogMessage}\n      showControls\n      showTime={showTime}\n      showUniqueLabels={showLabels}\n      sortOrder={logsSortOrder || LogsSortOrder.Descending}\n      onLogOptionsChange={onLogOptionsChange}\n      wrapLogMessage={wrapLogMessage}\n    >\n      {rest.visualisationType === 'logs' && <LogRowsComponent {...rest} deduplicatedRows={deduplicatedRows} />}\n      {rest.visualisationType === 'table' && <ControlledLogsTable {...rest} />}\n    </LogListContextProvider>\n  );\n};\n\nconst LogRowsComponent = ({ loading, loadMoreLogs, deduplicatedRows = [], range, ...rest }: LogRowsComponentProps) => {\n  const {\n    app,\n    dedupStrategy,\n    filterLevels,\n    forceEscape,\n    prettifyJSON,\n    sortOrder,\n    showTime,\n    showUniqueLabels,\n    wrapLogMessage,\n  } = useLogListContext();\n  const eventBus = useMemo(() => new EventBusSrv(), []);\n  const scrollElementRef = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    const subscription = eventBus.subscribe(ScrollToLogsEvent, (e: ScrollToLogsEvent) =>\n      handleScrollToEvent(e, scrollElementRef.current)\n    );\n    return () => subscription.unsubscribe();\n  }, [eventBus]);\n\n  const filteredLogs = useMemo(\n    () =>\n      filterLevels.length === 0\n        ? deduplicatedRows\n        : deduplicatedRows.filter((log) => filterLevels.includes(log.logLevel)),\n    [filterLevels, deduplicatedRows]\n  );\n\n  return (\n    <div className={styles.logRowsContainer}>\n      <LogListControls eventBus={eventBus} />\n      <div\n        ref={scrollElementRef}\n        className={config.featureToggles.logsInfiniteScrolling ? styles.scrollableLogRows : styles.logRows}\n      >\n        <InfiniteScroll\n          loading={loading}\n          loadMoreLogs={loadMoreLogs}\n          range={range}\n          timeZone={rest.timeZone}\n          rows={filteredLogs}\n          scrollElement={scrollElementRef.current}\n          sortOrder={sortOrder}\n        >\n          <LogRows\n            {...rest}\n            app={app}\n            dedupStrategy={dedupStrategy}\n            deduplicatedRows={filteredLogs}\n            forceEscape={forceEscape}\n            logRows={filteredLogs}\n            logsSortOrder={sortOrder}\n            scrollElement={scrollElementRef.current}\n            prettifyLogMessage={Boolean(prettifyJSON)}\n            showLabels={Boolean(showUniqueLabels)}\n            showTime={showTime}\n            wrapLogMessage={wrapLogMessage}\n          />\n        </InfiniteScroll>\n      </div>\n    </div>\n  );\n};\n\nfunction handleScrollToEvent(event: ScrollToLogsEvent, scrollElement: HTMLDivElement | null) {\n  if (event.payload.scrollTo === 'top') {\n    scrollElement?.scrollTo(0, 0);\n  } else if (scrollElement) {\n    scrollElement.scrollTo(0, scrollElement.scrollHeight);\n  }\n}\n\nconst styles = {\n  scrollableLogRows: css({\n    overflowY: 'scroll',\n    width: '100%',\n    maxHeight: '75vh',\n  }),\n  logRows: css({\n    overflowX: 'scroll',\n    overflowY: 'visible',\n    width: '100%',\n  }),\n  logRowsContainer: css({\n    display: 'flex',\n    flexDirection: 'row-reverse',\n  }),\n};\n","import { LogLevel } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\n\nexport function contentOutlineTrackPinAdded() {\n  reportInteraction('explore_toolbar_contentoutline_clicked', {\n    item: 'section',\n    type: 'Logs:pinned:pinned-log-added',\n  });\n}\n\nexport function contentOutlineTrackPinRemoved() {\n  reportInteraction('explore_toolbar_contentoutline_clicked', {\n    item: 'section',\n    type: 'Logs:pinned:pinned-log-deleted',\n  });\n}\n\nexport function contentOutlineTrackPinLimitReached() {\n  reportInteraction('explore_toolbar_contentoutline_clicked', {\n    item: 'section',\n    type: 'Logs:pinned:pinned-log-limit-reached',\n  });\n}\n\nexport function contentOutlineTrackPinClicked() {\n  reportInteraction('explore_toolbar_contentoutline_clicked', {\n    item: 'section',\n    type: 'Logs:pinned:pinned-log-clicked',\n  });\n}\n\nexport function contentOutlineTrackUnpinClicked() {\n  reportInteraction('explore_toolbar_contentoutline_clicked', {\n    item: 'section',\n    type: 'Logs:pinned:pinned-log-deleted',\n  });\n}\n\nexport function contentOutlineTrackLevelFilter(level: LogLevel) {\n  reportInteraction('explore_toolbar_contentoutline_clicked', {\n    item: 'section',\n    type: `Logs:filter:${level}`,\n  });\n}\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, Stack, useStyles2 } from '@grafana/ui';\n\ninterface Props {\n  feedbackUrl?: string;\n}\n\nexport function LogsFeedback({ feedbackUrl }: Props) {\n  const styles = useStyles2(getStyles);\n  return (\n    <Stack>\n      <a\n        href={feedbackUrl}\n        className={styles.link}\n        title=\"The logs table is new, please let us know how we can improve it\"\n        target=\"_blank\"\n        rel=\"noreferrer noopener\"\n      >\n        <Icon name=\"comment-alt-message\" /> Give feedback\n      </a>\n    </Stack>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    link: css({\n      color: theme.colors.text.secondary,\n      fontSize: theme.typography.bodySmall.fontSize,\n      ':hover': {\n        color: theme.colors.text.link,\n      },\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport { memo } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  metaContainer: css({\n    flex: 1,\n    color: theme.colors.text.secondary,\n    marginBottom: theme.spacing(2),\n    minWidth: '30%',\n    display: 'flex',\n    flexWrap: 'wrap',\n  }),\n  metaItem: css({\n    marginRight: theme.spacing(2),\n    marginTop: theme.spacing(0.5),\n    display: 'flex',\n    alignItems: 'center',\n    ['.logs-meta-item__error']: {\n      color: theme.colors.error.text,\n    },\n  }),\n  metaLabel: css({\n    marginRight: `calc(${theme.spacing(2)} / 2)`,\n    fontSize: theme.typography.bodySmall.fontSize,\n    fontWeight: theme.typography.fontWeightMedium,\n    whiteSpace: 'nowrap',\n  }),\n  metaValue: css({\n    fontFamily: theme.typography.fontFamilyMonospace,\n    fontSize: theme.typography.bodySmall.fontSize,\n  }),\n});\n\nexport interface MetaItemProps {\n  label?: string;\n  value: string | JSX.Element;\n}\n\nconst MetaInfoItem = memo(function MetaInfoItem(props: MetaItemProps) {\n  const style = useStyles2(getStyles);\n  const { label, value } = props;\n\n  return (\n    <div data-testid=\"meta-info-text-item\" className={style.metaItem}>\n      {label && <span className={style.metaLabel}>{label}:</span>}\n      <span className={style.metaValue}>{value}</span>\n    </div>\n  );\n});\n\ninterface MetaInfoTextProps {\n  metaItems: MetaItemProps[];\n}\n\nexport const MetaInfoText = memo(function MetaInfoText(props: MetaInfoTextProps) {\n  const style = useStyles2(getStyles);\n  const { metaItems } = props;\n\n  return (\n    <div className={style.metaContainer} data-testid=\"meta-info-text\">\n      {metaItems.map((item, index) => (\n        <MetaInfoItem key={`${index}-${item.label}`} label={item.label} value={item.value} />\n      ))}\n    </div>\n  );\n});\n","import { css } from '@emotion/css';\nimport { memo } from 'react';\n\nimport { LogsDedupStrategy, LogsMetaItem, LogsMetaKind, LogRowModel, CoreApp, Labels, store } from '@grafana/data';\nimport { config, reportInteraction } from '@grafana/runtime';\nimport { Button, Dropdown, Menu, ToolbarButton, useStyles2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nimport { LogLabels, LogLabelsList, Props as LogLabelsProps } from '../../logs/components/LogLabels';\nimport { DownloadFormat, downloadLogs } from '../../logs/utils';\nimport { MetaInfoText, MetaItemProps } from '../MetaInfoText';\n\nimport { SETTINGS_KEYS } from './utils/logs';\n\nconst getStyles = () => ({\n  metaContainer: css({\n    flex: 1,\n    display: 'flex',\n    flexWrap: 'wrap',\n    '& span': {\n      fontWeight: 'normal',\n      lineHeight: '1.25em',\n    },\n  }),\n});\n\nexport type Props = {\n  meta: LogsMetaItem[];\n  dedupStrategy: LogsDedupStrategy;\n  dedupCount: number;\n  displayedFields: string[];\n  logRows: LogRowModel[];\n  clearDetectedFields: () => void;\n};\n\nexport const LogsMetaRow = memo(\n  ({ meta, dedupStrategy, dedupCount, displayedFields, clearDetectedFields, logRows }: Props) => {\n    const style = useStyles2(getStyles);\n\n    const logsMetaItem: Array<LogsMetaItem | MetaItemProps> = [...meta];\n\n    // Add deduplication info\n    if (dedupStrategy !== LogsDedupStrategy.none) {\n      logsMetaItem.push({\n        label: 'Deduplication count',\n        value: dedupCount,\n        kind: LogsMetaKind.Number,\n      });\n    }\n\n    // Add detected fields info\n    if (displayedFields?.length > 0) {\n      logsMetaItem.push(\n        {\n          label: 'Showing only selected fields',\n          value: <LogLabelsList labels={displayedFields} />,\n        },\n        {\n          label: '',\n          value: (\n            <Button variant=\"primary\" fill=\"outline\" size=\"sm\" onClick={clearDetectedFields}>\n              <Trans i18nKey=\"explore.logs-meta-row.show-original-line\">Show original line</Trans>\n            </Button>\n          ),\n        }\n      );\n    }\n\n    function download(format: DownloadFormat) {\n      reportInteraction('grafana_logs_download_logs_clicked', {\n        app: CoreApp.Explore,\n        format,\n        area: 'logs-meta-row',\n      });\n      downloadLogs(format, logRows, meta);\n    }\n\n    const downloadMenu = (\n      <Menu>\n        {/* eslint-disable-next-line @grafana/no-untranslated-strings */}\n        <Menu.Item label=\"txt\" onClick={() => download(DownloadFormat.Text)} />\n        {/* eslint-disable-next-line @grafana/no-untranslated-strings */}\n        <Menu.Item label=\"json\" onClick={() => download(DownloadFormat.Json)} />\n        {/* eslint-disable-next-line @grafana/no-untranslated-strings */}\n        <Menu.Item label=\"csv\" onClick={() => download(DownloadFormat.CSV)} />\n      </Menu>\n    );\n\n    const onCommonLabelsToggle = (state: boolean) => {\n      store.set(SETTINGS_KEYS.commonLabels, state);\n    };\n\n    const commonLabelsProps = {\n      onDisplayMaxToggle: onCommonLabelsToggle,\n      displayMax: 3,\n      displayAll: store.getBool(SETTINGS_KEYS.commonLabels, false),\n    };\n\n    return (\n      <>\n        {logsMetaItem && (\n          <div className={style.metaContainer}>\n            <MetaInfoText\n              metaItems={logsMetaItem.map((item) => {\n                return {\n                  label: item.label,\n                  value: 'kind' in item ? renderMetaItem(item.value, item.kind, commonLabelsProps) : item.value,\n                };\n              })}\n            />\n            {!config.featureToggles.logsPanelControls && !config.exploreHideLogsDownload && (\n              <Dropdown overlay={downloadMenu}>\n                <ToolbarButton isOpen={false} variant=\"canvas\" icon=\"download-alt\">\n                  <Trans i18nKey=\"explore.logs-meta-row.download\">Download</Trans>\n                </ToolbarButton>\n              </Dropdown>\n            )}\n          </div>\n        )}\n      </>\n    );\n  }\n);\n\nLogsMetaRow.displayName = 'LogsMetaRow';\n\nfunction renderMetaItem(value: string | number | Labels, kind: LogsMetaKind, logLabelsProps: Partial<LogLabelsProps>) {\n  if (typeof value === 'string' || typeof value === 'number') {\n    return <>{value}</>;\n  }\n  if (kind === LogsMetaKind.LabelsMap) {\n    return <LogLabels labels={value} {...logLabelsProps} />;\n  }\n  if (kind === LogsMetaKind.Error) {\n    return <span className=\"logs-meta-item__error\">{value.toString()}</span>;\n  }\n  console.error(`Meta type ${typeof value} ${value} not recognized.`);\n  return <></>;\n}\n","import { css, cx } from '@emotion/css';\n\nimport { dateTimeFormat, systemDateFormats, GrafanaTheme2 } from '@grafana/data';\nimport { TimeZone } from '@grafana/schema';\nimport { ScrollContainer, Spinner, useTheme2, clearButtonStyles } from '@grafana/ui';\n\nimport { LogsPage } from './LogsNavigation';\n\ntype Props = {\n  pages: LogsPage[];\n  currentPageIndex: number;\n  oldestLogsFirst: boolean;\n  timeZone: TimeZone;\n  loading: boolean;\n  onClick: (page: LogsPage, pageNumber: number) => void;\n};\n\nexport function LogsNavigationPages({ pages, currentPageIndex, oldestLogsFirst, timeZone, loading, onClick }: Props) {\n  const formatTime = (time: number) => {\n    return `${dateTimeFormat(time, {\n      format: systemDateFormats.interval.second,\n      timeZone: timeZone,\n    })}`;\n  };\n\n  const createPageContent = (page: LogsPage, index: number) => {\n    if (currentPageIndex === index && loading) {\n      return <Spinner />;\n    }\n    const topContent = formatTime(oldestLogsFirst ? page.logsRange.from : page.logsRange.to);\n    const bottomContent = formatTime(oldestLogsFirst ? page.logsRange.to : page.logsRange.from);\n    return `${topContent} — ${bottomContent}`;\n  };\n\n  const theme = useTheme2();\n  const styles = getStyles(theme, loading);\n\n  return (\n    <ScrollContainer>\n      <div className={styles.pagesWrapper} data-testid=\"logsNavigationPages\">\n        <div className={styles.pagesContainer}>\n          {pages.map((page: LogsPage, index: number) => (\n            <button\n              type=\"button\"\n              data-testid={`page${index + 1}`}\n              className={cx(clearButtonStyles(theme), styles.page)}\n              key={page.queryRange.to}\n              onClick={() => {\n                onClick(page, index + 1);\n              }}\n              disabled={loading}\n            >\n              <div className={cx(styles.line, { selectedBg: currentPageIndex === index })} />\n              <div className={cx(styles.time, { selectedText: currentPageIndex === index })}>\n                {createPageContent(page, index)}\n              </div>\n            </button>\n          ))}\n        </div>\n      </div>\n    </ScrollContainer>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2, loading: boolean) => {\n  return {\n    pagesWrapper: css({\n      height: '100%',\n      paddingLeft: theme.spacing(0.5),\n      display: 'flex',\n      flexDirection: 'column',\n      '&::after': {\n        content: \"''\",\n        display: 'block',\n        background: `repeating-linear-gradient(135deg, ${theme.colors.background.primary}, ${theme.colors.background.primary} 5px, ${theme.colors.background.secondary} 5px, ${theme.colors.background.secondary} 15px)`,\n        width: '3px',\n        height: 'inherit',\n        marginBottom: theme.spacing(1),\n      },\n    }),\n    pagesContainer: css({\n      display: 'flex',\n      padding: 0,\n      flexDirection: 'column',\n    }),\n    page: css({\n      display: 'flex',\n      margin: theme.spacing(2, 0),\n      cursor: loading ? 'auto' : 'pointer',\n      whiteSpace: 'normal',\n      '.selectedBg': {\n        background: theme.colors.primary.main,\n      },\n      '.selectedText': {\n        color: theme.colors.primary.main,\n      },\n    }),\n    line: css({\n      width: '3px',\n      height: '100%',\n      alignItems: 'center',\n      background: theme.colors.text.secondary,\n    }),\n    time: css({\n      width: '60px',\n      minHeight: '80px',\n      fontSize: theme.v1.typography.size.sm,\n      paddingLeft: theme.spacing(0.5),\n      display: 'flex',\n      alignItems: 'center',\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport { isEqual } from 'lodash';\nimport { memo, useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport { AbsoluteTimeRange, GrafanaTheme2, LogsSortOrder } from '@grafana/data';\nimport { config, reportInteraction } from '@grafana/runtime';\nimport { DataQuery, TimeZone } from '@grafana/schema';\nimport { Button, Icon, Spinner, useTheme2 } from '@grafana/ui';\nimport { getChromeHeaderLevelHeight } from 'app/core/components/AppChrome/TopBar/useChromeHeaderHeight';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { LogsNavigationPages } from './LogsNavigationPages';\n\ntype Props = {\n  absoluteRange: AbsoluteTimeRange;\n  timeZone: TimeZone;\n  queries: DataQuery[];\n  loading: boolean;\n  visibleRange: AbsoluteTimeRange;\n  logsSortOrder?: LogsSortOrder | null;\n  onChangeTime: (range: AbsoluteTimeRange) => void;\n  scrollToTopLogs: () => void;\n  scrollToBottomLogs?: () => void;\n  addResultsToCache: () => void;\n  clearCache: () => void;\n};\n\nexport type LogsPage = {\n  logsRange: AbsoluteTimeRange;\n  queryRange: AbsoluteTimeRange;\n};\n\nfunction LogsNavigation({\n  absoluteRange,\n  logsSortOrder,\n  timeZone,\n  loading,\n  onChangeTime,\n  scrollToTopLogs,\n  scrollToBottomLogs,\n  visibleRange,\n  queries,\n  clearCache,\n  addResultsToCache,\n}: Props) {\n  const [pages, setPages] = useState<LogsPage[]>([]);\n\n  // These refs are to determine, if we want to clear up logs navigation when totally new query is run\n  const expectedQueriesRef = useRef<DataQuery[]>();\n  const expectedRangeRef = useRef<AbsoluteTimeRange>();\n  // This ref is to store range span for future queres based on firstly selected time range\n  // e.g. if last 5 min selected, always run 5 min range\n  const rangeSpanRef = useRef(0);\n\n  const currentPageIndex = useMemo(\n    () =>\n      pages.findIndex((page) => {\n        return page.queryRange.to === absoluteRange.to;\n      }),\n    [absoluteRange.to, pages]\n  );\n\n  const oldestLogsFirst = logsSortOrder === LogsSortOrder.Ascending;\n  const onFirstPage = oldestLogsFirst ? currentPageIndex === pages.length - 1 : currentPageIndex === 0;\n  const onLastPage = oldestLogsFirst ? currentPageIndex === 0 : currentPageIndex === pages.length - 1;\n  const theme = useTheme2();\n  const styles = getStyles(theme, oldestLogsFirst);\n\n  // Main effect to set pages and index\n  useEffect(() => {\n    const newPage = { logsRange: visibleRange, queryRange: absoluteRange };\n    let newPages: LogsPage[] = [];\n    // We want to start new pagination if queries change or if absolute range is different than expected\n    if (!isEqual(expectedRangeRef.current, absoluteRange) || !isEqual(expectedQueriesRef.current, queries)) {\n      clearCache();\n      setPages([newPage]);\n      expectedQueriesRef.current = queries;\n      rangeSpanRef.current = absoluteRange.to - absoluteRange.from;\n    } else {\n      setPages((pages) => {\n        // Remove duplicates with new query\n        newPages = pages.filter((page) => !isEqual(newPage.queryRange, page.queryRange));\n        // Sort pages based on logsOrder so they visually align with displayed logs\n        newPages = [...newPages, newPage].sort((a, b) => sortPages(a, b, logsSortOrder));\n        return newPages;\n      });\n    }\n  }, [visibleRange, absoluteRange, logsSortOrder, queries, clearCache, addResultsToCache]);\n\n  const changeTime = useCallback(\n    ({ from, to }: AbsoluteTimeRange) => {\n      addResultsToCache();\n      expectedRangeRef.current = { from, to };\n      onChangeTime({ from, to });\n    },\n    [onChangeTime, addResultsToCache]\n  );\n\n  const sortPages = (a: LogsPage, b: LogsPage, logsSortOrder?: LogsSortOrder | null) => {\n    if (logsSortOrder === LogsSortOrder.Ascending) {\n      return a.queryRange.to > b.queryRange.to ? 1 : -1;\n    }\n    return a.queryRange.to > b.queryRange.to ? -1 : 1;\n  };\n\n  const olderLogsButton = (\n    <Button\n      data-testid=\"olderLogsButton\"\n      className={styles.navButton}\n      variant=\"secondary\"\n      onClick={() => {\n        //If we are not on the last page, use next page's range\n        reportInteraction('grafana_explore_logs_pagination_clicked', {\n          pageType: 'olderLogsButton',\n        });\n        if (!onLastPage) {\n          const indexChange = oldestLogsFirst ? -1 : 1;\n          changeTime({\n            from: pages[currentPageIndex + indexChange].queryRange.from,\n            to: pages[currentPageIndex + indexChange].queryRange.to,\n          });\n        } else {\n          //If we are on the last page, create new range\n          changeTime({ from: visibleRange.from - rangeSpanRef.current, to: visibleRange.from });\n        }\n        scrollToTopLogs();\n      }}\n      disabled={loading}\n    >\n      <div className={styles.navButtonContent}>\n        {loading ? <Spinner /> : <Icon name={oldestLogsFirst ? 'angle-up' : 'angle-down'} size=\"lg\" />}\n        <Trans i18nKey={'logs.logs-navigation.older-logs'}>Older logs</Trans>\n      </div>\n    </Button>\n  );\n\n  const newerLogsButton = (\n    <Button\n      data-testid=\"newerLogsButton\"\n      className={styles.navButton}\n      variant=\"secondary\"\n      onClick={() => {\n        reportInteraction('grafana_explore_logs_pagination_clicked', {\n          pageType: 'newerLogsButton',\n        });\n        //If we are not on the first page, use previous page's range\n        if (!onFirstPage) {\n          const indexChange = oldestLogsFirst ? 1 : -1;\n          changeTime({\n            from: pages[currentPageIndex + indexChange].queryRange.from,\n            to: pages[currentPageIndex + indexChange].queryRange.to,\n          });\n        }\n        scrollToTopLogs();\n        //If we are on the first page, button is disabled and we do nothing\n      }}\n      disabled={loading || onFirstPage}\n    >\n      <div className={styles.navButtonContent}>\n        {loading && <Spinner />}\n        {onFirstPage || loading ? null : <Icon name={oldestLogsFirst ? 'angle-down' : 'angle-up'} size=\"lg\" />}\n        {onFirstPage\n          ? t('logs.logs-navigation.start-of-range', 'Start of range')\n          : t('logs.logs-navigation.newer-logs', 'Newer logs')}\n      </div>\n    </Button>\n  );\n\n  const onPageClick = useCallback(\n    (page: LogsPage, pageNumber: number) => {\n      reportInteraction('grafana_explore_logs_pagination_clicked', {\n        pageType: 'page',\n        pageNumber,\n      });\n      changeTime({ from: page.queryRange.from, to: page.queryRange.to });\n      scrollToTopLogs();\n    },\n    [changeTime, scrollToTopLogs]\n  );\n\n  const onScrollToTopClick = useCallback(() => {\n    reportInteraction('grafana_explore_logs_scroll_top_clicked');\n    scrollToTopLogs();\n  }, [scrollToTopLogs]);\n\n  const onScrollToBottomClick = useCallback(() => {\n    reportInteraction('grafana_explore_logs_scroll_bottom_clicked');\n    scrollToBottomLogs?.();\n  }, [scrollToBottomLogs]);\n\n  return (\n    <div className={styles.navContainer}>\n      {!config.featureToggles.logsInfiniteScrolling && (\n        <>\n          {oldestLogsFirst ? olderLogsButton : newerLogsButton}\n          <LogsNavigationPages\n            pages={pages}\n            currentPageIndex={currentPageIndex}\n            oldestLogsFirst={oldestLogsFirst}\n            timeZone={timeZone}\n            loading={loading}\n            onClick={onPageClick}\n          />\n          {oldestLogsFirst ? newerLogsButton : olderLogsButton}\n        </>\n      )}\n      {scrollToBottomLogs && (\n        <Button\n          data-testid=\"scrollToBottom\"\n          className={styles.scrollToBottomButton}\n          variant=\"secondary\"\n          onClick={onScrollToBottomClick}\n          title={t('logs.logs-navigation.scroll-bottom', 'Scroll to bottom')}\n        >\n          <Icon name=\"arrow-down\" size=\"lg\" />\n        </Button>\n      )}\n      <Button\n        data-testid=\"scrollToTop\"\n        className={styles.scrollToTopButton}\n        variant=\"secondary\"\n        onClick={onScrollToTopClick}\n        title={t('logs.logs-navigation.scroll-top', 'Scroll to top')}\n      >\n        <Icon name=\"arrow-up\" size=\"lg\" />\n      </Button>\n    </div>\n  );\n}\n\nexport default memo(LogsNavigation);\n\nconst getStyles = (theme: GrafanaTheme2, oldestLogsFirst: boolean) => {\n  const navContainerHeight = `calc(100vh - 2*${theme.spacing(2)} - 2*${getChromeHeaderLevelHeight()}px)`;\n\n  return {\n    navContainer: css({\n      maxHeight: navContainerHeight,\n      width: oldestLogsFirst && !config.featureToggles.newLogsPanel ? '58px' : 'auto',\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: config.featureToggles.logsInfiniteScrolling\n        ? 'flex-end'\n        : oldestLogsFirst\n          ? 'flex-start'\n          : 'space-between',\n      position: 'sticky',\n      top: theme.spacing(2),\n      right: 0,\n    }),\n    navButton: css({\n      width: '58px',\n      height: '68px',\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n      lineHeight: 1,\n    }),\n    navButtonContent: css({\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n      width: '100%',\n      height: '100%',\n      whiteSpace: 'normal',\n    }),\n    scrollToBottomButton: css({\n      width: '40px',\n      height: '40px',\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n      position: 'absolute',\n      top: 0,\n    }),\n    scrollToTopButton: css({\n      width: '40px',\n      height: '40px',\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n      marginTop: theme.spacing(1),\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport { ReactNode, useCallback, useState } from 'react';\n\nimport { DataQueryError, GrafanaTheme2 } from '@grafana/data';\nimport { Alert, AlertVariant, Button, useTheme2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\ntype Props = {\n  error?: DataQueryError;\n  message?: ReactNode;\n  title: string;\n  severity?: AlertVariant;\n  suggestedAction?: string;\n  onSuggestedAction?(): void;\n  onRemove?(): void;\n  dismissable?: boolean;\n};\nconst SHORT_ERROR_MESSAGE_LIMIT = 100;\nexport function SupplementaryResultError(props: Props) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [dismissed, setDismissed] = useState(false);\n\n  const { dismissable, error, title, suggestedAction, onSuggestedAction, onRemove, severity = 'warning' } = props;\n  // generic get-error-message-logic, taken from\n  // /public/app/features/explore/ErrorContainer.tsx\n  const message = props.message ?? error?.message ?? error?.data?.message ?? '';\n  const showButton = typeof message === 'string' && message.length > SHORT_ERROR_MESSAGE_LIMIT;\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n\n  const dismiss = useCallback(() => {\n    setDismissed(true);\n  }, []);\n\n  const handleRemove = dismissable ? dismiss : onRemove;\n\n  if (dismissed) {\n    return null;\n  }\n\n  return (\n    <div className={styles.supplementaryErrorContainer}>\n      <Alert title={title} severity={severity} onRemove={handleRemove}>\n        {showButton ? (\n          <div className={styles.messageWrapper}>\n            {!isOpen ? (\n              <Button\n                variant=\"secondary\"\n                size=\"xs\"\n                onClick={() => {\n                  setIsOpen(true);\n                }}\n              >\n                <Trans i18nKey=\"explore.supplementary-result-error.show-details\">Show details</Trans>\n              </Button>\n            ) : (\n              message\n            )}\n          </div>\n        ) : (\n          <div className={`${styles.messageWrapper} ${styles.suggestedActionWrapper}`}>\n            {message}\n            {suggestedAction && onSuggestedAction && (\n              <Button variant=\"primary\" size=\"xs\" onClick={onSuggestedAction}>\n                {suggestedAction}\n              </Button>\n            )}\n          </div>\n        )}\n      </Alert>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    supplementaryErrorContainer: css({\n      width: '60%',\n      minWidth: `${theme.breakpoints.values.sm}px`,\n      maxWidth: `${theme.breakpoints.values.md}px`,\n      margin: '0 auto',\n    }),\n    messageWrapper: css({\n      minHeight: theme.spacing(3),\n      ['ul']: {\n        paddingLeft: theme.spacing(2),\n      },\n      ['button']: {\n        position: 'absolute',\n        bottom: theme.spacing(2),\n        right: theme.spacing(2),\n      },\n    }),\n    suggestedActionWrapper: css({\n      paddingBottom: theme.spacing(5),\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport { identity } from 'lodash';\nimport * as React from 'react';\n\nimport {\n  AbsoluteTimeRange,\n  DataQueryResponse,\n  LoadingState,\n  SplitOpen,\n  EventBus,\n  GrafanaTheme2,\n  DataFrame,\n  TimeRange,\n} from '@grafana/data';\nimport { TimeZone } from '@grafana/schema';\nimport { Icon, SeriesVisibilityChangeMode, Tooltip, TooltipDisplayMode, useStyles2, useTheme2 } from '@grafana/ui';\n\nimport { getLogsVolumeDataSourceInfo, isLogsVolumeLimited } from '../../logs/utils';\nimport { ExploreGraph } from '../Graph/ExploreGraph';\n\ntype Props = {\n  logsVolumeData: DataQueryResponse;\n  allLogsVolumeMaximum: number;\n  timeRange: TimeRange;\n  timeZone: TimeZone;\n  splitOpen: SplitOpen;\n  width: number;\n  onUpdateTimeRange: (timeRange: AbsoluteTimeRange) => void;\n  onLoadLogsVolume: () => void;\n  onHiddenSeriesChanged: (hiddenSeries: string[]) => void;\n  eventBus: EventBus;\n  annotations: DataFrame[];\n  toggleLegendRef?: React.MutableRefObject<(name: string, mode: SeriesVisibilityChangeMode) => void> | undefined;\n};\n\nexport function LogsVolumePanel(props: Props) {\n  const {\n    width,\n    timeZone,\n    splitOpen,\n    onUpdateTimeRange,\n    onHiddenSeriesChanged,\n    allLogsVolumeMaximum,\n    toggleLegendRef,\n  } = props;\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n  const spacing = parseInt(theme.spacing(2).slice(0, -2), 10);\n  const height = 150;\n\n  const logsVolumeData = props.logsVolumeData;\n\n  const logsVolumeInfo = getLogsVolumeDataSourceInfo(logsVolumeData?.data);\n  let extraInfo = logsVolumeInfo ? `${logsVolumeInfo.name}` : '';\n\n  if (isLogsVolumeLimited(logsVolumeData.data)) {\n    extraInfo = [\n      extraInfo,\n      'This datasource does not support full-range histograms. The graph below is based on the logs seen in the response.',\n    ]\n      .filter(identity)\n      .join('. ');\n  }\n\n  let extraInfoComponent = <span>{extraInfo}</span>;\n\n  if (logsVolumeData.state === LoadingState.Streaming) {\n    extraInfoComponent = (\n      <>\n        {extraInfoComponent}\n        <Tooltip content=\"Streaming\">\n          <Icon name=\"circle-mono\" size=\"md\" className={styles.streaming} data-testid=\"logs-volume-streaming\" />\n        </Tooltip>\n      </>\n    );\n  }\n\n  return (\n    <div style={{ height }} className={styles.contentContainer}>\n      <ExploreGraph\n        toggleLegendRef={toggleLegendRef}\n        vizLegendOverrides={{\n          calcs: ['sum'],\n        }}\n        graphStyle=\"lines\"\n        loadingState={logsVolumeData.state ?? LoadingState.Done}\n        data={logsVolumeData.data}\n        height={height}\n        width={width - spacing * 2}\n        timeRange={props.timeRange}\n        onChangeTime={onUpdateTimeRange}\n        timeZone={timeZone}\n        splitOpenFn={splitOpen}\n        tooltipDisplayMode={TooltipDisplayMode.Multi}\n        onHiddenSeriesChanged={onHiddenSeriesChanged}\n        anchorToZero\n        yAxisMaximum={allLogsVolumeMaximum}\n        eventBus={props.eventBus}\n        annotations={props.annotations}\n      />\n      {extraInfoComponent && <div className={styles.extraInfoContainer}>{extraInfoComponent}</div>}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    extraInfoContainer: css({\n      display: 'flex',\n      justifyContent: 'end',\n      position: 'absolute',\n      right: '5px',\n      top: '-10px',\n      fontSize: theme.typography.bodySmall.fontSize,\n      color: theme.colors.text.secondary,\n    }),\n    contentContainer: css({\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      position: 'relative',\n    }),\n    streaming: css({\n      color: theme.colors.success.text,\n    }),\n  };\n};\n","import { DataQueryError, DataQueryResponse } from '@grafana/data';\n\n// Currently we can only infer if an error response is a timeout or not.\nexport function isTimeoutErrorResponse(response: DataQueryResponse | undefined): boolean {\n  if (!response) {\n    return false;\n  }\n  if (!response.error && !response.errors) {\n    return false;\n  }\n\n  const errors = response.error ? [response.error] : response.errors || [];\n\n  return errors.some((error: DataQueryError) => {\n    const message = `${error.message || error.data?.message}`?.toLowerCase();\n    return message.includes('timeout');\n  });\n}\n","import { css } from '@emotion/css';\nimport { flatten, groupBy, mapValues, sortBy } from 'lodash';\nimport { useMemo } from 'react';\nimport * as React from 'react';\n\nimport {\n  AbsoluteTimeRange,\n  DataFrame,\n  DataQueryResponse,\n  DataTopic,\n  dateTime,\n  EventBus,\n  GrafanaTheme2,\n  LoadingState,\n  SplitOpen,\n  TimeRange,\n  TimeZone,\n} from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Button, InlineField, Alert, useStyles2, SeriesVisibilityChangeMode } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { mergeLogsVolumeDataFrames, isLogsVolumeLimited, getLogsVolumeMaximumRange } from '../../logs/utils';\nimport { SupplementaryResultError } from '../SupplementaryResultError';\n\nimport { LogsVolumePanel } from './LogsVolumePanel';\nimport { isTimeoutErrorResponse } from './utils/logsVolumeResponse';\n\ntype Props = {\n  logsVolumeData: DataQueryResponse | undefined;\n  absoluteRange: AbsoluteTimeRange;\n  timeZone: TimeZone;\n  splitOpen: SplitOpen;\n  width: number;\n  onUpdateTimeRange: (timeRange: AbsoluteTimeRange) => void;\n  onLoadLogsVolume: () => void;\n  onHiddenSeriesChanged: (hiddenSeries: string[]) => void;\n  eventBus: EventBus;\n  onClose?(): void;\n  toggleLegendRef?: React.MutableRefObject<(name: string, mode: SeriesVisibilityChangeMode) => void>;\n};\n\nexport const LogsVolumePanelList = ({\n  logsVolumeData,\n  absoluteRange,\n  onUpdateTimeRange,\n  width,\n  onLoadLogsVolume,\n  onHiddenSeriesChanged,\n  eventBus,\n  splitOpen,\n  timeZone,\n  onClose,\n  toggleLegendRef,\n}: Props) => {\n  const {\n    logVolumes,\n    maximumValue: allLogsVolumeMaximumValue,\n    maximumRange: allLogsVolumeMaximumRange,\n    annotations,\n  } = useMemo(() => {\n    let maximumValue = -Infinity;\n    const data = logsVolumeData?.data.filter((frame: DataFrame) => frame.meta?.dataTopic !== DataTopic.Annotations);\n    const annotations =\n      logsVolumeData?.data.filter((frame: DataFrame) => frame.meta?.dataTopic === DataTopic.Annotations) || [];\n    const sorted = sortBy(data || [], 'meta.custom.datasourceName');\n    const grouped = groupBy(sorted, 'meta.custom.datasourceName');\n    const logVolumes = mapValues(grouped, (value) => {\n      const mergedData = mergeLogsVolumeDataFrames(value);\n      maximumValue = Math.max(maximumValue, mergedData.maximum);\n      return mergedData.dataFrames;\n    });\n    const maximumRange = getLogsVolumeMaximumRange(flatten(Object.values(logVolumes)));\n    return {\n      maximumValue,\n      maximumRange,\n      logVolumes,\n      annotations,\n    };\n  }, [logsVolumeData]);\n\n  const styles = useStyles2(getStyles);\n\n  const numberOfLogVolumes = Object.keys(logVolumes).length;\n\n  const containsZoomed = Object.values(logVolumes).some((data: DataFrame[]) => {\n    const zoomRatio = logsLevelZoomRatio(data, absoluteRange);\n    return !isLogsVolumeLimited(data) && zoomRatio && zoomRatio < 1;\n  });\n\n  const canShowPartialData =\n    config.featureToggles.lokiShardSplitting && logsVolumeData && logsVolumeData.data.length > 0;\n  const timeoutError = isTimeoutErrorResponse(logsVolumeData);\n\n  const from = dateTime(Math.max(absoluteRange.from, allLogsVolumeMaximumRange.from));\n  const to = dateTime(Math.min(absoluteRange.to, allLogsVolumeMaximumRange.to));\n  const visibleRange: TimeRange = { from, to, raw: { from, to } };\n\n  if (logsVolumeData?.state === LoadingState.Loading) {\n    return (\n      <span>\n        <Trans i18nKey=\"explore.logs-volume-panel-list.loading\">Loading...</Trans>\n      </span>\n    );\n  } else if (timeoutError && !canShowPartialData) {\n    return (\n      <SupplementaryResultError\n        title={t('explore.logs-volume-panel-list.title-unable-to-show-log-volume', 'Unable to show log volume')}\n        // Using info to avoid users thinking that the actual query has failed.\n        message={\n          <>\n            <p>\n              <Trans i18nKey=\"explore.logs.logs-volume.much-data\">\n                The query is trying to access too much data. Try one or more of the following:\n              </Trans>\n            </p>\n            <ul>\n              <li>\n                <Trans i18nKey=\"explore.logs.logs-volume.add-filters\">\n                  Add more labels to your query to narrow down your search.\n                </Trans>\n              </li>\n              <li>\n                <Trans i18nKey=\"explore.logs.logs-volume.decrease-timerange\">\n                  Decrease the time range of your query.\n                </Trans>\n              </li>\n            </ul>\n          </>\n        }\n        severity=\"info\"\n        suggestedAction=\"Retry\"\n        onSuggestedAction={onLoadLogsVolume}\n        onRemove={onClose}\n      />\n    );\n  } else if (logsVolumeData?.error !== undefined && !canShowPartialData) {\n    return (\n      <SupplementaryResultError\n        error={logsVolumeData.error}\n        title={t(\n          'explore.logs-volume-panel-list.title-failed-volume-query',\n          'Failed to load log volume for this query'\n        )}\n      />\n    );\n  }\n\n  if (numberOfLogVolumes === 0 && logsVolumeData?.state !== LoadingState.Streaming) {\n    return (\n      <div className={styles.alertContainer}>\n        <Alert\n          severity=\"info\"\n          title={t('explore.logs-volume-panel-list.title-no-logs-volume-available', 'No logs volume available')}\n        >\n          No volume information available for the current queries and time range.\n        </Alert>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.listContainer}>\n      {timeoutError && canShowPartialData && (\n        <SupplementaryResultError\n          title={t('explore.logs-volume-panel-list.title-showing-partial-data', 'Showing partial data')}\n          message=\"The query is trying to access too much data and some sharded requests could not be completed. Try decreasing the time range or adding more labels to your query.\"\n          severity=\"info\"\n          dismissable\n        />\n      )}\n      {Object.keys(logVolumes).map((name, index) => {\n        return (\n          <LogsVolumePanel\n            toggleLegendRef={toggleLegendRef}\n            key={index}\n            timeRange={visibleRange}\n            allLogsVolumeMaximum={allLogsVolumeMaximumValue}\n            width={width}\n            logsVolumeData={{ data: logVolumes[name], state: logsVolumeData?.state }}\n            onUpdateTimeRange={onUpdateTimeRange}\n            timeZone={timeZone}\n            splitOpen={splitOpen}\n            onLoadLogsVolume={onLoadLogsVolume}\n            // TODO: Support filtering level from multiple log levels\n            onHiddenSeriesChanged={numberOfLogVolumes > 1 ? () => {} : onHiddenSeriesChanged}\n            eventBus={eventBus}\n            annotations={annotations}\n          />\n        );\n      })}\n      {containsZoomed && (\n        <div className={styles.extraInfoContainer}>\n          <InlineField\n            label={t('explore.logs-volume-panel-list.label-reload-log-volume', 'Reload log volume')}\n            transparent\n          >\n            <Button size=\"xs\" icon=\"sync\" variant=\"secondary\" onClick={onLoadLogsVolume} id=\"reload-volume\" />\n          </InlineField>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    listContainer: css({\n      paddingTop: '10px',\n    }),\n    extraInfoContainer: css({\n      display: 'flex',\n      justifyContent: 'end',\n      position: 'absolute',\n      right: '5px',\n      top: '5px',\n    }),\n    oldInfoText: css({\n      fontSize: theme.typography.bodySmall.fontSize,\n      color: theme.colors.text.secondary,\n    }),\n    alertContainer: css({\n      width: '50%',\n      minWidth: `${theme.breakpoints.values.sm}px`,\n      margin: '0 auto',\n    }),\n  };\n};\n\nfunction logsLevelZoomRatio(\n  logsVolumeData: DataFrame[] | undefined,\n  selectedTimeRange: AbsoluteTimeRange\n): number | undefined {\n  const dataRange = logsVolumeData && logsVolumeData[0] && logsVolumeData[0].meta?.custom?.absoluteRange;\n  return dataRange ? (selectedTimeRange.from - selectedTimeRange.to) / (dataRange.from - dataRange.to) : undefined;\n}\n","import { css, cx } from '@emotion/css';\nimport { capitalize, groupBy } from 'lodash';\nimport { useCallback, useEffect, useState, useRef, useMemo } from 'react';\nimport * as React from 'react';\nimport { usePrevious, useUnmount } from 'react-use';\n\nimport {\n  SplitOpen,\n  LogRowModel,\n  LogsMetaItem,\n  DataFrame,\n  AbsoluteTimeRange,\n  GrafanaTheme2,\n  LoadingState,\n  TimeZone,\n  RawTimeRange,\n  DataQueryResponse,\n  LogRowContextOptions,\n  LinkModel,\n  EventBus,\n  ExplorePanelsState,\n  Field,\n  TimeRange,\n  LogsDedupStrategy,\n  LogsSortOrder,\n  LogLevel,\n  DataTopic,\n  CoreApp,\n  LogsDedupDescription,\n  rangeUtil,\n  ExploreLogsPanelState,\n  DataHoverClearEvent,\n  DataHoverEvent,\n  serializeStateToUrlParam,\n  urlUtil,\n} from '@grafana/data';\nimport { config, reportInteraction } from '@grafana/runtime';\nimport { DataQuery } from '@grafana/schema';\nimport {\n  Button,\n  InlineField,\n  InlineFieldRow,\n  InlineSwitch,\n  PanelChrome,\n  PopoverContent,\n  RadioButtonGroup,\n  SeriesVisibilityChangeMode,\n  Themeable2,\n  withTheme2,\n} from '@grafana/ui';\nimport { mapMouseEventToMode } from '@grafana/ui/internal';\nimport { Trans, t } from 'app/core/internationalization';\nimport store from 'app/core/store';\nimport { createAndCopyShortLink, getLogsPermalinkRange } from 'app/core/utils/shortLinks';\nimport { ControlledLogRows } from 'app/features/logs/components/ControlledLogRows';\nimport { InfiniteScroll } from 'app/features/logs/components/InfiniteScroll';\nimport { LogRows } from 'app/features/logs/components/LogRows';\nimport { LogRowContextModal } from 'app/features/logs/components/log-context/LogRowContextModal';\nimport { LogList, LogListControlOptions } from 'app/features/logs/components/panel/LogList';\nimport { isDedupStrategy, isLogsSortOrder } from 'app/features/logs/components/panel/LogListContext';\nimport { LogLevelColor, dedupLogRows, filterLogLevels } from 'app/features/logs/logsModel';\nimport { getLogLevelFromKey, getLogLevelInfo } from 'app/features/logs/utils';\nimport { LokiQueryDirection } from 'app/plugins/datasource/loki/dataquery.gen';\nimport { isLokiQuery } from 'app/plugins/datasource/loki/queryUtils';\nimport { getState } from 'app/store/store';\nimport { ExploreItemState, useDispatch } from 'app/types';\n\nimport {\n  contentOutlineTrackLevelFilter,\n  contentOutlineTrackPinAdded,\n  contentOutlineTrackPinClicked,\n  contentOutlineTrackPinLimitReached,\n  contentOutlineTrackPinRemoved,\n  contentOutlineTrackUnpinClicked,\n} from '../ContentOutline/ContentOutlineAnalyticEvents';\nimport { useContentOutlineContext } from '../ContentOutline/ContentOutlineContext';\nimport { getUrlStateFromPaneState } from '../hooks/useStateSync';\nimport { changePanelState } from '../state/explorePane';\nimport { changeQueries, runQueries } from '../state/query';\n\nimport { LogsFeedback } from './LogsFeedback';\nimport { LogsMetaRow } from './LogsMetaRow';\nimport LogsNavigation from './LogsNavigation';\nimport { LogsTableWrap, getLogsTableHeight } from './LogsTableWrap';\nimport { LogsVolumePanelList } from './LogsVolumePanelList';\nimport { SETTING_KEY_ROOT, SETTINGS_KEYS, visualisationTypeKey } from './utils/logs';\n\ninterface Props extends Themeable2 {\n  width: number;\n  splitOpen: SplitOpen;\n  logRows: LogRowModel[];\n  logsMeta?: LogsMetaItem[];\n  logsSeries?: DataFrame[];\n  logsQueries?: DataQuery[];\n  visibleRange?: AbsoluteTimeRange;\n  theme: GrafanaTheme2;\n  loading: boolean;\n  loadingState: LoadingState;\n  absoluteRange: AbsoluteTimeRange;\n  timeZone: TimeZone;\n  scanning?: boolean;\n  scanRange?: RawTimeRange;\n  exploreId: string;\n  datasourceType?: string;\n  logsVolumeEnabled: boolean;\n  logsVolumeData: DataQueryResponse | undefined;\n  onSetLogsVolumeEnabled: (enabled: boolean) => void;\n  loadLogsVolumeData: () => void;\n  showContextToggle?: (row: LogRowModel) => boolean;\n  onChangeTime: (range: AbsoluteTimeRange) => void;\n  onClickFilterLabel?: (key: string, value: string, frame?: DataFrame) => void;\n  onClickFilterOutLabel?: (key: string, value: string, frame?: DataFrame) => void;\n  onStartScanning?: () => void;\n  onStopScanning?: () => void;\n  getRowContext?: (row: LogRowModel, origRow: LogRowModel, options: LogRowContextOptions) => Promise<DataQueryResponse>;\n  getRowContextQuery?: (\n    row: LogRowModel,\n    options?: LogRowContextOptions,\n    cacheFilters?: boolean\n  ) => Promise<DataQuery | null>;\n  getLogRowContextUi?: (row: LogRowModel, runContextQuery?: () => void) => React.ReactNode;\n  getFieldLinks: (field: Field, rowIndex: number, dataFrame: DataFrame) => Array<LinkModel<Field>>;\n  addResultsToCache: () => void;\n  clearCache: () => void;\n  eventBus: EventBus;\n  panelState?: ExplorePanelsState;\n  scrollElement?: HTMLDivElement;\n  isFilterLabelActive?: (key: string, value: string, refId?: string) => Promise<boolean>;\n  logsFrames?: DataFrame[];\n  range: TimeRange;\n  onClickFilterString?: (value: string, refId?: string) => void;\n  onClickFilterOutString?: (value: string, refId?: string) => void;\n  loadMoreLogs?(range: AbsoluteTimeRange): void;\n  onPinLineCallback?: () => void;\n}\n\nexport type LogsVisualisationType = 'table' | 'logs';\n\n// we need to define the order of these explicitly\nconst DEDUP_OPTIONS = [\n  LogsDedupStrategy.none,\n  LogsDedupStrategy.exact,\n  LogsDedupStrategy.numbers,\n  LogsDedupStrategy.signature,\n];\n\nconst getDefaultVisualisationType = (): LogsVisualisationType => {\n  const visualisationType = store.get(visualisationTypeKey);\n  if (visualisationType === 'table') {\n    return 'table';\n  }\n  if (visualisationType === 'logs') {\n    return 'logs';\n  }\n  if (config.featureToggles.logsExploreTableDefaultVisualization) {\n    return 'table';\n  }\n  return 'logs';\n};\n\nconst PINNED_LOGS_LIMIT = 10;\nconst PINNED_LOGS_TITLE = 'Pinned log';\nconst PINNED_LOGS_MESSAGE = 'Pin to content outline';\nconst PINNED_LOGS_PANELID = 'Logs';\n\nconst UnthemedLogs: React.FunctionComponent<Props> = (props: Props) => {\n  const {\n    width,\n    splitOpen,\n    logRows,\n    logsMeta,\n    logsVolumeEnabled,\n    logsVolumeData,\n    loadLogsVolumeData,\n    loading = false,\n    onClickFilterLabel,\n    onClickFilterOutLabel,\n    timeZone,\n    scanning,\n    scanRange,\n    showContextToggle,\n    absoluteRange,\n    onChangeTime,\n    getFieldLinks,\n    theme,\n    logsQueries,\n    clearCache,\n    addResultsToCache,\n    exploreId,\n    getRowContext,\n    getLogRowContextUi,\n    getRowContextQuery,\n    loadMoreLogs,\n    panelState,\n    eventBus,\n    onPinLineCallback,\n    scrollElement,\n  } = props;\n  const [showLabels, setShowLabels] = useState<boolean>(store.getBool(SETTINGS_KEYS.showLabels, false));\n  const [showTime, setShowTime] = useState<boolean>(store.getBool(SETTINGS_KEYS.showTime, true));\n  const [wrapLogMessage, setWrapLogMessage] = useState<boolean>(store.getBool(SETTINGS_KEYS.wrapLogMessage, true));\n  const [prettifyLogMessage, setPrettifyLogMessage] = useState<boolean>(\n    store.getBool(SETTINGS_KEYS.prettifyLogMessage, false)\n  );\n  const [dedupStrategy, setDedupStrategy] = useState<LogsDedupStrategy>(LogsDedupStrategy.none);\n  const [hiddenLogLevels, setHiddenLogLevels] = useState<LogLevel[]>([]);\n  const [logsSortOrder, setLogsSortOrder] = useState<LogsSortOrder>(\n    store.get(SETTINGS_KEYS.logsSortOrder) || LogsSortOrder.Descending\n  );\n  const [isFlipping, setIsFlipping] = useState<boolean>(false);\n  const [displayedFields, setDisplayedFields] = useState<string[]>([]);\n  const [contextOpen, setContextOpen] = useState<boolean>(false);\n  const [contextRow, setContextRow] = useState<LogRowModel | undefined>(undefined);\n  const [pinLineButtonTooltipTitle, setPinLineButtonTooltipTitle] = useState<PopoverContent>(PINNED_LOGS_MESSAGE);\n  const [visualisationType, setVisualisationType] = useState<LogsVisualisationType>(\n    panelState?.logs?.visualisationType ?? getDefaultVisualisationType()\n  );\n  const logsContainerRef = useRef<HTMLDivElement | null>(null);\n  const dispatch = useDispatch();\n  const previousLoading = usePrevious(loading);\n\n  const logsVolumeEventBus = eventBus.newScopedBus('logsvolume', { onlyLocal: false });\n  const { register, unregister, outlineItems, updateItem, unregisterAllChildren } = useContentOutlineContext() ?? {};\n  const flipOrderTimer = useRef<number | undefined>(undefined);\n  const cancelFlippingTimer = useRef<number | undefined>(undefined);\n  const toggleLegendRef = useRef<(name: string, mode: SeriesVisibilityChangeMode) => void>(() => {});\n  const topLogsRef = useRef<HTMLDivElement>(null);\n  const logLevelsRef = useRef<LogLevel[] | null>(null);\n\n  const tableHeight = getLogsTableHeight();\n  const setWrapperLineWrapStyles = wrapLogMessage || visualisationType === 'table';\n  const styles = getStyles(theme, setWrapperLineWrapStyles, tableHeight);\n  const hasData = logRows && logRows.length > 0;\n  const scanText = scanRange ? `Scanning ${rangeUtil.describeTimeRange(scanRange)}` : 'Scanning...';\n\n  // Get pinned log lines\n  const logsParent = outlineItems?.find((item) => item.panelId === PINNED_LOGS_PANELID && item.level === 'root');\n  const pinnedLogs = useMemo(\n    () =>\n      logsParent?.children\n        ?.filter((outlines) => outlines.title === PINNED_LOGS_TITLE)\n        .map((pinnedLogs) => pinnedLogs.id),\n    [logsParent?.children]\n  );\n\n  const getPinnedLogsCount = useCallback(() => {\n    const logsParent = outlineItems?.find((item) => item.panelId === PINNED_LOGS_PANELID && item.level === 'root');\n    return logsParent?.children?.filter((child) => child.title === PINNED_LOGS_TITLE).length ?? 0;\n  }, [outlineItems]);\n\n  const registerLogLevelsWithContentOutline = useCallback(() => {\n    const levelsArr = Object.keys(LogLevelColor);\n    const logVolumeDataFrames = new Set(logsVolumeData?.data);\n    // TODO remove this once filtering multiple log volumes is supported\n    const logVolData = logsVolumeData?.data.filter(\n      (frame: DataFrame) => frame.meta?.dataTopic !== DataTopic.Annotations\n    );\n    const grouped = groupBy(logVolData, 'meta.custom.datasourceName');\n    const numberOfLogVolumes = Object.keys(grouped).length;\n\n    // clean up all current log levels\n    if (unregisterAllChildren) {\n      unregisterAllChildren((items) => {\n        const logsParent = items?.find((item) => item.panelId === PINNED_LOGS_PANELID && item.level === 'root');\n        return logsParent?.id;\n      }, 'filter');\n    }\n\n    // check if we have dataFrames that return the same level\n    const logLevelsArray: LogLevel[] = [];\n    logVolumeDataFrames.forEach((dataFrame) => {\n      const { level } = getLogLevelInfo(dataFrame, logsVolumeData?.data ?? []);\n      logLevelsArray.push(getLogLevelFromKey(level));\n    });\n\n    const sortedLLArray = logLevelsArray.sort((a: string, b: string) =>\n      levelsArr.indexOf(a) > levelsArr.indexOf(b) ? 1 : -1\n    );\n\n    const logLevels = new Set(sortedLLArray);\n    logLevelsRef.current = Array.from(logLevels);\n\n    if (logLevels.size > 1 && logsVolumeEnabled && numberOfLogVolumes === 1) {\n      logLevels.forEach((level) => {\n        const allLevelsSelected = hiddenLogLevels.length === 0;\n        const currentLevelSelected = !hiddenLogLevels.find((hiddenLevel) => hiddenLevel === level);\n        if (register) {\n          register({\n            title: level,\n            icon: 'gf-logs',\n            panelId: PINNED_LOGS_PANELID,\n            level: 'child',\n            type: 'filter',\n            highlight: currentLevelSelected && !allLevelsSelected,\n            onClick: (e: React.MouseEvent) => {\n              toggleLegendRef.current?.(level, mapMouseEventToMode(e));\n              contentOutlineTrackLevelFilter(level);\n            },\n            ref: null,\n            color: LogLevelColor[level],\n          });\n        }\n      });\n    }\n  }, [logsVolumeData?.data, unregisterAllChildren, logsVolumeEnabled, hiddenLogLevels, register, toggleLegendRef]);\n\n  useEffect(() => {\n    if (getPinnedLogsCount() === PINNED_LOGS_LIMIT) {\n      setPinLineButtonTooltipTitle(\n        <span style={{ display: 'flex', textAlign: 'center' }}>\n          ❗️\n          <Trans i18nKey=\"explore.logs.maximum-pinned-logs\">\n            Maximum of {{ PINNED_LOGS_LIMIT }} pinned logs reached. Unpin a log to add another.\n          </Trans>\n        </span>\n      );\n    } else {\n      setPinLineButtonTooltipTitle(PINNED_LOGS_MESSAGE);\n    }\n  }, [outlineItems, getPinnedLogsCount]);\n\n  useEffect(() => {\n    if (loading && !previousLoading && panelState?.logs?.id) {\n      // loading stopped, so we need to remove any permalinked log lines\n      delete panelState.logs.id;\n\n      dispatch(\n        changePanelState(exploreId, 'logs', {\n          ...panelState,\n        })\n      );\n    }\n  }, [dispatch, exploreId, loading, panelState, previousLoading]);\n\n  useEffect(() => {\n    const visualisationType = panelState?.logs?.visualisationType ?? getDefaultVisualisationType();\n    setVisualisationType(visualisationType);\n\n    store.set(visualisationTypeKey, visualisationType);\n  }, [panelState?.logs?.visualisationType]);\n\n  useEffect(() => {\n    let displayedFields: string[] = [];\n    if (Array.isArray(panelState?.logs?.displayedFields)) {\n      displayedFields = panelState?.logs?.displayedFields;\n    } else if (panelState?.logs?.displayedFields && typeof panelState?.logs?.displayedFields === 'object') {\n      displayedFields = Object.values(panelState?.logs?.displayedFields);\n    }\n    setDisplayedFields(displayedFields);\n  }, [panelState?.logs?.displayedFields]);\n\n  useEffect(() => {\n    registerLogLevelsWithContentOutline();\n  }, [logsVolumeData?.data, hiddenLogLevels, registerLogLevelsWithContentOutline]);\n\n  useUnmount(() => {\n    if (flipOrderTimer) {\n      window.clearTimeout(flipOrderTimer.current);\n    }\n    if (cancelFlippingTimer) {\n      window.clearTimeout(cancelFlippingTimer.current);\n    }\n  });\n\n  useUnmount(() => {\n    // If we're unmounting logs (e.g. switching to another datasource), we need to remove the logs specific panel state, otherwise it will persist in the explore url\n    if (\n      panelState?.logs?.columns ||\n      panelState?.logs?.refId ||\n      panelState?.logs?.labelFieldName ||\n      panelState?.logs?.displayedFields\n    ) {\n      dispatch(\n        changePanelState(exploreId, 'logs', {\n          ...panelState?.logs,\n          columns: undefined,\n          visualisationType: visualisationType,\n          labelFieldName: undefined,\n          refId: undefined,\n          displayedFields: undefined,\n        })\n      );\n    }\n  });\n\n  const updatePanelState = useCallback(\n    (logsPanelState: Partial<ExploreLogsPanelState>) => {\n      const state: ExploreItemState | undefined = getState().explore.panes[exploreId];\n      if (state?.panelsState) {\n        dispatch(\n          changePanelState(exploreId, 'logs', {\n            ...state.panelsState.logs,\n            columns: logsPanelState.columns ?? panelState?.logs?.columns,\n            visualisationType: logsPanelState.visualisationType ?? visualisationType,\n            labelFieldName: logsPanelState.labelFieldName,\n            refId: logsPanelState.refId ?? panelState?.logs?.refId,\n            displayedFields: logsPanelState.displayedFields ?? panelState?.logs?.displayedFields,\n          })\n        );\n      }\n    },\n    [\n      dispatch,\n      exploreId,\n      panelState?.logs?.columns,\n      panelState?.logs?.displayedFields,\n      panelState?.logs?.refId,\n      visualisationType,\n    ]\n  );\n\n  // actions\n  const onLogRowHover = useCallback(\n    (row?: LogRowModel) => {\n      if (!row) {\n        props.eventBus.publish(new DataHoverClearEvent());\n      } else {\n        props.eventBus.publish(\n          new DataHoverEvent({\n            point: {\n              time: row.timeEpochMs,\n            },\n          })\n        );\n      }\n    },\n    [props.eventBus]\n  );\n\n  const scrollIntoView = useCallback(\n    (element: HTMLElement) => {\n      if (config.featureToggles.logsInfiniteScrolling) {\n        if (logsContainerRef.current) {\n          topLogsRef.current?.scrollIntoView();\n          logsContainerRef.current.scroll({\n            behavior: 'smooth',\n            top: logsContainerRef.current.scrollTop + element.getBoundingClientRect().top - window.innerHeight / 2,\n          });\n        }\n\n        return;\n      }\n\n      if (scrollElement) {\n        scrollElement.scroll({\n          behavior: 'smooth',\n          top: scrollElement.scrollTop + element.getBoundingClientRect().top - window.innerHeight / 2,\n        });\n      }\n    },\n    [scrollElement]\n  );\n\n  const sortOrderChanged = useCallback(\n    (newSortOrder: LogsSortOrder) => {\n      if (!logsQueries) {\n        return;\n      }\n      let hasLokiQueries = false;\n      const newQueries = logsQueries.map((query) => {\n        if (query.datasource?.type !== 'loki' || !isLokiQuery(query)) {\n          return query;\n        }\n        if (query.direction === LokiQueryDirection.Scan) {\n          // Don't override Scan. When the direction is Scan it means that the user specifically assigned this direction to the query.\n          return query;\n        }\n        hasLokiQueries = true;\n        const newDirection =\n          newSortOrder === LogsSortOrder.Ascending ? LokiQueryDirection.Forward : LokiQueryDirection.Backward;\n        if (newDirection !== query.direction) {\n          query.direction = newDirection;\n        }\n        return query;\n      });\n\n      if (hasLokiQueries) {\n        dispatch(changeQueries({ exploreId, queries: newQueries }));\n        dispatch(runQueries({ exploreId }));\n      }\n    },\n    [dispatch, exploreId, logsQueries]\n  );\n\n  const onChangeLogsSortOrder = useCallback(\n    (newSortOrder: LogsSortOrder) => {\n      setIsFlipping(true);\n      // we are using setTimeout here to make sure that disabled button is rendered before the rendering of reordered logs\n      flipOrderTimer.current = window.setTimeout(() => {\n        store.set(SETTINGS_KEYS.logsSortOrder, newSortOrder);\n        sortOrderChanged(newSortOrder);\n        setLogsSortOrder(newSortOrder);\n      }, 0);\n      cancelFlippingTimer.current = window.setTimeout(() => setIsFlipping(false), 1000);\n    },\n    [sortOrderChanged]\n  );\n\n  const onChangeVisualisation = useCallback(\n    (visualisation: LogsVisualisationType) => {\n      setVisualisationType(visualisation);\n      const payload = {\n        ...panelState?.logs,\n        visualisationType: visualisation,\n      };\n      updatePanelState(payload);\n\n      reportInteraction('grafana_explore_logs_visualisation_changed', {\n        newVisualizationType: visualisation,\n        datasourceType: props.datasourceType ?? 'unknown',\n        defaultVisualisationType: config.featureToggles.logsExploreTableDefaultVisualization ? 'table' : 'logs',\n      });\n    },\n    [panelState?.logs, props.datasourceType, updatePanelState]\n  );\n\n  const onChangeDedup = useCallback(\n    (dedupStrategy: LogsDedupStrategy) => {\n      reportInteraction('grafana_explore_logs_deduplication_clicked', {\n        deduplicationType: dedupStrategy,\n        datasourceType: props.datasourceType,\n      });\n      setDedupStrategy(dedupStrategy);\n    },\n    [props.datasourceType]\n  );\n\n  const onChangeLabels = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n    if (target) {\n      const showLabels = target.checked;\n\n      setShowLabels(showLabels);\n      store.set(SETTINGS_KEYS.showLabels, showLabels);\n    }\n  }, []);\n\n  const onChangeShowTime = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n    if (target) {\n      const showTime = target.checked;\n\n      setShowTime(showTime);\n      store.set(SETTINGS_KEYS.showTime, showTime);\n    }\n  }, []);\n\n  const onChangeWrapLogMessage = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n    if (target) {\n      const wrapLogMessage = target.checked;\n\n      setWrapLogMessage(wrapLogMessage);\n      store.set(SETTINGS_KEYS.wrapLogMessage, wrapLogMessage);\n    }\n  }, []);\n\n  const onChangePrettifyLogMessage = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n    if (target) {\n      const prettifyLogMessage = target.checked;\n\n      setPrettifyLogMessage(prettifyLogMessage);\n      store.set(SETTINGS_KEYS.prettifyLogMessage, prettifyLogMessage);\n    }\n  }, []);\n\n  const onToggleLogLevel = useCallback((hiddenRawLevels: string[]) => {\n    const hiddenLogLevels = hiddenRawLevels.map(getLogLevelFromKey);\n    setHiddenLogLevels(hiddenLogLevels);\n  }, []);\n\n  const onToggleLogsVolumeCollapse = useCallback(\n    (collapsed: boolean) => {\n      props.onSetLogsVolumeEnabled(!collapsed);\n      reportInteraction('grafana_explore_logs_histogram_toggle_clicked', {\n        datasourceType: props.datasourceType,\n        type: !collapsed ? 'open' : 'close',\n      });\n    },\n    [props]\n  );\n\n  const onClickScan = useCallback(\n    (event: React.SyntheticEvent) => {\n      event.preventDefault();\n      if (props.onStartScanning) {\n        props.onStartScanning();\n        reportInteraction('grafana_explore_logs_scanning_button_clicked', {\n          type: 'start',\n          datasourceType: props.datasourceType,\n        });\n      }\n    },\n    [props]\n  );\n\n  const onClickStopScan = useCallback(\n    (event: React.SyntheticEvent) => {\n      event.preventDefault();\n      if (props.onStopScanning) {\n        props.onStopScanning();\n      }\n    },\n    [props]\n  );\n\n  const showField = useCallback(\n    (key: string) => {\n      const index = displayedFields.indexOf(key);\n\n      if (index === -1) {\n        const updatedDisplayedFields = displayedFields.concat(key);\n        setDisplayedFields(updatedDisplayedFields);\n        updatePanelState({\n          ...panelState?.logs,\n          displayedFields: updatedDisplayedFields,\n        });\n      }\n    },\n    [displayedFields, panelState?.logs, updatePanelState]\n  );\n\n  const hideField = useCallback(\n    (key: string) => {\n      const index = displayedFields.indexOf(key);\n      if (index > -1) {\n        const updatedDisplayedFields = displayedFields.filter((k) => key !== k);\n        setDisplayedFields(updatedDisplayedFields);\n        updatePanelState({\n          ...panelState?.logs,\n          displayedFields: updatedDisplayedFields,\n        });\n      }\n    },\n    [displayedFields, panelState?.logs, updatePanelState]\n  );\n\n  const clearDetectedFields = useCallback(() => {\n    updatePanelState({\n      ...panelState?.logs,\n      displayedFields: [],\n    });\n    setDisplayedFields([]);\n  }, [panelState?.logs, updatePanelState]);\n\n  const onCloseCallbackRef = useRef<() => void>(() => {});\n\n  let onCloseContext = useCallback(() => {\n    setContextOpen(false);\n    setContextRow(undefined);\n    reportInteraction('grafana_explore_logs_log_context_closed', {\n      datasourceType: contextRow?.datasourceType,\n      logRowUid: contextRow?.uid,\n    });\n    onCloseCallbackRef?.current();\n  }, [contextRow?.datasourceType, contextRow?.uid, onCloseCallbackRef]);\n\n  const onOpenContext = useCallback((row: LogRowModel, onClose: () => void) => {\n    // we are setting the `contextOpen` open state and passing it down to the `LogRow` in order to highlight the row when a LogContext is open\n    setContextOpen(true);\n    setContextRow(row);\n    reportInteraction('grafana_explore_logs_log_context_opened', {\n      datasourceType: row.datasourceType,\n      logRowUid: row.uid,\n    });\n    onCloseCallbackRef.current = onClose;\n  }, []);\n\n  const onPermalinkClick = useCallback(\n    async (row: LogRowModel) => {\n      // this is an extra check, to be sure that we are not\n      // creating permalinks for logs without an id-field.\n      // normally it should never happen, because we do not\n      // display the permalink button in such cases.\n      if (row.rowId === undefined) {\n        return;\n      }\n\n      // get explore state, add log-row-id and make timerange absolute\n      const urlState = getUrlStateFromPaneState(getState().explore.panes[exploreId]!);\n      urlState.panelsState = {\n        ...panelState,\n        logs: { id: row.uid, visualisationType: visualisationType ?? getDefaultVisualisationType(), displayedFields },\n      };\n      urlState.range = getLogsPermalinkRange(row, logRows, absoluteRange);\n\n      // append changed urlState to baseUrl\n      const serializedState = serializeStateToUrlParam(urlState);\n      const baseUrl = /.*(?=\\/explore)/.exec(`${window.location.href}`)![0];\n      const url = urlUtil.renderUrl(`${baseUrl}/explore`, { left: serializedState });\n      await createAndCopyShortLink(url);\n\n      reportInteraction('grafana_explore_logs_permalink_clicked', {\n        datasourceType: row.datasourceType ?? 'unknown',\n        logRowUid: row.uid,\n        logRowLevel: row.logLevel,\n      });\n    },\n    [absoluteRange, displayedFields, exploreId, logRows, panelState, visualisationType]\n  );\n\n  const scrollToTopLogs = useCallback(() => {\n    if (config.featureToggles.logsInfiniteScrolling) {\n      if (logsContainerRef.current) {\n        logsContainerRef.current.scroll({\n          behavior: 'auto',\n          top: 0,\n        });\n      }\n    }\n    topLogsRef.current?.scrollIntoView();\n  }, []);\n\n  const onPinToContentOutlineClick = useCallback(\n    (row: LogRowModel, allowUnPin = true) => {\n      if (getPinnedLogsCount() === PINNED_LOGS_LIMIT && !allowUnPin) {\n        contentOutlineTrackPinLimitReached();\n        return;\n      }\n\n      // find the Logs parent item\n      const logsParent = outlineItems?.find((item) => item.panelId === PINNED_LOGS_PANELID && item.level === 'root');\n\n      //update the parent's expanded state\n      if (logsParent && updateItem) {\n        updateItem(logsParent.id, { expanded: true });\n      }\n\n      const alreadyPinned = pinnedLogs?.find((pin) => pin === row.rowId);\n      if (alreadyPinned && row.rowId && allowUnPin) {\n        unregister?.(row.rowId);\n        contentOutlineTrackPinRemoved();\n      } else if (getPinnedLogsCount() !== PINNED_LOGS_LIMIT && !alreadyPinned) {\n        register?.({\n          id: row.rowId,\n          icon: 'gf-logs',\n          title: PINNED_LOGS_TITLE,\n          panelId: PINNED_LOGS_PANELID,\n          level: 'child',\n          ref: null,\n          color: LogLevelColor[row.logLevel],\n          childOnTop: true,\n          onClick: () => {\n            onOpenContext(row, () => {});\n            contentOutlineTrackPinClicked();\n          },\n          onRemove: (id: string) => {\n            unregister?.(id);\n            contentOutlineTrackUnpinClicked();\n          },\n        });\n        contentOutlineTrackPinAdded();\n      }\n\n      onPinLineCallback?.();\n    },\n    [getPinnedLogsCount, onOpenContext, onPinLineCallback, outlineItems, pinnedLogs, register, unregister, updateItem]\n  );\n\n  const hasUnescapedContent = useMemo(() => checkUnescapedContent(logRows), [logRows]);\n  const filteredLogs = useMemo(() => filterRows(logRows, hiddenLogLevels), [hiddenLogLevels, logRows]);\n  const { dedupedRows, dedupCount } = useMemo(\n    () => dedupRows(filteredLogs, dedupStrategy),\n    [dedupStrategy, filteredLogs]\n  );\n  const navigationRange = useMemo(() => createNavigationRange(logRows), [logRows]);\n  const infiniteScrollAvailable = useMemo(\n    () => !logsQueries?.some((query) => 'direction' in query && query.direction === LokiQueryDirection.Scan),\n    [logsQueries]\n  );\n\n  const onLogOptionsChange = useCallback(\n    (option: keyof LogListControlOptions, value: string | string[] | boolean) => {\n      if (option === 'sortOrder' && isLogsSortOrder(value)) {\n        sortOrderChanged(value);\n      } else if (option === 'filterLevels' && Array.isArray(value)) {\n        if (value.length === 0) {\n          setHiddenLogLevels([]);\n          return;\n        }\n        const allLevels = logLevelsRef.current ?? Object.keys(LogLevelColor).map(getLogLevelFromKey);\n        if (hiddenLogLevels.length === 0) {\n          toggleLegendRef.current?.(value[0], SeriesVisibilityChangeMode.ToggleSelection);\n          setHiddenLogLevels(allLevels.filter((level) => level !== value[0]));\n          return;\n        }\n        const appendsLevel = value.find((level) => hiddenLogLevels.includes(getLogLevelFromKey(level)));\n        const removesLevel = allLevels.find((level) => !value.includes(level) && !hiddenLogLevels.includes(level));\n        if (appendsLevel) {\n          toggleLegendRef.current?.(appendsLevel, SeriesVisibilityChangeMode.AppendToSelection);\n          setHiddenLogLevels(hiddenLogLevels.filter((hiddenLevel) => hiddenLevel === appendsLevel));\n          return;\n        } else if (removesLevel) {\n          toggleLegendRef.current?.(removesLevel, SeriesVisibilityChangeMode.AppendToSelection);\n          setHiddenLogLevels([...hiddenLogLevels, removesLevel]);\n        }\n      } else if (option === 'dedupStrategy' && isDedupStrategy(value)) {\n        setDedupStrategy(value);\n      }\n    },\n    [hiddenLogLevels, sortOrderChanged]\n  );\n\n  const filterLevels: LogLevel[] | undefined = useMemo(\n    () =>\n      !logLevelsRef.current\n        ? undefined\n        : logLevelsRef.current.filter((level) => hiddenLogLevels.length > 0 && !hiddenLogLevels.includes(level)),\n    [hiddenLogLevels]\n  );\n\n  return (\n    <>\n      {getRowContext && contextRow && (\n        <LogRowContextModal\n          open={contextOpen}\n          row={contextRow}\n          onClose={onCloseContext}\n          getRowContext={(row, options) => getRowContext(row, contextRow, options)}\n          getRowContextQuery={getRowContextQuery}\n          getLogRowContextUi={getLogRowContextUi}\n          logsSortOrder={logsSortOrder}\n          timeZone={timeZone}\n        />\n      )}\n      <PanelChrome\n        title={t('explore.unthemed-logs.title-logs-volume', 'Logs volume')}\n        collapsible\n        collapsed={!logsVolumeEnabled}\n        onToggleCollapse={onToggleLogsVolumeCollapse}\n      >\n        {logsVolumeEnabled && (\n          <LogsVolumePanelList\n            toggleLegendRef={toggleLegendRef}\n            absoluteRange={absoluteRange}\n            width={width}\n            logsVolumeData={logsVolumeData}\n            onUpdateTimeRange={onChangeTime}\n            timeZone={timeZone}\n            splitOpen={splitOpen}\n            onLoadLogsVolume={loadLogsVolumeData}\n            onHiddenSeriesChanged={onToggleLogLevel}\n            eventBus={logsVolumeEventBus}\n            onClose={() => onToggleLogsVolumeCollapse(true)}\n          />\n        )}\n      </PanelChrome>\n      <PanelChrome\n        titleItems={[\n          config.featureToggles.logsExploreTableVisualisation ? (\n            visualisationType === 'logs' ? null : (\n              <PanelChrome.TitleItem title={t('explore.unthemed-logs.title-feedback', 'Feedback')} key=\"A\">\n                <LogsFeedback feedbackUrl=\"https://forms.gle/5YyKdRQJ5hzq4c289\" />\n              </PanelChrome.TitleItem>\n            )\n          ) : null,\n        ]}\n        title={t('explore.unthemed-logs.title-logs', 'Logs')}\n        actions={\n          <>\n            {config.featureToggles.logsExploreTableVisualisation && (\n              <div className={styles.visualisationType}>\n                <RadioButtonGroup\n                  className={styles.visualisationTypeRadio}\n                  options={[\n                    {\n                      label: 'Logs',\n                      value: 'logs',\n                      description: 'Show results in logs visualisation',\n                    },\n                    {\n                      label: 'Table',\n                      value: 'table',\n                      description: 'Show results in table visualisation',\n                    },\n                  ]}\n                  size=\"sm\"\n                  value={visualisationType}\n                  onChange={onChangeVisualisation}\n                />\n              </div>\n            )}\n          </>\n        }\n        loadingState={loading ? LoadingState.Loading : LoadingState.Done}\n      >\n        <div className={styles.stickyNavigation}>\n          {visualisationType !== 'table' &&\n            !config.featureToggles.newLogsPanel &&\n            !config.featureToggles.logsPanelControls && (\n              <div className={styles.logOptions}>\n                <InlineFieldRow>\n                  <InlineField\n                    label={t('explore.unthemed-logs.label-time', 'Time')}\n                    className={styles.horizontalInlineLabel}\n                    transparent\n                  >\n                    <InlineSwitch\n                      value={showTime}\n                      onChange={onChangeShowTime}\n                      className={styles.horizontalInlineSwitch}\n                      transparent\n                      id={`show-time_${exploreId}`}\n                    />\n                  </InlineField>\n                  <InlineField\n                    label={t('explore.unthemed-logs.label-unique-labels', 'Unique labels')}\n                    className={styles.horizontalInlineLabel}\n                    transparent\n                  >\n                    <InlineSwitch\n                      value={showLabels}\n                      onChange={onChangeLabels}\n                      className={styles.horizontalInlineSwitch}\n                      transparent\n                      id={`unique-labels_${exploreId}`}\n                    />\n                  </InlineField>\n                  <InlineField\n                    label={t('explore.unthemed-logs.label-wrap-lines', 'Wrap lines')}\n                    className={styles.horizontalInlineLabel}\n                    transparent\n                  >\n                    <InlineSwitch\n                      value={wrapLogMessage}\n                      onChange={onChangeWrapLogMessage}\n                      className={styles.horizontalInlineSwitch}\n                      transparent\n                      id={`wrap-lines_${exploreId}`}\n                    />\n                  </InlineField>\n                  <InlineField\n                    label={t('explore.unthemed-logs.label-prettify-json', 'Prettify JSON')}\n                    className={styles.horizontalInlineLabel}\n                    transparent\n                  >\n                    <InlineSwitch\n                      value={prettifyLogMessage}\n                      onChange={onChangePrettifyLogMessage}\n                      className={styles.horizontalInlineSwitch}\n                      transparent\n                      id={`prettify_${exploreId}`}\n                    />\n                  </InlineField>\n                  <InlineField\n                    label={t('explore.unthemed-logs.label-deduplication', 'Deduplication')}\n                    className={styles.horizontalInlineLabel}\n                    transparent\n                  >\n                    <RadioButtonGroup\n                      options={DEDUP_OPTIONS.map((dedupType) => ({\n                        label: capitalize(dedupType),\n                        value: dedupType,\n                        description: LogsDedupDescription[dedupType],\n                      }))}\n                      value={dedupStrategy}\n                      onChange={onChangeDedup}\n                      className={styles.radioButtons}\n                    />\n                  </InlineField>\n                </InlineFieldRow>\n\n                <div>\n                  <InlineField\n                    label={t('explore.unthemed-logs.label-display-results', 'Display results')}\n                    className={styles.horizontalInlineLabel}\n                    transparent\n                    disabled={isFlipping || loading}\n                  >\n                    <RadioButtonGroup\n                      options={[\n                        {\n                          label: 'Newest first',\n                          value: LogsSortOrder.Descending,\n                          description: 'Show results newest to oldest',\n                        },\n                        {\n                          label: 'Oldest first',\n                          value: LogsSortOrder.Ascending,\n                          description: 'Show results oldest to newest',\n                        },\n                      ]}\n                      value={logsSortOrder}\n                      onChange={onChangeLogsSortOrder}\n                      className={styles.radioButtons}\n                    />\n                  </InlineField>\n                </div>\n              </div>\n            )}\n          <div ref={topLogsRef} />\n          <LogsMetaRow\n            logRows={logRows}\n            meta={logsMeta || []}\n            dedupStrategy={dedupStrategy}\n            dedupCount={dedupCount}\n            displayedFields={displayedFields}\n            clearDetectedFields={clearDetectedFields}\n          />\n        </div>\n        <div className={cx(styles.logsSection, visualisationType === 'table' ? styles.logsTable : undefined)}>\n          {!config.featureToggles.logsPanelControls && visualisationType === 'table' && hasData && (\n            <div className={styles.logRows} data-testid=\"logRowsTable\">\n              {/* Width should be full width minus logs navigation and padding */}\n              <LogsTableWrap\n                logsSortOrder={logsSortOrder}\n                range={props.range}\n                splitOpen={splitOpen}\n                timeZone={timeZone}\n                width={width - 80}\n                logsFrames={props.logsFrames ?? []}\n                onClickFilterLabel={onClickFilterLabel}\n                onClickFilterOutLabel={onClickFilterOutLabel}\n                panelState={panelState?.logs}\n                theme={theme}\n                updatePanelState={updatePanelState}\n                datasourceType={props.datasourceType}\n              />\n            </div>\n          )}\n          {!config.featureToggles.newLogsPanel && config.featureToggles.logsPanelControls && hasData && (\n            <div className={styles.logRowsWrapper} data-testid=\"logRows\">\n              <ControlledLogRows\n                logsTableFrames={props.logsFrames}\n                width={width}\n                updatePanelState={updatePanelState}\n                panelState={panelState?.logs}\n                datasourceType={props.datasourceType}\n                splitOpen={splitOpen}\n                visualisationType={visualisationType}\n                loading={loading}\n                loadMoreLogs={infiniteScrollAvailable ? loadMoreLogs : undefined}\n                range={props.range}\n                pinnedLogs={pinnedLogs}\n                logRows={logRows}\n                deduplicatedRows={dedupedRows}\n                dedupStrategy={dedupStrategy}\n                onClickFilterLabel={onClickFilterLabel}\n                onClickFilterOutLabel={onClickFilterOutLabel}\n                showContextToggle={showContextToggle}\n                getRowContextQuery={getRowContextQuery}\n                showLabels={showLabels}\n                showTime={showTime}\n                enableLogDetails={true}\n                wrapLogMessage={wrapLogMessage}\n                prettifyLogMessage={prettifyLogMessage}\n                timeZone={timeZone}\n                getFieldLinks={getFieldLinks}\n                logsSortOrder={logsSortOrder}\n                displayedFields={displayedFields}\n                onClickShowField={showField}\n                onClickHideField={hideField}\n                app={CoreApp.Explore}\n                onLogRowHover={onLogRowHover}\n                onOpenContext={onOpenContext}\n                onPermalinkClick={onPermalinkClick}\n                permalinkedRowId={panelState?.logs?.id}\n                scrollIntoView={scrollIntoView}\n                isFilterLabelActive={props.isFilterLabelActive}\n                onClickFilterString={props.onClickFilterString}\n                onClickFilterOutString={props.onClickFilterOutString}\n                onUnpinLine={onPinToContentOutlineClick}\n                onPinLine={onPinToContentOutlineClick}\n                pinLineButtonTooltipTitle={pinLineButtonTooltipTitle}\n                logsMeta={logsMeta}\n                logOptionsStorageKey={SETTING_KEY_ROOT}\n                onLogOptionsChange={onLogOptionsChange}\n                hasUnescapedContent={hasUnescapedContent}\n              />\n            </div>\n          )}\n          {!config.featureToggles.logsPanelControls &&\n            !config.featureToggles.newLogsPanel &&\n            visualisationType === 'logs' &&\n            hasData && (\n              <>\n                <div\n                  className={config.featureToggles.logsInfiniteScrolling ? styles.scrollableLogRows : styles.logRows}\n                  data-testid=\"logRows\"\n                  ref={logsContainerRef}\n                >\n                  <InfiniteScroll\n                    loading={loading}\n                    loadMoreLogs={infiniteScrollAvailable ? loadMoreLogs : undefined}\n                    range={props.range}\n                    timeZone={timeZone}\n                    rows={logRows}\n                    scrollElement={logsContainerRef.current}\n                    sortOrder={logsSortOrder}\n                    app={CoreApp.Explore}\n                  >\n                    <LogRows\n                      pinnedLogs={pinnedLogs}\n                      logRows={logRows}\n                      deduplicatedRows={dedupedRows}\n                      dedupStrategy={dedupStrategy}\n                      onClickFilterLabel={onClickFilterLabel}\n                      onClickFilterOutLabel={onClickFilterOutLabel}\n                      showContextToggle={showContextToggle}\n                      getRowContextQuery={getRowContextQuery}\n                      showLabels={showLabels}\n                      showTime={showTime}\n                      enableLogDetails={true}\n                      wrapLogMessage={wrapLogMessage}\n                      prettifyLogMessage={prettifyLogMessage}\n                      timeZone={timeZone}\n                      getFieldLinks={getFieldLinks}\n                      logsSortOrder={logsSortOrder}\n                      displayedFields={displayedFields}\n                      onClickShowField={showField}\n                      onClickHideField={hideField}\n                      app={CoreApp.Explore}\n                      onLogRowHover={onLogRowHover}\n                      onOpenContext={onOpenContext}\n                      onPermalinkClick={onPermalinkClick}\n                      permalinkedRowId={panelState?.logs?.id}\n                      scrollIntoView={scrollIntoView}\n                      isFilterLabelActive={props.isFilterLabelActive}\n                      scrollElement={logsContainerRef.current}\n                      onClickFilterString={props.onClickFilterString}\n                      onClickFilterOutString={props.onClickFilterOutString}\n                      onUnpinLine={onPinToContentOutlineClick}\n                      onPinLine={onPinToContentOutlineClick}\n                      pinLineButtonTooltipTitle={pinLineButtonTooltipTitle}\n                      renderPreview\n                    />\n                  </InfiniteScroll>\n                </div>\n                <LogsNavigation\n                  logsSortOrder={logsSortOrder}\n                  visibleRange={navigationRange ?? absoluteRange}\n                  absoluteRange={absoluteRange}\n                  timeZone={timeZone}\n                  onChangeTime={onChangeTime}\n                  loading={loading}\n                  queries={logsQueries ?? []}\n                  scrollToTopLogs={scrollToTopLogs}\n                  addResultsToCache={addResultsToCache}\n                  clearCache={clearCache}\n                />\n              </>\n            )}\n          {config.featureToggles.newLogsPanel && visualisationType === 'logs' && hasData && (\n            <div data-testid=\"logRows\" ref={logsContainerRef} className={styles.logRowsWrapper}>\n              {logsContainerRef.current && (\n                <LogList\n                  app={CoreApp.Explore}\n                  containerElement={logsContainerRef.current}\n                  dedupStrategy={dedupStrategy}\n                  displayedFields={displayedFields}\n                  filterLevels={filterLevels}\n                  getFieldLinks={getFieldLinks}\n                  getRowContextQuery={getRowContextQuery}\n                  loadMore={loadMoreLogs}\n                  logOptionsStorageKey={SETTING_KEY_ROOT}\n                  logs={dedupedRows}\n                  logsMeta={logsMeta}\n                  logSupportsContext={showContextToggle}\n                  onLogOptionsChange={onLogOptionsChange}\n                  onLogLineHover={onLogRowHover}\n                  onOpenContext={onOpenContext}\n                  onPermalinkClick={onPermalinkClick}\n                  onPinLine={onPinToContentOutlineClick}\n                  onUnpinLine={onPinToContentOutlineClick}\n                  pinLineButtonTooltipTitle={pinLineButtonTooltipTitle}\n                  pinnedLogs={pinnedLogs}\n                  showControls\n                  showTime={showTime}\n                  sortOrder={logsSortOrder}\n                  timeRange={props.range}\n                  timeZone={timeZone}\n                  wrapLogMessage={wrapLogMessage}\n                />\n              )}\n            </div>\n          )}\n          {!loading && !hasData && !scanning && (\n            <div className={styles.noDataWrapper}>\n              <div className={styles.noData}>\n                <Trans i18nKey=\"explore.logs.no-logs-found\">No logs found.</Trans>\n                <Button size=\"sm\" variant=\"secondary\" className={styles.scanButton} onClick={onClickScan}>\n                  <Trans i18nKey=\"explore.logs.scan-for-older-logs\">Scan for older logs</Trans>\n                </Button>\n              </div>\n            </div>\n          )}\n          {scanning && (\n            <div className={styles.noDataWrapper}>\n              <div className={styles.noData}>\n                <span>{scanText}</span>\n                <Button size=\"sm\" variant=\"secondary\" className={styles.scanButton} onClick={onClickStopScan}>\n                  <Trans i18nKey=\"explore.logs.stop-scan\">Stop scan</Trans>\n                </Button>\n              </div>\n            </div>\n          )}\n        </div>\n      </PanelChrome>\n    </>\n  );\n};\n\nexport const Logs = withTheme2(UnthemedLogs);\n\nconst getStyles = (theme: GrafanaTheme2, wrapLogMessage: boolean, tableHeight: number) => {\n  return {\n    noDataWrapper: css({\n      display: 'flex',\n      justifyContent: 'center',\n      width: '100%',\n      paddingBottom: theme.spacing(2),\n    }),\n    noData: css({\n      display: 'inline-block',\n    }),\n    scanButton: css({\n      marginLeft: theme.spacing(1),\n    }),\n    logOptions: css({\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'baseline',\n      flexWrap: 'wrap',\n      backgroundColor: theme.colors.background.primary,\n      padding: `${theme.spacing(1)} ${theme.spacing(2)}`,\n      borderRadius: theme.shape.radius.default,\n      margin: `${theme.spacing(0, 0, 1)}`,\n      border: `1px solid ${theme.colors.border.medium}`,\n    }),\n    headerButton: css({\n      margin: `${theme.spacing(0.5, 0, 0, 1)}`,\n    }),\n    horizontalInlineLabel: css({\n      '& > label': {\n        marginRight: '0',\n      },\n    }),\n    horizontalInlineSwitch: css({\n      padding: `0 ${theme.spacing(1)} 0 0`,\n    }),\n    radioButtons: css({\n      margin: '0',\n    }),\n    logsSection: css({\n      display: 'flex',\n      flexDirection: 'row',\n      justifyContent: 'space-between',\n      position: 'relative',\n    }),\n    logsTable: css({\n      maxHeight: `${tableHeight}px`,\n    }),\n    scrollableLogRows: css({\n      overflowY: 'scroll',\n      width: '100%',\n      maxHeight: '75vh',\n    }),\n    logRows: css({\n      overflowX: `${wrapLogMessage ? 'unset' : 'scroll'}`,\n      overflowY: 'visible',\n      width: '100%',\n    }),\n    logRowsWrapper: css({\n      width: '100%',\n    }),\n    visualisationType: css({\n      display: 'flex',\n      flex: '1',\n      justifyContent: 'space-between',\n    }),\n    visualisationTypeRadio: css({\n      margin: `0 0 0 ${theme.spacing(1)}`,\n    }),\n    stickyNavigation: css({\n      overflow: 'visible',\n      ...(config.featureToggles.logsInfiniteScrolling && { marginBottom: '0px' }),\n    }),\n  };\n};\n\nconst checkUnescapedContent = (logRows: LogRowModel[]) => {\n  return logRows.some((r) => r.hasUnescapedContent);\n};\n\nconst dedupRows = (logRows: LogRowModel[], dedupStrategy: LogsDedupStrategy) => {\n  const dedupedRows = dedupLogRows(logRows, dedupStrategy);\n  const dedupCount = dedupedRows.reduce((sum, row) => (row.duplicates ? sum + row.duplicates : sum), 0);\n  return { dedupedRows, dedupCount };\n};\n\nconst filterRows = (logRows: LogRowModel[], hiddenLogLevels: string[]) => {\n  return filterLogLevels(logRows, new Set(hiddenLogLevels));\n};\n\nconst createNavigationRange = (logRows: LogRowModel[]): { from: number; to: number } | undefined => {\n  if (!logRows || logRows.length === 0) {\n    return undefined;\n  }\n  const firstTimeStamp = logRows[0].timeEpochMs;\n  const lastTimeStamp = logRows[logRows.length - 1].timeEpochMs;\n\n  if (lastTimeStamp < firstTimeStamp) {\n    return { from: lastTimeStamp, to: firstTimeStamp };\n  }\n\n  return { from: firstTimeStamp, to: lastTimeStamp };\n};\n","import { css } from '@emotion/css';\nimport { useRef } from 'react';\nimport * as React from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nconst transitionDuration = 500;\n// We add a bit of delay to the transition as another perf optimisation. As at the start we need to render\n// quite a bit of new rows, if we start transition at the same time there can be frame rate drop. This gives time\n// for react to first render them and then do the animation.\nconst transitionDelay = 100;\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    logsEnter: css({\n      label: 'logsEnter',\n      position: 'absolute',\n      opacity: 0,\n      height: 'auto',\n      width: '100%',\n    }),\n    logsEnterActive: css({\n      label: 'logsEnterActive',\n      opacity: 1,\n      [theme.transitions.handleMotion('no-preference', 'reduce')]: {\n        transition: `opacity ${transitionDuration}ms ease-out ${transitionDelay}ms`,\n      },\n    }),\n    logsExit: css({\n      label: 'logsExit',\n      position: 'absolute',\n      opacity: 1,\n      height: 'auto',\n      width: '100%',\n    }),\n    logsExitActive: css({\n      label: 'logsExitActive',\n      opacity: 0,\n      [theme.transitions.handleMotion('no-preference', 'reduce')]: {\n        transition: `opacity ${transitionDuration}ms ease-out ${transitionDelay}ms`,\n      },\n    }),\n  };\n};\n\ntype Props = {\n  children: React.ReactElement;\n  visible: boolean;\n};\n\n/**\n * Cross fade transition component that is tied a bit too much to the logs containers so not very useful elsewhere\n * right now.\n */\nexport function LogsCrossFadeTransition(props: Props) {\n  const { visible, children } = props;\n  const transitionRef = useRef(null);\n  const styles = useStyles2(getStyles);\n  return (\n    <CSSTransition\n      in={visible}\n      mountOnEnter={true}\n      unmountOnExit={true}\n      timeout={transitionDuration + transitionDelay}\n      classNames={{\n        enter: styles.logsEnter,\n        enterActive: styles.logsEnterActive,\n        exit: styles.logsExit,\n        exitActive: styles.logsExitActive,\n      }}\n      nodeRef={transitionRef}\n    >\n      <div ref={transitionRef}>{children}</div>\n    </CSSTransition>\n  );\n}\n","import { PureComponent } from 'react';\nimport * as React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport {\n  AbsoluteTimeRange,\n  Field,\n  hasLogsContextSupport,\n  hasLogsContextUiSupport,\n  LoadingState,\n  LogRowModel,\n  RawTimeRange,\n  EventBus,\n  SplitOpen,\n  DataFrame,\n  SupplementaryQueryType,\n  DataQueryResponse,\n  LogRowContextOptions,\n  DataSourceWithLogsContextSupport,\n  DataSourceApi,\n  hasToggleableQueryFiltersSupport,\n  DataSourceWithQueryModificationSupport,\n  hasQueryModificationSupport,\n} from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { DataQuery } from '@grafana/schema';\nimport { Collapse } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\nimport { MIXED_DATASOURCE_NAME } from 'app/plugins/datasource/mixed/MixedDataSource';\nimport { StoreState } from 'app/types';\nimport { ExploreItemState } from 'app/types/explore';\n\nimport { getTimeZone } from '../../profile/state/selectors';\nimport {\n  addResultsToCache,\n  clearCache,\n  loadSupplementaryQueryData,\n  selectIsWaitingForData,\n  setSupplementaryQueryEnabled,\n} from '../state/query';\nimport { updateTimeRange, loadMoreLogs } from '../state/time';\nimport { LiveTailControls } from '../useLiveTailControls';\nimport { getFieldLinksForExplore } from '../utils/links';\n\nimport { LiveLogsWithTheme } from './LiveLogs';\nimport { Logs } from './Logs';\nimport { LogsCrossFadeTransition } from './utils/LogsCrossFadeTransition';\n\ninterface LogsContainerProps extends PropsFromRedux {\n  width: number;\n  exploreId: string;\n  scanRange?: RawTimeRange;\n  syncedTimes: boolean;\n  loadingState: LoadingState;\n  onClickFilterLabel: (key: string, value: string, frame?: DataFrame) => void;\n  onClickFilterOutLabel: (key: string, value: string, frame?: DataFrame) => void;\n  onStartScanning: () => void;\n  onStopScanning: () => void;\n  eventBus: EventBus;\n  splitOpenFn: SplitOpen;\n  scrollElement?: HTMLDivElement;\n  isFilterLabelActive: (key: string, value: string, refId?: string) => Promise<boolean>;\n  onClickFilterString: (value: string, refId?: string) => void;\n  onClickFilterOutString: (value: string, refId?: string) => void;\n  onPinLineCallback?: () => void;\n}\n\ntype DataSourceInstance =\n  | DataSourceApi<DataQuery>\n  | (DataSourceApi<DataQuery> & DataSourceWithLogsContextSupport<DataQuery>)\n  | (DataSourceApi<DataQuery> & DataSourceWithQueryModificationSupport<DataQuery>);\n\ninterface LogsContainerState {\n  dsInstances: Record<string, DataSourceInstance>;\n}\n\nclass LogsContainer extends PureComponent<LogsContainerProps, LogsContainerState> {\n  state: LogsContainerState = {\n    dsInstances: {},\n  };\n\n  componentDidMount() {\n    this.updateDataSourceInstances();\n  }\n\n  componentDidUpdate(prevProps: LogsContainerProps) {\n    if (prevProps.logsQueries !== this.props.logsQueries) {\n      this.updateDataSourceInstances();\n    }\n  }\n\n  private updateDataSourceInstances() {\n    const { logsQueries, datasourceInstance } = this.props;\n    if (!logsQueries || !datasourceInstance) {\n      return;\n    }\n\n    const dsInstances: Record<string, DataSourceInstance> = {};\n\n    // Not in mixed mode.\n    if (datasourceInstance.uid !== MIXED_DATASOURCE_NAME) {\n      logsQueries.forEach(({ refId }) => {\n        dsInstances[refId] = datasourceInstance;\n      });\n      this.setState({ dsInstances });\n      return;\n    }\n\n    // Mixed mode.\n    const dsPromises: Array<Promise<{ ds: DataSourceApi; refId: string }>> = [];\n    for (const query of logsQueries) {\n      if (!query.datasource) {\n        continue;\n      }\n      const mustCheck = !dsInstances[query.refId] || dsInstances[query.refId].uid !== query.datasource.uid;\n      if (mustCheck) {\n        dsPromises.push(\n          new Promise((resolve) => {\n            getDataSourceSrv()\n              .get(query.datasource)\n              .then((ds) => {\n                resolve({ ds, refId: query.refId });\n              });\n          })\n        );\n      }\n    }\n\n    if (!dsPromises.length) {\n      return;\n    }\n\n    Promise.all(dsPromises).then((instances) => {\n      instances.forEach(({ ds, refId }) => {\n        dsInstances[refId] = ds;\n      });\n      this.setState({ dsInstances });\n    });\n  }\n\n  onChangeTime = (absoluteRange: AbsoluteTimeRange) => {\n    const { exploreId, updateTimeRange } = this.props;\n    updateTimeRange({ exploreId, absoluteRange });\n  };\n\n  loadMoreLogs = (absoluteRange: AbsoluteTimeRange) => {\n    const { exploreId, loadMoreLogs } = this.props;\n    loadMoreLogs({ exploreId, absoluteRange });\n  };\n\n  private getQuery(\n    logsQueries: DataQuery[] | undefined,\n    row: LogRowModel,\n    datasourceInstance: DataSourceApi<DataQuery> & DataSourceWithLogsContextSupport<DataQuery>\n  ) {\n    // we need to find the query, and we need to be very sure that it's a query\n    // from this datasource\n    return (logsQueries ?? []).find(\n      (q) => q.refId === row.dataFrame.refId && q.datasource != null && q.datasource.type === datasourceInstance.type\n    );\n  }\n\n  getLogRowContext = async (\n    row: LogRowModel,\n    origRow: LogRowModel,\n    options: LogRowContextOptions\n  ): Promise<DataQueryResponse> => {\n    const { logsQueries } = this.props;\n\n    if (!origRow.dataFrame.refId || !this.state.dsInstances[origRow.dataFrame.refId]) {\n      return Promise.resolve({\n        data: [],\n      });\n    }\n\n    const ds = this.state.dsInstances[origRow.dataFrame.refId];\n    if (!hasLogsContextSupport(ds)) {\n      return Promise.resolve({\n        data: [],\n      });\n    }\n\n    const query = this.getQuery(logsQueries, origRow, ds);\n    return query\n      ? ds.getLogRowContext(row, options, query)\n      : Promise.resolve({\n          data: [],\n        });\n  };\n\n  getLogRowContextQuery = async (\n    row: LogRowModel,\n    options?: LogRowContextOptions,\n    cacheFilters = true\n  ): Promise<DataQuery | null> => {\n    const { logsQueries } = this.props;\n\n    if (!row.dataFrame.refId || !this.state.dsInstances[row.dataFrame.refId]) {\n      return Promise.resolve(null);\n    }\n\n    const ds = this.state.dsInstances[row.dataFrame.refId];\n    if (!hasLogsContextSupport(ds)) {\n      return Promise.resolve(null);\n    }\n\n    const query = this.getQuery(logsQueries, row, ds);\n    return query && ds.getLogRowContextQuery\n      ? ds.getLogRowContextQuery(row, options, query, cacheFilters)\n      : Promise.resolve(null);\n  };\n\n  getLogRowContextUi = (row: LogRowModel, runContextQuery?: () => void): React.ReactNode => {\n    const { logsQueries } = this.props;\n\n    if (!row.dataFrame.refId || !this.state.dsInstances[row.dataFrame.refId]) {\n      return <></>;\n    }\n\n    const ds = this.state.dsInstances[row.dataFrame.refId];\n    if (!hasLogsContextSupport(ds)) {\n      return <></>;\n    }\n\n    const query = this.getQuery(logsQueries, row, ds);\n    return query && hasLogsContextUiSupport(ds) && ds.getLogRowContextUi ? (\n      ds.getLogRowContextUi(row, runContextQuery, query)\n    ) : (\n      <></>\n    );\n  };\n\n  showContextToggle = (row?: LogRowModel): boolean => {\n    if (!row?.dataFrame.refId || !this.state.dsInstances[row.dataFrame.refId]) {\n      return false;\n    }\n    return hasLogsContextSupport(this.state.dsInstances[row.dataFrame.refId]);\n  };\n\n  getFieldLinks = (field: Field, rowIndex: number, dataFrame: DataFrame) => {\n    const { splitOpenFn, range } = this.props;\n    return getFieldLinksForExplore({ field, rowIndex, splitOpenFn, range, dataFrame });\n  };\n\n  logDetailsFilterAvailable = () => {\n    return Object.values(this.state.dsInstances).some(\n      (ds) => ds?.modifyQuery || hasQueryModificationSupport(ds) || hasToggleableQueryFiltersSupport(ds)\n    );\n  };\n\n  filterValueAvailable = () => {\n    return Object.values(this.state.dsInstances).some(\n      (ds) => hasQueryModificationSupport(ds) && ds?.getSupportedQueryModifications().includes('ADD_STRING_FILTER')\n    );\n  };\n\n  filterOutValueAvailable = () => {\n    return Object.values(this.state.dsInstances).some(\n      (ds) => hasQueryModificationSupport(ds) && ds?.getSupportedQueryModifications().includes('ADD_STRING_FILTER_OUT')\n    );\n  };\n\n  addResultsToCache = () => {\n    this.props.addResultsToCache(this.props.exploreId);\n  };\n\n  clearCache = () => {\n    this.props.clearCache(this.props.exploreId);\n  };\n\n  loadLogsVolumeData = () => {\n    this.props.loadSupplementaryQueryData(this.props.exploreId, SupplementaryQueryType.LogsVolume);\n  };\n\n  onSetLogsVolumeEnabled = (enabled: boolean) => {\n    this.props.setSupplementaryQueryEnabled(this.props.exploreId, enabled, SupplementaryQueryType.LogsVolume);\n  };\n\n  render() {\n    const {\n      loading,\n      loadingState,\n      logRows,\n      logsMeta,\n      logsSeries,\n      logsQueries,\n      onClickFilterLabel,\n      onClickFilterOutLabel,\n      onStartScanning,\n      onStopScanning,\n      absoluteRange,\n      timeZone,\n      visibleRange,\n      scanning,\n      range,\n      width,\n      splitOpenFn,\n      isLive,\n      exploreId,\n      logsVolume,\n      scrollElement,\n      onPinLineCallback,\n    } = this.props;\n\n    if (!logRows) {\n      return null;\n    }\n\n    return (\n      <>\n        <LogsCrossFadeTransition visible={isLive}>\n          <Collapse label={t('explore.logs-container.label-logs', 'Logs')} loading={false} isOpen>\n            <LiveTailControls exploreId={exploreId}>\n              {(controls) => (\n                <LiveLogsWithTheme\n                  logRows={logRows}\n                  timeZone={timeZone}\n                  stopLive={controls.stop}\n                  isPaused={this.props.isPaused}\n                  onPause={controls.pause}\n                  onResume={controls.resume}\n                  onClear={controls.clear}\n                  clearedAtIndex={this.props.clearedAtIndex}\n                />\n              )}\n            </LiveTailControls>\n          </Collapse>\n        </LogsCrossFadeTransition>\n        <LogsCrossFadeTransition visible={!isLive}>\n          <Logs\n            exploreId={exploreId}\n            datasourceType={this.props.datasourceInstance?.type}\n            logRows={logRows}\n            logsMeta={logsMeta}\n            logsSeries={logsSeries}\n            logsVolumeEnabled={logsVolume.enabled}\n            onSetLogsVolumeEnabled={this.onSetLogsVolumeEnabled}\n            logsVolumeData={logsVolume.data}\n            logsQueries={logsQueries}\n            width={width}\n            splitOpen={splitOpenFn}\n            loading={loading}\n            loadingState={loadingState}\n            loadLogsVolumeData={this.loadLogsVolumeData}\n            onChangeTime={this.onChangeTime}\n            loadMoreLogs={this.loadMoreLogs}\n            onClickFilterLabel={this.logDetailsFilterAvailable() ? onClickFilterLabel : undefined}\n            onClickFilterOutLabel={this.logDetailsFilterAvailable() ? onClickFilterOutLabel : undefined}\n            onStartScanning={onStartScanning}\n            onStopScanning={onStopScanning}\n            absoluteRange={absoluteRange}\n            visibleRange={visibleRange}\n            timeZone={timeZone}\n            scanning={scanning}\n            scanRange={range.raw}\n            showContextToggle={this.showContextToggle}\n            getRowContext={this.getLogRowContext}\n            getRowContextQuery={this.getLogRowContextQuery}\n            getLogRowContextUi={this.getLogRowContextUi}\n            getFieldLinks={this.getFieldLinks}\n            addResultsToCache={this.addResultsToCache}\n            clearCache={this.clearCache}\n            eventBus={this.props.eventBus}\n            panelState={this.props.panelState}\n            logsFrames={this.props.logsFrames}\n            scrollElement={scrollElement}\n            isFilterLabelActive={this.logDetailsFilterAvailable() ? this.props.isFilterLabelActive : undefined}\n            range={range}\n            onPinLineCallback={onPinLineCallback}\n            onClickFilterString={this.filterValueAvailable() ? this.props.onClickFilterString : undefined}\n            onClickFilterOutString={this.filterOutValueAvailable() ? this.props.onClickFilterOutString : undefined}\n          />\n        </LogsCrossFadeTransition>\n      </>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId }: { exploreId: string }) {\n  const explore = state.explore;\n  const item: ExploreItemState = explore.panes[exploreId]!;\n  const {\n    logsResult,\n    scanning,\n    datasourceInstance,\n    isLive,\n    isPaused,\n    clearedAtIndex,\n    range,\n    absoluteRange,\n    supplementaryQueries,\n  } = item;\n  const loading = selectIsWaitingForData(exploreId)(state);\n  const panelState = item.panelsState;\n  const timeZone = getTimeZone(state.user);\n  const logsVolume = supplementaryQueries[SupplementaryQueryType.LogsVolume];\n\n  return {\n    loading,\n    logRows: logsResult?.rows,\n    logsMeta: logsResult?.meta,\n    logsSeries: logsResult?.series,\n    logsQueries: logsResult?.queries,\n    visibleRange: logsResult?.visibleRange,\n    scanning,\n    timeZone,\n    datasourceInstance,\n    isLive,\n    isPaused,\n    clearedAtIndex,\n    range,\n    absoluteRange,\n    logsVolume,\n    panelState,\n    logsFrames: item.queryResponse.logsFrames,\n  };\n}\n\nconst mapDispatchToProps = {\n  updateTimeRange,\n  loadMoreLogs,\n  addResultsToCache,\n  clearCache,\n  loadSupplementaryQueryData,\n  setSupplementaryQueryEnabled,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(LogsContainer);\n","import { css } from '@emotion/css';\n\nimport {\n  DataQueryResponse,\n  DataSourceApi,\n  GrafanaTheme2,\n  hasSupplementaryQuerySupport,\n  LoadingState,\n  LogsDedupStrategy,\n  SplitOpen,\n  SupplementaryQueryType,\n} from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { DataQuery, TimeZone } from '@grafana/schema';\nimport { Button, Collapse, Icon, Tooltip, useStyles2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport store from 'app/core/store';\n\nimport { LogRows } from '../../logs/components/LogRows';\nimport { dataFrameToLogsModel } from '../../logs/logsModel';\nimport { SupplementaryResultError } from '../SupplementaryResultError';\n\nimport { SETTINGS_KEYS } from './utils/logs';\n\ntype Props = {\n  queryResponse: DataQueryResponse | undefined;\n  enabled: boolean;\n  timeZone: TimeZone;\n  queries: DataQuery[];\n  datasourceInstance: DataSourceApi | null | undefined;\n  splitOpen: SplitOpen;\n  setLogsSampleEnabled: (enabled: boolean) => void;\n};\n\nexport function LogsSamplePanel(props: Props) {\n  const { queryResponse, timeZone, enabled, setLogsSampleEnabled, datasourceInstance, queries, splitOpen } = props;\n\n  const styles = useStyles2(getStyles);\n  const onToggleLogsSampleCollapse = (isOpen: boolean) => {\n    setLogsSampleEnabled(isOpen);\n    reportInteraction('grafana_explore_logs_sample_toggle_clicked', {\n      datasourceType: datasourceInstance?.type ?? 'unknown',\n      type: isOpen ? 'open' : 'close',\n    });\n  };\n\n  const OpenInSplitViewButton = () => {\n    if (!datasourceInstance) {\n      return null;\n    }\n    if (!hasSupplementaryQuerySupport(datasourceInstance, SupplementaryQueryType.LogsSample)) {\n      return null;\n    }\n\n    const logSampleQueries = queries\n      .map((query) => datasourceInstance.getSupplementaryQuery({ type: SupplementaryQueryType.LogsSample }, query))\n      .filter((query): query is DataQuery => !!query);\n\n    if (!logSampleQueries.length) {\n      return null;\n    }\n\n    const onSplitOpen = () => {\n      splitOpen({ queries: logSampleQueries, datasourceUid: datasourceInstance.uid });\n      reportInteraction('grafana_explore_logs_sample_split_button_clicked', {\n        datasourceType: datasourceInstance?.type ?? 'unknown',\n        queriesCount: logSampleQueries.length,\n      });\n    };\n\n    return (\n      <Button size=\"sm\" className={styles.logSamplesButton} onClick={onSplitOpen}>\n        <Trans i18nKey=\"explore.logs-sample-panel.open-in-split-view-button.open-logs-in-split-view\">\n          Open logs in split view\n        </Trans>\n      </Button>\n    );\n  };\n\n  let LogsSamplePanelContent: JSX.Element | null;\n\n  if (queryResponse === undefined) {\n    LogsSamplePanelContent = null;\n  } else if (queryResponse.error !== undefined) {\n    LogsSamplePanelContent = (\n      <SupplementaryResultError\n        error={queryResponse.error}\n        title={t('explore.logs-sample-panel.title-failed-sample-query', 'Failed to load logs sample for this query')}\n      />\n    );\n  } else if (queryResponse.state === LoadingState.Loading) {\n    LogsSamplePanelContent = (\n      <span>\n        <Trans i18nKey=\"explore.logs-sample-panel.logs-sample-is-loading\">Logs sample is loading...</Trans>\n      </span>\n    );\n  } else if (queryResponse.data.length === 0 || queryResponse.data.every((frame) => frame.length === 0)) {\n    LogsSamplePanelContent = (\n      <span>\n        <Trans i18nKey=\"explore.logs-sample-panel.no-logs-sample-data\">No logs sample data.</Trans>\n      </span>\n    );\n  } else {\n    const logs = dataFrameToLogsModel(queryResponse.data);\n    LogsSamplePanelContent = (\n      <>\n        <OpenInSplitViewButton />\n        <div className={styles.logContainer}>\n          <LogRows\n            logRows={logs.rows}\n            dedupStrategy={LogsDedupStrategy.none}\n            showLabels={store.getBool(SETTINGS_KEYS.showLabels, false)}\n            showTime={store.getBool(SETTINGS_KEYS.showTime, true)}\n            wrapLogMessage={store.getBool(SETTINGS_KEYS.wrapLogMessage, true)}\n            prettifyLogMessage={store.getBool(SETTINGS_KEYS.prettifyLogMessage, false)}\n            timeZone={timeZone}\n            enableLogDetails={true}\n            scrollElement={null}\n          />\n        </div>\n      </>\n    );\n  }\n\n  return queryResponse?.state !== LoadingState.NotStarted ? (\n    <Collapse\n      label={\n        <div>\n          Logs sample\n          <Tooltip content=\"Show log lines that contributed to visualized metrics\">\n            <Icon name=\"info-circle\" className={styles.infoTooltip} />\n          </Tooltip>\n        </div>\n      }\n      isOpen={enabled}\n      collapsible={true}\n      onToggle={onToggleLogsSampleCollapse}\n    >\n      {LogsSamplePanelContent}\n    </Collapse>\n  ) : null;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    logSamplesButton: css({\n      position: 'absolute',\n      top: theme.spacing(1),\n      right: theme.spacing(1),\n    }),\n    logContainer: css({\n      overflow: 'scroll',\n    }),\n    infoTooltip: css({\n      marginLeft: theme.spacing(1),\n    }),\n  };\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, PanelContainer } from '@grafana/ui';\n\nexport const NoData = () => {\n  const css = useStyles2(getStyles);\n  return (\n    <>\n      <PanelContainer data-testid=\"explore-no-data\" className={css.wrapper}>\n        <span className={css.message}>{'No data'}</span>\n      </PanelContainer>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    label: 'no-data-card',\n    padding: theme.spacing(3),\n    background: theme.colors.background.primary,\n    borderRadius: theme.shape.radius.default,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexGrow: 1,\n  }),\n  message: css({\n    fontSize: theme.typography.h2.fontSize,\n    padding: theme.spacing(4),\n    color: theme.colors.text.disabled,\n  }),\n});\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { LinkButton, CallToActionCard, Icon, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { Trans } from 'app/core/internationalization';\nimport { AccessControlAction } from 'app/types';\n\nfunction getCardStyles(theme: GrafanaTheme2) {\n  return css({\n    maxWidth: `${theme.breakpoints.values.lg}px`,\n    marginTop: theme.spacing(2),\n    alignSelf: 'center',\n  });\n}\n\nexport const NoDataSourceCallToAction = () => {\n  const cardStyles = useStyles2(getCardStyles);\n\n  const canCreateDataSource =\n    contextSrv.hasPermission(AccessControlAction.DataSourcesCreate) &&\n    contextSrv.hasPermission(AccessControlAction.DataSourcesWrite);\n\n  const message =\n    'Explore requires at least one data source. Once you have added a data source, you can query it here.';\n  const footer = (\n    <>\n      <Icon name=\"rocket\" />\n      <>\n        <Trans i18nKey=\"explore.no-data-source-call-to-action.footer.pro-tip-define-sources-through-configuration-files\">\n          {' '}\n          ProTip: You can also define data sources through configuration files.{' '}\n        </Trans>\n      </>\n      <a\n        href=\"http://docs.grafana.org/administration/provisioning/?utm_source=explore#data-sources\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n        className=\"text-link\"\n      >\n        <Trans i18nKey=\"explore.no-data-source-call-to-action.footer.learn-more\">Learn more</Trans>\n      </a>\n    </>\n  );\n\n  const ctaElement = (\n    <LinkButton size=\"lg\" href=\"datasources/new\" icon=\"database\" disabled={!canCreateDataSource}>\n      <Trans i18nKey=\"explore.no-data-source-call-to-action.cta-element.add-data-source\">Add data source</Trans>\n    </LinkButton>\n  );\n\n  return <CallToActionCard callToActionElement={ctaElement} className={cardStyles} footer={footer} message={message} />;\n};\n","import { css } from '@emotion/css';\nimport { useEffect, useRef, useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { useToggle, useWindowSize } from 'react-use';\n\nimport { applyFieldOverrides, DataFrame, GrafanaTheme2, SplitOpen } from '@grafana/data';\nimport { config, reportInteraction } from '@grafana/runtime';\nimport { useStyles2, useTheme2, PanelChrome } from '@grafana/ui';\nimport { layeredLayoutThreshold } from 'app/plugins/panel/nodeGraph/NodeGraph';\n\nimport { NodeGraph } from '../../../plugins/panel/nodeGraph';\nimport { LayoutAlgorithm } from '../../../plugins/panel/nodeGraph/panelcfg.gen';\nimport { useCategorizeFrames } from '../../../plugins/panel/nodeGraph/useCategorizeFrames';\nimport { StoreState } from '../../../types';\nimport { useLinks } from '../utils/links';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  warningText: css({\n    label: 'warningText',\n    display: 'flex',\n    alignItems: 'center',\n    fontSize: theme.typography.bodySmall.fontSize,\n    color: theme.colors.text.secondary,\n  }),\n});\n\ninterface OwnProps {\n  // Edges and Nodes are separate frames\n  dataFrames: DataFrame[];\n  exploreId: string;\n  // When showing the node graph together with trace view we do some changes so it works better.\n  withTraceView?: boolean;\n  datasourceType: string;\n  splitOpenFn: SplitOpen;\n}\n\ntype Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport function UnconnectedNodeGraphContainer(props: Props) {\n  const { dataFrames, range, splitOpenFn, withTraceView, datasourceType } = props;\n  const getLinks = useLinks(range, splitOpenFn);\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n\n  // This is implicit dependency that is needed for links to work. At some point when replacing variables in the link\n  // it requires field to have a display property which is added by the overrides even though we don't add any field\n  // overrides in explore.\n  const frames = applyFieldOverrides({\n    fieldConfig: {\n      defaults: {},\n      overrides: [],\n    },\n    data: dataFrames,\n    // We don't need proper replace here as it is only used in getLinks and we use getFieldLinks\n    replaceVariables: (value) => value,\n    theme,\n  });\n\n  const { nodes } = useCategorizeFrames(frames);\n  const [collapsed, toggleCollapsed] = useToggle(true);\n\n  // Determine default layout algorithm based on node count\n  const nodeCount = nodes[0]?.length || 0;\n  const layoutAlgorithm = nodeCount > layeredLayoutThreshold ? LayoutAlgorithm.Force : LayoutAlgorithm.Layered;\n\n  const toggled = () => {\n    toggleCollapsed();\n    reportInteraction('grafana_traces_node_graph_panel_clicked', {\n      datasourceType: datasourceType,\n      grafana_version: config.buildInfo.version,\n      isExpanded: !open,\n    });\n  };\n\n  // Calculate node graph height based on window and top position, with some padding\n  const { height: windowHeight } = useWindowSize();\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [top, setTop] = useState(250);\n  useEffect(() => {\n    if (containerRef.current) {\n      const { top } = containerRef.current.getBoundingClientRect();\n      setTop(top);\n    }\n  }, [containerRef]);\n  const height = windowHeight - top - 32;\n\n  const countWarning =\n    withTraceView && nodes[0]?.length > 1000 ? (\n      <span className={styles.warningText}> ({nodes[0].length} nodes, can be slow to load)</span>\n    ) : null;\n\n  return (\n    <PanelChrome\n      title={`Node graph`}\n      titleItems={countWarning}\n      // We allow collapsing this only when it is shown together with trace view.\n      collapsible={!!withTraceView}\n      collapsed={withTraceView ? collapsed : false}\n      onToggleCollapse={withTraceView ? toggled : undefined}\n    >\n      <div\n        ref={containerRef}\n        style={\n          withTraceView\n            ? { height: 500 }\n            : {\n                minHeight: 600,\n                height,\n              }\n        }\n      >\n        <NodeGraph dataFrames={frames} getLinks={getLinks} layoutAlgorithm={layoutAlgorithm} />\n      </div>\n    </PanelChrome>\n  );\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId }: OwnProps) {\n  return {\n    range: state.explore.panes[exploreId]!.range,\n  };\n}\n\nconst connector = connect(mapStateToProps, {});\nexport const NodeGraphContainer = connector(UnconnectedNodeGraphContainer);\n","import { createSelector } from '@reduxjs/toolkit';\nimport { useCallback, useMemo } from 'react';\n\nimport { CoreApp, getNextRefId } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { DataQuery, DataSourceRef } from '@grafana/schema';\nimport { useDispatch, useSelector } from 'app/types';\n\nimport { getDatasourceSrv } from '../plugins/datasource_srv';\nimport { QueryEditorRows } from '../query/components/QueryEditorRows';\n\nimport { ContentOutlineItem } from './ContentOutline/ContentOutlineItem';\nimport { changeDatasource } from './state/datasource';\nimport { changeQueries, runQueries } from './state/query';\nimport { getExploreItemSelector } from './state/selectors';\n\ninterface Props {\n  exploreId: string;\n}\n\nconst makeSelectors = (exploreId: string) => {\n  const exploreItemSelector = getExploreItemSelector(exploreId);\n  return {\n    getQueries: createSelector(exploreItemSelector, (s) => s!.queries),\n    getQueryResponse: createSelector(exploreItemSelector, (s) => s!.queryResponse),\n    getHistory: createSelector(exploreItemSelector, (s) => s!.history),\n    getEventBridge: createSelector(exploreItemSelector, (s) => s!.eventBridge),\n    getDatasourceInstanceSettings: createSelector(\n      exploreItemSelector,\n      (s) => getDatasourceSrv().getInstanceSettings(s!.datasourceInstance?.uid)!\n    ),\n  };\n};\n\nexport const QueryRows = ({ exploreId }: Props) => {\n  const dispatch = useDispatch();\n  const { getQueries, getDatasourceInstanceSettings, getQueryResponse, getHistory, getEventBridge } = useMemo(\n    () => makeSelectors(exploreId),\n    [exploreId]\n  );\n\n  const queries = useSelector(getQueries);\n  const dsSettings = useSelector(getDatasourceInstanceSettings);\n  const queryResponse = useSelector(getQueryResponse);\n  const history = useSelector(getHistory);\n  const eventBridge = useSelector(getEventBridge);\n\n  const onRunQueries = useCallback(() => {\n    dispatch(runQueries({ exploreId }));\n  }, [dispatch, exploreId]);\n\n  const onChange = useCallback(\n    (newQueries: DataQuery[]) => {\n      dispatch(changeQueries({ exploreId, queries: newQueries }));\n    },\n    [dispatch, exploreId]\n  );\n\n  const onUpdateDatasources = useCallback(\n    (datasource: DataSourceRef) => {\n      dispatch(changeDatasource({ exploreId, datasource }));\n    },\n    [dispatch, exploreId]\n  );\n\n  const onAddQuery = useCallback(\n    (query: DataQuery) => {\n      onChange([...queries, { ...query, refId: getNextRefId(queries) }]);\n    },\n    [onChange, queries]\n  );\n\n  const onQueryCopied = () => {\n    reportInteraction('grafana_explore_query_row_copy');\n  };\n\n  const onQueryReplacedFromLibrary = () => {\n    reportInteraction('grafana_explore_query_replaced_from_library');\n  };\n\n  const onQueryRemoved = () => {\n    reportInteraction('grafana_explore_query_row_remove');\n  };\n\n  const onQueryToggled = (queryStatus?: boolean) => {\n    reportInteraction('grafana_query_row_toggle', queryStatus === undefined ? {} : { queryEnabled: queryStatus });\n  };\n\n  return (\n    <QueryEditorRows\n      dsSettings={dsSettings}\n      queries={queries}\n      onQueriesChange={onChange}\n      onUpdateDatasources={onUpdateDatasources}\n      onAddQuery={onAddQuery}\n      onRunQueries={onRunQueries}\n      onQueryCopied={onQueryCopied}\n      onQueryRemoved={onQueryRemoved}\n      onQueryToggled={onQueryToggled}\n      onQueryReplacedFromLibrary={onQueryReplacedFromLibrary}\n      data={queryResponse}\n      app={CoreApp.Explore}\n      history={history}\n      eventBus={eventBridge}\n      queryRowWrapper={(children, refId) => (\n        <ContentOutlineItem\n          title={refId}\n          icon=\"arrow\"\n          key={refId}\n          panelId=\"Queries\"\n          customTopOffset={-10}\n          level=\"child\"\n        >\n          {children}\n        </ContentOutlineItem>\n      )}\n    />\n  );\n};\n","import { css } from '@emotion/css';\nimport { cloneDeep } from 'lodash';\nimport { useEffect, useId, useRef, useState } from 'react';\nimport { useWindowSize } from 'react-use';\nimport { VariableSizeList as List } from 'react-window';\n\nimport { DataFrame, Field as DataFrameField } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Field, Switch } from '@grafana/ui';\n\nimport { ItemLabels } from './ItemLabels';\nimport RawListItem from './RawListItem';\nimport {\n  getRawPrometheusListItemsFromDataFrame,\n  RawPrometheusListItemEmptyValue,\n} from './utils/getRawPrometheusListItemsFromDataFrame';\n\nexport type instantQueryRawVirtualizedListData = { Value: string; __name__: string; [index: string]: string };\n\nexport interface RawListContainerProps {\n  tableResult: DataFrame;\n}\n\nconst styles = {\n  wrapper: css({\n    height: '100%',\n    overflow: 'scroll',\n  }),\n  switchWrapper: css({\n    display: 'flex',\n    flexDirection: 'row',\n    marginBottom: 0,\n  }),\n  switchLabel: css({\n    marginLeft: '15px',\n    marginBottom: 0,\n  }),\n  switch: css({\n    marginLeft: '10px',\n  }),\n  resultCount: css({\n    marginBottom: '4px',\n  }),\n  header: css({\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: '10px 0',\n    fontSize: '12px',\n    lineHeight: 1.25,\n  }),\n};\n\nconst mobileWidthThreshold = 480;\nconst numberOfColumnsBeforeExpandedViewIsDefault = 2;\n\n/**\n * The container that provides the virtualized list to the child components\n * @param props\n * @constructor\n */\nconst RawListContainer = (props: RawListContainerProps) => {\n  const { tableResult } = props;\n  const dataFrame = cloneDeep(tableResult);\n  const listRef = useRef<List | null>(null);\n\n  const valueLabels = dataFrame.fields.filter((field) => field.name.includes('Value'));\n  const items = getRawPrometheusListItemsFromDataFrame(dataFrame);\n  const { width } = useWindowSize();\n  const [isExpandedView, setIsExpandedView] = useState(\n    width <= mobileWidthThreshold || valueLabels.length > numberOfColumnsBeforeExpandedViewIsDefault\n  );\n\n  const onContentClick = () => {\n    setIsExpandedView(!isExpandedView);\n    const props = {\n      isExpanded: !isExpandedView,\n    };\n    reportInteraction('grafana_explore_prometheus_instant_query_ui_raw_toggle_expand', props);\n  };\n\n  useEffect(() => {\n    // After the expanded view has updated, tell the list to re-render\n    listRef.current?.resetAfterIndex(0, true);\n  }, [isExpandedView]);\n\n  const calculateInitialHeight = (length: number): number => {\n    const maxListHeight = 600;\n    const shortListLength = 10;\n\n    if (length < shortListLength) {\n      let sum = 0;\n      for (let i = 0; i < length; i++) {\n        sum += getListItemHeight(i, true);\n      }\n\n      return Math.min(maxListHeight, sum);\n    }\n\n    return maxListHeight;\n  };\n\n  const getListItemHeight = (itemIndex: number, isExpandedView: boolean) => {\n    const singleLineHeight = 32;\n    const additionalLineHeight = 22;\n    if (!isExpandedView) {\n      return singleLineHeight;\n    }\n    const item = items[itemIndex];\n\n    // Height of 1.5 lines, plus the number of non-value attributes times the height of additional lines\n    return 1.5 * singleLineHeight + (Object.keys(item).length - valueLabels.length) * additionalLineHeight;\n  };\n\n  const switchId = `isExpandedView ${useId()}`;\n\n  return (\n    <section>\n      <header className={styles.header}>\n        <Field className={styles.switchWrapper} label={`Expand results`} htmlFor={'isExpandedView'}>\n          <div className={styles.switch}>\n            <Switch onChange={onContentClick} id={switchId} value={isExpandedView} label={`Expand results`} />\n          </div>\n        </Field>\n\n        <div className={styles.resultCount}>Result series: {items.length}</div>\n      </header>\n\n      <div role={'table'}>\n        {\n          <>\n            {/* Show the value headings above all the values, but only if we're in the contracted view */}\n            {valueLabels.length > 1 && !isExpandedView && (\n              <ItemLabels valueLabels={valueLabels} expanded={isExpandedView} />\n            )}\n            <List\n              ref={listRef}\n              itemCount={items.length}\n              className={styles.wrapper}\n              itemSize={(index) => getListItemHeight(index, isExpandedView)}\n              height={calculateInitialHeight(items.length)}\n              width=\"100%\"\n            >\n              {({ index, style }) => {\n                let filteredValueLabels: DataFrameField[] | undefined;\n                if (isExpandedView) {\n                  filteredValueLabels = valueLabels.filter((valueLabel) => {\n                    const itemWithValue = items[index][valueLabel.name];\n                    return itemWithValue && itemWithValue !== RawPrometheusListItemEmptyValue;\n                  });\n                }\n\n                return (\n                  <div role=\"row\" style={{ ...style, overflow: 'hidden' }}>\n                    <RawListItem\n                      isExpandedView={isExpandedView}\n                      valueLabels={filteredValueLabels}\n                      totalNumberOfValues={valueLabels.length}\n                      listKey={items[index].__name__}\n                      listItemData={items[index]}\n                    />\n                  </div>\n                );\n              }}\n            </List>\n          </>\n        }\n      </div>\n    </section>\n  );\n};\n\nexport default RawListContainer;\n","import { css } from '@emotion/css';\nimport { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { applyFieldOverrides, DataFrame, SelectableValue, SplitOpen } from '@grafana/data';\nimport { getTemplateSrv, reportInteraction } from '@grafana/runtime';\nimport { TimeZone } from '@grafana/schema';\nimport { RadioButtonGroup, Table, AdHocFilterItem, PanelChrome } from '@grafana/ui';\nimport { config } from 'app/core/config';\nimport { PANEL_BORDER } from 'app/core/constants';\nimport { StoreState, TABLE_RESULTS_STYLE } from 'app/types';\nimport { ExploreItemState, TABLE_RESULTS_STYLES, TableResultsStyle } from 'app/types/explore';\n\nimport { MetaInfoText } from '../MetaInfoText';\nimport RawListContainer from '../PrometheusListView/RawListContainer';\nimport { exploreDataLinkPostProcessorFactory } from '../utils/links';\n\ninterface RawPrometheusContainerProps {\n  ariaLabel?: string;\n  exploreId: string;\n  width: number;\n  timeZone: TimeZone;\n  onCellFilterAdded?: (filter: AdHocFilterItem) => void;\n  showRawPrometheus?: boolean;\n  splitOpenFn: SplitOpen;\n}\n\ninterface PrometheusContainerState {\n  resultsStyle: TableResultsStyle;\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId }: RawPrometheusContainerProps) {\n  const explore = state.explore;\n  const item: ExploreItemState = explore.panes[exploreId]!;\n  const { tableResult, rawPrometheusResult, range, queryResponse } = item;\n  const rawPrometheusFrame: DataFrame[] = rawPrometheusResult ? [rawPrometheusResult] : [];\n  const result = (tableResult?.length ?? 0) > 0 && rawPrometheusResult ? tableResult : rawPrometheusFrame;\n  const loading = queryResponse.state;\n\n  return { loading, tableResult: result, range };\n}\n\nconst connector = connect(mapStateToProps, {});\n\ntype Props = RawPrometheusContainerProps & ConnectedProps<typeof connector>;\n\nexport class RawPrometheusContainer extends PureComponent<Props, PrometheusContainerState> {\n  constructor(props: Props) {\n    super(props);\n\n    // If resultsStyle is undefined we won't render the toggle, and the default table will be rendered\n    if (props.showRawPrometheus) {\n      this.state = {\n        resultsStyle: TABLE_RESULTS_STYLE.raw,\n      };\n    }\n  }\n\n  onChangeResultsStyle = (resultsStyle: TableResultsStyle) => {\n    this.setState({ resultsStyle });\n  };\n\n  getTableHeight() {\n    const { tableResult } = this.props;\n\n    if (!tableResult || tableResult.length === 0) {\n      return 200;\n    }\n\n    // tries to estimate table height\n    return Math.max(Math.min(600, tableResult[0].length * 35) + 35);\n  }\n\n  renderLabel = () => {\n    const spacing = css({\n      display: 'flex',\n      justifyContent: 'space-between',\n      flex: '1',\n    });\n    const ALL_GRAPH_STYLE_OPTIONS: Array<SelectableValue<TableResultsStyle>> = TABLE_RESULTS_STYLES.map((style) => ({\n      value: style,\n      // capital-case it and switch `_` to ` `\n      label: style[0].toUpperCase() + style.slice(1).replace(/_/, ' '),\n    }));\n\n    return (\n      <div className={spacing}>\n        <RadioButtonGroup\n          onClick={() => {\n            const props = {\n              state:\n                this.state.resultsStyle === TABLE_RESULTS_STYLE.table\n                  ? TABLE_RESULTS_STYLE.raw\n                  : TABLE_RESULTS_STYLE.table,\n            };\n            reportInteraction('grafana_explore_prometheus_instant_query_ui_toggle_clicked', props);\n          }}\n          size=\"sm\"\n          options={ALL_GRAPH_STYLE_OPTIONS}\n          value={this.state?.resultsStyle}\n          onChange={this.onChangeResultsStyle}\n        />\n      </div>\n    );\n  };\n\n  render() {\n    const { loading, onCellFilterAdded, tableResult, width, splitOpenFn, range, ariaLabel, timeZone } = this.props;\n    const height = this.getTableHeight();\n    const tableWidth = width - config.theme.panelPadding * 2 - PANEL_BORDER;\n\n    let dataFrames = tableResult;\n\n    const dataLinkPostProcessor = exploreDataLinkPostProcessorFactory(splitOpenFn, range);\n\n    if (dataFrames?.length) {\n      dataFrames = applyFieldOverrides({\n        data: dataFrames,\n        timeZone,\n        theme: config.theme2,\n        replaceVariables: getTemplateSrv().replace.bind(getTemplateSrv()),\n        fieldConfig: {\n          defaults: {},\n          overrides: [],\n        },\n        dataLinkPostProcessor,\n      });\n    }\n\n    const frames = dataFrames?.filter(\n      (frame: DataFrame | undefined): frame is DataFrame => !!frame && frame.length !== 0\n    );\n\n    const title = this.state.resultsStyle === TABLE_RESULTS_STYLE.raw ? 'Raw' : 'Table';\n    const label = this.state?.resultsStyle !== undefined ? this.renderLabel() : 'Table';\n\n    // Render table as default if resultsStyle is not set.\n    const renderTable = !this.state?.resultsStyle || this.state?.resultsStyle === TABLE_RESULTS_STYLE.table;\n\n    return (\n      <PanelChrome title={title} actions={label} loadingState={loading}>\n        {frames?.length && (\n          <>\n            {renderTable && (\n              <Table\n                ariaLabel={ariaLabel}\n                data={frames[0]}\n                width={tableWidth}\n                height={height}\n                onCellFilterAdded={onCellFilterAdded}\n              />\n            )}\n            {this.state?.resultsStyle === TABLE_RESULTS_STYLE.raw && <RawListContainer tableResult={frames[0]} />}\n          </>\n        )}\n        {!frames?.length && <MetaInfoText metaItems={[{ value: '0 series returned' }]} />}\n      </PanelChrome>\n    );\n  }\n}\n\nexport default connector(RawPrometheusContainer);\n","import { CSSProperties, useRef } from 'react';\nimport Transition, { ExitHandler } from 'react-transition-group/Transition';\n\ninterface Props {\n  duration: number;\n  children: JSX.Element;\n  in: boolean;\n  unmountOnExit?: boolean;\n  onExited?: ExitHandler<HTMLDivElement>;\n}\n\nexport const FadeIn = (props: Props) => {\n  const transitionRef = useRef(null);\n  const defaultStyle: CSSProperties = {\n    transition: `opacity ${props.duration}ms linear`,\n    opacity: 0,\n  };\n\n  const transitionStyles: { [str: string]: CSSProperties } = {\n    exited: { opacity: 0, display: 'none' },\n    entering: { opacity: 0 },\n    entered: { opacity: 1 },\n    exiting: { opacity: 0 },\n  };\n\n  return (\n    <Transition\n      in={props.in}\n      timeout={props.duration}\n      unmountOnExit={props.unmountOnExit || false}\n      onExited={props.onExited}\n      nodeRef={transitionRef}\n    >\n      {(state) => (\n        <div\n          ref={transitionRef}\n          style={{\n            ...defaultStyle,\n            ...transitionStyles[state],\n          }}\n        >\n          {props.children}\n        </div>\n      )}\n    </Transition>\n  );\n};\n","import { DataQueryError } from '@grafana/data';\nimport { Alert } from '@grafana/ui';\nimport { FadeIn } from 'app/core/components/Animations/FadeIn';\n\nexport interface ErrorContainerProps {\n  queryError?: DataQueryError;\n}\n\nexport const ErrorContainer = (props: ErrorContainerProps) => {\n  const { queryError } = props;\n  const showError = queryError ? true : false;\n  const duration = showError ? 100 : 10;\n  const title = queryError ? 'Query error' : 'Unknown error';\n  const message = queryError?.message || queryError?.data?.message || null;\n\n  return (\n    <FadeIn in={showError} duration={duration}>\n      <Alert severity=\"error\" title={title} topSpacing={2}>\n        {message}\n      </Alert>\n    </FadeIn>\n  );\n};\n","import { LoadingState } from '@grafana/data';\nimport { useSelector } from 'app/types';\n\nimport { ErrorContainer } from './ErrorContainer';\n\ninterface Props {\n  exploreId: string;\n}\nexport function ResponseErrorContainer(props: Props) {\n  const queryResponse = useSelector((state) => state.explore.panes[props.exploreId]!.queryResponse);\n  const queryError = queryResponse?.state === LoadingState.Error ? queryResponse?.error : undefined;\n\n  // Errors with ref ids are shown below the corresponding query\n  if (queryError?.refId) {\n    return null;\n  }\n\n  return <ErrorContainer queryError={queryError} />;\n}\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { ToolbarButton, useTheme2 } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\nimport { useSelector } from 'app/types';\n\nimport { createDatasourcesList } from '../../core/utils/richHistory';\nimport { MIXED_DATASOURCE_NAME } from '../../plugins/datasource/mixed/MixedDataSource';\n\nimport { useQueryLibraryContext } from './QueryLibrary/QueryLibraryContext';\nimport { type OnSelectQueryType } from './QueryLibrary/types';\nimport { selectExploreDSMaps } from './state/selectors';\n\ntype Props = {\n  addQueryRowButtonDisabled?: boolean;\n  addQueryRowButtonHidden?: boolean;\n  richHistoryRowButtonHidden?: boolean;\n  queryInspectorButtonActive?: boolean;\n\n  onClickAddQueryRowButton: () => void;\n  onClickQueryInspectorButton: () => void;\n  onSelectQueryFromLibrary: OnSelectQueryType;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    containerMargin: css({\n      display: 'flex',\n      flexWrap: 'wrap',\n      gap: theme.spacing(1),\n      marginTop: theme.spacing(2),\n    }),\n  };\n};\n\nexport function SecondaryActions({\n  addQueryRowButtonDisabled,\n  addQueryRowButtonHidden,\n  onClickAddQueryRowButton,\n  onClickQueryInspectorButton,\n  onSelectQueryFromLibrary,\n  queryInspectorButtonActive,\n}: Props) {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n  const exploreActiveDS = useSelector(selectExploreDSMaps);\n  // Prefill the query library filter with the dataSource.\n  // Get current dataSource that is open. As this is only used in Explore we get it from Explore state.\n  const listOfDatasources = createDatasourcesList();\n  const activeDatasources = exploreActiveDS.dsToExplore\n    .map((eDs) => {\n      return listOfDatasources.find((ds) => ds.uid === eDs.datasource?.uid)?.name;\n    })\n    .filter((name): name is string => !!name && name !== MIXED_DATASOURCE_NAME);\n\n  const { queryLibraryEnabled, openDrawer: openQueryLibraryDrawer } = useQueryLibraryContext();\n\n  return (\n    <div className={styles.containerMargin}>\n      {!addQueryRowButtonHidden && (\n        <>\n          <ToolbarButton\n            variant=\"canvas\"\n            aria-label={t('explore.secondary-actions.query-add-button-aria-label', 'Add query')}\n            onClick={onClickAddQueryRowButton}\n            disabled={addQueryRowButtonDisabled}\n            icon=\"plus\"\n          >\n            <Trans i18nKey=\"explore.secondary-actions.query-add-button\">Add query</Trans>\n          </ToolbarButton>\n          {queryLibraryEnabled && (\n            <ToolbarButton\n              data-testid={selectors.pages.Explore.General.addFromQueryLibrary}\n              aria-label={t('explore.secondary-actions.add-from-query-library', 'Add query from library')}\n              variant=\"canvas\"\n              onClick={() => openQueryLibraryDrawer(activeDatasources, onSelectQueryFromLibrary)}\n              icon=\"plus\"\n            >\n              <Trans i18nKey=\"explore.secondary-actions.add-from-query-library\">Add query from library</Trans>\n            </ToolbarButton>\n          )}\n        </>\n      )}\n      <ToolbarButton\n        variant={queryInspectorButtonActive ? 'active' : 'canvas'}\n        aria-label={t('explore.secondary-actions.query-inspector-button-aria-label', 'Query inspector')}\n        onClick={onClickQueryInspectorButton}\n        icon=\"info-circle\"\n      >\n        <Trans i18nKey=\"explore.secondary-actions.query-inspector-button\">Query inspector</Trans>\n      </ToolbarButton>\n    </div>\n  );\n}\n","import { css } from '@emotion/css';\nimport { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { applyFieldOverrides, SplitOpen, DataFrame, LoadingState, FieldType } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\nimport { TimeZone } from '@grafana/schema';\nimport { Table, AdHocFilterItem, PanelChrome, withTheme2, Themeable2 } from '@grafana/ui';\nimport { config } from 'app/core/config';\nimport { t, Trans } from 'app/core/internationalization';\nimport {\n  hasDeprecatedParentRowIndex,\n  migrateFromParentRowIndexToNestedFrames,\n} from 'app/plugins/panel/table/migrations';\nimport { StoreState } from 'app/types';\nimport { ExploreItemState } from 'app/types/explore';\n\nimport { LimitedDataDisclaimer } from '../LimitedDataDisclaimer';\nimport { MetaInfoText } from '../MetaInfoText';\nimport { selectIsWaitingForData } from '../state/query';\nimport { exploreDataLinkPostProcessorFactory } from '../utils/links';\n\nconst MAX_NUMBER_OF_COLUMNS = 20;\n\ninterface TableContainerProps extends Themeable2 {\n  ariaLabel?: string;\n  exploreId: string;\n  width: number;\n  timeZone: TimeZone;\n  onCellFilterAdded?: (filter: AdHocFilterItem) => void;\n  splitOpenFn: SplitOpen;\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId }: TableContainerProps) {\n  const explore = state.explore;\n  const item: ExploreItemState = explore.panes[exploreId]!;\n  const { tableResult, range } = item;\n  const loadingInState = selectIsWaitingForData(exploreId);\n  const loading = tableResult && tableResult.length > 0 ? false : loadingInState;\n  return { loading, tableResult, range };\n}\n\nconst connector = connect(mapStateToProps, {});\n\ntype Props = TableContainerProps & ConnectedProps<typeof connector>;\ntype State = {\n  showAll: boolean;\n};\n\nexport class TableContainer extends PureComponent<Props, State> {\n  state = { showAll: false };\n\n  hasSubFrames = (data: DataFrame) => data.fields.some((f) => f.type === FieldType.nestedFrames);\n\n  getTableHeight(rowCount: number, hasSubFrames: boolean) {\n    if (rowCount === 0) {\n      return 200;\n    }\n    // tries to estimate table height, with a min of 300 and a max of 600\n    // if there are multiple tables, there is no min\n    return Math.min(600, Math.max(rowCount * 36, hasSubFrames ? 300 : 0) + 40 + 46);\n  }\n\n  getTableTitle(dataFrames: DataFrame[] | null, data: DataFrame, i: number) {\n    let name = data.name;\n    if (!name && (dataFrames?.length ?? 0) > 1) {\n      name = data.refId || `${i}`;\n    }\n\n    return name\n      ? t('explore.table.title-with-name', 'Table - {{name}}', { name, interpolation: { escapeValue: false } })\n      : t('explore.table.title', 'Table');\n  }\n\n  showAll() {\n    this.setState({\n      showAll: true,\n    });\n  }\n\n  render() {\n    const { loading, onCellFilterAdded, tableResult, width, splitOpenFn, range, ariaLabel, timeZone, theme } =\n      this.props;\n\n    const { showAll } = this.state;\n\n    let dataFrames = hasDeprecatedParentRowIndex(tableResult)\n      ? migrateFromParentRowIndexToNestedFrames(tableResult)\n      : tableResult;\n    const dataLinkPostProcessor = exploreDataLinkPostProcessorFactory(splitOpenFn, range);\n\n    let dataLimited = false;\n\n    if (dataFrames?.length) {\n      dataFrames = dataFrames.map((frame) => {\n        frame.fields.forEach((field, index) => {\n          const hidden = showAll ? false : index >= MAX_NUMBER_OF_COLUMNS;\n          field.config.custom = { hidden };\n          dataLimited = dataLimited || hidden;\n        });\n        return frame;\n      });\n\n      dataFrames = applyFieldOverrides({\n        data: dataFrames,\n        timeZone,\n        theme: config.theme2,\n        replaceVariables: getTemplateSrv().replace.bind(getTemplateSrv()),\n        fieldConfig: {\n          defaults: {},\n          overrides: [],\n        },\n        dataLinkPostProcessor,\n      });\n    }\n\n    const frames = dataFrames?.filter(\n      (frame: DataFrame | undefined): frame is DataFrame => !!frame && frame.length !== 0\n    );\n\n    return (\n      <>\n        {frames && frames.length === 0 && (\n          <PanelChrome title={t('explore.table.title', 'Table')} width={width} height={200}>\n            {() => <MetaInfoText metaItems={[{ value: t('explore.table.no-data', '0 series returned') }]} />}\n          </PanelChrome>\n        )}\n        {frames && frames.length > 0 && (\n          <div className={css({ display: 'flex', flexDirection: 'column', gap: theme.spacing(1) })}>\n            {frames.map((data, i) => (\n              <PanelChrome\n                key={data.refId || `table-${i}`}\n                title={this.getTableTitle(dataFrames, data, i)}\n                titleItems={[\n                  !showAll && dataLimited && (\n                    <LimitedDataDisclaimer\n                      toggleShowAllSeries={() => this.showAll()}\n                      info={\n                        <Trans i18nKey={'table.container.show-only-series'}>\n                          Showing only {{ MAX_NUMBER_OF_COLUMNS }} columns\n                        </Trans>\n                      }\n                      tooltip={t(\n                        'table.container.content',\n                        'Showing too many columns in a single table may impact performance and make data harder to read. Consider refining your queries.'\n                      )}\n                      buttonLabel={<Trans i18nKey={'table.container.show-all-series'}>Show all columns</Trans>}\n                    />\n                  ),\n                ]}\n                width={width}\n                height={this.getTableHeight(data.length, this.hasSubFrames(data))}\n                loadingState={loading ? LoadingState.Loading : undefined}\n              >\n                {(innerWidth, innerHeight) => (\n                  <Table\n                    ariaLabel={ariaLabel}\n                    data={data}\n                    width={innerWidth}\n                    height={innerHeight}\n                    onCellFilterAdded={onCellFilterAdded}\n                  />\n                )}\n              </PanelChrome>\n            ))}\n          </div>\n        )}\n      </>\n    );\n  }\n}\n\nexport const TableContainerWithTheme = withTheme2(TableContainer);\n\nexport default withTheme2(connector(TableContainer));\n","import { useMemo } from 'react';\n\nimport { DataFrame, SplitOpen, TimeRange } from '@grafana/data';\nimport { PanelChrome } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\nimport { StoreState, useSelector } from 'app/types';\n\nimport { TraceView } from './TraceView';\nimport { transformDataFrames } from './utils/transform';\n\ninterface Props {\n  dataFrames: DataFrame[];\n  splitOpenFn: SplitOpen;\n  exploreId: string;\n  scrollElement?: Element;\n  timeRange: TimeRange;\n}\n\nexport function TraceViewContainer(props: Props) {\n  // At this point we only show single trace\n  const frame = props.dataFrames[0];\n  const { dataFrames, splitOpenFn, exploreId, scrollElement, timeRange } = props;\n  const traceProp = useMemo(() => transformDataFrames(frame), [frame]);\n  const datasource = useSelector(\n    (state: StoreState) => state.explore.panes[props.exploreId]?.datasourceInstance ?? undefined\n  );\n\n  if (!traceProp) {\n    return null;\n  }\n\n  return (\n    <PanelChrome padding=\"none\" title={t('explore.trace-view-container.title-trace', 'Trace')}>\n      <TraceView\n        exploreId={exploreId}\n        dataFrames={dataFrames}\n        splitOpenFn={splitOpenFn}\n        scrollElement={scrollElement}\n        traceProp={traceProp}\n        datasource={datasource}\n        timeRange={timeRange}\n      />\n    </PanelChrome>\n  );\n}\n","import { css, cx } from '@emotion/css';\nimport { get, groupBy } from 'lodash';\nimport { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport AutoSizer, { HorizontalSize } from 'react-virtualized-auto-sizer';\n\nimport {\n  AbsoluteTimeRange,\n  DataFrame,\n  EventBus,\n  getNextRefId,\n  GrafanaTheme2,\n  hasToggleableQueryFiltersSupport,\n  LoadingState,\n  QueryFixAction,\n  RawTimeRange,\n  SplitOpenOptions,\n  store,\n  SupplementaryQueryType,\n} from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { getDataSourceSrv, reportInteraction } from '@grafana/runtime';\nimport { DataQuery } from '@grafana/schema';\nimport {\n  AdHocFilterItem,\n  ErrorBoundaryAlert,\n  PanelContainer,\n  ScrollContainer,\n  Themeable2,\n  withTheme2,\n} from '@grafana/ui';\nimport { FILTER_FOR_OPERATOR, FILTER_OUT_OPERATOR } from '@grafana/ui/internal';\nimport { supportedFeatures } from 'app/core/history/richHistoryStorageProvider';\nimport { t } from 'app/core/internationalization';\nimport { MIXED_DATASOURCE_NAME } from 'app/plugins/datasource/mixed/MixedDataSource';\nimport { StoreState } from 'app/types';\n\nimport { getTimeZone } from '../profile/state/selectors';\n\nimport { CONTENT_OUTLINE_LOCAL_STORAGE_KEYS, ContentOutline } from './ContentOutline/ContentOutline';\nimport { ContentOutlineContextProvider } from './ContentOutline/ContentOutlineContext';\nimport { ContentOutlineItem } from './ContentOutline/ContentOutlineItem';\nimport { CorrelationHelper } from './CorrelationHelper';\nimport { CustomContainer } from './CustomContainer';\nimport { DrilldownAlertBox } from './DrilldownAlertBox';\nimport { ExploreToolbar } from './ExploreToolbar';\nimport { FlameGraphExploreContainer } from './FlameGraph/FlameGraphExploreContainer';\nimport { GraphContainer } from './Graph/GraphContainer';\nimport LogsContainer from './Logs/LogsContainer';\nimport { LogsSamplePanel } from './Logs/LogsSamplePanel';\nimport { NoData } from './NoData';\nimport { NoDataSourceCallToAction } from './NoDataSourceCallToAction';\nimport { NodeGraphContainer } from './NodeGraph/NodeGraphContainer';\nimport { QueryRows } from './QueryRows';\nimport RawPrometheusContainer from './RawPrometheus/RawPrometheusContainer';\nimport { ResponseErrorContainer } from './ResponseErrorContainer';\nimport { SecondaryActions } from './SecondaryActions';\nimport TableContainer from './Table/TableContainer';\nimport { TraceViewContainer } from './TraceView/TraceViewContainer';\nimport { changeDatasource } from './state/datasource';\nimport { changeSize } from './state/explorePane';\nimport { splitOpen } from './state/main';\nimport {\n  addQueryRow,\n  modifyQueries,\n  scanStart,\n  scanStopAction,\n  selectIsWaitingForData,\n  setQueries,\n  setSupplementaryQueryEnabled,\n} from './state/query';\nimport { isSplit, selectExploreDSMaps } from './state/selectors';\nimport { updateTimeRange } from './state/time';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    exploreMain: css({\n      label: 'exploreMain',\n      // Is needed for some transition animations to work.\n      position: 'relative',\n      marginTop: '21px',\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(1),\n    }),\n    queryContainer: css({\n      label: 'queryContainer',\n      padding: theme.spacing(1),\n    }),\n    exploreContainer: css({\n      label: 'exploreContainer',\n      display: 'flex',\n      flexDirection: 'column',\n      paddingRight: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n    }),\n    wrapper: css({\n      position: 'absolute',\n      top: 0,\n      left: theme.spacing(2),\n      right: 0,\n      bottom: 0,\n      display: 'flex',\n    }),\n  };\n};\n\nexport interface ExploreProps extends Themeable2 {\n  exploreId: string;\n  theme: GrafanaTheme2;\n  eventBus: EventBus;\n  setShowQueryInspector: (value: boolean) => void;\n  showQueryInspector: boolean;\n}\n\ninterface ExploreState {\n  contentOutlineVisible: boolean;\n}\n\nexport type Props = ExploreProps & ConnectedProps<typeof connector>;\n\n/**\n * Explore provides an area for quick query iteration for a given datasource.\n * Once a datasource is selected it populates the query section at the top.\n * When queries are run, their results are being displayed in the main section.\n * The datasource determines what kind of query editor it brings, and what kind\n * of results viewers it supports. The state is managed entirely in Redux.\n *\n * SPLIT VIEW\n *\n * Explore can have two Explore areas side-by-side. This is handled in `Wrapper.tsx`.\n * Since there can be multiple Explores (e.g., left and right) each action needs\n * the `exploreId` as first parameter so that the reducer knows which Explore state\n * is affected.\n *\n * DATASOURCE REQUESTS\n *\n * A click on Run Query creates transactions for all DataQueries for all expanded\n * result viewers. New runs are discarding previous runs. Upon completion a transaction\n * saves the result. The result viewers construct their data from the currently existing\n * transactions.\n *\n * The result viewers determine some of the query options sent to the datasource, e.g.,\n * `format`, to indicate eventual transformations by the datasources' result transformers.\n */\n\nexport class Explore extends PureComponent<Props, ExploreState> {\n  scrollElement: HTMLDivElement | undefined;\n  graphEventBus: EventBus;\n  logsEventBus: EventBus;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      contentOutlineVisible: store.getBool(CONTENT_OUTLINE_LOCAL_STORAGE_KEYS.visible, true),\n    };\n    this.graphEventBus = props.eventBus.newScopedBus('graph', { onlyLocal: false });\n    this.logsEventBus = props.eventBus.newScopedBus('logs', { onlyLocal: false });\n  }\n\n  onChangeTime = (rawRange: RawTimeRange) => {\n    const { updateTimeRange, exploreId } = this.props;\n    updateTimeRange({ exploreId, rawRange });\n  };\n\n  // Use this in help pages to set page to a single query\n  onClickExample = (query: DataQuery) => {\n    this.props.setQueries(this.props.exploreId, [query]);\n  };\n\n  onCellFilterAdded = (filter: AdHocFilterItem) => {\n    const { value, key, operator } = filter;\n    if (operator === FILTER_FOR_OPERATOR) {\n      this.onClickFilterLabel(key, value);\n    }\n\n    if (operator === FILTER_OUT_OPERATOR) {\n      this.onClickFilterOutLabel(key, value);\n    }\n  };\n\n  onContentOutlineToogle = () => {\n    store.set(CONTENT_OUTLINE_LOCAL_STORAGE_KEYS.visible, !this.state.contentOutlineVisible);\n    this.setState((state) => {\n      reportInteraction('explore_toolbar_contentoutline_clicked', {\n        item: 'outline',\n        type: state.contentOutlineVisible ? 'close' : 'open',\n      });\n      return {\n        contentOutlineVisible: !state.contentOutlineVisible,\n      };\n    });\n  };\n\n  /**\n   * Used by Logs details.\n   * Returns true if the query identified by `refId` has a filter with the provided key and value.\n   * @alpha\n   */\n  isFilterLabelActive = async (key: string, value: string | number, refId?: string) => {\n    const query = this.props.queries.find((q) => q.refId === refId);\n    if (!query) {\n      return false;\n    }\n    const ds = await getDataSourceSrv().get(query.datasource);\n    if (hasToggleableQueryFiltersSupport(ds) && ds.queryHasFilter(query, { key, value: value.toString() })) {\n      return true;\n    }\n    return false;\n  };\n\n  /**\n   * Used by Logs details.\n   */\n  onClickFilterLabel = (key: string, value: string | number, frame?: DataFrame) => {\n    this.onModifyQueries(\n      {\n        type: 'ADD_FILTER',\n        options: { key, value: value.toString() },\n        frame,\n      },\n      frame?.refId\n    );\n  };\n\n  /**\n   * Used by Logs details.\n   */\n  onClickFilterOutLabel = (key: string, value: string | number, frame?: DataFrame) => {\n    this.onModifyQueries(\n      {\n        type: 'ADD_FILTER_OUT',\n        options: { key, value: value.toString() },\n        frame,\n      },\n      frame?.refId\n    );\n  };\n\n  /**\n   * Used by Logs Popover Menu.\n   */\n  onClickFilterString = (value: string | number, refId?: string) => {\n    this.onModifyQueries({ type: 'ADD_STRING_FILTER', options: { value: value.toString() } }, refId);\n  };\n\n  /**\n   * Used by Logs Popover Menu.\n   */\n  onClickFilterOutString = (value: string | number, refId?: string) => {\n    this.onModifyQueries({ type: 'ADD_STRING_FILTER_OUT', options: { value: value.toString() } }, refId);\n  };\n\n  onClickAddQueryRowButton = () => {\n    const { exploreId, queryKeys } = this.props;\n    this.props.addQueryRow(exploreId, queryKeys.length);\n  };\n\n  /**\n   * Used by Logs details.\n   */\n  onModifyQueries = (action: QueryFixAction, refId?: string) => {\n    const modifier = async (query: DataQuery, modification: QueryFixAction) => {\n      // This gives Logs Details support to modify the query that produced the log line.\n      // If not present, all queries are modified.\n      if (refId && refId !== query.refId) {\n        return query;\n      }\n      const { datasource } = query;\n      if (datasource == null) {\n        return query;\n      }\n      const ds = await getDataSourceSrv().get(datasource);\n      const toggleableFilters = ['ADD_FILTER', 'ADD_FILTER_OUT'];\n      if (hasToggleableQueryFiltersSupport(ds) && toggleableFilters.includes(modification.type)) {\n        return ds.toggleQueryFilter(query, {\n          type: modification.type === 'ADD_FILTER' ? 'FILTER_FOR' : 'FILTER_OUT',\n          options: modification.options ?? {},\n          frame: modification.frame,\n        });\n      }\n      if (ds.modifyQuery) {\n        return ds.modifyQuery(query, modification);\n      } else {\n        return query;\n      }\n    };\n    this.props.modifyQueries(this.props.exploreId, action, modifier);\n  };\n\n  onResize = (size: HorizontalSize) => {\n    this.props.changeSize(this.props.exploreId, size);\n  };\n\n  onStartScanning = () => {\n    // Scanner will trigger a query\n    this.props.scanStart(this.props.exploreId);\n  };\n\n  onStopScanning = () => {\n    this.props.scanStopAction({ exploreId: this.props.exploreId });\n  };\n\n  onUpdateTimeRange = (absoluteRange: AbsoluteTimeRange) => {\n    const { exploreId, updateTimeRange } = this.props;\n    updateTimeRange({ exploreId, absoluteRange });\n  };\n\n  onSplitOpen = (panelType: string) => {\n    return async (options?: SplitOpenOptions) => {\n      this.props.splitOpen(options);\n      if (options && this.props.datasourceInstance) {\n        const target = (await getDataSourceSrv().get(options.datasourceUid)).type;\n        const source =\n          this.props.datasourceInstance.uid === MIXED_DATASOURCE_NAME\n            ? get(this.props.queries, '0.datasource.type')\n            : this.props.datasourceInstance.type;\n        const tracking = {\n          origin: 'panel',\n          panelType,\n          source,\n          target,\n          exploreId: this.props.exploreId,\n        };\n        reportInteraction('grafana_explore_split_view_opened', tracking);\n      }\n    };\n  };\n\n  onPinLineCallback = () => {\n    this.setState({ contentOutlineVisible: true });\n  };\n\n  renderEmptyState(exploreContainerStyles: string) {\n    return (\n      <div className={cx(exploreContainerStyles)}>\n        <NoDataSourceCallToAction />\n      </div>\n    );\n  }\n\n  renderNoData() {\n    return <NoData />;\n  }\n\n  renderCustom(width: number) {\n    const { timeZone, queryResponse, eventBus } = this.props;\n\n    const groupedByPlugin = groupBy(queryResponse?.customFrames, 'meta.preferredVisualisationPluginId');\n\n    return Object.entries(groupedByPlugin).map(([pluginId, frames], index) => {\n      return (\n        <ContentOutlineItem panelId={pluginId} title={pluginId} icon=\"plug\" key={index}>\n          <CustomContainer\n            key={index}\n            timeZone={timeZone}\n            pluginId={pluginId}\n            frames={frames}\n            state={queryResponse.state}\n            timeRange={queryResponse.timeRange}\n            height={400}\n            width={width}\n            splitOpenFn={this.onSplitOpen(pluginId)}\n            eventBus={eventBus}\n          />\n        </ContentOutlineItem>\n      );\n    });\n  }\n\n  renderGraphPanel(width: number) {\n    const { graphResult, timeZone, queryResponse, showFlameGraph } = this.props;\n\n    return (\n      <ContentOutlineItem panelId=\"Graph\" title={t('explore.explore.title-graph', 'Graph')} icon=\"graph-bar\">\n        <GraphContainer\n          data={graphResult!}\n          height={showFlameGraph ? 180 : 400}\n          width={width}\n          timeRange={queryResponse.timeRange}\n          timeZone={timeZone}\n          onChangeTime={this.onUpdateTimeRange}\n          annotations={queryResponse.annotations}\n          splitOpenFn={this.onSplitOpen('graph')}\n          loadingState={queryResponse.state}\n          eventBus={this.graphEventBus}\n        />\n      </ContentOutlineItem>\n    );\n  }\n\n  renderTablePanel(width: number) {\n    const { exploreId, timeZone } = this.props;\n    return (\n      <ContentOutlineItem panelId=\"Table\" title={t('explore.explore.title-table', 'Table')} icon=\"table\">\n        <TableContainer\n          ariaLabel={selectors.pages.Explore.General.table}\n          width={width}\n          exploreId={exploreId}\n          onCellFilterAdded={this.onCellFilterAdded}\n          timeZone={timeZone}\n          splitOpenFn={this.onSplitOpen('table')}\n        />\n      </ContentOutlineItem>\n    );\n  }\n\n  renderRawPrometheus(width: number) {\n    const { exploreId, datasourceInstance, timeZone } = this.props;\n    return (\n      <ContentOutlineItem\n        panelId=\"Raw Prometheus\"\n        title={t('explore.explore.title-raw-prometheus', 'Raw Prometheus')}\n        icon=\"gf-prometheus\"\n      >\n        <RawPrometheusContainer\n          showRawPrometheus={true}\n          ariaLabel={selectors.pages.Explore.General.table}\n          width={width}\n          exploreId={exploreId}\n          onCellFilterAdded={datasourceInstance?.modifyQuery ? this.onCellFilterAdded : undefined}\n          timeZone={timeZone}\n          splitOpenFn={this.onSplitOpen('table')}\n        />\n      </ContentOutlineItem>\n    );\n  }\n\n  splitOpenFnLogs = this.onSplitOpen('logs');\n\n  renderLogsPanel(width: number) {\n    const { exploreId, syncedTimes, theme, queryResponse } = this.props;\n    const spacing = parseInt(theme.spacing(2).slice(0, -2), 10);\n    // Need to make ContentOutlineItem a flex container so the gap works\n    const logsContentOutlineWrapper = css({\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(1),\n    });\n    return (\n      <ContentOutlineItem\n        panelId=\"Logs\"\n        title={t('explore.explore.title-logs', 'Logs')}\n        icon=\"gf-logs\"\n        className={logsContentOutlineWrapper}\n      >\n        <LogsContainer\n          exploreId={exploreId}\n          loadingState={queryResponse.state}\n          syncedTimes={syncedTimes}\n          width={width - spacing}\n          onClickFilterLabel={this.onClickFilterLabel}\n          onClickFilterOutLabel={this.onClickFilterOutLabel}\n          onStartScanning={this.onStartScanning}\n          onStopScanning={this.onStopScanning}\n          eventBus={this.logsEventBus}\n          splitOpenFn={this.splitOpenFnLogs}\n          scrollElement={this.scrollElement}\n          isFilterLabelActive={this.isFilterLabelActive}\n          onClickFilterString={this.onClickFilterString}\n          onClickFilterOutString={this.onClickFilterOutString}\n          onPinLineCallback={this.onPinLineCallback}\n        />\n      </ContentOutlineItem>\n    );\n  }\n\n  renderLogsSamplePanel() {\n    const { logsSample, timeZone, setSupplementaryQueryEnabled, exploreId, datasourceInstance, queries } = this.props;\n\n    return (\n      <ContentOutlineItem\n        panelId=\"Logs Sample\"\n        title={t('explore.explore.title-logs-sample', 'Logs sample')}\n        icon=\"gf-logs\"\n      >\n        <LogsSamplePanel\n          queryResponse={logsSample.data}\n          timeZone={timeZone}\n          enabled={logsSample.enabled}\n          queries={queries}\n          datasourceInstance={datasourceInstance}\n          splitOpen={this.onSplitOpen('logsSample')}\n          setLogsSampleEnabled={(enabled: boolean) =>\n            setSupplementaryQueryEnabled(exploreId, enabled, SupplementaryQueryType.LogsSample)\n          }\n        />\n      </ContentOutlineItem>\n    );\n  }\n\n  renderNodeGraphPanel() {\n    const { exploreId, showTrace, queryResponse, datasourceInstance } = this.props;\n    const datasourceType = datasourceInstance ? datasourceInstance?.type : 'unknown';\n\n    return (\n      <ContentOutlineItem\n        panelId=\"Node Graph\"\n        title={t('explore.explore.title-node-graph', 'Node graph')}\n        icon=\"code-branch\"\n      >\n        <NodeGraphContainer\n          dataFrames={queryResponse.nodeGraphFrames}\n          exploreId={exploreId}\n          withTraceView={showTrace}\n          datasourceType={datasourceType}\n          splitOpenFn={this.onSplitOpen('nodeGraph')}\n        />\n      </ContentOutlineItem>\n    );\n  }\n\n  renderFlameGraphPanel() {\n    const { queryResponse } = this.props;\n    return (\n      <ContentOutlineItem\n        panelId=\"Flame Graph\"\n        title={t('explore.explore.title-flame-graph', 'Flame graph')}\n        icon=\"fire\"\n      >\n        <FlameGraphExploreContainer dataFrames={queryResponse.flameGraphFrames} />\n      </ContentOutlineItem>\n    );\n  }\n\n  renderTraceViewPanel() {\n    const { queryResponse, exploreId } = this.props;\n    const dataFrames = queryResponse.series.filter((series) => series.meta?.preferredVisualisationType === 'trace');\n\n    return (\n      // If there is no data (like 404) we show a separate error so no need to show anything here\n      dataFrames.length && (\n        <ContentOutlineItem panelId=\"Traces\" title={t('explore.explore.title-traces', 'Traces')} icon=\"file-alt\">\n          <TraceViewContainer\n            exploreId={exploreId}\n            dataFrames={dataFrames}\n            splitOpenFn={this.onSplitOpen('traceView')}\n            scrollElement={this.scrollElement}\n            timeRange={queryResponse.timeRange}\n          />\n        </ContentOutlineItem>\n      )\n    );\n  }\n\n  render() {\n    const {\n      datasourceInstance,\n      exploreId,\n      graphResult,\n      queryResponse,\n      isLive,\n      theme,\n      showMetrics,\n      showTable,\n      showRawPrometheus,\n      showLogs,\n      showTrace,\n      showCustom,\n      showNodeGraph,\n      showFlameGraph,\n      showLogsSample,\n      correlationEditorDetails,\n      correlationEditorHelperData,\n      showQueryInspector,\n      setShowQueryInspector,\n    } = this.props;\n    const { contentOutlineVisible } = this.state;\n    const styles = getStyles(theme);\n    const showPanels = queryResponse && queryResponse.state !== LoadingState.NotStarted;\n    const richHistoryRowButtonHidden = !supportedFeatures().queryHistoryAvailable;\n    const showNoData =\n      queryResponse.state === LoadingState.Done &&\n      [\n        queryResponse.logsFrames,\n        queryResponse.graphFrames,\n        queryResponse.nodeGraphFrames,\n        queryResponse.flameGraphFrames,\n        queryResponse.tableFrames,\n        queryResponse.rawPrometheusFrames,\n        queryResponse.traceFrames,\n        queryResponse.customFrames,\n      ].every((e) => e.length === 0);\n\n    let correlationsBox = undefined;\n    const isCorrelationsEditorMode = correlationEditorDetails?.editorMode;\n    const showCorrelationHelper = Boolean(isCorrelationsEditorMode || correlationEditorDetails?.correlationDirty);\n    if (showCorrelationHelper && correlationEditorHelperData !== undefined) {\n      correlationsBox = <CorrelationHelper exploreId={exploreId} correlations={correlationEditorHelperData} />;\n    }\n\n    return (\n      <ContentOutlineContextProvider refreshDependencies={this.props.queries}>\n        <ExploreToolbar\n          exploreId={exploreId}\n          onChangeTime={this.onChangeTime}\n          onContentOutlineToogle={this.onContentOutlineToogle}\n          isContentOutlineOpen={contentOutlineVisible}\n        />\n        <div\n          style={{\n            position: 'relative',\n            height: '100%',\n            paddingLeft: theme.spacing(2),\n          }}\n        >\n          <div className={styles.wrapper}>\n            {contentOutlineVisible && (\n              <ContentOutline scroller={this.scrollElement} panelId={`content-outline-container-${exploreId}`} />\n            )}\n            <ScrollContainer\n              data-testid={selectors.pages.Explore.General.scrollView}\n              ref={(scrollElement) => (this.scrollElement = scrollElement || undefined)}\n            >\n              <div className={styles.exploreContainer}>\n                {datasourceInstance ? (\n                  <>\n                    <ContentOutlineItem\n                      panelId=\"Queries\"\n                      title={t('explore.explore.title-queries', 'Queries')}\n                      icon=\"arrow\"\n                      mergeSingleChild={true}\n                    >\n                      <PanelContainer className={styles.queryContainer}>\n                        <DrilldownAlertBox datasourceType={datasourceInstance?.type || ''} />\n                        {correlationsBox}\n                        <QueryRows exploreId={exploreId} />\n                        <SecondaryActions\n                          // do not allow people to add queries with potentially different datasources in correlations editor mode\n                          addQueryRowButtonDisabled={\n                            isLive || (isCorrelationsEditorMode && datasourceInstance.meta.mixed)\n                          }\n                          // We cannot show multiple traces at the same time right now so we do not show add query button.\n                          //TODO:unification\n                          addQueryRowButtonHidden={false}\n                          richHistoryRowButtonHidden={richHistoryRowButtonHidden}\n                          queryInspectorButtonActive={showQueryInspector}\n                          onClickAddQueryRowButton={this.onClickAddQueryRowButton}\n                          onClickQueryInspectorButton={() => setShowQueryInspector(!showQueryInspector)}\n                          onSelectQueryFromLibrary={async (query) => {\n                            const { changeDatasource, queries, setQueries } = this.props;\n                            const newQueries = [\n                              ...queries,\n                              {\n                                ...query,\n                                refId: getNextRefId(queries),\n                              },\n                            ];\n                            setQueries(exploreId, newQueries);\n                            if (query.datasource?.uid) {\n                              const uniqueDatasources = new Set(newQueries.map((q) => q.datasource?.uid));\n                              const isMixed = uniqueDatasources.size > 1;\n                              const newDatasourceRef = {\n                                uid: isMixed ? MIXED_DATASOURCE_NAME : query.datasource.uid,\n                              };\n                              const shouldChangeDatasource = datasourceInstance.uid !== newDatasourceRef.uid;\n                              if (shouldChangeDatasource) {\n                                await changeDatasource({ exploreId, datasource: newDatasourceRef });\n                              }\n                            }\n                          }}\n                        />\n                        <ResponseErrorContainer exploreId={exploreId} />\n                      </PanelContainer>\n                    </ContentOutlineItem>\n                    <AutoSizer onResize={this.onResize} disableHeight>\n                      {({ width }) => {\n                        if (width === 0) {\n                          return null;\n                        }\n\n                        return (\n                          <main className={cx(styles.exploreMain)} style={{ width }}>\n                            <ErrorBoundaryAlert>\n                              {showPanels && (\n                                <>\n                                  {showMetrics && graphResult && (\n                                    <ErrorBoundaryAlert>{this.renderGraphPanel(width)}</ErrorBoundaryAlert>\n                                  )}\n                                  {showRawPrometheus && (\n                                    <ErrorBoundaryAlert>{this.renderRawPrometheus(width)}</ErrorBoundaryAlert>\n                                  )}\n                                  {showTable && <ErrorBoundaryAlert>{this.renderTablePanel(width)}</ErrorBoundaryAlert>}\n                                  {showLogs && <ErrorBoundaryAlert>{this.renderLogsPanel(width)}</ErrorBoundaryAlert>}\n                                  {showNodeGraph && (\n                                    <ErrorBoundaryAlert>{this.renderNodeGraphPanel()}</ErrorBoundaryAlert>\n                                  )}\n                                  {showFlameGraph && (\n                                    <ErrorBoundaryAlert>{this.renderFlameGraphPanel()}</ErrorBoundaryAlert>\n                                  )}\n                                  {showTrace && <ErrorBoundaryAlert>{this.renderTraceViewPanel()}</ErrorBoundaryAlert>}\n                                  {showLogsSample && (\n                                    <ErrorBoundaryAlert>{this.renderLogsSamplePanel()}</ErrorBoundaryAlert>\n                                  )}\n                                  {showCustom && <ErrorBoundaryAlert>{this.renderCustom(width)}</ErrorBoundaryAlert>}\n                                  {showNoData && <ErrorBoundaryAlert>{this.renderNoData()}</ErrorBoundaryAlert>}\n                                </>\n                              )}\n                            </ErrorBoundaryAlert>\n                          </main>\n                        );\n                      }}\n                    </AutoSizer>\n                  </>\n                ) : (\n                  this.renderEmptyState(styles.exploreContainer)\n                )}\n              </div>\n            </ScrollContainer>\n          </div>\n        </div>\n      </ContentOutlineContextProvider>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId }: ExploreProps) {\n  const explore = state.explore;\n  const { syncedTimes } = explore;\n  const item = explore.panes[exploreId]!;\n\n  const timeZone = getTimeZone(state.user);\n  const {\n    datasourceInstance,\n    queryKeys,\n    queries,\n    isLive,\n    graphResult,\n    tableResult,\n    logsResult,\n    showLogs,\n    showMetrics,\n    showTable,\n    showTrace,\n    showCustom,\n    queryResponse,\n    showNodeGraph,\n    showFlameGraph,\n    showRawPrometheus,\n    supplementaryQueries,\n    correlationEditorHelperData,\n  } = item;\n\n  const loading = selectIsWaitingForData(exploreId)(state);\n  const logsSample = supplementaryQueries[SupplementaryQueryType.LogsSample];\n  // We want to show logs sample only if there are no log results and if there is already graph or table result\n  const showLogsSample = !!(logsSample.dataProvider !== undefined && !logsResult && (graphResult || tableResult));\n\n  return {\n    datasourceInstance,\n    queryKeys,\n    queries,\n    isLive,\n    graphResult,\n    logsResult: logsResult ?? undefined,\n    queryResponse,\n    syncedTimes,\n    timeZone,\n    showLogs,\n    showMetrics,\n    showTable,\n    showTrace,\n    showCustom,\n    showNodeGraph,\n    showRawPrometheus,\n    showFlameGraph,\n    splitted: isSplit(state),\n    loading,\n    logsSample,\n    showLogsSample,\n    correlationEditorHelperData,\n    correlationEditorDetails: explore.correlationEditorDetails,\n    exploreActiveDS: selectExploreDSMaps(state),\n  };\n}\n\nconst mapDispatchToProps = {\n  changeDatasource,\n  changeSize,\n  modifyQueries,\n  scanStart,\n  scanStopAction,\n  setQueries,\n  updateTimeRange,\n  addQueryRow,\n  splitOpen,\n  setSupplementaryQueryEnabled,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport default withTheme2(connector(Explore));\n","import { css } from '@emotion/css';\nimport { useEffect, useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { CoreApp, GrafanaTheme2, LoadingState } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { defaultTimeZone, TimeZone } from '@grafana/schema';\nimport { TabbedContainer, TabConfig, useStyles2 } from '@grafana/ui';\nimport { requestIdGenerator } from 'app/core/utils/explore';\nimport { ExploreDrawer } from 'app/features/explore/ExploreDrawer';\nimport { InspectDataTab } from 'app/features/inspector/InspectDataTab';\nimport { InspectErrorTab } from 'app/features/inspector/InspectErrorTab';\nimport { InspectJSONTab } from 'app/features/inspector/InspectJSONTab';\nimport { InspectStatsTab } from 'app/features/inspector/InspectStatsTab';\nimport { QueryInspector } from 'app/features/inspector/QueryInspector';\nimport { mixedRequestId } from 'app/plugins/datasource/mixed/MixedDataSource';\nimport { StoreState, ExploreItemState } from 'app/types';\n\nimport { GetDataOptions } from '../query/state/PanelQueryRunner';\n\nimport { runQueries } from './state/query';\n\ninterface DispatchProps {\n  exploreId: string;\n  timeZone: TimeZone;\n  onClose: () => void;\n}\n\ntype Props = DispatchProps & ConnectedProps<typeof connector>;\n\nexport function ExploreQueryInspector(props: Props) {\n  const { onClose, queryResponse, timeZone, isMixed, exploreId } = props;\n  const [dataOptions, setDataOptions] = useState<GetDataOptions>({\n    withTransforms: false,\n    withFieldConfig: true,\n  });\n  const dataFrames = queryResponse?.series || [];\n  let errors = queryResponse?.errors;\n  if (!errors?.length && queryResponse?.error) {\n    errors = [queryResponse.error];\n  }\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    reportInteraction('grafana_explore_query_inspector_opened');\n  }, []);\n\n  const statsTab: TabConfig = {\n    label: 'Stats',\n    value: 'stats',\n    icon: 'chart-line',\n    content: <InspectStatsTab data={queryResponse!} timeZone={queryResponse?.request?.timezone ?? defaultTimeZone} />,\n  };\n\n  const jsonTab: TabConfig = {\n    label: 'JSON',\n    value: 'json',\n    icon: 'brackets-curly',\n    content: <InspectJSONTab data={queryResponse} onClose={onClose} />,\n  };\n\n  const dataTab: TabConfig = {\n    label: 'Data',\n    value: 'data',\n    icon: 'database',\n    content: (\n      <InspectDataTab\n        data={dataFrames}\n        dataName={'Explore'}\n        isLoading={queryResponse.state === LoadingState.Loading}\n        options={dataOptions}\n        timeZone={timeZone}\n        app={CoreApp.Explore}\n        formattedDataDescription=\"Matches the format in the panel\"\n        onOptionsChange={setDataOptions}\n      />\n    ),\n  };\n\n  const queryTab: TabConfig = {\n    label: 'Query',\n    value: 'query',\n    icon: 'info-circle',\n    content: (\n      <div className={styles.queryInspectorWrapper}>\n        <QueryInspector\n          instanceId={isMixed ? mixedRequestId(0, requestIdGenerator(exploreId)) : requestIdGenerator(exploreId)}\n          data={queryResponse}\n          onRefreshQuery={() => props.runQueries({ exploreId })}\n        />\n      </div>\n    ),\n  };\n\n  const tabs = [statsTab, queryTab, jsonTab, dataTab];\n  if (errors?.length) {\n    const errorTab: TabConfig = {\n      label: 'Error',\n      value: 'error',\n      icon: 'exclamation-triangle',\n      content: <InspectErrorTab errors={errors} />,\n    };\n    tabs.push(errorTab);\n  }\n  return (\n    <ExploreDrawer>\n      <TabbedContainer tabs={tabs} onClose={onClose} closeIconTooltip=\"Close query inspector\" />\n    </ExploreDrawer>\n  );\n}\n\nfunction mapStateToProps(state: StoreState, { exploreId }: { exploreId: string }) {\n  const explore = state.explore;\n  const item: ExploreItemState = explore.panes[exploreId]!;\n  const { queryResponse } = item;\n\n  return {\n    queryResponse,\n    isMixed: item.datasourceInstance?.meta.mixed || false,\n  };\n}\n\nconst mapDispatchToProps = {\n  runQueries,\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  queryInspectorWrapper: css({\n    paddingBottom: theme.spacing(3),\n  }),\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport default connector(ExploreQueryInspector);\n","import { css } from '@emotion/css';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nimport { connect } from 'react-redux';\n\nimport { EventBusSrv, getTimeZone } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { stopQueryState } from 'app/core/utils/explore';\nimport { StoreState, useSelector } from 'app/types';\n\nimport Explore from './Explore';\nimport ExploreQueryInspector from './ExploreQueryInspector';\nimport { getExploreItemSelector } from './state/selectors';\n\nconst containerStyles = css({\n  label: 'explorePaneContainer',\n  display: 'flex',\n  flexDirection: 'column',\n  minWidth: '600px',\n  height: '100%',\n});\n\ninterface Props {\n  exploreId: string;\n}\n\n/*\n  Connected components subscribe to the store before function components (using hooks) and can react to store changes. Thus, this connector function is called before the parent component (ExplorePage) is rerendered.\n  This means that child components' mapStateToProps will be executed with a zombie `exploreId` that is not present anymore in the store if the pane gets closed.\n  By connecting this component and returning the pane we workaround the zombie children issue here instead of modifying every children.\n  This is definitely not the ideal solution and we should in the future invest more time in exploring other approaches to better handle this scenario, potentially by refactoring panels to be function components\n  (therefore immune to this behaviour), or by forbidding them to access the store directly and instead pass them all the data they need via props or context.\n\n  You can read more about this issue here: https://react-redux.js.org/api/hooks#stale-props-and-zombie-children\n*/\nfunction ExplorePaneContainerUnconnected({ exploreId }: Props) {\n  useStopQueries(exploreId);\n  const eventBus = useRef(new EventBusSrv());\n  const ref = useRef(null);\n  const [showQueryInspector, setShowQueryInspector] = useState(false);\n\n  useEffect(() => {\n    const bus = eventBus.current;\n    return () => bus.removeAllListeners();\n  }, []);\n\n  return (\n    <div className={containerStyles} ref={ref} data-testid={selectors.pages.Explore.General.container}>\n      <Explore\n        exploreId={exploreId}\n        eventBus={eventBus.current}\n        showQueryInspector={showQueryInspector}\n        setShowQueryInspector={setShowQueryInspector}\n      />\n      {showQueryInspector && (\n        <ExploreQueryInspector\n          exploreId={exploreId}\n          onClose={() => setShowQueryInspector(false)}\n          timeZone={getTimeZone()}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction mapStateToProps(state: StoreState, props: Props) {\n  const pane = state.explore.panes[props.exploreId];\n\n  return { pane };\n}\n\nconst connector = connect(mapStateToProps);\n\nexport const ExplorePaneContainer = connector(ExplorePaneContainerUnconnected);\n\nfunction useStopQueries(exploreId: string) {\n  const paneSelector = useMemo(() => getExploreItemSelector(exploreId), [exploreId]);\n  const paneRef = useRef<ReturnType<typeof paneSelector>>();\n  paneRef.current = useSelector(paneSelector);\n\n  useEffect(() => {\n    return () => {\n      stopQueryState(paneRef.current?.querySubscription);\n    };\n  }, []);\n}\n","import { t } from 'app//core/internationalization';\n\nexport const i18n = {\n  queryLibrary: t('explore.rich-history.query-library', 'Query library'),\n  queryHistory: t('explore.rich-history.query-history', 'Query history'),\n};\n","import { useState } from 'react';\nimport { ConnectedProps, connect } from 'react-redux';\n\nimport { config, reportInteraction } from '@grafana/runtime';\nimport { DataQuery } from '@grafana/schema';\nimport { Button, Dropdown, Menu, ToolbarButton } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\nimport { useSelector } from 'app/types';\n\nimport { changeDatasource } from './state/datasource';\nimport { setQueries } from './state/query';\nimport { isSplit, selectExploreDSMaps, selectPanesEntries } from './state/selectors';\n\nconst mapDispatchToProps = {\n  setQueries,\n  changeDatasource,\n};\n\nconst connector = connect(undefined, mapDispatchToProps);\n\ninterface ExploreRunQueryButtonProps {\n  queries: DataQuery[];\n  rootDatasourceUid?: string;\n  disabled?: boolean;\n  onClick?: () => void;\n}\n\nexport type Props = ConnectedProps<typeof connector> & ExploreRunQueryButtonProps;\n\n/*\nThis component does not validate datasources before running them. Root datasource validation should happen outside this component and can pass in an undefined if invalid\nIf query level validation is done and a query datasource is invalid, pass in disabled = true\n*/\n\nexport function ExploreRunQueryButton({\n  rootDatasourceUid,\n  queries,\n  disabled = false,\n  onClick,\n  changeDatasource,\n  setQueries,\n}: Props) {\n  const [openRunQueryButton, setOpenRunQueryButton] = useState(false);\n  const isPaneSplit = useSelector(isSplit);\n  const exploreActiveDS = useSelector(selectExploreDSMaps);\n  const panesEntries = useSelector(selectPanesEntries);\n\n  const isDifferentDatasource = (uid: string, exploreId: string) =>\n    !exploreActiveDS.dsToExplore.find((di) => di.datasource.uid === uid)?.exploreIds.includes(exploreId);\n\n  // exploreId on where the query will be ran, and the datasource ID for the item's DS\n  const runQueryText = (exploreId: string, dsUid?: string) => {\n    // if the datasource or exploreID is undefined, it will be disabled, but give it default query button text\n    return dsUid !== undefined && exploreId !== undefined && isDifferentDatasource(dsUid, exploreId)\n      ? {\n          fallbackText: 'Switch data source and run query',\n          translation: t('explore.run-query.switch-datasource-button', 'Switch data source and run query'),\n        }\n      : {\n          fallbackText: 'Run query',\n          translation: t('explore.run-query.run-query-button', 'Run query'),\n        };\n  };\n\n  const runQuery = async (exploreId: string) => {\n    const differentDataSource = isDifferentDatasource(rootDatasourceUid!, exploreId);\n    if (differentDataSource) {\n      await changeDatasource({ exploreId, datasource: rootDatasourceUid! });\n    }\n    setQueries(exploreId, queries);\n\n    reportInteraction('grafana_explore_query_history_run', {\n      queryHistoryEnabled: config.queryHistoryEnabled,\n      differentDataSource,\n    });\n  };\n\n  const runButton = () => {\n    const isInvalid = disabled || queries.length === 0 || rootDatasourceUid === undefined;\n    if (!isPaneSplit) {\n      const exploreId = exploreActiveDS.exploreToDS[0]?.exploreId; // may be undefined if explore is refreshed while the pane is up\n      const buttonText = runQueryText(exploreId, rootDatasourceUid);\n      return (\n        <Button\n          variant={'primary'}\n          aria-label={buttonText.translation}\n          onClick={() => {\n            runQuery(exploreId);\n            onClick?.();\n          }}\n          disabled={isInvalid || exploreId === undefined}\n        >\n          {buttonText.translation}\n        </Button>\n      );\n    } else {\n      const menu = (\n        <Menu>\n          {panesEntries.map((pane, i) => {\n            const buttonText = runQueryText(pane[0], rootDatasourceUid);\n            const paneLabel =\n              i === 0 ? t('explore.run-query.left-pane', 'Left pane') : t('explore.run-query.right-pane', 'Right pane');\n            return (\n              <Menu.Item\n                key={i}\n                ariaLabel={buttonText.fallbackText}\n                onClick={() => {\n                  runQuery(pane[0]);\n                  onClick?.();\n                }}\n                label={`${paneLabel}: ${buttonText.translation}`}\n                disabled={isInvalid || pane[0] === undefined}\n              />\n            );\n          })}\n        </Menu>\n      );\n\n      return (\n        <Dropdown onVisibleChange={(state) => setOpenRunQueryButton(state)} placement=\"bottom-start\" overlay={menu}>\n          <ToolbarButton\n            aria-label={t(\n              'explore.explore-run-query-button.run-button.aria-label-run-query-options',\n              'Run query options'\n            )}\n            variant=\"canvas\"\n            isOpen={openRunQueryButton}\n          >\n            {t('explore.run-query.run-query-button', 'Run query')}\n          </ToolbarButton>\n        </Dropdown>\n      );\n    }\n  };\n\n  return <>{runButton()}</>;\n}\n\nexport default connector(ExploreRunQueryButton);\n","import { useState } from 'react';\n\nimport { DataQuery } from '@grafana/schema';\nimport { Button } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { useQueryLibraryContext } from '../QueryLibrary/QueryLibraryContext';\n\ntype Props = {\n  query: DataQuery;\n};\n\nexport const RichHistoryAddToLibrary = ({ query }: Props) => {\n  const [hasBeenSaved, setHasBeenSaved] = useState(false);\n  const { openAddQueryModal, queryLibraryEnabled } = useQueryLibraryContext();\n\n  const buttonLabel = t('explore.rich-history-card.add-to-library', 'Add to library');\n\n  return queryLibraryEnabled && !hasBeenSaved ? (\n    <>\n      <Button\n        variant=\"secondary\"\n        aria-label={buttonLabel}\n        onClick={() => {\n          openAddQueryModal(query, { onSave: () => setHasBeenSaved(true), context: 'richHistory' });\n        }}\n      >\n        {buttonLabel}\n      </Button>\n    </>\n  ) : undefined;\n};\n","import { css, cx } from '@emotion/css';\nimport { useCallback, useState } from 'react';\nimport * as React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { GrafanaTheme2, DataSourceApi } from '@grafana/data';\nimport { config, reportInteraction, getAppEvents } from '@grafana/runtime';\nimport { DataQuery } from '@grafana/schema';\nimport { TextArea, Button, IconButton, useStyles2 } from '@grafana/ui';\nimport { notifyApp } from 'app/core/actions';\nimport { createSuccessNotification } from 'app/core/copy/appNotification';\nimport { Trans, t } from 'app/core/internationalization';\nimport { copyStringToClipboard } from 'app/core/utils/explore';\nimport { createUrlFromRichHistory, createQueryText } from 'app/core/utils/richHistory';\nimport { createAndCopyShortLink } from 'app/core/utils/shortLinks';\nimport { changeDatasource } from 'app/features/explore/state/datasource';\nimport { starHistoryItem, commentHistoryItem, deleteHistoryItem } from 'app/features/explore/state/history';\nimport { setQueries } from 'app/features/explore/state/query';\nimport { dispatch } from 'app/store/store';\nimport { ShowConfirmModalEvent } from 'app/types/events';\nimport { RichHistoryQuery } from 'app/types/explore';\n\nimport ExploreRunQueryButton from '../ExploreRunQueryButton';\n\nimport { RichHistoryAddToLibrary } from './RichHistoryAddToLibrary';\n\nconst mapDispatchToProps = {\n  changeDatasource,\n  deleteHistoryItem,\n  commentHistoryItem,\n  starHistoryItem,\n  setQueries,\n};\n\nconst connector = connect(undefined, mapDispatchToProps);\n\ninterface OwnProps<T extends DataQuery = DataQuery> {\n  datasourceInstances?: DataSourceApi[];\n  queryHistoryItem: RichHistoryQuery<T>;\n}\n\nexport type Props<T extends DataQuery = DataQuery> = ConnectedProps<typeof connector> & OwnProps<T>;\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  /* Hard-coded value so all buttons and icons on right side of card are aligned */\n  const rightColumnWidth = '240px';\n  const rightColumnContentWidth = '170px';\n\n  /* If datasource was removed, card will have inactive color */\n  const cardColor = theme.colors.background.secondary;\n\n  return {\n    queryCard: css({\n      position: 'relative',\n      display: 'flex',\n      flexDirection: 'column',\n      border: `1px solid ${theme.colors.border.weak}`,\n      margin: theme.spacing(1, 0),\n      backgroundColor: cardColor,\n      borderRadius: theme.shape.radius.default,\n      '.starred': {\n        color: theme.v1.palette.orange,\n      },\n    }),\n    cardRow: css({\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'space-between',\n      padding: theme.spacing(1),\n      borderBottom: 'none',\n      ':first-of-type': {\n        borderBottom: `1px solid ${theme.colors.border.weak}`,\n        padding: theme.spacing(0.5, 1),\n      },\n      img: {\n        height: `${theme.typography.fontSize}px`,\n        maxWidth: `${theme.typography.fontSize}px`,\n        marginRight: theme.spacing(1),\n      },\n    }),\n    queryActionButtons: css({\n      maxWidth: rightColumnContentWidth,\n      display: 'flex',\n      justifyContent: 'flex-end',\n      fontSize: theme.typography.size.base,\n      button: {\n        marginLeft: theme.spacing(1),\n      },\n    }),\n    queryContainer: css({\n      fontWeight: theme.typography.fontWeightMedium,\n      width: `calc(100% - ${rightColumnWidth})`,\n    }),\n    updateCommentContainer: css({\n      width: `calc(100% + ${rightColumnWidth})`,\n      marginTop: theme.spacing(1),\n    }),\n    comment: css({\n      overflowWrap: 'break-word',\n      fontSize: theme.typography.bodySmall.fontSize,\n      fontWeight: theme.typography.fontWeightRegular,\n      marginTop: theme.spacing(0.5),\n    }),\n    commentButtonRow: css({\n      '> *': {\n        marginTop: theme.spacing(1),\n        marginRight: theme.spacing(1),\n      },\n    }),\n    textArea: css({\n      width: '100%',\n    }),\n    runButton: css({\n      maxWidth: rightColumnContentWidth,\n      display: 'flex',\n      justifyContent: 'flex-end',\n      button: {\n        height: 'auto',\n        padding: theme.spacing(0.5, 2),\n        lineHeight: 1.4,\n        span: {\n          whiteSpace: 'normal !important',\n        },\n      },\n    }),\n    loader: css({\n      position: 'absolute',\n      width: '100%',\n      height: '100%',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      backgroundColor: theme.colors.background.secondary,\n    }),\n  };\n};\n\nexport function RichHistoryCard(props: Props) {\n  const { queryHistoryItem, commentHistoryItem, starHistoryItem, deleteHistoryItem, datasourceInstances } = props;\n\n  const [activeUpdateComment, setActiveUpdateComment] = useState(false);\n  const [comment, setComment] = useState<string | undefined>(queryHistoryItem.comment);\n  const styles = useStyles2(getStyles);\n\n  const cardRootDatasource = datasourceInstances\n    ? datasourceInstances.find((di) => di.uid === queryHistoryItem.datasourceUid)\n    : undefined;\n\n  const onCopyQuery = async () => {\n    const datasources = [...queryHistoryItem.queries.map((query) => query.datasource?.type || 'unknown')];\n    reportInteraction('grafana_explore_query_history_copy_query', {\n      datasources,\n      mixed: Boolean(cardRootDatasource?.meta.mixed),\n    });\n\n    const queriesText = queryHistoryItem.queries\n      .map((query) => {\n        let queryDS = datasourceInstances?.find((di) => di.uid === queryHistoryItem.datasourceUid);\n        if (queryDS?.meta.mixed) {\n          queryDS = datasourceInstances?.find((di) => di.uid === query.datasource?.uid);\n        }\n        return createQueryText(query, queryDS);\n      })\n      .join('\\n');\n\n    copyStringToClipboard(queriesText);\n    dispatch(\n      notifyApp(\n        createSuccessNotification(t('explore.rich-history-notification.query-copied', 'Query copied to clipboard'))\n      )\n    );\n  };\n\n  const onCreateShortLink = async () => {\n    const link = createUrlFromRichHistory(queryHistoryItem);\n    await createAndCopyShortLink(link);\n  };\n\n  const onDeleteQuery = () => {\n    const performDelete = (queryId: string) => {\n      deleteHistoryItem(queryId);\n      dispatch(\n        notifyApp(createSuccessNotification(t('explore.rich-history-notification.query-deleted', 'Query deleted')))\n      );\n      reportInteraction('grafana_explore_query_history_deleted', {\n        queryHistoryEnabled: config.queryHistoryEnabled,\n      });\n    };\n\n    // For starred queries, we want confirmation. For non-starred, we don't.\n    if (queryHistoryItem.starred) {\n      getAppEvents().publish(\n        new ShowConfirmModalEvent({\n          title: t('explore.rich-history-card.delete-query-confirmation-title', 'Delete'),\n          text: t(\n            'explore.rich-history-card.delete-starred-query-confirmation-text',\n            'Are you sure you want to permanently delete your starred query?'\n          ),\n          yesText: t('explore.rich-history-card.confirm-delete', 'Delete'),\n          icon: 'trash-alt',\n          onConfirm: () => performDelete(queryHistoryItem.id),\n        })\n      );\n    } else {\n      performDelete(queryHistoryItem.id);\n    }\n  };\n\n  const onStarQuery = () => {\n    starHistoryItem(queryHistoryItem.id, !queryHistoryItem.starred);\n    reportInteraction('grafana_explore_query_history_starred', {\n      queryHistoryEnabled: config.queryHistoryEnabled,\n      newValue: !queryHistoryItem.starred,\n    });\n  };\n\n  const toggleActiveUpdateComment = () => setActiveUpdateComment(!activeUpdateComment);\n\n  const onUpdateComment = () => {\n    commentHistoryItem(queryHistoryItem.id, comment);\n    setActiveUpdateComment(false);\n    reportInteraction('grafana_explore_query_history_commented', {\n      queryHistoryEnabled: config.queryHistoryEnabled,\n    });\n  };\n\n  const onCancelUpdateComment = () => {\n    setActiveUpdateComment(false);\n    setComment(queryHistoryItem.comment);\n  };\n\n  const onKeyDown = (keyEvent: React.KeyboardEvent) => {\n    if (keyEvent.key === 'Enter' && (keyEvent.shiftKey || keyEvent.ctrlKey)) {\n      onUpdateComment();\n    }\n\n    if (keyEvent.key === 'Escape') {\n      onCancelUpdateComment();\n    }\n  };\n\n  const updateComment = (\n    <div\n      className={styles.updateCommentContainer}\n      aria-label={\n        comment\n          ? t('explore.rich-history-card.update-comment-form', 'Update comment form')\n          : t('explore.rich-history-card.add-comment-form', 'Add comment form')\n      }\n    >\n      <TextArea\n        onKeyDown={onKeyDown}\n        value={comment}\n        placeholder={\n          comment\n            ? undefined\n            : t('explore.rich-history-card.optional-description', 'An optional description of what the query does.')\n        }\n        onChange={(e) => setComment(e.currentTarget.value)}\n        className={styles.textArea}\n      />\n      <div className={styles.commentButtonRow}>\n        <Button onClick={onUpdateComment}>\n          <Trans i18nKey=\"explore.rich-history-card.save-comment\">Save comment</Trans>\n        </Button>\n        <Button variant=\"secondary\" onClick={onCancelUpdateComment}>\n          <Trans i18nKey=\"explore.rich-history-card.cancel\">Cancel</Trans>\n        </Button>\n      </div>\n    </div>\n  );\n\n  const queryActionButtons = (\n    <div className={styles.queryActionButtons}>\n      <IconButton\n        name=\"comment-alt\"\n        onClick={toggleActiveUpdateComment}\n        tooltip={\n          queryHistoryItem.comment?.length > 0\n            ? t('explore.rich-history-card.edit-comment-tooltip', 'Edit comment')\n            : t('explore.rich-history-card.add-comment-tooltip', 'Add comment')\n        }\n      />\n      <IconButton\n        name=\"copy\"\n        onClick={onCopyQuery}\n        tooltip={t('explore.rich-history-card.copy-query-tooltip', 'Copy query to clipboard')}\n      />\n      {cardRootDatasource && (\n        <IconButton\n          name=\"share-alt\"\n          onClick={onCreateShortLink}\n          tooltip={\n            <Trans i18nKey=\"explore.rich-history-card.copy-shortened-link-tooltip\">\n              Copy shortened link to clipboard\n            </Trans>\n          }\n        />\n      )}\n      <IconButton\n        name=\"trash-alt\"\n        title={t('explore.rich-history-card.delete-query-title', 'Delete query')}\n        tooltip={t('explore.rich-history-card.delete-query-tooltip', 'Delete query')}\n        onClick={onDeleteQuery}\n      />\n      <IconButton\n        name={queryHistoryItem.starred ? 'favorite' : 'star'}\n        iconType={queryHistoryItem.starred ? 'mono' : 'default'}\n        onClick={onStarQuery}\n        tooltip={\n          queryHistoryItem.starred\n            ? t('explore.rich-history-card.unstar-query-tooltip', 'Unstar query')\n            : t('explore.rich-history-card.star-query-tooltip', 'Star query')\n        }\n      />\n    </div>\n  );\n\n  return (\n    <div className={styles.queryCard}>\n      <div className={styles.cardRow}>\n        <DatasourceInfo dsApi={cardRootDatasource} size=\"sm\" />\n\n        {queryActionButtons}\n      </div>\n      <div className={cx(styles.cardRow)}>\n        <div className={styles.queryContainer}>\n          {queryHistoryItem?.queries.map((q, i) => {\n            const queryDs = datasourceInstances?.find((ds) => ds.uid === q.datasource?.uid);\n            return (\n              <Query\n                query={{ query: q, datasource: queryDs }}\n                key={`${q}-${i}`}\n                showDsInfo={cardRootDatasource?.meta.mixed}\n              />\n            );\n          })}\n          {!activeUpdateComment && queryHistoryItem.comment && (\n            <div\n              aria-label={t('explore.rich-history-card.query-comment-label', 'Query comment')}\n              className={styles.comment}\n            >\n              {queryHistoryItem.comment}\n            </div>\n          )}\n          {activeUpdateComment && updateComment}\n        </div>\n        {!activeUpdateComment && <RichHistoryAddToLibrary query={queryHistoryItem?.queries[0]} />}\n        {!activeUpdateComment && (\n          <div className={styles.runButton}>\n            <ExploreRunQueryButton queries={queryHistoryItem.queries} rootDatasourceUid={cardRootDatasource?.uid} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nconst getQueryStyles = (theme: GrafanaTheme2) => ({\n  queryRow: css({\n    borderTop: `1px solid ${theme.colors.border.weak}`,\n    display: 'flex',\n    flexDirection: 'row',\n    padding: theme.spacing(0.5, 0),\n    gap: theme.spacing(0.5),\n    ':first-child': {\n      borderTop: 'none',\n    },\n  }),\n  dsInfoContainer: css({\n    display: 'flex',\n    alignItems: 'center',\n  }),\n  queryText: css({\n    wordBreak: 'break-all',\n  }),\n});\n\ninterface QueryProps {\n  query: {\n    query: DataQuery;\n    datasource?: DataSourceApi;\n  };\n  /** Show datasource info (icon+name) alongside the query text */\n  showDsInfo?: boolean;\n}\n\nconst Query = ({ query, showDsInfo = false }: QueryProps) => {\n  const styles = useStyles2(getQueryStyles);\n\n  return (\n    <div className={styles.queryRow}>\n      {showDsInfo && (\n        <div className={styles.dsInfoContainer}>\n          <DatasourceInfo dsApi={query.datasource} size=\"md\" />\n          {': '}\n        </div>\n      )}\n      <span aria-label={t('explore.rich-history-card.query-text-label', 'Query text')} className={styles.queryText}>\n        {createQueryText(query.query, query.datasource)}\n      </span>\n    </div>\n  );\n};\n\nconst getDsInfoStyles = (size: 'sm' | 'md') => (theme: GrafanaTheme2) =>\n  css({\n    display: 'flex',\n    alignItems: 'center',\n    fontSize: theme.typography[size === 'sm' ? 'bodySmall' : 'body'].fontSize,\n    fontWeight: theme.typography.fontWeightMedium,\n    whiteSpace: 'nowrap',\n  });\n\nfunction DatasourceInfo({ dsApi, size }: { dsApi?: DataSourceApi; size: 'sm' | 'md' }) {\n  const getStyles = useCallback((theme: GrafanaTheme2) => getDsInfoStyles(size)(theme), [size]);\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles}>\n      <img\n        src={dsApi?.meta.info.logos.small || 'public/img/icn-datasource.svg'}\n        alt={dsApi?.type || t('explore.rich-history-card.datasource-not-exist', 'Data source does not exist anymore')}\n        aria-label={t('explore.rich-history-card.datasource-icon-label', 'Data source icon')}\n      />\n      <div aria-label={t('explore.rich-history-card.datasource-name-label', 'Data source name')}>\n        {dsApi?.name || t('explore.rich-history-card.datasource-not-exist', 'Data source does not exist anymore')}\n      </div>\n    </div>\n  );\n}\n\nexport default connector(RichHistoryCard);\n","import { css } from '@emotion/css';\nimport { useEffect } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { DataSourceApi, GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { config, getDataSourceSrv } from '@grafana/runtime';\nimport { Button, FilterInput, MultiSelect, RangeSlider, Select, useStyles2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport {\n  mapNumbertoTimeInSlider,\n  mapQueriesToHeadings,\n  SortOrder,\n  RichHistorySearchFilters,\n  RichHistorySettings,\n} from 'app/core/utils/richHistory';\nimport { RichHistoryQuery } from 'app/types/explore';\n\nimport { getSortOrderOptions } from './RichHistory';\nimport RichHistoryCard from './RichHistoryCard';\n\nexport interface RichHistoryQueriesTabProps {\n  queries: RichHistoryQuery[];\n  totalQueries: number;\n  loading: boolean;\n  updateFilters: (filtersToUpdate?: Partial<RichHistorySearchFilters>) => void;\n  clearRichHistoryResults: () => void;\n  loadMoreRichHistory: () => void;\n  richHistorySettings: RichHistorySettings;\n  richHistorySearchFilters?: RichHistorySearchFilters;\n  activeDatasources: string[];\n  listOfDatasources: Array<{ name: string; uid: string }>;\n  height: number;\n}\n\nconst getStyles = (theme: GrafanaTheme2, height: number) => {\n  return {\n    container: css({\n      display: 'flex',\n    }),\n    labelSlider: css({\n      fontSize: theme.typography.bodySmall.fontSize,\n      '&:last-of-type': {\n        marginTop: theme.spacing(3),\n      },\n      '&:first-of-type': {\n        fontWeight: theme.typography.fontWeightMedium,\n        marginBottom: theme.spacing(2),\n      },\n    }),\n    containerContent: css({\n      /* 134px is based on the width of the Query history tabs bar, so the content is aligned to right side of the tab */\n      width: 'calc(100% - 134px)',\n    }),\n    containerSlider: css({\n      width: '129px',\n      marginRight: theme.spacing(1),\n    }),\n    fixedSlider: css({\n      position: 'fixed',\n    }),\n    slider: css({\n      bottom: '10px',\n      height: `${height - 180}px`,\n      width: '129px',\n      padding: theme.spacing(1, 0),\n    }),\n    selectors: css({\n      display: 'flex',\n      justifyContent: 'space-between',\n      flexWrap: 'wrap',\n    }),\n    filterInput: css({\n      marginBottom: theme.spacing(1),\n    }),\n    multiselect: css({\n      width: '100%',\n      marginBottom: theme.spacing(1),\n    }),\n    sort: css({\n      width: '170px',\n    }),\n    sessionName: css({\n      display: 'flex',\n      alignItems: 'flex-start',\n      justifyContent: 'flex-start',\n      marginTop: theme.spacing(3),\n      h4: {\n        margin: '0 10px 0 0',\n      },\n    }),\n    heading: css({\n      fontSize: theme.typography.h4.fontSize,\n      margin: theme.spacing(2, 0.25, 1, 0.25),\n    }),\n    footer: css({\n      height: '60px',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      fontWeight: theme.typography.fontWeightLight,\n      fontSize: theme.typography.bodySmall.fontSize,\n      a: {\n        fontWeight: theme.typography.fontWeightMedium,\n        marginLeft: theme.spacing(0.25),\n      },\n    }),\n    queries: css({\n      fontSize: theme.typography.bodySmall.fontSize,\n      fontWeight: theme.typography.fontWeightRegular,\n      marginLeft: theme.spacing(0.5),\n    }),\n  };\n};\n\nexport function RichHistoryQueriesTab(props: RichHistoryQueriesTabProps) {\n  const {\n    queries,\n    totalQueries,\n    loading,\n    richHistorySearchFilters,\n    updateFilters,\n    clearRichHistoryResults,\n    loadMoreRichHistory,\n    richHistorySettings,\n    height,\n    listOfDatasources,\n    activeDatasources,\n  } = props;\n\n  const styles = useStyles2(getStyles, height);\n\n  // on mount, set filter to either active datasource or all datasources\n  useEffect(() => {\n    const datasourceFilters =\n      !richHistorySettings.activeDatasourcesOnly && richHistorySettings.lastUsedDatasourceFilters\n        ? richHistorySettings.lastUsedDatasourceFilters\n        : activeDatasources;\n    const filters: RichHistorySearchFilters = {\n      search: '',\n      sortOrder: SortOrder.Descending,\n      datasourceFilters,\n      from: 0,\n      to: richHistorySettings.retentionPeriod,\n      starred: false,\n    };\n    updateFilters(filters);\n\n    return () => {\n      clearRichHistoryResults();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const { value: datasourceFilterApis, loading: loadingDs } = useAsync(async () => {\n    const datasourcesToGet = listOfDatasources.map((ds) => ds.uid);\n    const dsGetProm = datasourcesToGet.map(async (dsf) => {\n      try {\n        // this get works off datasource names\n        return getDataSourceSrv().get(dsf);\n      } catch (e) {\n        return Promise.resolve();\n      }\n    });\n\n    if (dsGetProm !== undefined) {\n      const enhancedDatasourceData = (await Promise.all(dsGetProm)).filter((dsi): dsi is DataSourceApi => !!dsi);\n      return enhancedDatasourceData;\n    } else {\n      return [];\n    }\n  }, [richHistorySearchFilters?.datasourceFilters]);\n\n  if (!richHistorySearchFilters) {\n    return (\n      <span>\n        <Trans i18nKey=\"explore.rich-history-queries-tab.loading\">Loading...</Trans>\n      </span>\n    );\n  }\n\n  /* mappedQueriesToHeadings is an object where query headings (stringified dates/data sources)\n   * are keys and arrays with queries that belong to that headings are values.\n   */\n  const mappedQueriesToHeadings = mapQueriesToHeadings(queries, richHistorySearchFilters.sortOrder);\n  const sortOrderOptions = getSortOrderOptions();\n  const partialResults = queries.length && queries.length !== totalQueries;\n  const timeFilter = [\n    richHistorySearchFilters.from || 0,\n    richHistorySearchFilters.to || richHistorySettings.retentionPeriod,\n  ];\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.containerSlider}>\n        <div className={styles.fixedSlider}>\n          <div className={styles.labelSlider}>\n            <Trans i18nKey=\"explore.rich-history-queries-tab.filter-history\">Filter history</Trans>\n          </div>\n          <div className={styles.labelSlider}>{mapNumbertoTimeInSlider(timeFilter[0])}</div>\n          <div className={styles.slider}>\n            <RangeSlider\n              tooltipAlwaysVisible={false}\n              min={0}\n              max={richHistorySettings.retentionPeriod}\n              value={timeFilter}\n              orientation=\"vertical\"\n              formatTooltipResult={mapNumbertoTimeInSlider}\n              reverse={true}\n              onAfterChange={(value) => {\n                updateFilters({ from: value![0], to: value![1] });\n              }}\n            />\n          </div>\n          <div className={styles.labelSlider}>{mapNumbertoTimeInSlider(timeFilter[1])}</div>\n        </div>\n      </div>\n\n      <div className={styles.containerContent} data-testid=\"query-history-queries-tab\">\n        <div className={styles.selectors}>\n          {!richHistorySettings.activeDatasourcesOnly && (\n            <MultiSelect\n              className={styles.multiselect}\n              options={listOfDatasources.map((ds) => {\n                return { value: ds.name, label: ds.name };\n              })}\n              value={richHistorySearchFilters.datasourceFilters}\n              placeholder={t(\n                'explore.rich-history-queries-tab.filter-placeholder',\n                'Filter queries for data sources(s)'\n              )}\n              aria-label={t('explore.rich-history-queries-tab.filter-aria-label', 'Filter queries for data sources(s)')}\n              onChange={(options: SelectableValue[]) => {\n                updateFilters({ datasourceFilters: options.map((option) => option.value) });\n              }}\n            />\n          )}\n          <div className={styles.filterInput}>\n            <FilterInput\n              escapeRegex={false}\n              placeholder={t('explore.rich-history-queries-tab.search-placeholder', 'Search queries')}\n              value={richHistorySearchFilters.search}\n              onChange={(search: string) => updateFilters({ search })}\n            />\n          </div>\n          <div\n            aria-label={t('explore.rich-history-queries-tab.sort-aria-label', 'Sort queries')}\n            className={styles.sort}\n          >\n            <Select\n              value={sortOrderOptions.filter((order) => order.value === richHistorySearchFilters.sortOrder)}\n              options={sortOrderOptions}\n              placeholder={t('explore.rich-history-queries-tab.sort-placeholder', 'Sort queries by')}\n              onChange={(e: SelectableValue<SortOrder>) => updateFilters({ sortOrder: e.value })}\n            />\n          </div>\n        </div>\n\n        {(loading || loadingDs) && (\n          <span>\n            <Trans i18nKey=\"explore.rich-history-queries-tab.loading-results\">Loading results...</Trans>\n          </span>\n        )}\n\n        {!(loading || loadingDs) &&\n          Object.keys(mappedQueriesToHeadings).map((heading) => {\n            return (\n              <div key={heading}>\n                <div className={styles.heading}>\n                  {heading}{' '}\n                  <span className={styles.queries}>\n                    {partialResults ? (\n                      <Trans\n                        i18nKey=\"explore.rich-history-queries-tab.displaying-partial-queries\"\n                        defaults=\"Displaying {{ count }} queries\"\n                        values={{ count: mappedQueriesToHeadings[heading].length }}\n                      />\n                    ) : (\n                      <Trans\n                        i18nKey=\"explore.rich-history-queries-tab.displaying-queries\"\n                        defaults=\"{{ count }} queries\"\n                        values={{ count: mappedQueriesToHeadings[heading].length }}\n                      />\n                    )}\n                  </span>\n                </div>\n                {mappedQueriesToHeadings[heading].map((q) => {\n                  return <RichHistoryCard datasourceInstances={datasourceFilterApis} queryHistoryItem={q} key={q.id} />;\n                })}\n              </div>\n            );\n          })}\n        {partialResults ? (\n          <div>\n            <Trans\n              i18nKey=\"explore.rich-history-queries-tab.showing-queries\"\n              defaults=\"Showing {{ shown }} of {{ total }} <0>Load more</0>\"\n              values={{ shown: queries.length, total: totalQueries }}\n              components={[\n                <Button onClick={loadMoreRichHistory} key=\"loadMoreButton\">\n                  Load more\n                </Button>,\n              ]}\n            />\n          </div>\n        ) : null}\n        <div className={styles.footer}>\n          {!config.queryHistoryEnabled\n            ? t(\n                'explore.rich-history-queries-tab.history-local',\n                'The history is local to your browser and is not shared with others.'\n              )\n            : ''}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { getAppEvents } from '@grafana/runtime';\nimport { useStyles2, Select, Button, Field, InlineField, InlineSwitch, Alert } from '@grafana/ui';\nimport { notifyApp } from 'app/core/actions';\nimport { createSuccessNotification } from 'app/core/copy/appNotification';\nimport { MAX_HISTORY_ITEMS } from 'app/core/history/RichHistoryLocalStorage';\nimport { Trans, t } from 'app/core/internationalization';\nimport { dispatch } from 'app/store/store';\n\nimport { supportedFeatures } from '../../../core/history/richHistoryStorageProvider';\nimport { ShowConfirmModalEvent } from '../../../types/events';\n\nexport interface RichHistorySettingsProps {\n  retentionPeriod: number;\n  starredTabAsFirstTab: boolean;\n  activeDatasourcesOnly: boolean;\n  onChangeRetentionPeriod: (option: SelectableValue<number>) => void;\n  toggleStarredTabAsFirstTab: () => void;\n  toggleActiveDatasourcesOnly: () => void;\n  deleteRichHistory: () => void;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      fontSize: theme.typography.bodySmall.fontSize,\n    }),\n    spaceBetween: css({\n      marginBottom: theme.spacing(3),\n    }),\n    input: css({\n      maxWidth: '200px',\n    }),\n    bold: css({\n      fontWeight: theme.typography.fontWeightBold,\n    }),\n    bottomMargin: css({\n      marginBottom: theme.spacing(1),\n    }),\n  };\n};\n\nconst retentionPeriodOptions = [\n  { value: 2, label: t('explore.rich-history-settings-tab.retention-period.2-days', '2 days') },\n  { value: 5, label: t('explore.rich-history-settings-tab.retention-period.5-days', '5 days') },\n  { value: 7, label: t('explore.rich-history-settings-tab.retention-period.1-week', '1 week') },\n  { value: 14, label: t('explore.rich-history-settings-tab.retention-period.2-weeks', '2 weeks') },\n];\n\nexport function RichHistorySettingsTab(props: RichHistorySettingsProps) {\n  const {\n    retentionPeriod,\n    starredTabAsFirstTab,\n    activeDatasourcesOnly,\n    onChangeRetentionPeriod,\n    toggleStarredTabAsFirstTab,\n    toggleActiveDatasourcesOnly,\n    deleteRichHistory,\n  } = props;\n  const styles = useStyles2(getStyles);\n  const selectedOption = retentionPeriodOptions.find((v) => v.value === retentionPeriod);\n\n  const onDelete = () => {\n    getAppEvents().publish(\n      new ShowConfirmModalEvent({\n        title: t('explore.rich-history-settings-tab.delete-title', 'Delete'),\n        text: t(\n          'explore.rich-history-settings-tab.delete-confirm-text',\n          'Are you sure you want to permanently delete your query history?'\n        ),\n        yesText: t('explore.rich-history-settings-tab.delete-confirm', 'Delete'),\n        icon: 'trash-alt',\n        onConfirm: () => {\n          deleteRichHistory();\n          dispatch(\n            notifyApp(\n              createSuccessNotification(\n                t('explore.rich-history-settings-tab.query-history-deleted', 'Query history deleted')\n              )\n            )\n          );\n        },\n      })\n    );\n  };\n\n  return (\n    <div className={styles.container}>\n      {supportedFeatures().changeRetention ? (\n        <Field\n          label={t('explore.rich-history-settings-tab.history-time-span', 'History time span')}\n          description={t(\n            'explore.rich-history-settings-tab.history-time-span-description',\n            'Select the period of time for which Grafana will save your query history. Up to {{MAX_HISTORY_ITEMS}} entries will be stored.',\n            { MAX_HISTORY_ITEMS }\n          )}\n        >\n          <div className={styles.input}>\n            <Select value={selectedOption} options={retentionPeriodOptions} onChange={onChangeRetentionPeriod}></Select>\n          </div>\n        </Field>\n      ) : (\n        <Alert severity=\"info\" title={t('explore.rich-history-settings-tab.history-time-span', 'History time span')}>\n          {t(\n            'explore.rich-history-settings-tab.alert-info',\n            \"Grafana will keep entries up to {{optionLabel}}.Starred entries won't be deleted.\",\n            {\n              optionLabel: selectedOption?.label,\n            }\n          )}\n        </Alert>\n      )}\n      <InlineField\n        label={t(\n          'explore.rich-history-settings-tab.change-default-tab',\n          'Change the default active tab from “Query history” to “Starred”'\n        )}\n        className={styles.spaceBetween}\n      >\n        <InlineSwitch\n          id=\"explore-query-history-settings-default-active-tab\"\n          value={starredTabAsFirstTab}\n          onChange={toggleStarredTabAsFirstTab}\n        />\n      </InlineField>\n      {supportedFeatures().onlyActiveDataSource && (\n        <InlineField\n          label={t(\n            'explore.rich-history-settings-tab.only-show-active-datasource',\n            'Only show queries for data source currently active in Explore'\n          )}\n          className={styles.spaceBetween}\n        >\n          <InlineSwitch\n            id=\"explore-query-history-settings-data-source-behavior\"\n            value={activeDatasourcesOnly}\n            onChange={toggleActiveDatasourcesOnly}\n          />\n        </InlineField>\n      )}\n      {supportedFeatures().clearHistory && (\n        <div>\n          <div className={styles.bold}>\n            <Trans i18nKey=\"explore.rich-history-settings-tab.clear-query-history\">Clear query history</Trans>\n          </div>\n          <div className={styles.bottomMargin}>\n            <Trans i18nKey=\"explore.rich-history-settings-tab.clear-history-info\">\n              Delete all of your query history, permanently.\n            </Trans>\n          </div>\n          <Button variant=\"destructive\" onClick={onDelete}>\n            <Trans i18nKey=\"explore.rich-history-settings-tab.clear-query-history-button\">Clear query history</Trans>\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}\n","import { css } from '@emotion/css';\nimport { useEffect } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { DataSourceApi, GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { config, getDataSourceSrv } from '@grafana/runtime';\nimport { useStyles2, Select, MultiSelect, FilterInput, Button } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport {\n  createDatasourcesList,\n  SortOrder,\n  RichHistorySearchFilters,\n  RichHistorySettings,\n} from 'app/core/utils/richHistory';\nimport { useSelector } from 'app/types';\nimport { RichHistoryQuery } from 'app/types/explore';\n\nimport { selectExploreDSMaps } from '../state/selectors';\n\nimport { getSortOrderOptions } from './RichHistory';\nimport RichHistoryCard from './RichHistoryCard';\n\nexport interface RichHistoryStarredTabProps {\n  queries: RichHistoryQuery[];\n  totalQueries: number;\n  loading: boolean;\n  updateFilters: (filtersToUpdate: Partial<RichHistorySearchFilters>) => void;\n  clearRichHistoryResults: () => void;\n  loadMoreRichHistory: () => void;\n  richHistorySearchFilters?: RichHistorySearchFilters;\n  richHistorySettings: RichHistorySettings;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      display: 'flex',\n    }),\n    containerContent: css({\n      width: '100%',\n    }),\n    selectors: css({\n      display: 'flex',\n      justifyContent: 'space-between',\n      flexWrap: 'wrap',\n    }),\n    multiselect: css({\n      width: '100%',\n      marginBottom: theme.spacing(1),\n    }),\n    filterInput: css({\n      marginBottom: theme.spacing(1),\n    }),\n    sort: css({\n      width: '170px',\n    }),\n    footer: css({\n      height: '60px',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center',\n      fontWeight: theme.typography.fontWeightLight,\n      fontSize: theme.typography.bodySmall.fontSize,\n      a: {\n        fontWeight: theme.typography.fontWeightMedium,\n        marginLeft: theme.spacing(0.25),\n      },\n    }),\n  };\n};\n\nexport function RichHistoryStarredTab(props: RichHistoryStarredTabProps) {\n  const {\n    updateFilters,\n    clearRichHistoryResults,\n    loadMoreRichHistory,\n    richHistorySettings,\n    queries,\n    totalQueries,\n    loading,\n    richHistorySearchFilters,\n  } = props;\n\n  const styles = useStyles2(getStyles);\n  const exploreActiveDS = useSelector(selectExploreDSMaps);\n\n  const listOfDatasources = createDatasourcesList();\n\n  useEffect(() => {\n    const datasourceFilters =\n      richHistorySettings.activeDatasourcesOnly && richHistorySettings.lastUsedDatasourceFilters\n        ? richHistorySettings.lastUsedDatasourceFilters\n        : exploreActiveDS.dsToExplore\n            .map((eDs) => listOfDatasources.find((ds) => ds.uid === eDs.datasource?.uid)?.name)\n            .filter((name): name is string => !!name);\n    const filters: RichHistorySearchFilters = {\n      search: '',\n      sortOrder: SortOrder.Descending,\n      datasourceFilters,\n      from: 0,\n      to: richHistorySettings.retentionPeriod,\n      starred: true,\n    };\n    updateFilters(filters);\n    return () => {\n      clearRichHistoryResults();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const { value: datasourceFilterApis, loading: loadingDs } = useAsync(async () => {\n    const datasourcesToGet =\n      richHistorySearchFilters?.datasourceFilters && richHistorySearchFilters?.datasourceFilters.length > 0\n        ? richHistorySearchFilters?.datasourceFilters\n        : listOfDatasources.map((ds) => ds.uid);\n    const dsGetProm = await datasourcesToGet.map(async (dsf) => {\n      try {\n        // this get works off datasource names\n        return getDataSourceSrv().get(dsf);\n      } catch (e) {\n        return Promise.resolve();\n      }\n    });\n\n    if (dsGetProm !== undefined) {\n      const enhancedDatasourceData = (await Promise.all(dsGetProm)).filter((dsi): dsi is DataSourceApi => !!dsi);\n      //setDatasourceFilterApiList(enhancedDatasourceData)\n      return enhancedDatasourceData;\n    } else {\n      return [];\n    }\n  }, [richHistorySearchFilters?.datasourceFilters]);\n\n  if (!richHistorySearchFilters) {\n    return (\n      <span>\n        <Trans i18nKey=\"explore.rich-history-starred-tab.loading\">Loading...</Trans>;\n      </span>\n    );\n  }\n\n  const sortOrderOptions = getSortOrderOptions();\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.containerContent}>\n        <div className={styles.selectors}>\n          {!richHistorySettings.activeDatasourcesOnly && (\n            <MultiSelect\n              className={styles.multiselect}\n              options={listOfDatasources.map((ds) => {\n                return { value: ds.name, label: ds.name };\n              })}\n              value={richHistorySearchFilters.datasourceFilters}\n              placeholder={t(\n                'explore.rich-history-starred-tab.filter-queries-placeholder',\n                'Filter queries for data sources(s)'\n              )}\n              aria-label={t(\n                'explore.rich-history-starred-tab.filter-queries-aria-label',\n                'Filter queries for data sources(s)'\n              )}\n              onChange={(options: SelectableValue[]) => {\n                updateFilters({ datasourceFilters: options.map((option) => option.value) });\n              }}\n            />\n          )}\n          <div className={styles.filterInput}>\n            <FilterInput\n              escapeRegex={false}\n              placeholder={t('explore.rich-history-starred-tab.search-queries-placeholder', 'Search queries')}\n              value={richHistorySearchFilters.search}\n              onChange={(search: string) => updateFilters({ search })}\n            />\n          </div>\n          <div\n            aria-label={t('explore.rich-history-starred-tab.sort-queries-aria-label', 'Sort queries')}\n            className={styles.sort}\n          >\n            <Select\n              value={sortOrderOptions.filter((order) => order.value === richHistorySearchFilters.sortOrder)}\n              options={sortOrderOptions}\n              placeholder={t('explore.rich-history-starred-tab.sort-queries-placeholder', 'Sort queries by')}\n              onChange={(e: SelectableValue<SortOrder>) => updateFilters({ sortOrder: e.value })}\n            />\n          </div>\n        </div>\n        {loading && loadingDs && (\n          <span>\n            <Trans i18nKey=\"explore.rich-history-starred-tab.loading-results\">Loading results...</Trans>\n          </span>\n        )}\n        {!(loading && loadingDs) &&\n          queries.map((q) => {\n            return <RichHistoryCard queryHistoryItem={q} key={q.id} datasourceInstances={datasourceFilterApis} />;\n          })}\n        {queries.length && queries.length !== totalQueries ? (\n          <div>\n            <Trans\n              i18nKey=\"explore.rich-history-starred-tab.showing-queries\"\n              defaults=\"Showing {{ shown }} of {{ total }} <0>Load more</0>\"\n              values={{ shown: queries.length, total: totalQueries }}\n              components={[\n                <Button onClick={loadMoreRichHistory} key=\"loadMoreButton\">\n                  Load more\n                </Button>,\n              ]}\n            />\n          </div>\n        ) : null}\n        <div className={styles.footer}>\n          {!config.queryHistoryEnabled\n            ? t(\n                'explore.rich-history-starred-tab.local-history-message',\n                'The history is local to your browser and is not shared with others.'\n              )\n            : ''}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { debounce } from 'lodash';\nimport { useState, useEffect } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { TabbedContainer, TabConfig } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\nimport {\n  SortOrder,\n  RichHistorySearchFilters,\n  RichHistorySettings,\n  createDatasourcesList,\n} from 'app/core/utils/richHistory';\nimport { useSelector } from 'app/types';\nimport { RichHistoryQuery } from 'app/types/explore';\n\nimport { supportedFeatures } from '../../../core/history/richHistoryStorageProvider';\nimport { Tabs } from '../QueriesDrawer/QueriesDrawerContext';\nimport { i18n } from '../QueriesDrawer/utils';\nimport { selectExploreDSMaps } from '../state/selectors';\n\nimport { RichHistoryQueriesTab } from './RichHistoryQueriesTab';\nimport { RichHistorySettingsTab } from './RichHistorySettingsTab';\nimport { RichHistoryStarredTab } from './RichHistoryStarredTab';\n\nexport const getSortOrderOptions = () =>\n  [\n    { label: t('explore.rich-history.newest-first', 'Newest first'), value: SortOrder.Descending },\n    { label: t('explore.rich-history.oldest-first', 'Oldest first'), value: SortOrder.Ascending },\n    { label: t('explore.rich-history.datasource-a-z', 'Data source A-Z'), value: SortOrder.DatasourceAZ },\n    { label: t('explore.rich-history.datasource-z-a', 'Data source Z-A'), value: SortOrder.DatasourceZA },\n  ].filter((option) => supportedFeatures().availableFilters.includes(option.value));\n\nexport interface RichHistoryProps {\n  richHistory: RichHistoryQuery[];\n  richHistoryTotal?: number;\n  richHistorySettings: RichHistorySettings;\n  richHistorySearchFilters?: RichHistorySearchFilters;\n  updateHistorySettings: (settings: RichHistorySettings) => void;\n  updateHistorySearchFilters: (filters: RichHistorySearchFilters) => void;\n  loadRichHistory: () => void;\n  loadMoreRichHistory: () => void;\n  clearRichHistoryResults: () => void;\n  deleteRichHistory: () => void;\n  firstTab: Tabs;\n  height: number;\n  onClose: () => void;\n}\n\nexport function RichHistory(props: RichHistoryProps) {\n  const { richHistory, richHistoryTotal, height, deleteRichHistory, onClose, firstTab } = props;\n\n  const [loading, setLoading] = useState(false);\n\n  const updateSettings = (settingsToUpdate: Partial<RichHistorySettings>) => {\n    props.updateHistorySettings({ ...props.richHistorySettings, ...settingsToUpdate });\n  };\n\n  const updateFilters = (filtersToUpdate?: Partial<RichHistorySearchFilters>) => {\n    const filters = {\n      ...props.richHistorySearchFilters!,\n      ...filtersToUpdate,\n      page: 1, // always load fresh results when updating filters\n    };\n    props.updateHistorySearchFilters(filters);\n    loadRichHistory();\n  };\n\n  const loadRichHistory = debounce(() => {\n    props.loadRichHistory();\n    setLoading(true);\n  }, 300);\n\n  const onChangeRetentionPeriod = (retentionPeriod: SelectableValue<number>) => {\n    if (retentionPeriod.value !== undefined) {\n      updateSettings({ retentionPeriod: retentionPeriod.value });\n    }\n  };\n\n  const toggleStarredTabAsFirstTab = () =>\n    updateSettings({ starredTabAsFirstTab: !props.richHistorySettings.starredTabAsFirstTab });\n\n  const toggleActiveDatasourcesOnly = () =>\n    updateSettings({ activeDatasourcesOnly: !props.richHistorySettings.activeDatasourcesOnly });\n\n  useEffect(() => {\n    setLoading(false);\n  }, [richHistory]);\n\n  const exploreActiveDS = useSelector(selectExploreDSMaps);\n  const listOfDatasources = createDatasourcesList();\n  const activeDatasources = exploreActiveDS.dsToExplore\n    .map((eDs) => listOfDatasources.find((ds) => ds.uid === eDs.datasource?.uid)?.name)\n    .filter((name): name is string => !!name);\n\n  const QueriesTab: TabConfig = {\n    label: i18n.queryHistory,\n    value: Tabs.RichHistory,\n    content: (\n      <RichHistoryQueriesTab\n        queries={richHistory}\n        totalQueries={richHistoryTotal || 0}\n        loading={loading}\n        updateFilters={updateFilters}\n        clearRichHistoryResults={() => props.clearRichHistoryResults()}\n        loadMoreRichHistory={() => props.loadMoreRichHistory()}\n        richHistorySettings={props.richHistorySettings}\n        richHistorySearchFilters={props.richHistorySearchFilters}\n        height={height}\n        activeDatasources={activeDatasources}\n        listOfDatasources={listOfDatasources}\n      />\n    ),\n    icon: 'history',\n  };\n\n  const StarredTab: TabConfig = {\n    label: t('explore.rich-history.starred', 'Starred'),\n    value: Tabs.Starred,\n    content: (\n      <RichHistoryStarredTab\n        queries={richHistory}\n        totalQueries={richHistoryTotal || 0}\n        loading={loading}\n        updateFilters={updateFilters}\n        clearRichHistoryResults={() => props.clearRichHistoryResults()}\n        loadMoreRichHistory={() => props.loadMoreRichHistory()}\n        richHistorySettings={props.richHistorySettings}\n        richHistorySearchFilters={props.richHistorySearchFilters}\n      />\n    ),\n    icon: 'star',\n  };\n\n  const SettingsTab: TabConfig = {\n    label: t('explore.rich-history.settings', 'Settings'),\n    value: Tabs.Settings,\n    content: (\n      <RichHistorySettingsTab\n        retentionPeriod={props.richHistorySettings.retentionPeriod}\n        starredTabAsFirstTab={props.richHistorySettings.starredTabAsFirstTab}\n        activeDatasourcesOnly={props.richHistorySettings.activeDatasourcesOnly}\n        onChangeRetentionPeriod={onChangeRetentionPeriod}\n        toggleStarredTabAsFirstTab={toggleStarredTabAsFirstTab}\n        toggleActiveDatasourcesOnly={toggleActiveDatasourcesOnly}\n        deleteRichHistory={deleteRichHistory}\n      />\n    ),\n    icon: 'sliders-v-alt',\n  };\n\n  let tabs = [QueriesTab, StarredTab, SettingsTab];\n  return (\n    <TabbedContainer\n      tabs={tabs}\n      onClose={onClose}\n      defaultTab={firstTab}\n      closeIconTooltip={t('explore.rich-history.close-tooltip', 'Close query history')}\n      testId={selectors.pages.Explore.QueryHistory.container}\n    />\n  );\n}\n","// Libraries\nimport { useEffect, useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { config, reportInteraction } from '@grafana/runtime';\nimport { useTheme2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n// Types\nimport { StoreState } from 'app/types';\n\n// Components, enums\nimport { useQueriesDrawerContext } from '../QueriesDrawer/QueriesDrawerContext';\nimport {\n  deleteRichHistory,\n  initRichHistory,\n  loadRichHistory,\n  loadMoreRichHistory,\n  clearRichHistoryResults,\n  updateHistorySettings,\n  updateHistorySearchFilters,\n} from '../state/history';\n\nimport { RichHistory } from './RichHistory';\n\n//Actions\n\nfunction mapStateToProps(state: StoreState) {\n  const explore = state.explore;\n  const richHistorySearchFilters = explore.richHistorySearchFilters;\n  const { richHistorySettings, richHistory, richHistoryTotal } = explore;\n\n  return {\n    richHistory,\n    richHistoryTotal,\n    richHistorySettings,\n    richHistorySearchFilters,\n  };\n}\n\nconst mapDispatchToProps = {\n  initRichHistory,\n  loadRichHistory,\n  loadMoreRichHistory,\n  clearRichHistoryResults,\n  updateHistorySettings,\n  updateHistorySearchFilters,\n  deleteRichHistory,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ninterface OwnProps {\n  onClose: () => void;\n}\nexport type Props = ConnectedProps<typeof connector> & OwnProps;\n\nexport function RichHistoryContainer(props: Props) {\n  const theme = useTheme2();\n\n  const {\n    richHistory,\n    richHistoryTotal,\n    deleteRichHistory,\n    initRichHistory,\n    loadRichHistory,\n    loadMoreRichHistory,\n    clearRichHistoryResults,\n    richHistorySettings,\n    updateHistorySettings,\n    richHistorySearchFilters,\n    updateHistorySearchFilters,\n    onClose,\n  } = props;\n\n  useEffect(() => {\n    initRichHistory();\n  }, [initRichHistory]);\n\n  const { selectedTab } = useQueriesDrawerContext();\n  const [tracked, setTracked] = useState(false);\n\n  useEffect(() => {\n    if (!tracked) {\n      setTracked(true);\n      reportInteraction('grafana_explore_query_history_opened', {\n        queryHistoryEnabled: config.queryHistoryEnabled,\n        selectedTab,\n      });\n    }\n  }, [tracked, selectedTab]);\n\n  if (!richHistorySettings) {\n    return (\n      <span>\n        <Trans i18nKey=\"explore.rich-history-container.loading\">Loading...</Trans>\n      </span>\n    );\n  }\n\n  return (\n    <RichHistory\n      richHistory={richHistory}\n      richHistoryTotal={richHistoryTotal}\n      firstTab={selectedTab}\n      onClose={onClose}\n      height={theme.components.horizontalDrawer.defaultHeight}\n      deleteRichHistory={deleteRichHistory}\n      richHistorySettings={richHistorySettings}\n      richHistorySearchFilters={richHistorySearchFilters}\n      updateHistorySettings={updateHistorySettings}\n      updateHistorySearchFilters={updateHistorySearchFilters}\n      loadRichHistory={loadRichHistory}\n      loadMoreRichHistory={loadMoreRichHistory}\n      clearRichHistoryResults={clearRichHistoryResults}\n    />\n  );\n}\n\nexport default connector(RichHistoryContainer);\n","import { useEffect } from 'react';\n\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { Branding } from 'app/core/components/Branding/Branding';\nimport { useGrafana } from 'app/core/context/GrafanaContext';\nimport { useNavModel } from 'app/core/hooks/useNavModel';\nimport { ExploreQueryParams } from 'app/types';\n\nimport { isFulfilled, hasKey } from './utils';\n\nexport function useExplorePageTitle(params: ExploreQueryParams) {\n  const navModel = useNavModel('explore');\n  const { chrome } = useGrafana();\n\n  useEffect(() => {\n    if (!params.panes || typeof params.panes !== 'string') {\n      return;\n    }\n\n    let panesObject: unknown;\n    try {\n      panesObject = JSON.parse(params.panes);\n    } catch {\n      return;\n    }\n\n    if (typeof panesObject !== 'object' || panesObject === null) {\n      return;\n    }\n\n    Promise.allSettled(\n      Object.values(panesObject).map((pane) => {\n        if (\n          !pane ||\n          typeof pane !== 'object' ||\n          !hasKey('datasource', pane) ||\n          !pane.datasource ||\n          typeof pane.datasource !== 'string'\n        ) {\n          return Promise.reject();\n        }\n\n        return getDataSourceSrv().get(pane.datasource);\n      })\n    )\n      .then((results) => results.filter(isFulfilled).map((result) => result.value))\n      .then((datasources) => {\n        if (datasources.length === 0) {\n          global.document.title = `${navModel.main.text} - ${Branding.AppTitle}`;\n          chrome.update({\n            pageNav: undefined,\n          });\n          return;\n        }\n\n        const namesString = datasources.map((ds) => ds.name).join(' | ');\n        chrome.update({\n          pageNav: {\n            text: namesString,\n          },\n        });\n        global.document.title = `${navModel.main.text} - ${namesString} - ${Branding.AppTitle}`;\n      });\n  }, [params.panes, navModel.main.text, chrome]);\n}\n","import { useEffect } from 'react';\nimport { Unsubscribable } from 'rxjs';\n\nimport { getAppEvents } from '@grafana/runtime';\nimport { useGrafana } from 'app/core/context/GrafanaContext';\nimport { useDispatch } from 'app/types';\nimport { AbsoluteTimeEvent, CopyTimeEvent, PasteTimeEvent, ShiftTimeEvent, ZoomOutEvent } from 'app/types/events';\n\nimport {\n  copyTimeRangeToClipboard,\n  makeAbsoluteTime,\n  pasteTimeRangeFromClipboard,\n  shiftTime,\n  zoomOut,\n} from '../state/time';\n\nexport function useKeyboardShortcuts() {\n  const { keybindings } = useGrafana();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    keybindings.setupTimeRangeBindings(false);\n\n    const tearDown: Unsubscribable[] = [];\n\n    tearDown.push(\n      getAppEvents().subscribe(AbsoluteTimeEvent, () => {\n        dispatch(makeAbsoluteTime());\n      })\n    );\n\n    tearDown.push(\n      getAppEvents().subscribe(ShiftTimeEvent, (event) => {\n        dispatch(shiftTime(event.payload.direction));\n      })\n    );\n\n    tearDown.push(\n      getAppEvents().subscribe(ZoomOutEvent, (event) => {\n        dispatch(zoomOut(event.payload.scale));\n      })\n    );\n\n    tearDown.push(\n      getAppEvents().subscribe(CopyTimeEvent, () => {\n        dispatch(copyTimeRangeToClipboard());\n      })\n    );\n\n    tearDown.push(\n      getAppEvents().subscribe(PasteTimeEvent, () => {\n        dispatch(pasteTimeRangeFromClipboard());\n      })\n    );\n\n    return () => {\n      tearDown.forEach((u) => u.unsubscribe());\n    };\n  }, [dispatch, keybindings]);\n}\n","import { inRange } from 'lodash';\nimport { useState } from 'react';\nimport { useWindowSize } from 'react-use';\n\nimport { useDispatch, useSelector } from 'app/types';\n\nimport { splitSizeUpdateAction } from '../state/main';\nimport { isSplit, selectPanesEntries } from '../state/selectors';\n\nexport const useSplitSizeUpdater = (minWidth: number) => {\n  const dispatch = useDispatch();\n  const { width: windowWidth } = useWindowSize();\n  const panes = useSelector(selectPanesEntries);\n  const hasSplit = useSelector(isSplit);\n  const [rightPaneWidthRatio, setRightPaneWidthRatio] = useState(0.5);\n\n  const exploreState = useSelector((state) => state.explore);\n\n  const updateSplitSize = (size: number) => {\n    const evenSplitWidth = windowWidth / 2;\n    const areBothSimilar = inRange(size, evenSplitWidth - 100, evenSplitWidth + 100);\n    if (areBothSimilar) {\n      dispatch(splitSizeUpdateAction({ largerExploreId: undefined }));\n    } else {\n      dispatch(\n        splitSizeUpdateAction({\n          largerExploreId: size > evenSplitWidth ? panes[1][0] : panes[0][0],\n        })\n      );\n    }\n\n    setRightPaneWidthRatio(size / windowWidth);\n  };\n\n  let widthCalc = 0;\n  if (hasSplit) {\n    if (!exploreState.evenSplitPanes && exploreState.maxedExploreId) {\n      widthCalc = exploreState.maxedExploreId === panes[1][0] ? windowWidth - minWidth : minWidth;\n    } else if (exploreState.evenSplitPanes) {\n      widthCalc = Math.floor(windowWidth / 2);\n    } else if (rightPaneWidthRatio !== undefined) {\n      widthCalc = windowWidth * rightPaneWidthRatio;\n    }\n  }\n\n  return { updateSplitSize, widthCalc };\n};\n","import { useEffect } from 'react';\n\nimport { useGrafana } from 'app/core/context/GrafanaContext';\n\n/**\n * timeSrv (which is used internally) on init reads `from` and `to` param from the URL and updates itself\n * using those value regardless of what is passed to the init method.\n * The updated value is then used by Explore to get the range for each pane.\n * This means that if `from` and `to` parameters are present in the URL,\n * it would be impossible to change the time range in Explore.\n * We are only doing this on mount for 2 reasons:\n * 1: Doing it on update means we'll enter a render loop.\n * 2: when parsing time in Explore (before feeding it to timeSrv) we make sure `from` is before `to` inside\n *    each pane state in order to not trigger un URL update from timeSrv.\n */\nexport function useTimeSrvFix() {\n  const { location } = useGrafana();\n\n  useEffect(() => {\n    const searchParams = location.getSearchObject();\n    if (searchParams.from || searchParams.to) {\n      location.partial({ from: undefined, to: undefined }, true);\n    }\n  }, [location]);\n}\n","import { css, cx } from '@emotion/css';\nimport { useEffect } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { ErrorBoundaryAlert, useStyles2, useTheme2 } from '@grafana/ui';\nimport { SplitPaneWrapper } from 'app/core/components/SplitPaneWrapper/SplitPaneWrapper';\nimport { useGrafana } from 'app/core/context/GrafanaContext';\nimport { useNavModel } from 'app/core/hooks/useNavModel';\nimport { Trans } from 'app/core/internationalization';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { useSelector } from 'app/types';\nimport { ExploreQueryParams } from 'app/types/explore';\n\nimport { CorrelationEditorModeBar } from './CorrelationEditorModeBar';\nimport { ExploreActions } from './ExploreActions';\nimport { ExploreDrawer } from './ExploreDrawer';\nimport { ExplorePaneContainer } from './ExplorePaneContainer';\nimport { useQueriesDrawerContext } from './QueriesDrawer/QueriesDrawerContext';\nimport RichHistoryContainer from './RichHistory/RichHistoryContainer';\nimport { useExplorePageTitle } from './hooks/useExplorePageTitle';\nimport { useKeyboardShortcuts } from './hooks/useKeyboardShortcuts';\nimport { useSplitSizeUpdater } from './hooks/useSplitSizeUpdater';\nimport { useStateSync } from './hooks/useStateSync';\nimport { useTimeSrvFix } from './hooks/useTimeSrvFix';\nimport { isSplit, selectCorrelationDetails, selectPanesEntries } from './state/selectors';\n\nconst MIN_PANE_WIDTH = 200;\n\nexport default function ExplorePage(props: GrafanaRouteComponentProps<{}, ExploreQueryParams>) {\n  return <ExplorePageContent {...props} />;\n}\n\nfunction ExplorePageContent(props: GrafanaRouteComponentProps<{}, ExploreQueryParams>) {\n  const styles = useStyles2(getStyles);\n  const theme = useTheme2();\n  useTimeSrvFix();\n  useStateSync(props.queryParams);\n  // We want  to set the title according to the URL and not to the state because the URL itself may lag\n  // (due to how useStateSync above works) by a few milliseconds.\n  // When a URL is pushed to the history, the browser also saves the title of the page and\n  // if we were to update the URL on state change, the title would not match the URL.\n  // Ultimately the URL is the single source of truth from which state is derived, the page title is not different\n  useExplorePageTitle(props.queryParams);\n  const { chrome } = useGrafana();\n  const navModel = useNavModel('explore');\n  const { updateSplitSize, widthCalc } = useSplitSizeUpdater(MIN_PANE_WIDTH);\n\n  const panes = useSelector(selectPanesEntries);\n  const hasSplit = useSelector(isSplit);\n  const correlationDetails = useSelector(selectCorrelationDetails);\n  const { drawerOpened, setDrawerOpened } = useQueriesDrawerContext();\n  const showCorrelationEditorBar = config.featureToggles.correlations && (correlationDetails?.editorMode || false);\n\n  useEffect(() => {\n    //This is needed for breadcrumbs and topnav.\n    //We should probably abstract this out at some point\n    chrome.update({\n      sectionNav: navModel,\n    });\n  }, [chrome, navModel]);\n\n  useKeyboardShortcuts();\n\n  return (\n    <div\n      className={cx(styles.pageScrollbarWrapper, {\n        [styles.correlationsEditorIndicator]: showCorrelationEditorBar,\n      })}\n    >\n      <h1 className=\"sr-only\">\n        <Trans i18nKey=\"nav.explore.title\" />\n      </h1>\n      <ExploreActions />\n      {showCorrelationEditorBar && <CorrelationEditorModeBar panes={panes} />}\n      <SplitPaneWrapper\n        splitOrientation=\"vertical\"\n        paneSize={widthCalc}\n        minSize={MIN_PANE_WIDTH}\n        maxSize={MIN_PANE_WIDTH * -1}\n        primary=\"second\"\n        splitVisible={hasSplit}\n        parentStyle={showCorrelationEditorBar ? { height: `calc(100% - ${theme.spacing(6)}` } : {}} // button = 4, padding = 1 x 2\n        paneStyle={{ overflow: 'auto', display: 'flex', flexDirection: 'column' }}\n        onDragFinished={(size) => size && updateSplitSize(size)}\n      >\n        {panes.map(([exploreId]) => {\n          return (\n            <ErrorBoundaryAlert key={exploreId} style=\"page\">\n              <ExplorePaneContainer exploreId={exploreId} />\n            </ErrorBoundaryAlert>\n          );\n        })}\n      </SplitPaneWrapper>\n      {drawerOpened && (\n        <ExploreDrawer>\n          <RichHistoryContainer\n            onClose={() => {\n              setDrawerOpened(false);\n            }}\n          />\n        </ExploreDrawer>\n      )}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    pageScrollbarWrapper: css({\n      width: '100%',\n      flexGrow: 1,\n      minHeight: 0,\n      height: '100%',\n      position: 'relative',\n      overflow: 'hidden',\n    }),\n    correlationsEditorIndicator: css({\n      borderLeft: `4px solid ${theme.colors.primary.main}`,\n      borderRight: `4px solid ${theme.colors.primary.main}`,\n      borderBottom: `4px solid ${theme.colors.primary.main}`,\n      overflow: 'scroll',\n    }),\n  };\n};\n","import { omitBy, isNil, isNumber, defaultTo, groupBy } from 'lodash';\n\nimport {\n  PanelModel,\n  FieldMatcherID,\n  ConfigOverrideRule,\n  ThresholdsMode,\n  ThresholdsConfig,\n  FieldConfig,\n  DataFrame,\n  FieldType,\n} from '@grafana/data';\nimport { ReduceTransformerOptions } from '@grafana/data/internal';\n\nimport { Options } from './panelcfg.gen';\n\n/**\n * At 7.0, the `table` panel was swapped from an angular implementation to a react one.\n * The models do not match, so this process will delegate to the old implementation when\n * a saved table configuration exists.\n */\nexport const tableMigrationHandler = (panel: PanelModel<Options>): Partial<Options> => {\n  // Table was saved as an angular table, lets just swap to the 'table-old' panel\n  if (!panel.pluginVersion && 'columns' in panel) {\n    console.log('Was angular table', panel);\n  }\n\n  // Nothing changed\n  return panel.options;\n};\n\nconst transformsMap = {\n  timeseries_to_rows: 'seriesToRows',\n  timeseries_to_columns: 'seriesToColumns',\n  timeseries_aggregations: 'reduce',\n  table: 'merge',\n};\n\nconst columnsMap = {\n  avg: 'mean',\n  min: 'min',\n  max: 'max',\n  total: 'sum',\n  current: 'lastNotNull',\n  count: 'count',\n};\n\nconst colorModeMap = {\n  cell: 'color-background',\n  row: 'color-background',\n  value: 'color-text',\n};\n\ntype Transformations = keyof typeof transformsMap;\n\ntype Transformation = {\n  id: string;\n  options: ReduceTransformerOptions;\n};\n\ntype Columns = keyof typeof columnsMap;\n\ntype Column = {\n  value: Columns;\n  text: string;\n};\n\ntype ColorModes = keyof typeof colorModeMap;\n\nconst generateThresholds = (thresholds: string[], colors: string[]) => {\n  return [-Infinity, ...thresholds].map((threshold, idx) => ({\n    color: colors[idx],\n    value: isNumber(threshold) ? threshold : parseInt(threshold, 10),\n  }));\n};\n\nconst migrateTransformations = (\n  panel: PanelModel<Partial<Options>>,\n  oldOpts: { columns: any; transform: Transformations }\n) => {\n  const transformations: Transformation[] = panel.transformations ?? [];\n  if (Object.keys(transformsMap).includes(oldOpts.transform)) {\n    const opts: ReduceTransformerOptions = {\n      reducers: [],\n    };\n    if (oldOpts.transform === 'timeseries_aggregations') {\n      opts.includeTimeField = false;\n      opts.reducers = oldOpts.columns.map((column: Column) => columnsMap[column.value]);\n    }\n    transformations.push({\n      id: transformsMap[oldOpts.transform],\n      options: opts,\n    });\n  }\n  return transformations;\n};\n\ntype Style = {\n  unit: string;\n  type: string;\n  alias: string;\n  decimals: number;\n  colors: string[];\n  colorMode: ColorModes;\n  pattern: string;\n  thresholds: string[];\n  align?: string;\n  dateFormat: string;\n  link: boolean;\n  linkTargetBlank?: boolean;\n  linkTooltip?: string;\n  linkUrl?: string;\n};\n\nconst migrateTableStyleToOverride = (style: Style) => {\n  const fieldMatcherId = /^\\/.*\\/$/.test(style.pattern) ? FieldMatcherID.byRegexp : FieldMatcherID.byName;\n  const override: ConfigOverrideRule = {\n    matcher: {\n      id: fieldMatcherId,\n      options: style.pattern,\n    },\n    properties: [],\n  };\n\n  if (style.alias) {\n    override.properties.push({\n      id: 'displayName',\n      value: style.alias,\n    });\n  }\n\n  if (style.unit) {\n    override.properties.push({\n      id: 'unit',\n      value: style.unit,\n    });\n  }\n\n  if (style.decimals) {\n    override.properties.push({\n      id: 'decimals',\n      value: style.decimals,\n    });\n  }\n\n  if (style.type === 'date') {\n    override.properties.push({\n      id: 'unit',\n      value: `time: ${style.dateFormat}`,\n    });\n  }\n\n  if (style.type === 'hidden') {\n    override.properties.push({\n      id: 'custom.hidden',\n      value: true,\n    });\n  }\n\n  if (style.link) {\n    override.properties.push({\n      id: 'links',\n      value: [\n        {\n          title: defaultTo(style.linkTooltip, ''),\n          url: defaultTo(style.linkUrl, ''),\n          targetBlank: defaultTo(style.linkTargetBlank, false),\n        },\n      ],\n    });\n  }\n\n  if (style.colorMode) {\n    override.properties.push({\n      id: 'custom.cellOptions',\n      value: {\n        type: colorModeMap[style.colorMode],\n      },\n    });\n  }\n\n  if (style.align) {\n    override.properties.push({\n      id: 'custom.align',\n      value: style.align === 'auto' ? null : style.align,\n    });\n  }\n\n  if (style.thresholds?.length) {\n    override.properties.push({\n      id: 'thresholds',\n      value: {\n        mode: ThresholdsMode.Absolute,\n        steps: generateThresholds(style.thresholds, style.colors),\n      },\n    });\n  }\n\n  return override;\n};\n\nconst migrateDefaults = (prevDefaults: Style) => {\n  let defaults: FieldConfig = {\n    custom: {},\n  };\n  if (prevDefaults) {\n    defaults = omitBy(\n      {\n        unit: prevDefaults.unit,\n        decimals: prevDefaults.decimals,\n        displayName: prevDefaults.alias,\n        custom: {\n          align: prevDefaults.align === 'auto' ? null : prevDefaults.align,\n        },\n      },\n      isNil\n    );\n\n    if (prevDefaults.thresholds.length) {\n      const thresholds: ThresholdsConfig = {\n        mode: ThresholdsMode.Absolute,\n        steps: generateThresholds(prevDefaults.thresholds, prevDefaults.colors),\n      };\n      defaults.thresholds = thresholds;\n    }\n\n    if (prevDefaults.colorMode) {\n      defaults.custom.cellOptions = {\n        type: colorModeMap[prevDefaults.colorMode],\n      };\n    }\n  }\n  return defaults;\n};\n\n/**\n * This is called when the panel changes from another panel\n */\nexport const tablePanelChangedHandler = (\n  panel: PanelModel<Partial<Options>>,\n  prevPluginId: string,\n  prevOptions: any\n) => {\n  // Changing from angular table panel\n  if (prevPluginId === 'table-old' && prevOptions.angular) {\n    const oldOpts = prevOptions.angular;\n    const transformations = migrateTransformations(panel, oldOpts);\n    const prevDefaults = oldOpts.styles.find((style: any) => style.pattern === '/.*/');\n    const defaults = migrateDefaults(prevDefaults);\n    const overrides = oldOpts.styles.filter((style: any) => style.pattern !== '/.*/').map(migrateTableStyleToOverride);\n\n    panel.transformations = transformations;\n    panel.fieldConfig = {\n      defaults,\n      overrides,\n    };\n  }\n\n  return {};\n};\n\nconst getMainFrames = (frames: DataFrame[] | null) => {\n  return frames?.filter((df) => df.meta?.custom?.parentRowIndex === undefined) || [frames?.[0]];\n};\n\n/**\n * In 9.3 meta.custom.parentRowIndex was introduced to support sub-tables.\n * In 10.2 meta.custom.parentRowIndex was deprecated in favor of FieldType.nestedFrames, which supports multiple nested frames.\n * Migrate DataFrame[] from using meta.custom.parentRowIndex to using FieldType.nestedFrames\n */\nexport const migrateFromParentRowIndexToNestedFrames = (frames: DataFrame[] | null) => {\n  const migratedFrames: DataFrame[] = [];\n  const mainFrames = getMainFrames(frames).filter(\n    (frame: DataFrame | undefined): frame is DataFrame => !!frame && frame.length !== 0\n  );\n\n  mainFrames?.forEach((frame) => {\n    const subFrames = frames?.filter((df) => frame.refId === df.refId && df.meta?.custom?.parentRowIndex !== undefined);\n    const subFramesGrouped = groupBy(subFrames, (frame: DataFrame) => frame.meta?.custom?.parentRowIndex);\n    const subFramesByIndex = Object.keys(subFramesGrouped).map((key) => subFramesGrouped[key]);\n    const migratedFrame = { ...frame };\n\n    if (subFrames && subFrames.length > 0) {\n      migratedFrame.fields.push({\n        name: 'nested',\n        type: FieldType.nestedFrames,\n        config: {},\n        values: subFramesByIndex,\n      });\n    }\n    migratedFrames.push(migratedFrame);\n  });\n\n  return migratedFrames;\n};\n\nexport const hasDeprecatedParentRowIndex = (frames: DataFrame[] | null) => {\n  return frames?.some((df) => df.meta?.custom?.parentRowIndex !== undefined);\n};\n","import { useEffect, useRef } from 'react';\nvar useInterval = function (callback, delay) {\n    var savedCallback = useRef(function () { });\n    useEffect(function () {\n        savedCallback.current = callback;\n    });\n    useEffect(function () {\n        if (delay !== null) {\n            var interval_1 = setInterval(function () { return savedCallback.current(); }, delay || 0);\n            return function () { return clearInterval(interval_1); };\n        }\n        return undefined;\n    }, [delay]);\n};\nexport default useInterval;\n"],"names":["assertIsQueryTypeError","errors","getSupportedTransTypeDetails","transType","getTransformOptions","transformationType","useBeforeUnload","enabled","message","handler","event","finalEnabled","CorrelationUnsavedChangesModal","onSave","onDiscard","onCancel","Modal","Button","CONSEQUENCES","showModalMessage","action","isActionLeft","dirtyCorrelation","dirtyQueryEditor","messageTemplate","actionStr","consequenceStr","CorrelationEditorModeBar","panes","dispatch","styles","getStyles","correlationDetails","isHelperShowing","saveMessage","setSaveMessage","correlationDirty","queryEditorDirty","modalMessage","exploreId","changeDatasourceUid","useUnmount","pane","resetEditor","closePane","changeDatasourcePostAction","datasourceUid","saveCorrelationPostAction","skipPostConfirmAction","Prompt","location","Stack","Tooltip","Icon","theme","contrastColor","lighterBackgroundColor","colorManipulator","darkerBackgroundColor","disabledColor","ExploreActions","actions","setActions","query","splitted","canWriteCorrelations","keys","exploreSection","actionsArr","hasMixed","config","ExploreDrawer","props","children","onResize","initialHeight","dragStyles","height","drawerSlide","useScroll","ref","_a","useRafState","state","setState","ContentOutlineContext","ContentOutlineContextProvider","refreshDependencies","outlineItems","setOutlineItems","parentlessItemsRef","register","outlineItem","id","prevItems","parentlessItems","item","sortElementsByDocumentPosition","siblingWithSameTitleFound","key","parentIndex","newItems","parent","siblingWithSameTitle","child","childrenUpdated","sortItems","unregister","updateOutlineItems","updateItem","properties","unregisterAllChildren","parentIdGetter","childType","parentId","sortedItems","a","b","diff","skipSort","sortable","acc","useContentOutlineContext","ContentOutlineItemButton","contentOutlineExpanded","title","icon","tooltip","tooltipPlacement","className","indentStyle","collapsible","collapsed","isActive","extraHighlight","sectionId","toggleCollapsed","color","onRemove","rest","buttonStyles","textRef","isOverflowing","setIsOverflowing","body","OutlineIcon","scrollableChildren","shouldBeActive","activeSectionId","activeSectionChildId","sectionsExpanded","isAnActiveParent","isAnActiveChild","isCollapsed","containsScrollableChildren","anyChildActive","isChildActive","CONTENT_OUTLINE_LOCAL_STORAGE_KEYS","ContentOutline","scroller","panelId","toggleContentOutlineExpanded","useToggle","store","scrollerRef","verticalScroll","setActiveSectionId","setActiveSectionChildId","outlineItemsShouldIndent","outlineItemsHaveDeleteButton","setSectionsExpanded","scrollIntoView","customOffsetTop","scrollValue","el","handleItemClicked","activeParent","toggle","toggleSection","itemId","prev","activeItem","top","activeChild","offsetTop","childTop","isCollapsible","PanelContainer","ScrollContainer","i","e","expanded","ContentOutlineItem","customTopOffset","level","mergeSingleChild","type","onClick","LabelWithTooltip","label","tooltipText","Label","CorrelationTransformationAddModal","fieldList","transformationToEdit","exampleValue","setExampleValue","transformationVars","setTransformationVars","formFieldsVis","setFormFieldsVis","isExpValid","setIsExpValid","validToSave","setValidToSave","getValues","control","watch","exampleVal","transformationTypeDetails","subscription","formValues","expression","isExpressionValid","transKeys","Field","onChange","field","Select","value","entry","Input","CorrelationHelper","correlations","panesVals","defaultLabel","loadingLabel","useAsync","setValue","isLabelDescOpen","setIsLabelDescOpen","isTransformOpen","setIsTransformOpen","showTransformationAddModal","setShowTransformationAddModal","transformations","setTransformations","transformationIdxToEdit","setTransformationIdxToEdit","dirty","description","transVarRecords","transformation","editTransformations","Alert","Collapse","mapValue","detailsString","val","Card","IconButton","DeleteButton","_","idx","CustomContainer","width","timeZone","pluginId","frames","timeRange","splitOpenFn","eventBus","plugin","panelContext","useExploreDataLinkPostProcessor","PanelContext","PanelChrome","innerWidth","innerHeight","PanelRenderer","DrilldownAlertBox","isDsCompatibleWithDrilldown","dismissed","setDismissed","useLocalStorage","TimeSyncButton","isSynced","syncTimesTooltip","ToolbarButton","ExploreTimeControls","direction","range","onChangeTime","from","to","nextTimeRange","adjustedFrom","adjustedTo","fiscalYearStartMonth","syncedTimes","onChangeTimeSync","hideText","onChangeTimeZone","onChangeFiscalYearStartMonth","timeSyncButton","timePickerCommonProps","TimePickerWithHistory","LiveTailButton","transitionRef","start","pause","resume","isLive","isPaused","stop","buttonVariant","onClickMain","ButtonGroup","CSSTransition","defaultMode","ShortLinkButtonMenu","isOpen","setIsOpen","lastSelected","setLastSelected","onCopyLink","shorten","absTime","url","menuOptions","MenuActions","Menu","groupOption","MenuGroup","option","Dropdown","AddToDashboard","BasicExtensions","links","setSelectedExtension","setIsModalOpen","isModalOpen","noQueriesInPane","menu","ToolbarExtensionPointMenu","QuerylessAppsExtensions","link","QUERYLESS_APPS","ToolbarExtensionPoint","extensionsToShow","selectedExtension","context","useExtensionPointContext","usePluginLinks","selectExploreItem","querylessLinks","commonLinks","extension","ConfirmNavigationModal","isCorrelationsEditorMode","queries","queryResponse","isLeftPane","datasourceUids","uid","numUniqueIds","useLiveTailControls","RefreshPicker","clear","LiveTailControls","controls","ExploreToolbar","onContentOutlineToogle","isContentOutlineOpen","refreshInterval","datasourceInstance","loading","isLargerPane","showSmallTimePicker","showSmallDataSourcePicker","drawerOpened","setDrawerOpened","shouldRotateSplitIcon","refreshPickerLabel","onChangeDatasource","dsSettings","onRunQuery","timezone","onOpenSplitView","onCloseSplitView","onClickResize","fiscalyearStartMonth","onChangeRefreshInterval","navBarActions","SetInterval","AppChromeUpdate","PageToolbar","DataSourcePicker","c","interaction","name","FlameGraphExploreContainer","view","align","sort","INTERVAL","ElapsedTime","resetKey","humanize","elapsed","setElapsed","useInterval","Time","fade","tinycolor","LiveLogs","onPause","scrollTop","clientHeight","scrollHeight","rowsToRender","nextProps","onResume","onClear","logsRow","logsRowLocalTime","logsRowMessage","getLogRowStyles","row","LogMessageAnsi","element","LiveLogsWithTheme","LogsColumnSearch","LogsTableEmptyFields","LogsTableNavField","Checkbox","getLogsFieldsStyles","sortLabels","labels","la","lb","LogsTableActiveFields","reorderColumn","valueFilter","toggleColumn","labelKeys","labelName","onDragEnd","result","renderTitle","provided","index","snapshot","collator","LogsTableAvailableFields","LogsTableMultiSelect","uf","uFuzzy","fuzzySearch","haystack","dispatcher","idxs","info","order","haystackOrder","matchesSet","mark","part","matched","infoIdx","debouncedFuzzySearch","LogsTableWrap","logsFrames","updatePanelState","panelState","propsColumns","columnsWithMeta","setColumnsWithMeta","filteredColumnsWithMeta","setFilteredColumnsWithMeta","searchValue","setSearchValue","getLogsTableHeight","panelStateRefId","currentDataFrame","setCurrentDataFrame","f","getColumnsFromProps","fieldNames","previouslySelected","logsFrame","defaultColumns","newFrame","newFiltered","flag","numberOfLogLines","otherFields","labelCardinality","pendingLabelState","normalize","sidebarWidth","setSidebarWidth","tableWidth","columnFilterEvent","columnName","newState","priorActiveCount","column","searchFilterEvent","searchResultCount","clearSelection","isDefaultField","sourceIndex","destinationIndex","source","updateExploreState","newColumnsArray","pa","pb","newColumns","newPanelState","length","active","pendingFilteredLabelState","data","matches","newColumnsWithMeta","numberOfResults","match","search","needle","onSearchInputChange","onFrameSelectorChange","frame","getOnResize","newSidebarWidth","InlineField","LogsTable","total","ControlledLogsTable","loadMoreLogs","deduplicatedRows","splitOpen","onClickFilterLabel","onClickFilterOutLabel","datasourceType","logsTableFrames","visualisationType","sortOrder","EventBus","LogListControls","ControlledLogRows","dedupStrategy","hasUnescapedContent","showLabels","showTime","logsMeta","logOptionsStorageKey","logsSortOrder","prettifyLogMessage","onLogOptionsChange","wrapLogMessage","LogListContext","LogRowsComponent","app","filterLevels","forceEscape","prettifyJSON","showUniqueLabels","scrollElementRef","handleScrollToEvent","filteredLogs","log","InfiniteScroll","LogRows","scrollElement","contentOutlineTrackPinAdded","contentOutlineTrackPinRemoved","contentOutlineTrackPinLimitReached","contentOutlineTrackPinClicked","contentOutlineTrackUnpinClicked","contentOutlineTrackLevelFilter","LogsFeedback","feedbackUrl","MetaInfoItem","style","MetaInfoText","metaItems","LogsMetaRow","meta","dedupCount","displayedFields","clearDetectedFields","logRows","logsMetaItem","LogLabels","download","format","downloadMenu","commonLabelsProps","renderMetaItem","kind","logLabelsProps","LogsNavigationPages","pages","currentPageIndex","oldestLogsFirst","formatTime","time","createPageContent","page","Spinner","topContent","bottomContent","LogsNavigation","absoluteRange","scrollToTopLogs","scrollToBottomLogs","visibleRange","clearCache","addResultsToCache","setPages","expectedQueriesRef","expectedRangeRef","rangeSpanRef","onFirstPage","onLastPage","newPage","newPages","sortPages","changeTime","olderLogsButton","indexChange","newerLogsButton","onPageClick","pageNumber","onScrollToTopClick","onScrollToBottomClick","navContainerHeight","SHORT_ERROR_MESSAGE_LIMIT","SupplementaryResultError","dismissable","error","suggestedAction","onSuggestedAction","severity","showButton","dismiss","handleRemove","LogsVolumePanel","onUpdateTimeRange","onHiddenSeriesChanged","allLogsVolumeMaximum","toggleLegendRef","spacing","logsVolumeData","logsVolumeInfo","extraInfo","extraInfoComponent","ExploreGraph","isTimeoutErrorResponse","response","LogsVolumePanelList","onLoadLogsVolume","onClose","logVolumes","allLogsVolumeMaximumValue","allLogsVolumeMaximumRange","annotations","maximumValue","sorted","grouped","mergedData","maximumRange","numberOfLogVolumes","containsZoomed","zoomRatio","logsLevelZoomRatio","canShowPartialData","timeoutError","selectedTimeRange","dataRange","DEDUP_OPTIONS","getDefaultVisualisationType","PINNED_LOGS_LIMIT","PINNED_LOGS_TITLE","PINNED_LOGS_MESSAGE","PINNED_LOGS_PANELID","UnthemedLogs","logsVolumeEnabled","loadLogsVolumeData","scanning","scanRange","showContextToggle","getFieldLinks","logsQueries","getRowContext","getLogRowContextUi","getRowContextQuery","onPinLineCallback","setShowLabels","setShowTime","setWrapLogMessage","setPrettifyLogMessage","setDedupStrategy","hiddenLogLevels","setHiddenLogLevels","setLogsSortOrder","isFlipping","setIsFlipping","setDisplayedFields","contextOpen","setContextOpen","contextRow","setContextRow","pinLineButtonTooltipTitle","setPinLineButtonTooltipTitle","setVisualisationType","logsContainerRef","previousLoading","usePrevious","logsVolumeEventBus","flipOrderTimer","cancelFlippingTimer","topLogsRef","logLevelsRef","tableHeight","hasData","scanText","logsParent","pinnedLogs","outlines","getPinnedLogsCount","registerLogLevelsWithContentOutline","levelsArr","logVolumeDataFrames","logVolData","items","logLevelsArray","dataFrame","sortedLLArray","logLevels","allLevelsSelected","currentLevelSelected","hiddenLevel","logsPanelState","onLogRowHover","sortOrderChanged","newSortOrder","hasLokiQueries","newQueries","newDirection","onChangeLogsSortOrder","onChangeVisualisation","visualisation","payload","onChangeDedup","onChangeLabels","target","onChangeShowTime","onChangeWrapLogMessage","onChangePrettifyLogMessage","onToggleLogLevel","hiddenRawLevels","onToggleLogsVolumeCollapse","onClickScan","onClickStopScan","showField","updatedDisplayedFields","hideField","k","onCloseCallbackRef","onCloseContext","onOpenContext","onPermalinkClick","urlState","serializedState","baseUrl","onPinToContentOutlineClick","allowUnPin","alreadyPinned","pin","checkUnescapedContent","filterRows","dedupedRows","dedupRows","navigationRange","createNavigationRange","infiniteScrollAvailable","allLevels","appendsLevel","removesLevel","LogRowContextModal","options","RadioButtonGroup","InlineFieldRow","dedupType","LogList","Logs","r","sum","firstTimeStamp","lastTimeStamp","transitionDuration","transitionDelay","LogsCrossFadeTransition","visible","LogsContainer","updateTimeRange","origRow","ds","cacheFilters","runContextQuery","rowIndex","prevProps","dsInstances","refId","dsPromises","resolve","instances","q","loadingState","logsSeries","onStartScanning","onStopScanning","logsVolume","mapStateToProps","logsResult","clearedAtIndex","supplementaryQueries","mapDispatchToProps","LogsSamplePanel","setLogsSampleEnabled","onToggleLogsSampleCollapse","OpenInSplitViewButton","logSampleQueries","onSplitOpen","LogsSamplePanelContent","logs","NoData","css","getCardStyles","NoDataSourceCallToAction","cardStyles","canCreateDataSource","footer","ctaElement","CallToActionCard","UnconnectedNodeGraphContainer","dataFrames","withTraceView","getLinks","nodes","useCategorizeFrames","layoutAlgorithm","toggled","windowHeight","useWindowSize","containerRef","setTop","countWarning","NodeGraph","NodeGraphContainer","makeSelectors","exploreItemSelector","s","QueryRows","getQueries","getDatasourceInstanceSettings","getQueryResponse","getHistory","getEventBridge","history","eventBridge","onRunQueries","onUpdateDatasources","datasource","onAddQuery","onQueryCopied","onQueryReplacedFromLibrary","onQueryRemoved","onQueryToggled","queryStatus","QueryEditorRows","mobileWidthThreshold","numberOfColumnsBeforeExpandedViewIsDefault","tableResult","listRef","valueLabels","getRawPrometheusListItemsFromDataFrame","isExpandedView","setIsExpandedView","onContentClick","calculateInitialHeight","getListItemHeight","itemIndex","switchId","Switch","ItemLabels","filteredValueLabels","valueLabel","itemWithValue","RawListItem","rawPrometheusResult","rawPrometheusFrame","RawPrometheusContainer","resultsStyle","ALL_GRAPH_STYLE_OPTIONS","onCellFilterAdded","ariaLabel","dataLinkPostProcessor","renderTable","Table","FadeIn","defaultStyle","transitionStyles","Transition","ErrorContainer","queryError","showError","duration","ResponseErrorContainer","SecondaryActions","addQueryRowButtonDisabled","addQueryRowButtonHidden","onClickAddQueryRowButton","onClickQueryInspectorButton","onSelectQueryFromLibrary","queryInspectorButtonActive","exploreActiveDS","listOfDatasources","activeDatasources","eDs","queryLibraryEnabled","openQueryLibraryDrawer","MAX_NUMBER_OF_COLUMNS","loadingInState","TableContainer","rowCount","hasSubFrames","showAll","dataLimited","hidden","LimitedDataDisclaimer","TableContainerWithTheme","TraceViewContainer","traceProp","transform","TraceView","Explore","rawRange","filter","operator","queryKeys","modifier","modification","toggleableFilters","size","panelType","tracking","exploreContainerStyles","groupedByPlugin","graphResult","showFlameGraph","GraphContainer","logsContentOutlineWrapper","logsSample","setSupplementaryQueryEnabled","showTrace","series","showMetrics","showTable","showRawPrometheus","showLogs","showCustom","showNodeGraph","showLogsSample","correlationEditorDetails","correlationEditorHelperData","showQueryInspector","setShowQueryInspector","contentOutlineVisible","showPanels","richHistoryRowButtonHidden","showNoData","correlationsBox","changeDatasource","setQueries","newDatasourceRef","ErrorBoundary","explore","ExploreQueryInspector","isMixed","dataOptions","setDataOptions","statsTab","InspectStatsTab","jsonTab","InspectJSONTab","dataTab","InspectDataTab","queryTab","QueryInspector","tabs","errorTab","InspectErrorTab","TabbedContainer","containerStyles","ExplorePaneContainerUnconnected","useStopQueries","bus","ExplorePaneContainer","paneSelector","paneRef","i18n","ExploreRunQueryButton","rootDatasourceUid","disabled","openRunQueryButton","setOpenRunQueryButton","isPaneSplit","panesEntries","isDifferentDatasource","di","runQueryText","dsUid","runQuery","differentDataSource","runButton","isInvalid","buttonText","paneLabel","RichHistoryAddToLibrary","hasBeenSaved","setHasBeenSaved","openAddQueryModal","buttonLabel","rightColumnWidth","rightColumnContentWidth","cardColor","RichHistoryCard","queryHistoryItem","commentHistoryItem","starHistoryItem","deleteHistoryItem","datasourceInstances","activeUpdateComment","setActiveUpdateComment","comment","setComment","cardRootDatasource","onCopyQuery","datasources","queriesText","queryDS","onCreateShortLink","onDeleteQuery","performDelete","queryId","onStarQuery","toggleActiveUpdateComment","onUpdateComment","onCancelUpdateComment","onKeyDown","keyEvent","updateComment","TextArea","queryActionButtons","DatasourceInfo","queryDs","Query","getQueryStyles","showDsInfo","getDsInfoStyles","dsApi","RichHistoryQueriesTab","totalQueries","richHistorySearchFilters","updateFilters","clearRichHistoryResults","loadMoreRichHistory","richHistorySettings","datasourceFilters","filters","datasourceFilterApis","loadingDs","dsGetProm","dsf","dsi","mappedQueriesToHeadings","sortOrderOptions","getSortOrderOptions","partialResults","timeFilter","RangeSlider","FilterInput","heading","retentionPeriodOptions","RichHistorySettingsTab","retentionPeriod","starredTabAsFirstTab","activeDatasourcesOnly","onChangeRetentionPeriod","toggleStarredTabAsFirstTab","toggleActiveDatasourcesOnly","deleteRichHistory","selectedOption","v","onDelete","RichHistoryStarredTab","RichHistory","richHistory","richHistoryTotal","firstTab","setLoading","updateSettings","settingsToUpdate","filtersToUpdate","loadRichHistory","QueriesTab","StarredTab","SettingsTab","RichHistoryContainer","initRichHistory","updateHistorySettings","updateHistorySearchFilters","selectedTab","tracked","setTracked","useExplorePageTitle","params","navModel","useNavModel","chrome","panesObject","results","Branding","namesString","useKeyboardShortcuts","keybindings","tearDown","u","useSplitSizeUpdater","minWidth","windowWidth","hasSplit","rightPaneWidthRatio","setRightPaneWidthRatio","exploreState","updateSplitSize","evenSplitWidth","areBothSimilar","widthCalc","useTimeSrvFix","searchParams","MIN_PANE_WIDTH","ExplorePage","ExplorePageContent","useStateSync","showCorrelationEditorBar","SplitPaneWrapper","tableMigrationHandler","panel","transformsMap","columnsMap","colorModeMap","generateThresholds","thresholds","colors","threshold","migrateTransformations","oldOpts","opts","migrateTableStyleToOverride","override","migrateDefaults","prevDefaults","defaults","tablePanelChangedHandler","prevPluginId","prevOptions","overrides","getMainFrames","df","migrateFromParentRowIndexToNestedFrames","migratedFrames","subFrames","subFramesGrouped","subFramesByIndex","migratedFrame","hasDeprecatedParentRowIndex","callback","delay","savedCallback","interval_1"],"sourceRoot":""}