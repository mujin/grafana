{"version":3,"file":"histogramPanel.c36c9833cbb18e7dfc99.js","mappings":"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","sources":["webpack://grafana/./packages/grafana-ui/src/components/VizTooltip/VizTooltipWrapper.tsx","webpack://grafana/./public/app/plugins/panel/histogram/panelcfg.gen.ts","webpack://grafana/./public/app/plugins/panel/histogram/Histogram.tsx","webpack://grafana/./public/app/plugins/panel/histogram/HistogramTooltip.tsx","webpack://grafana/./public/app/plugins/panel/histogram/HistogramPanel.tsx","webpack://grafana/./public/app/plugins/panel/histogram/config.ts","webpack://grafana/./public/app/plugins/panel/histogram/migrations.ts","webpack://grafana/./public/app/plugins/panel/histogram/utils.ts","webpack://grafana/./public/app/plugins/panel/histogram/module.tsx","webpack://grafana/./public/app/plugins/panel/timeseries/utils.ts"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { HTMLAttributes } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { useStyles2 } from '../../themes';\n\nexport interface Props extends HTMLAttributes<HTMLDivElement> {\n  children?: React.ReactNode;\n}\n\nexport const VizTooltipWrapper = ({ children, className }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  return <div className={cx(styles.wrapper, className)}>{children}</div>;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    display: 'flex',\n    flexDirection: 'column',\n    fontSize: theme.typography.bodySmall.fontSize,\n  }),\n});\n","// Code generated - EDITING IS FUTILE. DO NOT EDIT.\n//\n// Generated by:\n//     public/app/plugins/gen.go\n// Using jennies:\n//     TSTypesJenny\n//     PluginTsTypesJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\nimport * as common from '@grafana/schema';\n\nexport interface Options extends common.OptionsWithLegend, common.OptionsWithTooltip {\n  /**\n   * Bucket count (approx)\n   */\n  bucketCount?: number;\n  /**\n   * Offset buckets by this amount\n   */\n  bucketOffset?: number;\n  /**\n   * Size of each bucket\n   */\n  bucketSize?: number;\n  /**\n   * Combines multiple series into a single histogram\n   */\n  combine?: boolean;\n}\n\nexport const defaultOptions: Partial<Options> = {\n  bucketCount: 30,\n  bucketOffset: 0,\n};\n\nexport interface FieldConfig extends common.AxisConfig, common.HideableFieldConfig, common.StackableFieldConfig {\n  /**\n   * Controls the fill opacity of the bars.\n   */\n  fillOpacity?: number;\n  /**\n   * Set the mode of the gradient fill. Fill gradient is based on the line color. To change the color, use the standard color scheme field option.\n   * Gradient appearance is influenced by the Fill opacity setting.\n   */\n  gradientMode?: common.GraphGradientMode;\n  /**\n   * Controls line width of the bars.\n   */\n  lineWidth?: number;\n}\n\nexport const defaultFieldConfig: Partial<FieldConfig> = {\n  fillOpacity: 80,\n  gradientMode: common.GraphGradientMode.None,\n  lineWidth: 1,\n};\n","import * as React from 'react';\nimport uPlot, { AlignedData } from 'uplot';\n\nimport {\n  DataFrame,\n  FieldType,\n  formattedValueToString,\n  getFieldColorModeForField,\n  getFieldSeriesColor,\n  GrafanaTheme2,\n  roundDecimals,\n  histogramBucketSizes,\n  histogramFrameBucketMaxFieldName,\n} from '@grafana/data';\nimport { VizLegendOptions, ScaleDistribution, AxisPlacement, ScaleDirection, ScaleOrientation } from '@grafana/schema';\nimport {\n  Themeable2,\n  UPlotConfigBuilder,\n  UPlotChart,\n  VizLayout,\n  PlotLegend,\n  measureText,\n  UPLOT_AXIS_FONT_SIZE,\n} from '@grafana/ui';\nimport { getStackingGroups, preparePlotData2 } from '@grafana/ui/internal';\n\nimport { defaultFieldConfig, FieldConfig, Options } from './panelcfg.gen';\n\nfunction incrRoundDn(num: number, incr: number) {\n  return Math.floor(num / incr) * incr;\n}\n\nfunction incrRoundUp(num: number, incr: number) {\n  return Math.ceil(num / incr) * incr;\n}\n\nexport interface HistogramProps extends Themeable2 {\n  options: Options; // used for diff\n  alignedFrame: DataFrame; // This could take HistogramFields\n  bucketCount?: number;\n  bucketSize: number;\n  width: number;\n  height: number;\n  structureRev?: number; // a number that will change when the frames[] structure changes\n  legend: VizLegendOptions;\n  rawSeries?: DataFrame[];\n  children?: (builder: UPlotConfigBuilder, frame: DataFrame, xMinOnlyFrame: DataFrame) => React.ReactNode;\n}\n\nexport function getBucketSize(frame: DataFrame) {\n  // assumes BucketMin is fields[0] and BucktMax is fields[1]\n  return frame.fields[0].type === FieldType.string\n    ? 1\n    : roundDecimals(frame.fields[1].values[0] - frame.fields[0].values[0], 9);\n}\n\nexport function getBucketSize1(frame: DataFrame) {\n  // assumes BucketMin is fields[0] and BucktMax is fields[1]\n  return frame.fields[0].type === FieldType.string\n    ? 1\n    : roundDecimals(frame.fields[1].values[1] - frame.fields[0].values[1], 9);\n}\n\nconst prepConfig = (frame: DataFrame, theme: GrafanaTheme2) => {\n  // todo: scan all values in BucketMin and BucketMax fields to assert if uniform bucketSize\n\n  // since this is x axis range, this should ideally come from xMin or xMax fields, not a count field\n  // though both methods are probably hacks, and we should just accept explicit opts into this prepConfig\n  let { min: xScaleMin, max: xScaleMax } = frame.fields[2].config;\n\n  let builder = new UPlotConfigBuilder();\n\n  let isOrdinalX = frame.fields[0].type === FieldType.string;\n\n  // assumes BucketMin is fields[0] and BucktMax is fields[1]\n  let bucketSize = getBucketSize(frame);\n  let bucketSize1 = getBucketSize1(frame);\n\n  let bucketFactor = bucketSize1 / bucketSize;\n\n  let useLogScale = bucketSize1 !== bucketSize; // (imperfect floats)\n\n  // splits shifter, to ensure splits always start at first bucket\n  let xSplits: uPlot.Axis.Splits = (u, axisIdx, scaleMin, scaleMax, foundIncr, foundSpace) => {\n    /** @ts-ignore */\n    let minSpace = u.axes[axisIdx]._space;\n    let bucketWidth = u.valToPos(u.data[0][0] + bucketSize, 'x') - u.valToPos(u.data[0][0], 'x');\n\n    let firstSplit = incrRoundDn(xScaleMin ?? u.data[0][0], bucketSize);\n    let lastSplit = incrRoundUp(xScaleMax ?? u.data[0][u.data[0].length - 1] + bucketSize, bucketSize);\n\n    let splits = [];\n    let skip = Math.ceil(minSpace / bucketWidth);\n\n    for (let i = 0, s = firstSplit; s <= lastSplit; i++, s += bucketSize) {\n      !(i % skip) && splits.push(s);\n    }\n\n    return splits;\n  };\n\n  builder.addScale({\n    scaleKey: 'x', // bukkits\n    isTime: false,\n    distribution: isOrdinalX\n      ? ScaleDistribution.Ordinal\n      : useLogScale\n        ? ScaleDistribution.Log\n        : ScaleDistribution.Linear,\n    log: 2,\n    orientation: ScaleOrientation.Horizontal,\n    direction: ScaleDirection.Right,\n    range: useLogScale\n      ? (u, wantedMin, wantedMax) => {\n          return uPlot.rangeLog(wantedMin, wantedMax * bucketFactor, 2, true);\n        }\n      : (u, wantedMin, wantedMax) => {\n          // these settings will prevent zooming, probably okay?\n          if (xScaleMin != null) {\n            wantedMin = xScaleMin;\n          }\n          if (xScaleMax != null) {\n            wantedMax = xScaleMax;\n          }\n\n          let fullRangeMax = u.data[0][u.data[0].length - 1];\n\n          // isOrdinalX is when we have classic histograms, which are LE, ordinal X, and already have 0 dummy bucket prepended\n          // else we have calculated histograms which are GE and cardinal+linear X, and have no next dummy bucket appended\n          wantedMin = incrRoundUp(wantedMin, bucketSize);\n          wantedMax =\n            !isOrdinalX && wantedMax === fullRangeMax ? wantedMax + bucketSize : incrRoundDn(wantedMax, bucketSize);\n\n          return [wantedMin, wantedMax];\n        },\n  });\n\n  builder.addScale({\n    scaleKey: 'y', // counts\n    isTime: false,\n    distribution: ScaleDistribution.Linear,\n    orientation: ScaleOrientation.Vertical,\n    direction: ScaleDirection.Up,\n    softMin: 0,\n  });\n\n  const fmt = frame.fields[0].display!;\n  const xAxisFormatter = (v: number) => {\n    return formattedValueToString(fmt(v));\n  };\n\n  builder.addAxis({\n    scaleKey: 'x',\n    isTime: false,\n    placement: AxisPlacement.Bottom,\n    incrs: isOrdinalX ? [1] : useLogScale ? undefined : histogramBucketSizes,\n    splits: useLogScale || isOrdinalX ? undefined : xSplits,\n    values: isOrdinalX\n      ? (u, splits) => splits\n      : (u, splits) => {\n          const tickLabels = splits.map(xAxisFormatter);\n\n          const maxWidth = tickLabels.reduce(\n            (curMax, label) => Math.max(measureText(label, UPLOT_AXIS_FONT_SIZE).width, curMax),\n            0\n          );\n\n          const labelSpacing = 10;\n          const maxCount = u.bbox.width / ((maxWidth + labelSpacing) * devicePixelRatio);\n          const keepMod = Math.ceil(tickLabels.length / maxCount);\n\n          return tickLabels.map((label, i) => (i % keepMod === 0 ? label : null));\n        },\n    //incrs: () => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map((mult) => mult * bucketSize),\n    //splits: config.xSplits,\n    //values: config.xValues,\n    //grid: false,\n    //ticks: false,\n    //gap: 15,\n    theme,\n  });\n\n  // assumes BucketMax is [1]\n  let countField = frame.fields[2];\n  let dispY = countField.display;\n\n  builder.addAxis({\n    scaleKey: 'y',\n    isTime: false,\n    placement: AxisPlacement.Left,\n    formatValue: (v, decimals) => formattedValueToString(dispY!(v, decimals)),\n    //splits: config.xSplits,\n    //values: config.xValues,\n    //grid: false,\n    //ticks: false,\n    //gap: 15,\n    theme,\n  });\n\n  builder.setCursor({\n    points: { show: false },\n    drag: {\n      x: true,\n      y: false,\n      setScale: true,\n    },\n  });\n\n  let stackingGroups = getStackingGroups(xMinOnlyFrame(frame));\n  builder.setStackingGroups(stackingGroups);\n\n  let pathBuilder = uPlot.paths.bars!({ align: 1, size: [1, Infinity] });\n\n  let seriesIndex = 0;\n\n  // assumes xMin is [0], xMax is [1]\n  for (let i = 2; i < frame.fields.length; i++) {\n    const field = frame.fields[i];\n\n    field.state = field.state ?? {};\n    field.state.seriesIndex = seriesIndex++;\n\n    const customConfig: FieldConfig = { ...defaultFieldConfig, ...field.config.custom };\n\n    const scaleKey = 'y';\n    const colorMode = getFieldColorModeForField(field);\n    const scaleColor = getFieldSeriesColor(field, theme);\n    const seriesColor = scaleColor.color;\n\n    builder.addSeries({\n      scaleKey,\n      lineWidth: customConfig.lineWidth,\n      lineColor: seriesColor,\n      //lineStyle: customConfig.lineStyle,\n      fillOpacity: customConfig.fillOpacity,\n      theme,\n      colorMode,\n      pathBuilder,\n      //pointsBuilder: config.drawPoints,\n      show: !customConfig.hideFrom?.viz,\n      gradientMode: customConfig.gradientMode,\n      thresholds: field.config.thresholds,\n\n      hardMin: field.config.min,\n      hardMax: field.config.max,\n      softMin: customConfig.axisSoftMin,\n      softMax: customConfig.axisSoftMax,\n\n      // The following properties are not used in the uPlot config, but are utilized as transport for legend config\n      dataFrameFieldIndex: field.state.origin,\n    });\n  }\n\n  return builder;\n};\n\n// since we're reusing timeseries prep for stacking, we need to make a tmp frame where fields match the uplot data\n// by removing the x bucket max field to make sure stacking group series idxs match up\nconst xMinOnlyFrame = (frame: DataFrame) => ({\n  ...frame,\n  fields: frame.fields.filter((f) => f.name !== histogramFrameBucketMaxFieldName),\n});\n\nconst preparePlotData = (builder: UPlotConfigBuilder, xMinOnlyFrame: DataFrame) => {\n  // uPlot's bars pathBuilder will draw rects even if 0 (to distinguish them from nulls)\n  // but for histograms we want to omit them, so remap 0s -> nulls\n  for (let i = 1; i < xMinOnlyFrame.fields.length; i++) {\n    let counts = xMinOnlyFrame.fields[i].values;\n\n    for (let j = 0; j < counts.length; j++) {\n      if (counts[j] === 0) {\n        counts[j] = null; // mutates!\n      }\n    }\n  }\n\n  return preparePlotData2(xMinOnlyFrame, builder.getStackingGroups());\n};\n\ninterface State {\n  alignedData: AlignedData;\n  alignedFrame: DataFrame;\n  config?: UPlotConfigBuilder;\n  xMinOnlyFrame: DataFrame;\n}\n\nexport class Histogram extends React.Component<HistogramProps, State> {\n  constructor(props: HistogramProps) {\n    super(props);\n    this.state = this.prepState(props);\n  }\n\n  prepState(props: HistogramProps, withConfig = true): State {\n    const { alignedFrame } = props;\n\n    const config = withConfig ? prepConfig(alignedFrame, this.props.theme) : this.state.config!;\n    const xMinOnly = xMinOnlyFrame(alignedFrame);\n    const alignedData = preparePlotData(config, xMinOnly);\n\n    return {\n      alignedFrame,\n      alignedData,\n      config,\n      xMinOnlyFrame: xMinOnly,\n    };\n  }\n\n  renderLegend(config: UPlotConfigBuilder) {\n    const { legend } = this.props;\n\n    if (!config || legend.showLegend === false) {\n      return null;\n    }\n\n    const frames = this.props.options.combine ? [this.props.alignedFrame] : this.props.rawSeries!;\n\n    return <PlotLegend data={frames} config={config} maxHeight=\"35%\" maxWidth=\"60%\" {...legend} />;\n  }\n\n  componentDidUpdate(prevProps: HistogramProps) {\n    const { structureRev, alignedFrame, bucketSize, bucketCount } = this.props;\n\n    if (alignedFrame !== prevProps.alignedFrame) {\n      const shouldReconfig =\n        this.state.config == null ||\n        bucketCount !== prevProps.bucketCount ||\n        bucketSize !== prevProps.bucketSize ||\n        this.props.options !== prevProps.options ||\n        this.state.config === undefined ||\n        structureRev !== prevProps.structureRev ||\n        !structureRev;\n\n      const newState = this.prepState(this.props, shouldReconfig);\n\n      this.setState(newState);\n    }\n  }\n\n  render() {\n    const { width, height, children, alignedFrame } = this.props;\n    const { config } = this.state;\n\n    if (!config) {\n      return null;\n    }\n\n    return (\n      <VizLayout width={width} height={height} legend={this.renderLegend(config)}>\n        {(vizWidth: number, vizHeight: number) => (\n          <UPlotChart config={this.state.config!} data={this.state.alignedData} width={vizWidth} height={vizHeight}>\n            {children ? children(config, alignedFrame, this.state.xMinOnlyFrame) : null}\n          </UPlotChart>\n        )}\n      </VizLayout>\n    );\n  }\n}\n","import { ReactNode, useMemo } from 'react';\n\nimport { DataFrame, formattedValueToString } from '@grafana/data';\nimport { SortOrder, TooltipDisplayMode } from '@grafana/schema/dist/esm/common/common.gen';\nimport {\n  VizTooltipContent,\n  VizTooltipFooter,\n  VizTooltipHeader,\n  VizTooltipWrapper,\n  getContentItems,\n  VizTooltipItem,\n} from '@grafana/ui/internal';\n\nimport { getDataLinks } from '../status-history/utils';\nimport { isTooltipScrollable } from '../timeseries/utils';\n\nexport interface HistogramTooltipProps {\n  // aligned series frame\n  series: DataFrame;\n  xMinOnlyFrame: DataFrame;\n\n  // hovered points\n  dataIdxs: Array<number | null>;\n  // closest/hovered series\n  seriesIdx?: number | null;\n  mode?: TooltipDisplayMode;\n  sortOrder?: SortOrder;\n\n  isPinned: boolean;\n  maxHeight?: number;\n}\n\nexport const HistogramTooltip = ({\n  series,\n  xMinOnlyFrame,\n  dataIdxs,\n  seriesIdx,\n  mode = TooltipDisplayMode.Single,\n  sortOrder = SortOrder.None,\n  isPinned,\n  maxHeight,\n}: HistogramTooltipProps) => {\n  const xMinField = series.fields[0];\n  const xMaxField = series.fields[1];\n\n  // use the formatter from other bucket bound if none is defined\n  const { display: xMinDisp } = xMinField.config.unit != null ? xMinField : xMaxField;\n  const { display: xMaxDisp } = xMaxField.config.unit != null ? xMaxField : xMinField;\n\n  const xMinVal = formattedValueToString(xMinDisp!(xMinField.values[dataIdxs[0]!]));\n  const xMaxVal = formattedValueToString(xMaxDisp!(xMaxField.values[dataIdxs[1]!]));\n\n  const headerItem: VizTooltipItem | null = xMinField.config.custom?.hideFrom?.tooltip\n    ? null\n    : {\n        label: 'Bucket',\n        value: `${xMinVal} - ${xMaxVal}`,\n      };\n\n  const contentItems = useMemo(\n    () => getContentItems(xMinOnlyFrame.fields, xMinField, dataIdxs, seriesIdx, mode, sortOrder),\n    [xMinOnlyFrame.fields, xMinField, dataIdxs, seriesIdx, mode, sortOrder]\n  );\n\n  let footer: ReactNode;\n\n  if (isPinned && seriesIdx != null) {\n    const field = series.fields[seriesIdx];\n    const dataIdx = dataIdxs[seriesIdx]!;\n    const links = getDataLinks(field, dataIdx);\n\n    footer = <VizTooltipFooter dataLinks={links} />;\n  }\n\n  return (\n    <VizTooltipWrapper>\n      {headerItem != null && <VizTooltipHeader item={headerItem} isPinned={isPinned} />}\n      <VizTooltipContent\n        items={contentItems}\n        isPinned={isPinned}\n        scrollable={isTooltipScrollable({ mode, maxHeight })}\n        maxHeight={maxHeight}\n      />\n      {footer}\n    </VizTooltipWrapper>\n  );\n};\n","import { useMemo } from 'react';\n\nimport {\n  histogramFieldsToFrame,\n  joinHistograms,\n  DataFrameType,\n  PanelProps,\n  buildHistogram,\n  cacheFieldDisplayNames,\n  getHistogramFields,\n} from '@grafana/data';\nimport { TooltipDisplayMode, TooltipPlugin2, useTheme2 } from '@grafana/ui';\nimport { TooltipHoverMode } from '@grafana/ui/internal';\n\nimport { Histogram, getBucketSize } from './Histogram';\nimport { HistogramTooltip } from './HistogramTooltip';\nimport { Options } from './panelcfg.gen';\n\ntype Props = PanelProps<Options>;\n\nexport const HistogramPanel = ({ data, options, width, height }: Props) => {\n  const theme = useTheme2();\n\n  const histogram = useMemo(() => {\n    if (!data.series.length) {\n      return undefined;\n    }\n\n    // stamp origins for legend's calcs (from raw values)\n    data.series.forEach((frame, frameIndex) => {\n      frame.fields.forEach((field, fieldIndex) => {\n        field.state = {\n          ...field.state,\n          origin: {\n            frameIndex,\n            fieldIndex,\n          },\n        };\n      });\n    });\n\n    cacheFieldDisplayNames(data.series);\n\n    if (\n      data.series.length === 1 ||\n      data.series.every(\n        (frame) => frame.meta?.type === DataFrameType.HeatmapCells || frame.meta?.type === DataFrameType.HeatmapRows\n      )\n    ) {\n      const histograms = data.series.map((frame) => getHistogramFields(frame)).filter((hist) => hist != null);\n\n      if (histograms.length) {\n        return histogramFieldsToFrame(joinHistograms(histograms), theme);\n      }\n    }\n    const hist = buildHistogram(data.series, options, theme);\n    if (!hist) {\n      return undefined;\n    }\n\n    return histogramFieldsToFrame(hist, theme);\n  }, [data.series, options, theme]);\n\n  if (!histogram || !histogram.fields.length) {\n    return (\n      <div className=\"panel-empty\">\n        <p>No histogram found in response</p>\n      </div>\n    );\n  }\n\n  const bucketSize = getBucketSize(histogram);\n\n  return (\n    <Histogram\n      options={options}\n      theme={theme}\n      legend={options.legend}\n      rawSeries={data.series}\n      structureRev={data.structureRev}\n      width={width}\n      height={height}\n      alignedFrame={histogram}\n      bucketSize={bucketSize}\n      bucketCount={options.bucketCount}\n    >\n      {(builder, alignedFrame, xMinOnlyFrame) => {\n        return (\n          <>\n            {options.tooltip.mode !== TooltipDisplayMode.None && (\n              <TooltipPlugin2\n                config={builder}\n                hoverMode={\n                  options.tooltip.mode === TooltipDisplayMode.Single ? TooltipHoverMode.xOne : TooltipHoverMode.xAll\n                }\n                render={(u, dataIdxs, seriesIdx, isPinned = false) => {\n                  return (\n                    <HistogramTooltip\n                      series={histogram}\n                      xMinOnlyFrame={xMinOnlyFrame}\n                      dataIdxs={dataIdxs}\n                      seriesIdx={seriesIdx}\n                      mode={options.tooltip.mode}\n                      sortOrder={options.tooltip.sort}\n                      isPinned={isPinned}\n                      maxHeight={options.tooltip.maxHeight}\n                    />\n                  );\n                }}\n                maxWidth={options.tooltip.maxWidth}\n              />\n            )}\n          </>\n        );\n      }}\n    </Histogram>\n  );\n};\n","import { StackingMode } from '@grafana/schema';\n\nimport { FieldConfig } from './panelcfg.gen';\n\nexport const defaultHistogramConfig: FieldConfig = {\n  stacking: {\n    mode: StackingMode.None,\n    group: 'A',\n  },\n};\n","import { isNil, omitBy } from 'lodash';\n\nimport { FieldConfigSource, PanelTypeChangedHandler } from '@grafana/data';\nimport {\n  LegendDisplayMode,\n  SortOrder,\n  StackingMode,\n  TooltipDisplayMode,\n} from '@grafana/schema/dist/esm/common/common.gen';\n\nimport { defaultHistogramConfig } from './config';\nimport { FieldConfig as HistogramFieldConfig, Options } from './panelcfg.gen';\n\n/*\n * This is called when the panel changes from another panel\n */\nexport const changeToHistogramPanelMigrationHandler: PanelTypeChangedHandler = (\n  panel,\n  prevPluginId,\n  prevOptions,\n  prevFieldConfig\n) => {\n  if (prevPluginId === 'graph') {\n    const graphOptions: GraphOptions = prevOptions.angular;\n\n    if (graphOptions.xaxis?.mode === 'histogram') {\n      const { fieldConfig, options } = graphToHistogramOptions({\n        ...prevOptions.angular,\n        fieldConfig: prevFieldConfig,\n      });\n\n      panel.fieldConfig = fieldConfig; // Mutates the incoming panel\n\n      return options;\n    }\n  }\n\n  return {};\n};\n\nfunction graphToHistogramOptions(graphOptions: GraphOptions): {\n  fieldConfig: FieldConfigSource;\n  options: Options;\n} {\n  let histogramFieldConfig: HistogramFieldConfig = {};\n  const options: Options = {\n    legend: {\n      displayMode: LegendDisplayMode.List,\n      showLegend: true,\n      placement: 'bottom',\n      calcs: [],\n    },\n    tooltip: {\n      mode: TooltipDisplayMode.Single,\n      sort: SortOrder.None,\n    },\n    combine: false,\n  };\n\n  if (graphOptions.stack) {\n    histogramFieldConfig.stacking = {\n      mode: graphOptions.percentage ? StackingMode.Percent : StackingMode.Normal,\n      group: defaultHistogramConfig.stacking!.group,\n    };\n\n    options.combine = false;\n  }\n\n  return {\n    fieldConfig: {\n      defaults: omitBy(\n        {\n          custom: histogramFieldConfig,\n        },\n        isNil\n      ),\n      overrides: [],\n    },\n    options,\n  };\n}\n\ninterface GraphOptions {\n  stack?: boolean;\n  percentage?: boolean;\n  xaxis: {\n    mode: 'series' | 'time' | 'histogram';\n    values?: string[];\n  };\n}\n","import {\n  isHistogramFrameBucketMinFieldName,\n  isHistogramFrameBucketMaxFieldName,\n  DataFrame,\n  FieldType,\n} from '@grafana/data';\n\nexport function originalDataHasHistogram(frames?: DataFrame[]): boolean {\n  if (frames?.length !== 1) {\n    return false;\n  }\n  const frame = frames[0];\n  if (frame.fields.length < 3) {\n    return false;\n  }\n\n  if (\n    !isHistogramFrameBucketMinFieldName(frame.fields[0].name) ||\n    !isHistogramFrameBucketMaxFieldName(frame.fields[1].name)\n  ) {\n    return false;\n  }\n  for (const field of frame.fields) {\n    if (field.type !== FieldType.number) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import {\n  FieldColorModeId,\n  FieldConfigProperty,\n  FieldType,\n  identityOverrideProcessor,\n  PanelPlugin,\n  histogramFieldInfo,\n} from '@grafana/data';\nimport { commonOptionsBuilder, graphFieldOptions } from '@grafana/ui';\nimport { StackingEditor } from '@grafana/ui/internal';\n\nimport { HistogramPanel } from './HistogramPanel';\nimport { defaultHistogramConfig } from './config';\nimport { changeToHistogramPanelMigrationHandler } from './migrations';\nimport { FieldConfig, Options, defaultFieldConfig, defaultOptions } from './panelcfg.gen';\nimport { originalDataHasHistogram } from './utils';\n\nexport const plugin = new PanelPlugin<Options, FieldConfig>(HistogramPanel)\n  .setPanelChangeHandler(changeToHistogramPanelMigrationHandler)\n  .setPanelOptions((builder) => {\n    builder\n      .addCustomEditor({\n        id: '__calc__',\n        path: '__calc__',\n        name: 'Values',\n        description: 'Showing frequencies that are calculated in the query',\n        editor: () => null, // empty editor\n        showIf: (opts, data) => originalDataHasHistogram(data),\n      })\n      .addNumberInput({\n        path: 'bucketCount',\n        name: histogramFieldInfo.bucketCount.name,\n        description: histogramFieldInfo.bucketCount.description,\n        settings: {\n          placeholder: `Default: ${defaultOptions.bucketCount}`,\n          min: 0,\n        },\n        showIf: (opts, data) => !originalDataHasHistogram(data),\n      })\n      .addNumberInput({\n        path: 'bucketSize',\n        name: histogramFieldInfo.bucketSize.name,\n        description: histogramFieldInfo.bucketSize.description,\n        settings: {\n          placeholder: 'Auto',\n          min: 0,\n        },\n        defaultValue: defaultOptions.bucketSize,\n        showIf: (opts, data) => !originalDataHasHistogram(data),\n      })\n      .addNumberInput({\n        path: 'bucketOffset',\n        name: histogramFieldInfo.bucketOffset.name,\n        description: histogramFieldInfo.bucketOffset.description,\n        settings: {\n          placeholder: `Default: ${defaultOptions.bucketOffset}`,\n          min: 0,\n        },\n        showIf: (opts, data) => !originalDataHasHistogram(data),\n      })\n      .addBooleanSwitch({\n        path: 'combine',\n        name: histogramFieldInfo.combine.name,\n        description: histogramFieldInfo.combine.description,\n        defaultValue: defaultOptions.combine,\n        showIf: (opts, data) => !originalDataHasHistogram(data),\n      });\n\n    commonOptionsBuilder.addTooltipOptions(builder);\n    commonOptionsBuilder.addLegendOptions(builder);\n  })\n  .useFieldConfig({\n    standardOptions: {\n      [FieldConfigProperty.Color]: {\n        settings: {\n          byValueSupport: false,\n          bySeriesSupport: true,\n          preferThresholdsMode: false,\n        },\n        defaultValue: {\n          mode: FieldColorModeId.PaletteClassic,\n        },\n      },\n      [FieldConfigProperty.Links]: {\n        settings: {\n          showOneClick: true,\n        },\n      },\n    },\n    useCustomConfig: (builder) => {\n      const cfg = defaultFieldConfig;\n\n      builder\n        .addCustomEditor({\n          id: 'stacking',\n          path: 'stacking',\n          name: 'Stacking',\n          category: ['Histogram'],\n          defaultValue: defaultHistogramConfig.stacking,\n          editor: StackingEditor,\n          override: StackingEditor,\n          settings: {\n            options: graphFieldOptions.stacking,\n          },\n          process: identityOverrideProcessor,\n          shouldApply: (f) => f.type === FieldType.number,\n          showIf: (opts, data) => !originalDataHasHistogram(data),\n        })\n        .addSliderInput({\n          path: 'lineWidth',\n          name: 'Line width',\n          defaultValue: cfg.lineWidth,\n          settings: {\n            min: 0,\n            max: 10,\n            step: 1,\n          },\n        })\n        .addSliderInput({\n          path: 'fillOpacity',\n          name: 'Fill opacity',\n          defaultValue: cfg.fillOpacity,\n          settings: {\n            min: 0,\n            max: 100,\n            step: 1,\n          },\n        })\n        .addRadio({\n          path: 'gradientMode',\n          name: 'Gradient mode',\n          defaultValue: graphFieldOptions.fillGradient[0].value,\n          settings: {\n            options: graphFieldOptions.fillGradient,\n          },\n        });\n\n      commonOptionsBuilder.addHideFrom(builder);\n    },\n  });\n","import {\n  DataFrame,\n  Field,\n  FieldType,\n  getDisplayProcessor,\n  GrafanaTheme2,\n  isBooleanUnit,\n  TimeRange,\n  cacheFieldDisplayNames,\n  applyNullInsertThreshold,\n  nullToValue,\n} from '@grafana/data';\nimport { convertFieldType } from '@grafana/data/internal';\nimport { GraphFieldConfig, LineInterpolation, TooltipDisplayMode, VizTooltipOptions } from '@grafana/schema';\nimport { buildScaleKey } from '@grafana/ui/internal';\n\nimport { HeatmapTooltip } from '../heatmap/panelcfg.gen';\n\ntype ScaleKey = string;\n\n// this will re-enumerate all enum fields on the same scale to create one ordinal progression\n// e.g. ['a','b'][0,1,0] + ['c','d'][1,0,1] -> ['a','b'][0,1,0] + ['c','d'][3,2,3]\nfunction reEnumFields(frames: DataFrame[]): DataFrame[] {\n  let allTextsByKey: Map<ScaleKey, string[]> = new Map();\n\n  let frames2: DataFrame[] = frames.map((frame) => {\n    return {\n      ...frame,\n      fields: frame.fields.map((field) => {\n        if (field.type === FieldType.enum) {\n          let scaleKey = buildScaleKey(field.config, field.type);\n          let allTexts = allTextsByKey.get(scaleKey);\n\n          if (!allTexts) {\n            allTexts = [];\n            allTextsByKey.set(scaleKey, allTexts);\n          }\n\n          let idxs: number[] = field.values.toArray().slice();\n          let txts = field.config.type!.enum!.text!;\n\n          // by-reference incrementing\n          if (allTexts.length > 0) {\n            for (let i = 0; i < idxs.length; i++) {\n              idxs[i] += allTexts.length;\n            }\n          }\n\n          allTexts.push(...txts);\n\n          // shared among all enum fields on same scale\n          field.config.type!.enum!.text! = allTexts;\n\n          return {\n            ...field,\n            values: idxs,\n          };\n\n          // TODO: update displayProcessor?\n        }\n\n        return field;\n      }),\n    };\n  });\n\n  return frames2;\n}\n\n/**\n * Returns null if there are no graphable fields\n */\nexport function prepareGraphableFields(\n  series: DataFrame[],\n  theme: GrafanaTheme2,\n  timeRange?: TimeRange,\n  // numeric X requires a single frame where the first field is numeric\n  xNumFieldIdx?: number\n): DataFrame[] | null {\n  if (!series?.length) {\n    return null;\n  }\n\n  cacheFieldDisplayNames(series);\n\n  let useNumericX = xNumFieldIdx != null;\n\n  // Make sure the numeric x field is first in the frame\n  if (xNumFieldIdx != null && xNumFieldIdx > 0) {\n    series = [\n      {\n        ...series[0],\n        fields: [series[0].fields[xNumFieldIdx], ...series[0].fields.filter((f, i) => i !== xNumFieldIdx)],\n      },\n    ];\n  }\n\n  // some datasources simply tag the field as time, but don't convert to milli epochs\n  // so we're stuck with doing the parsing here to avoid Moment slowness everywhere later\n  // this mutates (once)\n  for (let frame of series) {\n    for (let field of frame.fields) {\n      if (field.type === FieldType.time && typeof field.values[0] !== 'number') {\n        field.values = convertFieldType(field, { destinationType: FieldType.time }).values;\n      }\n    }\n  }\n\n  let enumFieldsCount = 0;\n\n  loopy: for (let frame of series) {\n    for (let field of frame.fields) {\n      if (field.type === FieldType.enum && ++enumFieldsCount > 1) {\n        series = reEnumFields(series);\n        break loopy;\n      }\n    }\n  }\n\n  let copy: Field;\n\n  const frames: DataFrame[] = [];\n\n  for (let frame of series) {\n    const fields: Field[] = [];\n\n    let hasTimeField = false;\n    let hasValueField = false;\n\n    let nulledFrame = useNumericX\n      ? frame\n      : applyNullInsertThreshold({\n          frame,\n          refFieldPseudoMin: timeRange?.from.valueOf(),\n          refFieldPseudoMax: timeRange?.to.valueOf(),\n        });\n\n    const frameFields = nullToValue(nulledFrame).fields;\n\n    for (let fieldIdx = 0; fieldIdx < (frameFields?.length || 0); fieldIdx++) {\n      const field = frameFields[fieldIdx];\n\n      switch (field.type) {\n        case FieldType.time:\n          hasTimeField = true;\n          fields.push(field);\n          break;\n        case FieldType.number:\n          hasValueField = useNumericX ? fieldIdx > 0 : true;\n          copy = {\n            ...field,\n            values: field.values.map((v) => {\n              if (!(Number.isFinite(v) || v == null)) {\n                return null;\n              }\n              return v;\n            }),\n          };\n\n          fields.push(copy);\n          break; // ok\n        case FieldType.enum:\n          hasValueField = true;\n        case FieldType.string:\n          copy = {\n            ...field,\n            values: field.values,\n          };\n\n          fields.push(copy);\n          break; // ok\n        case FieldType.boolean:\n          hasValueField = true;\n          const custom: GraphFieldConfig = field.config?.custom ?? {};\n          const config = {\n            ...field.config,\n            max: 1,\n            min: 0,\n            custom,\n          };\n\n          // smooth and linear do not make sense\n          if (custom.lineInterpolation !== LineInterpolation.StepBefore) {\n            custom.lineInterpolation = LineInterpolation.StepAfter;\n          }\n\n          copy = {\n            ...field,\n            config,\n            type: FieldType.number,\n            values: field.values.map((v) => {\n              if (v == null) {\n                return v;\n              }\n              return Boolean(v) ? 1 : 0;\n            }),\n          };\n\n          if (!isBooleanUnit(config.unit)) {\n            config.unit = 'bool';\n            copy.display = getDisplayProcessor({ field: copy, theme });\n          }\n\n          fields.push(copy);\n          break;\n      }\n    }\n\n    if ((useNumericX || hasTimeField) && hasValueField) {\n      frames.push({\n        ...frame,\n        length: nulledFrame.length,\n        fields,\n      });\n    }\n  }\n\n  if (frames.length) {\n    setClassicPaletteIdxs(frames, theme, 0);\n    matchEnumColorToSeriesColor(frames, theme);\n    return frames;\n  }\n\n  return null;\n}\n\nconst matchEnumColorToSeriesColor = (frames: DataFrame[], theme: GrafanaTheme2) => {\n  const { palette } = theme.visualization;\n  for (const frame of frames) {\n    for (const field of frame.fields) {\n      if (field.type === FieldType.enum) {\n        const namedColor = palette[field.state?.seriesIndex! % palette.length];\n        const hexColor = theme.visualization.getColorByName(namedColor);\n        const enumConfig = field.config.type!.enum!;\n\n        enumConfig.color = Array(enumConfig.text!.length).fill(hexColor);\n        field.display = getDisplayProcessor({ field, theme });\n      }\n    }\n  }\n};\n\nexport const setClassicPaletteIdxs = (frames: DataFrame[], theme: GrafanaTheme2, skipFieldIdx?: number) => {\n  let seriesIndex = 0;\n  frames.forEach((frame) => {\n    frame.fields.forEach((field, fieldIdx) => {\n      if (\n        fieldIdx !== skipFieldIdx &&\n        (field.type === FieldType.number || field.type === FieldType.boolean || field.type === FieldType.enum)\n      ) {\n        field.state = {\n          ...field.state,\n          seriesIndex: seriesIndex++, // TODO: skip this for fields with custom renderers (e.g. Candlestick)?\n        };\n        field.display = getDisplayProcessor({ field, theme });\n      }\n    });\n  });\n};\n\nexport function getTimezones(timezones: string[] | undefined, defaultTimezone: string): string[] {\n  if (!timezones || !timezones.length) {\n    return [defaultTimezone];\n  }\n  return timezones.map((v) => (v?.length ? v : defaultTimezone));\n}\n\nexport const isTooltipScrollable = (tooltipOptions: VizTooltipOptions | HeatmapTooltip) => {\n  return tooltipOptions.mode === TooltipDisplayMode.Multi && tooltipOptions.maxHeight != null;\n};\n"],"names":["VizTooltipWrapper","children","className","styles","getStyles","theme","defaultOptions","defaultFieldConfig","incrRoundDn","num","incr","incrRoundUp","getBucketSize","frame","getBucketSize1","prepConfig","xScaleMin","xScaleMax","builder","UPlotConfigBuilder","isOrdinalX","bucketSize","bucketSize1","bucketFactor","useLogScale","xSplits","axisIdx","scaleMin","scaleMax","foundIncr","foundSpace","minSpace","bucketWidth","firstSplit","lastSplit","splits","skip","i","s","wantedMin","wantedMax","fullRangeMax","fmt","xAxisFormatter","v","tickLabels","maxWidth","curMax","label","measureText","maxCount","keepMod","dispY","decimals","stackingGroups","xMinOnlyFrame","pathBuilder","seriesIndex","field","customConfig","scaleKey","colorMode","seriesColor","f","preparePlotData","counts","j","Histogram","props","withConfig","alignedFrame","config","xMinOnly","alignedData","legend","frames","PlotLegend","prevProps","structureRev","bucketCount","shouldReconfig","newState","width","height","VizLayout","vizWidth","vizHeight","HistogramTooltip","series","dataIdxs","seriesIdx","mode","sortOrder","isPinned","maxHeight","xMinField","xMaxField","xMinDisp","xMaxDisp","xMinVal","xMaxVal","headerItem","contentItems","footer","dataIdx","links","VizTooltipFooter","VizTooltipHeader","VizTooltipContent","HistogramPanel","data","options","histogram","frameIndex","fieldIndex","histograms","hist","TooltipPlugin2","u","defaultHistogramConfig","changeToHistogramPanelMigrationHandler","panel","prevPluginId","prevOptions","prevFieldConfig","fieldConfig","graphToHistogramOptions","graphOptions","histogramFieldConfig","originalDataHasHistogram","PanelPlugin","opts","cfg","reEnumFields","allTextsByKey","allTexts","idxs","txts","prepareGraphableFields","timeRange","xNumFieldIdx","useNumericX","enumFieldsCount","loopy","copy","fields","hasTimeField","hasValueField","nulledFrame","frameFields","fieldIdx","custom","setClassicPaletteIdxs","matchEnumColorToSeriesColor","palette","namedColor","hexColor","enumConfig","skipFieldIdx","getTimezones","timezones","defaultTimezone","isTooltipScrollable","tooltipOptions"],"sourceRoot":""}