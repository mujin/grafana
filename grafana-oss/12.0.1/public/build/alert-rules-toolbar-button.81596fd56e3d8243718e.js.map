{"version":3,"file":"alert-rules-toolbar-button.81596fd56e3d8243718e.js","mappings":"oQAOA,MAAMA,KAA0B,QAC9B,IAAM,8BACR,EAOO,SAASC,EAAiB,CAAE,aAAAC,EAAc,UAAAC,CAAU,EAAU,CACnE,SACE,OAACC,EAAA,GACC,SAAO,KAAE,gDAAiD,aAAa,EACvE,YAAU,OAACC,EAAA,CAAe,aAAAH,CAAA,CAA4B,EACtD,QAASC,EACT,KAAK,KAEL,mBAAC,YACC,YACE,OAACG,EAAA,EAAkB,CAAC,QAAM,KAAE,uDAAwD,qBAAqB,EAAG,EAG9G,mBAACN,EAAA,CAAwB,aAAAE,CAAA,CAA4B,EACvD,EACF,CAEJ,CAEA,SAASG,EAAe,CAAE,aAAAH,CAAa,EAA6B,CAClE,MAAMK,EAAe,IAAI,gBAAgB,CAAE,OAAQ,aAAaL,CAAY,EAAG,CAAC,EAEhF,SACE,QAACM,EAAA,EAAK,CAAC,IAAK,EACV,oBAAC,OAAK,iBAAE,wCAAyC,uCAAuC,EAAE,KAC1F,OAACC,EAAA,EAAQ,CAAC,QAAM,KAAkB,mBAAmBF,EAAa,SAAS,CAAC,EAAE,EAC3E,iBAAE,6CAA8C,0BAA0B,EAC7E,GACF,CAEJ,CChCe,SAASG,EAAwB,CAAE,aAAAR,CAAa,EAAiC,CAC9F,KAAM,CAAE,UAAAS,EAAW,UAAAC,CAAU,KAAI,cAAWC,EAAA,EAAa,EAEnD,CAAE,KAAMC,EAAa,CAAC,CAAE,EAAIC,EAAA,GAAa,UAAU,yBAAyB,SAAS,CACzF,eAAgB,KAChB,aAAAb,CACF,CAAC,EAED,GAAIY,EAAW,SAAW,EACxB,OAAO,KAGT,MAAME,EAAe,IAAM,CACzBL,EAAUV,EAAkB,CAC1B,aAAAC,EACA,UAAWU,CACb,CAAC,CACH,EAEA,SACE,OAACK,EAAA,GACC,WAAS,KAAE,gCAAiC,aAAa,EACzD,KAAK,OACL,QAASD,CAAA,EACL,iBACN,CAEJ,C","sources":["webpack://grafana/./public/app/features/alerting/unified/integration/AlertRulesDrawer.tsx","webpack://grafana/./public/app/features/alerting/unified/integration/AlertRulesToolbarButton.tsx"],"sourcesContent":["import { Suspense, lazy } from 'react';\n\nimport { Drawer, LoadingPlaceholder, Stack, TextLink } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { createRelativeUrl } from '../utils/url';\n\nconst AlertRulesDrawerContent = lazy(\n  () => import(/* webpackChunkName: \"alert-rules-drawer-content\" */ './AlertRulesDrawerContent')\n);\n\ninterface Props {\n  dashboardUid: string;\n  onDismiss: () => void;\n}\n\nexport function AlertRulesDrawer({ dashboardUid, onDismiss }: Props) {\n  return (\n    <Drawer\n      title={t('alerting.alert-rules-drawer.title-alert-rules', 'Alert rules')}\n      subtitle={<DrawerSubtitle dashboardUid={dashboardUid} />}\n      onClose={onDismiss}\n      size=\"lg\"\n    >\n      <Suspense\n        fallback={\n          <LoadingPlaceholder text={t('alerting.alert-rules-drawer.text-loading-alert-rules', 'Loading alert rules')} />\n        }\n      >\n        <AlertRulesDrawerContent dashboardUid={dashboardUid} />\n      </Suspense>\n    </Drawer>\n  );\n}\n\nfunction DrawerSubtitle({ dashboardUid }: { dashboardUid: string }) {\n  const searchParams = new URLSearchParams({ search: `dashboard:${dashboardUid}` });\n\n  return (\n    <Stack gap={2}>\n      <div>{t('dashboard.alert-rules-drawer.subtitle', 'Alert rules related to this dashboard')}</div>\n      <TextLink href={createRelativeUrl(`/alerting/list/?${searchParams.toString()}`)}>\n        {t('dashboard.alert-rules-drawer.redirect-link', 'List in Grafana Alerting')}\n      </TextLink>\n    </Stack>\n  );\n}\n","import { useContext } from 'react';\n\nimport { ModalsContext, ToolbarButton } from '@grafana/ui';\n\nimport { t } from '../../../../core/internationalization';\nimport { alertRuleApi } from '../api/alertRuleApi';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nimport { AlertRulesDrawer } from './AlertRulesDrawer';\n\ninterface AlertRulesToolbarButtonProps {\n  dashboardUid: string;\n}\n\nexport default function AlertRulesToolbarButton({ dashboardUid }: AlertRulesToolbarButtonProps) {\n  const { showModal, hideModal } = useContext(ModalsContext);\n\n  const { data: namespaces = [] } = alertRuleApi.endpoints.prometheusRuleNamespaces.useQuery({\n    ruleSourceName: GRAFANA_RULES_SOURCE_NAME,\n    dashboardUid: dashboardUid,\n  });\n\n  if (namespaces.length === 0) {\n    return null;\n  }\n\n  const onShowDrawer = () => {\n    showModal(AlertRulesDrawer, {\n      dashboardUid: dashboardUid,\n      onDismiss: hideModal,\n    });\n  };\n\n  return (\n    <ToolbarButton\n      tooltip={t('dashboard.toolbar.alert-rules', 'Alert rules')}\n      icon=\"bell\"\n      onClick={onShowDrawer}\n      key=\"button-alerting\"\n    />\n  );\n}\n"],"names":["AlertRulesDrawerContent","AlertRulesDrawer","dashboardUid","onDismiss","Drawer","DrawerSubtitle","LoadingPlaceholder","searchParams","Stack","TextLink","AlertRulesToolbarButton","showModal","hideModal","ModalsContext","namespaces","alertRuleApi","onShowDrawer","ToolbarButton"],"sourceRoot":""}