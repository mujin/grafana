{"version":3,"file":"PluginListPage.7fb314c13af2ca17670d.js","mappings":"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","sources":["webpack://grafana/./public/app/features/connections/components/AdvisorRedirectNotice/AdvisorRedirectNotice.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Badges/PluginDisabledBadge.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Badges/PluginInstallBadge.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Badges/PluginEnterpriseBadge.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Badges/PluginUpdateAvailableBadge.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Badges/PluginDeprecatedBadge.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Badges/sharedStyles.ts","webpack://grafana/./public/app/features/plugins/admin/components/RoadmapLinks.tsx","webpack://grafana/./public/app/features/plugins/admin/components/SearchField.tsx","webpack://grafana/./public/app/features/plugins/admin/components/UpdateAllButton.tsx","webpack://grafana/./public/app/features/plugins/admin/components/UpdateAllModalBody.tsx","webpack://grafana/./public/app/features/plugins/admin/components/UpdateAllModal.tsx","webpack://grafana/./public/app/features/plugins/admin/hooks/useHistory.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginListItemBadges.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginLogo.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginListItem.tsx","webpack://grafana/./public/app/features/plugins/admin/components/PluginList.tsx","webpack://grafana/./public/app/features/plugins/admin/pages/Browse.tsx","webpack://grafana/./public/app/features/plugins/admin/state/selectors.ts","webpack://grafana/./public/app/features/plugins/admin/state/hooks.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport { useEffect, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { UserStorage } from '@grafana/runtime/internal';\nimport { Alert, LinkButton, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { t, Trans } from 'app/core/internationalization';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  alertContent: css({\n    display: 'flex',\n    flexDirection: 'row',\n    padding: 0,\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  }),\n  alertParagraph: css({\n    margin: theme.spacing(0, 1, 0, 0),\n    lineHeight: theme.spacing(theme.components.height.sm),\n  }),\n});\nconst userStorage = new UserStorage('advisor-redirect-notice');\n\nexport function AdvisorRedirectNotice() {\n  const styles = useStyles2(getStyles);\n  const hasAdminRights = contextSrv.hasRole('Admin') || contextSrv.isGrafanaAdmin;\n  const canUseAdvisor = hasAdminRights && config.featureToggles.grafanaAdvisor;\n  const [showNotice, setShowNotice] = useState(false);\n  useEffect(() => {\n    if (canUseAdvisor) {\n      userStorage.getItem('showNotice').then((showNotice) => {\n        if (showNotice !== 'false') {\n          setShowNotice(true);\n        }\n      });\n    }\n  }, [canUseAdvisor]);\n\n  return showNotice ? (\n    <Alert\n      severity=\"info\"\n      title=\"\"\n      onRemove={() => {\n        userStorage.setItem('showNotice', 'false');\n        setShowNotice(false);\n      }}\n    >\n      <div className={styles.alertContent}>\n        <p className={styles.alertParagraph}>\n          <Trans i18nKey=\"connections.advisor-redirect-notice.body\">\n            Try the new Advisor to uncover potential issues with your data sources and plugins.\n          </Trans>\n        </p>\n        <LinkButton\n          aria-label={t('connections.advisor-redirect-notice.aria-label-link-to-advisor', 'Link to Advisor')}\n          icon=\"arrow-right\"\n          href=\"/a/grafana-advisor-app\"\n          fill=\"text\"\n        >\n          <Trans i18nKey=\"connections.advisor-redirect-notice.go-to-advisor\">Go to Advisor</Trans>\n        </LinkButton>\n      </div>\n    </Alert>\n  ) : (\n    <></>\n  );\n}\n","import * as React from 'react';\n\nimport { PluginErrorCode } from '@grafana/data';\nimport { Badge } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\ntype Props = { error?: PluginErrorCode };\n\nexport function PluginDisabledBadge({ error }: Props): React.ReactElement {\n  const tooltip = errorCodeToTooltip(error);\n  return (\n    <Badge\n      icon=\"exclamation-triangle\"\n      text={t('plugins.plugin-disabled-badge.text-disabled', 'Disabled')}\n      color=\"red\"\n      tooltip={tooltip}\n    />\n  );\n}\n\nfunction errorCodeToTooltip(error?: PluginErrorCode): string | undefined {\n  switch (error) {\n    case PluginErrorCode.modifiedSignature:\n      return 'Plugin disabled due to modified content';\n    case PluginErrorCode.invalidSignature:\n      return 'Plugin disabled due to invalid plugin signature';\n    case PluginErrorCode.missingSignature:\n      return 'Plugin disabled due to missing plugin signature';\n    case null:\n    case undefined:\n      return 'Plugin disabled';\n    default:\n      return `Plugin disabled due to unknown error${error ? `: ${error}` : ''}`;\n  }\n}\n","import * as React from 'react';\n\nimport { Badge, useStyles2 } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { getBadgeColor } from './sharedStyles';\n\nexport function PluginInstalledBadge(): React.ReactElement {\n  const customBadgeStyles = useStyles2(getBadgeColor);\n  return (\n    <Badge\n      text={t('plugins.plugin-installed-badge.text-installed', 'Installed')}\n      color=\"orange\"\n      className={customBadgeStyles}\n    />\n  );\n}\n","import * as React from 'react';\n\nimport { featureEnabled } from '@grafana/runtime';\nimport { Badge, PluginSignatureBadge, Stack, useStyles2 } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { CatalogPlugin } from '../../types';\n\nimport { getBadgeColor } from './sharedStyles';\n\ntype Props = { plugin: CatalogPlugin };\n\nexport function PluginEnterpriseBadge({ plugin }: Props): React.ReactElement {\n  const customBadgeStyles = useStyles2(getBadgeColor);\n\n  if (featureEnabled('enterprise.plugins')) {\n    return <Badge text={t('plugins.plugin-enterprise-badge.text-enterprise', 'Enterprise')} color=\"blue\" />;\n  }\n\n  return (\n    <Stack wrap={'wrap'}>\n      <PluginSignatureBadge status={plugin.signature} />\n      <Badge\n        icon=\"lock\"\n        role=\"img\"\n        aria-label={t('plugins.plugin-enterprise-badge.aria-label-enterprise', 'Enterprise')}\n        text={t('plugins.plugin-enterprise-badge.text-enterprise', 'Enterprise')}\n        color=\"blue\"\n        className={customBadgeStyles}\n        title={t(\n          'plugins.plugin-enterprise-badge.title-requires-a-grafana-enterprise-license',\n          'Requires a Grafana Enterprise license'\n        )}\n      />\n    </Stack>\n  );\n}\n","import { css } from '@emotion/css';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nimport { CatalogPlugin } from '../../types';\n\ntype Props = {\n  plugin: CatalogPlugin;\n};\n\nexport function PluginUpdateAvailableBadge({ plugin }: Props): React.ReactElement | null {\n  const styles = useStyles2(getStyles);\n  return (\n    <p className={styles.hasUpdate}>\n      <Trans i18nKey=\"plugins.plugin-update-available-badge.update-available\">Update available!</Trans>\n    </p>\n  );\n}\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    hasUpdate: css({\n      color: theme.colors.text.secondary,\n      fontSize: theme.typography.bodySmall.fontSize,\n      marginBottom: 0,\n    }),\n  };\n};\n","import * as React from 'react';\n\nimport { Badge } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nexport function PluginDeprecatedBadge(): React.ReactElement {\n  return (\n    <Badge\n      icon=\"exclamation-triangle\"\n      text={t('plugins.plugin-deprecated-badge.text-deprecated', 'Deprecated')}\n      color=\"orange\"\n      tooltip={t(\n        'plugins.plugin-deprecated-badge.tooltip-plugin-deprecated-longer-receives-updates',\n        'This plugin is deprecated and no longer receives updates.'\n      )}\n    />\n  );\n}\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getBadgeColor = (theme: GrafanaTheme2) =>\n  css({\n    background: theme.colors.background.primary,\n    borderColor: theme.colors.border.strong,\n    color: theme.colors.text.secondary,\n  });\n","import { reportInteraction } from '@grafana/runtime';\nimport { Space, TextLink } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nexport const RoadmapLinks = () => {\n  return (\n    <div>\n      <Space v={2} />\n      <TextLink\n        href=\"https://github.com/grafana/grafana/issues/new?assignees=&labels=area%2Fdatasource%2Ctype%2Fnew-plugin-request&projects=&template=3-data_source_request.yaml&title=%5BNew+Data+Source%5D%3A+%3Cname-of-service%3E\"\n        onClick={() => reportInteraction('connections_data_source_request_clicked')}\n        external\n      >\n        <Trans i18nKey=\"connections.connect-data.request-data-source\">Request a new data source</Trans>\n      </TextLink>\n      <br />\n      <TextLink\n        href=\"https://github.com/orgs/grafana/projects/619/views/1?pane=info\"\n        onClick={() => reportInteraction('connections_data_source_roadmap_clicked')}\n        external\n      >\n        <Trans i18nKey=\"connections.connect-data.roadmap\">View roadmap</Trans>\n      </TextLink>\n    </div>\n  );\n};\n","import { useState, useRef } from 'react';\nimport * as React from 'react';\nimport { useDebounce } from 'react-use';\n\nimport { FilterInput } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\ninterface Props {\n  value?: string;\n  onSearch: (value: string) => void;\n}\n\n// useDebounce has a bug which causes it to fire on first render. This wrapper prevents that.\n// https://github.com/streamich/react-use/issues/759\nconst useDebounceWithoutFirstRender = (callBack: () => void, delay = 0, deps: React.DependencyList = []) => {\n  const isFirstRender = useRef(true);\n  const debounceDeps = [...deps, isFirstRender];\n\n  return useDebounce(\n    () => {\n      if (isFirstRender.current) {\n        isFirstRender.current = false;\n        return;\n      }\n      return callBack();\n    },\n    delay,\n    debounceDeps\n  );\n};\n\nexport const SearchField = ({ value, onSearch }: Props) => {\n  const [query, setQuery] = useState(value);\n\n  useDebounceWithoutFirstRender(() => onSearch(query ?? ''), 500, [query]);\n\n  return (\n    <FilterInput\n      value={query}\n      onKeyDown={(e) => {\n        if (e.key === 'Enter' || e.keyCode === 13) {\n          onSearch(e.currentTarget.value);\n        }\n      }}\n      placeholder={t('plugins.search-field.placeholder-search-grafana-plugins', 'Search Grafana plugins')}\n      onChange={(value) => {\n        setQuery(value);\n      }}\n      width={46}\n    />\n  );\n};\n","import { Button } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\ninterface UpdateAllButtonProps {\n  disabled: boolean;\n  onUpdateAll: () => void;\n  updatablePluginsLength: number;\n}\n\nconst UpdateAllButton = ({ disabled, onUpdateAll, updatablePluginsLength }: UpdateAllButtonProps) => {\n  return (\n    <Button disabled={disabled} onClick={onUpdateAll}>\n      {disabled ? (\n        <Trans i18nKey=\"plugins.catalog.no-updates-available\">No updates available</Trans>\n      ) : (\n        <Trans i18nKey=\"plugins.catalog.update-all.button\" values={{ length: updatablePluginsLength }}>\n          Update all ({{ length }})\n        </Trans>\n      )}\n    </Button>\n  );\n};\n\nexport default UpdateAllButton;\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Checkbox, EmptyState, Icon, Spinner, Tooltip, useStyles2 } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { CatalogPlugin } from '../types';\n\ntype UpdateError = {\n  id: string;\n  message: string;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  table: css({\n    marginTop: theme.spacing(2),\n    width: '100%',\n    borderCollapse: 'collapse',\n  }),\n  tableRow: css({\n    borderBottom: `1px solid ${theme.colors.border.weak}`,\n    td: {\n      paddingRight: theme.spacing(1),\n    },\n  }),\n  icon: css({\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  }),\n  header: css({\n    textAlign: 'left',\n    padding: theme.spacing(1),\n    borderBottom: `2px solid ${theme.colors.border.strong}`,\n    th: {\n      paddingRight: theme.spacing(1),\n    },\n  }),\n  data: css({\n    padding: '10px',\n  }),\n  footer: css({\n    fontSize: theme.typography.bodySmall.fontSize,\n    marginTop: theme.spacing(3),\n  }),\n  noPluginsMessage: css({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: '100%',\n  }),\n  tableContainer: css({\n    overflowY: 'auto',\n    overflowX: 'hidden',\n    maxHeight: theme.spacing(41),\n    marginBottom: theme.spacing(2),\n  }),\n  errorIcon: css({\n    color: theme.colors.error.main,\n  }),\n  successIcon: css({\n    color: theme.colors.success.main,\n  }),\n  pluginsInstalled: css({\n    svg: {\n      marginRight: theme.spacing(1),\n    },\n  }),\n});\n\nconst StatusIcon = ({\n  id,\n  inProgress,\n  isSelected,\n  isInstalled,\n  errorMap,\n}: {\n  id: string;\n  inProgress: boolean;\n  isSelected: boolean;\n  isInstalled: boolean;\n  errorMap: Map<string, UpdateError>;\n}) => {\n  const styles = useStyles2(getStyles);\n\n  if (errorMap && errorMap.has(id)) {\n    return (\n      <Tooltip\n        content={`${t('plugins.catalog.update-all.error', 'Error updating plugin:')} ${errorMap.get(id)?.message}`}\n      >\n        <Icon className={styles.errorIcon} size=\"xl\" name=\"exclamation-triangle\" />\n      </Tooltip>\n    );\n  }\n  if (isInstalled) {\n    return <Icon className={styles.successIcon} size=\"xl\" name=\"check\" />;\n  }\n  if (inProgress && isSelected) {\n    return <Spinner />;\n  }\n  return '';\n};\n\ntype Props = {\n  plugins: CatalogPlugin[];\n  pluginsNotInstalled: Set<string>;\n  inProgress: boolean;\n  selectedPlugins?: Set<string>;\n  onCheckboxChange: (id: string) => void;\n  errorMap: Map<string, UpdateError>;\n};\n\nexport const UpdateModalBody = ({\n  plugins,\n  pluginsNotInstalled,\n  inProgress,\n  selectedPlugins,\n  onCheckboxChange,\n  errorMap,\n}: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const numberInstalled = plugins.length - pluginsNotInstalled.size;\n  const installationFinished = plugins.length !== pluginsNotInstalled.size && !inProgress;\n\n  return (\n    <div>\n      {plugins.length === 0 ? (\n        <EmptyState\n          variant=\"completed\"\n          message={t('plugins.catalog.update-all.all-plugins-updated', 'All plugins updated!')}\n        />\n      ) : (\n        <>\n          <div>\n            <Trans i18nKey=\"plugins.catalog.update-all.header\">The following plugins have update available</Trans>\n          </div>\n          <div className={styles.tableContainer}>\n            <table className={styles.table}>\n              <thead className={styles.header}>\n                <tr>\n                  <th>\n                    <Trans i18nKey=\"plugins.catalog.update-all.update-header\">Update</Trans>\n                  </th>\n                  <th>\n                    <Trans i18nKey=\"plugins.catalog.update-all.name-header\">Name</Trans>\n                  </th>\n                  <th>\n                    <Trans i18nKey=\"plugins.catalog.update-all.installed-header\">Installed</Trans>\n                  </th>\n                  <th>\n                    <Trans i18nKey=\"plugins.catalog.update-all.available-header\">Available</Trans>\n                  </th>\n                  <th></th>\n                </tr>\n              </thead>\n              <tbody>\n                {plugins.map(({ id, name, installedVersion, latestVersion }: CatalogPlugin) => (\n                  <tr key={id} className={styles.tableRow}>\n                    <td>\n                      <Checkbox\n                        onChange={() => onCheckboxChange(id)}\n                        value={selectedPlugins?.has(id)}\n                        disabled={!pluginsNotInstalled.has(id)}\n                      />\n                    </td>\n                    <td>{name}</td>\n                    <td>{installedVersion}</td>\n                    <td>{latestVersion}</td>\n                    <td className={styles.icon}>\n                      <StatusIcon\n                        id={id}\n                        inProgress={inProgress}\n                        isSelected={selectedPlugins?.has(id) ?? false}\n                        isInstalled={!pluginsNotInstalled.has(id)}\n                        errorMap={errorMap}\n                      />\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n          {numberInstalled > 0 && installationFinished && (\n            <div className={styles.pluginsInstalled}>\n              <Icon className={styles.successIcon} size=\"lg\" name=\"check\" />\n              {`${numberInstalled} ${t('plugins.catalog.update-all.update-status-text', 'plugins updated')}`}\n            </div>\n          )}\n          {errorMap.size > 0 && installationFinished && (\n            <div className={styles.pluginsInstalled}>\n              <Icon className={styles.errorIcon} size=\"lg\" name=\"exclamation-triangle\" />\n              {`${errorMap.size} ${t('plugins.catalog.update-all.error-status-text', 'failed - see error messages')}`}\n            </div>\n          )}\n          {config.pluginAdminExternalManageEnabled && (\n            <footer className={styles.footer}>\n              <Trans i18nKey=\"plugins.catalog.update-all.cloud-update-message\">\n                * It may take a few minutes for the plugins to be available for usage.\n              </Trans>\n            </footer>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n","import { useEffect, useMemo, useRef, useState } from 'react';\n\nimport { config, reportInteraction } from '@grafana/runtime';\nimport { ConfirmModal } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { useInstall, useInstallStatus } from '../state/hooks';\nimport { CatalogPlugin, PluginStatus } from '../types';\n\nimport { UpdateModalBody } from './UpdateAllModalBody';\nconst PLUGINS_UPDATE_ALL_INTERACTION_EVENT_NAME = 'plugins_update_all_clicked';\n\ntype UpdateError = {\n  id: string;\n  message: string;\n};\n\ntype Props = {\n  isOpen: boolean;\n  isLoading: boolean;\n  onDismiss: () => void;\n  plugins: CatalogPlugin[];\n};\n\nexport const UpdateAllModal = ({ isOpen, onDismiss, isLoading, plugins }: Props) => {\n  const install = useInstall();\n  const { error } = useInstallStatus();\n  const [errorMap, setErrorMap] = useState(new Map<string, UpdateError>());\n  const [inProgress, setInProgress] = useState(false);\n  const [selectedPlugins, setSelectedPlugins] = useState<Set<string>>();\n  const initialPluginsRef = useRef(plugins);\n\n  const pluginsSet = useMemo(() => new Set(plugins.map((plugin) => plugin.id)), [plugins]);\n  const installsRemaining = plugins.length;\n\n  // Since the plugins comes from the store and changes every time we update a plugin,\n  // we need to keep track of the initial plugins.\n  useEffect(() => {\n    if (initialPluginsRef.current.length === 0) {\n      initialPluginsRef.current = [...plugins];\n    }\n  }, [plugins]);\n\n  // Updates the component state on every plugins change, since the installation will change the store content\n  useEffect(() => {\n    if (inProgress) {\n      selectedPlugins?.forEach((id) => {\n        if (!pluginsSet.has(id)) {\n          setSelectedPlugins((prevSelectedPlugins) => {\n            const newSelectedPlugins = new Set(prevSelectedPlugins);\n            newSelectedPlugins.delete(id);\n            return newSelectedPlugins;\n          });\n        }\n      });\n\n      if (selectedPlugins?.size === 0) {\n        setInProgress(false);\n      }\n    }\n  }, [inProgress, pluginsSet, selectedPlugins]);\n\n  // Initialize the component with all the plugins selected\n  useEffect(() => {\n    if (selectedPlugins === undefined && plugins.length > 0 && !isLoading) {\n      const initialSelectedPlugins = new Set(plugins.map((plugin) => plugin.id));\n      setSelectedPlugins(initialSelectedPlugins);\n    }\n  }, [isLoading, plugins, selectedPlugins]);\n\n  // Updates the component state on every error that comes from the store\n  useEffect(() => {\n    if (inProgress && error && !errorMap.has(error.id) && selectedPlugins?.has(error.id)) {\n      setErrorMap((prevErrorMap) => {\n        const newErrorMap = new Map(prevErrorMap);\n        newErrorMap.set(error.id, error);\n        return newErrorMap;\n      });\n\n      setSelectedPlugins((prevSelectedPlugins) => {\n        const newSelectedPlugins = new Set(prevSelectedPlugins);\n        newSelectedPlugins.delete(error.id);\n        return newSelectedPlugins;\n      });\n    }\n  }, [error, errorMap, inProgress, selectedPlugins]);\n\n  const onConfirm = async () => {\n    if (!inProgress) {\n      reportInteraction(PLUGINS_UPDATE_ALL_INTERACTION_EVENT_NAME, {\n        path: location.pathname,\n        count: selectedPlugins?.size,\n        creator_team: 'grafana_plugins_catalog',\n        schema_version: '1.0.0',\n      });\n\n      setInProgress(true);\n\n      // in cloud the requests need to be sync\n      if (config.pluginAdminExternalManageEnabled) {\n        for (let plugin of plugins) {\n          if (selectedPlugins?.has(plugin.id)) {\n            await install(plugin.id, plugin.latestVersion, PluginStatus.UPDATE);\n          }\n        }\n      } else {\n        plugins.forEach((plugin) => {\n          if (selectedPlugins?.has(plugin.id)) {\n            install(plugin.id, plugin.latestVersion, PluginStatus.UPDATE);\n          }\n        });\n      }\n    }\n  };\n\n  const onDismissClick = () => {\n    initialPluginsRef.current = [];\n    setErrorMap(new Map());\n    setInProgress(false);\n    setSelectedPlugins(undefined);\n    onDismiss();\n  };\n\n  const onCheckboxChange = (id: string) => {\n    setSelectedPlugins((prevSelectedPlugins) => {\n      const newSelectedPlugins = new Set(prevSelectedPlugins);\n      if (newSelectedPlugins.has(id)) {\n        newSelectedPlugins.delete(id);\n      } else {\n        newSelectedPlugins.add(id);\n      }\n      return newSelectedPlugins;\n    });\n    if (errorMap.has(id)) {\n      setErrorMap((prevErrorMap) => {\n        const newErrorMap = new Map(prevErrorMap);\n        newErrorMap.delete(id);\n        return newErrorMap;\n      });\n    }\n  };\n\n  const pluginsSelected = selectedPlugins?.size || 0;\n\n  return (\n    <ConfirmModal\n      isOpen={isOpen}\n      title={t('plugins.catalog.update-all.modal-title', 'Update Plugins')}\n      body={\n        <UpdateModalBody\n          plugins={initialPluginsRef.current}\n          pluginsNotInstalled={pluginsSet}\n          inProgress={inProgress}\n          errorMap={errorMap}\n          onCheckboxChange={onCheckboxChange}\n          selectedPlugins={selectedPlugins}\n        />\n      }\n      onConfirm={installsRemaining > 0 ? onConfirm : onDismissClick}\n      onDismiss={onDismissClick}\n      disabled={shouldDisableConfirm(inProgress, installsRemaining, pluginsSelected)}\n      confirmText={getConfirmationText(installsRemaining, inProgress, pluginsSelected)}\n      confirmButtonVariant=\"primary\"\n    />\n  );\n};\n\nfunction getConfirmationText(installsRemaining: number, inProgress: boolean, pluginsSelected: number) {\n  if (inProgress) {\n    return t('plugins.catalog.update-all.modal-in-progress', 'Updating...');\n  }\n\n  if (installsRemaining > 0) {\n    return t('plugins.catalog.update-all.modal-confirmation', 'Update') + ` (${pluginsSelected})`;\n  }\n  return t('plugins.catalog.update-all.modal-dismiss', 'Close');\n}\n\nfunction shouldDisableConfirm(inProgress: boolean, installsRemaining: number, pluginsSelected: number) {\n  if (inProgress) {\n    return true;\n  }\n\n  if (installsRemaining > 0 && pluginsSelected === 0) {\n    return true;\n  }\n\n  return false;\n}\n\nexport default UpdateAllModal;\n","import { locationService } from '@grafana/runtime';\n\nexport const useHistory = () => {\n  return {\n    push: ({ query }: { query: Parameters<typeof locationService.partial>[0] }) => {\n      locationService.partial(query);\n    },\n  };\n};\n","import { PluginSignatureBadge, Stack } from '@grafana/ui';\n\nimport { isPluginUpdatable } from '../helpers';\nimport { CatalogPlugin } from '../types';\n\nimport {\n  PluginEnterpriseBadge,\n  PluginDisabledBadge,\n  PluginInstalledBadge,\n  PluginUpdateAvailableBadge,\n  PluginDeprecatedBadge,\n} from './Badges';\n\ntype PluginBadgeType = {\n  plugin: CatalogPlugin;\n};\n\nexport function PluginListItemBadges({ plugin }: PluginBadgeType) {\n  // Currently renderer plugins are not supported by the catalog due to complications related to installation / update / uninstall.\n  const canUpdate = isPluginUpdatable(plugin);\n  if (plugin.isEnterprise) {\n    return (\n      <Stack height=\"auto\" wrap=\"wrap\">\n        <PluginEnterpriseBadge plugin={plugin} />\n        {plugin.isDisabled && <PluginDisabledBadge error={plugin.error} />}\n        {canUpdate && <PluginUpdateAvailableBadge plugin={plugin} />}\n      </Stack>\n    );\n  }\n\n  return (\n    <Stack height=\"auto\" wrap=\"wrap\">\n      <PluginSignatureBadge status={plugin.signature} />\n      {plugin.isDisabled && <PluginDisabledBadge error={plugin.error} />}\n      {plugin.isDeprecated && <PluginDeprecatedBadge />}\n      {plugin.isInstalled && <PluginInstalledBadge />}\n      {canUpdate && <PluginUpdateAvailableBadge plugin={plugin} />}\n    </Stack>\n  );\n}\n","import * as React from 'react';\n\ntype PluginLogoProps = {\n  alt: string;\n  className?: string;\n  src: string;\n  height?: string | number;\n};\n\nexport function PluginLogo({ alt, className, src, height }: PluginLogoProps): React.ReactElement {\n  return <img src={src} className={className} alt={alt} loading=\"lazy\" height={height} />;\n}\n","import { css, cx } from '@emotion/css';\nimport Skeleton from 'react-loading-skeleton';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { locationService, reportInteraction } from '@grafana/runtime';\nimport { Badge, Icon, Stack, useStyles2 } from '@grafana/ui';\nimport { SkeletonComponent, attachSkeleton } from '@grafana/ui/unstable';\n\nimport { CatalogPlugin, PluginIconName } from '../types';\n\nimport { PluginListItemBadges } from './PluginListItemBadges';\nimport { PluginLogo } from './PluginLogo';\n\nexport const LOGO_SIZE = '48px';\n\ntype Props = {\n  plugin: CatalogPlugin;\n  pathName: string;\n};\n\nfunction PluginListItemComponent({ plugin, pathName }: Props) {\n  const styles = useStyles2(getStyles);\n\n  const reportUserClickInteraction = () => {\n    if (locationService.getSearchObject()?.q) {\n      reportInteraction('plugins_search_user_click', {\n        plugin_id: plugin.id,\n        creator_team: 'grafana_plugins_catalog',\n        schema_version: '1.0.0',\n      });\n    }\n  };\n  return (\n    <a href={`${pathName}/${plugin.id}`} className={cx(styles.container)} onClick={reportUserClickInteraction}>\n      <PluginLogo src={plugin.info.logos.small} className={styles.pluginLogo} height={LOGO_SIZE} alt=\"\" />\n      <h2 className={cx(styles.name, 'plugin-name')}>{plugin.name}</h2>\n      <div className={cx(styles.content, 'plugin-content')}>\n        <p>By {plugin.orgName}</p>\n        <PluginListItemBadges plugin={plugin} />\n      </div>\n      <div className={styles.pluginType}>\n        {plugin.type && <Icon name={PluginIconName[plugin.type]} title={`${plugin.type} plugin`} />}\n      </div>\n    </a>\n  );\n}\n\nconst PluginListItemSkeleton: SkeletonComponent = ({ rootProps }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={cx(styles.container)} {...rootProps}>\n      <Skeleton\n        containerClassName={cx(\n          styles.pluginLogo,\n          css({\n            lineHeight: 1,\n          })\n        )}\n        width={LOGO_SIZE}\n        height={LOGO_SIZE}\n      />\n      <h2 className={styles.name}>\n        <Skeleton width={100} />\n      </h2>\n      <div className={styles.content}>\n        <p>\n          <Skeleton width={120} />\n        </p>\n        <Stack direction=\"row\">\n          <Badge.Skeleton />\n          <Badge.Skeleton />\n        </Stack>\n      </div>\n      <div className={styles.pluginType}>\n        <Skeleton width={16} height={16} />\n      </div>\n    </div>\n  );\n};\n\nexport const PluginListItem = attachSkeleton(PluginListItemComponent, PluginListItemSkeleton);\n\n// Styles shared between the different type of list items\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      display: 'grid',\n      gridTemplateColumns: `${LOGO_SIZE} 1fr ${theme.spacing(3)}`,\n      gridTemplateRows: 'auto',\n      gap: theme.spacing(2),\n      gridAutoFlow: 'row',\n      background: theme.colors.background.secondary,\n      borderRadius: theme.shape.radius.default,\n      padding: theme.spacing(3),\n      [theme.transitions.handleMotion('no-preference', 'reduce')]: {\n        transition: theme.transitions.create(['background-color', 'box-shadow', 'border-color', 'color'], {\n          duration: theme.transitions.duration.short,\n        }),\n      },\n\n      '&:hover': {\n        background: theme.colors.emphasize(theme.colors.background.secondary, 0.03),\n      },\n    }),\n    pluginType: css({\n      gridArea: '1 / 3 / 2 / 4',\n      color: theme.colors.text.secondary,\n    }),\n    pluginLogo: css({\n      gridArea: '1 / 1 / 3 / 2',\n      maxWidth: '100%',\n      alignSelf: 'center',\n      objectFit: 'contain',\n    }),\n    content: css({\n      gridArea: '3 / 1 / 4 / 3',\n      color: theme.colors.text.secondary,\n    }),\n    name: css({\n      gridArea: '1 / 2 / 3 / 3',\n      alignSelf: 'center',\n      fontSize: theme.typography.h4.fontSize,\n      color: theme.colors.text.primary,\n      margin: 0,\n      wordBreak: 'normal',\n      overflowWrap: 'anywhere',\n    }),\n  };\n};\n","import { useLocation } from 'react-router-dom-v5-compat';\n\nimport { config } from '@grafana/runtime';\nimport { EmptyState, Grid } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { CatalogPlugin } from '../types';\n\nimport { PluginListItem } from './PluginListItem';\n\ninterface Props {\n  plugins: CatalogPlugin[];\n  isLoading?: boolean;\n}\n\nexport const PluginList = ({ plugins, isLoading }: Props) => {\n  const { pathname } = useLocation();\n  const pathName = config.appSubUrl + (pathname.endsWith('/') ? pathname.slice(0, -1) : pathname);\n\n  if (!isLoading && plugins.length === 0) {\n    return <EmptyState variant=\"not-found\" message={t('plugins.empty-state.message', 'No plugins found')} />;\n  }\n\n  return (\n    <Grid gap={3} {...{ minColumnWidth: 34 }} data-testid=\"plugin-list\">\n      {isLoading\n        ? new Array(50).fill(null).map((_, index) => <PluginListItem.Skeleton key={index} />)\n        : plugins.map((plugin) => <PluginListItem key={plugin.id} plugin={plugin} pathName={pathName} />)}\n    </Grid>\n  );\n};\n","import { css } from '@emotion/css';\nimport { useState } from 'react';\nimport { useLocation } from 'react-router-dom-v5-compat';\n\nimport { SelectableValue, GrafanaTheme2, PluginType } from '@grafana/data';\nimport { locationSearchToObject } from '@grafana/runtime';\nimport { Select, RadioButtonGroup, useStyles2, Tooltip, Field, TextLink } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { t, Trans } from 'app/core/internationalization';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AdvisorRedirectNotice } from 'app/features/connections/components/AdvisorRedirectNotice/AdvisorRedirectNotice';\nimport { ROUTES as CONNECTIONS_ROUTES } from 'app/features/connections/constants';\nimport { useSelector } from 'app/types';\n\nimport { HorizontalGroup } from '../components/HorizontalGroup';\nimport { PluginList } from '../components/PluginList';\nimport { RoadmapLinks } from '../components/RoadmapLinks';\nimport { SearchField } from '../components/SearchField';\nimport UpdateAllButton from '../components/UpdateAllButton';\nimport { UpdateAllModal } from '../components/UpdateAllModal';\nimport { Sorters } from '../helpers';\nimport { useHistory } from '../hooks/useHistory';\nimport { useGetAll, useGetUpdatable, useIsRemotePluginsAvailable } from '../state/hooks';\n\nexport default function Browse() {\n  const location = useLocation();\n  const locationSearch = locationSearchToObject(location.search);\n  const navModel = useSelector((state) => getNavModel(state.navIndex, 'plugins'));\n  const styles = useStyles2(getStyles);\n  const history = useHistory();\n  const remotePluginsAvailable = useIsRemotePluginsAvailable();\n  const keyword = locationSearch.q?.toString() || '';\n  const filterBy = locationSearch.filterBy?.toString() || 'all';\n  const filterByType = (locationSearch.filterByType as PluginType | 'all') || 'all';\n  const sortBy = (locationSearch.sortBy as Sorters) || Sorters.nameAsc;\n  const { isLoading, error, plugins } = useGetAll(\n    {\n      keyword,\n      type: filterByType !== 'all' ? filterByType : undefined,\n      isInstalled: filterBy === 'installed' ? true : undefined,\n      hasUpdate: filterBy === 'has-update' ? true : undefined,\n    },\n    sortBy\n  );\n\n  const filterByOptions = [\n    { value: 'all', label: 'All' },\n    { value: 'installed', label: 'Installed' },\n    { value: 'has-update', label: 'New Updates' },\n  ];\n\n  const { isLoading: areUpdatesLoading, updatablePlugins } = useGetUpdatable();\n  const [showUpdateModal, setShowUpdateModal] = useState(false);\n  const disableUpdateAllButton = updatablePlugins.length <= 0 || areUpdatesLoading;\n\n  const onFilterByChange = (value: string) => {\n    history.push({ query: { filterBy: value } });\n  };\n\n  const onFilterByTypeChange = (value: SelectableValue<string>) => {\n    history.push({ query: { filterByType: value.value } });\n  };\n\n  const onSearch = (q: string) => {\n    history.push({ query: { filterBy, filterByType, q } });\n  };\n\n  const onUpdateAll = () => {\n    setShowUpdateModal(true);\n  };\n\n  // How should we handle errors?\n  if (error) {\n    console.error(error.message);\n    return null;\n  }\n\n  const subTitle = (\n    <div>\n      <Trans i18nKey=\"plugins.browse.subtitle\">\n        Extend the Grafana experience with panel plugins and apps. To find more data sources go to{' '}\n        <TextLink href={`${CONNECTIONS_ROUTES.AddNewConnection}?cat=data-source`}>Connections</TextLink>.\n      </Trans>\n    </div>\n  );\n\n  const updateAllButton = (\n    <UpdateAllButton\n      disabled={disableUpdateAllButton}\n      onUpdateAll={onUpdateAll}\n      updatablePluginsLength={updatablePlugins.length}\n    />\n  );\n\n  return (\n    <Page navModel={navModel} actions={updateAllButton} subTitle={subTitle}>\n      <Page.Contents>\n        <AdvisorRedirectNotice />\n        <HorizontalGroup wrap>\n          <Field label={t('plugins.browse.label-search', 'Search')}>\n            <SearchField value={keyword} onSearch={onSearch} />\n          </Field>\n          <HorizontalGroup wrap className={styles.actionBar}>\n            {/* Filter by type */}\n            <Field label={t('plugins.browse.label-type', 'Type')}>\n              <Select\n                aria-label={t('plugins.browse.aria-label-plugin-type-filter', 'Plugin type filter')}\n                value={filterByType}\n                onChange={onFilterByTypeChange}\n                width={18}\n                options={[\n                  { value: 'all', label: 'All' },\n                  { value: 'datasource', label: 'Data sources' },\n                  { value: 'panel', label: 'Panels' },\n                  { value: 'app', label: 'Applications' },\n                ]}\n              />\n            </Field>\n\n            {/* Filter by installed / all */}\n            {remotePluginsAvailable ? (\n              <Field label={t('plugins.browse.label-state', 'State')}>\n                <RadioButtonGroup value={filterBy} onChange={onFilterByChange} options={filterByOptions} />\n              </Field>\n            ) : (\n              <Tooltip\n                content=\"This filter has been disabled because the Grafana server cannot access grafana.com\"\n                placement=\"top\"\n              >\n                <div>\n                  <Field label={t('plugins.browse.label-state', 'State')}>\n                    <RadioButtonGroup\n                      disabled={true}\n                      value={filterBy}\n                      onChange={onFilterByChange}\n                      options={filterByOptions}\n                    />\n                  </Field>\n                </div>\n              </Tooltip>\n            )}\n          </HorizontalGroup>\n        </HorizontalGroup>\n        <div className={styles.listWrap}>\n          <PluginList plugins={plugins} isLoading={isLoading} />\n        </div>\n        <RoadmapLinks />\n        <UpdateAllModal\n          isOpen={showUpdateModal}\n          isLoading={areUpdatesLoading}\n          onDismiss={() => setShowUpdateModal(false)}\n          plugins={updatablePlugins}\n        />\n      </Page.Contents>\n    </Page>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  actionBar: css({\n    [theme.breakpoints.up('xl')]: {\n      marginLeft: 'auto',\n    },\n  }),\n  listWrap: css({\n    marginTop: theme.spacing(2),\n  }),\n  displayAs: css({\n    svg: {\n      marginRight: 0,\n    },\n  }),\n});\n","import { createSelector } from '@reduxjs/toolkit';\nimport { debounce } from 'lodash';\n\nimport { PluginError, PluginType, unEscapeStringFromRegex } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\n\nimport { filterByKeyword, isPluginUpdatable } from '../helpers';\nimport { RequestStatus, PluginCatalogStoreState } from '../types';\n\nimport { pluginsAdapter } from './reducer';\n\nexport const selectRoot = (state: PluginCatalogStoreState) => state.plugins;\n\nexport const selectItems = createSelector(selectRoot, ({ items }) => items);\n\nexport const { selectAll, selectById } = pluginsAdapter.getSelectors(selectItems);\n\nconst debouncedTrackSearch = debounce((count) => {\n  reportInteraction('plugins_search', {\n    resultsCount: count,\n    creator_team: 'grafana_plugins_catalog',\n    schema_version: '1.0.0',\n  });\n}, 300);\n\nexport type PluginFilters = {\n  // Searches for a string in certain fields (e.g. \"name\" or \"orgName\")\n  // (Note: this will be an escaped regex string as it comes from `FilterInput`)\n  keyword?: string;\n\n  // (Optional, only applied if set)\n  type?: PluginType;\n\n  // (Optional, only applied if set)\n  isInstalled?: boolean;\n\n  // (Optional, only applied if set)\n  isEnterprise?: boolean;\n\n  // (Optional, only applied if set)\n  hasUpdate?: boolean;\n};\n\nexport const selectPlugins = (filters: PluginFilters) =>\n  createSelector(selectAll, (plugins) => {\n    const keyword = filters.keyword ? unEscapeStringFromRegex(filters.keyword.toLowerCase()) : '';\n    // Fuzzy search does not consider plugin type filter\n    const filteredPluginIds = keyword !== '' ? filterByKeyword(plugins, keyword) : null;\n\n    // Filters are applied here\n    const filteredPlugins = plugins.filter((plugin) => {\n      if (keyword && filteredPluginIds == null) {\n        return false;\n      }\n\n      if (keyword && !filteredPluginIds?.includes(plugin.id)) {\n        return false;\n      }\n\n      if (filters.type && plugin.type !== filters.type) {\n        return false;\n      }\n\n      if (filters.isInstalled !== undefined && plugin.isInstalled !== filters.isInstalled) {\n        return false;\n      }\n\n      if (filters.isEnterprise !== undefined && plugin.isEnterprise !== filters.isEnterprise) {\n        return false;\n      }\n\n      if (filters.hasUpdate !== undefined && (plugin.hasUpdate !== filters.hasUpdate || !isPluginUpdatable(plugin))) {\n        return false;\n      }\n\n      return true;\n    });\n\n    if (keyword) {\n      debouncedTrackSearch(filteredPlugins.length);\n    }\n\n    return filteredPlugins;\n  });\n\nexport const selectPluginErrors = (filterByPluginType?: PluginType) =>\n  createSelector(selectAll, (plugins) => {\n    const pluginErrors: PluginError[] = [];\n    for (const plugin of plugins) {\n      if (plugin.error && (!filterByPluginType || plugin.type === filterByPluginType)) {\n        pluginErrors.push({\n          pluginId: plugin.id,\n          errorCode: plugin.error,\n          pluginType: plugin.type,\n        });\n      }\n    }\n    return pluginErrors;\n  });\n\n// The following selectors are used to get information about the outstanding or completed plugins-related network requests.\nexport const selectRequest = (actionType: string) =>\n  createSelector(selectRoot, ({ requests = {} }) => requests[actionType]);\n\nexport const selectIsRequestPending = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) => request?.status === RequestStatus.Pending);\n\nexport const selectRequestError = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) =>\n    request?.status === RequestStatus.Rejected ? request?.error : null\n  );\n\nexport const selectIsRequestNotFetched = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) => request === undefined);\n","import { useEffect, useMemo } from 'react';\n\nimport { PluginError, PluginType } from '@grafana/data';\nimport { useDispatch, useSelector } from 'app/types';\n\nimport { sortPlugins, Sorters, isPluginUpdatable } from '../helpers';\nimport { CatalogPlugin, PluginStatus } from '../types';\n\nimport { fetchAll, fetchDetails, fetchRemotePlugins, install, uninstall, fetchAllLocal, unsetInstall } from './actions';\nimport {\n  selectPlugins,\n  selectById,\n  selectIsRequestPending,\n  selectRequestError,\n  selectIsRequestNotFetched,\n  selectPluginErrors,\n  type PluginFilters,\n} from './selectors';\n\nexport const useGetAll = (filters: PluginFilters, sortBy: Sorters = Sorters.nameAsc) => {\n  useFetchAll();\n\n  const selector = useMemo(() => selectPlugins(filters), [filters]);\n  const plugins = useSelector(selector);\n  // As the locally installed plugins load quicker than the remote ones, we only show a loading state until these are being loaded\n  // (In case the remote ones are not loaded within a reasonable timeout, we will merge those with the locally installed plugins once they are loaded)\n  const { isLoading, error } = useLocalFetchStatus();\n  const sortedPlugins = sortPlugins(plugins, sortBy);\n\n  return {\n    isLoading,\n    error,\n    plugins: sortedPlugins,\n  };\n};\n\nexport const useGetUpdatable = () => {\n  const { isLoading } = useFetchStatus();\n  const { plugins: installed } = useGetAll({ isInstalled: true });\n  const updatablePlugins = installed.filter(isPluginUpdatable);\n  return {\n    isLoading,\n    updatablePlugins,\n  };\n};\n\nexport const useGetSingle = (id: string): CatalogPlugin | undefined => {\n  useFetchAll();\n  useFetchDetails(id);\n\n  return useSelector((state) => selectById(state, id));\n};\n\nexport const useGetSingleLocalWithoutDetails = (id: string): CatalogPlugin | undefined => {\n  useFetchAllLocal();\n  return useSelector((state) => selectById(state, id));\n};\n\nexport const useGetErrors = (filterByPluginType?: PluginType): PluginError[] => {\n  useFetchAll();\n\n  return useSelector(selectPluginErrors(filterByPluginType));\n};\n\nexport const useInstall = () => {\n  const dispatch = useDispatch();\n  return (id: string, version?: string, installType?: PluginStatus) => dispatch(install({ id, version, installType }));\n};\n\nexport const useUnsetInstall = () => {\n  const dispatch = useDispatch();\n\n  return () => dispatch(unsetInstall());\n};\n\nexport const useUninstall = () => {\n  const dispatch = useDispatch();\n\n  return (id: string) => dispatch(uninstall(id));\n};\n\nexport const useIsRemotePluginsAvailable = () => {\n  const error = useSelector(selectRequestError(fetchRemotePlugins.typePrefix));\n  return error === null;\n};\n\nexport const useLocalFetchStatus = () => {\n  const isLoading = useSelector(selectIsRequestPending('plugins/fetchLocal'));\n  const error = useSelector(selectRequestError('plugins/fetchLocal'));\n\n  return { isLoading, error };\n};\n\nexport const useFetchStatus = () => {\n  const isAllLoading = useSelector(selectIsRequestPending(fetchAll.typePrefix));\n  const isLocalLoading = useSelector(selectIsRequestPending('plugins/fetchLocal'));\n  const isRemoteLoading = useSelector(selectIsRequestPending('plugins/fetchRemote'));\n  const isLoading = isAllLoading || isLocalLoading || isRemoteLoading;\n  const error = useSelector(selectRequestError(fetchAll.typePrefix));\n\n  return { isLoading, error };\n};\n\nexport const useFetchDetailsStatus = () => {\n  const isLoading = useSelector(selectIsRequestPending(fetchDetails.typePrefix));\n  const error = useSelector(selectRequestError(fetchDetails.typePrefix));\n\n  return { isLoading, error };\n};\n\nexport const useInstallStatus = () => {\n  const isInstalling = useSelector(selectIsRequestPending(install.typePrefix));\n  const error = useSelector(selectRequestError(install.typePrefix));\n\n  return { isInstalling, error };\n};\n\nexport const useUninstallStatus = () => {\n  const isUninstalling = useSelector(selectIsRequestPending(uninstall.typePrefix));\n  const error = useSelector(selectRequestError(uninstall.typePrefix));\n\n  return { isUninstalling, error };\n};\n\n// Only fetches in case they were not fetched yet\nexport const useFetchAll = () => {\n  const dispatch = useDispatch();\n  const isNotFetched = useSelector(selectIsRequestNotFetched(fetchAll.typePrefix));\n\n  useEffect(() => {\n    isNotFetched && dispatch(fetchAll());\n  }, []); // eslint-disable-line\n};\n\n// Only fetches in case they were not fetched yet\nexport const useFetchAllLocal = () => {\n  const dispatch = useDispatch();\n  const isNotFetched = useSelector(selectIsRequestNotFetched(fetchAllLocal.typePrefix));\n\n  useEffect(() => {\n    isNotFetched && dispatch(fetchAllLocal());\n  }, []); // eslint-disable-line\n};\n\nexport const useFetchDetails = (id: string) => {\n  const dispatch = useDispatch();\n  const plugin = useSelector((state) => selectById(state, id));\n  const isNotFetching = !useSelector(selectIsRequestPending(fetchDetails.typePrefix));\n  const shouldFetch = isNotFetching && plugin && !plugin.details;\n\n  useEffect(() => {\n    shouldFetch && dispatch(fetchDetails(id));\n  }, [plugin]); // eslint-disable-line\n};\n\nexport const useFetchDetailsLazy = () => {\n  const dispatch = useDispatch();\n\n  return (id: string) => dispatch(fetchDetails(id));\n};\n"],"names":["getStyles","theme","userStorage","AdvisorRedirectNotice","styles","canUseAdvisor","showNotice","setShowNotice","PluginDisabledBadge","error","tooltip","errorCodeToTooltip","Badge","PluginInstalledBadge","customBadgeStyles","PluginEnterpriseBadge","plugin","Stack","PluginSignatureBadge","PluginUpdateAvailableBadge","PluginDeprecatedBadge","getBadgeColor","RoadmapLinks","useDebounceWithoutFirstRender","callBack","delay","deps","isFirstRender","debounceDeps","SearchField","value","onSearch","query","setQuery","e","disabled","onUpdateAll","updatablePluginsLength","StatusIcon","id","inProgress","isSelected","isInstalled","errorMap","Tooltip","Icon","Spinner","UpdateModalBody","plugins","pluginsNotInstalled","selectedPlugins","onCheckboxChange","numberInstalled","installationFinished","EmptyState","name","installedVersion","latestVersion","Checkbox","config","PLUGINS_UPDATE_ALL_INTERACTION_EVENT_NAME","UpdateAllModal","isOpen","onDismiss","isLoading","install","setErrorMap","setInProgress","setSelectedPlugins","initialPluginsRef","pluginsSet","installsRemaining","prevSelectedPlugins","newSelectedPlugins","initialSelectedPlugins","prevErrorMap","newErrorMap","onConfirm","onDismissClick","pluginsSelected","ConfirmModal","shouldDisableConfirm","getConfirmationText","useHistory","PluginListItemBadges","canUpdate","PluginLogo","alt","className","src","height","LOGO_SIZE","PluginListItemComponent","pathName","reportUserClickInteraction","PluginListItemSkeleton","rootProps","PluginListItem","PluginList","pathname","Grid","_","index","Browse","location","locationSearch","navModel","state","history","remotePluginsAvailable","keyword","filterBy","filterByType","sortBy","filterByOptions","areUpdatesLoading","updatablePlugins","showUpdateModal","setShowUpdateModal","disableUpdateAllButton","onFilterByChange","onFilterByTypeChange","q","subTitle","TextLink","updateAllButton","UpdateAllButton","Page","HorizontalGroup","Field","Select","RadioButtonGroup","selectRoot","selectItems","items","selectAll","debouncedTrackSearch","count","selectPlugins","filters","filteredPluginIds","filteredPlugins","selectPluginErrors","filterByPluginType","pluginErrors","selectRequest","actionType","requests","selectIsRequestPending","request","selectRequestError","useGetAll","useFetchAll","selector","useLocalFetchStatus","sortedPlugins","useGetUpdatable","useFetchStatus","installed","useGetSingle","useFetchDetails","useGetSingleLocalWithoutDetails","useFetchAllLocal","useGetErrors","useInstall","dispatch","version","installType","useUnsetInstall","useUninstall","useIsRemotePluginsAvailable","isAllLoading","isLocalLoading","isRemoteLoading","useFetchDetailsStatus","useInstallStatus","isInstalling","useUninstallStatus","isUninstalling","isNotFetched","shouldFetch","useFetchDetailsLazy"],"sourceRoot":""}