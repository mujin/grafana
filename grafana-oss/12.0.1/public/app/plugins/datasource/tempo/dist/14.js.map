{"version":3,"file":"14.js","mappings":"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","sources":["webpack://tempo/../../../../../packages/grafana-o11y-ds-frontend/src/IntervalInput/validation.ts","webpack://tempo/../../../../../packages/grafana-o11y-ds-frontend/src/IntervalInput/IntervalInput.tsx","webpack://tempo/../../../../../packages/grafana-o11y-ds-frontend/src/TraceToLogs/TagMappingInput.tsx","webpack://tempo/../../../../../packages/grafana-o11y-ds-frontend/src/TraceToLogs/TraceToLogsSettings.tsx","webpack://tempo/../../../../../packages/grafana-o11y-ds-frontend/src/TraceToMetrics/TraceToMetricsSettings.tsx","webpack://tempo/../../../../../packages/grafana-o11y-ds-frontend/src/pyroscope/ProfileTypesCascader.tsx","webpack://tempo/../../../../../packages/grafana-o11y-ds-frontend/src/TraceToProfiles/TraceToProfilesSettings.tsx","webpack://tempo/../../../../../packages/grafana-o11y-ds-frontend/src/NodeGraph/NodeGraphSettings.tsx","webpack://tempo/../../../../../packages/grafana-o11y-ds-frontend/src/SpanBar/SpanBarSettings.tsx","webpack://tempo/./configuration/QuerySettings.tsx","webpack://tempo/./configuration/ServiceGraphSettings.tsx","webpack://tempo/./configuration/StreamingSection.tsx","webpack://tempo/./configuration/TagLimitSettings.tsx","webpack://tempo/./configuration/TraceQLSearchTags.tsx","webpack://tempo/./configuration/TraceQLSearchSettings.tsx","webpack://tempo/./configuration/ConfigEditor.tsx"],"sourcesContent":["export const validateIntervalRegex = /^(-?\\d+(?:\\.\\d+)?)(ms|[Mwdhmsy])$/;\n\nexport const validateInterval = (val: string, regex = validateIntervalRegex) => {\n  const matches = val.match(regex);\n  return matches || !val ? false : true;\n};\n","import { useState } from 'react';\nimport { useDebounce } from 'react-use';\n\nimport { InlineField, Input } from '@grafana/ui';\n\nimport { validateInterval } from './validation';\n\ninterface Props {\n  value: string;\n  onChange: (val: string) => void;\n  isInvalidError: string;\n  placeholder?: string;\n  width?: number;\n  ariaLabel?: string;\n  label?: string;\n  tooltip?: string;\n  disabled?: boolean;\n  validationRegex?: RegExp;\n}\n\ninterface FieldProps {\n  labelWidth: number;\n  disabled: boolean;\n  invalid: boolean;\n  error: string;\n  label?: string;\n  tooltip?: string;\n}\n\nexport const IntervalInput = (props: Props) => {\n  const [intervalIsInvalid, setIntervalIsInvalid] = useState(() => {\n    return props.value ? validateInterval(props.value, props.validationRegex) : false;\n  });\n\n  useDebounce(\n    () => {\n      setIntervalIsInvalid(validateInterval(props.value, props.validationRegex));\n    },\n    500,\n    [props.value]\n  );\n\n  const fieldProps: FieldProps = {\n    labelWidth: 26,\n    disabled: props.disabled ?? false,\n    invalid: intervalIsInvalid,\n    error: props.isInvalidError,\n  };\n  if (props.label) {\n    fieldProps.label = props.label;\n    fieldProps.tooltip = props.tooltip || '';\n  }\n\n  return (\n    <InlineField {...fieldProps}>\n      <Input\n        type=\"text\"\n        placeholder={props.placeholder || '0'}\n        width={props.width || 40}\n        onChange={(e) => {\n          props.onChange(e.currentTarget.value);\n        }}\n        value={props.value}\n        aria-label={props.ariaLabel || 'interval input'}\n      />\n    </InlineField>\n  );\n};\n","import { css, cx } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { InlineLabel, SegmentInput, ToolbarButton, useStyles2 } from '@grafana/ui';\n\nimport { TraceToLogsTag } from './TraceToLogsSettings';\n\ninterface Props {\n  values: TraceToLogsTag[];\n  onChange: (values: TraceToLogsTag[]) => void;\n  id?: string;\n}\n\nexport const TagMappingInput = ({ values, onChange, id }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.wrapper}>\n      {values.length ? (\n        values.map((value, idx) => (\n          <div className={styles.pair} key={idx}>\n            <SegmentInput\n              id={`${id}-key-${idx}`}\n              placeholder={'Tag name'}\n              value={value.key}\n              onChange={(e) => {\n                onChange(\n                  values.map((v, i) => {\n                    if (i === idx) {\n                      return { ...v, key: String(e) };\n                    }\n                    return v;\n                  })\n                );\n              }}\n            />\n            <InlineLabel aria-label=\"equals\" className={styles.operator}>\n              as\n            </InlineLabel>\n            <SegmentInput\n              id={`${id}-value-${idx}`}\n              placeholder={'New name (optional)'}\n              value={value.value || ''}\n              onChange={(e) => {\n                onChange(\n                  values.map((v, i) => {\n                    if (i === idx) {\n                      return { ...v, value: String(e) };\n                    }\n                    return v;\n                  })\n                );\n              }}\n            />\n            <ToolbarButton\n              onClick={() => onChange([...values.slice(0, idx), ...values.slice(idx + 1)])}\n              className={cx(styles.removeTag, 'query-part')}\n              aria-label=\"Remove tag\"\n              type=\"button\"\n              icon=\"times\"\n            />\n\n            {idx === values.length - 1 ? (\n              <ToolbarButton\n                onClick={() => onChange([...values, { key: '', value: '' }])}\n                className=\"query-part\"\n                aria-label=\"Add tag\"\n                type=\"button\"\n                icon=\"plus\"\n              />\n            ) : null}\n          </div>\n        ))\n      ) : (\n        <ToolbarButton\n          icon=\"plus\"\n          onClick={() => onChange([...values, { key: '', value: '' }])}\n          className=\"query-part\"\n          aria-label=\"Add tag\"\n          type=\"button\"\n        />\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    display: 'flex',\n    flexDirection: 'column',\n    gap: `${theme.spacing(0.5)} 0`,\n  }),\n  pair: css({\n    display: 'flex',\n    justifyContent: 'start',\n    alignItems: 'center',\n  }),\n  operator: css({\n    color: theme.v1.palette.orange,\n    width: 'auto',\n  }),\n  removeTag: css({\n    marginRight: theme.spacing(0.5),\n  }),\n});\n","import { css } from '@emotion/css';\nimport { useCallback, useMemo } from 'react';\nimport * as React from 'react';\n\nimport { DataSourceJsonData, DataSourceInstanceSettings, DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { ConfigDescriptionLink, ConfigSection } from '@grafana/plugin-ui';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { InlineField, InlineFieldRow, Input, InlineSwitch } from '@grafana/ui';\n\nimport { IntervalInput } from '../IntervalInput/IntervalInput';\n\nimport { TagMappingInput } from './TagMappingInput';\n\nexport interface TraceToLogsTag {\n  key: string;\n  value?: string;\n}\n\n// @deprecated use getTraceToLogsOptions to get the v2 version of this config from jsonData\nexport interface TraceToLogsOptions {\n  datasourceUid?: string;\n  tags?: string[];\n  mappedTags?: TraceToLogsTag[];\n  mapTagNamesEnabled?: boolean;\n  spanStartTimeShift?: string;\n  spanEndTimeShift?: string;\n  filterByTraceID?: boolean;\n  filterBySpanID?: boolean;\n  lokiSearch?: boolean; // legacy\n}\n\nexport interface TraceToLogsOptionsV2 {\n  datasourceUid?: string;\n  tags?: TraceToLogsTag[];\n  spanStartTimeShift?: string;\n  spanEndTimeShift?: string;\n  filterByTraceID?: boolean;\n  filterBySpanID?: boolean;\n  query?: string;\n  customQuery: boolean;\n}\n\nexport interface TraceToLogsData extends DataSourceJsonData {\n  tracesToLogs?: TraceToLogsOptions;\n  tracesToLogsV2?: TraceToLogsOptionsV2;\n}\n\n/**\n * Gets new version of the traceToLogs config from the json data either returning directly or transforming the old\n * version to new and returning that.\n */\nexport function getTraceToLogsOptions(data?: TraceToLogsData): TraceToLogsOptionsV2 | undefined {\n  if (data?.tracesToLogsV2) {\n    return data.tracesToLogsV2;\n  }\n  if (!data?.tracesToLogs) {\n    return undefined;\n  }\n  const traceToLogs: TraceToLogsOptionsV2 = {\n    customQuery: false,\n  };\n  traceToLogs.datasourceUid = data.tracesToLogs.datasourceUid;\n  traceToLogs.tags = data.tracesToLogs.mapTagNamesEnabled\n    ? data.tracesToLogs.mappedTags\n    : data.tracesToLogs.tags?.map((tag) => ({ key: tag }));\n  traceToLogs.filterByTraceID = data.tracesToLogs.filterByTraceID;\n  traceToLogs.filterBySpanID = data.tracesToLogs.filterBySpanID;\n  traceToLogs.spanStartTimeShift = data.tracesToLogs.spanStartTimeShift;\n  traceToLogs.spanEndTimeShift = data.tracesToLogs.spanEndTimeShift;\n  return traceToLogs;\n}\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TraceToLogsData> {}\n\nexport function TraceToLogsSettings({ options, onOptionsChange }: Props) {\n  const supportedDataSourceTypes = [\n    'loki',\n    'elasticsearch',\n    'grafana-splunk-datasource', // external\n    'grafana-opensearch-datasource', // external\n    'grafana-falconlogscale-datasource', // external\n    'googlecloud-logging-datasource', // external\n  ];\n\n  const traceToLogs = useMemo(\n    (): TraceToLogsOptionsV2 => getTraceToLogsOptions(options.jsonData) || { customQuery: false },\n    [options.jsonData]\n  );\n  const { query = '', tags, customQuery } = traceToLogs;\n\n  const updateTracesToLogs = useCallback(\n    (value: Partial<TraceToLogsOptionsV2>) => {\n      // Cannot use updateDatasourcePluginJsonDataOption here as we need to update 2 keys, and they would overwrite each\n      // other as updateDatasourcePluginJsonDataOption isn't synchronized\n      onOptionsChange({\n        ...options,\n        jsonData: {\n          ...options.jsonData,\n          tracesToLogsV2: {\n            ...traceToLogs,\n            ...value,\n          },\n          tracesToLogs: undefined,\n        },\n      });\n    },\n    [onOptionsChange, options, traceToLogs]\n  );\n\n  return (\n    <div className={css({ width: '100%' })}>\n      <InlineFieldRow>\n        <InlineField\n          tooltip=\"The logs data source the trace is going to navigate to\"\n          label=\"Data source\"\n          labelWidth={26}\n        >\n          <DataSourcePicker\n            inputId=\"trace-to-logs-data-source-picker\"\n            filter={(ds) => supportedDataSourceTypes.includes(ds.type)}\n            current={traceToLogs.datasourceUid}\n            noDefault={true}\n            width={40}\n            onChange={(ds: DataSourceInstanceSettings) =>\n              updateTracesToLogs({\n                datasourceUid: ds.uid,\n              })\n            }\n            onClear={() => updateTracesToLogs({ datasourceUid: undefined })}\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <IntervalInput\n          label={getTimeShiftLabel('start')}\n          tooltip={getTimeShiftTooltip('start', '0')}\n          value={traceToLogs.spanStartTimeShift || ''}\n          onChange={(val) => {\n            updateTracesToLogs({ spanStartTimeShift: val });\n          }}\n          isInvalidError={invalidTimeShiftError}\n        />\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <IntervalInput\n          label={getTimeShiftLabel('end')}\n          tooltip={getTimeShiftTooltip('end', '0')}\n          value={traceToLogs.spanEndTimeShift || ''}\n          onChange={(val) => {\n            updateTracesToLogs({ spanEndTimeShift: val });\n          }}\n          isInvalidError={invalidTimeShiftError}\n        />\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          tooltip=\"Tags that will be used in the query. Default tags: 'cluster', 'hostname', 'namespace', 'pod', 'service.name', 'service.namespace'\"\n          label=\"Tags\"\n          labelWidth={26}\n        >\n          <TagMappingInput values={tags ?? []} onChange={(v) => updateTracesToLogs({ tags: v })} />\n        </InlineField>\n      </InlineFieldRow>\n\n      <IdFilter\n        disabled={customQuery}\n        type={'trace'}\n        id={'filterByTraceID'}\n        value={Boolean(traceToLogs.filterByTraceID)}\n        onChange={(val) => updateTracesToLogs({ filterByTraceID: val })}\n      />\n      <IdFilter\n        disabled={customQuery}\n        type={'span'}\n        id={'filterBySpanID'}\n        value={Boolean(traceToLogs.filterBySpanID)}\n        onChange={(val) => updateTracesToLogs({ filterBySpanID: val })}\n      />\n\n      <InlineFieldRow>\n        <InlineField\n          tooltip=\"Use a custom query with the possibility to interpolate variables from the trace or span\"\n          label=\"Use custom query\"\n          labelWidth={26}\n        >\n          <InlineSwitch\n            id={'customQuerySwitch'}\n            value={customQuery}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateTracesToLogs({ customQuery: event.currentTarget.checked })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      {customQuery && (\n        <InlineField\n          label=\"Query\"\n          labelWidth={26}\n          tooltip=\"The query that will run when navigating from a trace to logs data source. Interpolate tags using the `$__tags` keyword\"\n          grow\n        >\n          <Input\n            label=\"Query\"\n            type=\"text\"\n            allowFullScreen\n            value={query}\n            onChange={(e) => updateTracesToLogs({ query: e.currentTarget.value })}\n          />\n        </InlineField>\n      )}\n    </div>\n  );\n}\n\ninterface IdFilterProps {\n  type: 'trace' | 'span';\n  id: string;\n  value: boolean;\n  onChange: (val: boolean) => void;\n  disabled: boolean;\n}\nfunction IdFilter(props: IdFilterProps) {\n  return (\n    <InlineFieldRow>\n      <InlineField\n        disabled={props.disabled}\n        label={`Filter by ${props.type} ID`}\n        labelWidth={26}\n        grow\n        tooltip={`Filters logs by ${props.type} ID, where the ${props.type} ID should be part of the log line`}\n      >\n        <InlineSwitch\n          id={props.id}\n          value={props.value}\n          onChange={(event: React.SyntheticEvent<HTMLInputElement>) => props.onChange(event.currentTarget.checked)}\n        />\n      </InlineField>\n    </InlineFieldRow>\n  );\n}\n\nexport const getTimeShiftLabel = (type: 'start' | 'end') => {\n  return `Span ${type} time shift`;\n};\n\nexport const getTimeShiftTooltip = (type: 'start' | 'end', defaultVal: string) => {\n  return `Shifts the ${type} time of the span. Default: ${defaultVal} (Time units can be used here, for example: 5s, -1m, 3h)`;\n};\n\nexport const invalidTimeShiftError = 'Invalid time shift. See tooltip for examples.';\n\nexport const TraceToLogsSection = ({ options, onOptionsChange }: DataSourcePluginOptionsEditorProps) => {\n  let suffix = options.type;\n  suffix += options.type === 'tempo' ? '/configure-tempo-data-source/#trace-to-logs' : '/#trace-to-logs';\n\n  return (\n    <ConfigSection\n      title=\"Trace to logs\"\n      description={\n        <ConfigDescriptionLink\n          description=\"Navigate from a trace span to the selected data source's logs.\"\n          suffix={suffix}\n          feature=\"trace to logs\"\n        />\n      }\n      isCollapsible={true}\n      isInitiallyOpen={true}\n    >\n      <TraceToLogsSettings options={options} onOptionsChange={onOptionsChange} />\n    </ConfigSection>\n  );\n};\n","import { css } from '@emotion/css';\n\nimport {\n  DataSourceInstanceSettings,\n  DataSourceJsonData,\n  DataSourcePluginOptionsEditorProps,\n  GrafanaTheme2,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { ConfigDescriptionLink, ConfigSection } from '@grafana/plugin-ui';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { Button, InlineField, InlineFieldRow, Input, useStyles2 } from '@grafana/ui';\n\nimport { IntervalInput } from '../IntervalInput/IntervalInput';\nimport { TagMappingInput } from '../TraceToLogs/TagMappingInput';\nimport { getTimeShiftLabel, getTimeShiftTooltip, invalidTimeShiftError } from '../TraceToLogs/TraceToLogsSettings';\n\nexport interface TraceToMetricsOptions {\n  datasourceUid?: string;\n  tags?: Array<{ key: string; value: string }>;\n  queries: TraceToMetricQuery[];\n  spanStartTimeShift?: string;\n  spanEndTimeShift?: string;\n}\n\nexport interface TraceToMetricQuery {\n  name?: string;\n  query?: string;\n}\n\nexport interface TraceToMetricsData extends DataSourceJsonData {\n  tracesToMetrics?: TraceToMetricsOptions;\n}\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TraceToMetricsData> {}\n\nexport function TraceToMetricsSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={css({ width: '100%' })}>\n      <InlineFieldRow className={styles.row}>\n        <InlineField\n          tooltip=\"The Prometheus data source the trace is going to navigate to\"\n          label=\"Data source\"\n          labelWidth={26}\n        >\n          <DataSourcePicker\n            inputId=\"trace-to-metrics-data-source-picker\"\n            pluginId=\"prometheus\"\n            current={options.jsonData.tracesToMetrics?.datasourceUid}\n            noDefault={true}\n            width={40}\n            onChange={(ds: DataSourceInstanceSettings) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                ...options.jsonData.tracesToMetrics,\n                datasourceUid: ds.uid,\n              })\n            }\n            onClear={() =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                ...options.jsonData.tracesToMetrics,\n                datasourceUid: undefined,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <IntervalInput\n          label={getTimeShiftLabel('start')}\n          tooltip={getTimeShiftTooltip('start', '-2m')}\n          value={options.jsonData.tracesToMetrics?.spanStartTimeShift || ''}\n          onChange={(val) => {\n            updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n              ...options.jsonData.tracesToMetrics,\n              spanStartTimeShift: val,\n            });\n          }}\n          placeholder={'-2m'}\n          isInvalidError={invalidTimeShiftError}\n        />\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <IntervalInput\n          label={getTimeShiftLabel('end')}\n          tooltip={getTimeShiftTooltip('end', '2m')}\n          value={options.jsonData.tracesToMetrics?.spanEndTimeShift || ''}\n          onChange={(val) => {\n            updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n              ...options.jsonData.tracesToMetrics,\n              spanEndTimeShift: val,\n            });\n          }}\n          placeholder={'2m'}\n          isInvalidError={invalidTimeShiftError}\n        />\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField tooltip=\"Tags that will be used in the metrics query\" label=\"Tags\" labelWidth={26}>\n          <TagMappingInput\n            values={options.jsonData.tracesToMetrics?.tags ?? []}\n            onChange={(v) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                ...options.jsonData.tracesToMetrics,\n                tags: v,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      {options.jsonData.tracesToMetrics?.queries?.map((query, i) => (\n        <div key={i} className={styles.queryRow}>\n          <InlineField label=\"Link Label\" labelWidth={26} tooltip=\"Descriptive label for the linked query\">\n            <Input\n              label=\"Link Label\"\n              type=\"text\"\n              allowFullScreen\n              value={query.name}\n              width={40}\n              onChange={(e) => {\n                const newQueries = (options.jsonData.tracesToMetrics?.queries ?? []).map(\n                  (traceToMetricQuery, index) => {\n                    return index === i ? { ...traceToMetricQuery, name: e.currentTarget.value } : traceToMetricQuery;\n                  }\n                );\n                updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                  ...options.jsonData.tracesToMetrics,\n                  queries: newQueries,\n                });\n              }}\n            />\n          </InlineField>\n          <InlineField\n            label=\"Query\"\n            labelWidth={10}\n            tooltip=\"The Prometheus query that will run when navigating from a trace to metrics. Interpolate tags using the `$__tags` keyword\"\n            grow\n          >\n            <Input\n              label=\"Query\"\n              type=\"text\"\n              allowFullScreen\n              value={query.query}\n              onChange={(e) => {\n                const updatedQueries = (options.jsonData.tracesToMetrics?.queries ?? []).map(\n                  (traceToMetricQuery, index) => {\n                    return index === i ? { ...traceToMetricQuery, query: e.currentTarget.value } : traceToMetricQuery;\n                  }\n                );\n                updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                  ...options.jsonData.tracesToMetrics,\n                  queries: updatedQueries,\n                });\n              }}\n            />\n          </InlineField>\n\n          <Button\n            variant=\"destructive\"\n            title=\"Remove query\"\n            icon=\"times\"\n            type=\"button\"\n            onClick={() => {\n              const newQueries = options.jsonData.tracesToMetrics?.queries.filter((_, index) => index !== i);\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n                ...options.jsonData.tracesToMetrics,\n                queries: newQueries,\n              });\n            }}\n          />\n        </div>\n      ))}\n\n      <Button\n        variant=\"secondary\"\n        title=\"Add query\"\n        icon=\"plus\"\n        type=\"button\"\n        onClick={() => {\n          updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToMetrics', {\n            ...options.jsonData.tracesToMetrics,\n            queries: [...(options.jsonData.tracesToMetrics?.queries ?? []), { query: '' }],\n          });\n        }}\n      >\n        Add query\n      </Button>\n    </div>\n  );\n}\n\nexport const TraceToMetricsSection = ({ options, onOptionsChange }: DataSourcePluginOptionsEditorProps) => {\n  let suffix = options.type;\n  suffix += options.type === 'tempo' ? '/configure-tempo-data-source/#trace-to-metrics' : '/#trace-to-metrics';\n\n  return (\n    <ConfigSection\n      title=\"Trace to metrics\"\n      description={\n        <ConfigDescriptionLink\n          description=\"Navigate from a trace span to the selected data source's metrics.\"\n          suffix={suffix}\n          feature=\"trace to metrics\"\n        />\n      }\n      isCollapsible={true}\n      isInitiallyOpen={true}\n    >\n      <TraceToMetricsSettings options={options} onOptionsChange={onOptionsChange} />\n    </ConfigSection>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  infoText: {\n    paddingBottom: theme.spacing(2),\n    color: theme.colors.text.secondary,\n  },\n  row: css({\n    label: 'row',\n    alignItems: 'baseline',\n  }),\n  queryRow: css({\n    label: 'queryRow',\n    display: 'flex',\n    flexFlow: 'wrap',\n  }),\n});\n","import { useEffect, useMemo, useState } from 'react';\n\nimport { Cascader, CascaderOption } from '@grafana/ui';\n\nimport { PyroscopeDataSource } from './datasource';\nimport { ProfileTypeMessage } from './types';\n\ntype Props = {\n  initialProfileTypeId?: string;\n  profileTypes?: ProfileTypeMessage[];\n  onChange: (value: string) => void;\n  placeholder?: string;\n  width?: number;\n};\n\nexport function ProfileTypesCascader(props: Props) {\n  const cascaderOptions = useCascaderOptions(props.profileTypes);\n\n  return (\n    <Cascader\n      placeholder={props.placeholder}\n      separator={'-'}\n      displayAllSelectedLevels={true}\n      initialValue={props.initialProfileTypeId}\n      allowCustomValue={true}\n      onSelect={props.onChange}\n      options={cascaderOptions}\n      changeOnSelect={false}\n      width={props.width ?? 26}\n    />\n  );\n}\n\n// Turn profileTypes into cascader options\nfunction useCascaderOptions(profileTypes?: ProfileTypeMessage[]): CascaderOption[] {\n  return useMemo(() => {\n    if (!profileTypes) {\n      return [];\n    }\n    let mainTypes = new Map<string, CascaderOption>();\n    // Classify profile types by name then sample type.\n    // The profileTypes are something like cpu:sample:nanoseconds:sample:count or app.something.something\n    for (let profileType of profileTypes) {\n      let parts: string[] = [];\n      if (profileType.id.indexOf(':') > -1) {\n        parts = profileType.id.split(':');\n      }\n\n      const [name, type] = parts;\n\n      if (!mainTypes.has(name)) {\n        mainTypes.set(name, {\n          label: name,\n          value: name,\n          items: [],\n        });\n      }\n      mainTypes.get(name)?.items!.push({\n        label: type,\n        value: profileType.id,\n      });\n    }\n    return Array.from(mainTypes.values());\n  }, [profileTypes]);\n}\n\n/**\n * Loads the profile types.\n *\n * This is exported and not used directly in the ProfileTypesCascader component because in some case we need to know\n * the profileTypes before rendering the cascader.\n * @param datasource\n */\nexport function useProfileTypes(datasource: PyroscopeDataSource) {\n  const [profileTypes, setProfileTypes] = useState<ProfileTypeMessage[]>();\n\n  useEffect(() => {\n    (async () => {\n      const profileTypes = await datasource.getProfileTypes();\n      setProfileTypes(profileTypes);\n    })();\n  }, [datasource]);\n\n  return profileTypes;\n}\n","import { css } from '@emotion/css';\nimport { useEffect, useMemo, useState } from 'react';\nimport * as React from 'react';\nimport { useAsync } from 'react-use';\n\nimport {\n  DataSourceJsonData,\n  DataSourceInstanceSettings,\n  DataSourcePluginOptionsEditorProps,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { ConfigDescriptionLink, ConfigSection } from '@grafana/plugin-ui';\nimport { DataSourcePicker, DataSourceWithBackend, getDataSourceSrv } from '@grafana/runtime';\nimport { InlineField, InlineFieldRow, Input, InlineSwitch } from '@grafana/ui';\n\nimport { TagMappingInput } from '../TraceToLogs/TagMappingInput';\nimport { ProfileTypesCascader } from '../pyroscope/ProfileTypesCascader';\nimport { ProfileTypeMessage } from '../pyroscope/types';\n\nexport interface TraceToProfilesOptions {\n  datasourceUid?: string;\n  tags?: Array<{ key: string; value?: string }>;\n  query?: string;\n  profileTypeId?: string;\n  customQuery: boolean;\n}\n\nexport interface TraceToProfilesData extends DataSourceJsonData {\n  tracesToProfiles?: TraceToProfilesOptions;\n}\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TraceToProfilesData> {}\n\nexport function TraceToProfilesSettings({ options, onOptionsChange }: Props) {\n  const supportedDataSourceTypes = useMemo(() => ['grafana-pyroscope-datasource'], []);\n\n  const [profileTypes, setProfileTypes] = useState<ProfileTypeMessage[]>([]);\n  const profileTypesPlaceholder = useMemo(() => {\n    let placeholder = profileTypes.length === 0 ? 'No profile types found' : 'Select profile type';\n    if (!options.jsonData.tracesToProfiles?.datasourceUid) {\n      placeholder = 'Please select profiling data source';\n    }\n    return placeholder;\n  }, [options.jsonData.tracesToProfiles?.datasourceUid, profileTypes]);\n\n  const { value: dataSource } = useAsync(async () => {\n    return await getDataSourceSrv().get(options.jsonData.tracesToProfiles?.datasourceUid);\n  }, [options.jsonData.tracesToProfiles?.datasourceUid]);\n\n  const { value: pTypes } = useAsync(async () => {\n    if (\n      dataSource instanceof DataSourceWithBackend &&\n      supportedDataSourceTypes.includes(dataSource.type) &&\n      dataSource.uid === options.jsonData.tracesToProfiles?.datasourceUid\n    ) {\n      return await dataSource?.getResource('profileTypes');\n    }\n  }, [dataSource]);\n\n  useEffect(() => {\n    setProfileTypes(pTypes ?? []);\n  }, [pTypes]);\n\n  return (\n    <div className={css({ width: '100%' })}>\n      <InlineFieldRow>\n        <InlineField\n          tooltip=\"The profiles data source the trace is going to navigate to\"\n          label=\"Data source\"\n          labelWidth={26}\n        >\n          <DataSourcePicker\n            inputId=\"trace-to-profiles-data-source-picker\"\n            filter={(ds) => supportedDataSourceTypes.includes(ds.type)}\n            current={options.jsonData.tracesToProfiles?.datasourceUid}\n            noDefault={true}\n            width={40}\n            onChange={(ds: DataSourceInstanceSettings) => {\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToProfiles', {\n                ...options.jsonData.tracesToProfiles,\n                datasourceUid: ds.uid,\n              });\n            }}\n            onClear={() => {\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToProfiles', {\n                ...options.jsonData.tracesToProfiles,\n                datasourceUid: undefined,\n              });\n            }}\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          tooltip=\"Tags that will be used in the query. Default tags: 'service.name', 'service.namespace'\"\n          label=\"Tags\"\n          labelWidth={26}\n        >\n          <TagMappingInput\n            values={options.jsonData.tracesToProfiles?.tags ?? []}\n            onChange={(v) => {\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToProfiles', {\n                ...options.jsonData.tracesToProfiles,\n                tags: v,\n              });\n            }}\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField tooltip=\"Profile type that will be used in the query\" label=\"Profile type\" labelWidth={26}>\n          <ProfileTypesCascader\n            profileTypes={profileTypes}\n            placeholder={profileTypesPlaceholder}\n            initialProfileTypeId={options.jsonData.tracesToProfiles?.profileTypeId}\n            onChange={(val) => {\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToProfiles', {\n                ...options.jsonData.tracesToProfiles,\n                profileTypeId: val,\n              });\n            }}\n            width={40}\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          tooltip=\"Use a custom query with the possibility to interpolate variables from the trace or span\"\n          label=\"Use custom query\"\n          labelWidth={26}\n        >\n          <InlineSwitch\n            id={'profilesCustomQuerySwitch'}\n            value={options.jsonData.tracesToProfiles?.customQuery}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToProfiles', {\n                ...options.jsonData.tracesToProfiles,\n                customQuery: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      {options.jsonData.tracesToProfiles?.customQuery && (\n        <InlineField\n          label=\"Query\"\n          labelWidth={26}\n          tooltip=\"The query that will run when navigating from a trace to profiles data source. Interpolate tags using the `$__tags` keyword\"\n          grow\n        >\n          <Input\n            label=\"Query\"\n            type=\"text\"\n            allowFullScreen\n            value={options.jsonData.tracesToProfiles?.query || ''}\n            onChange={(e) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToProfiles', {\n                ...options.jsonData.tracesToProfiles,\n                query: e.currentTarget.value,\n              })\n            }\n          />\n        </InlineField>\n      )}\n    </div>\n  );\n}\n\nexport const TraceToProfilesSection = ({ options, onOptionsChange }: DataSourcePluginOptionsEditorProps) => {\n  return (\n    <ConfigSection\n      title=\"Trace to profiles\"\n      description={\n        <ConfigDescriptionLink\n          description=\"Navigate from a trace span to the selected data source's profiles.\"\n          suffix={`${options.type}/configure-tempo-data-source/#trace-to-profiles`}\n          feature=\"trace to profiles\"\n        />\n      }\n      isCollapsible={true}\n      isInitiallyOpen={true}\n    >\n      <TraceToProfilesSettings options={options} onOptionsChange={onOptionsChange} />\n    </ConfigSection>\n  );\n};\n","import { css } from '@emotion/css';\nimport * as React from 'react';\n\nimport {\n  DataSourceJsonData,\n  DataSourcePluginOptionsEditorProps,\n  GrafanaTheme2,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { ConfigDescriptionLink, ConfigSubSection } from '@grafana/plugin-ui';\nimport { InlineField, InlineFieldRow, InlineSwitch, useStyles2 } from '@grafana/ui';\n\nexport interface NodeGraphOptions {\n  enabled?: boolean;\n}\n\nexport interface NodeGraphData extends DataSourceJsonData {\n  nodeGraph?: NodeGraphOptions;\n}\n\ninterface Props extends DataSourcePluginOptionsEditorProps<NodeGraphData> {}\n\nexport function NodeGraphSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <InlineFieldRow className={styles.row}>\n        <InlineField\n          tooltip=\"Displays the node graph above the trace view. Default: disabled\"\n          label=\"Enable node graph\"\n          labelWidth={26}\n        >\n          <InlineSwitch\n            id=\"enableNodeGraph\"\n            value={options.jsonData.nodeGraph?.enabled}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'nodeGraph', {\n                ...options.jsonData.nodeGraph,\n                enabled: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </div>\n  );\n}\n\nexport const NodeGraphSection = ({ options, onOptionsChange }: DataSourcePluginOptionsEditorProps) => {\n  let suffix = options.type;\n  suffix += options.type === 'tempo' ? '/configure-tempo-data-source/#node-graph' : '/#node-graph';\n\n  return (\n    <ConfigSubSection\n      title=\"Node graph\"\n      description={\n        <ConfigDescriptionLink\n          description=\"Show or hide the node graph visualization.\"\n          suffix={suffix}\n          feature=\"the node graph\"\n        />\n      }\n    >\n      <NodeGraphSettings options={options} onOptionsChange={onOptionsChange} />\n    </ConfigSubSection>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  infoText: css({\n    label: 'infoText',\n    paddingBottom: theme.spacing(2),\n    color: theme.colors.text.secondary,\n  }),\n  container: css({\n    label: 'container',\n    width: '100%',\n  }),\n  row: css({\n    label: 'row',\n    alignItems: 'baseline',\n  }),\n});\n","import { css } from '@emotion/css';\n\nimport {\n  DataSourceJsonData,\n  DataSourcePluginOptionsEditorProps,\n  GrafanaTheme2,\n  toOption,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { ConfigDescriptionLink, ConfigSubSection } from '@grafana/plugin-ui';\nimport { InlineField, InlineFieldRow, Input, Select, useStyles2 } from '@grafana/ui';\n\nexport interface SpanBarOptions {\n  type?: string;\n  tag?: string;\n}\n\nexport interface SpanBarOptionsData extends DataSourceJsonData {\n  spanBar?: SpanBarOptions;\n}\n\nexport const NONE = 'None';\nexport const DURATION = 'Duration';\nexport const TAG = 'Tag';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<SpanBarOptionsData> {}\n\nexport default function SpanBarSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles2(getStyles);\n  const selectOptions = [NONE, DURATION, TAG].map(toOption);\n\n  return (\n    <div className={css({ width: '100%' })}>\n      <InlineFieldRow className={styles.row}>\n        <InlineField label=\"Label\" labelWidth={26} tooltip=\"Default: duration\" grow>\n          <Select\n            inputId=\"label\"\n            options={selectOptions}\n            value={options.jsonData.spanBar?.type || ''}\n            onChange={(v) => {\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'spanBar', {\n                ...options.jsonData.spanBar,\n                type: v?.value ?? '',\n              });\n            }}\n            placeholder=\"Duration\"\n            isClearable\n            aria-label={'select-label-name'}\n            width={40}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      {options.jsonData.spanBar?.type === TAG && (\n        <InlineFieldRow className={styles.row}>\n          <InlineField\n            label=\"Tag key\"\n            labelWidth={26}\n            tooltip=\"Tag key which will be used to get the tag value. A span's attributes and resources will be searched for the tag key\"\n          >\n            <Input\n              type=\"text\"\n              placeholder=\"Enter tag key\"\n              onChange={(v) =>\n                updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'spanBar', {\n                  ...options.jsonData.spanBar,\n                  tag: v.currentTarget.value,\n                })\n              }\n              value={options.jsonData.spanBar?.tag || ''}\n              width={40}\n            />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n    </div>\n  );\n}\n\nexport const SpanBarSection = ({ options, onOptionsChange }: DataSourcePluginOptionsEditorProps) => {\n  let suffix = options.type;\n  suffix += options.type === 'tempo' ? '/configure-tempo-data-source/#span-bar' : '/#span-bar';\n\n  return (\n    <ConfigSubSection\n      title=\"Span bar\"\n      description={\n        <ConfigDescriptionLink\n          description=\"Add additional info next to the service and operation on a span bar row in the trace view.\"\n          suffix={suffix}\n          feature=\"the span bar\"\n        />\n      }\n    >\n      <SpanBarSettings options={options} onOptionsChange={onOptionsChange} />\n    </ConfigSubSection>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  infoText: css({\n    label: 'infoText',\n    paddingBottom: theme.spacing(2),\n    color: theme.colors.text.secondary,\n  }),\n  row: css({\n    label: 'row',\n    alignItems: 'baseline',\n  }),\n});\n","import { css } from '@emotion/css';\n\nimport { DataSourcePluginOptionsEditorProps, GrafanaTheme2, updateDatasourcePluginJsonDataOption } from '@grafana/data';\nimport { IntervalInput, invalidTimeShiftError } from '@grafana/o11y-ds-frontend';\nimport { InlineField, InlineSwitch, useStyles2 } from '@grafana/ui';\n\nimport { TempoJsonData } from '../types';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TempoJsonData> {}\n\nexport function QuerySettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles2(getStyles);\n\n  const getLabel = (type: 'start' | 'end') => {\n    return `Time shift for ${type} of search`;\n  };\n\n  const getTooltip = (type: 'start' | 'end') => {\n    return `Shifts the ${type} of the time range when searching by TraceID. Searching can return traces that do not fully fall into the search time range, so we recommend using higher time shifts for longer traces. Default: 30m (Time units can be used here, for example: 5s, 1m, 3h`;\n  };\n\n  return (\n    <div className={styles.container}>\n      <InlineField\n        label=\"Use time range in query\"\n        tooltip=\"The time range can be used when there are performance issues or timeouts since it will narrow down the search to the defined range. Default: disabled\"\n        labelWidth={26}\n      >\n        <InlineSwitch\n          id=\"enable-time-shift\"\n          value={options.jsonData.traceQuery?.timeShiftEnabled || false}\n          onChange={(event) => {\n            updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'traceQuery', {\n              ...options.jsonData.traceQuery,\n              timeShiftEnabled: event.currentTarget.checked,\n            });\n          }}\n        />\n      </InlineField>\n\n      <IntervalInput\n        label={getLabel('start')}\n        tooltip={getTooltip('start')}\n        value={options.jsonData.traceQuery?.spanStartTimeShift || ''}\n        disabled={!options.jsonData.traceQuery?.timeShiftEnabled}\n        onChange={(val) => {\n          updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'traceQuery', {\n            ...options.jsonData.traceQuery,\n            spanStartTimeShift: val,\n          });\n        }}\n        isInvalidError={invalidTimeShiftError}\n      />\n\n      <IntervalInput\n        label={getLabel('end')}\n        tooltip={getTooltip('end')}\n        value={options.jsonData.traceQuery?.spanEndTimeShift || ''}\n        disabled={!options.jsonData.traceQuery?.timeShiftEnabled}\n        onChange={(val) => {\n          updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'traceQuery', {\n            ...options.jsonData.traceQuery,\n            spanEndTimeShift: val,\n          });\n        }}\n        isInvalidError={invalidTimeShiftError}\n      />\n    </div>\n  );\n}\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  infoText: css({\n    paddingBottom: theme.spacing(2),\n    color: theme.colors.text.secondary,\n  }),\n  container: css({\n    width: '100%',\n  }),\n  row: css({\n    alignItems: 'baseline',\n  }),\n});\n","import {\n  DataSourceInstanceSettings,\n  DataSourcePluginOptionsEditorProps,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { Button, InlineField, InlineFieldRow, useStyles2 } from '@grafana/ui';\n\nimport { TempoJsonData } from '../types';\n\nimport { getStyles } from './QuerySettings';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TempoJsonData> {}\n\nexport function ServiceGraphSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <InlineFieldRow className={styles.row}>\n        <InlineField\n          tooltip=\"The Prometheus data source with the service graph data\"\n          label=\"Data source\"\n          labelWidth={26}\n        >\n          <DataSourcePicker\n            inputId=\"service-graph-data-source-picker\"\n            pluginId=\"prometheus\"\n            current={options.jsonData.serviceMap?.datasourceUid}\n            noDefault={true}\n            width={40}\n            onChange={(ds: DataSourceInstanceSettings) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'serviceMap', {\n                datasourceUid: ds.uid,\n              })\n            }\n          />\n        </InlineField>\n        {options.jsonData.serviceMap?.datasourceUid ? (\n          <Button\n            type={'button'}\n            variant={'secondary'}\n            size={'sm'}\n            fill={'text'}\n            onClick={() => {\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'serviceMap', {\n                datasourceUid: undefined,\n              });\n            }}\n          >\n            Clear\n          </Button>\n        ) : null}\n      </InlineFieldRow>\n    </div>\n  );\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport {\n  DataSourceJsonData,\n  DataSourcePluginOptionsEditorProps,\n  GrafanaTheme2,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { ConfigSection } from '@grafana/plugin-ui';\nimport { InlineFieldRow, InlineField, InlineSwitch, Alert, Stack, useStyles2 } from '@grafana/ui';\n\nimport { FeatureName, featuresToTempoVersion } from '../datasource';\n\ninterface StreamingOptions extends DataSourceJsonData {\n  streamingEnabled?: {\n    search?: boolean;\n    metrics?: boolean;\n  };\n}\ninterface Props extends DataSourcePluginOptionsEditorProps<StreamingOptions> {}\n\nexport const StreamingSection = ({ options, onOptionsChange }: Props) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <ConfigSection\n      title=\"Streaming\"\n      isCollapsible={false}\n      description={\n        <Stack gap={0.5}>\n          <div>Enable streaming for different Tempo features.</div>\n          <a\n            href={'https://grafana.com/docs/tempo/latest/traceql/#stream-query-results'}\n            target={'_blank'}\n            rel=\"noreferrer\"\n            className={styles.a}\n          >\n            Learn more\n          </a>\n        </Stack>\n      }\n    >\n      <Alert severity=\"info\" title=\"Streaming and self-managed Tempo instances\">\n        If your Tempo instance is behind a load balancer or proxy that does not supporting gRPC or HTTP2, streaming will\n        probably not work and should be disabled.\n      </Alert>\n      <InlineFieldRow>\n        <InlineField\n          tooltip={`Enable streaming for search queries. Minimum required version for Tempo: ${featuresToTempoVersion[FeatureName.searchStreaming]}.`}\n          label=\"Search queries\"\n          labelWidth={26}\n        >\n          <InlineSwitch\n            id={'streamingEnabled.search'}\n            // TECHDEBT: We should check whether the feature is supported by the Tempo version,\n            // but here we don't have easily access to such information\n            value={options.jsonData.streamingEnabled?.search || false}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) => {\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'streamingEnabled', {\n                ...options.jsonData.streamingEnabled,\n                search: event.currentTarget.checked,\n              });\n            }}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <InlineField\n          tooltip={`Enable streaming for metrics queries. Minimum required version for Tempo: ${featuresToTempoVersion[FeatureName.metricsStreaming]}.`}\n          label=\"Metrics queries\"\n          labelWidth={26}\n        >\n          <InlineSwitch\n            id={'streamingEnabled.metrics'}\n            // TECHDEBT: We should check whether the feature is supported by the Tempo version,\n            // but here we don't have easily access to such information\n            value={options.jsonData.streamingEnabled?.metrics || false}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) => {\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'streamingEnabled', {\n                ...options.jsonData.streamingEnabled,\n                metrics: event.currentTarget.checked,\n              });\n            }}\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </ConfigSection>\n  );\n};\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    a: css({\n      color: theme.colors.text.link,\n      textDecoration: 'underline',\n      marginLeft: '5px',\n      '&:hover': {\n        textDecoration: 'none',\n      },\n    }),\n  };\n};\n","import { css } from '@emotion/css';\n\nimport {\n  DataSourceJsonData,\n  DataSourcePluginOptionsEditorProps,\n  GrafanaTheme2,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { ConfigDescriptionLink, ConfigSubSection } from '@grafana/plugin-ui';\nimport { InlineField, InlineFieldRow, Input, useStyles2 } from '@grafana/ui';\n\nexport interface TagLimitOptions extends DataSourceJsonData {\n  tagLimit?: number;\n}\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TagLimitOptions> {}\n\nexport default function TagLimitSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={css({ width: '100%' })}>\n      <InlineFieldRow className={styles.row}>\n        <InlineField\n          label=\"Max tags and tag values\"\n          labelWidth={26}\n          tooltip=\"Specify the max number of tags and tag values to display in the Tempo editor. Default: 5000\"\n        >\n          <Input\n            type=\"number\"\n            placeholder=\"5000\"\n            onChange={(v) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tagLimit', v.currentTarget.value)\n            }\n            value={options.jsonData.tagLimit || ''}\n            width={40}\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </div>\n  );\n}\n\nexport const TagLimitSection = ({ options, onOptionsChange }: DataSourcePluginOptionsEditorProps) => {\n  return (\n    <ConfigSubSection\n      title=\"Tag limit\"\n      description={\n        <ConfigDescriptionLink\n          description=\"Specify the limit for tags and tag values.\"\n          suffix={'/#tag-limit'}\n          feature=\"the tag limit\"\n        />\n      }\n    >\n      <TagLimitSettings options={options} onOptionsChange={onOptionsChange} />\n    </ConfigSubSection>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  infoText: css({\n    label: 'infoText',\n    paddingBottom: theme.spacing(2),\n    color: theme.colors.text.secondary,\n  }),\n  row: css({\n    label: 'row',\n    alignItems: 'baseline',\n  }),\n});\n","import { useCallback, useEffect } from 'react';\nimport useAsync from 'react-use/lib/useAsync';\n\nimport { DataSourcePluginOptionsEditorProps, updateDatasourcePluginJsonDataOption } from '@grafana/data';\nimport { Alert } from '@grafana/ui';\n\nimport TagsInput from '../SearchTraceQLEditor/TagsInput';\nimport { replaceAt } from '../SearchTraceQLEditor/utils';\nimport { TraceqlFilter, TraceqlSearchScope } from '../dataquery.gen';\nimport { TempoDatasource } from '../datasource';\nimport { TempoJsonData } from '../types';\nimport { getErrorMessage } from '../utils';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TempoJsonData> {\n  datasource?: TempoDatasource;\n}\n\nexport function TraceQLSearchTags({ options, onOptionsChange, datasource }: Props) {\n  const fetchTags = async () => {\n    if (!datasource) {\n      throw new Error('Unable to retrieve datasource');\n    }\n\n    try {\n      await datasource.languageProvider.start();\n    } catch (err) {\n      // @ts-ignore\n      throw new Error(getErrorMessage(err.data.message, 'Unable to query Tempo'));\n    }\n  };\n\n  const { error, loading } = useAsync(fetchTags, [datasource, options]);\n\n  const updateFilter = useCallback(\n    (s: TraceqlFilter) => {\n      let copy = options.jsonData.search?.filters;\n      copy ||= [];\n      const indexOfFilter = copy.findIndex((f) => f.id === s.id);\n      if (indexOfFilter >= 0) {\n        // update in place if the filter already exists, for consistency and to avoid UI bugs\n        copy = replaceAt(copy, indexOfFilter, s);\n      } else {\n        copy.push(s);\n      }\n      updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'search', {\n        ...options.jsonData.search,\n        filters: copy,\n      });\n    },\n    [onOptionsChange, options]\n  );\n\n  const deleteFilter = (s: TraceqlFilter) => {\n    updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'search', {\n      ...options.jsonData.search,\n      filters: options.jsonData.search?.filters?.filter((f) => f.id !== s.id),\n    });\n  };\n\n  useEffect(() => {\n    if (!options.jsonData.search?.filters) {\n      updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'search', {\n        ...options.jsonData.search,\n        filters: [\n          {\n            id: 'service-name',\n            tag: 'service.name',\n            operator: '=',\n            scope: TraceqlSearchScope.Resource,\n          },\n          { id: 'span-name', tag: 'name', operator: '=', scope: TraceqlSearchScope.Span },\n        ],\n      });\n    }\n  }, [onOptionsChange, options]);\n\n  // filter out tags that already exist in TraceQLSearch editor\n  const staticTags = ['duration'];\n\n  const missingTag = options.jsonData.search?.filters?.find((f) => !f.tag);\n\n  return (\n    <>\n      {datasource ? (\n        <TagsInput\n          updateFilter={updateFilter}\n          deleteFilter={deleteFilter}\n          filters={options.jsonData.search?.filters || []}\n          datasource={datasource}\n          setError={() => {}}\n          staticTags={staticTags}\n          isTagsLoading={loading}\n          hideValues={true}\n          generateQueryWithoutFilter={() => '{}'}\n        />\n      ) : (\n        <div>Invalid data source, please create a valid data source and try again</div>\n      )}\n      {error && (\n        <Alert title={'Unable to fetch TraceQL tags'} severity={'error'} topSpacing={1}>\n          {error.message}\n        </Alert>\n      )}\n      {missingTag && (\n        <Alert title={'Please ensure each filter has a selected tag'} severity={'warning'} topSpacing={1}></Alert>\n      )}\n    </>\n  );\n}\n","import * as React from 'react';\nimport useAsync from 'react-use/lib/useAsync';\n\nimport { DataSourcePluginOptionsEditorProps, updateDatasourcePluginJsonDataOption } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { InlineField, InlineFieldRow, InlineSwitch, useStyles2 } from '@grafana/ui';\n\nimport { TempoDatasource } from '../datasource';\nimport { TempoJsonData } from '../types';\n\nimport { getStyles } from './QuerySettings';\nimport { TraceQLSearchTags } from './TraceQLSearchTags';\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TempoJsonData> {}\n\nexport function TraceQLSearchSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles2(getStyles);\n  const dataSourceSrv = getDataSourceSrv();\n  const fetchDatasource = async () => {\n    return (await dataSourceSrv.get({ type: options.type, uid: options.uid })) as TempoDatasource;\n  };\n\n  const { value: datasource } = useAsync(fetchDatasource, [dataSourceSrv, options]);\n\n  return (\n    <div className={styles.container}>\n      <InlineFieldRow className={styles.row}>\n        <InlineField tooltip=\"Removes the search tab from the query editor\" label=\"Hide search\" labelWidth={26}>\n          <InlineSwitch\n            id=\"hideSearch\"\n            value={options.jsonData.search?.hide}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'search', {\n                ...options.jsonData.search,\n                hide: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow className={styles.row}>\n        <InlineField tooltip=\"Configures which fields are available in the UI\" label=\"Static filters\" labelWidth={26}>\n          <TraceQLSearchTags datasource={datasource} options={options} onOptionsChange={onOptionsChange} />\n        </InlineField>\n      </InlineFieldRow>\n    </div>\n  );\n}\n","import { css } from '@emotion/css';\n\nimport { DataSourcePluginOptionsEditorProps, GrafanaTheme2 } from '@grafana/data';\nimport {\n  NodeGraphSection,\n  SpanBarSection,\n  TraceToLogsSection,\n  TraceToMetricsSection,\n  TraceToProfilesSection,\n} from '@grafana/o11y-ds-frontend';\nimport {\n  AdvancedHttpSettings,\n  Auth,\n  ConfigSection,\n  ConfigDescriptionLink,\n  ConfigSubSection,\n  ConnectionSettings,\n  convertLegacyAuthProps,\n  DataSourceDescription,\n} from '@grafana/plugin-ui';\nimport { config } from '@grafana/runtime';\nimport { SecureSocksProxySettings, useStyles2, Divider, Stack } from '@grafana/ui';\n\nimport { QuerySettings } from './QuerySettings';\nimport { ServiceGraphSettings } from './ServiceGraphSettings';\nimport { StreamingSection } from './StreamingSection';\nimport { TagLimitSection } from './TagLimitSettings';\nimport { TraceQLSearchSettings } from './TraceQLSearchSettings';\n\nexport type ConfigEditorProps = DataSourcePluginOptionsEditorProps;\n\nconst ConfigEditor = ({ options, onOptionsChange }: ConfigEditorProps) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <DataSourceDescription\n        dataSourceName=\"Tempo\"\n        docsLink=\"https://grafana.com/docs/grafana/latest/datasources/tempo\"\n        hasRequiredFields={false}\n      />\n\n      <Divider spacing={4} />\n      <ConnectionSettings config={options} onChange={onOptionsChange} urlPlaceholder=\"http://localhost:3200\" />\n\n      <Divider spacing={4} />\n      <Auth\n        {...convertLegacyAuthProps({\n          config: options,\n          onChange: onOptionsChange,\n        })}\n      />\n      <Divider spacing={4} />\n\n      <StreamingSection options={options} onOptionsChange={onOptionsChange} />\n      <Divider spacing={4} />\n\n      <TraceToLogsSection options={options} onOptionsChange={onOptionsChange} />\n      <Divider spacing={4} />\n\n      <TraceToMetricsSection options={options} onOptionsChange={onOptionsChange} />\n      <Divider spacing={4} />\n\n      <TraceToProfilesSection options={options} onOptionsChange={onOptionsChange} />\n      <Divider spacing={4} />\n\n      <ConfigSection\n        title=\"Additional settings\"\n        description=\"Additional settings are optional settings that can be configured for more control over your data source.\"\n        isCollapsible={true}\n        isInitiallyOpen={false}\n      >\n        <Stack gap={5} direction=\"column\">\n          <AdvancedHttpSettings config={options} onChange={onOptionsChange} />\n\n          {config.secureSocksDSProxyEnabled && (\n            <SecureSocksProxySettings options={options} onOptionsChange={onOptionsChange} />\n          )}\n\n          <ConfigSubSection\n            title=\"Service graph\"\n            description={\n              <ConfigDescriptionLink\n                description=\"Select a Prometheus data source that contains the service graph data.\"\n                suffix=\"tempo/configure-tempo-data-source/#service-graph\"\n                feature=\"the service graph\"\n              />\n            }\n          >\n            <ServiceGraphSettings options={options} onOptionsChange={onOptionsChange} />\n          </ConfigSubSection>\n\n          <NodeGraphSection options={options} onOptionsChange={onOptionsChange} />\n\n          <ConfigSubSection\n            title=\"Tempo search\"\n            description={\n              <ConfigDescriptionLink\n                description=\"Modify how traces are searched.\"\n                suffix=\"tempo/configure-tempo-data-source/#tempo-search\"\n                feature=\"Tempo search\"\n              />\n            }\n          >\n            <TraceQLSearchSettings options={options} onOptionsChange={onOptionsChange} />\n          </ConfigSubSection>\n\n          <ConfigSubSection\n            title=\"TraceID query\"\n            description={\n              <ConfigDescriptionLink\n                description=\"Modify how TraceID queries are run.\"\n                suffix=\"tempo/configure-tempo-data-source/#traceid-query\"\n                feature=\"the TraceID query\"\n              />\n            }\n          >\n            <QuerySettings options={options} onOptionsChange={onOptionsChange} />\n          </ConfigSubSection>\n\n          <SpanBarSection options={options} onOptionsChange={onOptionsChange} />\n\n          <TagLimitSection options={options} onOptionsChange={onOptionsChange} />\n        </Stack>\n      </ConfigSection>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    marginBottom: theme.spacing(2),\n    maxWidth: '900px',\n  }),\n});\n\nexport default ConfigEditor;\n"],"names":["validateIntervalRegex","validateInterval","val","regex","match","IntervalInput","props","intervalIsInvalid","setIntervalIsInvalid","useState","value","validationRegex","useDebounce","fieldProps","labelWidth","disabled","invalid","error","isInvalidError","label","tooltip","InlineField","Input","type","placeholder","width","onChange","e","currentTarget","aria-label","ariaLabel","TagMappingInput","values","id","styles","useStyles2","getStyles","div","className","wrapper","length","map","idx","pair","SegmentInput","key","v","i","String","InlineLabel","operator","ToolbarButton","onClick","slice","cx","removeTag","icon","theme","css","display","flexDirection","gap","spacing","justifyContent","alignItems","color","v1","palette","orange","marginRight","TraceToLogsSettings","options","onOptionsChange","supportedDataSourceTypes","traceToLogs","useMemo","data","tracesToLogsV2","tracesToLogs","customQuery","datasourceUid","tags","mapTagNamesEnabled","mappedTags","tag","filterByTraceID","filterBySpanID","spanStartTimeShift","spanEndTimeShift","getTraceToLogsOptions","jsonData","query","updateTracesToLogs","useCallback","undefined","InlineFieldRow","DataSourcePicker","inputId","filter","ds","includes","current","noDefault","uid","onClear","getTimeShiftLabel","getTimeShiftTooltip","invalidTimeShiftError","IdFilter","Boolean","InlineSwitch","event","checked","grow","allowFullScreen","defaultVal","TraceToLogsSection","suffix","ConfigSection","title","description","ConfigDescriptionLink","feature","isCollapsible","isInitiallyOpen","TraceToMetricsSettings","row","pluginId","tracesToMetrics","updateDatasourcePluginJsonDataOption","queries","queryRow","name","newQueries","traceToMetricQuery","index","updatedQueries","Button","variant","_","TraceToMetricsSection","infoText","paddingBottom","colors","text","secondary","flexFlow","ProfileTypesCascader","cascaderOptions","profileTypes","mainTypes","Map","profileType","parts","indexOf","split","has","set","items","get","push","Array","from","Cascader","separator","displayAllSelectedLevels","initialValue","initialProfileTypeId","allowCustomValue","onSelect","changeOnSelect","TraceToProfilesSettings","setProfileTypes","profileTypesPlaceholder","tracesToProfiles","dataSource","useAsync","getDataSourceSrv","pTypes","DataSourceWithBackend","getResource","useEffect","profileTypeId","TraceToProfilesSection","NodeGraphSettings","container","nodeGraph","enabled","NodeGraphSection","ConfigSubSection","NONE","DURATION","TAG","SpanBarSettings","selectOptions","toOption","Select","spanBar","isClearable","SpanBarSection","QuerySettings","getLabel","getTooltip","traceQuery","timeShiftEnabled","ServiceGraphSettings","serviceMap","size","fill","StreamingSection","Stack","a","href","target","rel","Alert","severity","featuresToTempoVersion","FeatureName","searchStreaming","streamingEnabled","search","metricsStreaming","metrics","link","textDecoration","marginLeft","TagLimitSettings","tagLimit","TagLimitSection","TraceQLSearchTags","datasource","fetchTags","Error","languageProvider","start","err","getErrorMessage","message","loading","updateFilter","s","copy","filters","indexOfFilter","findIndex","f","replaceAt","scope","TraceqlSearchScope","Resource","Span","missingTag","find","TagsInput","deleteFilter","setError","staticTags","isTagsLoading","hideValues","generateQueryWithoutFilter","topSpacing","TraceQLSearchSettings","dataSourceSrv","fetchDatasource","hide","marginBottom","maxWidth","DataSourceDescription","dataSourceName","docsLink","hasRequiredFields","Divider","ConnectionSettings","config","urlPlaceholder","Auth","convertLegacyAuthProps","direction","AdvancedHttpSettings","secureSocksDSProxyEnabled","SecureSocksProxySettings"],"sourceRoot":""}