{"version":3,"file":"5080.js","mappings":"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","sources":["webpack://tempo/./_importedDependencies/datasources/prometheus/RawQuery.tsx","webpack://tempo/./_importedDependencies/datasources/prometheus/QueryOptionGroup.tsx","webpack://tempo/./traceql/TempoQueryBuilderOptions.tsx","webpack://tempo/./SearchTraceQLEditor/AggregateByAlert.tsx","webpack://tempo/./SearchTraceQLEditor/DurationInput.tsx","webpack://tempo/./SearchTraceQLEditor/InlineSearchField.tsx","webpack://tempo/./SearchTraceQLEditor/TraceQLSearch.tsx","webpack://tempo/./_importedDependencies/components/AdHocFilter/AdHocFilterKey.tsx","webpack://tempo/./_importedDependencies/components/AdHocFilter/AdHocFilterValue.tsx","webpack://tempo/./_importedDependencies/components/AdHocFilter/OperatorSegment.tsx","webpack://tempo/./_importedDependencies/components/AdHocFilter/AdHocFilterRenderer.tsx","webpack://tempo/./_importedDependencies/components/AdHocFilter/AdHocFilterBuilder.tsx","webpack://tempo/./_importedDependencies/components/AdHocFilter/ConditionSegment.tsx","webpack://tempo/./_importedDependencies/components/AdHocFilter/AdHocFilter.tsx","webpack://tempo/./ServiceGraphSection.tsx","webpack://tempo/./types.ts","webpack://tempo/./traceql/situation.ts","webpack://tempo/./traceql/autocomplete.ts","webpack://tempo/./traceql/highlighting.ts","webpack://tempo/./traceql/TraceQLEditor.tsx","webpack://tempo/./traceql/QueryEditor.tsx","webpack://tempo/./QueryField.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport Prism, { Grammar } from 'prismjs';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useTheme2 } from '@grafana/ui';\n\nexport interface Props {\n  query: string;\n  lang: {\n    grammar: Grammar;\n    name: string;\n  };\n  className?: string;\n}\nexport function RawQuery({ query, lang, className }: Props) {\n  const theme = useTheme2();\n  const styles = getStyles(theme);\n  const highlighted = Prism.highlight(query, lang.grammar, lang.name);\n\n  return (\n    <div\n      className={cx(styles.editorField, 'prism-syntax-highlight', className)}\n      aria-label=\"selector\"\n      dangerouslySetInnerHTML={{ __html: highlighted }}\n    />\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    editorField: css({\n      fontFamily: theme.typography.fontFamilyMonospace,\n      fontSize: theme.typography.bodySmall.fontSize,\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport * as React from 'react';\nimport { useToggle } from 'react-use';\n\nimport { getValueFormat, GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Collapse, Icon, Tooltip, useStyles2, Stack } from '@grafana/ui';\n\nimport { QueryStats } from '../loki/types';\n\nexport interface Props {\n  title: string;\n  collapsedInfo: string[];\n  queryStats?: QueryStats | null;\n  children: React.ReactNode;\n  onToggle?: (isOpen: boolean) => void;\n  isOpen?: boolean;\n}\n\nexport function QueryOptionGroup({ title, children, collapsedInfo, queryStats, onToggle, isOpen: propsIsOpen }: Props) {\n  const [isOpen, toggleOpen] = useToggle(false);\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.wrapper}>\n      <Collapse\n        className={styles.collapse}\n        collapsible\n        isOpen={propsIsOpen ?? isOpen}\n        onToggle={onToggle ?? toggleOpen}\n        label={\n          <Stack gap={0}>\n            <h6 className={styles.title}>{title}</h6>\n            {!isOpen && (\n              <div className={styles.description}>\n                {collapsedInfo.map((x, i) => (\n                  <span key={i}>{x}</span>\n                ))}\n              </div>\n            )}\n          </Stack>\n        }\n      >\n        <div className={styles.body}>{children}</div>\n      </Collapse>\n\n      {queryStats && config.featureToggles.lokiQuerySplitting && (\n        <Tooltip content=\"Note: the query will be split into multiple parts and executed in sequence. Query limits will only apply each individual part.\">\n          <Icon tabIndex={0} name=\"info-circle\" className={styles.tooltip} size=\"sm\" />\n        </Tooltip>\n      )}\n\n      {queryStats && <p className={styles.stats}>{generateQueryStats(queryStats)}</p>}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    collapse: css({\n      backgroundColor: 'unset',\n      border: 'unset',\n      marginBottom: 0,\n\n      ['> button']: {\n        padding: theme.spacing(0, 1),\n      },\n    }),\n    wrapper: css({\n      width: '100%',\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'baseline',\n    }),\n    title: css({\n      flexGrow: 1,\n      overflow: 'hidden',\n      fontSize: theme.typography.bodySmall.fontSize,\n      fontWeight: theme.typography.fontWeightMedium,\n      margin: 0,\n    }),\n    description: css({\n      color: theme.colors.text.secondary,\n      fontSize: theme.typography.bodySmall.fontSize,\n      fontWeight: theme.typography.bodySmall.fontWeight,\n      paddingLeft: theme.spacing(2),\n      gap: theme.spacing(2),\n      display: 'flex',\n    }),\n    body: css({\n      display: 'flex',\n      gap: theme.spacing(2),\n      flexWrap: 'wrap',\n    }),\n    stats: css({\n      margin: '0px',\n      color: theme.colors.text.secondary,\n      fontSize: theme.typography.bodySmall.fontSize,\n    }),\n    tooltip: css({\n      marginRight: theme.spacing(0.25),\n    }),\n  };\n};\n\nconst generateQueryStats = (queryStats: QueryStats) => {\n  if (queryStats.message) {\n    return queryStats.message;\n  }\n\n  return `This query will process approximately ${convertUnits(queryStats)}.`;\n};\n\nconst convertUnits = (queryStats: QueryStats): string => {\n  const { text, suffix } = getValueFormat('bytes')(queryStats.bytes, 1);\n  return text + suffix;\n};\n","import { css } from '@emotion/css';\nimport * as React from 'react';\nimport { useToggle } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { EditorField, EditorRow } from '@grafana/plugin-ui';\nimport { AutoSizeInput, RadioButtonGroup, useStyles2 } from '@grafana/ui';\n\nimport { QueryOptionGroup } from '../_importedDependencies/datasources/prometheus/QueryOptionGroup';\nimport { SearchTableType, MetricsQueryType } from '../dataquery.gen';\nimport { DEFAULT_LIMIT, DEFAULT_SPSS } from '../datasource';\nimport { TempoQuery } from '../types';\n\ninterface Props {\n  onChange: (value: TempoQuery) => void;\n  query: Partial<TempoQuery> & TempoQuery;\n  searchStreaming: boolean;\n  metricsStreaming: boolean;\n}\n\n/**\n * Parse a string value to integer. If the conversion fails, for example because we are prosessing an empty value for\n * a field, return a fallback (default) value.\n *\n * @param val the value to be parsed to an integer\n * @param fallback the fallback value\n * @returns the converted value or the fallback value if the conversion fails\n */\nconst parseIntWithFallback = (val: string, fallback: number) => {\n  const parsed = parseInt(val, 10);\n  return isNaN(parsed) ? fallback : parsed;\n};\n\nexport const TempoQueryBuilderOptions = React.memo<Props>(({ onChange, query, searchStreaming, metricsStreaming }) => {\n  const styles = useStyles2(getStyles);\n  const [isOpen, toggleOpen] = useToggle(false);\n\n  if (!query.hasOwnProperty('limit')) {\n    query.limit = DEFAULT_LIMIT;\n  }\n\n  if (!query.hasOwnProperty('tableType')) {\n    query.tableType = SearchTableType.Traces;\n  }\n\n  if (!query.hasOwnProperty('metricsQueryType')) {\n    query.metricsQueryType = MetricsQueryType.Range;\n  }\n\n  const onLimitChange = (e: React.FormEvent<HTMLInputElement>) => {\n    onChange({ ...query, limit: parseIntWithFallback(e.currentTarget.value, DEFAULT_LIMIT) });\n  };\n  const onSpssChange = (e: React.FormEvent<HTMLInputElement>) => {\n    onChange({ ...query, spss: parseIntWithFallback(e.currentTarget.value, DEFAULT_SPSS) });\n  };\n  const onTableTypeChange = (val: SearchTableType) => {\n    onChange({ ...query, tableType: val });\n  };\n  const onMetricsQueryTypeChange = (val: MetricsQueryType) => {\n    onChange({ ...query, metricsQueryType: val });\n  };\n  const onStepChange = (e: React.FormEvent<HTMLInputElement>) => {\n    onChange({ ...query, step: e.currentTarget.value });\n  };\n\n  // There's a bug in Tempo which causes the exemplars param to be ignored. It's commented out for now.\n\n  // const onExemplarsChange = (e: React.FormEvent<HTMLInputElement>) => {\n  //   const exemplars = parseInt(e.currentTarget.value, 10);\n  //   if (!isNaN(exemplars) && exemplars >= 0) {\n  //     onChange({ ...query, exemplars });\n  //   } else {\n  //     onChange({ ...query, exemplars: undefined });\n  //   }\n  // };\n\n  const collapsedSearchOptions = [\n    `Limit: ${query.limit || DEFAULT_LIMIT}`,\n    `Spans Limit: ${query.spss || DEFAULT_SPSS}`,\n    `Table Format: ${query.tableType === SearchTableType.Traces ? 'Traces' : 'Spans'}`,\n    '|',\n    `Streaming: ${searchStreaming ? 'Enabled' : 'Disabled'}`,\n  ];\n\n  const collapsedMetricsOptions = [\n    `Step: ${query.step || 'auto'}`,\n    `Type: ${query.metricsQueryType === MetricsQueryType.Range ? 'Range' : 'Instant'}`,\n    '|',\n    `Streaming: ${metricsStreaming ? 'Enabled' : 'Disabled'}`,\n    // `Exemplars: ${query.exemplars !== undefined ? query.exemplars : 'auto'}`,\n  ];\n\n  return (\n    <EditorRow>\n      <div className={styles.options}>\n        <QueryOptionGroup\n          title=\"Search Options\"\n          collapsedInfo={collapsedSearchOptions}\n          isOpen={isOpen}\n          onToggle={toggleOpen}\n        >\n          <EditorField label=\"Limit\" tooltip=\"Maximum number of traces to return.\">\n            <AutoSizeInput\n              className=\"width-4\"\n              placeholder=\"auto\"\n              type=\"number\"\n              min={1}\n              defaultValue={query.limit || DEFAULT_LIMIT}\n              onCommitChange={onLimitChange}\n              value={query.limit}\n            />\n          </EditorField>\n          <EditorField label=\"Span Limit\" tooltip=\"Maximum number of spans to return for each span set.\">\n            <AutoSizeInput\n              className=\"width-4\"\n              placeholder=\"auto\"\n              type=\"number\"\n              min={1}\n              defaultValue={query.spss || DEFAULT_SPSS}\n              onCommitChange={onSpssChange}\n              value={query.spss}\n            />\n          </EditorField>\n          <EditorField label=\"Table Format\" tooltip=\"How the query data should be displayed in the results table\">\n            <RadioButtonGroup\n              options={[\n                { label: 'Traces', value: SearchTableType.Traces },\n                { label: 'Spans', value: SearchTableType.Spans },\n              ]}\n              value={query.tableType}\n              onChange={onTableTypeChange}\n            />\n          </EditorField>\n          <EditorField label=\"Streaming\" tooltip={<StreamingTooltip />} tooltipInteractive>\n            <div>{searchStreaming ? 'Enabled' : 'Disabled'}</div>\n          </EditorField>\n        </QueryOptionGroup>\n\n        <QueryOptionGroup\n          title=\"Metrics Options\"\n          collapsedInfo={collapsedMetricsOptions}\n          isOpen={isOpen}\n          onToggle={toggleOpen}\n        >\n          <EditorField\n            label=\"Step\"\n            tooltip=\"Defines the step for metric queries. Use duration notation, for example 30s or 1m\"\n          >\n            <AutoSizeInput\n              className=\"width-4\"\n              placeholder=\"auto\"\n              type=\"string\"\n              defaultValue={query.step}\n              onCommitChange={onStepChange}\n              value={query.step}\n            />\n          </EditorField>\n          <EditorField label=\"Type\" tooltip=\"Type of metrics query to run\">\n            <RadioButtonGroup\n              options={[\n                { label: 'Range', value: MetricsQueryType.Range },\n                { label: 'Instant', value: MetricsQueryType.Instant },\n              ]}\n              value={query.metricsQueryType}\n              onChange={onMetricsQueryTypeChange}\n            />\n          </EditorField>\n\n          <EditorField label=\"Streaming\" tooltip={<StreamingTooltip />} tooltipInteractive>\n            <div>{metricsStreaming ? 'Enabled' : 'Disabled'}</div>\n          </EditorField>\n          {/*<EditorField*/}\n          {/*  label=\"Exemplars\"*/}\n          {/*  tooltip=\"Defines the amount of exemplars to request for metric queries. A value of 0 means no exemplars.\"*/}\n          {/*>*/}\n          {/*  <AutoSizeInput*/}\n          {/*    className=\"width-4\"*/}\n          {/*    placeholder=\"auto\"*/}\n          {/*    type=\"string\"*/}\n          {/*    defaultValue={query.exemplars}*/}\n          {/*    onCommitChange={onExemplarsChange}*/}\n          {/*    value={query.exemplars}*/}\n          {/*  />*/}\n          {/*</EditorField>*/}\n        </QueryOptionGroup>\n      </div>\n    </EditorRow>\n  );\n});\n\nconst StreamingTooltip = () => {\n  return (\n    <div style={{ display: 'flex', gap: '4px' }}>\n      <span>\n        Indicates if streaming is currently enabled. Streaming allows you to view partial query results before the\n        entire query completes.\n      </span>\n      <a\n        href={'https://grafana.com/docs/tempo/latest/traceql/#stream-query-results'}\n        aria-label={'Learn more about streaming query results'}\n        target={'_blank'}\n        rel=\"noreferrer\"\n        style={{ textDecoration: 'underline' }}\n      >\n        Learn more\n      </a>\n    </div>\n  );\n};\n\nTempoQueryBuilderOptions.displayName = 'TempoQueryBuilderOptions';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    options: css({\n      display: 'flex',\n      width: '-webkit-fill-available',\n      gap: theme.spacing(1),\n\n      '> div': {\n        width: 'auto',\n      },\n    }),\n  };\n};\n","import React from 'react';\n\nimport { Alert, Button } from '@grafana/ui';\n\nimport { TempoQuery } from '../dataquery.gen';\n\nexport function AggregateByAlert({\n  query,\n  onChange,\n}: {\n  query: TempoQuery;\n  onChange?: () => void;\n}): React.ReactNode | null {\n  return query.groupBy ? (\n    <Alert title=\"\" severity=\"info\">\n      The aggregate by feature has been removed. We recommend using Traces Drildown app instead. &nbsp;\n      <Button onClick={onChange}>Remove aggregate by from this query</Button>\n    </Alert>\n  ) : null;\n}\n","import { css } from '@emotion/css';\n\nimport { Select, HorizontalGroup, Input, useStyles2 } from '@grafana/ui';\n\nimport { TraceqlFilter } from '../dataquery.gen';\n\nimport { operatorSelectableValue } from './utils';\n\ninterface Props {\n  filter: TraceqlFilter;\n  updateFilter: (f: TraceqlFilter) => void;\n  isTagsLoading?: boolean;\n  operators: string[];\n}\n\n// Support template variables (e.g., `$dur`, `$v_1`) and durations (e.g., `300µs`, `1.2ms`)\nconst validationRegex = /^(\\$\\w+)|(\\d+(?:\\.\\d)?\\d*(?:us|µs|ns|ms|s|m|h))$/;\n\nconst getStyles = () => ({\n  noBoxShadow: css({\n    boxShadow: 'none',\n    '*:focus': {\n      boxShadow: 'none',\n    },\n  }),\n});\n\nconst DurationInput = ({ filter, operators, updateFilter }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  let invalid = false;\n  if (typeof filter.value === 'string') {\n    invalid = filter.value ? !validationRegex.test(filter.value.concat('')) : false;\n  }\n\n  return (\n    <HorizontalGroup spacing={'none'}>\n      <Select\n        className={styles.noBoxShadow}\n        inputId={`${filter.id}-operator`}\n        options={operators.map(operatorSelectableValue)}\n        value={filter.operator}\n        onChange={(v) => {\n          updateFilter({ ...filter, operator: v?.value });\n        }}\n        isClearable={false}\n        aria-label={`select ${filter.id} operator`}\n        allowCustomValue={true}\n        width={8}\n      />\n      <Input\n        className={styles.noBoxShadow}\n        value={filter.value}\n        onChange={(v) => {\n          updateFilter({ ...filter, value: v.currentTarget.value });\n        }}\n        placeholder=\"e.g. 100ms, 1.2s\"\n        aria-label={`select ${filter.id} value`}\n        invalid={invalid}\n        width={18}\n      />\n    </HorizontalGroup>\n  );\n};\n\nexport default DurationInput;\n","import * as React from 'react';\n\nimport { InlineFieldRow, InlineField } from '@grafana/ui';\n\ninterface Props {\n  label: string;\n  tooltip?: string;\n  children: React.ReactElement;\n}\nconst SearchField = ({ label, tooltip, children }: Props) => {\n  return (\n    <InlineFieldRow>\n      <InlineField label={label} labelWidth={28} grow tooltip={tooltip}>\n        {children}\n      </InlineField>\n    </InlineFieldRow>\n  );\n};\n\nexport default SearchField;\n","import { css } from '@emotion/css';\nimport { useCallback, useEffect, useState } from 'react';\n\nimport { CoreApp, GrafanaTheme2 } from '@grafana/data';\nimport { TemporaryAlert } from '@grafana/o11y-ds-frontend';\nimport { config, FetchError, getTemplateSrv, reportInteraction } from '@grafana/runtime';\nimport { Alert, Button, HorizontalGroup, Select, useStyles2 } from '@grafana/ui';\n\nimport { RawQuery } from '../_importedDependencies/datasources/prometheus/RawQuery';\nimport { TraceqlFilter, TraceqlSearchScope } from '../dataquery.gen';\nimport { TempoDatasource } from '../datasource';\nimport { TempoQueryBuilderOptions } from '../traceql/TempoQueryBuilderOptions';\nimport { traceqlGrammar } from '../traceql/traceql';\nimport { TempoQuery } from '../types';\n\nimport { AggregateByAlert } from './AggregateByAlert';\nimport DurationInput from './DurationInput';\nimport InlineSearchField from './InlineSearchField';\nimport SearchField from './SearchField';\nimport TagsInput from './TagsInput';\nimport { filterScopedTag, filterTitle, interpolateFilters, replaceAt } from './utils';\n\ninterface Props {\n  datasource: TempoDatasource;\n  query: TempoQuery;\n  onChange: (value: TempoQuery) => void;\n  onBlur?: () => void;\n  onClearResults: () => void;\n  app?: CoreApp;\n  addVariablesToOptions?: boolean;\n}\n\nconst hardCodedFilterIds = ['min-duration', 'max-duration', 'status'];\n\nconst TraceQLSearch = ({ datasource, query, onChange, onClearResults, app, addVariablesToOptions = true }: Props) => {\n  const styles = useStyles2(getStyles);\n  const [alertText, setAlertText] = useState<string>();\n  const [error, setError] = useState<Error | FetchError | null>(null);\n\n  const [isTagsLoading, setIsTagsLoading] = useState(true);\n  const [traceQlQuery, setTraceQlQuery] = useState<string>('');\n\n  const templateSrv = getTemplateSrv();\n\n  const updateFilter = useCallback(\n    (s: TraceqlFilter) => {\n      const copy = { ...query };\n      copy.filters ||= [];\n      const indexOfFilter = copy.filters.findIndex((f) => f.id === s.id);\n      if (indexOfFilter >= 0) {\n        // update in place if the filter already exists, for consistency and to avoid UI bugs\n        copy.filters = replaceAt(copy.filters, indexOfFilter, s);\n      } else {\n        copy.filters.push(s);\n      }\n      onChange(copy);\n    },\n    [onChange, query]\n  );\n\n  const deleteFilter = (s: TraceqlFilter) => {\n    onChange({ ...query, filters: query.filters.filter((f) => f.id !== s.id) });\n  };\n\n  const templateVariables = getTemplateSrv().getVariables();\n  useEffect(() => {\n    setTraceQlQuery(\n      datasource.languageProvider.generateQueryFromFilters({ traceqlFilters: interpolateFilters(query.filters || []) })\n    );\n  }, [datasource.languageProvider, query, templateVariables]);\n\n  const findFilter = useCallback((id: string) => query.filters?.find((f) => f.id === id), [query.filters]);\n\n  useEffect(() => {\n    const fetchTags = async () => {\n      try {\n        await datasource.languageProvider.start();\n        setIsTagsLoading(false);\n        setAlertText(undefined);\n      } catch (error) {\n        if (error instanceof Error) {\n          setAlertText(`Error: ${error.message}`);\n        }\n      }\n    };\n    fetchTags();\n  }, [datasource, setAlertText]);\n\n  useEffect(() => {\n    // Initialize state with configured static filters that already have a value from the config\n    datasource.search?.filters\n      ?.filter((f) => f.value)\n      .forEach((f) => {\n        if (!findFilter(f.id)) {\n          updateFilter(f);\n        }\n      });\n  }, [datasource.search?.filters, findFilter, updateFilter]);\n\n  // filter out tags that already exist in the static fields\n  const staticTags = datasource.search?.filters?.map((f) => f.tag) || [];\n  staticTags.push('duration');\n  staticTags.push('traceDuration');\n  staticTags.push('span:duration');\n  staticTags.push('trace:duration');\n  staticTags.push('status');\n  staticTags.push('span:status');\n\n  // Dynamic filters are all filters that don't match the ID of a filter in the datasource configuration\n  // The duration and status fields are a special case since its selector is hard-coded\n  const dynamicFilters = (query.filters || []).filter(\n    (f) =>\n      !hardCodedFilterIds.includes(f.id) &&\n      (datasource.search?.filters?.findIndex((sf) => sf.id === f.id) || 0) === -1 &&\n      f.id !== 'duration-type'\n  );\n\n  // We use this function to generate queries without a specfic filter.\n  // This is useful because we're sending the query to Tempo so it can return the attributes and values filtered down.\n  // However, if we send the full query then we won't see more values for the filter we're trying to edit.\n  // For example, if we already have a service.name value selected and try to add another one, we won't see the other\n  // values if we send the full query since Tempo will only return the service.name that's already selected.\n  const generateQueryWithoutFilter = (filter?: TraceqlFilter) => {\n    if (!filter) {\n      return traceQlQuery;\n    }\n    const filtersAfterRemoval = query.filters?.filter((f) => f.id !== filter.id) || [];\n    return datasource.languageProvider.generateQueryFromFilters({\n      traceqlFilters: interpolateFilters(filtersAfterRemoval || []),\n    });\n  };\n\n  return (\n    <>\n      <div className={styles.container}>\n        <div>\n          {datasource.search?.filters?.map(\n            (f) =>\n              f.tag && (\n                <InlineSearchField\n                  key={f.id}\n                  label={filterTitle(f, datasource.languageProvider)}\n                  tooltip={`Filter your search by ${filterScopedTag(\n                    f,\n                    datasource.languageProvider\n                  )}. To modify the default filters shown for search visit the Tempo datasource configuration page.`}\n                >\n                  <SearchField\n                    filter={findFilter(f.id) || f}\n                    datasource={datasource}\n                    setError={setError}\n                    updateFilter={updateFilter}\n                    tags={[]}\n                    hideScope={true}\n                    hideTag={true}\n                    query={generateQueryWithoutFilter(findFilter(f.id))}\n                    addVariablesToOptions={addVariablesToOptions}\n                  />\n                </InlineSearchField>\n              )\n          )}\n          <InlineSearchField label={'Status'}>\n            <SearchField\n              filter={\n                findFilter('status') || {\n                  id: 'status',\n                  tag: 'status',\n                  scope: TraceqlSearchScope.Intrinsic,\n                  operator: '=',\n                }\n              }\n              datasource={datasource}\n              setError={setError}\n              updateFilter={updateFilter}\n              tags={[]}\n              hideScope={true}\n              hideTag={true}\n              query={generateQueryWithoutFilter(findFilter('status'))}\n              isMulti={false}\n              allowCustomValue={false}\n              addVariablesToOptions={addVariablesToOptions}\n            />\n          </InlineSearchField>\n          <InlineSearchField\n            label={'Duration'}\n            tooltip=\"The trace or span duration, i.e. end - start time of the trace/span. Accepted units are ns, ms, s, m, h\"\n          >\n            <HorizontalGroup spacing={'none'}>\n              <Select\n                options={[\n                  { label: 'span', value: 'span' },\n                  { label: 'trace', value: 'trace' },\n                ]}\n                value={findFilter('duration-type')?.value ?? 'span'}\n                onChange={(v) => {\n                  const filter = findFilter('duration-type') || {\n                    id: 'duration-type',\n                    value: 'span',\n                  };\n                  updateFilter({ ...filter, value: v?.value });\n                }}\n                aria-label={'duration type'}\n              />\n              <DurationInput\n                filter={\n                  findFilter('min-duration') || {\n                    id: 'min-duration',\n                    tag: 'duration',\n                    operator: '>',\n                    valueType: 'duration',\n                  }\n                }\n                operators={['>', '>=']}\n                updateFilter={updateFilter}\n              />\n              <DurationInput\n                filter={\n                  findFilter('max-duration') || {\n                    id: 'max-duration',\n                    tag: 'duration',\n                    operator: '<',\n                    valueType: 'duration',\n                  }\n                }\n                operators={['<', '<=']}\n                updateFilter={updateFilter}\n              />\n            </HorizontalGroup>\n          </InlineSearchField>\n          <InlineSearchField label={'Tags'}>\n            <TagsInput\n              filters={dynamicFilters}\n              datasource={datasource}\n              setError={setError}\n              updateFilter={updateFilter}\n              deleteFilter={deleteFilter}\n              staticTags={staticTags}\n              isTagsLoading={isTagsLoading}\n              generateQueryWithoutFilter={generateQueryWithoutFilter}\n              requireTagAndValue={true}\n              addVariablesToOptions={addVariablesToOptions}\n            />\n          </InlineSearchField>\n          <AggregateByAlert\n            query={query}\n            onChange={() => {\n              delete query.groupBy;\n              onChange({\n                ...query,\n              });\n            }}\n          />\n        </div>\n        <div className={styles.rawQueryContainer}>\n          <RawQuery query={templateSrv.replace(traceQlQuery)} lang={{ grammar: traceqlGrammar, name: 'traceql' }} />\n          <Button\n            variant=\"secondary\"\n            size=\"sm\"\n            onClick={() => {\n              reportInteraction('grafana_traces_copy_to_traceql_clicked', {\n                app: app ?? '',\n                grafana_version: config.buildInfo.version,\n                location: 'search_tab',\n              });\n\n              onClearResults();\n              const traceQlQuery = datasource.languageProvider.generateQueryFromFilters({\n                traceqlFilters: query.filters || [],\n              });\n              onChange({\n                ...query,\n                query: traceQlQuery,\n                queryType: 'traceql',\n              });\n            }}\n          >\n            Edit in TraceQL\n          </Button>\n        </div>\n        <TempoQueryBuilderOptions\n          onChange={onChange}\n          query={query}\n          searchStreaming={datasource.isStreamingSearchEnabled() ?? false}\n          metricsStreaming={datasource.isStreamingMetricsEnabled() ?? false}\n        />\n      </div>\n      {error ? (\n        <Alert title=\"Unable to connect to Tempo search\" severity=\"info\" className={styles.alert}>\n          Please ensure that Tempo is configured with search enabled. If you would like to hide this tab, you can\n          configure it in the <a href={`/datasources/edit/${datasource.uid}`}>datasource settings</a>.\n        </Alert>\n      ) : null}\n      {alertText && <TemporaryAlert severity={'error'} text={alertText} />}\n    </>\n  );\n};\n\nexport default TraceQLSearch;\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  alert: css({\n    maxWidth: '75ch',\n    marginTop: theme.spacing(2),\n  }),\n  container: css({\n    display: 'flex',\n    gap: '4px',\n    flexWrap: 'wrap',\n    flexDirection: 'column',\n  }),\n  rawQueryContainer: css({\n    alignItems: 'center',\n    backgroundColor: theme.colors.background.secondary,\n    display: 'flex',\n    justifyContent: 'space-between',\n    padding: theme.spacing(1),\n  }),\n});\n","import { ReactElement } from 'react';\n\nimport { AdHocVariableFilter, DataSourceRef, SelectableValue } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { Icon, SegmentAsync } from '@grafana/ui';\n\ninterface Props {\n  datasource: DataSourceRef;\n  filterKey: string | null;\n  onChange: (item: SelectableValue<string | null>) => void;\n  allFilters: AdHocVariableFilter[];\n  disabled?: boolean;\n}\n\nconst MIN_WIDTH = 90;\nexport const AdHocFilterKey = ({ datasource, onChange, disabled, filterKey, allFilters }: Props) => {\n  const loadKeys = () => fetchFilterKeys(datasource, filterKey, allFilters);\n  const loadKeysWithRemove = () => fetchFilterKeysWithRemove(datasource, filterKey, allFilters);\n\n  if (filterKey === null) {\n    return (\n      <div className=\"gf-form\" data-testid=\"AdHocFilterKey-add-key-wrapper\">\n        <SegmentAsync\n          disabled={disabled}\n          className=\"query-segment-key\"\n          Component={plusSegment}\n          value={filterKey}\n          onChange={onChange}\n          loadOptions={loadKeys}\n          inputMinWidth={MIN_WIDTH}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"gf-form\" data-testid=\"AdHocFilterKey-key-wrapper\">\n      <SegmentAsync\n        disabled={disabled}\n        className=\"query-segment-key\"\n        value={filterKey}\n        onChange={onChange}\n        loadOptions={loadKeysWithRemove}\n        inputMinWidth={MIN_WIDTH}\n      />\n    </div>\n  );\n};\n\nexport const REMOVE_FILTER_KEY = '-- remove filter --';\nconst REMOVE_VALUE = { label: REMOVE_FILTER_KEY, value: REMOVE_FILTER_KEY };\n\nconst plusSegment: ReactElement = (\n  <span className=\"gf-form-label query-part\" aria-label=\"Add Filter\">\n    <Icon name=\"plus\" />\n  </span>\n);\n\nconst fetchFilterKeys = async (\n  datasource: DataSourceRef,\n  currentKey: string | null,\n  allFilters: AdHocVariableFilter[]\n): Promise<Array<SelectableValue<string>>> => {\n  const ds = await getDataSourceSrv().get(datasource);\n\n  if (!ds || !ds.getTagKeys) {\n    return [];\n  }\n\n  const otherFilters = allFilters.filter((f) => f.key !== currentKey);\n  const response = await ds.getTagKeys({ filters: otherFilters });\n  const metrics = Array.isArray(response) ? response : response.data;\n  return metrics.map((m) => ({ label: m.text, value: m.text }));\n};\n\nconst fetchFilterKeysWithRemove = async (\n  datasource: DataSourceRef,\n  currentKey: string | null,\n  allFilters: AdHocVariableFilter[]\n): Promise<Array<SelectableValue<string>>> => {\n  const keys = await fetchFilterKeys(datasource, currentKey, allFilters);\n  return [REMOVE_VALUE, ...keys];\n};\n","import { AdHocVariableFilter, DataSourceRef, SelectableValue, getDefaultTimeRange } from '@grafana/data';\n// import { getTimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { SegmentAsync } from '@grafana/ui';\n\ninterface Props {\n  datasource: DataSourceRef;\n  filterKey: string;\n  filterValue?: string;\n  onChange: (item: SelectableValue<string>) => void;\n  placeHolder?: string;\n  disabled?: boolean;\n  allFilters: AdHocVariableFilter[];\n}\n\nexport const AdHocFilterValue = ({\n  datasource,\n  disabled,\n  onChange,\n  filterKey,\n  filterValue,\n  placeHolder,\n  allFilters,\n}: Props) => {\n  const loadValues = () => fetchFilterValues(datasource, filterKey, allFilters);\n\n  return (\n    <div className=\"gf-form\" data-testid=\"AdHocFilterValue-value-wrapper\">\n      <SegmentAsync\n        className=\"query-segment-value\"\n        disabled={disabled}\n        placeholder={placeHolder}\n        value={filterValue}\n        onChange={onChange}\n        loadOptions={loadValues}\n      />\n    </div>\n  );\n};\n\nconst fetchFilterValues = async (\n  datasource: DataSourceRef,\n  key: string,\n  allFilters: AdHocVariableFilter[]\n): Promise<Array<SelectableValue<string>>> => {\n  const ds = await getDataSourceSrv().get(datasource);\n\n  if (!ds || !ds.getTagValues) {\n    return [];\n  }\n\n  // const timeRange = getTimeSrv().timeRange();\n  // As https://github.com/grafana/grafana/pull/76118/files#diff-260d46415915a2e3e7d294e313bd128666e9f0868aa94d8aee4d4a24a060b542L27-R26\n  const timeRange = getDefaultTimeRange();\n\n  // Filter out the current filter key from the list of all filters\n  const otherFilters = allFilters.filter((f) => f.key !== key);\n  const response = await ds.getTagValues({ key, filters: otherFilters, timeRange });\n  const metrics = Array.isArray(response) ? response : response.data;\n  return metrics.map((m) => ({ label: m.text, value: m.text }));\n};\n","import { SelectableValue } from '@grafana/data';\nimport { Segment } from '@grafana/ui';\n\ninterface Props {\n  value: string;\n  onChange: (item: SelectableValue<string>) => void;\n  disabled?: boolean;\n}\n\nconst options = ['=', '!=', '<', '>', '=~', '!~'].map<SelectableValue<string>>((value) => ({\n  label: value,\n  value,\n}));\n\nexport const OperatorSegment = ({ value, disabled, onChange }: Props) => {\n  return (\n    <Segment\n      className=\"query-segment-operator\"\n      value={value}\n      disabled={disabled}\n      options={options}\n      onChange={onChange}\n    />\n  );\n};\n","import { AdHocVariableFilter, DataSourceRef, SelectableValue } from '@grafana/data';\n\nimport { AdHocFilterKey } from './AdHocFilterKey';\nimport { AdHocFilterValue } from './AdHocFilterValue';\nimport { OperatorSegment } from './OperatorSegment';\n\ninterface Props {\n  datasource: DataSourceRef;\n  filter: AdHocVariableFilter;\n  allFilters: AdHocVariableFilter[];\n  onKeyChange: (item: SelectableValue<string | null>) => void;\n  onOperatorChange: (item: SelectableValue<string>) => void;\n  onValueChange: (item: SelectableValue<string>) => void;\n  placeHolder?: string;\n  getTagKeysOptions?: any;\n  disabled?: boolean;\n}\n\nexport const AdHocFilterRenderer = ({\n  datasource,\n  filter: { key, operator, value },\n  onKeyChange,\n  onOperatorChange,\n  onValueChange,\n  placeHolder,\n  allFilters,\n  disabled,\n}: Props) => {\n  return (\n    <>\n      <AdHocFilterKey\n        disabled={disabled}\n        datasource={datasource}\n        filterKey={key}\n        onChange={onKeyChange}\n        allFilters={allFilters}\n      />\n      <div className=\"gf-form\">\n        <OperatorSegment disabled={disabled} value={operator} onChange={onOperatorChange} />\n      </div>\n      <AdHocFilterValue\n        disabled={disabled}\n        datasource={datasource}\n        filterKey={key}\n        filterValue={value}\n        allFilters={allFilters}\n        onChange={onValueChange}\n        placeHolder={placeHolder}\n      />\n    </>\n  );\n};\n","import i18n from 'i18next';\nimport { useCallback, useState } from 'react';\nimport * as React from 'react';\n\nimport { AdHocVariableFilter, DataSourceRef, SelectableValue } from '@grafana/data';\n\nimport { AdHocFilterKey, REMOVE_FILTER_KEY } from './AdHocFilterKey';\nimport { AdHocFilterRenderer } from './AdHocFilterRenderer';\n\ninterface Props {\n  datasource: DataSourceRef;\n  onCompleted: (filter: AdHocVariableFilter) => void;\n  appendBefore?: React.ReactNode;\n  allFilters: AdHocVariableFilter[];\n}\n\n// Reassign t() so i18next-parser doesn't warn on dynamic key, and we can have 'failOnWarnings' enabled\nconst tFunc = i18n.t;\n\n// import { t } from 'app/core/internationalization';\nexport const t = (id: string, defaultMessage: string, values?: Record<string, unknown>) => {\n  return tFunc(id, defaultMessage, values);\n};\n\nexport const AdHocFilterBuilder = ({ datasource, appendBefore, onCompleted, allFilters }: Props) => {\n  const [key, setKey] = useState<string | null>(null);\n  const [operator, setOperator] = useState<string>('=');\n\n  const onKeyChanged = useCallback(\n    (item: SelectableValue<string | null>) => {\n      if (item.value !== REMOVE_FILTER_KEY) {\n        setKey(item.value ?? '');\n        return;\n      }\n      setKey(null);\n    },\n    [setKey]\n  );\n\n  const onOperatorChanged = useCallback(\n    (item: SelectableValue<string>) => setOperator(item.value ?? ''),\n    [setOperator]\n  );\n\n  const onValueChanged = useCallback(\n    (item: SelectableValue<string>) => {\n      onCompleted({\n        value: item.value ?? '',\n        operator: operator,\n        key: key!,\n      });\n      setKey(null);\n      setOperator('=');\n    },\n    [onCompleted, operator, key]\n  );\n\n  if (key === null) {\n    return <AdHocFilterKey datasource={datasource} filterKey={key} onChange={onKeyChanged} allFilters={allFilters} />;\n  }\n\n  return (\n    <React.Fragment key=\"filter-builder\">\n      {appendBefore}\n      <AdHocFilterRenderer\n        datasource={datasource}\n        filter={{ key, value: '', operator }}\n        placeHolder={t('variable.adhoc.placeholder', 'Select value')}\n        onKeyChange={onKeyChanged}\n        onOperatorChange={onOperatorChanged}\n        onValueChange={onValueChanged}\n        allFilters={allFilters}\n      />\n    </React.Fragment>\n  );\n};\n","interface Props {\n  label: string;\n}\n\nexport const ConditionSegment = ({ label }: Props) => {\n  return (\n    <div className=\"gf-form\">\n      <span className=\"gf-form-label query-keyword\">{label}</span>\n    </div>\n  );\n};\n","import { Fragment, PureComponent, ReactNode } from 'react';\n\nimport { AdHocVariableFilter, DataSourceRef, SelectableValue } from '@grafana/data';\nimport { Segment } from '@grafana/ui';\n\nimport { AdHocFilterBuilder } from './AdHocFilterBuilder';\nimport { REMOVE_FILTER_KEY } from './AdHocFilterKey';\nimport { AdHocFilterRenderer } from './AdHocFilterRenderer';\nimport { ConditionSegment } from './ConditionSegment';\n\ninterface Props {\n  datasource: DataSourceRef | null;\n  filters: AdHocVariableFilter[];\n  baseFilters?: AdHocVariableFilter[];\n  addFilter: (filter: AdHocVariableFilter) => void;\n  removeFilter: (index: number) => void;\n  changeFilter: (index: number, newFilter: AdHocVariableFilter) => void;\n  disabled?: boolean;\n}\n\n/**\n * Simple filtering component that automatically uses datasource APIs to get available labels and its values, for\n * dynamic visual filtering without need for much setup. Instead of having single onChange prop this reports all the\n * change events with separate props so it is usable with AdHocPicker.\n *\n * Note: There isn't API on datasource to suggest the operators here so that is hardcoded to use prometheus style\n * operators. Also filters are assumed to be joined with `AND` operator, which is also hardcoded.\n */\nexport class AdHocFilter extends PureComponent<Props> {\n  onChange = (index: number, prop: string) => (key: SelectableValue<string | null>) => {\n    const { filters } = this.props;\n    const { value } = key;\n\n    if (key.value === REMOVE_FILTER_KEY) {\n      return this.props.removeFilter(index);\n    }\n\n    return this.props.changeFilter(index, {\n      ...filters[index],\n      [prop]: value,\n    });\n  };\n\n  appendFilterToVariable = (filter: AdHocVariableFilter) => {\n    this.props.addFilter(filter);\n  };\n\n  render() {\n    const { filters, disabled } = this.props;\n\n    return (\n      <div className=\"gf-form-inline\">\n        {this.renderFilters(filters, disabled)}\n\n        {!disabled && (\n          <AdHocFilterBuilder\n            datasource={this.props.datasource!}\n            appendBefore={filters.length > 0 ? <ConditionSegment label=\"AND\" /> : null}\n            onCompleted={this.appendFilterToVariable}\n            allFilters={this.getAllFilters()}\n          />\n        )}\n      </div>\n    );\n  }\n\n  getAllFilters() {\n    if (this.props.baseFilters) {\n      return this.props.baseFilters.concat(this.props.filters);\n    }\n\n    return this.props.filters;\n  }\n\n  renderFilters(filters: AdHocVariableFilter[], disabled?: boolean) {\n    if (filters.length === 0 && disabled) {\n      return <Segment disabled={disabled} value=\"No filters\" options={[]} onChange={() => {}} />;\n    }\n\n    return filters.reduce((segments: ReactNode[], filter, index) => {\n      if (segments.length > 0) {\n        segments.push(<ConditionSegment label=\"AND\" key={`condition-${index}`} />);\n      }\n      segments.push(this.renderFilterSegments(filter, index, disabled));\n      return segments;\n    }, []);\n  }\n\n  renderFilterSegments(filter: AdHocVariableFilter, index: number, disabled?: boolean) {\n    return (\n      <Fragment key={`filter-${index}`}>\n        <AdHocFilterRenderer\n          disabled={disabled}\n          datasource={this.props.datasource!}\n          filter={filter}\n          onKeyChange={this.onChange(index, 'key')}\n          onOperatorChange={this.onChange(index, 'operator')}\n          onValueChange={this.onChange(index, 'value')}\n          allFilters={this.getAllFilters()}\n        />\n      </Fragment>\n    );\n  }\n}\n","import { css } from '@emotion/css';\nimport { useEffect, useState } from 'react';\nimport useAsync from 'react-use/lib/useAsync';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, InlineField, InlineFieldRow, useStyles2 } from '@grafana/ui';\n\nimport { AdHocFilter } from './_importedDependencies/components/AdHocFilter/AdHocFilter';\nimport { AdHocVariableFilter } from './_importedDependencies/components/AdHocFilter/types';\nimport { PrometheusDatasource } from './_importedDependencies/datasources/prometheus/types';\nimport { TempoQuery } from './types';\nimport { getDS } from './utils';\n\nexport function ServiceGraphSection({\n  graphDatasourceUid,\n  query,\n  onChange,\n}: {\n  graphDatasourceUid?: string;\n  query: TempoQuery;\n  onChange: (value: TempoQuery) => void;\n}) {\n  const styles = useStyles2(getStyles);\n  const dsState = useAsync(() => getDS(graphDatasourceUid), [graphDatasourceUid]);\n\n  // Check if service graph metrics are being collected. If not, displays a warning\n  const [hasKeys, setHasKeys] = useState<boolean | undefined>(undefined);\n  useEffect(() => {\n    async function fn(ds: PrometheusDatasource) {\n      const keys = await ds.getTagKeys({\n        filters: [\n          {\n            key: '__name__',\n            operator: '=~',\n            value:\n              'traces_service_graph_request_server_seconds_sum|traces_service_graph_request_total|traces_service_graph_request_failed_total',\n            condition: '',\n          },\n        ],\n      });\n      setHasKeys(Boolean(keys.length));\n    }\n    if (!dsState.loading && dsState.value) {\n      fn(dsState.value as PrometheusDatasource);\n    }\n  }, [dsState]);\n\n  if (dsState.loading) {\n    return null;\n  }\n\n  const ds = dsState.value;\n\n  if (!graphDatasourceUid) {\n    return getWarning(\n      'No service graph datasource selected',\n      'Please set up a service graph datasource in the datasource settings',\n      styles\n    );\n  }\n\n  if (graphDatasourceUid && !ds) {\n    return getWarning(\n      'No service graph data found',\n      'Service graph datasource is configured but the data source no longer exists. Please configure existing data source to use the service graph functionality',\n      styles\n    );\n  }\n\n  const filters = queryToFilter(\n    (Array.isArray(query.serviceMapQuery) ? query.serviceMapQuery[0] : query.serviceMapQuery) || ''\n  );\n\n  return (\n    <div>\n      <InlineFieldRow>\n        <InlineField label=\"Filter\" labelWidth={14} grow>\n          <AdHocFilter\n            datasource={{ uid: graphDatasourceUid }}\n            filters={filters}\n            baseFilters={[\n              {\n                key: '__name__',\n                operator: '=~',\n                value: 'traces_service_graph_request_total|traces_spanmetrics_calls_total',\n                condition: '',\n              },\n            ]}\n            addFilter={(filter: AdHocVariableFilter) => {\n              onChange({\n                ...query,\n                serviceMapQuery: filtersToQuery([...filters, filter]),\n              });\n            }}\n            removeFilter={(index: number) => {\n              const newFilters = [...filters];\n              newFilters.splice(index, 1);\n              onChange({ ...query, serviceMapQuery: filtersToQuery(newFilters) });\n            }}\n            changeFilter={(index: number, filter: AdHocVariableFilter) => {\n              const newFilters = [...filters];\n              newFilters.splice(index, 1, filter);\n              onChange({ ...query, serviceMapQuery: filtersToQuery(newFilters) });\n            }}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      {hasKeys === false\n        ? getWarning(\n            'No service graph data found',\n            'Please ensure that service graph metrics are set up correctly',\n            styles\n          )\n        : null}\n    </div>\n  );\n}\n\nfunction getWarning(title: string, description: string, styles: { alert: string; link: string }) {\n  return (\n    <Alert title={title} severity=\"info\" className={styles.alert}>\n      {description} according to the{' '}\n      <a\n        target=\"_blank\"\n        rel=\"noreferrer noopener\"\n        href=\"https://grafana.com/docs/grafana/latest/datasources/tempo/service-graph/\"\n        className={styles.link}\n      >\n        Tempo documentation\n      </a>\n      .\n    </Alert>\n  );\n}\n\nfunction queryToFilter(query: string): AdHocVariableFilter[] {\n  let match;\n  let filters: AdHocVariableFilter[] = [];\n  const re = /([\\w_]+)(=|!=|<|>|=~|!~)\"(.*?)\"/g;\n  while ((match = re.exec(query)) !== null) {\n    filters.push({\n      key: match[1],\n      operator: match[2],\n      value: match[3],\n      condition: '',\n    });\n  }\n  return filters;\n}\n\nfunction filtersToQuery(filters: AdHocVariableFilter[]): string {\n  return `{${filters.map((f) => `${f.key}${f.operator}\"${f.value}\"`).join(',')}}`;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  alert: css({\n    maxWidth: '75ch',\n    marginTop: theme.spacing(2),\n  }),\n  link: css({\n    color: theme.colors.text.link,\n    textDecoration: 'underline',\n  }),\n});\n","import { DataSourceJsonData } from '@grafana/data';\nimport { NodeGraphOptions, TraceToLogsOptions } from '@grafana/o11y-ds-frontend';\n\nimport { TempoQuery as TempoBase, TempoQueryType, TraceqlFilter } from './dataquery.gen';\n\nexport interface TempoJsonData extends DataSourceJsonData {\n  tracesToLogs?: TraceToLogsOptions;\n  serviceMap?: {\n    datasourceUid?: string;\n  };\n  search?: {\n    hide?: boolean;\n    filters?: TraceqlFilter[];\n  };\n  nodeGraph?: NodeGraphOptions;\n  spanBar?: {\n    tag: string;\n  };\n  tagLimit?: number;\n  traceQuery?: {\n    timeShiftEnabled?: boolean;\n    spanStartTimeShift?: string;\n    spanEndTimeShift?: string;\n  };\n  streamingEnabled?: {\n    search?: boolean;\n  };\n}\n\nexport interface TempoQuery extends TempoBase {\n  queryType: TempoQueryType;\n}\n\nexport interface MyDataSourceOptions extends DataSourceJsonData {}\n\nexport const defaultQuery: Partial<TempoQuery> = {};\n\nexport type TraceSearchMetadata = {\n  traceID: string;\n  rootServiceName: string;\n  rootTraceName: string;\n  startTimeUnixNano?: string;\n  durationMs?: number;\n  spanSet?: Spanset; // deprecated in Tempo, https://github.com/grafana/tempo/blob/3cc44fca03ba7d676dc77da6a18b8222546ede3c/docs/sources/tempo/api_docs/_index.md?plain=1#L619\n  spanSets?: Spanset[];\n};\n\nexport type SearchMetrics = {\n  inspectedTraces?: number;\n  inspectedBytes?: number;\n  totalBlocks?: number;\n  completedJobs?: number;\n  totalJobs?: number;\n  totalBlockBytes?: number;\n};\n\nexport enum SpanKind {\n  UNSPECIFIED,\n  INTERNAL,\n  SERVER,\n  CLIENT,\n  PRODUCER,\n  CONSUMER,\n}\n\nexport type SpanAttributes = {\n  key: string;\n  value: {\n    stringValue?: string;\n    intValue?: string;\n    boolValue?: boolean;\n    doubleValue?: string;\n    Value?: {\n      string_value?: string;\n      int_value?: string;\n      bool_value?: boolean;\n      double_value?: string;\n    };\n  };\n};\n\nexport type Span = {\n  durationNanos: string;\n  traceId?: string;\n  spanID: string;\n  traceState?: string;\n  parentSpanId?: string;\n  name?: string;\n  kind?: SpanKind;\n  startTimeUnixNano: string;\n  endTimeUnixNano?: string;\n  attributes?: SpanAttributes[];\n  dropped_attributes_count?: number;\n};\n\nexport type Spanset = {\n  attributes?: SpanAttributes[];\n  spans: Span[];\n};\n\nexport type SearchResponse = {\n  traces: TraceSearchMetadata[];\n  metrics: SearchMetrics;\n};\n\nexport type Scope = {\n  name: string;\n  tags: string[];\n};\n","import { SyntaxNode, Tree } from '@lezer/common';\n\nimport {\n  Aggregate,\n  And,\n  AttributeField,\n  ComparisonOp,\n  FieldExpression,\n  FieldOp,\n  GroupOperation,\n  IntrinsicField,\n  Or,\n  parser,\n  Pipe,\n  ScalarFilter,\n  SelectArgs,\n  SelectOperation,\n  SpansetFilter,\n  SpansetPipeline,\n  SpansetPipelineExpression,\n  Static,\n  String as StringNode,\n  TraceQL,\n} from '@grafana/lezer-traceql';\n\ntype Direction = 'parent' | 'firstChild' | 'lastChild' | 'nextSibling' | 'prevSibling';\ntype NodeType = number;\n\nexport type Situation = { query: string } & SituationType;\n\nexport type SituationType =\n  | {\n      type: 'UNKNOWN';\n    }\n  | {\n      type: 'EMPTY';\n    }\n  | {\n      type: 'SPANSET_EMPTY';\n    }\n  | {\n      type: 'SPANSET_ONLY_DOT';\n    }\n  | {\n      type: 'SPANSET_EXPRESSION_OPERATORS';\n    }\n  | {\n      type: 'SPANFIELD_COMBINING_OPERATORS';\n    }\n  | {\n      type: 'SPANSET_IN_NAME';\n    }\n  | {\n      type: 'SPANSET_IN_NAME_SCOPE';\n      scope: string;\n    }\n  | {\n      type: 'SPANSET_IN_VALUE';\n      tagName: string;\n      betweenQuotes: boolean;\n    }\n  | {\n      type: 'SPANSET_AFTER_VALUE';\n    }\n  | {\n      type: 'SPANSET_COMBINING_OPERATORS';\n    }\n  | {\n      type: 'SPANSET_PIPELINE_AFTER_OPERATOR';\n    }\n  | {\n      type: 'SPANSET_IN_THE_MIDDLE';\n    }\n  | {\n      type: 'SPANSET_EXPRESSION_OPERATORS_WITH_MISSING_CLOSED_BRACE';\n    }\n  | {\n      type: 'NEW_SPANSET';\n    }\n  | {\n      type: 'ATTRIBUTE_FOR_FUNCTION';\n    }\n  | {\n      type: 'SPANSET_COMPARISON_OPERATORS';\n    };\n\ntype Path = Array<[Direction, NodeType[]]>;\n\ntype Resolver = {\n  path: NodeType[];\n  fun: (node: SyntaxNode, text: string, pos: number, originalPos: number) => SituationType | void;\n};\n\nfunction getErrorNode(tree: Tree, cursorPos: number): SyntaxNode | null {\n  const cur = tree.cursorAt(cursorPos);\n  do {\n    if (cur.from === cursorPos || cur.to === cursorPos) {\n      const { node } = cur;\n      if (node.type.isError) {\n        return node;\n      }\n    }\n  } while (cur.next());\n  return null;\n}\n\nfunction move(node: SyntaxNode, direction: Direction): SyntaxNode | null {\n  return node[direction];\n}\n\nfunction walk(node: SyntaxNode, path: Path): SyntaxNode | null {\n  let current: SyntaxNode | null = node;\n  for (const [direction, expectedNodeIDs] of path) {\n    current = move(current, direction);\n    if (current === null) {\n      // we could not move in the direction, we stop\n      return null;\n    }\n\n    // note that the found value can be 0, which is acceptable\n    if (expectedNodeIDs.find((id) => id === current?.type.id) === undefined) {\n      // the reached node has wrong type, we stop\n      return null;\n    }\n  }\n  return current;\n}\n\nfunction getNodeText(node: SyntaxNode, text: string): string {\n  // if the from and to are them same (e.g. for an error node) we can subtract 1 from the start/from index\n  return text.slice(node.from === node.to ? node.from - 1 : node.from, node.to);\n}\n\nfunction isPathMatch(resolverPath: NodeType[], cursorPath: number[]): boolean {\n  return resolverPath.every((item, index) => item === cursorPath[index]);\n}\n\n/**\n * Figure out where is the cursor and what kind of suggestions are appropriate.\n * @param text the user input\n * @param offset the position of the cursor (starting from 0) in the user input\n */\nexport function getSituation(text: string, offset: number): Situation | null {\n  // there is a special case when we are at the start of writing text,\n  // so we handle that case first\n  if (text === '') {\n    return {\n      query: text,\n      type: 'EMPTY',\n    };\n  }\n\n  const tree = parser.parse(text);\n\n  // Whitespaces (especially when multiple) on the left of the text cursor can trick the Lezer parser,\n  // causing a wrong tree cursor to be picked.\n  // Example: `{ span.foo =    ↓ }`, with `↓` being the cursor, tricks the parser.\n  // Quick and dirty hack: Shift the cursor to the left until we find a non-whitespace character on its left.\n  let shiftedOffset = offset;\n  while (shiftedOffset - 1 >= 0 && text[shiftedOffset - 1] === ' ') {\n    shiftedOffset -= 1;\n  }\n\n  // If the tree contains error, it's probable that our node is one of those error nodes.\n  // If there are errors, the node lezer finds us might not be the best node.\n  // So, first we check if there is an error node at the cursor position.\n  let errorNode = getErrorNode(tree, shiftedOffset);\n  if (!errorNode) {\n    // Try again with the previous character.\n    errorNode = getErrorNode(tree, shiftedOffset - 1);\n  }\n  if (!errorNode) {\n    // Try again with the next character\n    errorNode = getErrorNode(tree, shiftedOffset + 1);\n  }\n\n  const cur = errorNode != null ? errorNode.cursor() : tree.cursorAt(shiftedOffset);\n\n  const currentNode = cur.node;\n  const ids = [cur.type.id];\n  while (cur.parent()) {\n    ids.push(cur.type.id);\n  }\n\n  let situationType: SituationType | void = undefined;\n  for (let resolver of RESOLVERS) {\n    if (isPathMatch(resolver.path, ids)) {\n      situationType = resolver.fun(currentNode, text, shiftedOffset, offset);\n    }\n  }\n\n  return { query: text, ...(situationType ?? { type: 'UNKNOWN' }) };\n}\n\nconst ERROR_NODE_ID = 0;\n\nconst RESOLVERS: Resolver[] = [\n  // Curson on error node cases\n  {\n    path: [ERROR_NODE_ID, AttributeField],\n    fun: resolveAttribute,\n  },\n  {\n    path: [ERROR_NODE_ID, FieldExpression],\n    fun: resolveExpression,\n  },\n  {\n    path: [ERROR_NODE_ID, SpansetFilter],\n    fun: resolveSpansetWithNoClosedBrace,\n  },\n  {\n    path: [ERROR_NODE_ID, Aggregate],\n    fun: resolveAttributeForFunction,\n  },\n  {\n    path: [ERROR_NODE_ID, IntrinsicField],\n    fun: resolveAttributeForFunction,\n  },\n  {\n    path: [ERROR_NODE_ID, GroupOperation],\n    fun: resolveAttributeForFunction,\n  },\n  {\n    path: [ERROR_NODE_ID, SelectOperation],\n    fun: resolveAttributeForFunction,\n  },\n  {\n    path: [ERROR_NODE_ID, SpansetPipelineExpression],\n    fun: resolveSpansetPipeline,\n  },\n  {\n    path: [ERROR_NODE_ID, ScalarFilter, SpansetPipeline],\n    fun: resolveArithmeticOperator,\n  },\n  // Curson on valid node cases (the whole query could contain errors nevertheless)\n  {\n    path: [FieldExpression],\n    fun: resolveSpanset,\n  },\n  {\n    path: [SpansetFilter],\n    fun: resolveSpanset,\n  },\n  {\n    path: [SpansetPipelineExpression],\n    fun: resolveNewSpansetExpression,\n  },\n  {\n    path: [TraceQL],\n    fun: resolveNewSpansetExpression,\n  },\n  {\n    path: [StringNode, Static],\n    fun: resolveExpression,\n  },\n];\n\nconst resolveAttributeCompletion = (node: SyntaxNode, text: string, pos: number): SituationType | void => {\n  // The user is completing an expression. We can take advantage of the fact that the Monaco editor is smart\n  // enough to automatically detect that there are some characters before the cursor and to take them into\n  // account when providing suggestions.\n  const getAttributeFieldUpToDot = (node: SyntaxNode) => {\n    const attributeFieldParent = walk(node, [['firstChild', [AttributeField]]]);\n    const attributeFieldParentText = attributeFieldParent ? getNodeText(attributeFieldParent, text) : '';\n    const indexOfDot = attributeFieldParentText.indexOf('.');\n    return attributeFieldParentText.slice(0, indexOfDot);\n  };\n\n  // If there is a space, for sure the attribute is completed and no suggestions to complete it should be provided\n  if (text[pos - 1] === ' ') {\n    return;\n  }\n\n  const endOfPathNode = walk(node, [['firstChild', [FieldExpression]]]);\n  if (endOfPathNode) {\n    return {\n      type: 'SPANSET_IN_NAME_SCOPE',\n      scope: getAttributeFieldUpToDot(endOfPathNode),\n    };\n  }\n\n  const endOfPathNode2 = walk(node, [\n    ['parent', [SpansetFilter]],\n    ['firstChild', [FieldExpression]],\n  ]);\n  // In this case, we also need to check the character at `pos`\n  if (endOfPathNode2 && text[pos] !== ' ') {\n    return {\n      type: 'SPANSET_IN_NAME_SCOPE',\n      scope: getAttributeFieldUpToDot(endOfPathNode2),\n    };\n  }\n};\n\nfunction resolveSpanset(node: SyntaxNode, text: string, _: number, originalPos: number): SituationType {\n  const situation = resolveAttributeCompletion(node, text, originalPos);\n  if (situation) {\n    return situation;\n  }\n\n  let endOfPathNode = walk(node, [\n    ['firstChild', [FieldExpression]],\n    ['firstChild', [AttributeField]],\n  ]);\n  if (endOfPathNode) {\n    return {\n      type: 'SPANSET_EXPRESSION_OPERATORS',\n    };\n  }\n\n  endOfPathNode = walk(node, [\n    ['lastChild', [FieldExpression]],\n    ['lastChild', [FieldExpression]],\n    ['lastChild', [Static]],\n  ]);\n  if (endOfPathNode) {\n    return {\n      type: 'SPANFIELD_COMBINING_OPERATORS',\n    };\n  }\n\n  endOfPathNode = walk(node, [['lastChild', [FieldExpression]]]);\n  if (endOfPathNode) {\n    return {\n      type: 'SPANSET_EXPRESSION_OPERATORS',\n    };\n  }\n\n  return {\n    type: 'SPANSET_EMPTY',\n  };\n}\n\nfunction resolveAttribute(node: SyntaxNode, text: string): SituationType {\n  const attributeFieldParent = walk(node, [['parent', [AttributeField]]]);\n  const attributeFieldParentText = attributeFieldParent ? getNodeText(attributeFieldParent, text) : '';\n\n  if (attributeFieldParentText === '.') {\n    return {\n      type: 'SPANSET_ONLY_DOT',\n    };\n  }\n\n  const indexOfDot = attributeFieldParentText.indexOf('.');\n  const attributeFieldUpToDot = attributeFieldParentText.slice(0, indexOfDot);\n\n  if (\n    ['event', 'instrumentation', 'link', 'resource', 'span', 'parent'].find((item) => item === attributeFieldUpToDot)\n  ) {\n    return {\n      type: 'SPANSET_IN_NAME_SCOPE',\n      scope: attributeFieldUpToDot,\n    };\n  }\n  return {\n    type: 'SPANSET_IN_NAME',\n  };\n}\n\nfunction resolveExpression(node: SyntaxNode, text: string, _: number, originalPos: number): SituationType {\n  const situation = resolveAttributeCompletion(node, text, originalPos);\n  if (situation) {\n    return situation;\n  }\n\n  if (\n    walk(node, [\n      ['parent', [Static]],\n      ['parent', [FieldExpression]],\n      ['prevSibling', [FieldOp]],\n    ])\n  ) {\n    let attributeField = node.parent?.parent?.prevSibling?.prevSibling;\n    if (attributeField) {\n      return {\n        type: 'SPANSET_IN_VALUE',\n        tagName: getNodeText(attributeField, text),\n        betweenQuotes: true,\n      };\n    }\n  }\n\n  if (node.prevSibling?.type.id === FieldOp) {\n    let attributeField = node.prevSibling?.prevSibling;\n    if (attributeField) {\n      return {\n        type: 'SPANSET_IN_VALUE',\n        tagName: getNodeText(attributeField, text),\n        betweenQuotes: false,\n      };\n    }\n  }\n\n  if (node.prevSibling?.type.name === 'And' || node.prevSibling?.type.name === 'Or') {\n    return {\n      type: 'SPANSET_EMPTY',\n    };\n  }\n\n  return {\n    type: 'SPANSET_IN_THE_MIDDLE',\n  };\n}\n\nfunction resolveArithmeticOperator(node: SyntaxNode, _0: string, _1: number): SituationType | void {\n  if (node.prevSibling?.type.id !== ComparisonOp) {\n    return {\n      type: 'SPANSET_COMPARISON_OPERATORS',\n    };\n  }\n}\n\nfunction resolveNewSpansetExpression(node: SyntaxNode, text: string, offset: number): SituationType {\n  // Select the node immediately before the one pointed by the cursor\n  let previousNode = node.firstChild;\n  try {\n    previousNode = node.firstChild;\n    while (previousNode!.to < offset) {\n      previousNode = previousNode!.nextSibling;\n    }\n  } catch (error) {\n    console.error('Unexpected error while searching for previous node', error);\n  }\n\n  if (previousNode?.type.id === And || previousNode?.type.id === Or) {\n    return {\n      type: 'NEW_SPANSET',\n    };\n  }\n\n  return {\n    type: 'SPANSET_COMBINING_OPERATORS',\n  };\n}\n\nfunction resolveAttributeForFunction(node: SyntaxNode, _0: string, _1: number): SituationType | void {\n  const parent = node?.parent;\n  if (!!parent && [IntrinsicField, Aggregate, GroupOperation, SelectOperation, SelectArgs].includes(parent.type.id)) {\n    return {\n      type: 'ATTRIBUTE_FOR_FUNCTION',\n    };\n  }\n}\n\nfunction resolveSpansetPipeline(node: SyntaxNode, _1: string, _2: number): SituationType {\n  if (node.prevSibling?.type.id === Pipe) {\n    return {\n      type: 'SPANSET_PIPELINE_AFTER_OPERATOR',\n    };\n  }\n  return {\n    type: 'NEW_SPANSET',\n  };\n}\n\nfunction resolveSpansetWithNoClosedBrace(node: SyntaxNode, text: string, originalPos: number): SituationType {\n  const situation = resolveAttributeCompletion(node, text, originalPos);\n  if (situation) {\n    return situation;\n  }\n\n  return {\n    type: 'SPANSET_EXPRESSION_OPERATORS_WITH_MISSING_CLOSED_BRACE',\n  };\n}\n","import { IMarkdownString, languages } from 'monaco-editor';\n\nimport { SelectableValue } from '@grafana/data';\nimport { isFetchError } from '@grafana/runtime';\nimport type { Monaco, monacoTypes } from '@grafana/ui';\n\nimport TempoLanguageProvider from '../language_provider';\n\nimport { getSituation, Situation } from './situation';\nimport { scopes } from './traceql';\n\ntype MinimalCompletionItem = {\n  label: string;\n  insertText: string;\n  detail?: string;\n  documentation?: string | IMarkdownString;\n};\n\nexport type CompletionItemType = 'TAG_NAME' | 'TAG_VALUE' | 'KEYWORD' | 'OPERATOR' | 'SCOPE' | 'FUNCTION';\ntype CompletionItem = MinimalCompletionItem & {\n  type: CompletionItemType;\n  insertTextRules?: monacoTypes.languages.CompletionItemInsertTextRule; // we used it to position the cursor\n};\n\ninterface Props {\n  languageProvider: TempoLanguageProvider;\n  setAlertText: (text?: string) => void;\n}\n\n/**\n * Class that implements CompletionItemProvider interface and allows us to provide suggestion for the Monaco\n * autocomplete system.\n *\n * Here we want to provide suggestions for TraceQL. Please refer to\n * https://grafana.com/docs/tempo/latest/traceql for the syntax of the language.\n */\nexport class CompletionProvider implements monacoTypes.languages.CompletionItemProvider {\n  languageProvider: TempoLanguageProvider;\n  registerInteractionCommandId: string | null;\n  setAlertText: (text?: string) => void;\n\n  constructor(props: Props) {\n    this.languageProvider = props.languageProvider;\n    this.setAlertText = props.setAlertText;\n    this.registerInteractionCommandId = null;\n  }\n\n  triggerCharacters = ['{', '.', '[', '(', '=', '~', ' ', '\"'];\n\n  // Operators\n  static readonly arithmeticOps: MinimalCompletionItem[] = [\n    {\n      label: '+',\n      insertText: '+',\n      detail: 'Plus',\n    },\n    {\n      label: '-',\n      insertText: '-',\n      detail: 'Minus',\n    },\n    {\n      label: '*',\n      insertText: '*',\n      detail: 'Times',\n    },\n    {\n      label: '/',\n      insertText: '/',\n      detail: 'Over',\n    },\n  ];\n\n  static readonly logicalOps: MinimalCompletionItem[] = [\n    {\n      label: '&&',\n      insertText: '&&',\n      detail: 'And',\n      documentation: 'And (intersection) operator. Checks that both conditions found matches.',\n    },\n    {\n      label: '||',\n      insertText: '||',\n      detail: 'Or',\n      documentation: 'Or (union) operator. Checks that either condition found matches.',\n    },\n  ];\n\n  static readonly comparisonOps: MinimalCompletionItem[] = [\n    {\n      label: '=',\n      insertText: '=',\n      detail: 'Equality',\n    },\n    {\n      label: '!=',\n      insertText: '!=',\n      detail: 'Inequality',\n    },\n    {\n      label: '>',\n      insertText: '>',\n      detail: 'Greater than',\n    },\n    {\n      label: '>=',\n      insertText: '>=',\n      detail: 'Greater than or equal to',\n    },\n    {\n      label: '<',\n      insertText: '<',\n      detail: 'Less than',\n    },\n    {\n      label: '<=',\n      insertText: '<=',\n      detail: 'Less than or equal to',\n    },\n    {\n      label: '=~',\n      insertText: '=~',\n      detail: 'Regular expression',\n    },\n    {\n      label: '!~',\n      insertText: '!~',\n      detail: 'Negated regular expression',\n    },\n  ];\n  static readonly structuralOps: MinimalCompletionItem[] = [\n    {\n      label: '>>',\n      insertText: '>>',\n      detail: 'Descendant',\n      documentation:\n        'Descendant operator. Looks for spans matching {condB} that are descendants of a span matching {condA}',\n    },\n    {\n      label: '>',\n      insertText: '>',\n      detail: 'Child',\n      documentation:\n        'Child operator. Looks for spans matching {condB} that are direct child spans of a parent matching {condA}',\n    },\n    {\n      label: '<<',\n      insertText: '<<',\n      detail: 'Ancestor',\n      documentation:\n        'Ancestor operator. Looks for spans matching {condB} that are ancestors of a span matching {condA}',\n    },\n    {\n      label: '<',\n      insertText: '<',\n      detail: 'Parent',\n      documentation:\n        'Parent operator. Looks for spans matching {condB} that are direct parent spans of a child matching {condA}',\n    },\n    {\n      label: '~',\n      insertText: '~',\n      detail: 'Sibling',\n      documentation:\n        'Sibling operator. Checks that spans matching {condA} and {condB} are siblings of the same parent span.',\n    },\n  ];\n\n  static readonly spansetOps: MinimalCompletionItem[] = [\n    {\n      label: '|',\n      insertText: '|',\n      detail: 'Pipe',\n    },\n    ...CompletionProvider.logicalOps,\n    ...CompletionProvider.structuralOps,\n  ];\n\n  // Functions (aggregator, selector, and combining operators)\n  static readonly aggregatorFunctions: MinimalCompletionItem[] = [\n    {\n      label: 'avg',\n      insertText: 'avg($0)',\n      detail: 'Average of attribute',\n      documentation: 'Computes the average of a given numeric attribute or intrinsic for a spanset.',\n    },\n    {\n      label: 'count',\n      insertText: 'count()$0',\n      detail: 'Number of spans',\n      documentation: 'Counts the number of spans in a spanset.',\n    },\n    {\n      label: 'max',\n      insertText: 'max($0)',\n      detail: 'Max value of attribute',\n      documentation: 'Computes the maximum value of a given numeric attribute or intrinsic for a spanset.',\n    },\n    {\n      label: 'min',\n      insertText: 'min($0)',\n      detail: 'Min value of attribute',\n      documentation: 'Computes the minimum value of a given numeric attribute or intrinsic for a spanset.',\n    },\n    {\n      label: 'sum',\n      insertText: 'sum($0)',\n      detail: 'Sum value of attribute',\n      documentation: 'Computes the sum value of a given numeric attribute or intrinsic for a spanset.',\n    },\n  ];\n\n  static readonly functions: MinimalCompletionItem[] = [\n    ...this.aggregatorFunctions,\n    {\n      label: 'by',\n      insertText: 'by($0)',\n      detail: 'Grouping of attributes',\n      documentation: 'Groups by arbitrary attributes.',\n    },\n    {\n      label: 'count_over_time',\n      insertText: 'count_over_time()$0',\n      detail: 'Number of spans over time',\n      documentation: 'Counts the number of spans over time.',\n    },\n    {\n      label: 'min_over_time',\n      insertText: 'min_over_time()$0',\n      detail: 'Minimum value of attribute over time',\n      documentation: 'Minimum value for the specified attribute across all matching spans over time.',\n    },\n    {\n      label: 'max_over_time',\n      insertText: 'max_over_time()$0',\n      detail: 'Maximum value of attribute over time',\n      documentation: 'Maximum value for the specified attribute across all matching spans over time.',\n    },\n    {\n      label: 'avg_over_time',\n      insertText: 'avg_over_time()$0',\n      detail: 'Average value of attribute over time',\n      documentation: 'Average value for the specified attribute across all matching spans over time.',\n    },\n    {\n      label: 'sum_over_time',\n      insertText: 'sum_over_time()$0',\n      detail: 'Summation value of attribute over time',\n      documentation: 'Sum of the values for the specified attribute across all matching spans over time.',\n    },\n    {\n      label: 'histogram_over_time',\n      insertText: 'histogram_over_time($0)',\n      detail: 'Histogram of attribute over time',\n      documentation: 'Retrieves a histogram of an attributes values over time which are sorted into buckets.',\n    },\n    {\n      label: 'quantile_over_time',\n      insertText: 'quantile_over_time($0)',\n      detail: 'Quantile of attribute over time',\n      documentation: 'Retrieves one or more quantiles of an attributes numeric values over time.',\n    },\n    {\n      label: 'rate',\n      insertText: 'rate()$0',\n      detail: 'Rate of spans',\n      documentation: 'Counts the rate of spans per second.',\n    },\n    {\n      label: 'select',\n      insertText: 'select($0)',\n      detail: 'Selection of fields',\n      documentation: 'Selects arbitrary fields from spans.',\n    },\n  ];\n\n  // We set these directly and ae required for the provider to function.\n  monaco: Monaco | undefined;\n  editor: monacoTypes.editor.IStandaloneCodeEditor | undefined;\n\n  private cachedValues: { [key: string]: Array<SelectableValue<string>> } = {};\n\n  provideCompletionItems(\n    model: monacoTypes.editor.ITextModel,\n    position: monacoTypes.Position\n  ): monacoTypes.languages.ProviderResult<monacoTypes.languages.CompletionList> {\n    // Should not happen, this should not be called before it is initialized\n    if (!(this.monaco && this.editor)) {\n      throw new Error('provideCompletionItems called before CompletionProvider was initialized');\n    }\n\n    // if the model-id does not match, then this call is from a different editor-instance,\n    // not \"our instance\", so return nothing\n    if (this.editor.getModel()?.id !== model.id) {\n      return { suggestions: [] };\n    }\n\n    const { range, offset } = getRangeAndOffset(this.monaco, model, position);\n    const situation = getSituation(model.getValue(), offset);\n    const completionItems = situation != null ? this.getCompletions(situation, this.setAlertText) : Promise.resolve([]);\n\n    return completionItems.then((items) => {\n      const suggestions = completionItemsToSuggestions(\n        items,\n        range,\n        this.registerInteractionCommandId ?? undefined,\n        model.getValue(),\n        offset\n      );\n      return { suggestions };\n    });\n  }\n\n  /**\n   * Set the ID for the registerInteraction command, to be used to keep track of how many completions are used by the users\n   */\n  setRegisterInteractionCommandId(id: string | null) {\n    this.registerInteractionCommandId = id;\n  }\n\n  private async getTagValues(tagName: string, query: string): Promise<Array<SelectableValue<string>>> {\n    let tagValues: Array<SelectableValue<string>>;\n    const cacheKey = `${tagName}:${query}`;\n\n    if (this.cachedValues.hasOwnProperty(cacheKey)) {\n      tagValues = this.cachedValues[cacheKey];\n    } else {\n      tagValues = await this.languageProvider.getOptionsV2(tagName, query);\n      this.cachedValues[cacheKey] = tagValues;\n    }\n    return tagValues;\n  }\n\n  /**\n   * Get suggestion based on the situation we are in like whether we should suggest tag names or values.\n   * @param situation\n   * @private\n   */\n  private async getCompletions(situation: Situation, setAlertText: (text?: string) => void): Promise<CompletionItem[]> {\n    switch (situation.type) {\n      // This should only happen for cases that we do not support yet\n      case 'UNKNOWN': {\n        return [];\n      }\n      case 'EMPTY': {\n        return this.getScopesCompletions('{ ', '$0 }')\n          .concat(this.getIntrinsicsCompletions('{ ', '$0 }'))\n          .concat(this.getTagsCompletions('{ .'));\n      }\n      case 'SPANSET_EMPTY':\n        return this.getScopesCompletions().concat(this.getIntrinsicsCompletions()).concat(this.getTagsCompletions('.'));\n      case 'SPANSET_ONLY_DOT': {\n        return this.getTagsCompletions();\n      }\n      case 'SPANSET_IN_THE_MIDDLE':\n      case 'SPANSET_EXPRESSION_OPERATORS_WITH_MISSING_CLOSED_BRACE':\n        return this.getOperatorsCompletions([...CompletionProvider.comparisonOps, ...CompletionProvider.logicalOps]);\n      case 'SPANSET_IN_NAME':\n        return this.getScopesCompletions().concat(this.getIntrinsicsCompletions()).concat(this.getTagsCompletions());\n      case 'SPANSET_IN_NAME_SCOPE':\n        return this.getTagsCompletions(undefined, situation.scope);\n      case 'SPANSET_EXPRESSION_OPERATORS':\n        return this.getOperatorsCompletions([\n          ...CompletionProvider.comparisonOps,\n          ...CompletionProvider.logicalOps,\n          ...CompletionProvider.arithmeticOps,\n        ]);\n      case 'SPANFIELD_COMBINING_OPERATORS':\n        return this.getOperatorsCompletions([\n          ...CompletionProvider.logicalOps,\n          ...CompletionProvider.arithmeticOps,\n          ...CompletionProvider.comparisonOps,\n        ]);\n      case 'SPANSET_COMBINING_OPERATORS':\n        return this.getOperatorsCompletions(CompletionProvider.spansetOps);\n      case 'SPANSET_PIPELINE_AFTER_OPERATOR':\n        const functions = CompletionProvider.functions.map((key) => ({\n          ...key,\n          insertTextRules: languages.CompletionItemInsertTextRule.InsertAsSnippet,\n          type: 'FUNCTION' as const,\n        }));\n        const tags = this.getScopesCompletions()\n          .concat(this.getIntrinsicsCompletions())\n          .concat(this.getTagsCompletions('.'));\n        return [...functions, ...tags];\n      case 'SPANSET_COMPARISON_OPERATORS':\n        return this.getOperatorsCompletions(CompletionProvider.comparisonOps);\n      case 'SPANSET_IN_VALUE':\n        let tagValues;\n        try {\n          tagValues = await this.getTagValues(situation.tagName, situation.query);\n          setAlertText(undefined);\n        } catch (error) {\n          if (isFetchError(error)) {\n            setAlertText(error.data.error);\n          } else if (error instanceof Error) {\n            setAlertText(`Error: ${error.message}`);\n          }\n        }\n\n        const getInsertionText = (val: SelectableValue<string>): string => {\n          if (situation.betweenQuotes) {\n            return val.label!;\n          }\n          return val.type === 'string' ? `\"${val.label}\"` : val.label!;\n        };\n\n        const items: CompletionItem[] = [];\n        tagValues?.forEach((val) => {\n          if (val?.label) {\n            items.push({\n              label: val.label,\n              insertText: getInsertionText(val),\n              type: 'TAG_VALUE',\n            });\n          }\n        });\n        return items;\n      case 'SPANSET_AFTER_VALUE':\n        return CompletionProvider.logicalOps.map((key) => ({\n          label: key.label,\n          insertText: key.insertText + '}',\n          type: 'OPERATOR',\n        }));\n      case 'NEW_SPANSET':\n        return this.getScopesCompletions('{ ', '$0 }')\n          .concat(this.getIntrinsicsCompletions('{ ', '$0 }'))\n          .concat(this.getTagsCompletions('.'));\n      case 'ATTRIBUTE_FOR_FUNCTION':\n        return this.getScopesCompletions().concat(this.getIntrinsicsCompletions()).concat(this.getTagsCompletions('.'));\n      default:\n        throw new Error(`Unexpected situation ${situation}`);\n    }\n  }\n\n  private getTagsCompletions(prepend?: string, scope?: string): CompletionItem[] {\n    const tags = this.languageProvider.getTraceqlAutocompleteTags(scope);\n    return tagsToCompletionItems(tags, prepend);\n  }\n\n  private getIntrinsicsCompletions(prepend?: string, append?: string): CompletionItem[] {\n    return this.languageProvider.getIntrinsics().map((key) => ({\n      label: key,\n      insertText: (prepend || '') + key + (append || ''),\n      type: 'KEYWORD',\n      insertTextRules: languages.CompletionItemInsertTextRule?.InsertAsSnippet,\n    }));\n  }\n\n  private getScopesCompletions(prepend?: string, append?: string): CompletionItem[] {\n    return scopes.map((key) => ({\n      label: key,\n      insertText: (prepend || '') + key + (append || ''),\n      type: 'SCOPE',\n      insertTextRules: languages.CompletionItemInsertTextRule?.InsertAsSnippet,\n    }));\n  }\n\n  private getOperatorsCompletions(ops: MinimalCompletionItem[]): CompletionItem[] {\n    return ops.map((key) => ({\n      ...key,\n      type: 'OPERATOR',\n    }));\n  }\n}\n\n/**\n * Get item kind which is used for icon next to the suggestion.\n * @param type\n * @param monaco\n */\nfunction getMonacoCompletionItemKind(type: CompletionItemType): languages.CompletionItemKind {\n  switch (type) {\n    case 'TAG_NAME':\n      return languages.CompletionItemKind.Enum;\n    case 'KEYWORD':\n      return languages.CompletionItemKind.Keyword;\n    case 'OPERATOR':\n      return languages.CompletionItemKind.Operator;\n    case 'TAG_VALUE':\n      return languages.CompletionItemKind.EnumMember;\n    case 'SCOPE':\n      return languages.CompletionItemKind.Class;\n    case 'FUNCTION':\n      return languages.CompletionItemKind.Function;\n    default:\n      throw new Error(`Unexpected CompletionItemType: ${type}`);\n  }\n}\n\nfunction getRangeAndOffset(monaco: Monaco, model: monacoTypes.editor.ITextModel, position: monacoTypes.Position) {\n  const word = model.getWordAtPosition(position);\n  const range =\n    word != null\n      ? monaco.Range.lift({\n          startLineNumber: position.lineNumber,\n          endLineNumber: position.lineNumber,\n          startColumn: word.startColumn,\n          endColumn: word.endColumn,\n        })\n      : monaco.Range.fromPositions(position);\n\n  // documentation says `position` will be \"adjusted\" in `getOffsetAt` so we clone it here just for sure.\n  const positionClone = {\n    column: position.column,\n    lineNumber: position.lineNumber,\n  };\n\n  const offset = model.getOffsetAt(positionClone);\n  return { offset, range };\n}\n\nconst SUGGEST_REGEXP = /(event\\.|instrumentation\\.|link\\.|resource\\.|span\\.|\\.)?([\\w./-]*)$/;\n\nfunction completionItemsToSuggestions(\n  items: CompletionItem[],\n  range: monacoTypes.IRange | languages.CompletionItemRanges,\n  registerInteractionCommandId = 'noOp',\n  modelValue: string,\n  offset: number\n) {\n  // monaco by-default alphabetically orders the items.\n  // to stop it, we use a number-as-string sortkey,\n  // so that monaco keeps the order we use\n  const [_, scope, tag] = modelValue.substring(0, offset).match(SUGGEST_REGEXP) ?? [];\n  const maxIndexDigits = items.length.toString().length;\n  const suggestions: languages.CompletionItem[] = items.map((item, index) => {\n    const suggestion: languages.CompletionItem = {\n      kind: getMonacoCompletionItemKind(item.type),\n      label: item.label,\n      insertText: item.insertText,\n      insertTextRules: item.insertTextRules,\n      detail: item.detail,\n      documentation: item.documentation,\n      sortText: index.toString().padStart(maxIndexDigits, '0'), // to force the order we have\n      range,\n      command: {\n        id: registerInteractionCommandId,\n        title: 'Report Interaction',\n        arguments: [item.label, item.type],\n      },\n    };\n\n    if (tag && item.type === 'TAG_NAME') {\n      fixSuggestion(suggestion, offset, tag, scope);\n    }\n\n    return suggestion;\n  });\n\n  return suggestions;\n}\n\n/**\n * Fix the suggestions range and insert text. For the range we have to adjust because monaco by default replaces just\n * the last word which stops at dot while traceQL tags contain dots themselves and we want to replace the whole tag\n * name when suggesting. The insert text needs to be adjusted for scope (leading dot) if scope is currently missing.\n * This may be doable also when creating the suggestions but for a particular situation this seems to be easier to do\n * here.\n */\nfunction fixSuggestion(suggestion: monacoTypes.languages.CompletionItem, offset: number, tag: string, scope?: string) {\n  // Add the default scope if needed.\n  if (scope == null && suggestion.insertText[0] !== '.') {\n    suggestion.insertText = '.' + suggestion.insertText;\n  }\n\n  // Adjust the range, so that we will replace the whole tag.\n  suggestion.range = {\n    ...suggestion.range,\n    startColumn: offset - tag.length + 1,\n  };\n}\n\nconst collator = new Intl.Collator('en', { sensitivity: 'accent' });\n\nfunction tagsToCompletionItems(tags: string[], prepend = ''): CompletionItem[] {\n  return tags.sort(collator.compare).map((key) => ({\n    label: key,\n    insertText: `${prepend}${key}`,\n    type: 'TAG_NAME',\n  }));\n}\n","import { SyntaxNode } from '@lezer/common';\n\nimport {\n  Aggregate,\n  And,\n  AttributeField,\n  ComparisonOp,\n  Event,\n  FieldExpression,\n  FieldOp,\n  GroupOperation,\n  Identifier,\n  Instrumentation,\n  IntrinsicField,\n  Link,\n  Or,\n  Parent,\n  parser,\n  Pipe,\n  Resource,\n  ScalarExpression,\n  ScalarFilter,\n  SelectOperation,\n  Span,\n  SpansetFilter,\n  SpansetPipelineExpression,\n} from '@grafana/lezer-traceql';\nimport { monacoTypes } from '@grafana/ui';\n\n/**\n * Given an error node, generate an error message to be displayed to the user.\n *\n * @param errorNode the error node, as returned by the TraceQL Lezer parser\n * @returns the error message\n */\nexport const computeErrorMessage = (errorNode: SyntaxNode) => {\n  switch (errorNode.parent?.type.id) {\n    case FieldExpression:\n      switch (errorNode.prevSibling?.type.id) {\n        case And:\n        case Or:\n          return 'Invalid value after logical operator.';\n        case FieldOp:\n          return 'Invalid value after comparison or arithmetic operator.';\n        default:\n          return 'Invalid operator after field expression.';\n      }\n    case SpansetFilter:\n      if (errorNode.prevSibling?.type.id === FieldExpression) {\n        return 'Invalid comparison operator after field expression.';\n      }\n      return 'Invalid expression for spanset.';\n    case SpansetPipelineExpression:\n      switch (errorNode.prevSibling?.type.id) {\n        case SpansetPipelineExpression:\n          return 'Invalid spanset combining operator after spanset expression.';\n        case Pipe:\n          return 'Invalid aggregation operator after pipeline operator.';\n        default:\n          return 'Invalid spanset expression after spanset combining operator.';\n      }\n    case IntrinsicField:\n    case Aggregate:\n      if (errorNode.parent?.parent?.parent?.type.id === GroupOperation) {\n        return 'Invalid expression for by operator.';\n      } else if (errorNode.parent?.parent?.parent?.parent?.type.id === SelectOperation) {\n        return 'Invalid expression for select operator.';\n      }\n      return 'Invalid expression for aggregator operator.';\n    case AttributeField:\n      return 'Invalid expression for spanset.';\n    case ScalarFilter:\n      switch (errorNode.prevSibling?.type.id) {\n        case ComparisonOp:\n          return 'Invalid value after comparison operator.';\n        case ScalarExpression:\n          if (errorNode.prevSibling?.firstChild?.type.id === Aggregate) {\n            return 'Invalid comparison operator after aggregator operator.';\n          }\n        default:\n          return 'Invalid value after comparison operator.';\n      }\n    default:\n      return 'Invalid query.';\n  }\n};\n\n/**\n * Parse the given query and find the error nodes, if any, in the resulting tree.\n *\n * @param query the TraceQL query of the user\n * @returns the error nodes\n */\nexport const getErrorNodes = (query: string): SyntaxNode[] => {\n  // Return immediately if the query is empty, to avoid raising exceptions in processing it\n  if (query.trim() === '') {\n    return [];\n  }\n\n  // Check whether this is a trace ID or traceQL query by checking if it only contains hex characters\n  const hexOnlyRegex = /^[0-9A-Fa-f]*$/;\n  if (query.trim().match(hexOnlyRegex)) {\n    return [];\n  }\n\n  const tree = parser.parse(query);\n\n  // Find all error nodes and compute the associated erro boundaries\n  const errorNodes: SyntaxNode[] = [];\n  tree.iterate({\n    enter: (nodeRef) => {\n      if (nodeRef.type.id === 0) {\n        errorNodes.push(nodeRef.node);\n      }\n    },\n  });\n\n  return errorNodes;\n};\n\n/**\n * Use markers (squiggles) to highlight syntax errors or warnings in queries.\n *\n */\nexport const setMarkers = (\n  monaco: typeof monacoTypes,\n  model: monacoTypes.editor.ITextModel,\n  errorNodes: SyntaxNode[]\n) => {\n  const markers = [\n    ...getErrorMarkers(monaco.MarkerSeverity.Error, model, errorNodes),\n    ...getWarningMarkers(monaco.MarkerSeverity.Warning, model),\n  ];\n  monaco.editor.setModelMarkers(\n    model,\n    'owner', // default value\n    markers\n  );\n};\n\nexport const getErrorMarkers = (severity: number, model: monacoTypes.editor.ITextModel, errorNodes: SyntaxNode[]) => {\n  return errorNodes.map((errorNode) => {\n    const message = computeErrorMessage(errorNode);\n    return getMarker(severity, message, model, errorNode.from, errorNode.to);\n  });\n};\n\nexport const getWarningMarkers = (severity: number, model: monacoTypes.editor.ITextModel) => {\n  let markers = [];\n\n  // Check if there are issues that should result in a warning marker\n  const text = model.getValue();\n  const tree = parser.parse(text);\n  const indexOfDot = text.indexOf('.');\n  if (indexOfDot > -1) {\n    const cur = tree.cursorAt(0);\n    do {\n      const { node } = cur;\n      if (node.type.id === Identifier) {\n        // Make sure prevSibling is using the proper scope\n        if (\n          node.prevSibling?.type.id !== Parent &&\n          node.prevSibling?.type.id !== Event &&\n          node.prevSibling?.type.id !== Instrumentation &&\n          node.prevSibling?.type.id !== Link &&\n          node.prevSibling?.type.id !== Resource &&\n          node.prevSibling?.type.id !== Span\n        ) {\n          const from = node.prevSibling ? node.prevSibling.from : node.from - 1;\n          const to = node.prevSibling ? node.prevSibling.to : node.from - 1;\n          const message = 'Add resource or span scope to attribute to improve query performance.';\n          markers.push(getMarker(severity, message, model, from, to));\n        }\n      }\n    } while (cur.next());\n  }\n\n  return markers;\n};\n\nexport const getMarker = (\n  severity: number,\n  message: string,\n  model: monacoTypes.editor.ITextModel,\n  from: number,\n  to: number\n) => {\n  let startLine = 0;\n  let endLine = 0;\n  let start = from;\n  let end = to;\n\n  while (start > 0) {\n    startLine++;\n    start -= model.getLineLength(startLine) + 1; // new lines don't count for getLineLength() but they still count as a character for the parser\n  }\n  while (end > 0) {\n    endLine++;\n    end -= model.getLineLength(endLine) + 1;\n  }\n\n  return {\n    message,\n    severity,\n\n    startLineNumber: startLine,\n    endLineNumber: endLine,\n\n    // `+ 2` because of the above computations\n    startColumn: start + model.getLineLength(startLine) + 2,\n    endColumn: end + model.getLineLength(endLine) + 2,\n  };\n};\n","import { css } from '@emotion/css';\nimport { useEffect, useRef, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { TemporaryAlert } from '@grafana/o11y-ds-frontend';\nimport { reportInteraction } from '@grafana/runtime';\nimport { CodeEditor, Monaco, monacoTypes, useTheme2 } from '@grafana/ui';\n\nimport { TempoDatasource } from '../datasource';\nimport { TempoQuery } from '../types';\n\nimport { CompletionProvider, CompletionItemType } from './autocomplete';\nimport { getErrorNodes, setMarkers } from './highlighting';\nimport { languageDefinition } from './traceql';\n\ninterface Props {\n  placeholder: string;\n  query: TempoQuery;\n  onChange: (val: TempoQuery) => void;\n  onRunQuery: () => void;\n  datasource: TempoDatasource;\n  readOnly?: boolean;\n}\n\nexport function TraceQLEditor(props: Props) {\n  const [alertText, setAlertText] = useState<string>();\n\n  const { query, onChange, onRunQuery, placeholder } = props;\n  const setupAutocompleteFn = useAutocomplete(props.datasource, setAlertText);\n  const theme = useTheme2();\n  const styles = getStyles(theme, placeholder);\n\n  // The Monaco Editor uses the first version of props.onChange in handleOnMount i.e. always has the initial\n  // value of query because underlying Monaco editor is passed `query` below in the onEditorChange callback.\n  // handleOnMount is called only once when the editor is mounted and does not get updates to query.\n  // So we need useRef to get the latest version of query in the onEditorChange callback.\n  const queryRef = useRef(query);\n  queryRef.current = query;\n  const onEditorChange = (value: string) => {\n    onChange({ ...queryRef.current, query: value });\n  };\n\n  // work around the problem that `onEditorDidMount` is called once\n  // and wouldn't get new version of onRunQuery\n  const onRunQueryRef = useRef(onRunQuery);\n  onRunQueryRef.current = onRunQuery;\n\n  const errorTimeoutId = useRef<number>();\n\n  return (\n    <>\n      <CodeEditor\n        value={query.query || ''}\n        language={langId}\n        onBlur={onEditorChange}\n        onChange={onEditorChange}\n        containerStyles={styles.queryField}\n        readOnly={props.readOnly}\n        monacoOptions={{\n          folding: false,\n          fontSize: 14,\n          lineNumbers: 'off',\n          overviewRulerLanes: 0,\n          renderLineHighlight: 'none',\n          scrollbar: {\n            vertical: 'hidden',\n            verticalScrollbarSize: 8, // used as \"padding-right\"\n            horizontal: 'hidden',\n            horizontalScrollbarSize: 0,\n          },\n          scrollBeyondLastLine: false,\n          wordWrap: 'on',\n        }}\n        onBeforeEditorMount={ensureTraceQL}\n        onEditorDidMount={(editor, monaco) => {\n          if (!props.readOnly) {\n            setupAutocompleteFn(editor, monaco, setupRegisterInteractionCommand(editor));\n            setupActions(editor, monaco, () => onRunQueryRef.current());\n            setupPlaceholder(editor, monaco, styles);\n          }\n          setupAutoSize(editor);\n\n          // Parse query that might already exist (e.g., after a page refresh)\n          const model = editor.getModel();\n          if (model) {\n            const errorNodes = getErrorNodes(model.getValue());\n            setMarkers(monaco, model, errorNodes);\n          }\n\n          // Register callback for query changes\n          editor.onDidChangeModelContent((changeEvent) => {\n            const model = editor.getModel();\n\n            if (!model) {\n              return;\n            }\n\n            // Remove previous callback if existing, to prevent squiggles from been shown while the user is still typing\n            window.clearTimeout(errorTimeoutId.current);\n\n            const errorNodes = getErrorNodes(model.getValue());\n            const cursorPosition = changeEvent.changes[0].rangeOffset;\n\n            // Immediately updates the squiggles, in case the user fixed an error,\n            // excluding the error around the cursor position\n            setMarkers(\n              monaco,\n              model,\n              errorNodes.filter((errorNode) => !(errorNode.from <= cursorPosition && cursorPosition <= errorNode.to))\n            );\n\n            // Show all errors after a short delay, to avoid flickering\n            errorTimeoutId.current = window.setTimeout(() => {\n              setMarkers(monaco, model, errorNodes);\n            }, 500);\n          });\n        }}\n      />\n      {alertText && <TemporaryAlert severity=\"error\" text={alertText} />}\n    </>\n  );\n}\n\nfunction setupPlaceholder(editor: monacoTypes.editor.IStandaloneCodeEditor, monaco: Monaco, styles: EditorStyles) {\n  const placeholderDecorators = [\n    {\n      range: new monaco.Range(1, 1, 1, 1),\n      options: {\n        className: styles.placeholder,\n        isWholeLine: true,\n      },\n    },\n  ];\n\n  let decorators: string[] = [];\n\n  const checkDecorators = (): void => {\n    const model = editor.getModel();\n\n    if (!model) {\n      return;\n    }\n\n    const newDecorators = model.getValueLength() === 0 ? placeholderDecorators : [];\n    decorators = model.deltaDecorations(decorators, newDecorators);\n  };\n\n  checkDecorators();\n  editor.onDidChangeModelContent(checkDecorators);\n}\n\nfunction setupActions(editor: monacoTypes.editor.IStandaloneCodeEditor, monaco: Monaco, onRunQuery: () => void) {\n  editor.addAction({\n    id: 'run-query',\n    label: 'Run Query',\n    keybindings: [monaco.KeyMod.Shift | monaco.KeyCode.Enter],\n    contextMenuGroupId: 'navigation',\n    contextMenuOrder: 1.5,\n    run: function () {\n      onRunQuery();\n    },\n  });\n}\n\nfunction setupRegisterInteractionCommand(editor: monacoTypes.editor.IStandaloneCodeEditor): string | null {\n  return editor.addCommand(0, function (_, label, type: CompletionItemType) {\n    const properties: Record<string, unknown> = { datasourceType: 'tempo', type };\n    // Filter out the label for TAG_VALUE completions to avoid potentially exposing sensitive data\n    if (type !== 'TAG_VALUE') {\n      properties.label = label;\n    }\n    reportInteraction('grafana_traces_traceql_completion', properties);\n  });\n}\n\nfunction setupAutoSize(editor: monacoTypes.editor.IStandaloneCodeEditor) {\n  const container = editor.getDomNode();\n  const updateHeight = () => {\n    if (container) {\n      const contentHeight = Math.min(1000, editor.getContentHeight());\n      const width = parseInt(container.style.width, 10);\n      container.style.width = `${width}px`;\n      container.style.height = `${contentHeight}px`;\n      editor.layout({ width, height: contentHeight });\n    }\n  };\n  editor.onDidContentSizeChange(updateHeight);\n  updateHeight();\n}\n\n/**\n * Hook that returns function that will set up monaco autocomplete for the label selector\n * @param datasource the Tempo datasource instance\n * @param setAlertText setter for alert's text\n */\nfunction useAutocomplete(datasource: TempoDatasource, setAlertText: (text?: string) => void) {\n  // We need the provider ref so we can pass it the label/values data later. This is because we run the call for the\n  // values here but there is additional setup needed for the provider later on. We could run the getSeries() in the\n  // returned function but that is run after the monaco is mounted so would delay the request a bit when it does not\n  // need to.\n  const providerRef = useRef<CompletionProvider>(\n    new CompletionProvider({ languageProvider: datasource.languageProvider, setAlertText })\n  );\n\n  useEffect(() => {\n    const fetchTags = async () => {\n      try {\n        await datasource.languageProvider.start();\n        setAlertText(undefined);\n      } catch (error) {\n        if (error instanceof Error) {\n          setAlertText(`Error: ${error.message}`);\n        }\n      }\n    };\n    fetchTags();\n  }, [datasource, setAlertText]);\n\n  const autocompleteDisposeFun = useRef<(() => void) | null>(null);\n  useEffect(() => {\n    // when we unmount, we unregister the autocomplete-function, if it was registered\n    return () => {\n      autocompleteDisposeFun.current?.();\n    };\n  }, []);\n\n  // This should be run in monaco onEditorDidMount\n  return (\n    editor: monacoTypes.editor.IStandaloneCodeEditor,\n    monaco: Monaco,\n    registerInteractionCommandId: string | null\n  ) => {\n    providerRef.current.editor = editor;\n    providerRef.current.monaco = monaco;\n    providerRef.current.setRegisterInteractionCommandId(registerInteractionCommandId);\n\n    const { dispose } = monaco.languages.registerCompletionItemProvider(langId, providerRef.current);\n    autocompleteDisposeFun.current = dispose;\n  };\n}\n\n// we must only run the setup code once\nlet traceqlSetupDone = false;\nconst langId = 'traceql';\n\nfunction ensureTraceQL(monaco: Monaco) {\n  if (!traceqlSetupDone) {\n    traceqlSetupDone = true;\n    const { aliases, extensions, mimetypes, def } = languageDefinition;\n    monaco.languages.register({ id: langId, aliases, extensions, mimetypes });\n    monaco.languages.setMonarchTokensProvider(langId, def.language);\n    monaco.languages.setLanguageConfiguration(langId, def.languageConfiguration);\n  }\n}\n\ninterface EditorStyles {\n  placeholder: string;\n  queryField: string;\n}\n\nconst getStyles = (theme: GrafanaTheme2, placeholder: string): EditorStyles => {\n  return {\n    queryField: css({\n      borderRadius: theme.shape.radius.default,\n      border: `1px solid ${theme.components.input.borderColor}`,\n      flex: 1,\n    }),\n    placeholder: css({\n      '::after': {\n        content: `'${placeholder}'`,\n        fontFamily: theme.typography.fontFamilyMonospace,\n        opacity: 0.3,\n      },\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport { defaults } from 'lodash';\nimport { useState } from 'react';\n\nimport { GrafanaTheme2, QueryEditorProps } from '@grafana/data';\nimport { config, reportInteraction } from '@grafana/runtime';\nimport { Button, InlineLabel, useStyles2 } from '@grafana/ui';\n\nimport { TempoDatasource } from '../datasource';\nimport { defaultQuery, MyDataSourceOptions, TempoQuery } from '../types';\n\nimport { TempoQueryBuilderOptions } from './TempoQueryBuilderOptions';\nimport { TraceQLEditor } from './TraceQLEditor';\n\ntype EditorProps = {\n  onClearResults: () => void;\n};\n\ntype Props = EditorProps & QueryEditorProps<TempoDatasource, TempoQuery, MyDataSourceOptions>;\n\nexport function QueryEditor(props: Props) {\n  const styles = useStyles2(getStyles);\n  const query = defaults(props.query, defaultQuery);\n  const [showCopyFromSearchButton, setShowCopyFromSearchButton] = useState(() => {\n    const genQuery = props.datasource.languageProvider.generateQueryFromFilters({\n      traceqlFilters: query.filters || [],\n    });\n    return genQuery === query.query || genQuery === '{}';\n  });\n\n  return (\n    <>\n      <InlineLabel>\n        Build complex queries using TraceQL to select a list of traces.{' '}\n        <a rel=\"noreferrer\" target=\"_blank\" href=\"https://grafana.com/docs/tempo/latest/traceql/\">\n          Documentation\n        </a>\n      </InlineLabel>\n      {!showCopyFromSearchButton && (\n        <div className={styles.copyContainer}>\n          <span>Continue editing the query from the Search tab?</span>\n          <Button\n            variant=\"secondary\"\n            size=\"sm\"\n            onClick={() => {\n              reportInteraction('grafana_traces_copy_to_traceql_clicked', {\n                app: props.app ?? '',\n                grafana_version: config.buildInfo.version,\n                location: 'traceql_tab',\n              });\n\n              props.onClearResults();\n              props.onChange({\n                ...query,\n                query: props.datasource.languageProvider.generateQueryFromFilters({\n                  traceqlFilters: query.filters || [],\n                }),\n              });\n              setShowCopyFromSearchButton(true);\n            }}\n            style={{ marginLeft: '10px' }}\n          >\n            Copy query from Search\n          </Button>\n        </div>\n      )}\n      <TraceQLEditor\n        placeholder=\"Enter a TraceQL query or trace ID (run with Shift+Enter)\"\n        query={query}\n        onChange={props.onChange}\n        datasource={props.datasource}\n        onRunQuery={props.onRunQuery}\n      />\n      <div className={styles.optionsContainer}>\n        <TempoQueryBuilderOptions\n          query={query}\n          onChange={props.onChange}\n          searchStreaming={props.datasource.isStreamingSearchEnabled() ?? false}\n          metricsStreaming={props.datasource.isStreamingMetricsEnabled() ?? false}\n        />\n      </div>\n    </>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  optionsContainer: css({\n    marginTop: '10px',\n  }),\n  copyContainer: css({\n    backgroundColor: theme.colors.background.secondary,\n    padding: theme.spacing(0.5, 1),\n    fontSize: theme.typography.body.fontSize,\n  }),\n});\n","import { css } from '@emotion/css';\nimport { PureComponent } from 'react';\n\nimport { QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { config, reportInteraction } from '@grafana/runtime';\nimport {\n  Button,\n  FileDropzone,\n  HorizontalGroup,\n  InlineField,\n  InlineFieldRow,\n  Modal,\n  RadioButtonGroup,\n  Themeable2,\n  withTheme2,\n} from '@grafana/ui';\n\nimport TraceQLSearch from './SearchTraceQLEditor/TraceQLSearch';\nimport { ServiceGraphSection } from './ServiceGraphSection';\nimport { TempoQueryType } from './dataquery.gen';\nimport { TempoDatasource } from './datasource';\nimport { QueryEditor } from './traceql/QueryEditor';\nimport { TempoQuery } from './types';\nimport { migrateFromSearchToTraceQLSearch } from './utils';\n\ninterface Props extends QueryEditorProps<TempoDatasource, TempoQuery>, Themeable2 {\n  // should template variables be added to tag options. default true\n  addVariablesToOptions?: boolean;\n}\ninterface State {\n  uploadModalOpen: boolean;\n}\n\n// This needs to default to traceql for data sources like Splunk, where clicking on a\n// data link should open the traceql tab and run a search based on the configured query.\nconst DEFAULT_QUERY_TYPE: TempoQueryType = 'traceql';\n\nclass TempoQueryFieldComponent extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      uploadModalOpen: false,\n    };\n  }\n\n  // Set the default query type when the component mounts.\n  // Also do this if queryType is 'clear' (which is the case when the user changes the query type)\n  // otherwise if the user changes the query type and refreshes the page, no query type will be selected\n  // which is inconsistent with how the UI was originally when they selected the Tempo data source.\n  async componentDidMount() {\n    if (!this.props.query.queryType || this.props.query.queryType === 'clear') {\n      this.props.onChange({\n        ...this.props.query,\n        queryType: DEFAULT_QUERY_TYPE,\n      });\n    }\n  }\n\n  onClearResults = () => {\n    // Run clear query to clear results\n    const { onChange, query, onRunQuery } = this.props;\n    onChange({\n      ...query,\n      queryType: 'clear',\n    });\n    onRunQuery();\n  };\n\n  render() {\n    const { query, onChange, datasource, app } = this.props;\n\n    const graphDatasourceUid = datasource.serviceMap?.datasourceUid;\n\n    let queryTypeOptions: Array<SelectableValue<TempoQueryType>> = [\n      { value: 'traceqlSearch', label: 'Search' },\n      { value: 'traceql', label: 'TraceQL' },\n      { value: 'serviceMap', label: 'Service Graph' },\n    ];\n\n    // Migrate user to new query type if they are using the old search query type\n    if (\n      query.spanName ||\n      query.serviceName ||\n      query.search ||\n      query.maxDuration ||\n      query.minDuration ||\n      query.queryType === 'nativeSearch'\n    ) {\n      onChange(migrateFromSearchToTraceQLSearch(query));\n    }\n\n    return (\n      <>\n        <Modal\n          title={'Upload trace'}\n          isOpen={this.state.uploadModalOpen}\n          onDismiss={() => this.setState({ uploadModalOpen: false })}\n        >\n          <div className={css({ padding: this.props.theme.spacing(2) })}>\n            <FileDropzone\n              options={{ multiple: false }}\n              onLoad={(result) => {\n                if (typeof result !== 'string' && result !== null) {\n                  throw Error(`Unexpected result type: ${typeof result}`);\n                }\n                this.props.datasource.uploadedJson = result;\n                onChange({\n                  ...query,\n                  queryType: 'upload',\n                });\n                this.setState({ uploadModalOpen: false });\n                this.props.onRunQuery();\n              }}\n            />\n          </div>\n        </Modal>\n        <InlineFieldRow>\n          <InlineField label=\"Query type\" grow={true}>\n            <HorizontalGroup spacing={'sm'} align={'center'} justify={'space-between'}>\n              <RadioButtonGroup<TempoQueryType>\n                options={queryTypeOptions}\n                value={query.queryType}\n                onChange={(v) => {\n                  reportInteraction('grafana_traces_query_type_changed', {\n                    datasourceType: 'tempo',\n                    app: app ?? '',\n                    grafana_version: config.buildInfo.version,\n                    newQueryType: v,\n                    previousQueryType: query.queryType ?? '',\n                  });\n\n                  this.onClearResults();\n                  onChange({\n                    ...query,\n                    queryType: v,\n                  });\n                }}\n                size=\"md\"\n              />\n              <Button\n                variant=\"secondary\"\n                size=\"sm\"\n                onClick={() => {\n                  this.setState({ uploadModalOpen: true });\n                }}\n              >\n                Import trace\n              </Button>\n            </HorizontalGroup>\n          </InlineField>\n        </InlineFieldRow>\n        {query.queryType === 'traceqlSearch' && (\n          <TraceQLSearch\n            datasource={this.props.datasource}\n            query={query}\n            onChange={onChange}\n            onBlur={this.props.onBlur}\n            app={app}\n            onClearResults={this.onClearResults}\n            addVariablesToOptions={this.props.addVariablesToOptions}\n          />\n        )}\n        {query.queryType === 'serviceMap' && (\n          <ServiceGraphSection graphDatasourceUid={graphDatasourceUid} query={query} onChange={onChange} />\n        )}\n        {query.queryType === 'traceql' && (\n          <QueryEditor\n            datasource={this.props.datasource}\n            query={query}\n            onRunQuery={this.props.onRunQuery}\n            onChange={onChange}\n            app={app}\n            onClearResults={this.onClearResults}\n          />\n        )}\n      </>\n    );\n  }\n}\n\nconst TempoQueryField = withTheme2(TempoQueryFieldComponent);\n\nexport default TempoQueryField;\n"],"names":["RawQuery","query","lang","className","theme","useTheme2","styles","getStyles","highlighted","Prism","grammar","name","div","cx","editorField","aria-label","dangerouslySetInnerHTML","__html","css","fontFamily","typography","fontFamilyMonospace","fontSize","bodySmall","QueryOptionGroup","title","children","collapsedInfo","queryStats","onToggle","isOpen","propsIsOpen","toggleOpen","useToggle","useStyles2","wrapper","Collapse","collapse","collapsible","label","Stack","gap","h6","description","map","x","i","span","body","config","featureToggles","lokiQuerySplitting","Tooltip","content","Icon","tabIndex","tooltip","size","p","stats","generateQueryStats","backgroundColor","border","marginBottom","padding","spacing","width","display","justifyContent","alignItems","flexGrow","overflow","fontWeight","fontWeightMedium","margin","color","colors","text","secondary","paddingLeft","flexWrap","marginRight","message","convertUnits","suffix","getValueFormat","bytes","parseIntWithFallback","val","fallback","parsed","parseInt","isNaN","TempoQueryBuilderOptions","React","onChange","searchStreaming","metricsStreaming","hasOwnProperty","limit","DEFAULT_LIMIT","tableType","SearchTableType","Traces","metricsQueryType","MetricsQueryType","Range","collapsedSearchOptions","spss","DEFAULT_SPSS","collapsedMetricsOptions","step","EditorRow","options","EditorField","AutoSizeInput","placeholder","type","min","defaultValue","onCommitChange","e","currentTarget","value","RadioButtonGroup","Spans","StreamingTooltip","tooltipInteractive","Instant","style","a","href","target","rel","textDecoration","displayName","AggregateByAlert","groupBy","Alert","severity","Button","onClick","validationRegex","noBoxShadow","boxShadow","filter","operators","updateFilter","invalid","test","concat","HorizontalGroup","Select","inputId","id","operatorSelectableValue","operator","v","isClearable","allowCustomValue","Input","InlineFieldRow","InlineField","labelWidth","grow","hardCodedFilterIds","datasource","onClearResults","app","addVariablesToOptions","findFilter","alertText","setAlertText","useState","error","setError","isTagsLoading","setIsTagsLoading","traceQlQuery","setTraceQlQuery","templateSrv","getTemplateSrv","useCallback","s","copy","filters","indexOfFilter","findIndex","f","replaceAt","push","templateVariables","getVariables","useEffect","languageProvider","generateQueryFromFilters","traceqlFilters","interpolateFilters","find","fetchTags","start","undefined","Error","search","forEach","staticTags","tag","dynamicFilters","includes","sf","generateQueryWithoutFilter","filtersAfterRemoval","container","InlineSearchField","filterTitle","filterScopedTag","SearchField","tags","hideScope","hideTag","scope","TraceqlSearchScope","Intrinsic","isMulti","DurationInput","valueType","TagsInput","deleteFilter","requireTagAndValue","rawQueryContainer","replace","traceqlGrammar","variant","reportInteraction","grafana_version","buildInfo","version","location","queryType","isStreamingSearchEnabled","isStreamingMetricsEnabled","alert","uid","TemporaryAlert","maxWidth","marginTop","flexDirection","background","AdHocFilterKey","disabled","filterKey","allFilters","data-testid","SegmentAsync","Component","plusSegment","loadOptions","fetchFilterKeys","inputMinWidth","fetchFilterKeysWithRemove","REMOVE_FILTER_KEY","REMOVE_VALUE","currentKey","ds","getDataSourceSrv","get","getTagKeys","otherFilters","key","response","Array","isArray","data","m","keys","AdHocFilterValue","filterValue","placeHolder","fetchFilterValues","getTagValues","timeRange","getDefaultTimeRange","OperatorSegment","Segment","AdHocFilterRenderer","onKeyChange","onOperatorChange","onValueChange","tFunc","i18n","AdHocFilterBuilder","appendBefore","onCompleted","setKey","setOperator","onKeyChanged","item","onOperatorChanged","onValueChanged","values","ConditionSegment","AdHocFilter","PureComponent","render","this","props","renderFilters","length","appendFilterToVariable","getAllFilters","baseFilters","reduce","segments","index","renderFilterSegments","Fragment","prop","removeFilter","changeFilter","addFilter","ServiceGraphSection","graphDatasourceUid","dsState","useAsync","getDS","hasKeys","setHasKeys","fn","condition","Boolean","loading","getWarning","match","re","exec","queryToFilter","serviceMapQuery","filtersToQuery","newFilters","splice","link","join","defaultQuery","getErrorNode","tree","cursorPos","cur","cursorAt","from","to","node","isError","next","move","direction","walk","path","current","expectedNodeIDs","getNodeText","slice","isPathMatch","resolverPath","cursorPath","every","RESOLVERS","AttributeField","fun","attributeFieldParent","attributeFieldParentText","indexOfDot","indexOf","attributeFieldUpToDot","FieldExpression","resolveExpression","SpansetFilter","originalPos","situation","resolveAttributeCompletion","Aggregate","resolveAttributeForFunction","IntrinsicField","GroupOperation","SelectOperation","SpansetPipelineExpression","_1","_2","prevSibling","Pipe","ScalarFilter","SpansetPipeline","_0","ComparisonOp","resolveSpanset","resolveNewSpansetExpression","TraceQL","StringNode","Static","pos","getAttributeFieldUpToDot","endOfPathNode","endOfPathNode2","_","FieldOp","attributeField","parent","tagName","betweenQuotes","offset","previousNode","firstChild","nextSibling","console","And","Or","SelectArgs","CompletionProvider","provideCompletionItems","model","position","monaco","editor","getModel","suggestions","range","word","getWordAtPosition","lift","startLineNumber","lineNumber","endLineNumber","startColumn","endColumn","fromPositions","positionClone","column","getOffsetAt","getRangeAndOffset","parser","parse","shiftedOffset","errorNode","cursor","currentNode","ids","situationType","resolver","getSituation","getValue","getCompletions","Promise","resolve","then","items","registerInteractionCommandId","modelValue","SUGGEST_REGEXP","substring","maxIndexDigits","toString","suggestion","kind","getMonacoCompletionItemKind","insertText","insertTextRules","detail","documentation","sortText","padStart","command","arguments","fixSuggestion","completionItemsToSuggestions","setRegisterInteractionCommandId","tagValues","cacheKey","cachedValues","getOptionsV2","getScopesCompletions","getIntrinsicsCompletions","getTagsCompletions","getOperatorsCompletions","comparisonOps","logicalOps","arithmeticOps","spansetOps","functions","languages","CompletionItemInsertTextRule","InsertAsSnippet","isFetchError","getInsertionText","prepend","sort","collator","compare","tagsToCompletionItems","getTraceqlAutocompleteTags","append","getIntrinsics","scopes","ops","constructor","triggerCharacters","CompletionItemKind","Enum","Keyword","Operator","EnumMember","Class","Function","structuralOps","aggregatorFunctions","Intl","Collator","sensitivity","getErrorNodes","trim","errorNodes","iterate","enter","nodeRef","setMarkers","markers","getErrorMarkers","MarkerSeverity","getWarningMarkers","Warning","setModelMarkers","ScalarExpression","computeErrorMessage","getMarker","Identifier","Parent","Event","Instrumentation","Link","Resource","Span","startLine","endLine","end","getLineLength","TraceQLEditor","onRunQuery","setupAutocompleteFn","providerRef","useRef","autocompleteDisposeFun","dispose","registerCompletionItemProvider","langId","useAutocomplete","queryRef","onEditorChange","onRunQueryRef","errorTimeoutId","CodeEditor","language","onBlur","containerStyles","queryField","readOnly","monacoOptions","folding","lineNumbers","overviewRulerLanes","renderLineHighlight","scrollbar","vertical","verticalScrollbarSize","horizontal","horizontalScrollbarSize","scrollBeyondLastLine","wordWrap","onBeforeEditorMount","ensureTraceQL","onEditorDidMount","addCommand","properties","datasourceType","setupRegisterInteractionCommand","addAction","keybindings","KeyMod","Shift","KeyCode","Enter","contextMenuGroupId","contextMenuOrder","run","setupActions","placeholderDecorators","isWholeLine","decorators","checkDecorators","newDecorators","getValueLength","deltaDecorations","onDidChangeModelContent","setupPlaceholder","getDomNode","updateHeight","contentHeight","Math","getContentHeight","height","layout","onDidContentSizeChange","setupAutoSize","changeEvent","window","clearTimeout","cursorPosition","changes","rangeOffset","setTimeout","traceqlSetupDone","aliases","extensions","mimetypes","def","languageDefinition","register","setMonarchTokensProvider","setLanguageConfiguration","languageConfiguration","borderRadius","shape","radius","default","components","input","borderColor","flex","opacity","QueryEditor","defaults","showCopyFromSearchButton","setShowCopyFromSearchButton","genQuery","InlineLabel","copyContainer","marginLeft","optionsContainer","TempoQueryFieldComponent","componentDidMount","serviceMap","datasourceUid","spanName","serviceName","maxDuration","minDuration","migrateFromSearchToTraceQLSearch","Modal","state","uploadModalOpen","onDismiss","setState","FileDropzone","multiple","onLoad","result","uploadedJson","align","justify","newQueryType","previousQueryType","TraceQLSearch","super","withTheme2"],"sourceRoot":""}