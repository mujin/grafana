{"version":3,"file":"module.js","mappings":"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","sources":["webpack://stackdriver/../../../../../node_modules/@grafana/google-sdk/dist/index.production.js","webpack://stackdriver/../../../../../node_modules/@grafana/google-sdk/index.js","webpack://stackdriver/../../../../../node_modules/debounce-promise/dist/index.js","webpack://stackdriver/../../../../../node_modules/fast-deep-equal/index.js","webpack://stackdriver/../../../../../node_modules/react/cjs/react-jsx-runtime.production.min.js","webpack://stackdriver/../../../../../node_modules/react/jsx-runtime.js","webpack://stackdriver/external amd \"@emotion/css\"","webpack://stackdriver/external amd \"@grafana/data\"","webpack://stackdriver/external amd \"@grafana/runtime\"","webpack://stackdriver/external amd \"@grafana/ui\"","webpack://stackdriver/external amd \"lodash\"","webpack://stackdriver/external amd \"react\"","webpack://stackdriver/external amd \"rxjs\"","webpack://stackdriver/external amd \"rxjs/operators\"","webpack://stackdriver/webpack/bootstrap","webpack://stackdriver/webpack/runtime/compat get default export","webpack://stackdriver/webpack/runtime/define property getters","webpack://stackdriver/webpack/runtime/hasOwnProperty shorthand","webpack://stackdriver/webpack/runtime/make namespace object","webpack://stackdriver/./components/CloudMonitoringCheatSheet.tsx","webpack://stackdriver/../../../../../node_modules/@grafana/plugin-ui/dist/esm/components/ConfigEditor/DataSourceDescription.js","webpack://stackdriver/../../../../../node_modules/@grafana/plugin-ui/dist/esm/components/ConfigEditor/ConfigSection/GenericConfigSection.js","webpack://stackdriver/../../../../../node_modules/@grafana/plugin-ui/dist/esm/components/ConfigEditor/ConfigSection/ConfigSection.js","webpack://stackdriver/./components/ConfigEditor/ConfigEditor.tsx","webpack://stackdriver/../../../../../node_modules/@grafana/plugin-ui/dist/esm/components/QueryEditor/EditorStack.js","webpack://stackdriver/../../../../../node_modules/@grafana/plugin-ui/dist/esm/components/QueryEditor/EditorRows.js","webpack://stackdriver/./e2e/selectors.ts","webpack://stackdriver/./dataquery.gen.ts","webpack://stackdriver/../../../../../node_modules/@grafana/plugin-ui/dist/esm/components/QueryEditor/EditorField.js","webpack://stackdriver/./components/AliasBy.tsx","webpack://stackdriver/../../../../../node_modules/@grafana/plugin-ui/dist/esm/components/QueryEditor/EditorRow.js","webpack://stackdriver/./constants.ts","webpack://stackdriver/./components/Project.tsx","webpack://stackdriver/../../../../../node_modules/@grafana/plugin-ui/dist/esm/components/QueryEditor/EditorFieldGroup.js","webpack://stackdriver/./functions.ts","webpack://stackdriver/./components/Aggregation.tsx","webpack://stackdriver/./components/GroupBy.tsx","webpack://stackdriver/./components/AlignmentFunction.tsx","webpack://stackdriver/./components/PeriodSelect.tsx","webpack://stackdriver/./components/Alignment.tsx","webpack://stackdriver/../../../../../node_modules/@grafana/plugin-ui/dist/esm/components/QueryEditor/AccessoryButton.js","webpack://stackdriver/../../../../../node_modules/@grafana/plugin-ui/dist/esm/components/QueryEditor/EditorList.js","webpack://stackdriver/./components/LabelFilter.tsx","webpack://stackdriver/./components/AnnotationsHelp.tsx","webpack://stackdriver/./components/LookbackPeriodSelect.tsx","webpack://stackdriver/./components/SLO.tsx","webpack://stackdriver/./components/Selector.tsx","webpack://stackdriver/./components/Service.tsx","webpack://stackdriver/./components/SLOQueryEditor.tsx","webpack://stackdriver/./components/MQLQueryEditor.tsx","webpack://stackdriver/./components/Fields.tsx","webpack://stackdriver/./components/Preprocessor.tsx","webpack://stackdriver/./components/VisualMetricQueryEditor.tsx","webpack://stackdriver/./components/GraphPeriod.tsx","webpack://stackdriver/./components/MetricQueryEditor.tsx","webpack://stackdriver/./components/PromQLEditor.tsx","webpack://stackdriver/../../../../../node_modules/@grafana/plugin-ui/dist/esm/components/QueryEditor/EditorHeader.js","webpack://stackdriver/../../../../../node_modules/@grafana/plugin-ui/dist/esm/components/QueryEditor/InlineSelect.js","webpack://stackdriver/../../../../../node_modules/@grafana/plugin-ui/dist/esm/components/QueryEditor/FlexItem.js","webpack://stackdriver/./components/QueryHeader.tsx","webpack://stackdriver/./components/VariableQueryEditor.tsx","webpack://stackdriver/../../../../../node_modules/react-use/esm/useDebounce.js","webpack://stackdriver/../../../../../node_modules/react-use/esm/useTimeoutFn.js","webpack://stackdriver/./components/AnnotationQueryEditor.tsx","webpack://stackdriver/./annotationSupport.ts","webpack://stackdriver/./CloudMonitoringMetricFindQuery.ts","webpack://stackdriver/./variables.ts","webpack://stackdriver/./datasource.ts","webpack://stackdriver/./module.ts","webpack://stackdriver/./components/QueryEditor.tsx","webpack://stackdriver/./tracking.ts"],"sourcesContent":["Object.defineProperty(exports,\"__esModule\",{value:!0});var e=require(\"@grafana/data\"),t=require(\"@grafana/ui\"),a=require(\"react\"),n=require(\"lodash\");function l(e){return e&&\"object\"==typeof e&&\"default\"in e?e:{default:e}}var o=l(a);const i={JWT:\"jwt\",GCE:\"gce\"},r=\"Configuration help box\",s=\"Configuration drop zone\",u=\"Configuration text area\",c=\"Paste JWT button\",d=\"Upload JWT button\",p=\"JWT form\",f=\"JWT button\",m=\"GCE button\",g=\"Private Key Path Input\",h=\"Private Key Input\",y=\"Fill JWT info manually\",E=\"Show private key path input\",T=\"Show private key input\",v=[\"private_key\",\"token_uri\",\"client_email\",\"project_id\"],b=({onChange:e,showConfigEditor:n,showPaste:l,showUpload:i,isPasting:r,isUploading:p})=>{const[f,m]=a.useState(),g=t.useTheme2(),h=a.useCallback((e=>{m(null),l()}),[l]),E=a.useCallback((e=>{i(),m(null)}),[i]),T=a.useCallback((t=>{if(\"\"!==t.trim()){let a;try{a=JSON.parse(t)}catch(e){m(\"Invalid JWT token\")}const l=j(a);l.isValid?(n(),e({privateKey:a.private_key,tokenUri:a.token_uri,clientEmail:a.client_email,projectId:a.project_id})):m(l.error)}}),[m,e,n]);return o.default.createElement(o.default.Fragment,null,o.default.createElement(t.Field,{label:\"JWT token\",invalid:Boolean(f),description:r?\"Paste JWT token below\":\"Upload or paste Google JWT token\",error:f},o.default.createElement(o.default.Fragment,null,p&&o.default.createElement(\"div\",{\"data-testid\":s},t.FileDropzone&&o.default.createElement(t.FileDropzone,{options:{multiple:!1,accept:\".json\"},readAs:\"readAsText\",onLoad:e=>{T(e)}},o.default.createElement(\"p\",{style:{margin:0,fontSize:`${g.typography.h4.fontSize}`,textAlign:\"center\"}},\"Drop the Google JWT file here\",o.default.createElement(\"br\",null),o.default.createElement(\"br\",null),o.default.createElement(t.Button,{fill:\"outline\"},\"Click to browse files\")))),r&&o.default.createElement(t.TextArea,{\"data-testid\":u,autoFocus:!0,invalid:Boolean(f),placeholder:\"Paste Google JWT token here\",onBlur:e=>T(e.currentTarget.value),rows:12}))),!r&&o.default.createElement(o.default.Fragment,null,o.default.createElement(t.Button,{\"data-testid\":c,type:\"button\",fill:\"outline\",style:{color:`${g.colors.primary.text}`},onClick:h},\"Paste JWT Token\"),o.default.createElement(\"span\",{style:{paddingRight:\"10px\",paddingLeft:\"10px\"}},\"or\")),r&&o.default.createElement(o.default.Fragment,null,o.default.createElement(t.Button,{\"data-testid\":d,type:\"button\",fill:\"outline\",style:{color:`${g.colors.primary.text}`},onClick:()=>{i()}},\"Upload JWT Token\"),o.default.createElement(\"span\",{style:{paddingRight:\"10px\",paddingLeft:\"10px\"}},\"or\")),o.default.createElement(t.Button,{\"data-testid\":y,type:\"button\",fill:\"outline\",style:{color:`${g.colors.primary.text}`},onClick:n},\"Fill In JWT Token manually\"),r&&f&&o.default.createElement(t.Field,null,o.default.createElement(t.Button,{type:\"button\",fill:\"outline\",style:{color:`${g.colors.primary.text}`},onClick:E},\"Upload JWT Token\")))},j=e=>{if(!n.isObject(e))return{isValid:!1,error:\"Invalid JWT token\"};const t=v.filter((t=>!e[t]));return t.length>0?{isValid:!1,error:`Missing keys: ${t.join(\", \")}`}:{isValid:!0}},{SecretFormField:k}=t.LegacyForms;var J;!function(e){e.PATH=\"path\",e.JWT=\"jwt\"}(J||(J={}));const P=({options:a,onReset:n,onOptionsChange:l,showPaste:i,showUpload:r})=>{var s;const[u,f]=o.default.useState((e=>\"privateKeyPath\"in e&&\"\"!==e.privateKeyPath?J.PATH:J.JWT)(a.jsonData)),m=t=>e.onUpdateDatasourceJsonDataOption({options:a,onOptionsChange:l},t),y=()=>{u===J.JWT?f(J.PATH):f(J.JWT)},v=t.useTheme2(),b=o.default.createElement(\"span\",null,u===J.PATH?o.default.createElement(\"a\",{className:\"external-link\",onClick:y,\"data-testid\":T},\"Paste private key\"):\"Paste private key\",\" \",\"or  \",u===J.JWT?o.default.createElement(\"a\",{className:\"external-link\",onClick:y,\"data-testid\":E},\"provide path to private file\"):\"provide path to private key file\"),j={isConfigured:Boolean(a.secureJsonFields.privateKey),value:(null===(s=a.secureJsonData)||void 0===s?void 0:s.privateKey)||\"\",placeholder:\"Enter Private key\",onReset:()=>n(),onChange:e.onUpdateDatasourceSecureJsonDataOption({options:a,onOptionsChange:l},\"privateKey\"),\"data-testid\":h};return o.default.createElement(\"div\",{\"data-testid\":p},o.default.createElement(t.Field,{label:\"Project ID\"},o.default.createElement(t.Input,{id:\"defaultProject\",width:60,value:a.jsonData.defaultProject||\"\",onChange:m(\"defaultProject\")})),o.default.createElement(t.Field,{label:\"Client email\"},o.default.createElement(t.Input,{width:60,id:\"clientEmail\",value:a.jsonData.clientEmail||\"\",onChange:m(\"clientEmail\")})),o.default.createElement(t.Field,{label:\"Token URI\"},o.default.createElement(t.Input,{width:60,id:\"tokenUri\",value:a.jsonData.tokenUri||\"\",onChange:m(\"tokenUri\")})),u===J.PATH&&o.default.createElement(t.Field,{label:\"Private key path\",description:b},o.default.createElement(t.Input,{width:60,id:\"privateKeyPath\",value:a.jsonData.privateKeyPath||\"\",placeholder:\"File location of your private key (e.g. /etc/secrets/gce.pem)\",onChange:m(\"privateKeyPath\"),\"data-testid\":g})),u===J.JWT&&o.default.createElement(o.default.Fragment,null,t.SecretInput?o.default.createElement(t.Field,{label:\"Private key\",description:b},o.default.createElement(t.SecretInput,Object.assign({},j,{width:60}))):o.default.createElement(k,Object.assign({},j,{label:\"Private key\",labelWidth:10,inputWidth:20}))),o.default.createElement(o.default.Fragment,null,o.default.createElement(t.Button,{\"data-testid\":c,type:\"button\",fill:\"outline\",style:{color:`${v.colors.primary.text}`},onClick:i},\"Paste JWT Token\"),o.default.createElement(\"span\",{style:{paddingRight:\"10px\",paddingLeft:\"10px\"}},\"or\"),o.default.createElement(t.Button,{\"data-testid\":d,type:\"button\",fill:\"outline\",style:{color:`${v.colors.primary.text}`},onClick:r},\"Upload JWT Token\")))};function C(n){const{options:l,onOptionsChange:r,authOptions:s}=n,{jsonData:u,secureJsonFields:c,secureJsonData:d}=l,p=()=>Boolean(u.clientEmail&&u.defaultProject&&u.tokenUri&&(c&&c.privateKey||u.privateKeyPath));u.authenticationType||(u.authenticationType=i.JWT);const[f,m]=a.useState(O(u.authenticationType)),[g,h]=a.useState(p()),[y,E]=a.useState(!1),[T,v]=a.useState(!0),j=()=>{E(!1),v(!0),h(!1)},k=()=>{E(!0),v(!1),h(!1)};return o.default.createElement(o.default.Fragment,null,o.default.createElement(t.FieldSet,{label:\"Authentication\"},o.default.createElement(t.Field,{label:\"Authentication type\"},o.default.createElement(t.RadioButtonGroup,{options:s,value:u.authenticationType||i.JWT,onChange:e=>{h(p()),r(Object.assign(Object.assign({},l),{jsonData:Object.assign(Object.assign({},l.jsonData),{authenticationType:e})})),m(O(e))}}))),f&&o.default.createElement(t.FieldSet,{label:\"JWT Key Details\"},g?o.default.createElement(P,{options:l,onReset:()=>(e=>{const t=Object.assign({},d),a=e?Object.assign(Object.assign({},l.jsonData),e):Object.assign({},l.jsonData);delete a.clientEmail,delete a.defaultProject,delete a.tokenUri,delete a.privateKeyPath,delete t.privateKey,m(!0),h(!1),r(Object.assign(Object.assign({},l),{secureJsonFields:Object.assign(Object.assign({},l.secureJsonFields),{privateKey:!1}),secureJsonData:t,jsonData:a}))})(),onOptionsChange:r,showUpload:j,showPaste:k}):o.default.createElement(b,{showConfigEditor:()=>{h(!0)},showUpload:j,showPaste:k,isPasting:y,isUploading:T,onChange:e=>{r(Object.assign(Object.assign({},l),{secureJsonFields:Object.assign(Object.assign({},c),{privateKey:!0}),secureJsonData:Object.assign(Object.assign({},d),{privateKey:e.privateKey}),jsonData:Object.assign(Object.assign({},u),{clientEmail:e.clientEmail,defaultProject:e.projectId,tokenUri:e.tokenUri})}))}}),\" \"),u.authenticationType===i.GCE&&o.default.createElement(t.Field,{label:\"Default project\"},o.default.createElement(t.Input,{id:\"defaultProject\",width:60,value:l.jsonData.defaultProject||\"\",onChange:e.onUpdateDatasourceJsonDataOption(n,\"defaultProject\")})))}const O=e=>e===i.JWT||void 0===e,W=[{label:\"Google JWT File\",value:i.JWT,ariaLabel:f},{label:\"GCE Default Service Account\",value:i.GCE,ariaLabel:m}];exports.AuthConfig=C,exports.ConnectionConfig=e=>{const{options:{jsonData:a}}=e;a.authenticationType||(a.authenticationType=i.JWT);const n=a.authenticationType===i.JWT||void 0===a.authenticationType;return o.default.createElement(o.default.Fragment,null,o.default.createElement(C,Object.assign({authOptions:W},e)),o.default.createElement(\"div\",{className:\"grafana-info-box\",style:{marginTop:\"16px\"},\"data-testid\":r},o.default.createElement(\"p\",null,\"Don’t know how to get a service account key file or create a service account? Read more\",\" \",o.default.createElement(\"a\",{className:\"external-link\",target:\"_blank\",rel:\"noopener noreferrer\",href:\"https://grafana.com/docs/grafana/latest/datasources/google-cloud-monitoring/google-authentication/\"},\"in the documentation.\"))),!n&&o.default.createElement(t.Alert,{title:\"\",severity:\"info\"},\"Verify GCE default service account by clicking Save & Test\"))},exports.GOOGLE_AUTH_TYPE_OPTIONS=W,exports.GoogleAuthType=i,exports.JWTConfigEditor=b,exports.JWTForm=P;\n//# sourceMappingURL=index.production.js.map\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./dist/index.production.js');\n} else {\n  module.exports = require('./dist/index.development.js');\n}\n","'use strict';\n\n/* global setTimeout, clearTimeout */\n\nmodule.exports = function debounce(fn) {\n  var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  var lastCallAt = void 0;\n  var deferred = void 0;\n  var timer = void 0;\n  var pendingArgs = [];\n  return function debounced() {\n    var currentWait = getWait(wait);\n    var currentTime = new Date().getTime();\n\n    var isCold = !lastCallAt || currentTime - lastCallAt > currentWait;\n\n    lastCallAt = currentTime;\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (isCold && options.leading) {\n      return options.accumulate ? Promise.resolve(fn.call(this, [args])).then(function (result) {\n        return result[0];\n      }) : Promise.resolve(fn.call.apply(fn, [this].concat(args)));\n    }\n\n    if (deferred) {\n      clearTimeout(timer);\n    } else {\n      deferred = defer();\n    }\n\n    pendingArgs.push(args);\n    timer = setTimeout(flush.bind(this), currentWait);\n\n    if (options.accumulate) {\n      var argsIndex = pendingArgs.length - 1;\n      return deferred.promise.then(function (results) {\n        return results[argsIndex];\n      });\n    }\n\n    return deferred.promise;\n  };\n\n  function flush() {\n    var thisDeferred = deferred;\n    clearTimeout(timer);\n\n    Promise.resolve(options.accumulate ? fn.call(this, pendingArgs) : fn.apply(this, pendingArgs[pendingArgs.length - 1])).then(thisDeferred.resolve, thisDeferred.reject);\n\n    pendingArgs = [];\n    deferred = null;\n  }\n};\n\nfunction getWait(wait) {\n  return typeof wait === 'function' ? wait() : wait;\n}\n\nfunction defer() {\n  var deferred = {};\n  deferred.promise = new Promise(function (resolve, reject) {\n    deferred.resolve = resolve;\n    deferred.reject = reject;\n  });\n  return deferred;\n}\n//# sourceMappingURL=index.js.map","'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n","/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE__89__;","module.exports = __WEBPACK_EXTERNAL_MODULE__781__;","module.exports = __WEBPACK_EXTERNAL_MODULE__531__;","module.exports = __WEBPACK_EXTERNAL_MODULE__7__;","module.exports = __WEBPACK_EXTERNAL_MODULE__241__;","module.exports = __WEBPACK_EXTERNAL_MODULE__959__;","module.exports = __WEBPACK_EXTERNAL_MODULE__269__;","module.exports = __WEBPACK_EXTERNAL_MODULE__59__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { css } from '@emotion/css';\nimport { PureComponent } from 'react';\n\nimport { QueryEditorHelpProps } from '@grafana/data';\n\nimport { CloudMonitoringQuery } from '../types/query';\n\nexport default class CloudMonitoringCheatSheet extends PureComponent<\n  QueryEditorHelpProps<CloudMonitoringQuery>,\n  { userExamples: string[] }\n> {\n  render() {\n    return (\n      <div>\n        <h2>Cloud Monitoring alias patterns</h2>\n        <div>\n          <p>\n            Format the legend keys any way you want by using alias patterns. Format the legend keys any way you want by\n            using alias patterns.\n          </p>\n          Example:\n          <code>{`${'{{metric.name}} - {{metric.label.instance_name}}'}`}</code>\n          <br />\n          Result: &nbsp;&nbsp;<code>cpu/usage_time - server1-europe-west-1</code>\n          <br />\n          <br />\n          <span>Patterns:</span>\n          <br />\n          <ul\n            className={css({\n              listStyle: 'none',\n            })}\n          >\n            <li>\n              <code>{`${'{{metric.type}}'}`}</code> = metric type e.g. compute.googleapis.com/instance/cpu/usage_time\n            </li>\n            <li>\n              <code>{`${'{{metric.name}}'}`}</code> = name part of metric e.g. instance/cpu/usage_time\n            </li>\n            <li>\n              <code>{`${'{{metric.service}}'}`}</code> = service part of metric e.g. compute\n            </li>\n            <li>\n              <code>{`${'{{metric.label.label_name}}'}`}</code> = Metric label metadata e.g. metric.label.instance_name\n            </li>\n            <li>\n              <code>{`${'{{resource.label.label_name}}'}`}</code> = Resource label metadata e.g. resource.label.zone\n            </li>\n            <li>\n              <code>{`${'{{metadata.system_labels.name}}'}`}</code> = Meta data system labels e.g.\n              metadata.system_labels.name. For this to work, the needs to be included in the group by\n            </li>\n            <li>\n              <code>{`${'{{metadata.user_labels.name}}'}`}</code> = Meta data user labels e.g.\n              metadata.user_labels.name. For this to work, the needs to be included in the group by\n            </li>\n            <li>\n              <code>{`${'{{bucket}}'}`}</code> = bucket boundary for distribution metrics when using a heatmap in\n              Grafana\n            </li>\n            <li>\n              <code>{`${'{{project}}'}`}</code> = The project name that was specified in the query editor\n            </li>\n            <li>\n              <code>{`${'{{service}}'}`}</code> = The service id that was specified in the SLO query editor\n            </li>\n            <li>\n              <code>{`${'{{slo}}'}`}</code> = The SLO id that was specified in the SLO query editor\n            </li>\n            <li>\n              <code>{`${'{{selector}}'}`}</code> = The Selector function that was specified in the SLO query editor\n            </li>\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React__default from 'react';\nimport { css, cx } from '@emotion/css';\nimport { useTheme2 } from '@grafana/ui';\n\nconst DataSourceDescription = ({ dataSourceName, docsLink, hasRequiredFields = true, className }) => {\n  const theme = useTheme2();\n  const styles = {\n    container: css({\n      p: {\n        margin: 0\n      },\n      \"p + p\": {\n        marginTop: theme.spacing(2)\n      }\n    }),\n    text: css({\n      ...theme.typography.body,\n      color: theme.colors.text.secondary,\n      a: css({\n        color: theme.colors.text.link,\n        textDecoration: \"underline\",\n        \"&:hover\": {\n          textDecoration: \"none\"\n        }\n      })\n    })\n  };\n  return /* @__PURE__ */ React__default.createElement(\"div\", { className: cx(styles.container, className) }, /* @__PURE__ */ React__default.createElement(\"p\", { className: styles.text }, \"Before you can use the \", dataSourceName, \" data source, you must configure it below or in the config file. For detailed instructions,\", \" \", /* @__PURE__ */ React__default.createElement(\"a\", { href: docsLink, target: \"_blank\", rel: \"noreferrer\" }, \"view the documentation\"), \".\"), hasRequiredFields && /* @__PURE__ */ React__default.createElement(\"p\", { className: styles.text }, /* @__PURE__ */ React__default.createElement(\"i\", null, \"Fields marked with * are required\")));\n};\n\nexport { DataSourceDescription };\n//# sourceMappingURL=DataSourceDescription.js.map\n","import React__default, { useState } from 'react';\nimport { css } from '@emotion/css';\nimport { useTheme2, IconButton } from '@grafana/ui';\n\nconst GenericConfigSection = ({\n  children,\n  title,\n  description,\n  isCollapsible = false,\n  isInitiallyOpen = true,\n  kind = \"section\",\n  className\n}) => {\n  const { colors, typography, spacing } = useTheme2();\n  const [isOpen, setIsOpen] = useState(isCollapsible ? isInitiallyOpen : true);\n  const iconName = isOpen ? \"angle-up\" : \"angle-down\";\n  const isSubSection = kind === \"sub-section\";\n  const collapsibleButtonAriaLabel = `${isOpen ? \"Collapse\" : \"Expand\"} section ${title}`;\n  const styles = {\n    header: css({\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      alignItems: \"center\"\n    }),\n    title: css({\n      margin: 0\n    }),\n    subtitle: css({\n      margin: 0,\n      fontWeight: typography.fontWeightRegular\n    }),\n    descriptionText: css({\n      marginTop: spacing(isSubSection ? 0.25 : 0.5),\n      marginBottom: 0,\n      ...typography.bodySmall,\n      color: colors.text.secondary\n    }),\n    content: css({\n      marginTop: spacing(2)\n    })\n  };\n  return /* @__PURE__ */ React__default.createElement(\"div\", { className }, /* @__PURE__ */ React__default.createElement(\"div\", { className: styles.header }, kind === \"section\" ? /* @__PURE__ */ React__default.createElement(\"h3\", { className: styles.title }, title) : /* @__PURE__ */ React__default.createElement(\"h6\", { className: styles.subtitle }, title), isCollapsible && /* @__PURE__ */ React__default.createElement(\n    IconButton,\n    {\n      name: iconName,\n      onClick: () => setIsOpen(!isOpen),\n      type: \"button\",\n      size: \"xl\",\n      \"aria-label\": collapsibleButtonAriaLabel\n    }\n  )), description && /* @__PURE__ */ React__default.createElement(\"p\", { className: styles.descriptionText }, description), isOpen && /* @__PURE__ */ React__default.createElement(\"div\", { className: styles.content }, children));\n};\n\nexport { GenericConfigSection };\n//# sourceMappingURL=GenericConfigSection.js.map\n","import React__default from 'react';\nimport { GenericConfigSection } from './GenericConfigSection.js';\n\nconst ConfigSection = ({ children, ...props }) => {\n  return /* @__PURE__ */ React__default.createElement(GenericConfigSection, { ...props, kind: \"section\" }, children);\n};\n\nexport { ConfigSection };\n//# sourceMappingURL=ConfigSection.js.map\n","import { PureComponent } from 'react';\n\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { ConnectionConfig } from '@grafana/google-sdk';\nimport { ConfigSection, DataSourceDescription } from '@grafana/plugin-ui';\nimport { reportInteraction, config } from '@grafana/runtime';\nimport { Divider, SecureSocksProxySettings } from '@grafana/ui';\n\nimport { CloudMonitoringOptions, CloudMonitoringSecureJsonData } from '../../types/types';\n\nexport type Props = DataSourcePluginOptionsEditorProps<CloudMonitoringOptions, CloudMonitoringSecureJsonData>;\n\nexport class ConfigEditor extends PureComponent<Props> {\n  handleOnOptionsChange = (options: Props['options']) => {\n    if (options.jsonData.privateKeyPath || options.secureJsonFields['privateKey']) {\n      reportInteraction('grafana_cloud_monitoring_config_changed', {\n        authenticationType: 'JWT',\n        privateKey: options.secureJsonFields['privateKey'],\n        privateKeyPath: !!options.jsonData.privateKeyPath,\n      });\n    }\n    this.props.onOptionsChange(options);\n  };\n\n  render() {\n    const { options, onOptionsChange } = this.props;\n    return (\n      <>\n        <DataSourceDescription\n          dataSourceName=\"Google Cloud Monitoring\"\n          docsLink=\"https://grafana.com/docs/grafana/latest/datasources/google-cloud-monitoring/\"\n          hasRequiredFields\n        />\n        <Divider />\n        <ConnectionConfig {...this.props} onOptionsChange={this.handleOnOptionsChange}></ConnectionConfig>\n        {config.secureSocksDSProxyEnabled && (\n          <>\n            <Divider />\n            <ConfigSection\n              title=\"Additional settings\"\n              description=\"Additional settings are optional settings that can be configured for more control over your data source. This includes Secure Socks Proxy.\"\n              isCollapsible={true}\n              isInitiallyOpen={options.jsonData.enableSecureSocksProxy !== undefined}\n            >\n              <SecureSocksProxySettings options={options} onOptionsChange={onOptionsChange} />\n            </ConfigSection>\n          </>\n        )}\n      </>\n    );\n  }\n}\n","import React__default from 'react';\nimport { Stack } from '@grafana/ui';\nimport '@grafana/data';\n\nconst EditorStack = ({ children, wrap: wrapItems = true, ...props }) => {\n  var _a, _b;\n  return /* @__PURE__ */ React__default.createElement(Stack, { wrap: wrapItems ? \"wrap\" : undefined, direction: (_a = props.direction) != null ? _a : \"row\", gap: (_b = props.gap) != null ? _b : 2, ...props }, children);\n};\n\nexport { EditorStack };\n//# sourceMappingURL=EditorStack.js.map\n","import React__default from 'react';\nimport { EditorStack } from './EditorStack.js';\n\nconst EditorRows = ({ children }) => {\n  return /* @__PURE__ */ React__default.createElement(EditorStack, { gap: 0.5, direction: \"column\" }, children);\n};\n\nexport { EditorRows };\n//# sourceMappingURL=EditorRows.js.map\n","import { E2ESelectors } from '@grafana/e2e-selectors';\n\nexport const components = {\n  queryEditor: {\n    container: 'data-testid cloud-monitoring-query-editor',\n    header: {\n      select: 'data-testid cloud-monitoring-header',\n    },\n    visualMetricsQueryEditor: {\n      container: { input: 'data-testid cloud-monitoring-visual-metrics-query-editor' },\n    },\n    mqlMetricsQueryEditor: {\n      container: { input: 'data-testid cloud-monitoring-mql-query-editor' },\n    },\n    sloQueryEditor: {\n      container: {\n        input: 'data-testid cloud-monitoring-slo-query-editor',\n      },\n    },\n    promQlQueryEditor: {\n      container: {\n        input: 'data-testid cloud-monitoring-prom-ql-query-editor',\n      },\n    },\n  },\n};\n\nexport const selectors: { components: E2ESelectors<typeof components> } = {\n  components: components,\n};\n","// Code generated - EDITING IS FUTILE. DO NOT EDIT.\n//\n// Generated by:\n//     public/app/plugins/gen.go\n// Using jennies:\n//     TSTypesJenny\n//     PluginTsTypesJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\nimport * as common from '@grafana/schema';\n\nexport interface CloudMonitoringQuery extends common.DataQuery {\n  /**\n   * Aliases can be set to modify the legend labels. e.g. {{metric.label.xxx}}. See docs for more detail.\n   */\n  aliasBy?: string;\n  /**\n   * Time interval in milliseconds.\n   */\n  intervalMs?: number;\n  /**\n   * PromQL sub-query properties.\n   */\n  promQLQuery?: PromQLQuery;\n  /**\n   * SLO sub-query properties.\n   */\n  sloQuery?: SLOQuery;\n  /**\n   * GCM query type.\n   * queryType: #QueryType\n   * Time Series List sub-query properties.\n   */\n  timeSeriesList?: TimeSeriesList;\n  /**\n   * Time Series sub-query properties.\n   */\n  timeSeriesQuery?: TimeSeriesQuery;\n}\n\n/**\n * Defines the supported queryTypes.\n */\nexport enum QueryType {\n  ANNOTATION = 'annotation',\n  PROMQL = 'promQL',\n  SLO = 'slo',\n  TIME_SERIES_LIST = 'timeSeriesList',\n  TIME_SERIES_QUERY = 'timeSeriesQuery',\n}\n\n/**\n * Time Series List sub-query properties.\n */\nexport interface TimeSeriesList {\n  /**\n   * Alignment period to use when regularizing data. Defaults to cloud-monitoring-auto.\n   */\n  alignmentPeriod?: string;\n  /**\n   * Reducer applied across a set of time-series values. Defaults to REDUCE_NONE.\n   */\n  crossSeriesReducer: string;\n  /**\n   * Array of filters to query data by. Labels that can be filtered on are defined by the metric.\n   */\n  filters?: Array<string>;\n  /**\n   * Array of labels to group data by.\n   */\n  groupBys?: Array<string>;\n  /**\n   * Alignment function to be used. Defaults to ALIGN_MEAN.\n   */\n  perSeriesAligner?: string;\n  /**\n   * Preprocessor is not part of the API, but is used to store the preprocessor and not affect the UI for the rest of parameters\n   */\n  preprocessor?: PreprocessorType;\n  /**\n   * GCP project to execute the query against.\n   */\n  projectName: string;\n  /**\n   * Only present if a preprocessor is selected. Alignment period to use when regularizing data. Defaults to cloud-monitoring-auto.\n   */\n  secondaryAlignmentPeriod?: string;\n  /**\n   * Only present if a preprocessor is selected. Reducer applied across a set of time-series values. Defaults to REDUCE_NONE.\n   */\n  secondaryCrossSeriesReducer?: string;\n  /**\n   * Only present if a preprocessor is selected. Array of labels to group data by.\n   */\n  secondaryGroupBys?: Array<string>;\n  /**\n   * Only present if a preprocessor is selected. Alignment function to be used. Defaults to ALIGN_MEAN.\n   */\n  secondaryPerSeriesAligner?: string;\n  /**\n   * Annotation text.\n   */\n  text?: string;\n  /**\n   * Annotation title.\n   */\n  title?: string;\n  /**\n   * Data view, defaults to FULL.\n   */\n  view?: string;\n}\n\nexport const defaultTimeSeriesList: Partial<TimeSeriesList> = {\n  filters: [],\n  groupBys: [],\n  secondaryGroupBys: [],\n};\n\n/**\n * Types of pre-processor available. Defined by the metric.\n */\nexport enum PreprocessorType {\n  Delta = 'delta',\n  None = 'none',\n  Rate = 'rate',\n}\n\n/**\n * Time Series sub-query properties.\n */\nexport interface TimeSeriesQuery {\n  /**\n   * To disable the graphPeriod, it should explictly be set to 'disabled'.\n   */\n  graphPeriod?: ('disabled' | string);\n  /**\n   * GCP project to execute the query against.\n   */\n  projectName: string;\n  /**\n   * MQL query to be executed.\n   */\n  query: string;\n}\n\n/**\n * SLO sub-query properties.\n */\nexport interface SLOQuery {\n  /**\n   * Alignment period to use when regularizing data. Defaults to cloud-monitoring-auto.\n   */\n  alignmentPeriod?: string;\n  /**\n   * SLO goal value.\n   */\n  goal?: number;\n  /**\n   * Specific lookback period for the SLO.\n   */\n  lookbackPeriod?: string;\n  /**\n   * Alignment function to be used. Defaults to ALIGN_MEAN.\n   */\n  perSeriesAligner?: string;\n  /**\n   * GCP project to execute the query against.\n   */\n  projectName: string;\n  /**\n   * SLO selector.\n   */\n  selectorName: string;\n  /**\n   * ID for the service the SLO is in.\n   */\n  serviceId: string;\n  /**\n   * Name for the service the SLO is in.\n   */\n  serviceName: string;\n  /**\n   * ID for the SLO.\n   */\n  sloId: string;\n  /**\n   * Name of the SLO.\n   */\n  sloName: string;\n}\n\n/**\n * PromQL sub-query properties.\n */\nexport interface PromQLQuery {\n  /**\n   * PromQL expression/query to be executed.\n   */\n  expr: string;\n  /**\n   * GCP project to execute the query against.\n   */\n  projectName: string;\n  /**\n   * PromQL min step\n   */\n  step: string;\n}\n\n/**\n * @deprecated This type is for migration purposes only. Replaced by TimeSeriesList Metric sub-query properties.\n */\nexport interface MetricQuery {\n  /**\n   * Aliases can be set to modify the legend labels. e.g. {{metric.label.xxx}}. See docs for more detail.\n   */\n  aliasBy?: string;\n  /**\n   * Alignment period to use when regularizing data. Defaults to cloud-monitoring-auto.\n   */\n  alignmentPeriod?: string;\n  /**\n   * Reducer applied across a set of time-series values. Defaults to REDUCE_NONE.\n   */\n  crossSeriesReducer: string;\n  editorMode: string;\n  /**\n   * Array of filters to query data by. Labels that can be filtered on are defined by the metric.\n   */\n  filters?: Array<string>;\n  /**\n   * To disable the graphPeriod, it should explictly be set to 'disabled'.\n   */\n  graphPeriod?: ('disabled' | string);\n  /**\n   * Array of labels to group data by.\n   */\n  groupBys?: Array<string>;\n  metricKind?: MetricKind;\n  metricType: string;\n  /**\n   * Alignment function to be used. Defaults to ALIGN_MEAN.\n   */\n  perSeriesAligner?: string;\n  /**\n   * Preprocessor is not part of the API, but is used to store the preprocessor and not affect the UI for the rest of parameters\n   */\n  preprocessor?: PreprocessorType;\n  /**\n   * GCP project to execute the query against.\n   */\n  projectName: string;\n  /**\n   * MQL query to be executed.\n   */\n  query: string;\n  valueType?: string;\n  view?: string;\n}\n\nexport const defaultMetricQuery: Partial<MetricQuery> = {\n  filters: [],\n  groupBys: [],\n};\n\nexport enum MetricKind {\n  CUMULATIVE = 'CUMULATIVE',\n  DELTA = 'DELTA',\n  GAUGE = 'GAUGE',\n  METRIC_KIND_UNSPECIFIED = 'METRIC_KIND_UNSPECIFIED',\n}\n\nexport enum ValueTypes {\n  BOOL = 'BOOL',\n  DISTRIBUTION = 'DISTRIBUTION',\n  DOUBLE = 'DOUBLE',\n  INT64 = 'INT64',\n  MONEY = 'MONEY',\n  STRING = 'STRING',\n  VALUE_TYPE_UNSPECIFIED = 'VALUE_TYPE_UNSPECIFIED',\n}\n\nexport enum AlignmentTypes {\n  ALIGN_COUNT = 'ALIGN_COUNT',\n  ALIGN_COUNT_FALSE = 'ALIGN_COUNT_FALSE',\n  ALIGN_COUNT_TRUE = 'ALIGN_COUNT_TRUE',\n  ALIGN_DELTA = 'ALIGN_DELTA',\n  ALIGN_FRACTION_TRUE = 'ALIGN_FRACTION_TRUE',\n  ALIGN_INTERPOLATE = 'ALIGN_INTERPOLATE',\n  ALIGN_MAX = 'ALIGN_MAX',\n  ALIGN_MEAN = 'ALIGN_MEAN',\n  ALIGN_MIN = 'ALIGN_MIN',\n  ALIGN_NEXT_OLDER = 'ALIGN_NEXT_OLDER',\n  ALIGN_NONE = 'ALIGN_NONE',\n  ALIGN_PERCENTILE_05 = 'ALIGN_PERCENTILE_05',\n  ALIGN_PERCENTILE_50 = 'ALIGN_PERCENTILE_50',\n  ALIGN_PERCENTILE_95 = 'ALIGN_PERCENTILE_95',\n  ALIGN_PERCENTILE_99 = 'ALIGN_PERCENTILE_99',\n  ALIGN_PERCENT_CHANGE = 'ALIGN_PERCENT_CHANGE',\n  ALIGN_RATE = 'ALIGN_RATE',\n  ALIGN_STDDEV = 'ALIGN_STDDEV',\n  ALIGN_SUM = 'ALIGN_SUM',\n}\n\n/**\n * @deprecated Use TimeSeriesList instead. Legacy annotation query properties for migration purposes.\n */\nexport interface LegacyCloudMonitoringAnnotationQuery {\n  /**\n   * Array of filters to query data by. Labels that can be filtered on are defined by the metric.\n   */\n  filters: Array<string>;\n  metricKind: MetricKind;\n  metricType: string;\n  /**\n   * GCP project to execute the query against.\n   */\n  projectName: string;\n  /**\n   * Query refId.\n   */\n  refId: string;\n  /**\n   * Annotation text.\n   */\n  text: string;\n  /**\n   * Annotation title.\n   */\n  title: string;\n  valueType: string;\n}\n\nexport const defaultLegacyCloudMonitoringAnnotationQuery: Partial<LegacyCloudMonitoringAnnotationQuery> = {\n  filters: [],\n};\n\n/**\n * Query filter representation.\n */\nexport interface Filter {\n  /**\n   * Filter condition.\n   */\n  condition?: string;\n  /**\n   * Filter key.\n   */\n  key: string;\n  /**\n   * Filter operator.\n   */\n  operator: string;\n  /**\n   * Filter value.\n   */\n  value: string;\n}\n\nexport enum MetricFindQueryTypes {\n  Aggregations = 'aggregations',\n  Aligners = 'aligners',\n  AlignmentPeriods = 'alignmentPeriods',\n  DefaultProject = 'defaultProject',\n  LabelKeys = 'labelKeys',\n  LabelValues = 'labelValues',\n  MetricTypes = 'metricTypes',\n  Projects = 'projects',\n  ResourceTypes = 'resourceTypes',\n  SLO = 'slo',\n  SLOServices = 'sloServices',\n  Selectors = 'selectors',\n  Services = 'services',\n}\n\nexport interface GoogleCloudMonitoringDataQuery {}\n","import { css } from '@emotion/css';\nimport React__default from 'react';\nimport '@grafana/data';\nimport { useStyles2, ReactUtils, Tooltip, Icon, Space, Field } from '@grafana/ui';\n\nconst EditorField = (props) => {\n  var _a;\n  const { label, optional, tooltip, tooltipInteractive, children, width, ...fieldProps } = props;\n  const styles = useStyles2(getStyles, width);\n  const childInputId = (fieldProps == null ? undefined : fieldProps.htmlFor) || ((_a = ReactUtils) == null ? undefined : _a.getChildId(children));\n  const labelEl = /* @__PURE__ */ React__default.createElement(React__default.Fragment, null, /* @__PURE__ */ React__default.createElement(\"label\", { className: styles.label, htmlFor: childInputId }, label, optional && /* @__PURE__ */ React__default.createElement(\"span\", { className: styles.optional }, \" - optional\"), tooltip && /* @__PURE__ */ React__default.createElement(Tooltip, { placement: \"top\", content: tooltip, theme: \"info\", interactive: tooltipInteractive }, /* @__PURE__ */ React__default.createElement(Icon, { tabIndex: 0, name: \"info-circle\", size: \"sm\", className: styles.icon }))), /* @__PURE__ */ React__default.createElement(Space, { v: 0.5 }));\n  return /* @__PURE__ */ React__default.createElement(\"div\", { className: styles.root }, /* @__PURE__ */ React__default.createElement(Field, { className: styles.field, label: labelEl, ...fieldProps }, children));\n};\nconst getStyles = (theme, width) => {\n  return {\n    root: css({\n      minWidth: theme.spacing(width != null ? width : 0)\n    }),\n    label: css({\n      fontSize: 12,\n      fontWeight: theme.typography.fontWeightMedium\n    }),\n    optional: css({\n      fontStyle: \"italic\",\n      color: theme.colors.text.secondary\n    }),\n    field: css({\n      marginBottom: 0\n      // GrafanaUI/Field has a bottom margin which we must remove\n    }),\n    icon: css({\n      color: theme.colors.text.secondary,\n      marginLeft: theme.spacing(1),\n      \":hover\": {\n        color: theme.colors.text.primary\n      }\n    })\n  };\n};\n\nexport { EditorField };\n//# sourceMappingURL=EditorField.js.map\n","import { debounce } from 'lodash';\nimport { useState } from 'react';\nimport * as React from 'react';\n\nimport { EditorField } from '@grafana/plugin-ui';\nimport { Input } from '@grafana/ui';\n\nexport interface Props {\n  refId: string;\n  onChange: (alias: string) => void;\n  value?: string;\n}\n\nexport const AliasBy = ({ refId, value = '', onChange }: Props) => {\n  const [alias, setAlias] = useState(value ?? '');\n\n  const propagateOnChange = debounce(onChange, 1000);\n\n  const onInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setAlias(e.currentTarget.value);\n    propagateOnChange(e.currentTarget.value);\n  };\n\n  return (\n    <EditorField label=\"Alias by\">\n      <Input id={`${refId}-alias-by`} value={alias} onChange={onInputChange} />\n    </EditorField>\n  );\n};\n","import { css } from '@emotion/css';\nimport React__default from 'react';\nimport '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { EditorStack } from './EditorStack.js';\n\nconst EditorRow = ({ children }) => {\n  const styles = useStyles2(getStyles);\n  return /* @__PURE__ */ React__default.createElement(\"div\", { className: styles.root }, /* @__PURE__ */ React__default.createElement(EditorStack, { gap: 2 }, children));\n};\nconst getStyles = (theme) => {\n  return {\n    root: css({\n      padding: theme.spacing(1),\n      backgroundColor: theme.colors.background.secondary,\n      borderRadius: theme.shape.radius.default\n    })\n  };\n};\n\nexport { EditorRow };\n//# sourceMappingURL=EditorRow.js.map\n","import { QueryType, MetricKind, ValueTypes } from './types/query';\n\n// not super excited about using uneven numbers, but this makes it align perfectly with rows that has two fields\nexport const INPUT_WIDTH = 71;\nexport const LABEL_WIDTH = 19;\nexport const INNER_LABEL_WIDTH = 14;\nexport const SELECT_WIDTH = 28;\n\nexport const ALIGNMENTS = [\n  {\n    text: 'none',\n    value: 'ALIGN_NONE',\n    valueTypes: [\n      ValueTypes.INT64,\n      ValueTypes.DOUBLE,\n      ValueTypes.MONEY,\n      ValueTypes.DISTRIBUTION,\n      ValueTypes.STRING,\n      ValueTypes.VALUE_TYPE_UNSPECIFIED,\n      ValueTypes.BOOL,\n    ],\n    metricKinds: [MetricKind.GAUGE],\n  },\n  {\n    text: 'delta',\n    value: 'ALIGN_DELTA',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.CUMULATIVE, MetricKind.DELTA],\n  },\n  {\n    text: 'rate',\n    value: 'ALIGN_RATE',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.CUMULATIVE, MetricKind.DELTA],\n  },\n  {\n    text: 'interpolate',\n    value: 'ALIGN_INTERPOLATE',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE],\n  },\n  {\n    text: 'next older',\n    value: 'ALIGN_NEXT_OLDER',\n    valueTypes: [\n      ValueTypes.INT64,\n      ValueTypes.DOUBLE,\n      ValueTypes.MONEY,\n      ValueTypes.DISTRIBUTION,\n      ValueTypes.STRING,\n      ValueTypes.VALUE_TYPE_UNSPECIFIED,\n      ValueTypes.BOOL,\n    ],\n    metricKinds: [MetricKind.GAUGE],\n  },\n  {\n    text: 'min',\n    value: 'ALIGN_MIN',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'max',\n    value: 'ALIGN_MAX',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'mean',\n    value: 'ALIGN_MEAN',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'count',\n    value: 'ALIGN_COUNT',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.BOOL],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'sum',\n    value: 'ALIGN_SUM',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'stddev',\n    value: 'ALIGN_STDDEV',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'count true',\n    value: 'ALIGN_COUNT_TRUE',\n    valueTypes: [ValueTypes.BOOL],\n    metricKinds: [MetricKind.GAUGE],\n  },\n  {\n    text: 'count false',\n    value: 'ALIGN_COUNT_FALSE',\n    valueTypes: [ValueTypes.BOOL],\n    metricKinds: [MetricKind.GAUGE],\n  },\n  {\n    text: 'fraction true',\n    value: 'ALIGN_FRACTION_TRUE',\n    valueTypes: [ValueTypes.BOOL],\n    metricKinds: [MetricKind.GAUGE],\n  },\n  {\n    text: 'percentile 99',\n    value: 'ALIGN_PERCENTILE_99',\n    valueTypes: [ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'percentile 95',\n    value: 'ALIGN_PERCENTILE_95',\n    valueTypes: [ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'percentile 50',\n    value: 'ALIGN_PERCENTILE_50',\n    valueTypes: [ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'percentile 05',\n    value: 'ALIGN_PERCENTILE_05',\n    valueTypes: [ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'percent change',\n    value: 'ALIGN_PERCENT_CHANGE',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n];\n\nexport const AGGREGATIONS = [\n  {\n    text: 'none',\n    value: 'REDUCE_NONE',\n    valueTypes: [\n      ValueTypes.INT64,\n      ValueTypes.DOUBLE,\n      ValueTypes.MONEY,\n      ValueTypes.DISTRIBUTION,\n      ValueTypes.BOOL,\n      ValueTypes.STRING,\n    ],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE, MetricKind.METRIC_KIND_UNSPECIFIED],\n  },\n  {\n    text: 'mean',\n    value: 'REDUCE_MEAN',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE],\n  },\n  {\n    text: 'min',\n    value: 'REDUCE_MIN',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE, MetricKind.METRIC_KIND_UNSPECIFIED],\n  },\n  {\n    text: 'max',\n    value: 'REDUCE_MAX',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE, MetricKind.METRIC_KIND_UNSPECIFIED],\n  },\n  {\n    text: 'sum',\n    value: 'REDUCE_SUM',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE, MetricKind.METRIC_KIND_UNSPECIFIED],\n  },\n  {\n    text: 'std. dev.',\n    value: 'REDUCE_STDDEV',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE, MetricKind.METRIC_KIND_UNSPECIFIED],\n  },\n  {\n    text: 'count',\n    value: 'REDUCE_COUNT',\n    valueTypes: [\n      ValueTypes.INT64,\n      ValueTypes.DOUBLE,\n      ValueTypes.MONEY,\n      ValueTypes.DISTRIBUTION,\n      ValueTypes.BOOL,\n      ValueTypes.STRING,\n    ],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE],\n  },\n  {\n    text: 'count true',\n    value: 'REDUCE_COUNT_TRUE',\n    valueTypes: [ValueTypes.BOOL],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: 'count false',\n    value: 'REDUCE_COUNT_FALSE',\n    valueTypes: [ValueTypes.BOOL],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA],\n  },\n  {\n    text: '99th percentile',\n    value: 'REDUCE_PERCENTILE_99',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE],\n  },\n  {\n    text: '95th percentile',\n    value: 'REDUCE_PERCENTILE_95',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE],\n  },\n  {\n    text: '50th percentile',\n    value: 'REDUCE_PERCENTILE_50',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE],\n  },\n  {\n    text: '5th percentile',\n    value: 'REDUCE_PERCENTILE_05',\n    valueTypes: [ValueTypes.INT64, ValueTypes.DOUBLE, ValueTypes.MONEY, ValueTypes.DISTRIBUTION],\n    metricKinds: [MetricKind.GAUGE, MetricKind.DELTA, MetricKind.CUMULATIVE],\n  },\n];\n\nexport type periodOption = {\n  text: string;\n  value: string;\n  hidden?: boolean;\n};\n\nexport const ALIGNMENT_PERIODS: periodOption[] = [\n  { text: 'grafana auto', value: 'grafana-auto' },\n  { text: 'stackdriver auto', value: 'stackdriver-auto', hidden: true },\n  { text: 'cloud monitoring auto', value: 'cloud-monitoring-auto' },\n  { text: '1m', value: '+60s' },\n  { text: '2m', value: '+120s' },\n  { text: '5m', value: '+300s' },\n  { text: '10m', value: '+600s' },\n  { text: '30m', value: '+1800s' },\n  { text: '1h', value: '+3600s' },\n  { text: '3h', value: '+7200s' },\n  { text: '6h', value: '+21600s' },\n  { text: '1d', value: '+86400s' },\n  { text: '3d', value: '+259200s' },\n  { text: '1w', value: '+604800s' },\n];\n\nexport const GRAPH_PERIODS: periodOption[] = [\n  { text: 'auto', value: 'auto' },\n  { text: '1m', value: '1m' },\n  { text: '2m', value: '2m' },\n  { text: '5m', value: '5m' },\n  { text: '10m', value: '10m' },\n  { text: '30m', value: '30m' },\n  { text: '1h', value: '1h' },\n  { text: '3h', value: '3h' },\n  { text: '6h', value: '6h' },\n  { text: '1d', value: '1d' },\n  { text: '3d', value: '3d' },\n  { text: '1w', value: '1w' },\n];\n\n// Usable units: ns, us, ms, s, m, h\n// ref. https://cloud.google.com/stackdriver/docs/solutions/slo-monitoring/api/timeseries-selectors#tss-names-args\nexport const LOOKBACK_PERIODS: periodOption[] = [\n  { text: '1m', value: '1m' },\n  { text: '2m', value: '2m' },\n  { text: '5m', value: '5m' },\n  { text: '10m', value: '10m' },\n  { text: '30m', value: '30m' },\n  { text: '1h', value: '1h' },\n  { text: '3h', value: '3h' },\n  { text: '6h', value: '6h' },\n  { text: '24h', value: '24h' },\n  { text: '72h', value: '72h' },\n];\n\nexport const SYSTEM_LABELS = [\n  'metadata.system_labels.cloud_account',\n  'metadata.system_labels.name',\n  'metadata.system_labels.region',\n  'metadata.system_labels.state',\n  'metadata.system_labels.instance_group',\n  'metadata.system_labels.node_name',\n  'metadata.system_labels.service_name',\n  'metadata.system_labels.top_level_controller_type',\n  'metadata.system_labels.top_level_controller_name',\n  'metadata.system_labels.container_image',\n];\n\nexport const SLO_BURN_RATE_SELECTOR_NAME = 'select_slo_burn_rate';\n\nexport const SELECTORS = [\n  { label: 'SLI Value', value: 'select_slo_health' },\n  { label: 'SLO Compliance', value: 'select_slo_compliance' },\n  { label: 'SLO Error Budget Remaining', value: 'select_slo_budget_fraction' },\n  { label: 'SLO Burn Rate', value: SLO_BURN_RATE_SELECTOR_NAME },\n];\n\nexport const QUERY_TYPES = [\n  { label: 'Builder', value: QueryType.TIME_SERIES_LIST },\n  { label: 'MQL', value: QueryType.TIME_SERIES_QUERY },\n  { label: 'Service Level Objectives (SLO)', value: QueryType.SLO },\n  { label: 'PromQL', value: QueryType.PROMQL },\n];\n","import { useEffect, useMemo, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/plugin-ui';\nimport { Select } from '@grafana/ui';\n\nimport CloudMonitoringDatasource from '../datasource';\n\nexport interface Props {\n  refId: string;\n  datasource: CloudMonitoringDatasource;\n  onChange: (projectName: string) => void;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  projectName: string;\n}\n\nexport function Project({ refId, projectName, datasource, onChange, templateVariableOptions }: Props) {\n  const [projects, setProjects] = useState<Array<SelectableValue<string>>>([]);\n  useEffect(() => {\n    datasource.getProjects().then((projects) => setProjects(projects));\n  }, [datasource]);\n\n  const projectsWithTemplateVariables = useMemo(\n    () => [\n      {\n        label: 'Template Variables',\n        options: templateVariableOptions,\n      },\n      ...projects,\n    ],\n    [projects, templateVariableOptions]\n  );\n\n  return (\n    <EditorField label=\"Project\">\n      <Select\n        width=\"auto\"\n        allowCustomValue\n        formatCreateLabel={(v) => `Use project: ${v}`}\n        onChange={({ value }) => onChange(value!)}\n        options={projectsWithTemplateVariables}\n        value={{ value: projectName, label: projectName }}\n        placeholder=\"Select Project\"\n        inputId={`${refId}-project`}\n      />\n    </EditorField>\n  );\n}\n","import React__default from 'react';\nimport { EditorStack } from './EditorStack.js';\n\nconst EditorFieldGroup = ({ children }) => {\n  return /* @__PURE__ */ React__default.createElement(EditorStack, { gap: 1 }, children);\n};\n\nexport { EditorFieldGroup };\n//# sourceMappingURL=EditorFieldGroup.js.map\n","import { chunk, initial, startCase, uniqBy } from 'lodash';\n\nimport { rangeUtil } from '@grafana/data';\nimport { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\n\nimport { AGGREGATIONS, ALIGNMENTS, SYSTEM_LABELS } from './constants';\nimport CloudMonitoringDatasource from './datasource';\nimport { AlignmentTypes, PreprocessorType, TimeSeriesList, MetricKind, ValueTypes } from './types/query';\nimport { CustomMetaData, MetricDescriptor } from './types/types';\n\nexport const extractServicesFromMetricDescriptors = (metricDescriptors: MetricDescriptor[]) =>\n  uniqBy(metricDescriptors, 'service');\n\nexport const getMetricTypesByService = (metricDescriptors: MetricDescriptor[], service: string) =>\n  metricDescriptors.filter((m: MetricDescriptor) => m.service === service);\n\nexport const getMetricTypes = (\n  metricDescriptors: MetricDescriptor[],\n  metricType: string,\n  interpolatedMetricType: string,\n  selectedService: string\n) => {\n  const metricTypes = getMetricTypesByService(metricDescriptors, selectedService).map((m) => ({\n    value: m.type,\n    name: m.displayName,\n  }));\n  const metricTypeExistInArray = metricTypes.some(\n    (m: { value: string; name: string }) => m.value === interpolatedMetricType\n  );\n  const metricTypeByService = metricTypes.length ? metricTypes[0].value : '';\n  const selectedMetricType = metricTypeExistInArray ? metricType : metricTypeByService;\n  return {\n    metricTypes,\n    selectedMetricType,\n  };\n};\n\nexport const getAlignmentOptionsByMetric = (\n  metricValueType?: string,\n  metricKind?: string,\n  preprocessor?: PreprocessorType\n) => {\n  if (preprocessor && preprocessor === PreprocessorType.Rate) {\n    metricKind = MetricKind.GAUGE;\n  }\n\n  return !metricValueType\n    ? []\n    : ALIGNMENTS.filter((i) => {\n        return (\n          i.valueTypes.indexOf(metricValueType as ValueTypes) !== -1 &&\n          i.metricKinds.indexOf(metricKind as MetricKind) !== -1\n        );\n      });\n};\n\nexport const getAggregationOptionsByMetric = (valueType: ValueTypes, metricKind: MetricKind) => {\n  return !metricKind\n    ? []\n    : AGGREGATIONS.filter((i) => {\n        return i.valueTypes.indexOf(valueType) !== -1 && i.metricKinds.indexOf(metricKind) !== -1;\n      });\n};\n\nexport const getLabelKeys = async (\n  datasource: CloudMonitoringDatasource,\n  selectedMetricType: string,\n  projectName: string\n) => {\n  const refId = 'handleLabelKeysQuery';\n  const labels = await datasource.getLabels(selectedMetricType, refId, projectName);\n  return [...Object.keys(labels), ...SYSTEM_LABELS];\n};\n\nexport const getAlignmentPickerData = (\n  valueType: string | undefined = ValueTypes.DOUBLE,\n  metricKind: string | undefined = MetricKind.GAUGE,\n  perSeriesAligner: string | undefined = AlignmentTypes.ALIGN_MEAN,\n  preprocessor?: PreprocessorType\n) => {\n  const templateSrv: TemplateSrv = getTemplateSrv();\n  const alignOptions = getAlignmentOptionsByMetric(valueType, metricKind, preprocessor).map((option) => ({\n    ...option,\n    label: option.text,\n  }));\n  if (!alignOptions.some((o: { value: string }) => o.value === templateSrv.replace(perSeriesAligner))) {\n    perSeriesAligner = alignOptions.length > 0 ? alignOptions[0].value : AlignmentTypes.ALIGN_MEAN;\n  }\n  return { alignOptions, perSeriesAligner };\n};\n\nexport const labelsToGroupedOptions = (groupBys: string[]) => {\n  const groups = groupBys.reduce<\n    Record<\n      string,\n      Array<{\n        value: string;\n        label: string;\n      }>\n    >\n  >((acc, curr) => {\n    const arr = curr.split('.').map(startCase);\n    const group = (arr.length === 2 ? arr : initial(arr)).join(' ');\n    const option = {\n      value: curr,\n      label: curr,\n    };\n    if (acc[group]) {\n      acc[group] = [...acc[group], option];\n    } else {\n      acc[group] = [option];\n    }\n    return acc;\n  }, {});\n  return Object.entries(groups).map(([label, options]) => ({ label, options, expanded: true }), []);\n};\n\nexport const stringArrayToFilters = (filterArray: string[]) =>\n  chunk(filterArray, 4).map(([key, operator, value, condition = 'AND']) => ({\n    key,\n    operator,\n    value,\n    condition,\n  }));\n\nexport const alignmentPeriodLabel = (customMetaData: CustomMetaData, datasource: CloudMonitoringDatasource) => {\n  const { perSeriesAligner, alignmentPeriod } = customMetaData;\n  if (!alignmentPeriod || !perSeriesAligner) {\n    return '';\n  }\n\n  const alignment = ALIGNMENTS.find((ap) => ap.value === datasource.templateSrv.replace(perSeriesAligner));\n  const seconds = parseInt(alignmentPeriod, 10);\n  const hms = rangeUtil.secondsToHms(seconds);\n  return `${hms} interval (${alignment?.text ?? ''})`;\n};\n\nexport const getMetricType = (query?: TimeSeriesList) => {\n  const metricTypeKey = query?.filters?.findIndex((f) => f === 'metric.type')!;\n  // filters are in the format [key, operator, value] so we need to add 2 to get the value\n  const metricType = query?.filters?.[metricTypeKey + 2];\n  return metricType || '';\n};\n\nexport const setMetricType = (query: TimeSeriesList, metricType: string) => {\n  if (!query.filters) {\n    query.filters = ['metric.type', '=', metricType];\n    return query;\n  }\n  const metricTypeKey = query?.filters?.findIndex((f) => f === 'metric.type')!;\n  if (metricTypeKey === -1) {\n    query.filters.push('metric.type', '=', metricType);\n  } else {\n    // filters are in the format [key, operator, value] so we need to add 2 to get the value\n    query.filters![metricTypeKey + 2] = metricType;\n  }\n  return query;\n};\n","import { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/plugin-ui';\nimport { Select } from '@grafana/ui';\n\nimport { getAggregationOptionsByMetric } from '../functions';\nimport { ValueTypes } from '../types/query';\nimport { MetricDescriptor } from '../types/types';\n\nexport interface Props {\n  refId: string;\n  onChange: (metricDescriptor: string) => void;\n  metricDescriptor?: MetricDescriptor;\n  crossSeriesReducer: string;\n  groupBys: string[];\n  templateVariableOptions: Array<SelectableValue<string>>;\n}\n\nexport const Aggregation = (props: Props) => {\n  const aggOptions = useAggregationOptionsByMetric(props);\n  const selected = useSelectedFromOptions(aggOptions, props);\n\n  return (\n    <EditorField\n      label=\"Group by function\"\n      data-testid=\"cloud-monitoring-aggregation\"\n      tooltip={\n        'Aggregation function used on the metric data. Defaults to none for scalar data and mean for distribution data. Not applying an aggregation to distribution data may lead to performance issues.'\n      }\n    >\n      <Select\n        width=\"auto\"\n        onChange={({ value }) => props.onChange(value!)}\n        value={selected}\n        options={[\n          {\n            label: 'Template Variables',\n            options: props.templateVariableOptions,\n          },\n          {\n            label: 'Aggregations',\n            expanded: true,\n            options: aggOptions,\n          },\n        ]}\n        placeholder=\"Select Reducer\"\n        inputId={`${props.refId}-group-by-function`}\n        menuPlacement=\"top\"\n      />\n    </EditorField>\n  );\n};\n\nconst useAggregationOptionsByMetric = ({ metricDescriptor }: Props): Array<SelectableValue<string>> => {\n  const valueType = metricDescriptor?.valueType;\n  const metricKind = metricDescriptor?.metricKind;\n\n  return useMemo(() => {\n    if (!valueType || !metricKind) {\n      return [];\n    }\n\n    return getAggregationOptionsByMetric(valueType as ValueTypes, metricKind).map((a) => ({\n      ...a,\n      label: a.text,\n    }));\n  }, [valueType, metricKind]);\n};\n\nconst useSelectedFromOptions = (aggOptions: Array<SelectableValue<string>>, props: Props) => {\n  return useMemo(() => {\n    const allOptions = [...aggOptions, ...props.templateVariableOptions];\n    return allOptions.find((s) => s.value === props.crossSeriesReducer);\n  }, [aggOptions, props.crossSeriesReducer, props.templateVariableOptions]);\n};\n","import { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField, EditorFieldGroup } from '@grafana/plugin-ui';\nimport { MultiSelect } from '@grafana/ui';\n\nimport { SYSTEM_LABELS } from '../constants';\nimport { labelsToGroupedOptions } from '../functions';\nimport { TimeSeriesList } from '../types/query';\nimport { MetricDescriptor } from '../types/types';\n\nimport { Aggregation } from './Aggregation';\n\nexport interface Props {\n  refId: string;\n  variableOptionGroup: SelectableValue<string>;\n  labels: string[];\n  metricDescriptor?: MetricDescriptor;\n  onChange: (query: TimeSeriesList) => void;\n  query: TimeSeriesList;\n}\n\nexport const GroupBy = ({\n  refId,\n  labels: groupBys = [],\n  query,\n  onChange,\n  variableOptionGroup,\n  metricDescriptor,\n}: Props) => {\n  const options = useMemo(\n    () => [variableOptionGroup, ...labelsToGroupedOptions([...groupBys, ...SYSTEM_LABELS])],\n    [groupBys, variableOptionGroup]\n  );\n\n  return (\n    <EditorFieldGroup>\n      <EditorField\n        label=\"Group by\"\n        tooltip=\"You can reduce the amount of data returned for a metric by combining different time series. To combine multiple time series, you can specify a grouping and a function. Grouping is done on the basis of labels. The grouping function is used to combine the time series in the group into a single time series.\"\n      >\n        <MultiSelect\n          allowCustomValue\n          inputId={`${refId}-group-by`}\n          width=\"auto\"\n          placeholder=\"Choose label\"\n          options={options}\n          value={query.groupBys ?? []}\n          onChange={(options) => {\n            onChange({ ...query, groupBys: options.map((o) => o.value!) });\n          }}\n          menuPlacement=\"top\"\n        />\n      </EditorField>\n      <Aggregation\n        metricDescriptor={metricDescriptor}\n        templateVariableOptions={variableOptionGroup.options}\n        crossSeriesReducer={query.crossSeriesReducer}\n        groupBys={query.groupBys ?? []}\n        onChange={(crossSeriesReducer) => onChange({ ...query, crossSeriesReducer })}\n        refId={refId}\n      />\n    </EditorFieldGroup>\n  );\n};\n","import { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { getAlignmentPickerData } from '../functions';\nimport { PreprocessorType, SLOQuery, TimeSeriesList } from '../types/query';\nimport { MetricDescriptor } from '../types/types';\n\nexport interface Props {\n  inputId: string;\n  onChange: (query: TimeSeriesList | SLOQuery) => void;\n  query: TimeSeriesList | SLOQuery;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  metricDescriptor?: MetricDescriptor;\n  preprocessor?: PreprocessorType;\n}\n\nexport const AlignmentFunction = ({\n  inputId,\n  query,\n  templateVariableOptions,\n  onChange,\n  metricDescriptor,\n  preprocessor,\n}: Props) => {\n  const { perSeriesAligner: psa } = query;\n  let { valueType, metricKind } = metricDescriptor || {};\n\n  const { perSeriesAligner, alignOptions } = useMemo(\n    () => getAlignmentPickerData(valueType, metricKind, psa, preprocessor),\n    [valueType, metricKind, psa, preprocessor]\n  );\n\n  return (\n    <Select\n      onChange={({ value }) => onChange({ ...query, perSeriesAligner: value! })}\n      value={[...alignOptions, ...templateVariableOptions].find((s) => s.value === perSeriesAligner)}\n      options={[\n        {\n          label: 'Template Variables',\n          options: templateVariableOptions,\n        },\n        {\n          label: 'Alignment options',\n          expanded: true,\n          options: alignOptions,\n        },\n      ]}\n      placeholder=\"Select Alignment\"\n      inputId={inputId}\n      menuPlacement=\"top\"\n    />\n  );\n};\n","import { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { periodOption } from '../constants';\n\nexport interface Props {\n  inputId: string;\n  onChange: (period: string) => void;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  aligmentPeriods: periodOption[];\n  selectWidth?: number;\n  category?: string;\n  disabled?: boolean;\n  current?: string;\n}\n\nexport function PeriodSelect({\n  inputId,\n  templateVariableOptions,\n  onChange,\n  current,\n  disabled,\n  aligmentPeriods,\n}: Props) {\n  const options = useMemo(\n    () =>\n      aligmentPeriods.map((ap) => ({\n        ...ap,\n        label: ap.text,\n      })),\n    [aligmentPeriods]\n  );\n  const visibleOptions = useMemo(() => options.filter((ap) => !ap.hidden), [options]);\n\n  return (\n    <Select\n      width=\"auto\"\n      onChange={({ value }) => onChange(value!)}\n      value={[...options, ...templateVariableOptions].find((s) => s.value === current)}\n      options={[\n        {\n          label: 'Template Variables',\n          options: templateVariableOptions,\n        },\n        {\n          label: 'Aggregations',\n          expanded: true,\n          options: visibleOptions,\n        },\n      ]}\n      placeholder=\"Select Period\"\n      inputId={inputId}\n      disabled={disabled}\n      allowCustomValue\n      menuPlacement=\"top\"\n    />\n  );\n}\n","import { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField, EditorFieldGroup } from '@grafana/plugin-ui';\n\nimport { ALIGNMENT_PERIODS } from '../constants';\nimport CloudMonitoringDatasource from '../datasource';\nimport { alignmentPeriodLabel } from '../functions';\nimport { PreprocessorType, TimeSeriesList } from '../types/query';\nimport { CustomMetaData, MetricDescriptor } from '../types/types';\n\nimport { AlignmentFunction } from './AlignmentFunction';\nimport { PeriodSelect } from './PeriodSelect';\n\nexport interface Props {\n  refId: string;\n  onChange: (query: TimeSeriesList) => void;\n  query: TimeSeriesList;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  customMetaData: CustomMetaData;\n  datasource: CloudMonitoringDatasource;\n  metricDescriptor?: MetricDescriptor;\n  preprocessor?: PreprocessorType;\n}\n\nexport const Alignment = ({\n  refId,\n  templateVariableOptions,\n  onChange,\n  query,\n  customMetaData,\n  datasource,\n  metricDescriptor,\n  preprocessor,\n}: Props) => {\n  const alignmentLabel = useMemo(() => alignmentPeriodLabel(customMetaData, datasource), [customMetaData, datasource]);\n  return (\n    <EditorFieldGroup>\n      <EditorField\n        label=\"Alignment function\"\n        tooltip=\"The process of alignment consists of collecting all data points received in a fixed length of time, applying a function to combine those data points, and assigning a timestamp to the result.\"\n      >\n        <AlignmentFunction\n          inputId={`${refId}-alignment-function`}\n          templateVariableOptions={templateVariableOptions}\n          query={query}\n          onChange={(q) => onChange({ ...query, ...q })}\n          metricDescriptor={metricDescriptor}\n          preprocessor={preprocessor}\n        />\n      </EditorField>\n      <EditorField label=\"Alignment period\" tooltip={alignmentLabel}>\n        <PeriodSelect\n          inputId={`${refId}-alignment-period`}\n          templateVariableOptions={templateVariableOptions}\n          current={query.alignmentPeriod}\n          onChange={(period) => onChange({ ...query, alignmentPeriod: period })}\n          aligmentPeriods={ALIGNMENT_PERIODS}\n        />\n      </EditorField>\n    </EditorFieldGroup>\n  );\n};\n","import { cx, css } from '@emotion/css';\nimport React__default from 'react';\nimport '@grafana/data';\nimport { useStyles2, Button } from '@grafana/ui';\n\nconst AccessoryButton = ({ className, ...props }) => {\n  const styles = useStyles2(getButtonStyles);\n  return /* @__PURE__ */ React__default.createElement(Button, { ...props, className: cx(className, styles.button) });\n};\nconst getButtonStyles = (theme) => ({\n  button: css({\n    paddingLeft: theme.spacing(3 / 2),\n    paddingRight: theme.spacing(3 / 2)\n  })\n});\n\nexport { AccessoryButton };\n//# sourceMappingURL=AccessoryButton.js.map\n","import { Button } from '@grafana/ui';\nimport React__default from 'react';\nimport { EditorStack } from './EditorStack.js';\n\nconst EditorList = React__default.forwardRef(function EditorList2({ items, renderItem, onChange }, ref) {\n  const onAddItem = () => {\n    const newItems = [...items, {}];\n    onChange(newItems);\n  };\n  const onChangeItem = (itemIndex, newItem) => {\n    const newItems = [...items];\n    newItems[itemIndex] = newItem;\n    onChange(newItems);\n  };\n  const onDeleteItem = (itemIndex) => {\n    const newItems = [...items];\n    newItems.splice(itemIndex, 1);\n    onChange(newItems);\n  };\n  return /* @__PURE__ */ React__default.createElement(EditorStack, null, items.map((item, index) => /* @__PURE__ */ React__default.createElement(\"div\", { key: index }, renderItem(\n    item,\n    (newItem) => onChangeItem(index, newItem),\n    () => onDeleteItem(index)\n  ))), /* @__PURE__ */ React__default.createElement(Button, { ref, onClick: onAddItem, variant: \"secondary\", size: \"md\", icon: \"plus\", \"aria-label\": \"Add\", type: \"button\" }));\n});\n\nexport { EditorList };\n//# sourceMappingURL=EditorList.js.map\n","import { useMemo } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { AccessoryButton, EditorField, EditorList, EditorRow } from '@grafana/plugin-ui';\nimport { HorizontalGroup, Select } from '@grafana/ui';\n\nimport { labelsToGroupedOptions, stringArrayToFilters } from '../functions';\n\nexport interface Props {\n  labels: { [key: string]: string[] };\n  filters: string[];\n  onChange: (filters: string[]) => void;\n  variableOptionGroup: SelectableValue<string>;\n}\n\ninterface Filter {\n  key: string;\n  operator: string;\n  value: string;\n  condition: string;\n}\n\nconst DEFAULT_OPERATOR = '=';\nconst DEFAULT_CONDITION = 'AND';\n\nconst filtersToStringArray = (filters: Filter[]) =>\n  filters.flatMap(({ key, operator, value, condition }) => [key, operator, value, condition]).slice(0, -1);\n\nconst operators = ['=', '!=', '=~', '!=~'].map(toOption);\n\n// These keys are not editable as labels but they have its own selector.\n// For example the 'metric.type' is set with the metric name selector.\nconst protectedFilterKeys = ['metric.type'];\n\nexport const LabelFilter = ({ labels = {}, filters: filterArray, onChange: _onChange, variableOptionGroup }: Props) => {\n  const rawFilters: Filter[] = stringArrayToFilters(filterArray);\n  const filters = rawFilters.filter(({ key }) => !protectedFilterKeys.includes(key));\n  const protectedFilters = rawFilters.filter(({ key }) => protectedFilterKeys.includes(key));\n\n  const options = useMemo(\n    () => [variableOptionGroup, ...labelsToGroupedOptions(Object.keys(labels))],\n    [labels, variableOptionGroup]\n  );\n\n  const getOptions = ({ key = '', value = '' }: Partial<Filter>) => {\n    // Add the current key and value as options if they are manually entered\n    const keyPresent = options.some((op) => {\n      if (op.options) {\n        return options.some((opp) => opp.label === key);\n      }\n      return op.label === key;\n    });\n    if (!keyPresent) {\n      options.push({ label: key, value: key });\n    }\n\n    const valueOptions = labels.hasOwnProperty(key)\n      ? [variableOptionGroup, ...labels[key].map(toOption)]\n      : [variableOptionGroup];\n    const valuePresent = valueOptions.some((op) => op.label === value);\n    if (!valuePresent) {\n      valueOptions.push({ label: value, value });\n    }\n\n    return { options, valueOptions };\n  };\n\n  const onChange = (items: Array<Partial<Filter>>) => {\n    const filters = items.concat(protectedFilters).map(({ key, operator, value, condition }) => ({\n      key: key || '',\n      operator: operator || DEFAULT_OPERATOR,\n      value: value || '',\n      condition: condition || DEFAULT_CONDITION,\n    }));\n    _onChange(filtersToStringArray(filters));\n  };\n\n  const renderItem = (item: Partial<Filter>, onChangeItem: (item: Filter) => void, onDeleteItem: () => void) => {\n    const { key = '', operator = DEFAULT_OPERATOR, value = '', condition = DEFAULT_CONDITION } = item;\n    const { options, valueOptions } = getOptions(item);\n\n    return (\n      <HorizontalGroup spacing=\"xs\" width=\"auto\">\n        <Select\n          aria-label=\"Filter label key\"\n          formatCreateLabel={(v) => `Use label key: ${v}`}\n          allowCustomValue\n          value={key}\n          options={options}\n          onChange={({ value: key = '' }) => onChangeItem({ key, operator, value, condition })}\n        />\n        <Select\n          value={operator}\n          options={operators}\n          onChange={({ value: operator = DEFAULT_OPERATOR }) => onChangeItem({ key, operator, value, condition })}\n        />\n        <Select\n          aria-label=\"Filter label value\"\n          placeholder=\"add filter value\"\n          formatCreateLabel={(v) => `Use label value: ${v}`}\n          allowCustomValue\n          value={value}\n          options={valueOptions}\n          onChange={({ value = '' }) => onChangeItem({ key, operator, value, condition })}\n        />\n        <AccessoryButton aria-label=\"Remove\" icon=\"times\" variant=\"secondary\" onClick={onDeleteItem} type=\"button\" />\n      </HorizontalGroup>\n    );\n  };\n\n  return (\n    <EditorRow>\n      <EditorField\n        label=\"Filter\"\n        tooltip=\"To reduce the amount of data charted, apply a filter. A filter has three components: a label, a comparison, and a value. The comparison can be an equality, inequality, or regular expression.\"\n      >\n        <EditorList items={filters} renderItem={renderItem} onChange={onChange} />\n      </EditorField>\n    </EditorRow>\n  );\n};\n","import { Alert } from '@grafana/ui';\n\nexport const AnnotationsHelp = () => {\n  return (\n    <Alert severity=\"info\" title=\"Annotation Query Format\">\n      <div>\n        <p>\n          An annotation is an event that is overlaid on top of graphs. Annotation rendering is expensive so it is\n          important to limit the number of rows returned.{' '}\n        </p>\n        <p>\n          The Title and Text fields support templating and can use data returned from the query. For example, the Title\n          field could have the following text:\n        </p>\n        <code>\n          {`${'{{metric.type}}'}`} has value: {`${'{{metric.value}}'}`}\n        </code>\n        <p>\n          Example Result: <code>monitoring.googleapis.com/uptime_check/http_status has this value: 502</code>\n        </p>\n        <span>Patterns:</span>\n        <p>\n          <code>{`${'{{metric.value}}'}`}</code> = value of the metric/point\n        </p>\n        <p>\n          <code>{`${'{{metric.type}}'}`}</code> = metric type e.g. compute.googleapis.com/instance/cpu/usage_time\n        </p>\n        <p>\n          <code>{`${'{{metric.name}}'}`}</code> = name part of metric e.g. instance/cpu/usage_time\n        </p>\n        <p>\n          <code>{`${'{{metric.service}}'}`}</code> = service part of metric e.g. compute\n        </p>\n        <p>\n          <code>{`${'{{metric.label.label_name}}'}`}</code> = Metric label metadata e.g. metric.label.instance_name\n        </p>\n        <p>\n          <code>{`${'{{resource.label.label_name}}'}`}</code> = Resource label metadata e.g. resource.label.zone\n        </p>\n      </div>\n    </Alert>\n  );\n};\n","import { SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/plugin-ui';\nimport { Select } from '@grafana/ui';\n\nimport { LOOKBACK_PERIODS } from '../constants';\n\nexport interface Props {\n  refId: string;\n  onChange: (lookbackPeriod: string) => void;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  current?: string;\n}\n\nexport const LookbackPeriodSelect = ({ refId, current, templateVariableOptions, onChange }: Props) => {\n  const options = LOOKBACK_PERIODS.map((lp) => ({\n    ...lp,\n    label: lp.text,\n  }));\n  if (current && !options.find((op) => op.value === current)) {\n    options.push({ label: current, text: current, value: current, hidden: false });\n  }\n  const visibleOptions = options.filter((lp) => !lp.hidden);\n\n  return (\n    <EditorField label=\"Lookback period\" htmlFor={`${refId}-lookback-period`}>\n      <Select\n        inputId={`${refId}-lookback-period`}\n        width=\"auto\"\n        allowCustomValue\n        value={[...options, ...templateVariableOptions].find((s) => s.value === current)}\n        options={[\n          {\n            label: 'Template Variables',\n            options: templateVariableOptions,\n          },\n          {\n            label: 'Predefined periods',\n            expanded: true,\n            options: visibleOptions,\n          },\n        ]}\n        onChange={({ value }) => onChange(value!)}\n      />\n    </EditorField>\n  );\n};\n","import { useEffect, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/plugin-ui';\nimport { Select } from '@grafana/ui';\n\nimport CloudMonitoringDatasource from '../datasource';\nimport { SLOQuery } from '../types/query';\n\nexport interface Props {\n  refId: string;\n  onChange: (query: SLOQuery) => void;\n  query: SLOQuery;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  datasource: CloudMonitoringDatasource;\n}\n\nexport const SLO = ({ refId, query, templateVariableOptions, onChange, datasource }: Props) => {\n  const [slos, setSLOs] = useState<Array<SelectableValue<string>>>([]);\n  const { projectName, serviceId } = query;\n\n  useEffect(() => {\n    if (!projectName || !serviceId) {\n      return;\n    }\n\n    datasource.getServiceLevelObjectives(projectName, serviceId).then((sloIds: Array<SelectableValue<string>>) => {\n      setSLOs([\n        {\n          label: 'Template Variables',\n          options: templateVariableOptions,\n        },\n        ...sloIds,\n      ]);\n    });\n  }, [datasource, projectName, serviceId, templateVariableOptions]);\n\n  return (\n    <EditorField label=\"SLO\">\n      <Select\n        inputId={`${refId}-slo`}\n        width=\"auto\"\n        allowCustomValue\n        value={query?.sloId && { value: query?.sloId, label: query?.sloName || query?.sloId }}\n        placeholder=\"Select SLO\"\n        options={slos}\n        onChange={async ({ value: sloId = '', label: sloName = '' }) => {\n          const slos = await datasource.getServiceLevelObjectives(projectName, serviceId);\n          const slo = slos.find(({ value }) => value === datasource.templateSrv.replace(sloId));\n          onChange({ ...query, sloId, sloName, goal: slo?.goal });\n        }}\n      />\n    </EditorField>\n  );\n};\n","import { SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/plugin-ui';\nimport { Select } from '@grafana/ui';\n\nimport { SELECTORS } from '../constants';\nimport CloudMonitoringDatasource from '../datasource';\nimport { SLOQuery } from '../types/query';\n\nexport interface Props {\n  refId: string;\n  onChange: (query: SLOQuery) => void;\n  query: SLOQuery;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  datasource: CloudMonitoringDatasource;\n}\n\nexport const Selector = ({ refId, query, templateVariableOptions, onChange, datasource }: Props) => {\n  return (\n    <EditorField label=\"Selector\" htmlFor={`${refId}-slo-selector`}>\n      <Select\n        inputId={`${refId}-slo-selector`}\n        width=\"auto\"\n        allowCustomValue\n        value={[...SELECTORS, ...templateVariableOptions].find((s) => s.value === query?.selectorName)}\n        options={[\n          {\n            label: 'Template Variables',\n            options: templateVariableOptions,\n          },\n          ...SELECTORS,\n        ]}\n        onChange={({ value: selectorName }) => onChange({ ...query, selectorName: selectorName ?? '' })}\n      />\n    </EditorField>\n  );\n};\n","import { useEffect, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/plugin-ui';\nimport { Select } from '@grafana/ui';\n\nimport CloudMonitoringDatasource from '../datasource';\nimport { SLOQuery } from '../types/query';\n\nexport interface Props {\n  refId: string;\n  onChange: (query: SLOQuery) => void;\n  query: SLOQuery;\n  templateVariableOptions: Array<SelectableValue<string>>;\n  datasource: CloudMonitoringDatasource;\n}\n\nexport const Service = ({ refId, query, templateVariableOptions, onChange, datasource }: Props) => {\n  const [services, setServices] = useState<Array<SelectableValue<string>>>([]);\n  const { projectName } = query;\n\n  useEffect(() => {\n    if (!projectName) {\n      return;\n    }\n\n    datasource.getSLOServices(projectName).then((services: Array<SelectableValue<string>>) => {\n      setServices([\n        {\n          label: 'Template Variables',\n          options: templateVariableOptions,\n        },\n        ...services,\n      ]);\n    });\n  }, [datasource, projectName, templateVariableOptions]);\n\n  return (\n    <EditorField label=\"Service\">\n      <Select\n        inputId={`${refId}-slo-service`}\n        width=\"auto\"\n        allowCustomValue\n        value={query?.serviceId && { value: query?.serviceId, label: query?.serviceName || query?.serviceId }}\n        placeholder=\"Select service\"\n        options={services}\n        onChange={({ value: serviceId = '', label: serviceName = '' }) =>\n          onChange({ ...query, serviceId, serviceName, sloId: '' })\n        }\n      />\n    </EditorField>\n  );\n};\n","import { useMemo } from 'react';\nimport * as React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField, EditorFieldGroup, EditorRow } from '@grafana/plugin-ui';\n\nimport { ALIGNMENT_PERIODS, SLO_BURN_RATE_SELECTOR_NAME } from '../constants';\nimport CloudMonitoringDatasource from '../datasource';\nimport { selectors } from '../e2e/selectors';\nimport { alignmentPeriodLabel } from '../functions';\nimport { AlignmentTypes, SLOQuery } from '../types/query';\nimport { CustomMetaData } from '../types/types';\n\nimport { AliasBy } from './AliasBy';\nimport { LookbackPeriodSelect } from './LookbackPeriodSelect';\nimport { PeriodSelect } from './PeriodSelect';\nimport { Project } from './Project';\nimport { SLO } from './SLO';\nimport { Selector } from './Selector';\nimport { Service } from './Service';\n\nexport interface Props {\n  refId: string;\n  customMetaData: CustomMetaData;\n  variableOptionGroup: SelectableValue<string>;\n  onChange: (query: SLOQuery) => void;\n  onRunQuery: () => void;\n  query: SLOQuery;\n  datasource: CloudMonitoringDatasource;\n  aliasBy?: string;\n  onChangeAliasBy: (aliasBy: string) => void;\n}\n\nexport const defaultQuery: (dataSource: CloudMonitoringDatasource) => SLOQuery = (dataSource) => ({\n  projectName: dataSource.getDefaultProject(),\n  alignmentPeriod: 'cloud-monitoring-auto',\n  perSeriesAligner: AlignmentTypes.ALIGN_MEAN,\n  aliasBy: '',\n  selectorName: 'select_slo_health',\n  serviceId: '',\n  serviceName: '',\n  sloId: '',\n  sloName: '',\n  lookbackPeriod: '',\n});\n\nexport function SLOQueryEditor({\n  refId,\n  query,\n  datasource,\n  onChange,\n  variableOptionGroup,\n  customMetaData,\n  aliasBy,\n  onChangeAliasBy,\n}: React.PropsWithChildren<Props>) {\n  const alignmentLabel = useMemo(() => alignmentPeriodLabel(customMetaData, datasource), [customMetaData, datasource]);\n  return (\n    <span data-testid={selectors.components.queryEditor.sloQueryEditor.container.input}>\n      <EditorRow>\n        <Project\n          refId={refId}\n          templateVariableOptions={variableOptionGroup.options}\n          projectName={query.projectName}\n          datasource={datasource}\n          onChange={(projectName) => onChange({ ...query, projectName })}\n        />\n        <Service\n          refId={refId}\n          datasource={datasource}\n          templateVariableOptions={variableOptionGroup.options}\n          query={query}\n          onChange={onChange}\n        />\n        <SLO\n          refId={refId}\n          datasource={datasource}\n          templateVariableOptions={variableOptionGroup.options}\n          query={query}\n          onChange={onChange}\n        />\n        <Selector\n          refId={refId}\n          datasource={datasource}\n          templateVariableOptions={variableOptionGroup.options}\n          query={query}\n          onChange={onChange}\n        />\n        {query.selectorName === SLO_BURN_RATE_SELECTOR_NAME && (\n          <LookbackPeriodSelect\n            refId={refId}\n            onChange={(lookbackPeriod) => onChange({ ...query, lookbackPeriod: lookbackPeriod })}\n            current={query.lookbackPeriod}\n            templateVariableOptions={variableOptionGroup.options}\n          />\n        )}\n\n        <EditorFieldGroup>\n          <EditorField label=\"Alignment period\" tooltip={alignmentLabel}>\n            <PeriodSelect\n              inputId={`${refId}-alignment-period`}\n              templateVariableOptions={variableOptionGroup.options}\n              current={query.alignmentPeriod}\n              onChange={(period) => onChange({ ...query, alignmentPeriod: period })}\n              aligmentPeriods={ALIGNMENT_PERIODS}\n            />\n          </EditorField>\n        </EditorFieldGroup>\n\n        <AliasBy refId={refId} value={aliasBy} onChange={onChangeAliasBy} />\n      </EditorRow>\n    </span>\n  );\n}\n","import * as React from 'react';\n\nimport { TextArea } from '@grafana/ui';\n\nimport { selectors } from '../e2e/selectors';\n\nexport interface Props {\n  onChange: (query: string) => void;\n  onRunQuery: () => void;\n  query: string;\n}\n\nexport function MQLQueryEditor({ query, onChange, onRunQuery }: React.PropsWithChildren<Props>) {\n  const onKeyDown = (event: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (event.key === 'Enter' && (event.shiftKey || event.ctrlKey)) {\n      event.preventDefault();\n      onRunQuery();\n    }\n  };\n\n  return (\n    <span data-testid={selectors.components.queryEditor.mqlMetricsQueryEditor.container.input}>\n      <TextArea\n        name=\"Query\"\n        className=\"slate-query-field\"\n        value={query}\n        rows={10}\n        placeholder=\"Enter a Cloud Monitoring MQL query (Run with Shift+Enter)\"\n        onBlur={onRunQuery}\n        onChange={(e) => onChange(e.currentTarget.value)}\n        onKeyDown={onKeyDown}\n      />\n    </span>\n  );\n}\n","import { SelectableValue } from '@grafana/data';\nimport { Field, Select } from '@grafana/ui';\n\ninterface VariableQueryFieldProps {\n  onChange: (value: string) => void;\n  options: SelectableValue[];\n  value: string;\n  label: string;\n  allowCustomValue?: boolean;\n}\n\nexport const VariableQueryField = ({\n  label,\n  onChange,\n  value,\n  options,\n  allowCustomValue = false,\n}: VariableQueryFieldProps) => {\n  return (\n    <Field label={label}>\n      <Select\n        width={25}\n        allowCustomValue={allowCustomValue}\n        value={value}\n        onChange={({ value }) => onChange(value!)}\n        options={options}\n      />\n    </Field>\n  );\n};\n","import { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField } from '@grafana/plugin-ui';\nimport { RadioButtonGroup } from '@grafana/ui';\n\nimport { getAlignmentPickerData } from '../functions';\nimport { PreprocessorType, TimeSeriesList, MetricKind, ValueTypes } from '../types/query';\nimport { MetricDescriptor } from '../types/types';\n\nconst NONE_OPTION = { label: 'None', value: PreprocessorType.None };\n\nexport interface Props {\n  metricDescriptor?: MetricDescriptor;\n  onChange: (query: TimeSeriesList) => void;\n  query: TimeSeriesList;\n}\n\nexport const Preprocessor = ({ query, metricDescriptor, onChange }: Props) => {\n  const options = useOptions(metricDescriptor);\n\n  return (\n    <EditorField\n      label=\"Pre-processing\"\n      tooltip=\"Preprocessing options are displayed when the selected metric has a metric kind of delta or cumulative. The specific options available are determined by the metric's value type. If you select 'Rate', data points are aligned and converted to a rate per time series. If you select 'Delta', data points are aligned by their delta (difference) per time series\"\n    >\n      <RadioButtonGroup\n        onChange={(value: PreprocessorType) => {\n          const { perSeriesAligner: psa } = query;\n          const { valueType, metricKind } = metricDescriptor ?? {};\n          const { perSeriesAligner } = getAlignmentPickerData(valueType, metricKind, psa, value);\n          onChange({ ...query, preprocessor: value, perSeriesAligner });\n        }}\n        value={query.preprocessor ?? PreprocessorType.None}\n        options={options}\n      />\n    </EditorField>\n  );\n};\n\nconst useOptions = (metricDescriptor?: MetricDescriptor): Array<SelectableValue<PreprocessorType>> => {\n  const metricKind = metricDescriptor?.metricKind;\n  const valueType = metricDescriptor?.valueType;\n\n  return useMemo(() => {\n    if (!metricKind || metricKind === MetricKind.GAUGE || valueType === ValueTypes.DISTRIBUTION) {\n      return [NONE_OPTION];\n    }\n\n    const options = [\n      NONE_OPTION,\n      {\n        label: 'Rate',\n        value: PreprocessorType.Rate,\n        description: 'Data points are aligned and converted to a rate per time series',\n      },\n    ];\n\n    return metricKind === MetricKind.CUMULATIVE\n      ? [\n          ...options,\n          {\n            label: 'Delta',\n            value: PreprocessorType.Delta,\n            description: 'Data points are aligned by their delta (difference) per time series',\n          },\n        ]\n      : options;\n  }, [metricKind, valueType]);\n};\n","import { css } from '@emotion/css';\nimport debounce from 'debounce-promise';\nimport { startCase, uniqBy } from 'lodash';\nimport { useCallback, useEffect, useState } from 'react';\nimport * as React from 'react';\n\nimport { GrafanaTheme2, SelectableValue, TimeRange } from '@grafana/data';\nimport { EditorField, EditorFieldGroup, EditorRow } from '@grafana/plugin-ui';\nimport { reportInteraction } from '@grafana/runtime';\nimport { getSelectStyles, Select, AsyncSelect, useStyles2, useTheme2 } from '@grafana/ui';\n\nimport CloudMonitoringDatasource from '../datasource';\nimport { selectors } from '../e2e/selectors';\nimport { getAlignmentPickerData, getMetricType, setMetricType } from '../functions';\nimport { PreprocessorType, TimeSeriesList, MetricKind, ValueTypes } from '../types/query';\nimport { CustomMetaData, MetricDescriptor } from '../types/types';\n\nimport { AliasBy } from './AliasBy';\nimport { Alignment } from './Alignment';\nimport { GroupBy } from './GroupBy';\nimport { LabelFilter } from './LabelFilter';\nimport { defaultTimeSeriesList } from './MetricQueryEditor';\nimport { Preprocessor } from './Preprocessor';\nimport { Project } from './Project';\n\nexport interface Props {\n  refId: string;\n  customMetaData: CustomMetaData;\n  onChange: (query: TimeSeriesList) => void;\n  datasource: CloudMonitoringDatasource;\n  query: TimeSeriesList;\n  variableOptionGroup: SelectableValue<string>;\n  aliasBy?: string;\n  onChangeAliasBy: (aliasBy: string) => void;\n  range: TimeRange;\n}\n\nexport function Editor({\n  refId,\n  onChange,\n  datasource,\n  query,\n  variableOptionGroup,\n  customMetaData,\n  aliasBy,\n  onChangeAliasBy,\n  range,\n}: React.PropsWithChildren<Props>) {\n  const [labels, setLabels] = useState<{ [k: string]: string[] }>({});\n  const [metricDescriptors, setMetricDescriptors] = useState<MetricDescriptor[]>([]);\n  const [metricDescriptor, setMetricDescriptor] = useState<MetricDescriptor>();\n  const [metrics, setMetrics] = useState<Array<SelectableValue<string>>>([]);\n  const [services, setServices] = useState<Array<SelectableValue<string>>>([]);\n  const [service, setService] = useState<string>('');\n  const [timeRange, setTimeRange] = useState<TimeRange>({ ...range });\n\n  const useTime = (time: TimeRange) => {\n    if (\n      timeRange !== null &&\n      (timeRange.raw.from.toString() !== time.raw.from.toString() ||\n        timeRange.raw.to.toString() !== time.raw.to.toString())\n    ) {\n      setTimeRange({ ...time });\n    }\n  };\n\n  useTime(range);\n\n  const theme = useTheme2();\n  const selectStyles = getSelectStyles(theme);\n\n  const customStyle = useStyles2(getStyles);\n\n  const { projectName, groupBys, crossSeriesReducer } = query;\n  const metricType = getMetricType(query);\n  const { templateSrv } = datasource;\n\n  const getSelectedMetricDescriptor = useCallback(\n    (metricDescriptors: MetricDescriptor[], metricType: string) => {\n      return metricDescriptors.find((md) => md.type === templateSrv.replace(metricType))!;\n    },\n    [templateSrv]\n  );\n\n  useEffect(() => {\n    if (projectName && metricType) {\n      datasource\n        .getLabels(metricType, refId, projectName, { groupBys, crossSeriesReducer }, timeRange)\n        .then((labels) => setLabels(labels));\n    }\n  }, [datasource, groupBys, metricType, projectName, refId, crossSeriesReducer, timeRange]);\n\n  useEffect(() => {\n    const loadMetricDescriptors = async () => {\n      if (projectName) {\n        const metricDescriptors = await datasource.getMetricTypes(projectName);\n        reportInteraction('cloud-monitoring-metric-descriptors-loaded', {\n          count: metricDescriptors.length,\n        });\n        const services = getServicesList(metricDescriptors);\n        setMetricDescriptors(metricDescriptors);\n        setServices(services);\n      }\n    };\n    loadMetricDescriptors();\n  }, [datasource, projectName, customStyle, selectStyles.optionDescription]);\n\n  useEffect(() => {\n    const getMetricsList = (metricDescriptors: MetricDescriptor[]) => {\n      const selectedMetricDescriptor = getSelectedMetricDescriptor(metricDescriptors, metricType);\n      if (!selectedMetricDescriptor) {\n        return [];\n      }\n\n      const metricsByService = metricDescriptors\n        .filter((m) => m.service === selectedMetricDescriptor.service)\n        .map((m) => ({\n          service: m.service,\n          value: m.type,\n          label: m.displayName,\n          component: function optionComponent() {\n            return (\n              <div>\n                <div className={customStyle}>{m.type}</div>\n                <div className={selectStyles.optionDescription}>{m.description}</div>\n              </div>\n            );\n          },\n        }));\n      return metricsByService;\n    };\n\n    const metrics = getMetricsList(metricDescriptors);\n    const service = metrics.length > 0 ? metrics[0].service : '';\n    const metricDescriptor = getSelectedMetricDescriptor(metricDescriptors, metricType);\n    setMetricDescriptor(metricDescriptor);\n    setMetrics(metrics);\n    setService(service);\n  }, [metricDescriptors, getSelectedMetricDescriptor, metricType, customStyle, selectStyles.optionDescription]);\n\n  const onServiceChange = ({ value: service }: SelectableValue<string>) => {\n    const metrics = metricDescriptors\n      .filter((m: MetricDescriptor) => m.service === templateSrv.replace(service))\n      .map((m: MetricDescriptor) => ({\n        service: m.service,\n        value: m.type,\n        label: m.displayName,\n        description: m.description,\n      }));\n    // On service change reset all query values except the project name\n    query.filters = [];\n\n    if (metrics.length > 0 && !metrics.some((m) => m.value === templateSrv.replace(metricType))) {\n      onMetricTypeChange(metrics[0]);\n      setService(service!);\n      setMetrics(metrics);\n    } else {\n      setService(service!);\n      setMetrics(metrics);\n    }\n  };\n\n  const getServicesList = (metricDescriptors: MetricDescriptor[]) => {\n    const services = metricDescriptors.map((m) => ({\n      value: m.service,\n      label: startCase(m.serviceShortName),\n    }));\n\n    return services.length > 0 ? uniqBy(services, (s) => s.value) : [];\n  };\n\n  const filterMetrics = async (filter: string) => {\n    const metrics = await datasource.filterMetricsByType(projectName, service);\n    const filtered = metrics\n      .filter((m) => m.type.includes(filter.toLowerCase()))\n      .map((m) => ({\n        value: m.type,\n        label: m.displayName,\n        component: function optionComponent() {\n          return (\n            <div>\n              <div className={customStyle}>{m.type}</div>\n              <div className={selectStyles.optionDescription}>{m.description}</div>\n            </div>\n          );\n        },\n      }));\n    return [\n      {\n        label: 'Template Variables',\n        options: variableOptionGroup.options,\n      },\n      ...filtered,\n    ];\n  };\n\n  const debounceFilter = debounce(filterMetrics, 400);\n\n  const onMetricTypeChange = ({ value }: SelectableValue<string>) => {\n    const metricDescriptor = getSelectedMetricDescriptor(metricDescriptors, value!);\n    setMetricDescriptor(metricDescriptor);\n    const { metricKind, valueType } = metricDescriptor;\n    const preprocessor =\n      metricKind === MetricKind.GAUGE || valueType === ValueTypes.DISTRIBUTION\n        ? PreprocessorType.None\n        : PreprocessorType.Rate;\n    const { perSeriesAligner } = getAlignmentPickerData(valueType, metricKind, query.perSeriesAligner, preprocessor);\n\n    // On metric name change reset query to defaults except project name and filters\n    Object.assign(query, {\n      ...defaultTimeSeriesList(datasource),\n      // If the metric value type is DISTRIBUTION use REDUCE_MEAN in order to avoid\n      // returning data frames with a large number of frames (as we return a frame per bucket).\n      // DISTRIBUTION metrics only typically make sense with an aggregation performed against them or\n      // when filtered to a specific label value.\n      crossSeriesReducer: valueType === ValueTypes.DISTRIBUTION ? 'REDUCE_MEAN' : 'REDUCE_NONE',\n      projectName: query.projectName,\n      filters: query.filters,\n    });\n    onChange({\n      ...setMetricType(\n        {\n          ...query,\n          perSeriesAligner,\n        },\n        value!\n      ),\n      preprocessor,\n    });\n  };\n\n  return (\n    <span data-testid={selectors.components.queryEditor.visualMetricsQueryEditor.container.input}>\n      <EditorRow>\n        <EditorFieldGroup>\n          <Project\n            refId={refId}\n            templateVariableOptions={variableOptionGroup.options}\n            projectName={projectName}\n            datasource={datasource}\n            onChange={(projectName) => {\n              onChange({ ...query, projectName });\n            }}\n          />\n\n          <EditorField label=\"Service\" width=\"auto\">\n            <Select\n              width=\"auto\"\n              onChange={onServiceChange}\n              isLoading={services.length === 0}\n              value={[...services, ...variableOptionGroup.options].find((s) => s.value === service)}\n              options={[\n                {\n                  label: 'Template Variables',\n                  options: variableOptionGroup.options,\n                },\n                ...services,\n              ]}\n              placeholder=\"Select Services\"\n              inputId={`${refId}-service`}\n            />\n          </EditorField>\n          <EditorField label=\"Metric name\" width=\"auto\" htmlFor={`${refId}-select-metric`}>\n            <span title={service === '' ? 'Select a service first' : 'Type to search metrics'}>\n              <AsyncSelect\n                width=\"auto\"\n                onChange={onMetricTypeChange}\n                value={[...metrics, ...variableOptionGroup.options].find((s) => s.value === metricType)}\n                loadOptions={debounceFilter}\n                defaultOptions={[\n                  {\n                    label: 'Template Variables',\n                    options: variableOptionGroup.options,\n                  },\n                  ...metrics.slice(0, 100),\n                ]}\n                placeholder=\"Select Metric\"\n                inputId={`${refId}-select-metric`}\n                disabled={service === ''}\n              />\n            </span>\n          </EditorField>\n        </EditorFieldGroup>\n      </EditorRow>\n\n      <>\n        <LabelFilter\n          labels={labels}\n          filters={query.filters!}\n          onChange={(filters: string[]) => onChange({ ...query, filters })}\n          variableOptionGroup={variableOptionGroup}\n        />\n        <EditorRow>\n          <Preprocessor metricDescriptor={metricDescriptor} query={query} onChange={onChange} />\n          <GroupBy\n            refId={refId}\n            labels={Object.keys(labels)}\n            query={query}\n            onChange={onChange}\n            variableOptionGroup={variableOptionGroup}\n            metricDescriptor={metricDescriptor}\n          />\n          <Alignment\n            refId={refId}\n            datasource={datasource}\n            templateVariableOptions={variableOptionGroup.options}\n            query={query}\n            customMetaData={customMetaData}\n            onChange={onChange}\n            metricDescriptor={metricDescriptor}\n            preprocessor={query.preprocessor}\n          />\n          <AliasBy refId={refId} value={aliasBy} onChange={onChangeAliasBy} />\n        </EditorRow>\n      </>\n    </span>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) =>\n  css({\n    label: 'grafana-select-option-description',\n    fontWeight: 'normal',\n    fontStyle: 'italic',\n    color: theme.colors.text.secondary,\n  });\n\nexport const VisualMetricQueryEditor = React.memo(Editor);\n","import { SelectableValue } from '@grafana/data';\nimport { EditorField, EditorRow } from '@grafana/plugin-ui';\nimport { HorizontalGroup, Switch } from '@grafana/ui';\n\nimport { GRAPH_PERIODS } from '../constants';\n\nimport { PeriodSelect } from './index';\n\nexport interface Props {\n  refId: string;\n  onChange: (period: string) => void;\n  variableOptionGroup: SelectableValue<string>;\n  graphPeriod?: string;\n}\n\nexport const GraphPeriod = ({ refId, onChange, graphPeriod, variableOptionGroup }: Props) => {\n  return (\n    <EditorRow>\n      <EditorField\n        label=\"Graph period\"\n        htmlFor={`${refId}-graph-period`}\n        tooltip={\n          <>\n            Set <code>graph_period</code> which forces a preferred period between points. Automatically set to the\n            current interval if left blank.\n          </>\n        }\n      >\n        <HorizontalGroup>\n          <Switch\n            data-testid={`${refId}-switch-graph-period`}\n            value={graphPeriod !== 'disabled'}\n            onChange={(e) => onChange(e.currentTarget.checked ? '' : 'disabled')}\n          />\n          <PeriodSelect\n            inputId={`${refId}-graph-period`}\n            templateVariableOptions={variableOptionGroup.options}\n            current={graphPeriod}\n            onChange={onChange}\n            disabled={graphPeriod === 'disabled'}\n            aligmentPeriods={GRAPH_PERIODS}\n          />\n        </HorizontalGroup>\n      </EditorField>\n    </EditorRow>\n  );\n};\n","import { useCallback, useEffect } from 'react';\nimport * as React from 'react';\n\nimport { SelectableValue, TimeRange } from '@grafana/data';\nimport { EditorRows } from '@grafana/plugin-ui';\nimport { Stack } from '@grafana/ui';\n\nimport CloudMonitoringDatasource from '../datasource';\nimport { AlignmentTypes, CloudMonitoringQuery, QueryType, TimeSeriesList, TimeSeriesQuery } from '../types/query';\nimport { CustomMetaData } from '../types/types';\n\nimport { AliasBy } from './AliasBy';\nimport { GraphPeriod } from './GraphPeriod';\nimport { MQLQueryEditor } from './MQLQueryEditor';\nimport { Project } from './Project';\nimport { VisualMetricQueryEditor } from './VisualMetricQueryEditor';\n\nexport interface Props {\n  refId: string;\n  customMetaData: CustomMetaData;\n  variableOptionGroup: SelectableValue<string>;\n  onChange: (query: CloudMonitoringQuery) => void;\n  onRunQuery: () => void;\n  query: CloudMonitoringQuery;\n  datasource: CloudMonitoringDatasource;\n  range: TimeRange;\n}\n\nexport const defaultTimeSeriesList: (dataSource: CloudMonitoringDatasource) => TimeSeriesList = (dataSource) => ({\n  projectName: dataSource.getDefaultProject(),\n  crossSeriesReducer: 'REDUCE_NONE',\n  alignmentPeriod: 'cloud-monitoring-auto',\n  perSeriesAligner: AlignmentTypes.ALIGN_MEAN,\n  groupBys: [],\n  filters: [],\n});\n\nexport const defaultTimeSeriesQuery: (dataSource: CloudMonitoringDatasource) => TimeSeriesQuery = (dataSource) => ({\n  projectName: dataSource.getDefaultProject(),\n  query: '',\n});\n\nfunction Editor({\n  refId,\n  query,\n  datasource,\n  onChange: onQueryChange,\n  onRunQuery,\n  customMetaData,\n  variableOptionGroup,\n  range,\n}: React.PropsWithChildren<Props>) {\n  const onChangeTimeSeriesList = useCallback(\n    (timeSeriesList: TimeSeriesList) => {\n      let filtersComplete = true;\n      if (timeSeriesList?.filters && timeSeriesList.filters.length > 0) {\n        for (const filter of timeSeriesList.filters) {\n          if (filter === '') {\n            filtersComplete = false;\n            break;\n          }\n        }\n      }\n      onQueryChange({ ...query, timeSeriesList });\n      if (filtersComplete) {\n        onRunQuery();\n      }\n    },\n    [onQueryChange, onRunQuery, query]\n  );\n\n  const onChangeTimeSeriesQuery = useCallback(\n    (timeSeriesQuery: TimeSeriesQuery) => {\n      onQueryChange({ ...query, timeSeriesQuery });\n      onRunQuery();\n    },\n    [onQueryChange, onRunQuery, query]\n  );\n\n  useEffect(() => {\n    if (query.queryType === QueryType.TIME_SERIES_LIST && !query.timeSeriesList) {\n      onQueryChange({\n        refId: query.refId,\n        datasource: query.datasource,\n        queryType: QueryType.TIME_SERIES_LIST,\n        timeSeriesList: defaultTimeSeriesList(datasource),\n        aliasBy: query.aliasBy,\n      });\n    }\n    if (query.queryType === QueryType.TIME_SERIES_QUERY && !query.timeSeriesQuery) {\n      onQueryChange({\n        refId: query.refId,\n        datasource: query.datasource,\n        queryType: QueryType.TIME_SERIES_QUERY,\n        timeSeriesQuery: defaultTimeSeriesQuery(datasource),\n        aliasBy: query.aliasBy,\n      });\n    }\n  }, [onQueryChange, query, datasource]);\n\n  return (\n    <EditorRows>\n      {(query.queryType === QueryType.ANNOTATION || query.queryType === QueryType.TIME_SERIES_LIST) &&\n        query.timeSeriesList && (\n          <VisualMetricQueryEditor\n            refId={refId}\n            variableOptionGroup={variableOptionGroup}\n            customMetaData={customMetaData}\n            onChange={onChangeTimeSeriesList}\n            datasource={datasource}\n            query={query.timeSeriesList}\n            aliasBy={query.aliasBy}\n            onChangeAliasBy={(aliasBy: string) => onQueryChange({ ...query, aliasBy })}\n            range={range}\n          />\n        )}\n\n      {query.queryType === QueryType.TIME_SERIES_QUERY && query.timeSeriesQuery && (\n        <>\n          <Stack gap={1} direction=\"row\">\n            <Project\n              refId={refId}\n              datasource={datasource}\n              onChange={(projectName) =>\n                onChangeTimeSeriesQuery({ ...query.timeSeriesQuery!, projectName: projectName })\n              }\n              templateVariableOptions={variableOptionGroup.options}\n              projectName={query.timeSeriesQuery.projectName!}\n            />\n            <AliasBy\n              refId={refId}\n              value={query.aliasBy}\n              onChange={(aliasBy: string) => onQueryChange({ ...query, aliasBy })}\n            />\n          </Stack>\n          <MQLQueryEditor\n            onChange={(q: string) => onChangeTimeSeriesQuery({ ...query.timeSeriesQuery!, query: q })}\n            onRunQuery={onRunQuery}\n            query={query.timeSeriesQuery.query}\n          ></MQLQueryEditor>\n          <GraphPeriod\n            onChange={(graphPeriod: string) => onChangeTimeSeriesQuery({ ...query.timeSeriesQuery!, graphPeriod })}\n            graphPeriod={query.timeSeriesQuery.graphPeriod}\n            refId={refId}\n            variableOptionGroup={variableOptionGroup}\n          />\n        </>\n      )}\n    </EditorRows>\n  );\n}\n\nexport const MetricQueryEditor = React.memo(Editor);\n","import * as React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField, EditorRow } from '@grafana/plugin-ui';\nimport { TextArea, Input } from '@grafana/ui';\n\nimport CloudMonitoringDatasource from '../datasource';\nimport { selectors } from '../e2e/selectors';\nimport { PromQLQuery } from '../types/query';\n\nimport { Project } from './Project';\n\nexport interface Props {\n  refId: string;\n  variableOptionGroup: SelectableValue<string>;\n  onChange: (query: PromQLQuery) => void;\n  onRunQuery: () => void;\n  query: PromQLQuery;\n  datasource: CloudMonitoringDatasource;\n}\n\nexport const defaultQuery: (dataSource: CloudMonitoringDatasource) => PromQLQuery = (dataSource) => ({\n  projectName: dataSource.getDefaultProject(),\n  expr: '',\n  step: '10s',\n});\n\nexport function PromQLQueryEditor({\n  refId,\n  query,\n  datasource,\n  onChange,\n  variableOptionGroup,\n  onRunQuery,\n}: React.PropsWithChildren<Props>) {\n  function onReturnKeyDown(e: React.KeyboardEvent) {\n    if (e.key === 'Enter' && e.shiftKey) {\n      onRunQuery();\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  }\n\n  return (\n    <span data-testid={selectors.components.queryEditor.promQlQueryEditor.container.input}>\n      <EditorRow>\n        <Project\n          refId={refId}\n          templateVariableOptions={variableOptionGroup.options}\n          projectName={query.projectName}\n          datasource={datasource}\n          onChange={(projectName) => onChange({ ...query, projectName })}\n        />\n        <TextArea\n          name=\"Query\"\n          className=\"slate-query-field\"\n          value={query.expr}\n          rows={10}\n          placeholder=\"Enter a Cloud Monitoring Prometheus query (Run with Shift+Enter)\"\n          onBlur={onRunQuery}\n          onKeyDown={onReturnKeyDown}\n          onChange={(e) => onChange({ ...query, expr: e.currentTarget.value })}\n        />\n        <EditorField\n          label=\"Min step\"\n          tooltip={\n            'Time units and built-in variables can be used here, for example: $__interval, $__rate_interval, 5s, 1m, 3h, 1d, 1y (Default if no unit is specified: 10s)'\n          }\n        >\n          <Input\n            type={'string'}\n            placeholder={'auto'}\n            onChange={(e) => onChange({ ...query, step: e.currentTarget.value })}\n            onKeyDown={onReturnKeyDown}\n            value={query.step ?? ''}\n          />\n        </EditorField>\n      </EditorRow>\n    </span>\n  );\n}\n","import { css } from '@emotion/css';\nimport React__default from 'react';\nimport '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nconst EditorHeader = ({ children }) => {\n  const styles = useStyles2(getStyles);\n  return /* @__PURE__ */ React__default.createElement(\"div\", { className: styles.root }, children);\n};\nconst getStyles = (theme) => ({\n  root: css({\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    alignItems: \"center\",\n    gap: theme.spacing(3),\n    minHeight: theme.spacing(4)\n  })\n});\n\nexport { EditorHeader };\n//# sourceMappingURL=EditorHeader.js.map\n","import { css, cx } from '@emotion/css';\nimport React__default, { useState } from 'react';\nimport '@grafana/data';\nimport { useStyles2, Select, SelectContainer as SelectContainer$1 } from '@grafana/ui';\n\nfunction InlineSelect({ label: labelProp, ...props }) {\n  const [id] = useState(() => Math.random().toString(16).slice(2));\n  const styles = useStyles2(getSelectStyles);\n  const components = {\n    SelectContainer,\n    ValueContainer,\n    SingleValue: ValueContainer\n  };\n  return /* @__PURE__ */ React__default.createElement(\"div\", { className: styles.root }, labelProp && /* @__PURE__ */ React__default.createElement(\"label\", { className: styles.label, htmlFor: id }, labelProp, \":\", \"\\xA0\"), /* @__PURE__ */ React__default.createElement(Select, { openMenuOnFocus: true, inputId: id, ...props, components }));\n}\nconst SelectContainer = (props) => {\n  const { children } = props;\n  const styles = useStyles2(getSelectStyles);\n  return /* @__PURE__ */ React__default.createElement(SelectContainer$1, { ...props, className: cx(props.className, styles.container) }, children);\n};\nconst ValueContainer = (props) => {\n  const { className, children } = props;\n  const styles = useStyles2(getSelectStyles);\n  return /* @__PURE__ */ React__default.createElement(\"div\", { className: cx(className, styles.valueContainer) }, children);\n};\nconst getSelectStyles = (theme) => ({\n  root: css({\n    display: \"flex\",\n    fontSize: 12,\n    alignItems: \"center\"\n  }),\n  label: css({\n    color: theme.colors.text.secondary,\n    whiteSpace: \"nowrap\"\n  }),\n  container: css({\n    background: \"none\",\n    borderColor: \"transparent\"\n  }),\n  valueContainer: css({\n    display: \"flex\",\n    alignItems: \"center\",\n    flex: \"initial\",\n    color: theme.colors.text.secondary,\n    fontSize: 12\n  })\n});\n\nexport { InlineSelect };\n//# sourceMappingURL=InlineSelect.js.map\n","import React__default from 'react';\n\nconst FlexItem = ({ grow, shrink }) => {\n  return /* @__PURE__ */ React__default.createElement(\"div\", { style: { display: \"block\", flexGrow: grow, flexShrink: shrink } });\n};\n\nexport { FlexItem };\n//# sourceMappingURL=FlexItem.js.map\n","import { EditorHeader, FlexItem, InlineSelect } from '@grafana/plugin-ui';\n\nimport { QUERY_TYPES } from '../constants';\nimport { CloudMonitoringQuery } from '../types/query';\n\nexport interface QueryEditorHeaderProps {\n  query: CloudMonitoringQuery;\n  onChange: (value: CloudMonitoringQuery) => void;\n  onRunQuery: () => void;\n}\n\nexport const QueryHeader = (props: QueryEditorHeaderProps) => {\n  const { query, onChange, onRunQuery } = props;\n  const { queryType } = query;\n\n  return (\n    <EditorHeader>\n      <InlineSelect\n        label=\"Query type\"\n        options={QUERY_TYPES}\n        value={queryType}\n        onChange={({ value }) => {\n          onChange({ ...query, queryType: value! });\n          onRunQuery();\n        }}\n      />\n      <FlexItem grow={1} />\n    </EditorHeader>\n  );\n};\n","import { PureComponent } from 'react';\n\nimport { QueryEditorProps } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\n\nimport CloudMonitoringDatasource from '../datasource';\nimport { extractServicesFromMetricDescriptors, getLabelKeys, getMetricTypes } from '../functions';\nimport { CloudMonitoringQuery, MetricFindQueryTypes } from '../types/query';\nimport {\n  CloudMonitoringOptions,\n  CloudMonitoringVariableQuery,\n  MetricDescriptor,\n  VariableQueryData,\n} from '../types/types';\n\nimport { VariableQueryField } from './';\n\nexport type Props = QueryEditorProps<\n  CloudMonitoringDatasource,\n  CloudMonitoringQuery,\n  CloudMonitoringOptions,\n  CloudMonitoringVariableQuery\n>;\n\nexport class CloudMonitoringVariableQueryEditor extends PureComponent<Props, VariableQueryData> {\n  queryTypes: Array<{ value: string; label: string }> = [\n    { value: MetricFindQueryTypes.Projects, label: 'Projects' },\n    { value: MetricFindQueryTypes.Services, label: 'Services' },\n    { value: MetricFindQueryTypes.MetricTypes, label: 'Metric Types' },\n    { value: MetricFindQueryTypes.LabelKeys, label: 'Label Keys' },\n    { value: MetricFindQueryTypes.LabelValues, label: 'Label Values' },\n    { value: MetricFindQueryTypes.ResourceTypes, label: 'Resource Types' },\n    { value: MetricFindQueryTypes.Aggregations, label: 'Aggregations' },\n    { value: MetricFindQueryTypes.Aligners, label: 'Aligners' },\n    { value: MetricFindQueryTypes.AlignmentPeriods, label: 'Alignment Periods' },\n    { value: MetricFindQueryTypes.Selectors, label: 'Selectors' },\n    { value: MetricFindQueryTypes.SLOServices, label: 'SLO Services' },\n    { value: MetricFindQueryTypes.SLO, label: 'Service Level Objectives (SLO)' },\n  ];\n\n  defaults: VariableQueryData = {\n    selectedQueryType: this.queryTypes[0].value,\n    metricDescriptors: [],\n    selectedService: '',\n    selectedMetricType: '',\n    labels: [],\n    labelKey: '',\n    metricTypes: [],\n    services: [],\n    sloServices: [],\n    selectedSLOService: '',\n    projects: [],\n    projectName: '',\n    loading: true,\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.state = Object.assign(this.defaults, this.props.query);\n  }\n\n  async componentDidMount() {\n    await this.props.datasource.ensureGCEDefaultProject();\n    const projectName = this.props.query.projectName || this.props.datasource.getDefaultProject();\n    const projects = (await this.props.datasource.getProjects()) as MetricDescriptor[];\n    const metricDescriptors = await this.props.datasource.getMetricTypes(\n      this.props.query.projectName || this.props.datasource.getDefaultProject()\n    );\n    const services = extractServicesFromMetricDescriptors(metricDescriptors).map((m) => ({\n      value: m.service,\n      label: m.serviceShortName,\n    }));\n\n    let selectedService = '';\n    if (services.some((s) => s.value === getTemplateSrv().replace(this.state.selectedService))) {\n      selectedService = this.state.selectedService;\n    } else if (services && services.length > 0) {\n      selectedService = services[0].value;\n    }\n\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      metricDescriptors,\n      this.state.selectedMetricType,\n      getTemplateSrv().replace(this.state.selectedMetricType),\n      getTemplateSrv().replace(selectedService)\n    );\n\n    const sloServices = await this.props.datasource.getSLOServices(projectName);\n\n    const state = {\n      services,\n      selectedService,\n      metricTypes,\n      selectedMetricType,\n      metricDescriptors,\n      projects,\n      ...(await this.getLabels(selectedMetricType, projectName)),\n      sloServices,\n      loading: false,\n      projectName,\n    };\n    this.setState(state, () => this.onPropsChange());\n  }\n\n  onPropsChange = () => {\n    const { metricDescriptors, labels, metricTypes, services, ...queryModel } = this.state;\n    this.props.onChange({ ...queryModel, refId: 'CloudMonitoringVariableQueryEditor-VariableQuery' });\n  };\n\n  async onQueryTypeChange(queryType: string) {\n    const state = {\n      selectedQueryType: queryType,\n      ...(await this.getLabels(this.state.selectedMetricType, this.state.projectName, queryType)),\n    };\n\n    this.setState(state);\n  }\n\n  async onProjectChange(projectName: string) {\n    const metricDescriptors = await this.props.datasource.getMetricTypes(projectName);\n    const labels = await this.getLabels(this.state.selectedMetricType, projectName);\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      metricDescriptors,\n      this.state.selectedMetricType,\n      getTemplateSrv().replace(this.state.selectedMetricType),\n      getTemplateSrv().replace(this.state.selectedService)\n    );\n\n    const sloServices = await this.props.datasource.getSLOServices(projectName);\n\n    this.setState(\n      {\n        ...labels,\n        metricTypes,\n        selectedMetricType,\n        metricDescriptors,\n        projectName,\n        sloServices,\n      },\n      () => this.onPropsChange()\n    );\n  }\n\n  async onServiceChange(service: string) {\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      this.state.metricDescriptors,\n      this.state.selectedMetricType,\n      getTemplateSrv().replace(this.state.selectedMetricType),\n      getTemplateSrv().replace(service)\n    );\n    const state = {\n      selectedService: service,\n      metricTypes,\n      selectedMetricType,\n      ...(await this.getLabels(selectedMetricType, this.state.projectName)),\n    };\n    this.setState(state, () => this.onPropsChange());\n  }\n\n  async onMetricTypeChange(metricType: string) {\n    const state = {\n      selectedMetricType: metricType,\n      ...(await this.getLabels(getTemplateSrv().replace(metricType), this.state.projectName)),\n    };\n    this.setState(state, () => this.onPropsChange());\n  }\n\n  onLabelKeyChange(labelKey: string) {\n    this.setState({ labelKey }, () => this.onPropsChange());\n  }\n\n  componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<VariableQueryData>) {\n    const selecQueryTypeChanged = prevState.selectedQueryType !== this.state.selectedQueryType;\n    const selectSLOServiceChanged = this.state.selectedSLOService !== prevState.selectedSLOService;\n    if (selecQueryTypeChanged || selectSLOServiceChanged) {\n      this.onPropsChange();\n    }\n  }\n\n  async getLabels(selectedMetricType: string, projectName: string, selectedQueryType = this.state.selectedQueryType) {\n    let result = { labels: this.state.labels, labelKey: this.state.labelKey };\n    if (selectedMetricType && selectedQueryType === MetricFindQueryTypes.LabelValues) {\n      const labels = await getLabelKeys(this.props.datasource, selectedMetricType, projectName);\n      const labelKey = labels.some((l) => l === getTemplateSrv().replace(this.state.labelKey))\n        ? this.state.labelKey\n        : labels[0];\n      result = { labels, labelKey };\n    }\n    return result;\n  }\n\n  renderQueryTypeSwitch(queryType: string) {\n    const variableOptionGroup = {\n      label: 'Template Variables',\n      expanded: false,\n      options: getTemplateSrv()\n        .getVariables()\n        .map((v) => ({\n          value: `$${v.name}`,\n          label: `$${v.name}`,\n        })),\n    };\n\n    switch (queryType) {\n      case MetricFindQueryTypes.MetricTypes:\n        return (\n          <>\n            <VariableQueryField\n              allowCustomValue={true}\n              value={this.state.projectName}\n              options={[variableOptionGroup, ...this.state.projects]}\n              onChange={(value) => this.onProjectChange(value)}\n              label=\"Project\"\n            />\n            <VariableQueryField\n              value={this.state.selectedService}\n              options={[variableOptionGroup, ...this.state.services]}\n              onChange={(value) => this.onServiceChange(value)}\n              label=\"Service\"\n            />\n          </>\n        );\n      case MetricFindQueryTypes.LabelKeys:\n      case MetricFindQueryTypes.LabelValues:\n      case MetricFindQueryTypes.ResourceTypes:\n        return (\n          <>\n            <VariableQueryField\n              allowCustomValue={true}\n              value={this.state.projectName}\n              options={[variableOptionGroup, ...this.state.projects]}\n              onChange={(value) => this.onProjectChange(value)}\n              label=\"Project\"\n            />\n            <VariableQueryField\n              value={this.state.selectedService}\n              options={[variableOptionGroup, ...this.state.services]}\n              onChange={(value) => this.onServiceChange(value)}\n              label=\"Service\"\n            />\n            <VariableQueryField\n              value={this.state.selectedMetricType}\n              options={[\n                variableOptionGroup,\n                ...this.state.metricTypes.map(({ value, name }) => ({ value, label: name })),\n              ]}\n              onChange={(value) => this.onMetricTypeChange(value)}\n              label=\"Metric Type\"\n            />\n            {queryType === MetricFindQueryTypes.LabelValues && (\n              <VariableQueryField\n                value={this.state.labelKey}\n                options={[variableOptionGroup, ...this.state.labels.map((l) => ({ value: l, label: l }))]}\n                onChange={(value) => this.onLabelKeyChange(value)}\n                label=\"Label Key\"\n              />\n            )}\n          </>\n        );\n      case MetricFindQueryTypes.Aligners:\n      case MetricFindQueryTypes.Aggregations:\n        return (\n          <>\n            <VariableQueryField\n              value={this.state.selectedService}\n              options={[variableOptionGroup, ...this.state.services]}\n              onChange={(value) => this.onServiceChange(value)}\n              label=\"Service\"\n            />\n            <VariableQueryField\n              value={this.state.selectedMetricType}\n              options={[\n                variableOptionGroup,\n                ...this.state.metricTypes.map(({ value, name }) => ({ value, label: name })),\n              ]}\n              onChange={(value) => this.onMetricTypeChange(value)}\n              label=\"Metric Type\"\n            />\n          </>\n        );\n      case MetricFindQueryTypes.Services:\n      case MetricFindQueryTypes.SLOServices:\n        return (\n          <>\n            <VariableQueryField\n              allowCustomValue={true}\n              value={this.state.projectName}\n              options={[variableOptionGroup, ...this.state.projects]}\n              onChange={(value) => this.onProjectChange(value)}\n              label=\"Project\"\n            />\n          </>\n        );\n\n      case MetricFindQueryTypes.SLO:\n        return (\n          <>\n            <VariableQueryField\n              allowCustomValue={true}\n              value={this.state.projectName}\n              options={[variableOptionGroup, ...this.state.projects]}\n              onChange={(value) => this.onProjectChange(value)}\n              label=\"Project\"\n            />\n            <VariableQueryField\n              value={this.state.selectedSLOService}\n              options={[variableOptionGroup, ...this.state.sloServices]}\n              onChange={(value) => {\n                this.setState({\n                  ...this.state,\n                  selectedSLOService: value,\n                });\n              }}\n              label=\"SLO Service\"\n            />\n          </>\n        );\n      default:\n        return '';\n    }\n  }\n\n  render() {\n    if (this.state.loading) {\n      return (\n        <VariableQueryField\n          value={'loading'}\n          options={[{ value: 'loading', label: 'Loading...' }]}\n          onChange={(value) => null}\n          label=\"Query Type\"\n        />\n      );\n    }\n\n    return (\n      <>\n        <VariableQueryField\n          value={this.state.selectedQueryType}\n          options={this.queryTypes}\n          onChange={(value) => this.onQueryTypeChange(value)}\n          label=\"Query Type\"\n        />\n        {this.renderQueryTypeSwitch(this.state.selectedQueryType)}\n      </>\n    );\n  }\n}\n","import { useEffect } from 'react';\nimport useTimeoutFn from './useTimeoutFn';\nexport default function useDebounce(fn, ms, deps) {\n    if (ms === void 0) { ms = 0; }\n    if (deps === void 0) { deps = []; }\n    var _a = useTimeoutFn(fn, ms), isReady = _a[0], cancel = _a[1], reset = _a[2];\n    useEffect(reset, deps);\n    return [isReady, cancel];\n}\n","import { useCallback, useEffect, useRef } from 'react';\nexport default function useTimeoutFn(fn, ms) {\n    if (ms === void 0) { ms = 0; }\n    var ready = useRef(false);\n    var timeout = useRef();\n    var callback = useRef(fn);\n    var isReady = useCallback(function () { return ready.current; }, []);\n    var set = useCallback(function () {\n        ready.current = false;\n        timeout.current && clearTimeout(timeout.current);\n        timeout.current = setTimeout(function () {\n            ready.current = true;\n            callback.current();\n        }, ms);\n    }, [ms]);\n    var clear = useCallback(function () {\n        ready.current = null;\n        timeout.current && clearTimeout(timeout.current);\n    }, []);\n    // update ref when function changes\n    useEffect(function () {\n        callback.current = fn;\n    }, [fn]);\n    // set on mount, clear on unmount\n    useEffect(function () {\n        set();\n        return clear;\n    }, [ms]);\n    return [isReady, clear, set];\n}\n","import { useEffect, useState } from 'react';\nimport * as React from 'react';\nimport { useDebounce } from 'react-use';\n\nimport { QueryEditorProps, getDefaultTimeRange, toOption } from '@grafana/data';\nimport { EditorField, EditorRows } from '@grafana/plugin-ui';\nimport { Input } from '@grafana/ui';\n\nimport CloudMonitoringDatasource from '../datasource';\nimport { TimeSeriesList, CloudMonitoringQuery, QueryType } from '../types/query';\nimport { CloudMonitoringOptions } from '../types/types';\n\nimport { MetricQueryEditor, defaultTimeSeriesList } from './MetricQueryEditor';\n\nimport { AnnotationsHelp } from './';\n\nexport type Props = QueryEditorProps<CloudMonitoringDatasource, CloudMonitoringQuery, CloudMonitoringOptions>;\n\nexport const defaultQuery: (datasource: CloudMonitoringDatasource) => TimeSeriesList = (datasource) => ({\n  ...defaultTimeSeriesList(datasource),\n  title: '',\n  text: '',\n});\n\nexport const AnnotationQueryEditor = (props: Props) => {\n  const { datasource, query, onRunQuery, data, onChange, range } = props;\n  const meta = data?.series.length ? data?.series[0].meta : {};\n  const customMetaData = meta?.custom ?? {};\n  const timeSeriesList = { ...defaultQuery(datasource), ...query.timeSeriesList };\n  const [title, setTitle] = useState(timeSeriesList.title || '');\n  const [text, setText] = useState(timeSeriesList.text || '');\n  const variableOptionGroup = {\n    label: 'Template Variables',\n    options: datasource.getVariables().map(toOption),\n  };\n\n  const handleTitleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  };\n  const handleTextChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setText(e.target.value);\n  };\n\n  useDebounce(\n    () => {\n      onChange({ ...query, timeSeriesList: { ...timeSeriesList, title } });\n    },\n    1000,\n    [title, onChange]\n  );\n  useDebounce(\n    () => {\n      onChange({ ...query, timeSeriesList: { ...timeSeriesList, text } });\n    },\n    1000,\n    [text, onChange]\n  );\n\n  // Use a known query type\n  useEffect(() => {\n    if (!query.queryType || !Object.values(QueryType).includes(query.queryType)) {\n      onChange({ ...query, queryType: QueryType.TIME_SERIES_LIST });\n    }\n  });\n\n  return (\n    <EditorRows>\n      <>\n        <MetricQueryEditor\n          refId={query.refId}\n          variableOptionGroup={variableOptionGroup}\n          customMetaData={customMetaData}\n          onChange={onChange}\n          onRunQuery={onRunQuery}\n          datasource={datasource}\n          query={query}\n          range={range || getDefaultTimeRange()}\n        />\n        <EditorField label=\"Title\" htmlFor=\"annotation-query-title\">\n          <Input id=\"annotation-query-title\" value={title} onChange={handleTitleChange} />\n        </EditorField>\n        <EditorField label=\"Text\" htmlFor=\"annotation-query-text\">\n          <Input id=\"annotation-query-text\" value={text} onChange={handleTextChange} />\n        </EditorField>\n      </>\n      <AnnotationsHelp />\n    </EditorRows>\n  );\n};\n","import { AnnotationSupport, AnnotationQuery } from '@grafana/data';\n\nimport { AnnotationQueryEditor } from './components/AnnotationQueryEditor';\nimport CloudMonitoringDatasource from './datasource';\nimport { AlignmentTypes, CloudMonitoringQuery, QueryType, LegacyCloudMonitoringAnnotationQuery } from './types/query';\n\n// The legacy query format sets the title and text values to empty strings by default.\n// If the title or text is not undefined at the top-level of the annotation target,\n// then it is a legacy query.\nconst isLegacyCloudMonitoringAnnotation = (\n  query: unknown\n): query is AnnotationQuery<LegacyCloudMonitoringAnnotationQuery> =>\n  (query as AnnotationQuery<LegacyCloudMonitoringAnnotationQuery>).target?.title !== undefined ||\n  (query as AnnotationQuery<LegacyCloudMonitoringAnnotationQuery>).target?.text !== undefined;\n\nexport const CloudMonitoringAnnotationSupport: (\n  ds: CloudMonitoringDatasource\n) => AnnotationSupport<CloudMonitoringQuery> = (ds: CloudMonitoringDatasource) => {\n  return {\n    prepareAnnotation: (\n      query: AnnotationQuery<LegacyCloudMonitoringAnnotationQuery> | AnnotationQuery<CloudMonitoringQuery>\n    ): AnnotationQuery<CloudMonitoringQuery> => {\n      if (!isLegacyCloudMonitoringAnnotation(query)) {\n        return query;\n      }\n\n      const { enable, name, iconColor } = query;\n      const { target } = query;\n      const result: AnnotationQuery<CloudMonitoringQuery> = {\n        datasource: query.datasource,\n        enable,\n        name,\n        iconColor,\n        target: {\n          intervalMs: ds.intervalMs,\n          refId: target?.refId || 'annotationQuery',\n          queryType: QueryType.ANNOTATION,\n          timeSeriesList: {\n            projectName: target?.projectName || ds.getDefaultProject(),\n            filters: target?.filters || [],\n            crossSeriesReducer: 'REDUCE_NONE',\n            perSeriesAligner: AlignmentTypes.ALIGN_NONE,\n            title: target?.title || '',\n            text: target?.text || '',\n          },\n        },\n      };\n      return result;\n    },\n    prepareQuery: (anno: AnnotationQuery<CloudMonitoringQuery>) => {\n      if (!anno.target) {\n        return undefined;\n      }\n\n      return {\n        ...anno.target,\n        queryType: QueryType.ANNOTATION,\n        type: 'annotationQuery',\n      };\n    },\n    QueryEditor: AnnotationQueryEditor,\n  };\n};\n","import { isString } from 'lodash';\n\nimport { ALIGNMENT_PERIODS, SELECTORS } from './constants';\nimport CloudMonitoringDatasource from './datasource';\nimport {\n  extractServicesFromMetricDescriptors,\n  getAggregationOptionsByMetric,\n  getAlignmentOptionsByMetric,\n  getLabelKeys,\n  getMetricTypesByService,\n} from './functions';\nimport { ValueTypes, MetricFindQueryTypes } from './types/query';\nimport { CloudMonitoringVariableQuery, MetricDescriptor } from './types/types';\n\nexport default class CloudMonitoringMetricFindQuery {\n  constructor(private datasource: CloudMonitoringDatasource) {}\n\n  async execute(query: CloudMonitoringVariableQuery) {\n    try {\n      if (!query.projectName) {\n        query.projectName = this.datasource.getDefaultProject();\n      }\n\n      switch (query.selectedQueryType) {\n        case MetricFindQueryTypes.Projects:\n          return this.handleProjectsQuery();\n        case MetricFindQueryTypes.Services:\n          return this.handleServiceQuery(query);\n        case MetricFindQueryTypes.MetricTypes:\n          return this.handleMetricTypesQuery(query);\n        case MetricFindQueryTypes.LabelKeys:\n          return this.handleLabelKeysQuery(query);\n        case MetricFindQueryTypes.LabelValues:\n          return this.handleLabelValuesQuery(query);\n        case MetricFindQueryTypes.ResourceTypes:\n          return this.handleResourceTypeQuery(query);\n        case MetricFindQueryTypes.Aligners:\n          return this.handleAlignersQuery(query);\n        case MetricFindQueryTypes.AlignmentPeriods:\n          return this.handleAlignmentPeriodQuery();\n        case MetricFindQueryTypes.Aggregations:\n          return this.handleAggregationQuery(query);\n        case MetricFindQueryTypes.SLOServices:\n          return this.handleSLOServicesQuery(query);\n        case MetricFindQueryTypes.SLO:\n          return this.handleSLOQuery(query);\n        case MetricFindQueryTypes.Selectors:\n          return this.handleSelectorQuery();\n        default:\n          return [];\n      }\n    } catch (error) {\n      console.error(`Could not run CloudMonitoringMetricFindQuery ${query}`, error);\n      return [];\n    }\n  }\n\n  async handleProjectsQuery() {\n    const projects = await this.datasource.getProjects();\n    return projects.map((s) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleServiceQuery({ projectName }: CloudMonitoringVariableQuery) {\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    const services: MetricDescriptor[] = extractServicesFromMetricDescriptors(metricDescriptors);\n    return services.map((s) => ({\n      text: s.serviceShortName,\n      value: s.service,\n      expandable: true,\n    }));\n  }\n\n  async handleMetricTypesQuery({ selectedService, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedService) {\n      return [];\n    }\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    return getMetricTypesByService(metricDescriptors, this.datasource.templateSrv.replace(selectedService)).map(\n      (s) => ({\n        text: s.displayName,\n        value: s.type,\n        expandable: true,\n      })\n    );\n  }\n\n  async handleLabelKeysQuery({ selectedMetricType, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const labelKeys = await getLabelKeys(this.datasource, selectedMetricType, projectName);\n    return labelKeys.map(this.toFindQueryResult);\n  }\n\n  async handleLabelValuesQuery({ selectedMetricType, labelKey, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const refId = 'handleLabelValuesQuery';\n    // REDUCE_MEAN is needed so the groupBy is not ignored\n    const labels = await this.datasource.getLabels(selectedMetricType, refId, projectName, {\n      groupBys: [labelKey],\n      crossSeriesReducer: 'REDUCE_MEAN',\n    });\n    const interpolatedKey = this.datasource.templateSrv.replace(labelKey);\n    const values = labels.hasOwnProperty(interpolatedKey) ? labels[interpolatedKey] : [];\n    return values.map(this.toFindQueryResult);\n  }\n\n  async handleResourceTypeQuery({ selectedMetricType, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const refId = 'handleResourceTypeQueryQueryType';\n    const labels = await this.datasource.getLabels(selectedMetricType, refId, projectName);\n    return labels['resource.type']?.map(this.toFindQueryResult) ?? [];\n  }\n\n  async handleAlignersQuery({ selectedMetricType, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    const descriptor = metricDescriptors.find(\n      (m) => m.type === this.datasource.templateSrv.replace(selectedMetricType)\n    );\n\n    if (!descriptor) {\n      return [];\n    }\n\n    return getAlignmentOptionsByMetric(descriptor.valueType, descriptor.metricKind).map(this.toFindQueryResult);\n  }\n\n  async handleAggregationQuery({ selectedMetricType, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    const descriptor = metricDescriptors.find(\n      (m) => m.type === this.datasource.templateSrv.replace(selectedMetricType)\n    );\n\n    if (!descriptor) {\n      return [];\n    }\n\n    return getAggregationOptionsByMetric(descriptor.valueType as ValueTypes, descriptor.metricKind).map(\n      this.toFindQueryResult\n    );\n  }\n\n  async handleSLOServicesQuery({ projectName }: CloudMonitoringVariableQuery) {\n    const services = await this.datasource.getSLOServices(projectName);\n    return services.map(this.toFindQueryResult);\n  }\n\n  async handleSLOQuery({ selectedSLOService, projectName }: CloudMonitoringVariableQuery) {\n    const slos = await this.datasource.getServiceLevelObjectives(projectName, selectedSLOService);\n    return slos.map(this.toFindQueryResult);\n  }\n\n  async handleSelectorQuery() {\n    return SELECTORS.map(this.toFindQueryResult);\n  }\n\n  handleAlignmentPeriodQuery() {\n    return ALIGNMENT_PERIODS.map(this.toFindQueryResult);\n  }\n\n  toFindQueryResult(x: any) {\n    return isString(x) ? { text: x, expandable: true } : { ...x, expandable: true };\n  }\n}\n","import { from, Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\n\nimport { CustomVariableSupport, DataQueryRequest, DataQueryResponse } from '@grafana/data';\n\nimport CloudMonitoringMetricFindQuery from './CloudMonitoringMetricFindQuery';\nimport { CloudMonitoringVariableQueryEditor } from './components/VariableQueryEditor';\nimport CloudMonitoringDatasource from './datasource';\nimport { CloudMonitoringVariableQuery } from './types/types';\n\nexport class CloudMonitoringVariableSupport extends CustomVariableSupport<\n  CloudMonitoringDatasource,\n  CloudMonitoringVariableQuery\n> {\n  private readonly metricFindQuery: CloudMonitoringMetricFindQuery;\n\n  constructor(private readonly datasource: CloudMonitoringDatasource) {\n    super();\n    this.metricFindQuery = new CloudMonitoringMetricFindQuery(datasource);\n  }\n\n  editor = CloudMonitoringVariableQueryEditor;\n\n  query(request: DataQueryRequest<CloudMonitoringVariableQuery>): Observable<DataQueryResponse> {\n    const executeObservable = from(this.metricFindQuery.execute(request.targets[0]));\n    return from(this.datasource.ensureGCEDefaultProject()).pipe(\n      mergeMap(() => executeObservable),\n      map((data) => ({ data }))\n    );\n  }\n}\n","import { chunk, flatten, isString, isArray, has, get, omit } from 'lodash';\nimport { from, lastValueFrom, Observable, of } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\n\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  QueryVariableModel,\n  ScopedVars,\n  SelectableValue,\n  TimeRange,\n  getDefaultTimeRange,\n} from '@grafana/data';\nimport {\n  DataSourceWithBackend,\n  getBackendSrv,\n  toDataQueryResponse,\n  BackendSrv,\n  getTemplateSrv,\n  TemplateSrv,\n} from '@grafana/runtime';\n\nimport { CloudMonitoringAnnotationSupport } from './annotationSupport';\nimport { SLO_BURN_RATE_SELECTOR_NAME } from './constants';\nimport { getMetricType, setMetricType } from './functions';\nimport { CloudMonitoringQuery, QueryType, MetricQuery, Filter } from './types/query';\nimport { CloudMonitoringOptions, MetricDescriptor, PostResponse, Aggregation } from './types/types';\nimport { CloudMonitoringVariableSupport } from './variables';\n\nexport default class CloudMonitoringDatasource extends DataSourceWithBackend<\n  CloudMonitoringQuery,\n  CloudMonitoringOptions\n> {\n  authenticationType: string;\n  intervalMs: number;\n  backendSrv: BackendSrv;\n\n  constructor(\n    private instanceSettings: DataSourceInstanceSettings<CloudMonitoringOptions>,\n    public templateSrv: TemplateSrv = getTemplateSrv()\n  ) {\n    super(instanceSettings);\n    this.authenticationType = instanceSettings.jsonData.authenticationType || 'jwt';\n    this.variables = new CloudMonitoringVariableSupport(this);\n    this.intervalMs = 0;\n    this.annotations = CloudMonitoringAnnotationSupport(this);\n    this.backendSrv = getBackendSrv();\n  }\n\n  getVariables() {\n    return this.templateSrv.getVariables().map((v) => `$${v.name}`);\n  }\n\n  query(request: DataQueryRequest<CloudMonitoringQuery>): Observable<DataQueryResponse> {\n    request.targets = request.targets.map((t) => ({\n      ...this.migrateQuery(t),\n      intervalMs: request.intervalMs,\n    }));\n    return super.query(request);\n  }\n\n  applyTemplateVariables(target: CloudMonitoringQuery, scopedVars: ScopedVars) {\n    const { timeSeriesList, timeSeriesQuery, sloQuery, promQLQuery } = target;\n\n    return {\n      ...target,\n      datasource: this.getRef(),\n      intervalMs: this.intervalMs,\n      timeSeriesList: timeSeriesList && {\n        ...this.interpolateProps(timeSeriesList, scopedVars),\n        projectName: this.templateSrv.replace(\n          timeSeriesList.projectName ? timeSeriesList.projectName : this.getDefaultProject(),\n          scopedVars\n        ),\n        filters: this.interpolateFilters(timeSeriesList.filters || [], scopedVars),\n        groupBys: this.interpolateGroupBys(timeSeriesList.groupBys || [], scopedVars),\n        view: timeSeriesList.view || 'FULL',\n      },\n      timeSeriesQuery: timeSeriesQuery && {\n        ...this.interpolateProps(timeSeriesQuery, scopedVars),\n        projectName: this.templateSrv.replace(\n          timeSeriesQuery.projectName ? timeSeriesQuery.projectName : this.getDefaultProject(),\n          scopedVars\n        ),\n      },\n      sloQuery: sloQuery && this.interpolateProps(sloQuery, scopedVars),\n      promQLQuery: promQLQuery && this.interpolateProps(promQLQuery, scopedVars, { expr: this.interpolatePromQLQuery }),\n    };\n  }\n\n  async getLabels(\n    metricType: string,\n    refId: string,\n    projectName: string,\n    aggregation?: Aggregation,\n    timeRange?: TimeRange\n  ): Promise<{ [k: string]: string[] }> {\n    const options = {\n      targets: [\n        {\n          refId,\n          datasource: this.getRef(),\n          queryType: QueryType.TIME_SERIES_LIST,\n          timeSeriesList: setMetricType(\n            {\n              projectName: this.templateSrv.replace(projectName),\n              groupBys: this.interpolateGroupBys(aggregation?.groupBys || [], {}),\n              // Use REDUCE_NONE to retrieve all available labels for the metric\n              crossSeriesReducer: 'REDUCE_NONE',\n              view: 'HEADERS',\n            },\n            this.templateSrv.replace(metricType)\n          ),\n        },\n      ],\n      range: timeRange || getDefaultTimeRange(),\n    };\n\n    const queries = options.targets;\n\n    if (!queries.length) {\n      return lastValueFrom(of({ results: [] }));\n    }\n\n    return lastValueFrom(\n      from(this.ensureGCEDefaultProject()).pipe(\n        mergeMap(() => {\n          return this.backendSrv.fetch<PostResponse>({\n            url: '/api/ds/query',\n            method: 'POST',\n            headers: this.getRequestHeaders(),\n            data: {\n              from: options.range.from.valueOf().toString(),\n              to: options.range.to.valueOf().toString(),\n              queries,\n            },\n          });\n        }),\n\n        map(({ data }) => {\n          const dataQueryResponse = toDataQueryResponse({\n            data: data,\n          });\n\n          const labels: Record<string, Set<string>> = dataQueryResponse?.data\n            .map((f) => f.meta?.custom?.labels)\n            .filter((p) => !!p)\n            .reduce((acc, labels) => {\n              for (let key in labels) {\n                if (!acc[key]) {\n                  acc[key] = new Set<string>();\n                }\n                if (labels[key]) {\n                  acc[key].add(labels[key]);\n                }\n              }\n              return acc;\n            }, {});\n\n          return Object.fromEntries(\n            Object.entries(labels).map(([key, value]) => {\n              const fromArr = Array.from(value);\n              return [key, fromArr];\n            })\n          );\n        })\n      )\n    );\n  }\n\n  async getGCEDefaultProject() {\n    return this.getResource(`gceDefaultProject`);\n  }\n\n  getDefaultProject(): string {\n    const { defaultProject, authenticationType, gceDefaultProject } = this.instanceSettings.jsonData;\n    if (authenticationType === 'gce') {\n      return gceDefaultProject || '';\n    }\n\n    return defaultProject || '';\n  }\n\n  async ensureGCEDefaultProject() {\n    const { authenticationType, gceDefaultProject } = this.instanceSettings.jsonData;\n    if (authenticationType === 'gce' && !gceDefaultProject) {\n      this.instanceSettings.jsonData.gceDefaultProject = await this.getGCEDefaultProject();\n    }\n  }\n\n  async getMetricTypes(projectName: string): Promise<MetricDescriptor[]> {\n    if (!projectName) {\n      return [];\n    }\n\n    return this.getResource(`metricDescriptors/v3/projects/${this.templateSrv.replace(projectName)}/metricDescriptors`);\n  }\n\n  async filterMetricsByType(projectName: string, filter: string): Promise<MetricDescriptor[]> {\n    if (!projectName) {\n      return [];\n    }\n\n    return this.getResource(\n      `metricDescriptors/v3/projects/${this.templateSrv.replace(projectName)}/metricDescriptors`,\n      { filter: `metric.type : \"${filter}\"` }\n    );\n  }\n\n  async getSLOServices(projectName: string): Promise<Array<SelectableValue<string>>> {\n    return this.getResource(`services/v3/projects/${this.templateSrv.replace(projectName)}/services?pageSize=1000`);\n  }\n\n  async getServiceLevelObjectives(projectName: string, serviceId: string): Promise<Array<SelectableValue<string>>> {\n    if (!serviceId) {\n      return Promise.resolve([]);\n    }\n    let { projectName: p, serviceId: s } = this.interpolateProps({ projectName, serviceId });\n    return this.getResource(`slo-services/v3/projects/${p}/services/${s}/serviceLevelObjectives`);\n  }\n\n  getProjects(): Promise<Array<SelectableValue<string>>> {\n    return this.getResource(`projects`);\n  }\n\n  migrateMetricTypeFilter(metricType: string, filters?: string[]) {\n    const metricTypeFilterArray = ['metric.type', '=', metricType];\n    if (filters?.length) {\n      return filters.concat('AND', metricTypeFilterArray);\n    }\n    return metricTypeFilterArray;\n  }\n\n  // This is a manual port of the migration code in cloudmonitoring.go\n  // DO NOT UPDATE THIS CODE WITHOUT UPDATING THE BACKEND CODE\n  migrateQuery(query: CloudMonitoringQuery): CloudMonitoringQuery {\n    const { hide, refId, datasource, key, queryType, maxLines, metric, intervalMs, type, ...rest } = query as any;\n    if (\n      !query.hasOwnProperty('metricQuery') &&\n      !query.hasOwnProperty('sloQuery') &&\n      !query.hasOwnProperty('timeSeriesQuery') &&\n      !query.hasOwnProperty('timeSeriesList')\n    ) {\n      let filters = rest.filters || [];\n      if (rest.metricType) {\n        filters = this.migrateMetricTypeFilter(rest.metricType, filters);\n      }\n\n      return {\n        datasource,\n        key,\n        refId,\n        intervalMs,\n        hide,\n        queryType: type === 'annotationQuery' ? QueryType.ANNOTATION : QueryType.TIME_SERIES_LIST,\n        timeSeriesList: {\n          ...rest,\n          projectName: get(query, 'projectName') || this.getDefaultProject(),\n          filters,\n          view: rest.view || 'FULL',\n        },\n      };\n    }\n\n    if (has(query, 'metricQuery') && ['metrics', QueryType.ANNOTATION].includes(query.queryType ?? '')) {\n      const metricQuery = get(query, 'metricQuery') as MetricQuery;\n      if (metricQuery.editorMode === 'mql') {\n        query.timeSeriesQuery = {\n          projectName: metricQuery.projectName,\n          query: metricQuery.query,\n          graphPeriod: metricQuery.graphPeriod,\n        };\n        query.queryType = QueryType.TIME_SERIES_QUERY;\n      } else {\n        query.timeSeriesList = {\n          projectName: metricQuery.projectName || this.getDefaultProject(),\n          crossSeriesReducer: metricQuery.crossSeriesReducer,\n          alignmentPeriod: metricQuery.alignmentPeriod,\n          perSeriesAligner: metricQuery.perSeriesAligner,\n          groupBys: metricQuery.groupBys,\n          filters: metricQuery.filters,\n          view: metricQuery.view,\n          preprocessor: metricQuery.preprocessor,\n        };\n        query.queryType = QueryType.TIME_SERIES_LIST;\n        if (metricQuery.metricType) {\n          query.timeSeriesList.filters = this.migrateMetricTypeFilter(\n            metricQuery.metricType,\n            query.timeSeriesList.filters\n          );\n        }\n      }\n      query.aliasBy = metricQuery.aliasBy;\n      query = omit(query, 'metricQuery');\n    }\n\n    if (query.queryType === QueryType.SLO && has(query, 'sloQuery.aliasBy')) {\n      const sloQuery = get(query, 'sloQuery.aliasBy');\n      if (typeof sloQuery === 'string') {\n        query.aliasBy = sloQuery;\n      }\n      query = omit(query, 'sloQuery.aliasBy');\n    }\n\n    return query;\n  }\n\n  interpolatePromQLQuery(value: string | string[], _variable: QueryVariableModel) {\n    if (isArray(value)) {\n      return value.join('|');\n    }\n    return value;\n  }\n\n  interpolateProps<T extends Record<string, any>>(\n    object: T,\n    scopedVars: ScopedVars = {},\n    formattingFunctions?: { [key: string]: Function | undefined }\n  ): T {\n    return Object.entries(object).reduce((acc, [key, value]) => {\n      let interpolatedValue = value;\n      if (value && isString(value)) {\n        // Pass a function to the template service for formatting\n        interpolatedValue = this.templateSrv.replace(\n          value,\n          scopedVars,\n          formattingFunctions && formattingFunctions[key]\n        );\n      }\n      return {\n        ...acc,\n        [key]: interpolatedValue,\n      };\n    }, {} as T);\n  }\n\n  filterQuery(item: CloudMonitoringQuery): boolean {\n    if (item.hide) {\n      return false;\n    }\n\n    const query = this.migrateQuery(item);\n\n    if (query.queryType === QueryType.SLO) {\n      if (!query.sloQuery) {\n        return false;\n      }\n      const { selectorName, serviceId, sloId, projectName, lookbackPeriod } = query.sloQuery;\n      return (\n        !!selectorName &&\n        !!serviceId &&\n        !!sloId &&\n        !!projectName &&\n        (selectorName !== SLO_BURN_RATE_SELECTOR_NAME || !!lookbackPeriod)\n      );\n    }\n\n    if (query.queryType === QueryType.TIME_SERIES_QUERY) {\n      return !!query.timeSeriesQuery && !!query.timeSeriesQuery.projectName && !!query.timeSeriesQuery.query;\n    }\n\n    if (query.queryType && [QueryType.TIME_SERIES_LIST, QueryType.ANNOTATION].includes(query.queryType)) {\n      return !!query.timeSeriesList && !!query.timeSeriesList.projectName && !!getMetricType(query.timeSeriesList);\n    }\n\n    if (query.queryType === QueryType.PROMQL) {\n      return (\n        !!query.promQLQuery && !!query.promQLQuery.projectName && !!query.promQLQuery.expr && !!query.promQLQuery.step\n      );\n    }\n\n    return false;\n  }\n\n  interpolateVariablesInQueries(queries: CloudMonitoringQuery[], scopedVars: ScopedVars): CloudMonitoringQuery[] {\n    return queries.map((query) => this.applyTemplateVariables(this.migrateQuery(query), scopedVars));\n  }\n\n  interpolateFilters(filters: string[], scopedVars: ScopedVars) {\n    const completeFilter: Filter[] = chunk(filters, 4)\n      .map(([key, operator, value, condition]) => ({\n        key,\n        operator,\n        value,\n        ...(condition && { condition }),\n      }))\n      .filter((item) => item.value);\n\n    const filterArray = flatten(\n      completeFilter.map(({ key, operator, value, condition }: Filter) => [\n        this.templateSrv.replace(key, scopedVars || {}),\n        operator,\n        this.templateSrv.replace(value, scopedVars || {}, (value: string | string[]) => {\n          return isArray(value) && value.length ? `(${value.join('|')})` : value;\n        }),\n        ...(condition ? [condition] : []),\n      ])\n    );\n\n    return filterArray || [];\n  }\n\n  interpolateGroupBys(groupBys: string[], scopedVars: {}): string[] {\n    let interpolatedGroupBys: string[] = [];\n    (groupBys || []).forEach((gb) => {\n      const interpolated = this.templateSrv.replace(gb, scopedVars || {}, 'csv').split(',');\n      if (Array.isArray(interpolated)) {\n        interpolatedGroupBys = interpolatedGroupBys.concat(interpolated);\n      } else {\n        interpolatedGroupBys.push(interpolated);\n      }\n    });\n    return interpolatedGroupBys;\n  }\n}\n","import { get } from 'lodash';\n\nimport { DataSourcePlugin, DashboardLoadedEvent } from '@grafana/data';\nimport { getAppEvents } from '@grafana/runtime';\n\nimport CloudMonitoringCheatSheet from './components/CloudMonitoringCheatSheet';\nimport { ConfigEditor } from './components/ConfigEditor/ConfigEditor';\nimport { QueryEditor } from './components/QueryEditor';\nimport { CloudMonitoringVariableQueryEditor } from './components/VariableQueryEditor';\nimport CloudMonitoringDatasource from './datasource';\nimport pluginJson from './plugin.json';\nimport { trackCloudMonitoringDashboardLoaded } from './tracking';\nimport { CloudMonitoringQuery, QueryType } from './types/query';\n\nexport const plugin = new DataSourcePlugin<CloudMonitoringDatasource, CloudMonitoringQuery>(CloudMonitoringDatasource)\n  .setQueryEditorHelp(CloudMonitoringCheatSheet)\n  .setQueryEditor(QueryEditor)\n  .setConfigEditor(ConfigEditor)\n  .setVariableQueryEditor(CloudMonitoringVariableQueryEditor);\n\n// Track dashboard loads to RudderStack\ngetAppEvents().subscribe<DashboardLoadedEvent<CloudMonitoringQuery>>(\n  DashboardLoadedEvent,\n  ({ payload: { dashboardId, orgId, grafanaVersion, queries } }) => {\n    const cloudmonitorQueries = queries[pluginJson.id];\n    let stats = {\n      [QueryType.TIME_SERIES_QUERY]: 0,\n      [QueryType.TIME_SERIES_LIST]: 0,\n      [QueryType.SLO]: 0,\n      [QueryType.ANNOTATION]: 0,\n      [QueryType.PROMQL]: 0,\n    };\n    cloudmonitorQueries.forEach((query) => {\n      if (\n        query.queryType === QueryType.TIME_SERIES_QUERY ||\n        query.queryType === QueryType.TIME_SERIES_LIST ||\n        query.queryType === QueryType.SLO ||\n        query.queryType === QueryType.ANNOTATION ||\n        query.queryType === QueryType.PROMQL\n      ) {\n        stats[query.queryType]++;\n      } else if (query.queryType === 'metrics') {\n        if (query.hasOwnProperty('type') && get(query, 'type') === 'annotationQuery') {\n          stats.annotation++;\n        }\n        if (get(query, 'metricQuery.editorMode') === 'mql') {\n          stats.timeSeriesQuery++;\n        } else {\n          stats.timeSeriesList++;\n        }\n      }\n    });\n\n    if (cloudmonitorQueries && cloudmonitorQueries.length > 0) {\n      trackCloudMonitoringDashboardLoaded({\n        grafana_version: grafanaVersion,\n        dashboard_id: dashboardId,\n        org_id: orgId,\n        mql_queries: stats[QueryType.TIME_SERIES_QUERY],\n        time_series_filter_queries: stats[QueryType.TIME_SERIES_LIST],\n        slo_queries: stats[QueryType.SLO],\n        annotation_queries: stats[QueryType.ANNOTATION],\n        promQL_queries: stats[QueryType.PROMQL],\n      });\n    }\n  }\n);\n","import deepEqual from 'fast-deep-equal';\nimport { isEqual } from 'lodash';\nimport { useEffect, useState } from 'react';\n\nimport { QueryEditorProps, getDefaultTimeRange, toOption } from '@grafana/data';\nimport { EditorRows } from '@grafana/plugin-ui';\nimport { ConfirmModal } from '@grafana/ui';\n\nimport CloudMonitoringDatasource from '../datasource';\nimport { selectors } from '../e2e/selectors';\nimport { CloudMonitoringQuery, PromQLQuery, QueryType, SLOQuery } from '../types/query';\nimport { CloudMonitoringOptions } from '../types/types';\n\nimport { defaultTimeSeriesList, defaultTimeSeriesQuery } from './MetricQueryEditor';\nimport { PromQLQueryEditor } from './PromQLEditor';\nimport { QueryHeader } from './QueryHeader';\nimport { defaultQuery as defaultSLOQuery } from './SLOQueryEditor';\n\nimport { MetricQueryEditor, SLOQueryEditor } from './';\n\nexport type Props = QueryEditorProps<CloudMonitoringDatasource, CloudMonitoringQuery, CloudMonitoringOptions>;\n\nexport const QueryEditor = (props: Props) => {\n  const { datasource, query, onRunQuery, onChange, range } = props;\n  const [modalIsOpen, setModalIsOpen] = useState<boolean>(false);\n\n  useEffect(() => {\n    const migrated = datasource.migrateQuery(query);\n    if (!deepEqual(migrated, query)) {\n      onChange({ ...migrated });\n    }\n  }, [query, datasource, onChange]);\n\n  const [currentQuery, setCurrentQuery] = useState<CloudMonitoringQuery>(query);\n  const [queryHasBeenEdited, setQueryHasBeenEdited] = useState<boolean>(false);\n\n  const sloQuery = { ...defaultSLOQuery(datasource), ...query.sloQuery };\n  const onSLOQueryChange = (q: SLOQuery) => {\n    onChange({ ...query, sloQuery: q });\n    onRunQuery();\n  };\n\n  const promQLQuery = {\n    ...{ projectName: datasource.getDefaultProject(), expr: '', step: '10s' },\n    ...query.promQLQuery,\n  };\n  const onPromQLQueryChange = (q: PromQLQuery) => {\n    onChange({ ...query, promQLQuery: q });\n  };\n\n  const onMetricQueryChange = (q: CloudMonitoringQuery) => {\n    if (\n      (q.queryType === QueryType.TIME_SERIES_LIST && !isEqual(q.timeSeriesList, defaultTimeSeriesList(datasource))) ||\n      (q.queryType === QueryType.TIME_SERIES_QUERY && !isEqual(q.timeSeriesQuery, defaultTimeSeriesQuery(datasource)))\n    ) {\n      setQueryHasBeenEdited(true);\n    }\n    onChange(q);\n  };\n\n  const meta = props.data?.series.length ? props.data?.series[0].meta : {};\n  const customMetaData = meta?.custom ?? {};\n  const variableOptionGroup = {\n    label: 'Template Variables',\n    expanded: false,\n    options: datasource.getVariables().map(toOption),\n  };\n\n  // Use a known query type\n  useEffect(() => {\n    if (!query.queryType || !Object.values(QueryType).includes(query.queryType)) {\n      onChange({ ...query, queryType: QueryType.TIME_SERIES_LIST });\n    }\n  });\n  const queryType = query.queryType;\n\n  const checkForModalDisplay = (q: CloudMonitoringQuery) => {\n    if (\n      queryHasBeenEdited &&\n      (currentQuery.queryType === QueryType.TIME_SERIES_LIST || currentQuery.queryType === QueryType.TIME_SERIES_QUERY)\n    ) {\n      if (currentQuery.queryType !== q.queryType) {\n        setModalIsOpen(true);\n      }\n    } else {\n      onChange(q);\n    }\n    setCurrentQuery(q);\n  };\n\n  return (\n    <span data-testid={selectors.components.queryEditor.container}>\n      <EditorRows>\n        <ConfirmModal\n          data-testid=\"switch-query-type-modal\"\n          title=\"Warning\"\n          body=\"By switching your query type, your current query will be lost.\"\n          isOpen={modalIsOpen}\n          onConfirm={() => {\n            setModalIsOpen(false);\n            onChange(currentQuery);\n            setQueryHasBeenEdited(false);\n          }}\n          confirmText=\"Confirm\"\n          onDismiss={() => {\n            setModalIsOpen(false);\n            setCurrentQuery(query);\n          }}\n        />\n        <QueryHeader query={query} onChange={checkForModalDisplay} onRunQuery={onRunQuery} />\n\n        {queryType === QueryType.PROMQL && (\n          <PromQLQueryEditor\n            refId={query.refId}\n            variableOptionGroup={variableOptionGroup}\n            onChange={onPromQLQueryChange}\n            onRunQuery={onRunQuery}\n            datasource={datasource}\n            query={promQLQuery}\n          />\n        )}\n\n        {queryType !== QueryType.SLO && (\n          <MetricQueryEditor\n            refId={query.refId}\n            variableOptionGroup={variableOptionGroup}\n            customMetaData={customMetaData}\n            onChange={onMetricQueryChange}\n            onRunQuery={onRunQuery}\n            datasource={datasource}\n            query={query}\n            range={range || getDefaultTimeRange()}\n          />\n        )}\n\n        {queryType === QueryType.SLO && (\n          <SLOQueryEditor\n            refId={query.refId}\n            variableOptionGroup={variableOptionGroup}\n            customMetaData={customMetaData}\n            onChange={onSLOQueryChange}\n            onRunQuery={onRunQuery}\n            datasource={datasource}\n            query={sloQuery}\n            aliasBy={query.aliasBy}\n            onChangeAliasBy={(aliasBy: string) => onChange({ ...query, aliasBy })}\n          />\n        )}\n      </EditorRows>\n    </span>\n  );\n};\n","import { reportInteraction } from '@grafana/runtime';\n\n/**\n * Loaded the first time a dashboard containing Cloudmonitoring queries is loaded (not on every render)\n * Note: The queries used here are the ones pre-migration and pre-filterQuery\n */\nexport const trackCloudMonitoringDashboardLoaded = (props: CloudMonitoringDashboardLoadedProps) => {\n  reportInteraction('grafana_ds_cloudmonitoring_dashboard_loaded', props);\n};\n\nexport type CloudMonitoringDashboardLoadedProps = {\n  grafana_version?: string;\n  dashboard_id: string;\n  org_id?: number;\n  /** number of non hidden queries of type TimeSeriesQuery (MQL) if any  */\n  mql_queries: number;\n  /** number of non hidden queries of type TimeSeriesFilter (Builder) if any  */\n  time_series_filter_queries: number;\n  /** number of non hidden queries of type SLO if any  */\n  slo_queries: number;\n  /** number of non hidden queries of type annotation if any  */\n  annotation_queries: number;\n  /** number of non hidden queries of type PromQL if any  */\n  promQL_queries: number;\n};\n"],"names":["e","t","a","n","o","default","l","i","c","d","v","b","onChange","showConfigEditor","showPaste","showUpload","isPasting","r","isUploading","p","f","m","useState","g","useTheme2","h","useCallback","E","T","trim","JSON","parse","j","isValid","privateKey","private_key","tokenUri","token_uri","clientEmail","client_email","projectId","project_id","error","createElement","Fragment","Field","label","invalid","Boolean","description","FileDropzone","options","multiple","accept","readAs","onLoad","style","margin","fontSize","typography","h4","textAlign","Button","fill","TextArea","autoFocus","placeholder","onBlur","currentTarget","value","rows","type","color","colors","primary","text","onClick","paddingRight","paddingLeft","isObject","filter","length","join","SecretFormField","k","LegacyForms","J","PATH","JWT","P","onReset","onOptionsChange","s","u","privateKeyPath","jsonData","onUpdateDatasourceJsonDataOption","y","className","isConfigured","secureJsonFields","secureJsonData","onUpdateDatasourceSecureJsonDataOption","Input","id","width","defaultProject","SecretInput","Object","assign","labelWidth","inputWidth","C","authOptions","authenticationType","O","FieldSet","RadioButtonGroup","W","ariaLabel","exports","ConnectionConfig","marginTop","target","rel","href","Alert","title","severity","module","fn","wait","arguments","undefined","lastCallAt","deferred","timer","pendingArgs","currentWait","getWait","currentTime","Date","getTime","isCold","_len","args","Array","_key","leading","accumulate","Promise","resolve","call","this","then","result","apply","concat","clearTimeout","promise","reject","defer","push","setTimeout","flush","bind","argsIndex","results","thisDeferred","equal","constructor","keys","isArray","RegExp","source","flags","valueOf","prototype","toString","hasOwnProperty","key","Symbol","for","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentOwner","ref","__self","__source","q","defaultProps","$$typeof","props","_owner","current","jsx","jsxs","__WEBPACK_EXTERNAL_MODULE__89__","__WEBPACK_EXTERNAL_MODULE__781__","__WEBPACK_EXTERNAL_MODULE__531__","__WEBPACK_EXTERNAL_MODULE__7__","__WEBPACK_EXTERNAL_MODULE__241__","__WEBPACK_EXTERNAL_MODULE__959__","__WEBPACK_EXTERNAL_MODULE__269__","__WEBPACK_EXTERNAL_MODULE__59__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","__esModule","definition","defineProperty","enumerable","get","obj","prop","toStringTag","CloudMonitoringCheatSheet","PureComponent","render","div","h2","code","br","span","ul","css","listStyle","li","DataSourceDescription","dataSourceName","docsLink","hasRequiredFields","theme","styles","container","spacing","body","secondary","link","textDecoration","cx","GenericConfigSection","children","isCollapsible","isInitiallyOpen","kind","isOpen","setIsOpen","iconName","isSubSection","collapsibleButtonAriaLabel","header","display","justifyContent","alignItems","subtitle","fontWeight","fontWeightRegular","descriptionText","marginBottom","bodySmall","content","IconButton","name","size","ConfigSection","ConfigEditor","Divider","handleOnOptionsChange","config","secureSocksDSProxyEnabled","enableSecureSocksProxy","SecureSocksProxySettings","reportInteraction","EditorStack","wrap","wrapItems","_a","_b","Stack","direction","gap","EditorRows","selectors","select","visualMetricsQueryEditor","input","mqlMetricsQueryEditor","sloQueryEditor","promQlQueryEditor","QueryType","PreprocessorType","MetricKind","ValueTypes","AlignmentTypes","MetricFindQueryTypes","EditorField","optional","tooltip","tooltipInteractive","fieldProps","useStyles2","getStyles","childInputId","htmlFor","ReactUtils","getChildId","labelEl","Tooltip","placement","interactive","Icon","tabIndex","icon","Space","root","field","minWidth","fontWeightMedium","fontStyle","marginLeft","AliasBy","refId","alias","setAlias","propagateOnChange","debounce","EditorRow","padding","backgroundColor","background","borderRadius","shape","radius","ALIGNMENTS","valueTypes","INT64","DOUBLE","MONEY","DISTRIBUTION","STRING","VALUE_TYPE_UNSPECIFIED","BOOL","metricKinds","GAUGE","CUMULATIVE","DELTA","AGGREGATIONS","METRIC_KIND_UNSPECIFIED","ALIGNMENT_PERIODS","hidden","GRAPH_PERIODS","LOOKBACK_PERIODS","SYSTEM_LABELS","SLO_BURN_RATE_SELECTOR_NAME","SELECTORS","QUERY_TYPES","TIME_SERIES_LIST","TIME_SERIES_QUERY","SLO","PROMQL","Project","projectName","datasource","templateVariableOptions","projects","setProjects","useEffect","getProjects","projectsWithTemplateVariables","useMemo","Select","allowCustomValue","formatCreateLabel","inputId","EditorFieldGroup","extractServicesFromMetricDescriptors","metricDescriptors","uniqBy","getMetricTypesByService","service","getMetricTypes","metricType","interpolatedMetricType","selectedService","metricTypes","map","displayName","metricTypeExistInArray","some","metricTypeByService","selectedMetricType","getAlignmentOptionsByMetric","metricValueType","metricKind","preprocessor","Rate","indexOf","getAggregationOptionsByMetric","valueType","getLabelKeys","labels","getLabels","getAlignmentPickerData","perSeriesAligner","ALIGN_MEAN","templateSrv","getTemplateSrv","alignOptions","option","replace","labelsToGroupedOptions","groupBys","groups","reduce","acc","curr","arr","split","startCase","group","initial","entries","expanded","alignmentPeriodLabel","customMetaData","alignmentPeriod","alignment","find","ap","seconds","parseInt","rangeUtil","secondsToHms","getMetricType","query","metricTypeKey","filters","findIndex","setMetricType","Aggregation","aggOptions","useAggregationOptionsByMetric","selected","useSelectedFromOptions","data-testid","menuPlacement","metricDescriptor","crossSeriesReducer","GroupBy","variableOptionGroup","MultiSelect","AlignmentFunction","psa","PeriodSelect","disabled","aligmentPeriods","visibleOptions","Alignment","alignmentLabel","period","AccessoryButton","getButtonStyles","button","EditorList","items","renderItem","item","index","newItem","itemIndex","newItems","onChangeItem","splice","onDeleteItem","variant","DEFAULT_OPERATOR","DEFAULT_CONDITION","operators","toOption","protectedFilterKeys","LabelFilter","filterArray","_onChange","rawFilters","chunk","operator","condition","stringArrayToFilters","includes","protectedFilters","getOptions","op","opp","valueOptions","HorizontalGroup","aria-label","flatMap","slice","filtersToStringArray","AnnotationsHelp","LookbackPeriodSelect","lp","slos","setSLOs","serviceId","getServiceLevelObjectives","sloIds","sloId","sloName","slo","goal","Selector","selectorName","Service","services","setServices","getSLOServices","serviceName","SLOQueryEditor","aliasBy","onChangeAliasBy","lookbackPeriod","MQLQueryEditor","onRunQuery","onKeyDown","event","shiftKey","ctrlKey","preventDefault","VariableQueryField","NONE_OPTION","None","Preprocessor","useOptions","Delta","Editor","range","setLabels","setMetricDescriptors","setMetricDescriptor","metrics","setMetrics","setService","timeRange","setTimeRange","time","raw","from","to","selectStyles","getSelectStyles","customStyle","getSelectedMetricDescriptor","md","loadMetricDescriptors","count","getServicesList","optionDescription","selectedMetricDescriptor","component","getMetricsList","serviceShortName","filterMetrics","filtered","filterMetricsByType","toLowerCase","debounceFilter","onMetricTypeChange","defaultTimeSeriesList","isLoading","AsyncSelect","loadOptions","defaultOptions","VisualMetricQueryEditor","React","GraphPeriod","graphPeriod","Switch","checked","dataSource","getDefaultProject","defaultTimeSeriesQuery","onQueryChange","onChangeTimeSeriesList","timeSeriesList","filtersComplete","onChangeTimeSeriesQuery","timeSeriesQuery","queryType","ANNOTATION","MetricQueryEditor","PromQLQueryEditor","onReturnKeyDown","stopPropagation","expr","step","EditorHeader","flexWrap","minHeight","InlineSelect","labelProp","Math","random","components","SelectContainer","ValueContainer","SingleValue","openMenuOnFocus","valueContainer","whiteSpace","borderColor","flex","FlexItem","grow","shrink","flexGrow","flexShrink","QueryHeader","CloudMonitoringVariableQueryEditor","componentDidMount","ensureGCEDefaultProject","state","sloServices","loading","setState","onPropsChange","onQueryTypeChange","selectedQueryType","onProjectChange","onServiceChange","onLabelKeyChange","labelKey","componentDidUpdate","prevProps","prevState","selecQueryTypeChanged","selectSLOServiceChanged","selectedSLOService","LabelValues","renderQueryTypeSwitch","getVariables","MetricTypes","LabelKeys","ResourceTypes","Aligners","Aggregations","Services","SLOServices","queryTypes","super","Projects","AlignmentPeriods","Selectors","defaults","queryModel","useDebounce","ms","deps","ready","useRef","timeout","callback","isReady","set","clear","useTimeoutFn","cancel","reset","AnnotationQueryEditor","data","meta","series","custom","defaultQuery","setTitle","setText","values","getDefaultTimeRange","CloudMonitoringAnnotationSupport","ds","prepareAnnotation","isLegacyCloudMonitoringAnnotation","enable","iconColor","intervalMs","ALIGN_NONE","prepareQuery","anno","QueryEditor","CloudMonitoringMetricFindQuery","execute","handleProjectsQuery","handleServiceQuery","handleMetricTypesQuery","handleLabelKeysQuery","handleLabelValuesQuery","handleResourceTypeQuery","handleAlignersQuery","handleAlignmentPeriodQuery","handleAggregationQuery","handleSLOServicesQuery","handleSLOQuery","handleSelectorQuery","console","expandable","toFindQueryResult","interpolatedKey","descriptor","x","isString","CloudMonitoringVariableSupport","CustomVariableSupport","request","executeObservable","metricFindQuery","targets","pipe","mergeMap","editor","CloudMonitoringDatasource","DataSourceWithBackend","migrateQuery","applyTemplateVariables","scopedVars","sloQuery","promQLQuery","getRef","interpolateProps","interpolateFilters","interpolateGroupBys","view","interpolatePromQLQuery","aggregation","queries","lastValueFrom","backendSrv","fetch","url","method","headers","getRequestHeaders","dataQueryResponse","toDataQueryResponse","Set","add","fromEntries","of","getGCEDefaultProject","getResource","gceDefaultProject","instanceSettings","migrateMetricTypeFilter","metricTypeFilterArray","hide","maxLines","metric","rest","has","metricQuery","editorMode","omit","_variable","object","formattingFunctions","interpolatedValue","filterQuery","interpolateVariablesInQueries","completeFilter","flatten","interpolatedGroupBys","forEach","gb","interpolated","variables","annotations","getBackendSrv","plugin","DataSourcePlugin","setQueryEditorHelp","setQueryEditor","modalIsOpen","setModalIsOpen","migrated","deepEqual","currentQuery","setCurrentQuery","queryHasBeenEdited","setQueryHasBeenEdited","ConfirmModal","onConfirm","confirmText","onDismiss","isEqual","setConfigEditor","setVariableQueryEditor","getAppEvents","subscribe","DashboardLoadedEvent","payload","dashboardId","orgId","grafanaVersion","cloudmonitorQueries","stats","annotation","grafana_version","dashboard_id","org_id","mql_queries","time_series_filter_queries","slo_queries","annotation_queries","promQL_queries"],"sourceRoot":""}