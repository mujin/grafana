{"version":3,"file":"sql-query-editor.js","mappings":"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","sources":["webpack://grafana-postgresql-datasource/../../../../../packages/grafana-e2e-selectors/src/resolver.ts","webpack://grafana-postgresql-datasource/../../../../../packages/grafana-e2e-selectors/src/selectors/constants.ts","webpack://grafana-postgresql-datasource/../../../../../packages/grafana-e2e-selectors/src/selectors/components.ts","webpack://grafana-postgresql-datasource/../../../../../packages/grafana-e2e-selectors/src/selectors/index.ts","webpack://grafana-postgresql-datasource/../../../../../packages/grafana-e2e-selectors/src/selectors/pages.ts","webpack://grafana-postgresql-datasource/../../../../../packages/grafana-sql/src/components/ConfirmModal.tsx","webpack://grafana-postgresql-datasource/../../../../../packages/grafana-sql/src/components/DatasetSelector.tsx","webpack://grafana-postgresql-datasource/../../../../../packages/grafana-sql/src/components/TableSelector.tsx","webpack://grafana-postgresql-datasource/../../../../../packages/grafana-sql/src/components/QueryHeader.tsx","webpack://grafana-postgresql-datasource/../../../../../packages/grafana-sql/src/components/query-editor-raw/QueryEditorRaw.tsx","webpack://grafana-postgresql-datasource/../../../../../packages/grafana-sql/src/components/query-editor-raw/QueryValidator.tsx","webpack://grafana-postgresql-datasource/../../../../../packages/grafana-sql/src/components/query-editor-raw/QueryToolbox.tsx","webpack://grafana-postgresql-datasource/../../../../../packages/grafana-sql/src/components/query-editor-raw/RawEditor.tsx","webpack://grafana-postgresql-datasource/../../../../../packages/grafana-sql/src/components/visual-query-builder/Preview.tsx","webpack://grafana-postgresql-datasource/../../../../../packages/grafana-sql/src/utils/useSqlChange.ts","webpack://grafana-postgresql-datasource/../../../../../packages/grafana-sql/src/components/visual-query-builder/GroupByRow.tsx","webpack://grafana-postgresql-datasource/../../../../../packages/grafana-sql/src/components/visual-query-builder/SQLGroupByRow.tsx","webpack://grafana-postgresql-datasource/../../../../../packages/grafana-sql/src/components/visual-query-builder/OrderByRow.tsx","webpack://grafana-postgresql-datasource/../../../../../packages/grafana-sql/src/components/visual-query-builder/SQLOrderByRow.tsx","webpack://grafana-postgresql-datasource/../../../../../packages/grafana-sql/src/components/visual-query-builder/AwesomeQueryBuilder.tsx","webpack://grafana-postgresql-datasource/../../../../../packages/grafana-sql/src/components/visual-query-builder/WhereRow.tsx","webpack://grafana-postgresql-datasource/../../../../../packages/grafana-sql/src/components/visual-query-builder/SQLWhereRow.tsx","webpack://grafana-postgresql-datasource/../../../../../packages/grafana-sql/src/components/visual-query-builder/SelectColumn.tsx","webpack://grafana-postgresql-datasource/../../../../../packages/grafana-sql/src/components/visual-query-builder/SelectCustomFunctionParameters.tsx","webpack://grafana-postgresql-datasource/../../../../../packages/grafana-sql/src/components/visual-query-builder/SelectFunctionParameters.tsx","webpack://grafana-postgresql-datasource/../../../../../packages/grafana-sql/src/components/visual-query-builder/SelectRow.tsx","webpack://grafana-postgresql-datasource/../../../../../packages/grafana-sql/src/components/visual-query-builder/VisualEditor.tsx","webpack://grafana-postgresql-datasource/../../../../../packages/grafana-sql/src/components/QueryEditor.tsx"],"sourcesContent":["import { gte, compare, valid } from 'semver';\n\nimport {\n  FunctionSelector,\n  Selectors,\n  SelectorsOf,\n  StringSelector,\n  VersionedSelectorGroup,\n  VersionedSelectors,\n  CssSelector,\n  UrlSelector,\n  FunctionSelectorTwoArgs,\n} from './types';\n\n/**\n * Resolves selectors based on the Grafana version\n */\nexport function resolveSelectors<T extends VersionedSelectorGroup>(\n  versionedSelectors: T,\n  grafanaVersion = 'latest'\n): SelectorsOf<T> {\n  const version = grafanaVersion.replace(/\\-.*/, '');\n\n  return resolveSelectorGroup(versionedSelectors, version);\n}\n\nfunction resolveSelectorGroup<T extends VersionedSelectorGroup>(group: T, grafanaVersion: string): SelectorsOf<T> {\n  const result: Selectors = {};\n\n  for (const [key, value] of Object.entries(group)) {\n    if (isVersionedSelectorGroup(value)) {\n      result[key] = resolveSelectorGroup(value, grafanaVersion);\n    } else {\n      assertIsSemverValid(value, key);\n      result[key] = resolveSelector(value, grafanaVersion);\n    }\n  }\n\n  return result as SelectorsOf<T>;\n}\n\nfunction isVersionedSelectorGroup(\n  target: VersionedSelectors | VersionedSelectorGroup\n): target is VersionedSelectorGroup {\n  if (typeof target === 'object') {\n    const [first] = Object.keys(target);\n    return !valid(first);\n  }\n\n  return false;\n}\n\nfunction resolveSelector(\n  versionedSelector: VersionedSelectors,\n  grafanaVersion: string\n): StringSelector | FunctionSelector | FunctionSelectorTwoArgs | CssSelector | UrlSelector {\n  let versionToUse;\n  let versions = Object.keys(versionedSelector).sort(compare);\n\n  if (grafanaVersion === 'latest') {\n    return versionedSelector[versions[versions.length - 1]];\n  }\n\n  for (const version of versions) {\n    if (gte(grafanaVersion, version)) {\n      versionToUse = version;\n    }\n  }\n\n  if (!versionToUse) {\n    versionToUse = versions[versions.length - 1];\n  }\n\n  return versionedSelector[versionToUse];\n}\n\nfunction assertIsSemverValid(versionedSelector: VersionedSelectors, selectorName: string) {\n  if (!Object.keys(versionedSelector).every((version) => valid(version))) {\n    throw new Error(`Invalid semver version: '${selectorName}'`);\n  }\n}\n","export const MIN_GRAFANA_VERSION = '8.5.0';\n","// NOTE: by default Component string selectors are set up to be aria-labels,\n// however there are many cases where your component may not need an aria-label\n// (a <button> with clear text, for example, does not need an aria-label as it's already labeled)\n// but you still might need to select it for testing,\n// in that case please add the attribute data-testid={selector} in the component and\n// prefix your selector string with 'data-testid' so that when create the selectors we know to search for it on the right attribute\n\nimport { VersionedSelectorGroup } from '../types';\n\nimport { MIN_GRAFANA_VERSION } from './constants';\n\n/**\n * Selectors grouped/defined in Components\n */\nexport const versionedComponents = {\n  RadioButton: {\n    container: {\n      '10.2.3': 'data-testid radio-button',\n    },\n  },\n  Breadcrumbs: {\n    breadcrumb: {\n      '9.4.0': (title: string) => `data-testid ${title} breadcrumb`,\n    },\n  },\n  TimePicker: {\n    openButton: {\n      [MIN_GRAFANA_VERSION]: 'data-testid TimePicker Open Button',\n    },\n    overlayContent: {\n      '10.2.3': 'data-testid TimePicker Overlay Content',\n    },\n    fromField: {\n      '10.2.3': 'data-testid Time Range from field',\n      [MIN_GRAFANA_VERSION]: 'Time Range from field',\n    },\n    toField: {\n      '10.2.3': 'data-testid Time Range to field',\n      [MIN_GRAFANA_VERSION]: 'Time Range to field',\n    },\n    applyTimeRange: {\n      [MIN_GRAFANA_VERSION]: 'data-testid TimePicker submit button',\n    },\n    copyTimeRange: {\n      '10.4.0': 'data-testid TimePicker copy button',\n    },\n    pasteTimeRange: {\n      '10.4.0': 'data-testid TimePicker paste button',\n    },\n    calendar: {\n      label: {\n        '10.2.3': 'data-testid Time Range calendar',\n        [MIN_GRAFANA_VERSION]: 'Time Range calendar',\n      },\n      openButton: {\n        '10.2.3': 'data-testid Open time range calendar',\n        [MIN_GRAFANA_VERSION]: 'Open time range calendar',\n      },\n      closeButton: {\n        '10.2.3': 'data-testid Close time range Calendar',\n        [MIN_GRAFANA_VERSION]: 'Close time range Calendar',\n      },\n    },\n    absoluteTimeRangeTitle: {\n      [MIN_GRAFANA_VERSION]: 'data-testid-absolute-time-range-narrow',\n    },\n  },\n  DataSourcePermissions: {\n    form: { '9.5.0': () => 'form[name=\"addPermission\"]' },\n    roleType: {\n      '9.5.0': 'Role to add new permission to',\n    },\n    rolePicker: {\n      '9.5.0': 'Built-in role picker',\n    },\n    permissionLevel: {\n      '12.0.0': 'Permission level',\n      '9.5.0': 'Permission Level',\n    },\n  },\n  DateTimePicker: {\n    input: {\n      '10.2.3': 'data-testid date-time-input',\n    },\n  },\n  DataSource: {\n    TestData: {\n      QueryTab: {\n        scenarioSelectContainer: {\n          [MIN_GRAFANA_VERSION]: 'Test Data Query scenario select container',\n        },\n        scenarioSelect: {\n          [MIN_GRAFANA_VERSION]: 'Test Data Query scenario select',\n        },\n        max: {\n          [MIN_GRAFANA_VERSION]: 'TestData max',\n        },\n        min: {\n          [MIN_GRAFANA_VERSION]: 'TestData min',\n        },\n        noise: {\n          [MIN_GRAFANA_VERSION]: 'TestData noise',\n        },\n        seriesCount: {\n          [MIN_GRAFANA_VERSION]: 'TestData series count',\n        },\n        spread: {\n          [MIN_GRAFANA_VERSION]: 'TestData spread',\n        },\n        startValue: {\n          [MIN_GRAFANA_VERSION]: 'TestData start value',\n        },\n        drop: {\n          [MIN_GRAFANA_VERSION]: 'TestData drop values',\n        },\n      },\n    },\n    DataSourceHttpSettings: {\n      urlInput: {\n        '10.4.0': 'data-testid Datasource HTTP settings url',\n        [MIN_GRAFANA_VERSION]: 'Datasource HTTP settings url',\n      },\n    },\n    Jaeger: {\n      traceIDInput: {\n        [MIN_GRAFANA_VERSION]: 'Trace ID',\n      },\n    },\n    Prometheus: {\n      configPage: {\n        connectionSettings: {\n          [MIN_GRAFANA_VERSION]: 'Data source connection URL', // aria-label in grafana experimental\n        },\n        manageAlerts: {\n          '10.4.0': 'prometheus-alerts-manager', // id for switch component\n        },\n        scrapeInterval: {\n          '10.4.0': 'data-testid scrape interval',\n        },\n        queryTimeout: {\n          '10.4.0': 'data-testid query timeout',\n        },\n        defaultEditor: {\n          '10.4.0': 'data-testid default editor',\n        },\n        disableMetricLookup: {\n          '10.4.0': 'disable-metric-lookup', // id for switch component\n        },\n        prometheusType: {\n          '10.4.0': 'data-testid prometheus type',\n        },\n        prometheusVersion: {\n          '10.4.0': 'data-testid prometheus version',\n        },\n        cacheLevel: {\n          '10.4.0': 'data-testid cache level',\n        },\n        incrementalQuerying: {\n          '10.4.0': 'prometheus-incremental-querying', // id for switch component\n        },\n        queryOverlapWindow: {\n          '10.4.0': 'data-testid query overlap window',\n        },\n        disableRecordingRules: {\n          '10.4.0': 'disable-recording-rules', // id for switch component\n        },\n        customQueryParameters: {\n          '10.4.0': 'data-testid custom query parameters',\n        },\n        httpMethod: {\n          '10.4.0': 'data-testid http method',\n        },\n        exemplarsAddButton: {\n          '10.3.0': 'data-testid Add exemplar config button',\n          [MIN_GRAFANA_VERSION]: 'Add exemplar config button',\n        },\n        internalLinkSwitch: {\n          '10.3.0': 'data-testid Internal link switch',\n          [MIN_GRAFANA_VERSION]: 'Internal link switch',\n        },\n        codeModeMetricNamesSuggestionLimit: {\n          '11.1.0': 'data-testid code mode metric names suggestion limit',\n        },\n      },\n      queryEditor: {\n        explain: {\n          '10.4.0': 'data-testid prometheus explain switch wrapper',\n        },\n        editorToggle: {\n          '10.4.0': 'data-testid QueryEditorModeToggle', // wrapper for toggle\n        },\n        options: {\n          '10.4.0': 'data-testid prometheus options', // wrapper for options group\n        },\n        legend: {\n          '10.4.0': 'data-testid prometheus legend wrapper', // wrapper for multiple compomnents\n        },\n        format: {\n          '10.4.0': 'data-testid prometheus format',\n        },\n        step: {\n          '10.4.0': 'prometheus-step', // id for autosize component\n        },\n        type: {\n          '10.4.0': 'data-testid prometheus type', //wrapper for radio button group\n        },\n        exemplars: {\n          '10.4.0': 'prometheus-exemplars', // id for editor switch component\n        },\n        builder: {\n          // see QueryBuilder below for commented selectors\n          metricSelect: {\n            '10.4.0': 'data-testid metric select',\n          },\n          hints: {\n            '10.4.0': 'data-testid prometheus hints', // wrapper for hints component\n          },\n          metricsExplorer: {\n            '10.4.0': 'data-testid metrics explorer',\n          },\n          queryAdvisor: {\n            '10.4.0': 'data-testid query advisor',\n          },\n        },\n        code: {\n          queryField: {\n            '10.4.0': 'data-testid prometheus query field',\n          },\n          metricsCountInfo: {\n            '11.1.0': 'data-testid metrics count disclaimer',\n          },\n          metricsBrowser: {\n            openButton: {\n              '10.4.0': 'data-testid open metrics browser',\n            },\n            selectMetric: {\n              '10.4.0': 'data-testid select a metric',\n            },\n            seriesLimit: {\n              '10.3.1': 'data-testid series limit',\n            },\n            metricList: {\n              '10.4.0': 'data-testid metric list',\n            },\n            labelNamesFilter: {\n              '10.4.0': 'data-testid label names filter',\n            },\n            labelValuesFilter: {\n              '10.4.0': 'data-testid label values filter',\n            },\n            useQuery: {\n              '10.4.0': 'data-testid use query',\n            },\n            useAsRateQuery: {\n              '10.4.0': 'data-testid use as rate query',\n            },\n            validateSelector: {\n              '10.4.0': 'data-testid validate selector',\n            },\n            clear: {\n              '10.4.0': 'data-testid clear',\n            },\n          },\n        },\n      },\n      exemplarMarker: {\n        '10.3.0': 'data-testid Exemplar marker',\n        [MIN_GRAFANA_VERSION]: 'Exemplar marker',\n      },\n      variableQueryEditor: {\n        queryType: {\n          '10.4.0': 'data-testid query type',\n        },\n        labelnames: {\n          metricRegex: {\n            '10.4.0': 'data-testid label names metric regex',\n          },\n        },\n        labelValues: {\n          labelSelect: {\n            '10.4.0': 'data-testid label values label select',\n          },\n        },\n        metricNames: {\n          metricRegex: {\n            '10.4.0': 'data-testid metric names metric regex',\n          },\n        },\n        varQueryResult: {\n          '10.4.0': 'data-testid variable query result',\n        },\n        seriesQuery: {\n          '10.4.0': 'data-testid prometheus series query',\n        },\n        classicQuery: {\n          '10.4.0': 'data-testid prometheus classic query',\n        },\n      },\n      annotations: {\n        minStep: {\n          '10.4.0': 'prometheus-annotation-min-step', // id for autosize input\n        },\n        title: {\n          '10.4.0': 'data-testid prometheus annotation title',\n        },\n        tags: {\n          '10.4.0': 'data-testid prometheus annotation tags',\n        },\n        text: {\n          '10.4.0': 'data-testid prometheus annotation text',\n        },\n        seriesValueAsTimestamp: {\n          '10.4.0': 'data-testid prometheus annotation series value as timestamp',\n        },\n      },\n    },\n  },\n  Menu: {\n    MenuComponent: {\n      [MIN_GRAFANA_VERSION]: (title: string) => `${title} menu`,\n    },\n    MenuGroup: {\n      [MIN_GRAFANA_VERSION]: (title: string) => `${title} menu group`,\n    },\n    MenuItem: {\n      [MIN_GRAFANA_VERSION]: (title: string) => `${title} menu item`,\n    },\n    SubMenu: {\n      container: {\n        '10.3.0': 'data-testid SubMenu container',\n        [MIN_GRAFANA_VERSION]: 'SubMenu container',\n      },\n      icon: {\n        '10.3.0': 'data-testid SubMenu icon',\n        [MIN_GRAFANA_VERSION]: 'SubMenu icon',\n      },\n    },\n  },\n  Panels: {\n    Panel: {\n      title: {\n        [MIN_GRAFANA_VERSION]: (title: string) => `data-testid Panel header ${title}`,\n      },\n      content: {\n        '11.1.0': 'data-testid panel content',\n      },\n      headerItems: {\n        '10.2.0': (item: string) => `data-testid Panel header item ${item}`,\n      },\n      menuItems: {\n        '9.5.0': (item: string) => `data-testid Panel menu item ${item}`,\n      },\n      menu: {\n        '9.5.0': (title: string) => `data-testid Panel menu ${title}`,\n      },\n      containerByTitle: {\n        [MIN_GRAFANA_VERSION]: (title: string) => `${title} panel`,\n      },\n      headerCornerInfo: {\n        [MIN_GRAFANA_VERSION]: (mode: string) => `Panel header ${mode}`,\n      },\n      status: {\n        '10.2.0': (status: string) => `data-testid Panel status ${status}`,\n        [MIN_GRAFANA_VERSION]: (_: string) => 'Panel status',\n      },\n      loadingBar: {\n        '10.0.0': () => `Panel loading bar`,\n      },\n      HoverWidget: {\n        container: {\n          '10.1.0': 'data-testid hover-header-container',\n          [MIN_GRAFANA_VERSION]: 'hover-header-container',\n        },\n        dragIcon: {\n          '10.0.0': 'data-testid drag-icon',\n        },\n      },\n      PanelDataErrorMessage: {\n        '10.4.0': 'data-testid Panel data error message',\n      },\n    },\n    Visualization: {\n      Graph: {\n        container: {\n          '9.5.0': 'Graph container',\n        },\n        VisualizationTab: {\n          legendSection: {\n            [MIN_GRAFANA_VERSION]: 'Legend section',\n          },\n        },\n        Legend: {\n          legendItemAlias: {\n            [MIN_GRAFANA_VERSION]: (name: string) => `gpl alias ${name}`,\n          },\n          showLegendSwitch: {\n            [MIN_GRAFANA_VERSION]: 'gpl show legend',\n          },\n        },\n        xAxis: {\n          labels: {\n            [MIN_GRAFANA_VERSION]: () => 'div.flot-x-axis > div.flot-tick-label',\n          },\n        },\n      },\n      BarGauge: {\n        valueV2: {\n          [MIN_GRAFANA_VERSION]: 'data-testid Bar gauge value',\n        },\n      },\n      PieChart: {\n        svgSlice: {\n          '10.3.0': 'data testid Pie Chart Slice',\n        },\n      },\n      Text: {\n        container: { [MIN_GRAFANA_VERSION]: () => '.markdown-html' },\n      },\n      Table: {\n        header: {\n          [MIN_GRAFANA_VERSION]: 'table header',\n        },\n        footer: {\n          [MIN_GRAFANA_VERSION]: 'table-footer',\n        },\n        body: {\n          '10.2.0': 'data-testid table body',\n        },\n      },\n    },\n  },\n  VizLegend: {\n    seriesName: {\n      '10.3.0': (name: string) => `data-testid VizLegend series ${name}`,\n    },\n  },\n  Drawer: {\n    General: {\n      title: {\n        [MIN_GRAFANA_VERSION]: (title: string) => `Drawer title ${title}`,\n      },\n      expand: {\n        [MIN_GRAFANA_VERSION]: 'Drawer expand',\n      },\n      contract: {\n        [MIN_GRAFANA_VERSION]: 'Drawer contract',\n      },\n      close: {\n        '10.3.0': 'data-testid Drawer close',\n        [MIN_GRAFANA_VERSION]: 'Drawer close',\n      },\n      rcContentWrapper: { '9.4.0': () => '.rc-drawer-content-wrapper' },\n      subtitle: {\n        '10.4.0': 'data-testid drawer subtitle',\n      },\n    },\n    DashboardSaveDrawer: {\n      saveButton: {\n        '11.1.0': 'data-testid Save dashboard drawer button',\n      },\n      saveAsButton: {\n        '11.1.0': 'data-testid Save as dashboard drawer button',\n      },\n      saveAsTitleInput: {\n        '11.1.0': 'Save dashboard title field',\n      },\n    },\n  },\n  PanelEditor: {\n    General: {\n      content: {\n        '11.1.0': 'data-testid Panel editor content',\n        '8.0.0': 'Panel editor content',\n      },\n    },\n    OptionsPane: {\n      content: {\n        '11.1.0': 'data-testid Panel editor option pane content',\n        [MIN_GRAFANA_VERSION]: 'Panel editor option pane content',\n      },\n      select: {\n        [MIN_GRAFANA_VERSION]: 'Panel editor option pane select',\n      },\n      fieldLabel: {\n        [MIN_GRAFANA_VERSION]: (type: string) => `${type} field property editor`,\n      },\n      fieldInput: {\n        '11.0.0': (title: string) => `data-testid Panel editor option pane field input ${title}`,\n      },\n    },\n    DataPane: {\n      content: {\n        '11.1.0': 'data-testid Panel editor data pane content',\n        [MIN_GRAFANA_VERSION]: 'Panel editor data pane content',\n      },\n    },\n    applyButton: {\n      '9.2.0': 'data-testid Apply changes and go back to dashboard',\n      '9.1.0': 'Apply changes and go back to dashboard',\n      '8.0.0': 'panel editor apply',\n    },\n    toggleVizPicker: {\n      '10.0.0': 'data-testid toggle-viz-picker',\n      '8.0.0': 'toggle-viz-picker',\n    },\n    toggleVizOptions: {\n      '10.1.0': 'data-testid toggle-viz-options',\n      [MIN_GRAFANA_VERSION]: 'toggle-viz-options',\n    },\n    toggleTableView: {\n      '11.1.0': 'data-testid toggle-table-view',\n      [MIN_GRAFANA_VERSION]: 'toggle-table-view',\n    },\n\n    // [Geomap] Map controls\n    showZoomField: {\n      '10.2.0': 'Map controls Show zoom control field property editor',\n    },\n    showAttributionField: {\n      '10.2.0': 'Map controls Show attribution field property editor',\n    },\n    showScaleField: {\n      '10.2.0': 'Map controls Show scale field property editor',\n    },\n    showMeasureField: {\n      '10.2.0': 'Map controls Show measure tools field property editor',\n    },\n    showDebugField: {\n      '10.2.0': 'Map controls Show debug field property editor',\n    },\n\n    measureButton: {\n      '9.2.0': 'show measure tools',\n    },\n  },\n  PanelInspector: {\n    Data: {\n      content: {\n        [MIN_GRAFANA_VERSION]: 'Panel inspector Data content',\n      },\n    },\n    Stats: {\n      content: {\n        [MIN_GRAFANA_VERSION]: 'Panel inspector Stats content',\n      },\n    },\n    Json: {\n      content: {\n        '11.1.0': 'data-testid Panel inspector Json content',\n        [MIN_GRAFANA_VERSION]: 'Panel inspector Json content',\n      },\n    },\n    Query: {\n      content: {\n        [MIN_GRAFANA_VERSION]: 'Panel inspector Query content',\n      },\n      refreshButton: {\n        [MIN_GRAFANA_VERSION]: 'Panel inspector Query refresh button',\n      },\n      jsonObjectKeys: {\n        [MIN_GRAFANA_VERSION]: () => '.json-formatter-key',\n      },\n    },\n  },\n  Tab: {\n    title: {\n      '11.2.0': (title: string) => `data-testid Tab ${title}`,\n    },\n    active: { [MIN_GRAFANA_VERSION]: () => '[class*=\"-activeTabStyle\"]' },\n  },\n  RefreshPicker: {\n    runButtonV2: {\n      [MIN_GRAFANA_VERSION]: 'data-testid RefreshPicker run button',\n    },\n    intervalButtonV2: {\n      [MIN_GRAFANA_VERSION]: 'data-testid RefreshPicker interval button',\n    },\n  },\n  QueryTab: {\n    content: {\n      [MIN_GRAFANA_VERSION]: 'Query editor tab content',\n    },\n    queryInspectorButton: {\n      [MIN_GRAFANA_VERSION]: 'Query inspector button',\n    },\n    queryHistoryButton: {\n      '10.2.0': 'data-testid query-history-button',\n      [MIN_GRAFANA_VERSION]: 'query-history-button',\n    },\n    addQuery: {\n      '10.2.0': 'data-testid query-tab-add-query',\n      [MIN_GRAFANA_VERSION]: 'Query editor add query button',\n    },\n    addQueryFromLibrary: {\n      '11.5.0': 'data-testid query-tab-add-query-from-library',\n    },\n    queryGroupTopSection: {\n      '11.2.0': 'data-testid query group top section',\n    },\n    addExpression: {\n      '11.2.0': 'data-testid query-tab-add-expression',\n    },\n  },\n  QueryHistory: {\n    queryText: {\n      '9.0.0': 'Query text',\n    },\n  },\n  QueryEditorRows: {\n    rows: {\n      [MIN_GRAFANA_VERSION]: 'Query editor row',\n    },\n  },\n  QueryEditorRow: {\n    actionButton: {\n      '10.4.0': (title: string) => `data-testid ${title}`,\n    },\n    title: {\n      [MIN_GRAFANA_VERSION]: (refId: string) => `Query editor row title ${refId}`,\n    },\n    container: {\n      [MIN_GRAFANA_VERSION]: (refId: string) => `Query editor row ${refId}`,\n    },\n  },\n  AlertTab: {\n    content: {\n      '10.2.3': 'data-testid Alert editor tab content',\n      [MIN_GRAFANA_VERSION]: 'Alert editor tab content',\n    },\n  },\n  AlertRules: {\n    groupToggle: {\n      '11.0.0': 'data-testid group-collapse-toggle',\n    },\n    toggle: {\n      '11.0.0': 'data-testid collapse-toggle',\n    },\n    expandedContent: {\n      '11.0.0': 'data-testid expanded-content',\n    },\n    previewButton: {\n      '11.1.0': 'data-testid alert-rule preview-button',\n    },\n    ruleNameField: {\n      '11.1.0': 'data-testid alert-rule name-field',\n    },\n    newFolderButton: {\n      '11.1.0': 'data-testid alert-rule new-folder-button',\n    },\n    newFolderNameField: {\n      '11.1.0': 'data-testid alert-rule name-folder-name-field',\n    },\n    newFolderNameCreateButton: {\n      '11.1.0': 'data-testid alert-rule name-folder-name-create-button',\n    },\n    newEvaluationGroupButton: {\n      '11.1.0': 'data-testid alert-rule new-evaluation-group-button',\n    },\n    newEvaluationGroupName: {\n      '11.1.0': 'data-testid alert-rule new-evaluation-group-name',\n    },\n    newEvaluationGroupInterval: {\n      '11.1.0': 'data-testid alert-rule new-evaluation-group-interval',\n    },\n    newEvaluationGroupCreate: {\n      '11.1.0': 'data-testid alert-rule new-evaluation-group-create-button',\n    },\n    step: {\n      '11.5.0': (stepNo: string) => `data-testid alert-rule step-${stepNo}`,\n    },\n    stepAdvancedModeSwitch: {\n      '11.5.0': (stepNo: string) => `data-testid advanced-mode-switch step-${stepNo}`,\n    },\n  },\n  Alert: {\n    alertV2: {\n      [MIN_GRAFANA_VERSION]: (severity: string) => `data-testid Alert ${severity}`,\n    },\n  },\n  TransformTab: {\n    content: {\n      '10.1.0': 'data-testid Transform editor tab content',\n      [MIN_GRAFANA_VERSION]: 'Transform editor tab content',\n    },\n    newTransform: {\n      '10.1.0': (name: string) => `data-testid New transform ${name}`,\n    },\n    transformationEditor: {\n      '10.1.0': (name: string) => `data-testid Transformation editor ${name}`,\n    },\n    transformationEditorDebugger: {\n      '10.1.0': (name: string) => `data-testid Transformation editor debugger ${name}`,\n    },\n  },\n  Transforms: {\n    card: {\n      '10.1.0': (name: string) => `data-testid New transform ${name}`,\n    },\n    disableTransformationButton: {\n      '10.4.0': 'data-testid Disable transformation button',\n    },\n    Reduce: {\n      modeLabel: {\n        '10.2.3': 'data-testid Transform mode label',\n        [MIN_GRAFANA_VERSION]: 'Transform mode label',\n      },\n      calculationsLabel: {\n        '10.2.3': 'data-testid Transform calculations label',\n        [MIN_GRAFANA_VERSION]: 'Transform calculations label',\n      },\n    },\n    SpatialOperations: {\n      actionLabel: {\n        '9.1.2': 'root Action field property editor',\n      },\n      locationLabel: {\n        '10.2.0': 'root Location Mode field property editor',\n      },\n      location: {\n        autoOption: {\n          '9.1.2': 'Auto location option',\n        },\n        coords: {\n          option: {\n            '9.1.2': 'Coords location option',\n          },\n          latitudeFieldLabel: {\n            '9.1.2': 'root Latitude field field property editor',\n          },\n          longitudeFieldLabel: {\n            '9.1.2': 'root Longitude field field property editor',\n          },\n        },\n        geohash: {\n          option: {\n            '9.1.2': 'Geohash location option',\n          },\n          geohashFieldLabel: {\n            '9.1.2': 'root Geohash field field property editor',\n          },\n        },\n        lookup: {\n          option: {\n            '9.1.2': 'Lookup location option',\n          },\n          lookupFieldLabel: {\n            '9.1.2': 'root Lookup field field property editor',\n          },\n          gazetteerFieldLabel: {\n            '9.1.2': 'root Gazetteer field property editor',\n          },\n        },\n      },\n    },\n    searchInput: {\n      '10.2.3': 'data-testid search transformations',\n      [MIN_GRAFANA_VERSION]: 'search transformations',\n    },\n    noTransformationsMessage: {\n      '10.2.3': 'data-testid no transformations message',\n    },\n    addTransformationButton: {\n      '10.1.0': 'data-testid add transformation button',\n      [MIN_GRAFANA_VERSION]: 'add transformation button',\n    },\n    removeAllTransformationsButton: {\n      '10.4.0': 'data-testid remove all transformations button',\n    },\n  },\n  NavBar: {\n    Configuration: {\n      button: {\n        '9.5.0': 'Configuration',\n      },\n    },\n    Toggle: {\n      button: {\n        '10.2.3': 'data-testid Toggle menu',\n        [MIN_GRAFANA_VERSION]: 'Toggle menu',\n      },\n    },\n    Reporting: {\n      button: {\n        '9.5.0': 'Reporting',\n      },\n    },\n  },\n  NavMenu: {\n    Menu: {\n      '10.2.3': 'data-testid navigation mega-menu',\n    },\n    item: {\n      '9.5.0': 'data-testid Nav menu item',\n    },\n  },\n  NavToolbar: {\n    container: {\n      '9.4.0': 'data-testid Nav toolbar',\n    },\n    commandPaletteTrigger: {\n      '11.5.0': 'data-testid Command palette trigger',\n    },\n    shareDashboard: {\n      '11.1.0': 'data-testid Share dashboard',\n    },\n    markAsFavorite: {\n      '11.1.0': 'data-testid Mark as favorite',\n    },\n    editDashboard: {\n      editButton: {\n        '11.1.0': 'data-testid Edit dashboard button',\n      },\n      saveButton: {\n        '11.1.0': 'data-testid Save dashboard button',\n      },\n      exitButton: {\n        '11.1.0': 'data-testid Exit edit mode button',\n      },\n      settingsButton: {\n        '11.1.0': 'data-testid Dashboard settings',\n      },\n      addRowButton: {\n        '11.1.0': 'data-testid Add row button',\n      },\n      addLibraryPanelButton: {\n        '11.1.0': 'data-testid Add a panel from the panel library button',\n      },\n      addVisualizationButton: {\n        '11.1.0': 'data-testid Add new visualization menu item',\n      },\n      pastePanelButton: {\n        '11.1.0': 'data-testid Paste panel button',\n      },\n      discardChangesButton: {\n        '11.1.0': 'data-testid Discard changes button',\n      },\n      discardLibraryPanelButton: {\n        '11.1.0': 'data-testid Discard library panel button',\n      },\n      unlinkLibraryPanelButton: {\n        '11.1.0': 'data-testid Unlink library panel button',\n      },\n      saveLibraryPanelButton: {\n        '11.1.0': 'data-testid Save library panel button',\n      },\n      backToDashboardButton: {\n        '11.1.0': 'data-testid Back to dashboard button',\n      },\n    },\n  },\n\n  PageToolbar: {\n    container: { [MIN_GRAFANA_VERSION]: () => '.page-toolbar' },\n    item: {\n      [MIN_GRAFANA_VERSION]: (tooltip: string) => `${tooltip}`,\n    },\n    itemButton: {\n      '9.5.0': (title: string) => `data-testid ${title}`,\n    },\n  },\n  QueryEditorToolbarItem: {\n    button: {\n      [MIN_GRAFANA_VERSION]: (title: string) => `QueryEditor toolbar item button ${title}`,\n    },\n  },\n  BackButton: {\n    backArrow: {\n      '10.3.0': 'data-testid Go Back',\n      [MIN_GRAFANA_VERSION]: 'Go Back',\n    },\n  },\n  OptionsGroup: {\n    group: {\n      '11.1.0': (title?: string) => (title ? `data-testid Options group ${title}` : 'data-testid Options group'),\n      [MIN_GRAFANA_VERSION]: (title?: string) => (title ? `Options group ${title}` : 'Options group'),\n    },\n    toggle: {\n      '11.1.0': (title?: string) =>\n        title ? `data-testid Options group ${title} toggle` : 'data-testid Options group toggle',\n      [MIN_GRAFANA_VERSION]: (title?: string) => (title ? `Options group ${title} toggle` : 'Options group toggle'),\n    },\n  },\n  PluginVisualization: {\n    item: {\n      [MIN_GRAFANA_VERSION]: (title: string) => `Plugin visualization item ${title}`,\n    },\n    current: {\n      [MIN_GRAFANA_VERSION]: () => '[class*=\"-currentVisualizationItem\"]',\n    },\n  },\n  Select: {\n    menu: {\n      '11.5.0': 'data-testid Select menu',\n      [MIN_GRAFANA_VERSION]: 'Select options menu',\n    },\n    option: {\n      '11.1.0': 'data-testid Select option',\n      [MIN_GRAFANA_VERSION]: 'Select option',\n    },\n    toggleAllOptions: {\n      '11.3.0': 'data-testid toggle all options',\n    },\n    input: {\n      [MIN_GRAFANA_VERSION]: () => 'input[id*=\"time-options-input\"]',\n    },\n    singleValue: {\n      [MIN_GRAFANA_VERSION]: () => 'div[class*=\"-singleValue\"]',\n    },\n  },\n  FieldConfigEditor: {\n    content: {\n      [MIN_GRAFANA_VERSION]: 'Field config editor content',\n    },\n  },\n  OverridesConfigEditor: {\n    content: {\n      [MIN_GRAFANA_VERSION]: 'Field overrides editor content',\n    },\n  },\n  FolderPicker: {\n    containerV2: {\n      [MIN_GRAFANA_VERSION]: 'data-testid Folder picker select container',\n    },\n    input: {\n      '10.4.0': 'data-testid folder-picker-input',\n    },\n  },\n  ReadonlyFolderPicker: {\n    container: {\n      [MIN_GRAFANA_VERSION]: 'data-testid Readonly folder picker select container',\n    },\n  },\n  DataSourcePicker: {\n    container: {\n      '10.0.0': 'data-testid Data source picker select container',\n      '8.0.0': 'Data source picker select container',\n    },\n    inputV2: {\n      '10.1.0': 'data-testid Select a data source',\n      [MIN_GRAFANA_VERSION]: 'Select a data source',\n    },\n    dataSourceList: {\n      '10.4.0': 'data-testid Data source list dropdown',\n    },\n    advancedModal: {\n      dataSourceList: {\n        '10.4.0': 'data-testid Data source list',\n      },\n      builtInDataSourceList: {\n        '10.4.0': 'data-testid Built in data source list',\n      },\n    },\n  },\n  TimeZonePicker: {\n    containerV2: {\n      [MIN_GRAFANA_VERSION]: 'data-testid Time zone picker select container',\n    },\n    changeTimeSettingsButton: {\n      '11.0.0': 'data-testid Time zone picker Change time settings button',\n    },\n  },\n  WeekStartPicker: {\n    containerV2: {\n      [MIN_GRAFANA_VERSION]: 'data-testid Choose starting day of the week',\n    },\n    placeholder: {\n      [MIN_GRAFANA_VERSION]: 'Choose starting day of the week',\n    },\n  },\n  TraceViewer: {\n    spanBar: {\n      '9.0.0': 'data-testid SpanBar--wrapper',\n    },\n  },\n  QueryField: {\n    container: {\n      '10.3.0': 'data-testid Query field',\n      [MIN_GRAFANA_VERSION]: 'Query field',\n    },\n  },\n  QueryBuilder: {\n    queryPatterns: {\n      '10.3.0': 'data-testid Query patterns',\n      [MIN_GRAFANA_VERSION]: 'Query patterns',\n    },\n    labelSelect: {\n      '10.3.0': 'data-testid Select label',\n      [MIN_GRAFANA_VERSION]: 'Select label',\n    },\n    inputSelect: {\n      '11.1.0': 'data-testid Select label-input',\n    },\n    valueSelect: {\n      '10.3.0': 'data-testid Select value',\n      [MIN_GRAFANA_VERSION]: 'Select value',\n    },\n    matchOperatorSelect: {\n      '10.3.0': 'data-testid Select match operator',\n      [MIN_GRAFANA_VERSION]: 'Select match operator',\n    },\n  },\n  ValuePicker: {\n    button: {\n      '10.3.0': (name: string) => `data-testid Value picker button ${name}`,\n    },\n    select: {\n      '10.3.0': (name: string) => `data-testid Value picker select ${name}`,\n    },\n  },\n  Search: {\n    sectionV2: {\n      [MIN_GRAFANA_VERSION]: 'data-testid Search section',\n    },\n    itemsV2: {\n      [MIN_GRAFANA_VERSION]: 'data-testid Search items',\n    },\n    cards: {\n      [MIN_GRAFANA_VERSION]: 'data-testid Search cards',\n    },\n    collapseFolder: {\n      [MIN_GRAFANA_VERSION]: (sectionId: string) => `data-testid Collapse folder ${sectionId}`,\n    },\n    expandFolder: {\n      [MIN_GRAFANA_VERSION]: (sectionId: string) => `data-testid Expand folder ${sectionId}`,\n    },\n    dashboardItem: {\n      [MIN_GRAFANA_VERSION]: (item: string) => `data-testid Dashboard search item ${item}`,\n    },\n    dashboardCard: {\n      [MIN_GRAFANA_VERSION]: (item: string) => `data-testid Search card ${item}`,\n    },\n    folderHeader: {\n      '9.3.0': (folderName: string) => `data-testid Folder header ${folderName}`,\n    },\n    folderContent: {\n      '9.3.0': (folderName: string) => `data-testid Folder content ${folderName}`,\n    },\n    dashboardItems: {\n      [MIN_GRAFANA_VERSION]: 'data-testid Dashboard search item',\n    },\n  },\n  DashboardLinks: {\n    container: {\n      [MIN_GRAFANA_VERSION]: 'data-testid Dashboard link container',\n    },\n    dropDown: {\n      [MIN_GRAFANA_VERSION]: 'data-testid Dashboard link dropdown',\n    },\n    link: {\n      [MIN_GRAFANA_VERSION]: 'data-testid Dashboard link',\n    },\n  },\n  LoadingIndicator: {\n    icon: {\n      '10.4.0': 'data-testid Loading indicator',\n      [MIN_GRAFANA_VERSION]: 'Loading indicator',\n    },\n  },\n  CallToActionCard: {\n    buttonV2: {\n      [MIN_GRAFANA_VERSION]: (name: string) => `data-testid Call to action button ${name}`,\n    },\n  },\n  DataLinksContextMenu: {\n    singleLink: {\n      '10.3.0': 'data-testid Data link',\n      [MIN_GRAFANA_VERSION]: 'Data link',\n    },\n  },\n  CodeEditor: {\n    container: {\n      '10.2.3': 'data-testid Code editor container',\n      [MIN_GRAFANA_VERSION]: 'Code editor container',\n    },\n  },\n  ReactMonacoEditor: {\n    editorLazy: {\n      '11.1.0': 'data-testid ReactMonacoEditor editorLazy',\n    },\n  },\n  DashboardImportPage: {\n    textarea: {\n      [MIN_GRAFANA_VERSION]: 'data-testid-import-dashboard-textarea',\n    },\n    submit: {\n      [MIN_GRAFANA_VERSION]: 'data-testid-load-dashboard',\n    },\n  },\n  ImportDashboardForm: {\n    name: {\n      [MIN_GRAFANA_VERSION]: 'data-testid-import-dashboard-title',\n    },\n    submit: {\n      [MIN_GRAFANA_VERSION]: 'data-testid-import-dashboard-submit',\n    },\n  },\n  PanelAlertTabContent: {\n    content: {\n      '10.2.3': 'data-testid Unified alert editor tab content',\n      [MIN_GRAFANA_VERSION]: 'Unified alert editor tab content',\n    },\n  },\n  VisualizationPreview: {\n    card: {\n      [MIN_GRAFANA_VERSION]: (name: string) => `data-testid suggestion-${name}`,\n    },\n  },\n  ColorSwatch: {\n    name: {\n      [MIN_GRAFANA_VERSION]: 'data-testid-colorswatch',\n    },\n  },\n  DashboardRow: {\n    title: {\n      [MIN_GRAFANA_VERSION]: (title: string) => `data-testid dashboard-row-title-${title}`,\n    },\n  },\n  UserProfile: {\n    profileSaveButton: {\n      [MIN_GRAFANA_VERSION]: 'data-testid-user-profile-save',\n    },\n    preferencesSaveButton: {\n      [MIN_GRAFANA_VERSION]: 'data-testid-shared-prefs-save',\n    },\n    orgsTable: {\n      [MIN_GRAFANA_VERSION]: 'data-testid-user-orgs-table',\n    },\n    sessionsTable: {\n      [MIN_GRAFANA_VERSION]: 'data-testid-user-sessions-table',\n    },\n    extensionPointTabs: {\n      '10.2.3': 'data-testid-extension-point-tabs',\n    },\n    extensionPointTab: {\n      '10.2.3': (tabId: string) => `data-testid-extension-point-tab-${tabId}`,\n    },\n  },\n  FileUpload: {\n    inputField: {\n      '9.0.0': 'data-testid-file-upload-input-field',\n    },\n    fileNameSpan: {\n      '9.0.0': 'data-testid-file-upload-file-name',\n    },\n  },\n  DebugOverlay: {\n    wrapper: {\n      '9.2.0': 'debug-overlay',\n    },\n  },\n  OrgRolePicker: {\n    input: {\n      '9.5.0': 'Role',\n    },\n  },\n  AnalyticsToolbarButton: {\n    button: {\n      '9.5.0': 'Dashboard insights',\n    },\n  },\n  Variables: {\n    variableOption: {\n      '9.5.0': 'data-testid variable-option',\n    },\n    variableLinkWrapper: {\n      '11.1.1': 'data-testid variable-link-wrapper',\n    },\n  },\n  Annotations: {\n    annotationsTypeInput: {\n      '11.1.0': 'data-testid annotations-type-input',\n      [MIN_GRAFANA_VERSION]: 'annotations-type-input',\n    },\n    annotationsChoosePanelInput: {\n      '11.1.0': 'data-testid choose-panels-input',\n      [MIN_GRAFANA_VERSION]: 'choose-panels-input',\n    },\n    editor: {\n      testButton: {\n        '11.0.0': 'data-testid annotations-test-button',\n      },\n      resultContainer: {\n        '11.0.0': 'data-testid annotations-query-result-container',\n      },\n    },\n  },\n  Tooltip: {\n    container: {\n      '10.2.0': 'data-testid tooltip',\n    },\n  },\n  ReturnToPrevious: {\n    buttonGroup: {\n      '11.0.0': 'data-testid dismissable button group',\n    },\n    backButton: {\n      '11.0.0': 'data-testid back',\n    },\n    dismissButton: {\n      '11.0.0': 'data-testid dismiss',\n    },\n  },\n  SQLQueryEditor: {\n    selectColumn: {\n      '11.0.0': 'data-testid select-column',\n    },\n    selectColumnInput: { '11.0.0': 'data-testid select-column-input' },\n    selectFunctionParameter: { '11.0.0': (name: string) => `data-testid select-function-parameter-${name}` },\n    selectAggregation: {\n      '11.0.0': 'data-testid select-aggregation',\n    },\n    selectAggregationInput: { '11.0.0': 'data-testid select-aggregation-input' },\n    selectAlias: {\n      '11.0.0': 'data-testid select-alias',\n    },\n    selectAliasInput: { '11.0.0': 'data-testid select-alias-input' },\n    selectInputParameter: { '11.0.0': 'data-testid select-input-parameter' },\n    filterConjunction: {\n      '11.0.0': 'data-testid filter-conjunction',\n    },\n    filterField: {\n      '11.0.0': 'data-testid filter-field',\n    },\n    filterOperator: {\n      '11.0.0': 'data-testid filter-operator',\n    },\n    headerTableSelector: {\n      '11.0.0': 'data-testid header-table-selector',\n    },\n    headerFilterSwitch: {\n      '11.0.0': 'data-testid header-filter-switch',\n    },\n    headerGroupSwitch: {\n      '11.0.0': 'data-testid header-group-switch',\n    },\n    headerOrderSwitch: {\n      '11.0.0': 'data-testid header-order-switch',\n    },\n    headerPreviewSwitch: {\n      '11.0.0': 'data-testid header-preview-switch',\n    },\n  },\n  EntityNotFound: {\n    container: {\n      '11.2.0': 'data-testid entity-not-found',\n    },\n  },\n  Portal: {\n    container: {\n      '11.5.0': 'data-testid portal-container',\n    },\n  },\n} satisfies VersionedSelectorGroup;\n\nexport type VersionedComponents = typeof versionedComponents;\n","import { resolveSelectors } from '../resolver';\nimport { E2ESelectors } from '../types';\n\nimport { versionedComponents, VersionedComponents } from './components';\nimport { versionedPages, VersionedPages } from './pages';\n\nconst Pages = resolveSelectors(versionedPages);\nconst Components = resolveSelectors(versionedComponents);\nconst selectors = { pages: Pages, components: Components };\n\n/**\n * Exposes Pages, Component selectors and E2ESelectors type in package for easy use in e2e tests and in production code\n */\nexport {\n  Pages,\n  Components,\n  selectors,\n  versionedComponents,\n  versionedPages,\n  resolveSelectors,\n  type VersionedPages,\n  type VersionedComponents,\n  type E2ESelectors,\n};\n","import { VersionedSelectorGroup } from '../types';\n\nimport { MIN_GRAFANA_VERSION } from './constants';\n\n/**\n * Selectors grouped/defined in Pages\n */\nexport const versionedPages = {\n  Alerting: {\n    AddAlertRule: {\n      url: {\n        '10.1.0': '/alerting/new/alerting',\n        [MIN_GRAFANA_VERSION]: '/alerting/new',\n      },\n    },\n    EditAlertRule: {\n      url: {\n        [MIN_GRAFANA_VERSION]: (alertRuleUid: string) => `alerting/${alertRuleUid}/edit`,\n      },\n    },\n  },\n  Login: {\n    url: {\n      [MIN_GRAFANA_VERSION]: '/login',\n    },\n    username: {\n      '10.2.3': 'data-testid Username input field',\n      [MIN_GRAFANA_VERSION]: 'Username input field',\n    },\n    password: {\n      '10.2.3': 'data-testid Password input field',\n      [MIN_GRAFANA_VERSION]: 'Password input field',\n    },\n    submit: {\n      '10.2.3': 'data-testid Login button',\n      [MIN_GRAFANA_VERSION]: 'Login button',\n    },\n    skip: {\n      '10.2.3': 'data-testid Skip change password button',\n    },\n  },\n  PasswordlessLogin: {\n    url: {\n      [MIN_GRAFANA_VERSION]: '/login/passwordless/authenticate',\n    },\n    email: {\n      '10.2.3': 'data-testid Email input field',\n      [MIN_GRAFANA_VERSION]: 'Email input field',\n    },\n    submit: {\n      '10.2.3': 'data-testid PasswordlessLogin button',\n      [MIN_GRAFANA_VERSION]: 'PasswordlessLogin button',\n    },\n  },\n  Home: {\n    url: {\n      [MIN_GRAFANA_VERSION]: '/',\n    },\n  },\n  DataSource: {\n    name: {\n      '10.3.0': 'data-testid Data source settings page name input field',\n      [MIN_GRAFANA_VERSION]: 'Data source settings page name input field',\n    },\n    delete: {\n      [MIN_GRAFANA_VERSION]: 'Data source settings page Delete button',\n    },\n    readOnly: {\n      '10.3.0': 'data-testid Data source settings page read only message',\n      [MIN_GRAFANA_VERSION]: 'Data source settings page read only message',\n    },\n    saveAndTest: {\n      '10.0.0': 'data-testid Data source settings page Save and Test button',\n      [MIN_GRAFANA_VERSION]: 'Data source settings page Save and Test button',\n    },\n    alert: {\n      '10.3.0': 'data-testid Data source settings page Alert',\n      [MIN_GRAFANA_VERSION]: 'Data source settings page Alert',\n    },\n  },\n  DataSources: {\n    url: {\n      [MIN_GRAFANA_VERSION]: '/datasources',\n    },\n    dataSources: {\n      [MIN_GRAFANA_VERSION]: (dataSourceName: string) => `Data source list item ${dataSourceName}`,\n    },\n  },\n  EditDataSource: {\n    url: {\n      '9.5.0': (dataSourceUid: string) => `/datasources/edit/${dataSourceUid}`,\n    },\n    settings: {\n      '9.5.0': 'Datasource settings page basic settings',\n    },\n  },\n  AddDataSource: {\n    url: {\n      [MIN_GRAFANA_VERSION]: '/datasources/new',\n    },\n    dataSourcePluginsV2: {\n      '9.3.1': (pluginName: string) => `Add new data source ${pluginName}`,\n      [MIN_GRAFANA_VERSION]: (pluginName: string) => `Data source plugin item ${pluginName}`,\n    },\n  },\n  ConfirmModal: {\n    delete: {\n      '10.0.0': 'data-testid Confirm Modal Danger Button',\n      [MIN_GRAFANA_VERSION]: 'Confirm Modal Danger Button',\n    },\n  },\n  AddDashboard: {\n    url: {\n      [MIN_GRAFANA_VERSION]: '/dashboard/new',\n    },\n    itemButton: {\n      '9.5.0': (title: string) => `data-testid ${title}`,\n    },\n    addNewPanel: {\n      '11.1.0': 'data-testid Add new panel',\n      '8.0.0': 'Add new panel',\n      [MIN_GRAFANA_VERSION]: 'Add new panel',\n    },\n    itemButtonAddViz: {\n      [MIN_GRAFANA_VERSION]: 'Add new visualization menu item',\n    },\n    addNewRow: {\n      '11.1.0': 'data-testid Add new row',\n      [MIN_GRAFANA_VERSION]: 'Add new row',\n    },\n    addNewPanelLibrary: {\n      '11.1.0': 'data-testid Add new panel from panel library',\n      [MIN_GRAFANA_VERSION]: 'Add new panel from panel library',\n    },\n    Settings: {\n      Annotations: {\n        List: {\n          url: {\n            [MIN_GRAFANA_VERSION]: '/dashboard/new?orgId=1&editview=annotations',\n          },\n        },\n        Edit: {\n          url: {\n            [MIN_GRAFANA_VERSION]: (annotationIndex: string) =>\n              `/dashboard/new?editview=annotations&editIndex=${annotationIndex}`,\n          },\n        },\n      },\n      Variables: {\n        List: {\n          url: {\n            '11.3.0': '/dashboard/new?orgId=1&editview=variables',\n            [MIN_GRAFANA_VERSION]: '/dashboard/new?orgId=1&editview=templating',\n          },\n        },\n        Edit: {\n          url: {\n            '11.3.0': (editIndex: string) => `/dashboard/new?orgId=1&editview=variables&editIndex=${editIndex}`,\n            [MIN_GRAFANA_VERSION]: (editIndex: string) =>\n              `/dashboard/new?orgId=1&editview=templating&editIndex=${editIndex}`,\n          },\n        },\n      },\n    },\n  },\n  Dashboard: {\n    url: {\n      [MIN_GRAFANA_VERSION]: (uid: string) => `/d/${uid}`,\n    },\n    DashNav: {\n      nav: {\n        [MIN_GRAFANA_VERSION]: 'Dashboard navigation',\n      },\n      navV2: {\n        [MIN_GRAFANA_VERSION]: 'data-testid Dashboard navigation',\n      },\n      publicDashboardTag: {\n        '9.1.0': 'data-testid public dashboard tag',\n      },\n      shareButton: {\n        '10.4.0': 'data-testid share-button',\n      },\n      scrollContainer: {\n        '11.1.0': 'data-testid Dashboard canvas scroll container',\n      },\n      newShareButton: {\n        container: {\n          '11.1.0': 'data-testid new share button',\n        },\n        shareLink: {\n          '11.1.0': 'data-testid new share link-button',\n        },\n        arrowMenu: {\n          '11.1.0': 'data-testid new share button arrow menu',\n        },\n        menu: {\n          container: {\n            '11.1.0': 'data-testid new share button menu',\n          },\n          shareInternally: {\n            '11.1.0': 'data-testid new share button share internally',\n          },\n          shareExternally: {\n            '11.1.1': 'data-testid new share button share externally',\n          },\n          shareSnapshot: {\n            '11.2.0': 'data-testid new share button share snapshot',\n          },\n        },\n      },\n      NewExportButton: {\n        container: {\n          '11.2.0': 'data-testid new export button',\n        },\n        arrowMenu: {\n          '11.2.0': 'data-testid new export button arrow menu',\n        },\n        Menu: {\n          container: {\n            '11.2.0': 'data-testid new export button menu',\n          },\n          exportAsJson: {\n            '11.2.0': 'data-testid new export button export as json',\n          },\n        },\n      },\n      playlistControls: {\n        prev: {\n          '11.0.0': 'data-testid playlist previous dashboard button',\n        },\n        stop: {\n          '11.0.0': 'data-testid playlist stop dashboard button',\n        },\n        next: {\n          '11.0.0': 'data-testid playlist next dashboard button',\n        },\n      },\n    },\n    Controls: {\n      '11.1.0': 'data-testid dashboard controls',\n    },\n    SubMenu: {\n      submenu: {\n        [MIN_GRAFANA_VERSION]: 'Dashboard submenu',\n      },\n      submenuItem: {\n        [MIN_GRAFANA_VERSION]: 'data-testid template variable',\n      },\n      submenuItemLabels: {\n        [MIN_GRAFANA_VERSION]: (item: string) => `data-testid Dashboard template variables submenu Label ${item}`,\n      },\n      submenuItemValueDropDownValueLinkTexts: {\n        [MIN_GRAFANA_VERSION]: (item: string) =>\n          `data-testid Dashboard template variables Variable Value DropDown value link text ${item}`,\n      },\n      submenuItemValueDropDownDropDown: {\n        [MIN_GRAFANA_VERSION]: 'Variable options',\n      },\n      submenuItemValueDropDownOptionTexts: {\n        [MIN_GRAFANA_VERSION]: (item: string) =>\n          `data-testid Dashboard template variables Variable Value DropDown option text ${item}`,\n      },\n      Annotations: {\n        annotationsWrapper: {\n          '10.0.0': 'data-testid annotation-wrapper',\n        },\n        annotationLabel: {\n          '10.0.0': (label: string) => `data-testid Dashboard annotations submenu Label ${label}`,\n        },\n        annotationToggle: {\n          '10.0.0': (label: string) => `data-testid Dashboard annotations submenu Toggle ${label}`,\n        },\n      },\n    },\n    Settings: {\n      Actions: {\n        close: {\n          '9.5.0': 'data-testid dashboard-settings-close',\n        },\n      },\n      General: {\n        deleteDashBoard: {\n          '11.1.0': 'data-testid Dashboard settings page delete dashboard button',\n        },\n        sectionItems: {\n          [MIN_GRAFANA_VERSION]: (item: string) => `Dashboard settings section item ${item}`,\n        },\n        saveDashBoard: {\n          [MIN_GRAFANA_VERSION]: 'Dashboard settings aside actions Save button',\n        },\n        saveAsDashBoard: {\n          [MIN_GRAFANA_VERSION]: 'Dashboard settings aside actions Save As button',\n        },\n        title: {\n          '11.2.0': 'General',\n        },\n      },\n      Annotations: {\n        Edit: {\n          urlParams: {\n            [MIN_GRAFANA_VERSION]: (annotationIndex: string) => `editview=annotations&editIndex=${annotationIndex}`,\n          },\n        },\n        List: {\n          url: {\n            [MIN_GRAFANA_VERSION]: (dashboardUid: string) => `/d/${dashboardUid}?editview=annotations`,\n          },\n          addAnnotationCTAV2: {\n            [MIN_GRAFANA_VERSION]: 'data-testid Call to action button Add annotation query',\n          },\n          annotations: {\n            '10.4.0': 'data-testid list-annotations',\n          },\n        },\n        Settings: {\n          name: {\n            '11.1.0': 'data-testid Annotations settings name input',\n            [MIN_GRAFANA_VERSION]: 'Annotations settings name input',\n          },\n        },\n        NewAnnotation: {\n          panelFilterSelect: {\n            '10.0.0': 'data-testid annotations-panel-filter',\n          },\n          showInLabel: {\n            '11.1.0': 'data-testid show-in-label',\n          },\n          previewInDashboard: {\n            '10.0.0': 'data-testid annotations-preview',\n          },\n          delete: {\n            '10.4.0': 'data-testid annotations-delete',\n          },\n          apply: {\n            '10.4.0': 'data-testid annotations-apply',\n          },\n          enable: {\n            '10.4.0': 'data-testid annotation-enable',\n          },\n          hide: {\n            '10.4.0': 'data-testid annotation-hide',\n          },\n        },\n      },\n      Variables: {\n        List: {\n          url: {\n            '11.3.0': (dashboardUid: string) => `/d/${dashboardUid}?editview=variables`,\n            [MIN_GRAFANA_VERSION]: (dashboardUid: string) => `/d/${dashboardUid}?editview=templating`,\n          },\n          addVariableCTAV2: {\n            [MIN_GRAFANA_VERSION]: 'data-testid Call to action button Add variable',\n          },\n          newButton: {\n            [MIN_GRAFANA_VERSION]: 'Variable editor New variable button',\n          },\n          table: {\n            [MIN_GRAFANA_VERSION]: 'Variable editor Table',\n          },\n          tableRowNameFields: {\n            [MIN_GRAFANA_VERSION]: (variableName: string) => `Variable editor Table Name field ${variableName}`,\n          },\n          tableRowDefinitionFields: {\n            '10.1.0': (variableName: string) => `Variable editor Table Definition field ${variableName}`,\n          },\n          tableRowArrowUpButtons: {\n            [MIN_GRAFANA_VERSION]: (variableName: string) => `Variable editor Table ArrowUp button ${variableName}`,\n          },\n          tableRowArrowDownButtons: {\n            [MIN_GRAFANA_VERSION]: (variableName: string) => `Variable editor Table ArrowDown button ${variableName}`,\n          },\n          tableRowDuplicateButtons: {\n            [MIN_GRAFANA_VERSION]: (variableName: string) => `Variable editor Table Duplicate button ${variableName}`,\n          },\n          tableRowRemoveButtons: {\n            [MIN_GRAFANA_VERSION]: (variableName: string) => `Variable editor Table Remove button ${variableName}`,\n          },\n        },\n        Edit: {\n          urlParams: {\n            '11.3.0': (editIndex: string) => `editview=variables&editIndex=${editIndex}`,\n            [MIN_GRAFANA_VERSION]: (editIndex: string) => `editview=templating&editIndex=${editIndex}`,\n          },\n          General: {\n            headerLink: {\n              [MIN_GRAFANA_VERSION]: 'Variable editor Header link',\n            },\n            modeLabelNew: {\n              [MIN_GRAFANA_VERSION]: 'Variable editor Header mode New',\n            },\n            /**\n             * @deprecated\n             */\n            modeLabelEdit: {\n              [MIN_GRAFANA_VERSION]: 'Variable editor Header mode Edit',\n            },\n            generalNameInput: {\n              [MIN_GRAFANA_VERSION]: 'Variable editor Form Name field',\n            },\n            generalNameInputV2: {\n              [MIN_GRAFANA_VERSION]: 'data-testid Variable editor Form Name field',\n            },\n            generalTypeSelect: {\n              [MIN_GRAFANA_VERSION]: 'Variable editor Form Type select',\n            },\n            generalTypeSelectV2: {\n              [MIN_GRAFANA_VERSION]: 'data-testid Variable editor Form Type select',\n            },\n            generalLabelInput: {\n              [MIN_GRAFANA_VERSION]: 'Variable editor Form Label field',\n            },\n            generalLabelInputV2: {\n              [MIN_GRAFANA_VERSION]: 'data-testid Variable editor Form Label field',\n            },\n            generalHideSelect: {\n              [MIN_GRAFANA_VERSION]: 'Variable editor Form Hide select',\n            },\n            generalHideSelectV2: {\n              [MIN_GRAFANA_VERSION]: 'data-testid Variable editor Form Hide select',\n            },\n            selectionOptionsAllowCustomValueSwitch: {\n              [MIN_GRAFANA_VERSION]: 'data-testid Variable editor Form Allow Custom Value switch',\n            },\n            selectionOptionsMultiSwitch: {\n              '10.4.0': 'data-testid Variable editor Form Multi switch',\n              [MIN_GRAFANA_VERSION]: 'Variable editor Form Multi switch',\n            },\n            selectionOptionsIncludeAllSwitch: {\n              '10.4.0': 'data-testid Variable editor Form IncludeAll switch',\n              [MIN_GRAFANA_VERSION]: 'Variable editor Form IncludeAll switch',\n            },\n            selectionOptionsCustomAllInput: {\n              '10.4.0': 'data-testid Variable editor Form IncludeAll field',\n              [MIN_GRAFANA_VERSION]: 'Variable editor Form IncludeAll field',\n            },\n            previewOfValuesOption: {\n              '10.4.0': 'data-testid Variable editor Preview of Values option',\n              [MIN_GRAFANA_VERSION]: 'Variable editor Preview of Values option',\n            },\n            submitButton: {\n              '10.4.0': 'data-testid Variable editor Run Query button',\n              [MIN_GRAFANA_VERSION]: 'Variable editor Submit button',\n            },\n            applyButton: {\n              '9.3.0': 'data-testid Variable editor Apply button',\n            },\n          },\n          QueryVariable: {\n            queryOptionsDataSourceSelect: {\n              '10.4.0': 'data-testid Select a data source',\n              '10.0.0': 'data-testid Data source picker select container',\n              [MIN_GRAFANA_VERSION]: 'Data source picker select container',\n            },\n            queryOptionsRefreshSelect: {\n              [MIN_GRAFANA_VERSION]: 'Variable editor Form Query Refresh select',\n            },\n            queryOptionsRefreshSelectV2: {\n              [MIN_GRAFANA_VERSION]: 'data-testid Variable editor Form Query Refresh select',\n            },\n            queryOptionsRegExInput: {\n              [MIN_GRAFANA_VERSION]: 'Variable editor Form Query RegEx field',\n            },\n            queryOptionsRegExInputV2: {\n              [MIN_GRAFANA_VERSION]: 'data-testid Variable editor Form Query RegEx field',\n            },\n            queryOptionsSortSelect: {\n              [MIN_GRAFANA_VERSION]: 'Variable editor Form Query Sort select',\n            },\n            queryOptionsSortSelectV2: {\n              [MIN_GRAFANA_VERSION]: 'data-testid Variable editor Form Query Sort select',\n            },\n            queryOptionsQueryInput: {\n              '10.4.0': 'data-testid Variable editor Form Default Variable Query Editor textarea',\n            },\n            valueGroupsTagsEnabledSwitch: {\n              [MIN_GRAFANA_VERSION]: 'Variable editor Form Query UseTags switch',\n            },\n            valueGroupsTagsTagsQueryInput: {\n              [MIN_GRAFANA_VERSION]: 'Variable editor Form Query TagsQuery field',\n            },\n            valueGroupsTagsTagsValuesQueryInput: {\n              [MIN_GRAFANA_VERSION]: 'Variable editor Form Query TagsValuesQuery field',\n            },\n          },\n          ConstantVariable: {\n            constantOptionsQueryInput: {\n              [MIN_GRAFANA_VERSION]: 'Variable editor Form Constant Query field',\n            },\n            constantOptionsQueryInputV2: {\n              [MIN_GRAFANA_VERSION]: 'data-testid Variable editor Form Constant Query field',\n            },\n          },\n          DatasourceVariable: {\n            datasourceSelect: {\n              [MIN_GRAFANA_VERSION]: 'data-testid datasource variable datasource type',\n            },\n          },\n          TextBoxVariable: {\n            textBoxOptionsQueryInput: {\n              [MIN_GRAFANA_VERSION]: 'Variable editor Form TextBox Query field',\n            },\n            textBoxOptionsQueryInputV2: {\n              [MIN_GRAFANA_VERSION]: 'data-testid Variable editor Form TextBox Query field',\n            },\n          },\n          CustomVariable: {\n            customValueInput: {\n              [MIN_GRAFANA_VERSION]: 'data-testid custom-variable-input',\n            },\n          },\n          IntervalVariable: {\n            intervalsValueInput: {\n              [MIN_GRAFANA_VERSION]: 'data-testid interval variable intervals input',\n            },\n            autoEnabledCheckbox: {\n              '10.4.0': 'data-testid interval variable auto value checkbox',\n            },\n            stepCountIntervalSelect: {\n              '10.4.0': 'data-testid interval variable step count input',\n            },\n            minIntervalInput: {\n              '10.4.0': 'data-testid interval variable mininum interval input',\n            },\n          },\n          GroupByVariable: {\n            dataSourceSelect: {\n              '10.4.0': 'data-testid Select a data source',\n            },\n            infoText: {\n              '10.4.0': 'data-testid group by variable info text',\n            },\n            modeToggle: {\n              '10.4.0': 'data-testid group by variable mode toggle',\n            },\n          },\n          AdHocFiltersVariable: {\n            datasourceSelect: {\n              '10.4.0': 'data-testid Select a data source',\n            },\n            infoText: {\n              '10.4.0': 'data-testid ad-hoc filters variable info text',\n            },\n            modeToggle: {\n              '11.0.0': 'data-testid ad-hoc filters variable mode toggle',\n            },\n          },\n        },\n      },\n    },\n    Annotations: {\n      marker: {\n        '10.0.0': 'data-testid annotation-marker',\n      },\n    },\n    Rows: {\n      Repeated: {\n        ConfigSection: {\n          warningMessage: {\n            '10.2.0': 'data-testid Repeated rows warning message',\n          },\n        },\n      },\n    },\n  },\n  Dashboards: {\n    url: {\n      [MIN_GRAFANA_VERSION]: '/dashboards',\n    },\n    dashboards: {\n      '10.2.0': (title: string) => `Dashboard search item ${title}`,\n    },\n    toggleView: {\n      [MIN_GRAFANA_VERSION]: 'data-testid radio-button',\n    },\n  },\n  SaveDashboardAsModal: {\n    newName: {\n      '10.2.0': 'Save dashboard title field',\n    },\n    save: {\n      '10.2.0': 'Save dashboard button',\n    },\n  },\n  SaveDashboardModal: {\n    save: {\n      '10.2.0': 'Dashboard settings Save Dashboard Modal Save button',\n    },\n    saveVariables: {\n      '10.2.0': 'Dashboard settings Save Dashboard Modal Save variables checkbox',\n    },\n    saveTimerange: {\n      '10.2.0': 'Dashboard settings Save Dashboard Modal Save timerange checkbox',\n    },\n    saveRefresh: {\n      '11.1.0': 'Dashboard settings Save Dashboard Modal Save refresh checkbox',\n    },\n  },\n  SharePanelModal: {\n    linkToRenderedImage: {\n      [MIN_GRAFANA_VERSION]: 'Link to rendered image',\n    },\n  },\n  ShareDashboardModal: {\n    PublicDashboard: {\n      WillBePublicCheckbox: {\n        '9.1.0': 'data-testid public dashboard will be public checkbox',\n      },\n      LimitedDSCheckbox: {\n        '9.1.0': 'data-testid public dashboard limited datasources checkbox',\n      },\n      CostIncreaseCheckbox: {\n        '9.1.0': 'data-testid public dashboard cost may increase checkbox',\n      },\n      PauseSwitch: {\n        '9.5.0': 'data-testid public dashboard pause switch',\n      },\n      EnableAnnotationsSwitch: {\n        '9.3.0': 'data-testid public dashboard on off switch for annotations',\n      },\n      CreateButton: {\n        '9.5.0': 'data-testid public dashboard create button',\n      },\n      DeleteButton: {\n        '9.3.0': 'data-testid public dashboard delete button',\n      },\n      CopyUrlInput: {\n        '9.1.0': 'data-testid public dashboard copy url input',\n      },\n      CopyUrlButton: {\n        '9.1.0': 'data-testid public dashboard copy url button',\n      },\n      SettingsDropdown: {\n        '10.1.0': 'data-testid public dashboard settings dropdown',\n      },\n      TemplateVariablesWarningAlert: {\n        '9.1.0': 'data-testid public dashboard disabled template variables alert',\n      },\n      UnsupportedDataSourcesWarningAlert: {\n        '9.5.0': 'data-testid public dashboard unsupported data sources alert',\n      },\n      NoUpsertPermissionsWarningAlert: {\n        '9.5.0': 'data-testid public dashboard no upsert permissions alert',\n      },\n      EnableTimeRangeSwitch: {\n        '9.4.0': 'data-testid public dashboard on off switch for time range',\n      },\n      EmailSharingConfiguration: {\n        Container: {\n          '9.5.0': 'data-testid email sharing config container',\n        },\n        ShareType: {\n          '9.5.0': 'data-testid public dashboard share type',\n        },\n        EmailSharingInput: {\n          '9.5.0': 'data-testid public dashboard email sharing input',\n        },\n        EmailSharingInviteButton: {\n          '9.5.0': 'data-testid public dashboard email sharing invite button',\n        },\n        EmailSharingList: {\n          '9.5.0': 'data-testid public dashboard email sharing list',\n        },\n        DeleteEmail: {\n          '9.5.0': 'data-testid public dashboard delete email button',\n        },\n        ReshareLink: {\n          '9.5.0': 'data-testid public dashboard reshare link button',\n        },\n      },\n    },\n    SnapshotScene: {\n      url: {\n        '11.1.0': (key: string) => `/dashboard/snapshot/${key}`,\n      },\n      PublishSnapshot: {\n        '11.1.0': 'data-testid publish snapshot button',\n      },\n      CopyUrlButton: {\n        '11.1.0': 'data-testid snapshot copy url button',\n      },\n      CopyUrlInput: {\n        '11.1.0': 'data-testid snapshot copy url input',\n      },\n    },\n  },\n  ShareDashboardDrawer: {\n    ShareInternally: {\n      container: {\n        '11.3.0': 'data-testid share internally drawer container',\n      },\n      lockTimeRangeSwitch: {\n        '11.3.0': 'data-testid share internally lock time range switch',\n      },\n      shortenUrlSwitch: {\n        '11.3.0': 'data-testid share internally shorten url switch',\n      },\n      copyUrlButton: {\n        '11.3.0': 'data-testid share internally copy url button',\n      },\n      SharePanel: {\n        preview: {\n          '11.5.0': 'data-testid share panel internally image generation preview',\n        },\n        widthInput: {\n          '11.5.0': 'data-testid share panel internally width input',\n        },\n        heightInput: {\n          '11.5.0': 'data-testid share panel internally height input',\n        },\n        scaleFactorInput: {\n          '11.5.0': 'data-testid share panel internally scale factor input',\n        },\n        generateImageButton: {\n          '11.5.0': 'data-testid share panel internally generate image button',\n        },\n        downloadImageButton: {\n          '11.5.0': 'data-testid share panel internally download image button',\n        },\n      },\n    },\n    ShareExternally: {\n      container: {\n        '11.3.0': 'data-testid share externally drawer container',\n      },\n      publicAlert: {\n        '11.3.0': 'data-testid public share alert',\n      },\n      emailSharingAlert: {\n        '11.3.0': 'data-testid email share alert',\n      },\n      shareTypeSelect: {\n        '11.3.0': 'data-testid share externally share type select',\n      },\n      Creation: {\n        PublicShare: {\n          createButton: {\n            '11.3.0': 'data-testid public share dashboard create button',\n          },\n          cancelButton: {\n            '11.3.0': 'data-testid public share dashboard cancel button',\n          },\n        },\n        EmailShare: {\n          createButton: {\n            '11.3.0': 'data-testid email share dashboard create button',\n          },\n          cancelButton: {\n            '11.3.0': 'data-testid email share dashboard cancel button',\n          },\n        },\n        willBePublicCheckbox: {\n          '11.3.0': 'data-testid share dashboard will be public checkbox',\n        },\n      },\n      Configuration: {\n        enableTimeRangeSwitch: {\n          '11.3.0': 'data-testid share externally enable time range switch',\n        },\n        enableAnnotationsSwitch: {\n          '11.3.0': 'data-testid share externally enable annotations switch',\n        },\n        copyUrlButton: {\n          '11.3.0': 'data-testid share externally copy url button',\n        },\n        revokeAccessButton: {\n          '11.3.0': 'data-testid share externally revoke access button',\n        },\n        toggleAccessButton: {\n          '11.3.0': 'data-testid share externally pause or resume access button',\n        },\n      },\n    },\n    ShareSnapshot: {\n      url: {\n        '11.3.0': (key: string) => `/dashboard/snapshot/${key}`,\n      },\n      container: {\n        '11.3.0': 'data-testid share snapshot drawer container',\n      },\n      publishSnapshot: {\n        '11.3.0': 'data-testid share snapshot publish button',\n      },\n      copyUrlButton: {\n        '11.3.0': 'data-testid share snapshot copy url button',\n      },\n    },\n  },\n  ExportDashboardDrawer: {\n    ExportAsJson: {\n      container: {\n        '11.3.0': 'data-testid export as json drawer container',\n      },\n      codeEditor: {\n        '11.3.0': 'data-testid export as json code editor',\n      },\n      exportExternallyToggle: {\n        '11.3.0': 'data-testid export as json externally switch',\n      },\n      saveToFileButton: {\n        '11.3.0': 'data-testid export as json save to file button',\n      },\n      copyToClipboardButton: {\n        '11.3.0': 'data-testid export as json copy to clipboard button',\n      },\n      cancelButton: {\n        '11.3.0': 'data-testid export as json cancel button',\n      },\n    },\n  },\n  PublicDashboard: {\n    page: {\n      '9.5.0': 'public-dashboard-page',\n    },\n    NotAvailable: {\n      container: {\n        '9.5.0': 'public-dashboard-not-available',\n      },\n      title: {\n        '9.5.0': 'public-dashboard-title',\n      },\n      pausedDescription: {\n        '9.5.0': 'public-dashboard-paused-description',\n      },\n    },\n    footer: {\n      '11.0.0': 'public-dashboard-footer',\n    },\n  },\n  PublicDashboardScene: {\n    loadingPage: {\n      '11.0.0': 'public-dashboard-scene-loading-page',\n    },\n    page: {\n      '11.0.0': 'public-dashboard-scene-page',\n    },\n    controls: {\n      '11.0.0': 'public-dashboard-controls',\n    },\n  },\n  RequestViewAccess: {\n    form: {\n      '9.5.0': 'request-view-access-form',\n    },\n    recipientInput: {\n      '9.5.0': 'request-view-access-recipient-input',\n    },\n    submitButton: {\n      '9.5.0': 'request-view-access-submit-button',\n    },\n  },\n  PublicDashboardConfirmAccess: {\n    submitButton: {\n      '10.2.0': 'data-testid confirm-access-submit-button',\n    },\n  },\n  Explore: {\n    url: {\n      [MIN_GRAFANA_VERSION]: '/explore',\n    },\n    General: {\n      container: {\n        [MIN_GRAFANA_VERSION]: 'data-testid Explore',\n      },\n      graph: {\n        [MIN_GRAFANA_VERSION]: 'Explore Graph',\n      },\n      table: {\n        [MIN_GRAFANA_VERSION]: 'Explore Table',\n      },\n      scrollView: {\n        '9.0.0': 'data-testid explorer scroll view',\n      },\n      addFromQueryLibrary: {\n        '11.5.0': 'data-testid explore add from query library button',\n      },\n    },\n    QueryHistory: {\n      container: {\n        '11.1.0': 'data-testid QueryHistory',\n      },\n    },\n  },\n  SoloPanel: {\n    url: {\n      [MIN_GRAFANA_VERSION]: (page: string) => `/d-solo/${page}`,\n    },\n  },\n  PluginsList: {\n    page: {\n      [MIN_GRAFANA_VERSION]: 'Plugins list page',\n    },\n    list: {\n      [MIN_GRAFANA_VERSION]: 'Plugins list',\n    },\n    listItem: {\n      [MIN_GRAFANA_VERSION]: 'Plugins list item',\n    },\n    signatureErrorNotice: {\n      '10.3.0': 'data-testid Unsigned plugins notice',\n      [MIN_GRAFANA_VERSION]: 'Unsigned plugins notice',\n    },\n  },\n  PluginPage: {\n    page: {\n      [MIN_GRAFANA_VERSION]: 'Plugin page',\n    },\n    signatureInfo: {\n      '10.3.0': 'data-testid Plugin signature info',\n      [MIN_GRAFANA_VERSION]: 'Plugin signature info',\n    },\n    disabledInfo: {\n      '10.3.0': 'data-testid Plugin disabled info',\n      [MIN_GRAFANA_VERSION]: 'Plugin disabled info',\n    },\n  },\n  PlaylistForm: {\n    name: {\n      [MIN_GRAFANA_VERSION]: 'Playlist name',\n    },\n    interval: {\n      [MIN_GRAFANA_VERSION]: 'Playlist interval',\n    },\n    itemDelete: {\n      '10.2.0': 'data-testid playlist-form-delete-item',\n    },\n  },\n  BrowseDashboards: {\n    table: {\n      body: {\n        '10.2.0': 'data-testid browse-dashboards-table',\n      },\n      row: {\n        '10.2.0': (name: string) => `data-testid browse dashboards row ${name}`,\n      },\n      checkbox: {\n        '10.0.0': (uid: string) => `data-testid ${uid} checkbox`,\n      },\n    },\n    NewFolderForm: {\n      form: {\n        '10.2.0': 'data-testid new folder form',\n      },\n      nameInput: {\n        '10.2.0': 'data-testid new-folder-name-input',\n      },\n      createButton: {\n        '10.2.0': 'data-testid new-folder-create-button',\n      },\n    },\n  },\n  SearchDashboards: {\n    table: {\n      '10.2.0': 'Search results table',\n    },\n  },\n  Search: {\n    url: {\n      '9.3.0': '/?search=openn',\n    },\n    FolderView: {\n      url: {\n        '9.3.0': '/?search=open&layout=folders',\n      },\n    },\n  },\n  PublicDashboards: {\n    ListItem: {\n      linkButton: {\n        '9.3.0': 'public-dashboard-link-button',\n      },\n      configButton: {\n        '9.3.0': 'public-dashboard-configuration-button',\n      },\n      trashcanButton: {\n        '9.3.0': 'public-dashboard-remove-button',\n      },\n      pauseSwitch: {\n        '10.1.0': 'data-testid public dashboard pause switch',\n      },\n    },\n  },\n  UserListPage: {\n    tabs: {\n      allUsers: {\n        '10.0.0': 'data-testid all-users-tab',\n      },\n      orgUsers: {\n        '10.0.0': 'data-testid org-users-tab',\n      },\n      anonUserDevices: {\n        '10.2.3': 'data-testid anon-user-devices-tab',\n      },\n      publicDashboardsUsers: {\n        '10.0.0': 'data-testid public-dashboards-users-tab',\n      },\n      users: {\n        '10.0.0': 'data-testid users-tab',\n      },\n    },\n    org: {\n      url: {\n        '10.2.0': '/admin/users',\n        '9.5.0': '/org/users',\n      },\n    },\n    admin: {\n      url: {\n        '9.5.0': '/admin/users',\n      },\n    },\n    publicDashboards: {\n      container: {\n        '11.1.0': 'data-testid public-dashboards-users-list',\n      },\n    },\n    UserListAdminPage: {\n      container: {\n        '10.0.0': 'data-testid user-list-admin-page',\n      },\n    },\n    UsersListPage: {\n      container: {\n        '10.0.0': 'data-testid users-list-page',\n      },\n    },\n    UserAnonListPage: {\n      container: {\n        '10.4.0': 'data-testid user-anon-list-page',\n      },\n    },\n    UsersListPublicDashboardsPage: {\n      container: {\n        '10.0.0': 'data-testid users-list-public-dashboards-page',\n      },\n      DashboardsListModal: {\n        listItem: {\n          '10.0.0': (uid: string) => `data-testid dashboards-list-item-${uid}`,\n        },\n      },\n    },\n  },\n  ProfilePage: {\n    url: {\n      '10.2.0': '/profile',\n    },\n  },\n  Plugin: {\n    url: {\n      [MIN_GRAFANA_VERSION]: (pluginId: string) => `/plugins/${pluginId}`,\n    },\n  },\n  MigrateToCloud: {\n    url: {\n      '11.2.0': '/admin/migrate-to-cloud',\n    },\n  },\n} satisfies VersionedSelectorGroup;\n\nexport type VersionedPages = typeof versionedPages;\n","import { css } from '@emotion/css';\nimport { useRef, useEffect } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Icon, Modal, useStyles2 } from '@grafana/ui';\n\ntype ConfirmModalProps = {\n  isOpen: boolean;\n  onCancel?: () => void;\n  onDiscard?: () => void;\n  onCopy?: () => void;\n};\nexport function ConfirmModal({ isOpen, onCancel, onDiscard, onCopy }: ConfirmModalProps) {\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const styles = useStyles2(getStyles);\n\n  // Moved from grafana/ui\n  useEffect(() => {\n    // for some reason autoFocus property did no work on this button, but this does\n    if (isOpen) {\n      buttonRef.current?.focus();\n    }\n  }, [isOpen]);\n\n  return (\n    <Modal\n      title={\n        <div className={styles.modalHeaderTitle}>\n          <Icon name=\"exclamation-triangle\" size=\"lg\" />\n          <span className={styles.titleText}>Warning</span>\n        </div>\n      }\n      onDismiss={onCancel}\n      isOpen={isOpen}\n    >\n      <p>\n        Builder mode does not display changes made in code. The query builder will display the last changes you made in\n        builder mode.\n      </p>\n      <p>Do you want to copy your code to the clipboard?</p>\n      <Modal.ButtonRow>\n        <Button type=\"button\" variant=\"secondary\" onClick={onCancel} fill=\"outline\">\n          Cancel\n        </Button>\n        <Button variant=\"destructive\" type=\"button\" onClick={onDiscard} ref={buttonRef}>\n          Discard code and switch\n        </Button>\n        <Button variant=\"primary\" onClick={onCopy}>\n          Copy code and switch\n        </Button>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  titleText: css({\n    paddingLeft: theme.spacing(2),\n  }),\n  modalHeaderTitle: css({\n    fontSize: theme.typography.size.lg,\n    float: 'left',\n    paddingTop: theme.spacing(1),\n    margin: theme.spacing(0, 2),\n  }),\n});\n","import { useEffect } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { DB, ResourceSelectorProps, SQLDialect, toOption } from '../types';\n\nimport { isSqlDatasourceDatabaseSelectionFeatureFlagEnabled } from './QueryEditorFeatureFlag.utils';\n\nexport interface DatasetSelectorProps extends ResourceSelectorProps {\n  db: DB;\n  dataset: string | undefined;\n  preconfiguredDataset: string;\n  dialect: SQLDialect;\n  onChange: (v: SelectableValue) => void;\n  inputId?: string | undefined;\n}\n\nexport const DatasetSelector = ({\n  dataset,\n  db,\n  dialect,\n  onChange,\n  inputId,\n  preconfiguredDataset,\n}: DatasetSelectorProps) => {\n  /*\n    The behavior of this component - for MSSQL and MySQL datasources - is based on whether the user chose to create a datasource\n    with or without a default database (preconfiguredDataset). If the user configured a default database, this selector\n    should only allow that single preconfigured database option to be selected. If the user chose to NOT assign/configure a default database,\n    then the user should be able to use this component to choose between multiple databases available to the datasource.\n  */\n  // `hasPreconfigCondition` is true if either 1) the sql datasource has a preconfigured default database,\n  // OR if 2) the datasource is Postgres. In either case the only option available to the user is the preconfigured database.\n  const hasPreconfigCondition = !!preconfiguredDataset || dialect === 'postgres';\n\n  const state = useAsync(async () => {\n    if (isSqlDatasourceDatabaseSelectionFeatureFlagEnabled()) {\n      // If a default database is already configured for a MSSQL or MySQL data source, OR the data source is Postgres, no need to fetch other databases.\n      if (hasPreconfigCondition) {\n        // Set the current database to the preconfigured database.\n        onChange(toOption(preconfiguredDataset));\n        return [toOption(preconfiguredDataset)];\n      }\n    }\n\n    // If there is no preconfigured database, but there is a selected dataset, set the current database to the selected dataset.\n    if (dataset) {\n      onChange(toOption(dataset));\n    }\n\n    // Otherwise, fetch all databases available to the datasource.\n    const datasets = await db.datasets();\n    return datasets.map(toOption);\n  }, []);\n\n  useEffect(() => {\n    if (!isSqlDatasourceDatabaseSelectionFeatureFlagEnabled()) {\n      // Set default dataset when values are fetched\n      if (!dataset) {\n        if (state.value && state.value[0]) {\n          onChange(state.value[0]);\n        }\n      } else {\n        if (state.value && state.value.find((v) => v.value === dataset) === undefined) {\n          // if value is set and newly fetched values does not contain selected value\n          if (state.value.length > 0) {\n            onChange(state.value[0]);\n          }\n        }\n      }\n    }\n  }, [state.value, onChange, dataset]);\n\n  return (\n    <Select\n      aria-label=\"Dataset selector\"\n      inputId={inputId}\n      value={dataset}\n      options={state.value}\n      onChange={onChange}\n      disabled={state.loading}\n      isLoading={state.loading}\n      menuShouldPortal={true}\n    />\n  );\n};\n","import { useAsync } from 'react-use';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Select } from '@grafana/ui';\n\nimport { DB, ResourceSelectorProps } from '../types';\n\nexport interface TableSelectorProps extends ResourceSelectorProps {\n  db: DB;\n  table: string | undefined;\n  dataset: string | undefined;\n  onChange: (v: SelectableValue) => void;\n  inputId?: string | undefined;\n}\n\nexport const TableSelector = ({ db, dataset, table, className, onChange, inputId }: TableSelectorProps) => {\n  const state = useAsync(async () => {\n    // No need to attempt to fetch tables for an unknown dataset.\n    if (!dataset) {\n      return [];\n    }\n\n    const tables = await db.tables(dataset);\n    return tables.map(toOption);\n  }, [dataset]);\n\n  return (\n    <Select\n      className={className}\n      disabled={state.loading}\n      aria-label=\"Table selector\"\n      inputId={inputId}\n      data-testid={selectors.components.SQLQueryEditor.headerTableSelector}\n      value={table}\n      options={state.value}\n      onChange={onChange}\n      isLoading={state.loading}\n      menuShouldPortal={true}\n      placeholder={state.loading ? 'Loading tables' : 'Select table'}\n    />\n  );\n};\n","import { useCallback, useId, useState } from 'react';\nimport { useCopyToClipboard } from 'react-use';\n\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorField, EditorHeader, EditorMode, EditorRow, FlexItem, InlineSelect } from '@grafana/plugin-ui';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, InlineSwitch, RadioButtonGroup, Tooltip, Space } from '@grafana/ui';\n\nimport { QueryWithDefaults } from '../defaults';\nimport { SQLQuery, QueryFormat, QueryRowFilter, QUERY_FORMAT_OPTIONS, DB, SQLDialect } from '../types';\n\nimport { ConfirmModal } from './ConfirmModal';\nimport { DatasetSelector } from './DatasetSelector';\nimport { isSqlDatasourceDatabaseSelectionFeatureFlagEnabled } from './QueryEditorFeatureFlag.utils';\nimport { TableSelector } from './TableSelector';\n\nexport interface QueryHeaderProps {\n  db: DB;\n  dialect: SQLDialect;\n  isQueryRunnable: boolean;\n  onChange: (query: SQLQuery) => void;\n  onQueryRowChange: (queryRowFilter: QueryRowFilter) => void;\n  onRunQuery: () => void;\n  preconfiguredDataset: string;\n  query: QueryWithDefaults;\n  queryRowFilter: QueryRowFilter;\n}\n\nconst editorModes = [\n  { label: 'Builder', value: EditorMode.Builder },\n  { label: 'Code', value: EditorMode.Code },\n];\n\nexport function QueryHeader({\n  db,\n  dialect,\n  isQueryRunnable,\n  onChange,\n  onQueryRowChange,\n  onRunQuery,\n  preconfiguredDataset,\n  query,\n  queryRowFilter,\n}: QueryHeaderProps) {\n  const { editorMode } = query;\n  const [_, copyToClipboard] = useCopyToClipboard();\n  const [showConfirm, setShowConfirm] = useState(false);\n  const toRawSql = db.toRawSql;\n\n  const htmlId = useId();\n\n  const onEditorModeChange = useCallback(\n    (newEditorMode: EditorMode) => {\n      if (newEditorMode === EditorMode.Code) {\n        reportInteraction('grafana_sql_editor_mode_changed', {\n          datasource: query.datasource?.type,\n          selectedEditorMode: EditorMode.Code,\n        });\n      }\n\n      if (editorMode === EditorMode.Code) {\n        setShowConfirm(true);\n        return;\n      }\n      onChange({ ...query, editorMode: newEditorMode });\n    },\n    [editorMode, onChange, query]\n  );\n\n  const onFormatChange = (e: SelectableValue) => {\n    const next = { ...query, format: e.value !== undefined ? e.value : QueryFormat.Table };\n\n    reportInteraction('grafana_sql_format_changed', {\n      datasource: query.datasource?.type,\n      selectedFormat: next.format,\n    });\n    onChange(next);\n  };\n\n  const onDatasetChange = (e: SelectableValue) => {\n    if (e.value === query.dataset) {\n      return;\n    }\n\n    const next = {\n      ...query,\n      dataset: e.value,\n      table: undefined,\n      sql: undefined,\n      rawSql: '',\n    };\n\n    onChange(next);\n  };\n\n  const onTableChange = (e: SelectableValue) => {\n    if (e.value === query.table) {\n      return;\n    }\n\n    const next: SQLQuery = {\n      ...query,\n      table: e.value,\n      sql: undefined,\n      rawSql: '',\n    };\n\n    onChange(next);\n  };\n\n  const datasetDropdownIsAvailable = () => {\n    if (dialect === 'influx') {\n      return false;\n    }\n    // If the feature flag is DISABLED, && the datasource is Postgres (`dialect = 'postgres`),\n    // we want to hide the dropdown - as per previous behavior.\n    if (!isSqlDatasourceDatabaseSelectionFeatureFlagEnabled() && dialect === 'postgres') {\n      return false;\n    }\n\n    return true;\n  };\n\n  return (\n    <>\n      <EditorHeader>\n        <InlineSelect\n          label=\"Format\"\n          value={query.format}\n          placeholder=\"Select format\"\n          menuShouldPortal\n          onChange={onFormatChange}\n          options={QUERY_FORMAT_OPTIONS}\n        />\n\n        {editorMode === EditorMode.Builder && (\n          <>\n            <InlineSwitch\n              id={`sql-filter-${htmlId}`}\n              label=\"Filter\"\n              data-testid={selectors.components.SQLQueryEditor.headerFilterSwitch}\n              transparent={true}\n              showLabel={true}\n              value={queryRowFilter.filter}\n              onChange={(ev) => {\n                if (!(ev.target instanceof HTMLInputElement)) {\n                  return;\n                }\n\n                reportInteraction('grafana_sql_filter_toggled', {\n                  datasource: query.datasource?.type,\n                  displayed: ev.target.checked,\n                });\n\n                onQueryRowChange({ ...queryRowFilter, filter: ev.target.checked });\n              }}\n            />\n\n            <InlineSwitch\n              id={`sql-group-${htmlId}`}\n              label=\"Group\"\n              data-testid={selectors.components.SQLQueryEditor.headerGroupSwitch}\n              transparent={true}\n              showLabel={true}\n              value={queryRowFilter.group}\n              onChange={(ev) => {\n                if (!(ev.target instanceof HTMLInputElement)) {\n                  return;\n                }\n\n                reportInteraction('grafana_sql_group_toggled', {\n                  datasource: query.datasource?.type,\n                  displayed: ev.target.checked,\n                });\n\n                onQueryRowChange({ ...queryRowFilter, group: ev.target.checked });\n              }}\n            />\n\n            <InlineSwitch\n              id={`sql-order-${htmlId}`}\n              label=\"Order\"\n              data-testid={selectors.components.SQLQueryEditor.headerOrderSwitch}\n              transparent={true}\n              showLabel={true}\n              value={queryRowFilter.order}\n              onChange={(ev) => {\n                if (!(ev.target instanceof HTMLInputElement)) {\n                  return;\n                }\n\n                reportInteraction('grafana_sql_order_toggled', {\n                  datasource: query.datasource?.type,\n                  displayed: ev.target.checked,\n                });\n\n                onQueryRowChange({ ...queryRowFilter, order: ev.target.checked });\n              }}\n            />\n\n            <InlineSwitch\n              id={`sql-preview-${htmlId}`}\n              label=\"Preview\"\n              data-testid={selectors.components.SQLQueryEditor.headerPreviewSwitch}\n              transparent={true}\n              showLabel={true}\n              value={queryRowFilter.preview}\n              onChange={(ev) => {\n                if (!(ev.target instanceof HTMLInputElement)) {\n                  return;\n                }\n\n                reportInteraction('grafana_sql_preview_toggled', {\n                  datasource: query.datasource?.type,\n                  displayed: ev.target.checked,\n                });\n\n                onQueryRowChange({ ...queryRowFilter, preview: ev.target.checked });\n              }}\n            />\n          </>\n        )}\n\n        <FlexItem grow={1} />\n\n        {isQueryRunnable ? (\n          <Button icon=\"play\" variant=\"primary\" size=\"sm\" onClick={() => onRunQuery()}>\n            Run query\n          </Button>\n        ) : (\n          <Tooltip\n            theme=\"error\"\n            content={\n              <>\n                Your query is invalid. Check below for details. <br />\n                However, you can still run this query.\n              </>\n            }\n            placement=\"top\"\n          >\n            <Button icon=\"exclamation-triangle\" variant=\"secondary\" size=\"sm\" onClick={() => onRunQuery()}>\n              Run query\n            </Button>\n          </Tooltip>\n        )}\n\n        <RadioButtonGroup options={editorModes} size=\"sm\" value={editorMode} onChange={onEditorModeChange} />\n\n        <ConfirmModal\n          isOpen={showConfirm}\n          onCopy={() => {\n            reportInteraction('grafana_sql_editor_mode_changed', {\n              datasource: query.datasource?.type,\n              selectedEditorMode: EditorMode.Builder,\n              type: 'copy',\n            });\n\n            setShowConfirm(false);\n            copyToClipboard(query.rawSql!);\n            onChange({\n              ...query,\n              rawSql: toRawSql(query),\n              editorMode: EditorMode.Builder,\n            });\n          }}\n          onDiscard={() => {\n            reportInteraction('grafana_sql_editor_mode_changed', {\n              datasource: query.datasource?.type,\n              selectedEditorMode: EditorMode.Builder,\n              type: 'discard',\n            });\n\n            setShowConfirm(false);\n            onChange({\n              ...query,\n              rawSql: toRawSql(query),\n              editorMode: EditorMode.Builder,\n            });\n          }}\n          onCancel={() => {\n            reportInteraction('grafana_sql_editor_mode_changed', {\n              datasource: query.datasource?.type,\n              selectedEditorMode: EditorMode.Builder,\n              type: 'cancel',\n            });\n\n            setShowConfirm(false);\n          }}\n        />\n      </EditorHeader>\n\n      {editorMode === EditorMode.Builder && (\n        <>\n          <Space v={0.5} />\n          <EditorRow>\n            {datasetDropdownIsAvailable() && (\n              <EditorField label=\"Dataset\" width={25}>\n                <DatasetSelector\n                  db={db}\n                  inputId={`sql-dataset-${htmlId}`}\n                  dataset={query.dataset}\n                  dialect={dialect}\n                  preconfiguredDataset={preconfiguredDataset}\n                  onChange={onDatasetChange}\n                />\n              </EditorField>\n            )}\n            <EditorField label=\"Table\" width={25}>\n              <TableSelector\n                db={db}\n                inputId={`sql-tableselect-${htmlId}`}\n                dataset={query.dataset || preconfiguredDataset}\n                table={query.table}\n                onChange={onTableChange}\n              />\n            </EditorField>\n          </EditorRow>\n        </>\n      )}\n    </>\n  );\n}\n","import { useCallback, useEffect, useRef } from 'react';\nimport * as React from 'react';\n\nimport { LanguageDefinition, SQLEditor } from '@grafana/plugin-ui';\n\nimport { SQLQuery } from '../../types';\n\ntype Props = {\n  query: SQLQuery;\n  onChange: (value: SQLQuery, processQuery: boolean) => void;\n  children?: (props: { formatQuery: () => void }) => React.ReactNode;\n  width?: number;\n  height?: number;\n  editorLanguageDefinition: LanguageDefinition;\n};\n\nexport function QueryEditorRaw({ children, onChange, query, width, height, editorLanguageDefinition }: Props) {\n  // We need to pass query via ref to SQLEditor as onChange is executed via monacoEditor.onDidChangeModelContent callback, not onChange property\n  const queryRef = useRef<SQLQuery>(query);\n  useEffect(() => {\n    queryRef.current = query;\n  }, [query]);\n\n  const onRawQueryChange = useCallback(\n    (rawSql: string, processQuery: boolean) => {\n      const newQuery = {\n        ...queryRef.current,\n        rawQuery: true,\n        rawSql,\n      };\n      onChange(newQuery, processQuery);\n    },\n    [onChange]\n  );\n\n  return (\n    <SQLEditor\n      width={width}\n      height={height}\n      query={query.rawSql!}\n      onChange={onRawQueryChange}\n      language={editorLanguageDefinition}\n    >\n      {children}\n    </SQLEditor>\n  );\n}\n","import { css } from '@emotion/css';\nimport { useState, useMemo, useEffect } from 'react';\nimport { useAsyncFn } from 'react-use';\nimport useDebounce from 'react-use/lib/useDebounce';\n\nimport { formattedValueToString, getValueFormat, TimeRange } from '@grafana/data';\nimport { Icon, Spinner, useTheme2 } from '@grafana/ui';\n\nimport { DB, SQLQuery, ValidationResults } from '../../types';\n\nexport interface QueryValidatorProps {\n  db: DB;\n  query: SQLQuery;\n  range?: TimeRange;\n  onValidate: (isValid: boolean) => void;\n}\n\nexport function QueryValidator({ db, query, onValidate, range }: QueryValidatorProps) {\n  const [validationResult, setValidationResult] = useState<ValidationResults | null>();\n  const theme = useTheme2();\n  const valueFormatter = useMemo(() => getValueFormat('bytes'), []);\n\n  const styles = useMemo(() => {\n    return {\n      error: css({\n        color: theme.colors.error.text,\n        fontSize: theme.typography.bodySmall.fontSize,\n        fontFamily: theme.typography.fontFamilyMonospace,\n      }),\n      valid: css({\n        color: theme.colors.success.text,\n      }),\n      info: css({\n        color: theme.colors.text.secondary,\n      }),\n    };\n  }, [theme]);\n\n  const [state, validateQuery] = useAsyncFn(\n    async (q: SQLQuery) => {\n      if (q.rawSql?.trim() === '') {\n        return null;\n      }\n\n      return await db.validateQuery(q, range);\n    },\n    [db]\n  );\n\n  const [,] = useDebounce(\n    async () => {\n      const result = await validateQuery(query);\n      if (result) {\n        setValidationResult(result);\n      }\n\n      return null;\n    },\n    1000,\n    [query, validateQuery]\n  );\n\n  useEffect(() => {\n    if (validationResult?.isError) {\n      onValidate(false);\n    }\n    if (validationResult?.isValid) {\n      onValidate(true);\n    }\n  }, [validationResult, onValidate]);\n\n  if (!state.value && !state.loading) {\n    return null;\n  }\n\n  const error = state.value?.error ? processErrorMessage(state.value.error) : '';\n\n  return (\n    <>\n      {state.loading && (\n        <div className={styles.info}>\n          <Spinner inline={true} size=\"xs\" /> Validating query...\n        </div>\n      )}\n      {!state.loading && state.value && (\n        <>\n          <>\n            {state.value.isValid && state.value.statistics && (\n              <div className={styles.valid}>\n                <Icon name=\"check\" /> This query will process{' '}\n                <strong>{formattedValueToString(valueFormatter(state.value.statistics.TotalBytesProcessed))}</strong>{' '}\n                when run.\n              </div>\n            )}\n          </>\n\n          <>{state.value.isError && <div className={styles.error}>{error}</div>}</>\n        </>\n      )}\n    </>\n  );\n}\n\nfunction processErrorMessage(error: string) {\n  const splat = error.split(':');\n  if (splat.length > 2) {\n    return splat.slice(2).join(':');\n  }\n  return error;\n}\n","import { css } from '@emotion/css';\nimport { useMemo, useState } from 'react';\n\nimport { reportInteraction } from '@grafana/runtime';\nimport { HorizontalGroup, Icon, IconButton, Tooltip, useTheme2 } from '@grafana/ui';\n\nimport { QueryValidator, QueryValidatorProps } from './QueryValidator';\n\ninterface QueryToolboxProps extends Omit<QueryValidatorProps, 'onValidate'> {\n  showTools?: boolean;\n  isExpanded?: boolean;\n  onFormatCode?: () => void;\n  onExpand?: (expand: boolean) => void;\n  onValidate?: (isValid: boolean) => void;\n}\n\nexport function QueryToolbox({ showTools, onFormatCode, onExpand, isExpanded, ...validatorProps }: QueryToolboxProps) {\n  const theme = useTheme2();\n  const [validationResult, setValidationResult] = useState<boolean>();\n\n  const styles = useMemo(() => {\n    return {\n      container: css({\n        border: `1px solid ${theme.colors.border.medium}`,\n        borderTop: 'none',\n        padding: theme.spacing(0.5, 0.5, 0.5, 0.5),\n        display: 'flex',\n        flexGrow: 1,\n        justifyContent: 'space-between',\n        fontSize: theme.typography.bodySmall.fontSize,\n      }),\n      error: css({\n        color: theme.colors.error.text,\n        fontSize: theme.typography.bodySmall.fontSize,\n        fontFamily: theme.typography.fontFamilyMonospace,\n      }),\n      valid: css({\n        color: theme.colors.success.text,\n      }),\n      info: css({\n        color: theme.colors.text.secondary,\n      }),\n      hint: css({\n        color: theme.colors.text.disabled,\n        whiteSpace: 'nowrap',\n        cursor: 'help',\n      }),\n    };\n  }, [theme]);\n\n  let style = {};\n\n  if (!showTools && validationResult === undefined) {\n    style = { height: 0, padding: 0, visibility: 'hidden' };\n  }\n\n  return (\n    <div className={styles.container} style={style}>\n      <div>\n        {validatorProps.onValidate && (\n          <QueryValidator\n            {...validatorProps}\n            onValidate={(result: boolean) => {\n              setValidationResult(result);\n              validatorProps.onValidate!(result);\n            }}\n          />\n        )}\n      </div>\n      {showTools && (\n        <div>\n          <HorizontalGroup spacing=\"sm\">\n            {onFormatCode && (\n              <IconButton\n                onClick={() => {\n                  reportInteraction('grafana_sql_query_formatted', {\n                    datasource: validatorProps.query.datasource?.type,\n                  });\n                  onFormatCode();\n                }}\n                name=\"brackets-curly\"\n                size=\"xs\"\n                tooltip=\"Format query\"\n              />\n            )}\n            {onExpand && (\n              <IconButton\n                onClick={() => {\n                  reportInteraction('grafana_sql_editor_expand', {\n                    datasource: validatorProps.query.datasource?.type,\n                    expanded: !isExpanded,\n                  });\n\n                  onExpand(!isExpanded);\n                }}\n                name={isExpanded ? 'angle-up' : 'angle-down'}\n                size=\"xs\"\n                tooltip={isExpanded ? 'Collapse editor' : 'Expand editor'}\n              />\n            )}\n            <Tooltip content=\"Hit CTRL/CMD+Return to run query\">\n              <Icon className={styles.hint} name=\"keyboard\" />\n            </Tooltip>\n          </HorizontalGroup>\n        </div>\n      )}\n    </div>\n  );\n}\n","import { css } from '@emotion/css';\nimport { useMemo, useState } from 'react';\nimport { useMeasure } from 'react-use';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Modal, useStyles2, useTheme2 } from '@grafana/ui';\n\nimport { SQLQuery, QueryEditorProps } from '../../types';\n\nimport { QueryEditorRaw } from './QueryEditorRaw';\nimport { QueryToolbox } from './QueryToolbox';\n\ninterface RawEditorProps extends Omit<QueryEditorProps, 'onChange'> {\n  onRunQuery: () => void;\n  onChange: (q: SQLQuery, processQuery: boolean) => void;\n  onValidate: (isValid: boolean) => void;\n  queryToValidate: SQLQuery;\n}\n\nexport function RawEditor({ db, query, onChange, onRunQuery, onValidate, queryToValidate, range }: RawEditorProps) {\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [toolboxRef, toolboxMeasure] = useMeasure<HTMLDivElement>();\n  const [editorRef, editorMeasure] = useMeasure<HTMLDivElement>();\n\n  const editorLanguageDefinition = useMemo(() => db.getEditorLanguageDefinition(), [db]);\n\n  const renderQueryEditor = (width?: number, height?: number) => {\n    return (\n      <QueryEditorRaw\n        editorLanguageDefinition={editorLanguageDefinition}\n        query={query}\n        width={width}\n        height={height ? height - toolboxMeasure.height : undefined}\n        onChange={onChange}\n      >\n        {({ formatQuery }) => {\n          return (\n            <div ref={toolboxRef}>\n              <QueryToolbox\n                db={db}\n                query={queryToValidate}\n                onValidate={onValidate}\n                onFormatCode={formatQuery}\n                showTools\n                range={range}\n                onExpand={setIsExpanded}\n                isExpanded={isExpanded}\n              />\n            </div>\n          );\n        }}\n      </QueryEditorRaw>\n    );\n  };\n\n  const renderEditor = (standalone = false) => {\n    return standalone ? (\n      <AutoSizer>\n        {({ width, height }) => {\n          return renderQueryEditor(width, height);\n        }}\n      </AutoSizer>\n    ) : (\n      <div ref={editorRef}>{renderQueryEditor()}</div>\n    );\n  };\n\n  const renderPlaceholder = () => {\n    return (\n      <div\n        style={{\n          width: editorMeasure.width,\n          height: editorMeasure.height,\n          background: theme.colors.background.primary,\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}\n      >\n        Editing in expanded code editor\n      </div>\n    );\n  };\n\n  return (\n    <>\n      {isExpanded ? renderPlaceholder() : renderEditor()}\n      {isExpanded && (\n        <Modal\n          title={`Query ${query.refId}`}\n          closeOnBackdropClick={false}\n          closeOnEscape={false}\n          className={styles.modal}\n          contentClassName={styles.modalContent}\n          isOpen={isExpanded}\n          onDismiss={() => {\n            reportInteraction('grafana_sql_editor_expand', {\n              datasource: query.datasource?.type,\n              expanded: false,\n            });\n            setIsExpanded(false);\n          }}\n        >\n          {renderEditor(true)}\n        </Modal>\n      )}\n    </>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    modal: css({\n      width: '95vw',\n      height: '95vh',\n    }),\n    modalContent: css({\n      height: '100%',\n      paddingTop: 0,\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport { useCopyToClipboard } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { CodeEditor, Field, IconButton, useStyles2 } from '@grafana/ui';\n\nimport { formatSQL } from '../../utils/formatSQL';\n\ntype PreviewProps = {\n  rawSql: string;\n  datasourceType?: string;\n};\n\nexport function Preview({ rawSql, datasourceType }: PreviewProps) {\n  // TODO: use zero index to give feedback about copy success\n  const [_, copyToClipboard] = useCopyToClipboard();\n  const styles = useStyles2(getStyles);\n\n  const copyPreview = (rawSql: string) => {\n    copyToClipboard(rawSql);\n    reportInteraction('grafana_sql_preview_copied', {\n      datasource: datasourceType,\n    });\n  };\n\n  const labelElement = (\n    <div className={styles.labelWrapper}>\n      <span className={styles.label}>Preview</span>\n      <IconButton tooltip=\"Copy to clipboard\" onClick={() => copyPreview(rawSql)} name=\"copy\" />\n    </div>\n  );\n\n  return (\n    <Field label={labelElement} className={styles.grow}>\n      <CodeEditor\n        language=\"sql\"\n        height={80}\n        value={formatSQL(rawSql)}\n        monacoOptions={{ scrollbar: { vertical: 'hidden' }, scrollBeyondLastLine: false }}\n        readOnly={true}\n        showMiniMap={false}\n      />\n    </Field>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    grow: css({ flexGrow: 1 }),\n    label: css({ fontSize: 12, fontWeight: theme.typography.fontWeightMedium }),\n    labelWrapper: css({ display: 'flex', justifyContent: 'space-between', paddingBottom: theme.spacing(0.5) }),\n  };\n}\n","import { useCallback } from 'react';\n\nimport { DB, SQLExpression, SQLQuery } from '../types';\n\ninterface UseSqlChange {\n  db: DB;\n  query: SQLQuery;\n  onQueryChange: (query: SQLQuery) => void;\n}\n\nexport function useSqlChange({ query, onQueryChange, db }: UseSqlChange) {\n  const onSqlChange = useCallback(\n    (sql: SQLExpression) => {\n      const toRawSql = db.toRawSql;\n      const rawSql = toRawSql({ sql, dataset: query.dataset, table: query.table, refId: query.refId });\n      const newQuery: SQLQuery = { ...query, sql, rawSql };\n      onQueryChange(newQuery);\n    },\n    [db, onQueryChange, query]\n  );\n\n  return { onSqlChange };\n}\n","import { useCallback } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { AccessoryButton, EditorList, InputGroup } from '@grafana/plugin-ui';\nimport { Select } from '@grafana/ui';\n\nimport { QueryEditorGroupByExpression } from '../../expressions';\nimport { SQLExpression } from '../../types';\nimport { setGroupByField } from '../../utils/sql.utils';\n\ninterface GroupByRowProps {\n  sql: SQLExpression;\n  onSqlChange: (sql: SQLExpression) => void;\n  columns?: Array<SelectableValue<string>>;\n}\n\nexport function GroupByRow({ sql, columns, onSqlChange }: GroupByRowProps) {\n  const onGroupByChange = useCallback(\n    (item: Array<Partial<QueryEditorGroupByExpression>>) => {\n      // As new (empty object) items come in, we need to make sure they have the correct type\n      const cleaned = item.map((v) => setGroupByField(v.property?.name));\n      const newSql = { ...sql, groupBy: cleaned };\n      onSqlChange(newSql);\n    },\n    [onSqlChange, sql]\n  );\n\n  return (\n    <EditorList\n      items={sql.groupBy!}\n      onChange={onGroupByChange}\n      renderItem={makeRenderColumn({\n        options: columns,\n      })}\n    />\n  );\n}\n\nfunction makeRenderColumn({ options }: { options?: Array<SelectableValue<string>> }) {\n  const renderColumn = function (\n    item: Partial<QueryEditorGroupByExpression>,\n    onChangeItem: (item: QueryEditorGroupByExpression) => void,\n    onDeleteItem: () => void\n  ) {\n    return (\n      <InputGroup>\n        <Select\n          value={item.property?.name ? toOption(item.property.name) : null}\n          aria-label=\"Group by\"\n          options={options}\n          menuShouldPortal\n          onChange={({ value }) => value && onChangeItem(setGroupByField(value))}\n        />\n        <AccessoryButton title=\"Remove group by column\" icon=\"times\" variant=\"secondary\" onClick={onDeleteItem} />\n      </InputGroup>\n    );\n  };\n  return renderColumn;\n}\n","import { SelectableValue } from '@grafana/data';\n\nimport { QueryWithDefaults } from '../../defaults';\nimport { DB, SQLQuery } from '../../types';\nimport { useSqlChange } from '../../utils/useSqlChange';\n\nimport { GroupByRow } from './GroupByRow';\n\ninterface SQLGroupByRowProps {\n  fields: SelectableValue[];\n  query: QueryWithDefaults;\n  onQueryChange: (query: SQLQuery) => void;\n  db: DB;\n}\n\nexport function SQLGroupByRow({ fields, query, onQueryChange, db }: SQLGroupByRowProps) {\n  const { onSqlChange } = useSqlChange({ query, onQueryChange, db });\n\n  return <GroupByRow columns={fields} sql={query.sql!} onSqlChange={onSqlChange} />;\n}\n","import { uniqueId } from 'lodash';\nimport { useCallback } from 'react';\nimport * as React from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { EditorField, InputGroup } from '@grafana/plugin-ui';\nimport { Input, RadioButtonGroup, Select, Space } from '@grafana/ui';\n\nimport { SQLExpression } from '../../types';\nimport { setPropertyField } from '../../utils/sql.utils';\n\ntype OrderByRowProps = {\n  sql: SQLExpression;\n  onSqlChange: (sql: SQLExpression) => void;\n  columns?: Array<SelectableValue<string>>;\n  showOffset?: boolean;\n};\n\nconst sortOrderOptions = [\n  { description: 'Sort by ascending', value: 'ASC', icon: 'sort-amount-up' } as const,\n  { description: 'Sort by descending', value: 'DESC', icon: 'sort-amount-down' } as const,\n];\n\nexport function OrderByRow({ sql, onSqlChange, columns, showOffset }: OrderByRowProps) {\n  const onSortOrderChange = useCallback(\n    (item: 'ASC' | 'DESC') => {\n      const newSql: SQLExpression = { ...sql, orderByDirection: item };\n      onSqlChange(newSql);\n    },\n    [onSqlChange, sql]\n  );\n\n  const onLimitChange = useCallback(\n    (event: React.FormEvent<HTMLInputElement>) => {\n      const newSql: SQLExpression = { ...sql, limit: Number.parseInt(event.currentTarget.value, 10) };\n      onSqlChange(newSql);\n    },\n    [onSqlChange, sql]\n  );\n\n  const onOffsetChange = useCallback(\n    (event: React.FormEvent<HTMLInputElement>) => {\n      const newSql: SQLExpression = { ...sql, offset: Number.parseInt(event.currentTarget.value, 10) };\n      onSqlChange(newSql);\n    },\n    [onSqlChange, sql]\n  );\n\n  const onOrderByChange = useCallback(\n    (item: SelectableValue<string>) => {\n      const newSql: SQLExpression = { ...sql, orderBy: setPropertyField(item?.value) };\n      if (item === null) {\n        newSql.orderByDirection = undefined;\n      }\n      onSqlChange(newSql);\n    },\n    [onSqlChange, sql]\n  );\n\n  return (\n    <>\n      <EditorField label=\"Order by\" width={25}>\n        <InputGroup>\n          <Select\n            aria-label=\"Order by\"\n            options={columns}\n            value={sql.orderBy?.property.name ? toOption(sql.orderBy.property.name) : null}\n            isClearable\n            menuShouldPortal\n            onChange={onOrderByChange}\n          />\n\n          <Space h={1.5} />\n\n          <RadioButtonGroup\n            options={sortOrderOptions}\n            disabled={!sql?.orderBy?.property.name}\n            value={sql.orderByDirection}\n            onChange={onSortOrderChange}\n          />\n        </InputGroup>\n      </EditorField>\n      <EditorField label=\"Limit\" optional width={25}>\n        <Input type=\"number\" min={0} id={uniqueId('limit-')} value={sql.limit || ''} onChange={onLimitChange} />\n      </EditorField>\n      {showOffset && (\n        <EditorField label=\"Offset\" optional width={25}>\n          <Input type=\"number\" id={uniqueId('offset-')} value={sql.offset || ''} onChange={onOffsetChange} />\n        </EditorField>\n      )}\n    </>\n  );\n}\n","import { SelectableValue } from '@grafana/data';\n\nimport { QueryWithDefaults } from '../../defaults';\nimport { DB, SQLQuery } from '../../types';\nimport { useSqlChange } from '../../utils/useSqlChange';\n\nimport { OrderByRow } from './OrderByRow';\n\ntype SQLOrderByRowProps = {\n  fields: SelectableValue[];\n  query: QueryWithDefaults;\n  onQueryChange: (query: SQLQuery) => void;\n  db: DB;\n};\n\nexport function SQLOrderByRow({ fields, query, onQueryChange, db }: SQLOrderByRowProps) {\n  const { onSqlChange } = useSqlChange({ query, onQueryChange, db });\n  let columnsWithIndices: SelectableValue[] = [];\n\n  if (fields) {\n    const options = query.sql?.columns?.map((c, i) => {\n      const value = c.name ? `${c.name}(${c.parameters?.map((p) => p.name)})` : c.parameters?.map((p) => p.name);\n      return {\n        value,\n        label: `${i + 1} - ${value}`,\n      };\n    });\n    columnsWithIndices = [\n      {\n        value: '',\n        label: 'Selected columns',\n        options,\n        expanded: true,\n      },\n      ...fields,\n    ];\n  }\n\n  return <OrderByRow sql={query.sql!} onSqlChange={onSqlChange} columns={columnsWithIndices} />;\n}\n","import {\n  BaseOperator,\n  BasicConfig,\n  Config,\n  Field,\n  ImmutableList,\n  JsonTree,\n  Operator,\n  OperatorOptionsI,\n  Settings,\n  Utils,\n  ValueSource,\n  WidgetProps,\n  Widgets,\n} from '@react-awesome-query-builder/ui';\nimport { isString } from 'lodash';\n\nimport { dateTime, toOption } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button, DateTimePicker, Input, Select } from '@grafana/ui';\n\nconst buttonLabels = {\n  add: 'Add',\n  remove: 'Remove',\n};\n\nexport const emptyInitTree: JsonTree = {\n  id: Utils.uuid(),\n  type: 'group',\n};\n\nconst TIME_FILTER = 'timeFilter';\nconst macros = [TIME_FILTER];\n\n// Widgets are the components rendered for each field type see the docs for more info\n// https://github.com/ukrbublik/react-awesome-query-builder/blob/master/CONFIG.adoc#configwidgets\nexport const widgets: Widgets = {\n  ...BasicConfig.widgets,\n  text: {\n    ...BasicConfig.widgets.text,\n    factory: function TextInput(props: WidgetProps) {\n      return (\n        <Input\n          value={props?.value || ''}\n          placeholder={props?.placeholder}\n          onChange={(e) => props?.setValue(e.currentTarget.value)}\n        />\n      );\n    },\n  },\n  number: {\n    ...BasicConfig.widgets.number,\n    factory: function NumberInput(props: WidgetProps) {\n      return (\n        <Input\n          value={props?.value}\n          placeholder={props?.placeholder}\n          type=\"number\"\n          onChange={(e) => props?.setValue(Number.parseInt(e.currentTarget.value, 10))}\n        />\n      );\n    },\n  },\n  datetime: {\n    ...BasicConfig.widgets.datetime,\n    factory: function DateTimeInput(props: WidgetProps) {\n      if (props?.operator === Op.MACROS) {\n        return (\n          <Select\n            id={props.id}\n            aria-label=\"Macros value selector\"\n            menuShouldPortal\n            options={macros.map(toOption)}\n            value={props?.value}\n            onChange={(val) => props.setValue(val.value)}\n          />\n        );\n      }\n      const dateValue = dateTime(props?.value).isValid() ? dateTime(props?.value).utc() : undefined;\n      return (\n        <DateTimePicker\n          onChange={(e) => {\n            props?.setValue(e?.format(BasicConfig.widgets.datetime.valueFormat));\n          }}\n          date={dateValue}\n        />\n      );\n    },\n    // Function for formatting widget’s value in SQL WHERE query.\n    sqlFormatValue: (val, field, widget, operator, operatorDefinition, rightFieldDef) => {\n      if (operator === Op.MACROS) {\n        if (macros.includes(val)) {\n          return val;\n        }\n        return undefined;\n      }\n\n      // This is just satisfying the type checker, this should never happen\n      if (\n        typeof BasicConfig.widgets.datetime.sqlFormatValue === 'string' ||\n        typeof BasicConfig.widgets.datetime.sqlFormatValue === 'object'\n      ) {\n        return undefined;\n      }\n      const func = BasicConfig.widgets.datetime.sqlFormatValue;\n      // We need to pass the ctx to this function this way so *this* is correct\n      return func?.call(BasicConfig.ctx, val, field, widget, operator, operatorDefinition, rightFieldDef) || '';\n    },\n  },\n};\n\n// Settings are the configuration options for the query builder see the docs for more info\n// https://github.com/ukrbublik/react-awesome-query-builder/blob/master/CONFIG.adoc#configsettings\nexport const settings: Settings = {\n  ...BasicConfig.settings,\n  canRegroup: false,\n  maxNesting: 1,\n  canReorder: false,\n  showNot: false,\n  addRuleLabel: buttonLabels.add,\n  deleteLabel: buttonLabels.remove,\n  // This is the component that renders conjunctions (logical operators)\n  renderConjs: function Conjunctions(conjProps) {\n    return (\n      <Select\n        id={conjProps?.id}\n        aria-label=\"Conjunction\"\n        data-testid={selectors.components.SQLQueryEditor.filterConjunction}\n        menuShouldPortal\n        options={conjProps?.conjunctionOptions ? Object.keys(conjProps?.conjunctionOptions).map(toOption) : undefined}\n        value={conjProps?.selectedConjunction}\n        onChange={(val) => conjProps?.setConjunction(val.value!)}\n      />\n    );\n  },\n  // This is the component that renders fields\n  renderField: function Field(fieldProps) {\n    const fields = fieldProps?.config?.fields || {};\n    return (\n      <Select\n        id={fieldProps?.id}\n        width={25}\n        aria-label=\"Field\"\n        data-testid={selectors.components.SQLQueryEditor.filterField}\n        menuShouldPortal\n        options={fieldProps?.items.map((f) => {\n          // @ts-ignore\n          const icon = fields[f.key].mainWidgetProps?.customProps?.icon;\n          return {\n            label: f.label,\n            value: f.key,\n            icon,\n          };\n        })}\n        value={fieldProps?.selectedKey}\n        onChange={(val) => {\n          fieldProps?.setField(val.label!);\n        }}\n      />\n    );\n  },\n  // This is the component used for the Add/Remove buttons\n  renderButton: function RAQBButton(buttonProps) {\n    return (\n      <Button\n        type=\"button\"\n        title={`${buttonProps?.label} filter`}\n        onClick={buttonProps?.onClick}\n        variant=\"secondary\"\n        size=\"md\"\n        icon={buttonProps?.label === buttonLabels.add ? 'plus' : 'times'}\n      />\n    );\n  },\n  // This is the component used for the fields operator selector\n  renderOperator: function Operator(operatorProps) {\n    return (\n      <Select\n        options={operatorProps?.items.map((op) => ({ label: op.label, value: op.key }))}\n        aria-label=\"Operator\"\n        data-testid={selectors.components.SQLQueryEditor.filterOperator}\n        menuShouldPortal\n        value={operatorProps?.selectedKey}\n        onChange={(val) => {\n          operatorProps?.setField(val.value || '');\n        }}\n      />\n    );\n  },\n};\n\n// add IN / NOT IN operators to text to support multi-value variables\nconst enum Op {\n  IN = 'select_any_in',\n  NOT_IN = 'select_not_any_in',\n  MACROS = 'macros',\n}\nconst customOperators = getCustomOperators(BasicConfig);\nconst textWidget = BasicConfig.types.text.widgets.text;\nconst opers = [...(textWidget.operators || []), Op.IN, Op.NOT_IN];\nconst customTextWidget = {\n  ...textWidget,\n  operators: opers,\n};\n\nconst customTypes = {\n  ...BasicConfig.types,\n  text: {\n    ...BasicConfig.types.text,\n    widgets: {\n      ...BasicConfig.types.text.widgets,\n      text: customTextWidget,\n    },\n  },\n  datetime: {\n    ...BasicConfig.types.datetime,\n    widgets: {\n      ...BasicConfig.types.datetime.widgets,\n      datetime: {\n        ...BasicConfig.types.datetime.widgets.datetime,\n        operators: [Op.MACROS, ...(BasicConfig.types.datetime.widgets.datetime.operators || [])],\n      },\n    },\n  },\n};\n\n// This is the configuration for the query builder that doesn't include the fields but all the other configuration for the UI\n// Fields should be added dynamically based on returned data\n// See the doc for more info https://github.com/ukrbublik/react-awesome-query-builder/blob/master/CONFIG.adoc\nexport const raqbConfig: Config = {\n  ...BasicConfig,\n  widgets,\n  settings,\n  operators: customOperators,\n  types: customTypes,\n};\n\nexport type { Config };\n\nconst noop = () => '';\n\nfunction getCustomOperators(config: BasicConfig) {\n  const { ...supportedOperators } = config.operators;\n\n  // IN operator expects array, override IN formatter for multi-value variables\n  const sqlFormatInOp = supportedOperators[Op.IN].sqlFormatOp?.bind(config.ctx) || noop;\n  const formatInOp = supportedOperators[Op.IN].formatOp?.bind(config.ctx) || noop;\n  const customSqlInFormatter = (\n    field: string,\n    op: string,\n    value: string | string[] | ImmutableList<string>,\n    valueSrc: ValueSource | undefined,\n    valueType: string | undefined,\n    opDef: Operator | undefined,\n    operatorOptions: OperatorOptionsI | undefined,\n    fieldDef: Field | undefined\n  ) => {\n    return sqlFormatInOp(field, op, splitIfString(value), valueSrc, valueType, opDef, operatorOptions, fieldDef);\n  };\n\n  // NOT IN operator expects array, override NOT IN formatter for multi-value variables\n  const sqlFormatNotInOp = supportedOperators[Op.NOT_IN].sqlFormatOp?.bind(config.ctx) || noop;\n  const formatNotInOp = supportedOperators[Op.NOT_IN].formatOp?.bind(config.ctx) || noop;\n  const customSqlNotInFormatter = (\n    field: string,\n    op: string,\n    value: string | string[] | ImmutableList<string>,\n    valueSrc: ValueSource | undefined,\n    valueType: string | undefined,\n    opDef: Operator | undefined,\n    operatorOptions: OperatorOptionsI | undefined,\n    fieldDef: Field | undefined\n  ) => {\n    return sqlFormatNotInOp(field, op, splitIfString(value), valueSrc, valueType, opDef, operatorOptions, fieldDef);\n  };\n\n  const customOperators: Record<string, BaseOperator> = {\n    ...supportedOperators,\n    [Op.IN]: {\n      ...supportedOperators[Op.IN],\n      formatOp: (\n        field: string,\n        op: string,\n        value: string | string[] | ImmutableList<string>,\n        valueSrc?: ValueSource\n      ) => {\n        return formatInOp(field, op, splitIfString(value), valueSrc);\n      },\n      sqlFormatOp: customSqlInFormatter,\n    },\n    [Op.NOT_IN]: {\n      ...supportedOperators[Op.NOT_IN],\n      formatOp: (\n        field: string,\n        op: string,\n        value: string | string[] | ImmutableList<string>,\n        valueSrc?: ValueSource\n      ) => {\n        return formatNotInOp(field, op, splitIfString(value), valueSrc);\n      },\n      sqlFormatOp: customSqlNotInFormatter,\n    },\n    [Op.MACROS]: {\n      label: 'Macros',\n      sqlFormatOp: (field: string, _operator: string, value: string | string[] | ImmutableList<string>) => {\n        if (value === TIME_FILTER) {\n          return `$__timeFilter(${field})`;\n        }\n        throw new Error('Invalid macro');\n      },\n    },\n  };\n\n  return customOperators;\n}\n\n// value: string | List<string> but AQB uses a different version of Immutable\nfunction splitIfString(value: string | string[] | ImmutableList<string>) {\n  if (isString(value)) {\n    return value.split(',');\n  }\n  return value;\n}\n","import { injectGlobal } from '@emotion/css';\nimport { Builder, Config, ImmutableTree, Query, Utils } from '@react-awesome-query-builder/ui';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { SQLExpression } from '../../types';\n\nimport { emptyInitTree, raqbConfig } from './AwesomeQueryBuilder';\n\ninterface SQLBuilderWhereRowProps {\n  sql: SQLExpression;\n  onSqlChange: (sql: SQLExpression) => void;\n  config?: Partial<Config>;\n}\n\nexport function WhereRow({ sql, config, onSqlChange }: SQLBuilderWhereRowProps) {\n  const [tree, setTree] = useState<ImmutableTree>();\n  const configWithDefaults = useMemo(() => ({ ...raqbConfig, ...config }), [config]);\n\n  useEffect(() => {\n    // Set the initial tree\n    if (!tree) {\n      const initTree = Utils.checkTree(Utils.loadTree(sql.whereJsonTree ?? emptyInitTree), configWithDefaults);\n      setTree(initTree);\n    }\n  }, [configWithDefaults, sql.whereJsonTree, tree]);\n\n  useEffect(() => {\n    if (!sql.whereJsonTree) {\n      setTree(Utils.checkTree(Utils.loadTree(emptyInitTree), configWithDefaults));\n    }\n  }, [configWithDefaults, sql.whereJsonTree]);\n\n  const onTreeChange = useCallback(\n    (changedTree: ImmutableTree, config: Config) => {\n      setTree(changedTree);\n      const newSql = {\n        ...sql,\n        whereJsonTree: Utils.getTree(changedTree),\n        whereString: Utils.sqlFormat(changedTree, config),\n      };\n\n      onSqlChange(newSql);\n    },\n    [onSqlChange, sql]\n  );\n\n  if (!tree) {\n    return null;\n  }\n\n  return (\n    <Query\n      {...configWithDefaults}\n      value={tree}\n      onChange={onTreeChange}\n      renderBuilder={(props) => <Builder {...props} />}\n    />\n  );\n}\n\nfunction flex(direction: string) {\n  return `\n    display: flex;\n    gap: 8px;\n    flex-direction: ${direction};`;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-unused-expressions\ninjectGlobal`\n  .group--header {\n    ${flex('row')}\n  }\n\n  .group-or-rule {\n    ${flex('column')}\n    .rule {\n      flex-direction: row;\n    }\n  }\n\n  .rule--body {\n    ${flex('row')}\n  }\n\n  .group--children {\n    ${flex('column')}\n  }\n\n  .group--conjunctions:empty {\n    display: none;\n  }\n`;\n","import useAsync from 'react-use/lib/useAsync';\n\nimport { SelectableValue, TypedVariableModel } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\n\nimport { QueryWithDefaults } from '../../defaults';\nimport { DB, SQLExpression, SQLQuery, SQLSelectableValue } from '../../types';\nimport { useSqlChange } from '../../utils/useSqlChange';\n\nimport { Config } from './AwesomeQueryBuilder';\nimport { WhereRow } from './WhereRow';\n\ninterface WhereRowProps {\n  query: QueryWithDefaults;\n  fields: SelectableValue[];\n  onQueryChange: (query: SQLQuery) => void;\n  db: DB;\n}\n\nexport function SQLWhereRow({ query, fields, onQueryChange, db }: WhereRowProps) {\n  const state = useAsync(async () => {\n    return mapFieldsToTypes(fields);\n  }, [fields]);\n\n  const { onSqlChange } = useSqlChange({ query, onQueryChange, db });\n\n  return (\n    <WhereRow\n      // TODO: fix key that's used to force clean render or SQLWhereRow - otherwise it doesn't render operators correctly\n      key={JSON.stringify(state.value)}\n      config={{ fields: state.value || {} }}\n      sql={query.sql!}\n      onSqlChange={(val: SQLExpression) => {\n        const templateVars = getTemplateSrv().getVariables();\n\n        removeQuotesForMultiVariables(val, templateVars);\n\n        onSqlChange(val);\n      }}\n    />\n  );\n}\n\n// needed for awesome query builder\nfunction mapFieldsToTypes(columns: SQLSelectableValue[]) {\n  const fields: Config['fields'] = {};\n  for (const col of columns) {\n    fields[col.value] = {\n      type: col.raqbFieldType || 'text',\n      valueSources: ['value'],\n      mainWidgetProps: { customProps: { icon: col.icon } },\n    };\n  }\n  return fields;\n}\n\nexport function removeQuotesForMultiVariables(val: SQLExpression, templateVars: TypedVariableModel[]) {\n  const multiVariableInWhereString = (tv: TypedVariableModel) =>\n    'multi' in tv &&\n    tv.multi &&\n    (val.whereString?.includes(`\\${${tv.name}}`) || val.whereString?.includes(`$${tv.name}`));\n\n  if (templateVars.some((tv) => multiVariableInWhereString(tv))) {\n    val.whereString = val.whereString?.replaceAll(\"')\", ')');\n    val.whereString = val.whereString?.replaceAll(\"('\", '(');\n  }\n}\n","import { useId } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorField } from '@grafana/plugin-ui';\nimport { Select } from '@grafana/ui';\n\ninterface Props {\n  columns: Array<SelectableValue<string>>;\n  onParameterChange: (value?: string) => void;\n  value: SelectableValue<string> | null;\n}\n\nexport function SelectColumn({ columns, onParameterChange, value }: Props) {\n  const selectInputId = useId();\n\n  return (\n    <EditorField label=\"Column\" width={25}>\n      <Select\n        value={value}\n        data-testid={selectors.components.SQLQueryEditor.selectColumn}\n        inputId={selectInputId}\n        menuShouldPortal\n        options={[{ label: '*', value: '*' }, ...columns]}\n        allowCustomValue\n        onChange={(s) => onParameterChange(s.value)}\n      />\n    </EditorField>\n  );\n}\n","import { css } from '@emotion/css';\nimport { useCallback } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button, InlineLabel, Input, Stack, useStyles2 } from '@grafana/ui';\n\nimport { QueryEditorExpressionType } from '../../expressions';\nimport { SQLExpression, SQLQuery } from '../../types';\nimport { getColumnValue } from '../../utils/sql.utils';\n\nimport { SelectColumn } from './SelectColumn';\n\ninterface Props {\n  columns: Array<SelectableValue<string>>;\n  query: SQLQuery;\n  onSqlChange: (sql: SQLExpression) => void;\n  onParameterChange: (index: number) => (value?: string) => void;\n  currentColumnIndex: number;\n}\n\nexport function SelectCustomFunctionParameters({\n  columns,\n  query,\n  onSqlChange,\n  onParameterChange,\n  currentColumnIndex,\n}: Props) {\n  const styles = useStyles2(getStyles);\n  const macroOrFunction = query.sql?.columns?.[currentColumnIndex];\n\n  const addParameter = useCallback(\n    (index: number) => {\n      const item = query.sql?.columns?.[index];\n      if (!item) {\n        return;\n      }\n\n      item.parameters = item.parameters\n        ? [...item.parameters, { type: QueryEditorExpressionType.FunctionParameter, name: '' }]\n        : [];\n\n      const newSql: SQLExpression = {\n        ...query.sql,\n        columns: query.sql?.columns?.map((c, i) => (i === index ? item : c)),\n      };\n\n      onSqlChange(newSql);\n    },\n    [onSqlChange, query.sql]\n  );\n\n  const removeParameter = useCallback(\n    (columnIndex: number, index: number) => {\n      const item = query.sql?.columns?.[columnIndex];\n      if (!item?.parameters) {\n        return;\n      }\n      item.parameters = item.parameters?.filter((_, i) => i !== index);\n\n      const newSql: SQLExpression = {\n        ...query.sql,\n        columns: query.sql?.columns?.map((c, i) => (i === columnIndex ? item : c)),\n      };\n\n      onSqlChange(newSql);\n    },\n    [onSqlChange, query.sql]\n  );\n\n  function renderParameters(columnIndex: number) {\n    if (!macroOrFunction?.parameters || macroOrFunction.parameters.length <= 1) {\n      return null;\n    }\n\n    const paramComponents = macroOrFunction.parameters.map((param, index) => {\n      // Skip the first parameter as it is the column name\n      if (index === 0) {\n        return null;\n      }\n\n      return (\n        <Stack key={index} gap={2}>\n          <InlineLabel className={styles.label}>,</InlineLabel>\n          <Input\n            onChange={(e) => onParameterChange(index)(e.currentTarget.value)}\n            value={param.name}\n            aria-label={`Parameter ${index} for column ${columnIndex}`}\n            data-testid={selectors.components.SQLQueryEditor.selectInputParameter}\n            addonAfter={\n              <Button\n                title=\"Remove parameter\"\n                type=\"button\"\n                icon=\"times\"\n                variant=\"secondary\"\n                size=\"md\"\n                onClick={() => removeParameter(columnIndex, index)}\n              />\n            }\n          />\n        </Stack>\n      );\n    });\n    return paramComponents;\n  }\n\n  return (\n    <>\n      <InlineLabel className={styles.label}>(</InlineLabel>\n      <SelectColumn\n        columns={columns}\n        onParameterChange={(s) => onParameterChange(0)(s)}\n        value={getColumnValue(macroOrFunction?.parameters?.[0])}\n      />\n      {renderParameters(currentColumnIndex)}\n      <Button\n        type=\"button\"\n        onClick={() => addParameter(currentColumnIndex)}\n        variant=\"secondary\"\n        size=\"md\"\n        icon=\"plus\"\n        title=\"Add parameter\"\n      />\n      <InlineLabel className={styles.label}>)</InlineLabel>\n    </>\n  );\n}\n\nconst getStyles = () => {\n  return {\n    label: css({\n      padding: 0,\n      margin: 0,\n      width: 'unset',\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport { useCallback, useEffect, useId, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorField } from '@grafana/plugin-ui';\nimport { InlineLabel, Input, Select, Stack, useStyles2 } from '@grafana/ui';\n\nimport { QueryEditorExpressionType } from '../../expressions';\nimport { DB, SQLExpression, SQLQuery } from '../../types';\nimport { getColumnValue } from '../../utils/sql.utils';\n\nimport { SelectColumn } from './SelectColumn';\nimport { SelectCustomFunctionParameters } from './SelectCustomFunctionParameters';\n\ninterface Props {\n  query: SQLQuery;\n  onSqlChange: (sql: SQLExpression) => void;\n  currentColumnIndex: number;\n  db: DB;\n  columns: Array<SelectableValue<string>>;\n}\n\nexport function SelectFunctionParameters({ query, onSqlChange, currentColumnIndex, db, columns }: Props) {\n  const selectInputId = useId();\n  const macroOrFunction = query.sql?.columns?.[currentColumnIndex];\n  const styles = useStyles2(getStyles);\n  const func = db.functions().find((f) => f.name === macroOrFunction?.name);\n\n  const [fieldsFromFunction, setFieldsFromFunction] = useState<Array<Array<SelectableValue<string>>>>([]);\n\n  useEffect(() => {\n    const getFieldsFromFunction = async () => {\n      if (!func) {\n        return;\n      }\n      const options: Array<Array<SelectableValue<string>>> = [];\n      for (const param of func.parameters ?? []) {\n        if (param.options) {\n          options.push(await param.options(query));\n        } else {\n          options.push([]);\n        }\n      }\n      setFieldsFromFunction(options);\n    };\n    getFieldsFromFunction();\n\n    // It is fine to ignore the warning here and omit the query object\n    // only table property is used in the query object and whenever table changes the component is re-rendered\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [macroOrFunction?.name]);\n\n  const onParameterChange = useCallback(\n    (index: number, keepIndex?: boolean) => (s: string | undefined) => {\n      const item = query.sql?.columns?.[currentColumnIndex];\n      if (!item) {\n        return;\n      }\n      if (!item.parameters) {\n        item.parameters = [];\n      }\n      if (item.parameters[index] === undefined) {\n        item.parameters[index] = { type: QueryEditorExpressionType.FunctionParameter, name: s };\n      } else if (s == null && keepIndex) {\n        // Remove value from index\n        item.parameters = item.parameters.map((p, i) => (i === index ? { ...p, name: '' } : p));\n        // Remove the last empty parameter\n        if (item.parameters[item.parameters.length - 1]?.name === '') {\n          item.parameters = item.parameters.filter((p) => p.name !== '');\n        }\n      } else if (s == null) {\n        item.parameters = item.parameters.filter((_, i) => i !== index);\n      } else {\n        item.parameters = item.parameters.map((p, i) => (i === index ? { ...p, name: s } : p));\n      }\n\n      const newSql: SQLExpression = {\n        ...query.sql,\n        columns: query.sql?.columns?.map((c, i) => (i === currentColumnIndex ? item : c)),\n      };\n\n      onSqlChange(newSql);\n    },\n    [currentColumnIndex, onSqlChange, query.sql]\n  );\n\n  function renderParametersWithFunctions() {\n    if (!func?.parameters) {\n      return null;\n    }\n\n    return func?.parameters.map((funcParam, index) => {\n      return (\n        <Stack key={index} alignItems=\"flex-end\" gap={2}>\n          <EditorField label={funcParam.name} width={25} optional={!funcParam.required}>\n            <>\n              {funcParam.options ? (\n                <Select\n                  value={getColumnValue(macroOrFunction?.parameters![index])}\n                  options={fieldsFromFunction?.[index]}\n                  data-testid={selectors.components.SQLQueryEditor.selectFunctionParameter(funcParam.name)}\n                  inputId={selectInputId}\n                  menuShouldPortal\n                  allowCustomValue\n                  isClearable\n                  onChange={(s) => onParameterChange(index, true)(s?.value)}\n                />\n              ) : (\n                <Input\n                  onChange={(e) => onParameterChange(index, true)(e.currentTarget.value)}\n                  value={macroOrFunction?.parameters![index]?.name}\n                  data-testid={selectors.components.SQLQueryEditor.selectInputParameter}\n                />\n              )}\n            </>\n          </EditorField>\n          {func.parameters!.length !== index + 1 && <InlineLabel className={styles.label}>,</InlineLabel>}\n        </Stack>\n      );\n    });\n  }\n\n  // This means that no function is selected, we render a column selector\n  if (macroOrFunction?.name === undefined) {\n    return (\n      <SelectColumn\n        columns={columns}\n        onParameterChange={(s) => onParameterChange(0)(s)}\n        value={getColumnValue(macroOrFunction?.parameters?.[0])}\n      />\n    );\n  }\n\n  // If the function is not found, that means that it might be a custom value\n  // we let the user add any number of parameters\n  if (!func) {\n    return (\n      <SelectCustomFunctionParameters\n        query={query}\n        onSqlChange={onSqlChange}\n        currentColumnIndex={currentColumnIndex}\n        columns={columns}\n        onParameterChange={onParameterChange}\n      />\n    );\n  }\n\n  // Else we render the function parameters based on the provided settings\n  return (\n    <>\n      <InlineLabel className={styles.label}>(</InlineLabel>\n      {renderParametersWithFunctions()}\n      <InlineLabel className={styles.label}>)</InlineLabel>\n    </>\n  );\n}\n\nconst getStyles = () => {\n  return {\n    label: css({\n      padding: 0,\n      margin: 0,\n      width: 'unset',\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport { uniqueId } from 'lodash';\nimport { useCallback } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { EditorField } from '@grafana/plugin-ui';\nimport { Button, Select, Stack, useStyles2 } from '@grafana/ui';\n\nimport { QueryEditorExpressionType, QueryEditorFunctionExpression } from '../../expressions';\nimport { DB, QueryFormat, SQLExpression, SQLQuery } from '../../types';\nimport { createFunctionField } from '../../utils/sql.utils';\nimport { useSqlChange } from '../../utils/useSqlChange';\n\nimport { SelectFunctionParameters } from './SelectFunctionParameters';\n\ninterface SelectRowProps {\n  query: SQLQuery;\n  onQueryChange: (sql: SQLQuery) => void;\n  db: DB;\n  columns: Array<SelectableValue<string>>;\n}\n\nexport function SelectRow({ query, onQueryChange, db, columns }: SelectRowProps) {\n  const styles = useStyles2(getStyles);\n  const { onSqlChange } = useSqlChange({ query, onQueryChange, db });\n  const timeSeriesAliasOpts: Array<SelectableValue<string>> = [];\n\n  // Add necessary alias options for time series format\n  // when that format has been selected\n  if (query.format === QueryFormat.Timeseries) {\n    timeSeriesAliasOpts.push({ label: 'time', value: 'time' });\n    timeSeriesAliasOpts.push({ label: 'value', value: 'value' });\n  }\n\n  const onAggregationChange = useCallback(\n    (item: QueryEditorFunctionExpression, index: number) => (aggregation: SelectableValue<string>) => {\n      const newItem = {\n        ...item,\n        name: aggregation?.value,\n        parameters: [\n          { type: QueryEditorExpressionType.FunctionParameter as const, name: item.parameters?.[0]?.name || '' },\n        ],\n      };\n      const newSql: SQLExpression = {\n        ...query.sql,\n        columns: query.sql?.columns?.map((c, i) => (i === index ? newItem : c)),\n      };\n\n      onSqlChange(newSql);\n    },\n    [onSqlChange, query.sql]\n  );\n\n  const onAliasChange = useCallback(\n    (item: QueryEditorFunctionExpression, index: number) => (alias: SelectableValue<string>) => {\n      let newItem = { ...item };\n\n      if (alias !== null) {\n        newItem = { ...item, alias: `\"${alias?.value?.trim()}\"` };\n      } else {\n        delete newItem.alias;\n      }\n\n      const newSql: SQLExpression = {\n        ...query.sql,\n        columns: query.sql?.columns?.map((c, i) => (i === index ? newItem : c)),\n      };\n\n      onSqlChange(newSql);\n    },\n    [onSqlChange, query.sql]\n  );\n\n  const removeColumn = useCallback(\n    (index: number) => () => {\n      const clone = [...(query.sql?.columns || [])];\n      clone.splice(index, 1);\n      const newSql: SQLExpression = {\n        ...query.sql,\n        columns: clone,\n      };\n      onSqlChange(newSql);\n    },\n    [onSqlChange, query.sql]\n  );\n\n  const addColumn = useCallback(() => {\n    const newSql: SQLExpression = { ...query.sql, columns: [...(query.sql?.columns || []), createFunctionField()] };\n    onSqlChange(newSql);\n  }, [onSqlChange, query.sql]);\n\n  const aggregateOptions = () => {\n    const options: Array<SelectableValue<string>> = [\n      { label: 'Aggregations', options: [] },\n      { label: 'Macros', options: [] },\n    ];\n    for (const func of db.functions()) {\n      // Create groups for macros\n      if (func.name.startsWith('$__')) {\n        options[1].options.push({ label: func.name, value: func.name });\n      } else {\n        options[0].options.push({ label: func.name, value: func.name });\n      }\n    }\n    return options;\n  };\n\n  return (\n    <Stack gap={2} wrap=\"wrap\" direction=\"column\">\n      {query.sql?.columns?.map((item, index) => (\n        <div key={index}>\n          <Stack gap={2} alignItems=\"end\">\n            <EditorField label=\"Data operations\" optional width={25}>\n              <Select\n                value={item.name ? toOption(item.name) : null}\n                inputId={`select-aggregation-${index}-${uniqueId()}`}\n                data-testid={selectors.components.SQLQueryEditor.selectAggregation}\n                isClearable\n                menuShouldPortal\n                allowCustomValue\n                options={aggregateOptions()}\n                onChange={onAggregationChange(item, index)}\n              />\n            </EditorField>\n\n            <SelectFunctionParameters\n              currentColumnIndex={index}\n              columns={columns}\n              onSqlChange={onSqlChange}\n              query={query}\n              db={db}\n            />\n\n            <EditorField label=\"Alias\" optional width={15}>\n              <Select\n                value={item.alias ? toOption(item.alias) : null}\n                inputId={`select-alias-${index}-${uniqueId()}`}\n                data-testid={selectors.components.SQLQueryEditor.selectAlias}\n                options={timeSeriesAliasOpts}\n                onChange={onAliasChange(item, index)}\n                isClearable\n                menuShouldPortal\n                allowCustomValue\n              />\n            </EditorField>\n            <Button\n              title=\"Remove column\"\n              type=\"button\"\n              icon=\"trash-alt\"\n              variant=\"secondary\"\n              size=\"md\"\n              onClick={removeColumn(index)}\n            />\n          </Stack>\n        </div>\n      ))}\n      <Button\n        type=\"button\"\n        onClick={addColumn}\n        variant=\"secondary\"\n        title=\"Add column\"\n        size=\"md\"\n        icon=\"plus\"\n        className={styles.addButton}\n      />\n    </Stack>\n  );\n}\n\nconst getStyles = () => {\n  return {\n    addButton: css({ alignSelf: 'flex-start' }),\n    label: css({\n      padding: 0,\n      margin: 0,\n      width: 'unset',\n    }),\n  };\n};\n","import { useAsync } from 'react-use';\n\nimport { EditorRows, EditorRow, EditorField } from '@grafana/plugin-ui';\n\nimport { DB, QueryEditorProps, QueryRowFilter } from '../../types';\nimport { QueryToolbox } from '../query-editor-raw/QueryToolbox';\n\nimport { Preview } from './Preview';\nimport { SQLGroupByRow } from './SQLGroupByRow';\nimport { SQLOrderByRow } from './SQLOrderByRow';\nimport { SQLWhereRow } from './SQLWhereRow';\nimport { SelectRow } from './SelectRow';\n\ninterface VisualEditorProps extends QueryEditorProps {\n  db: DB;\n  queryRowFilter: QueryRowFilter;\n  onValidate: (isValid: boolean) => void;\n}\n\nexport const VisualEditor = ({ query, db, queryRowFilter, onChange, onValidate, range }: VisualEditorProps) => {\n  const state = useAsync(async () => {\n    const fields = await db.fields(query);\n    return fields;\n  }, [db, query.dataset, query.table]);\n\n  return (\n    <>\n      <EditorRows>\n        <EditorRow>\n          <SelectRow columns={state.value || []} query={query} onQueryChange={onChange} db={db} />\n        </EditorRow>\n        {queryRowFilter.filter && (\n          <EditorRow>\n            <EditorField label=\"Filter by column value\" optional>\n              <SQLWhereRow fields={state.value || []} query={query} onQueryChange={onChange} db={db} />\n            </EditorField>\n          </EditorRow>\n        )}\n        {queryRowFilter.group && (\n          <EditorRow>\n            <EditorField label=\"Group by column\">\n              <SQLGroupByRow fields={state.value || []} query={query} onQueryChange={onChange} db={db} />\n            </EditorField>\n          </EditorRow>\n        )}\n        {queryRowFilter.order && (\n          <EditorRow>\n            <SQLOrderByRow fields={state.value || []} query={query} onQueryChange={onChange} db={db} />\n          </EditorRow>\n        )}\n        {queryRowFilter.preview && query.rawSql && (\n          <EditorRow>\n            <Preview rawSql={query.rawSql} datasourceType={query.datasource?.type} />\n          </EditorRow>\n        )}\n      </EditorRows>\n      <QueryToolbox db={db} query={query} onValidate={onValidate} range={range} />\n    </>\n  );\n};\n","import { useCallback, useEffect, useState } from 'react';\nimport { useAsync } from 'react-use';\n\nimport { QueryEditorProps } from '@grafana/data';\nimport { EditorMode } from '@grafana/plugin-ui';\nimport { Space } from '@grafana/ui';\n\nimport { SqlDatasource } from '../datasource/SqlDatasource';\nimport { applyQueryDefaults } from '../defaults';\nimport { SQLQuery, QueryRowFilter, SQLOptions } from '../types';\nimport { haveColumns } from '../utils/sql.utils';\n\nimport { QueryHeader, QueryHeaderProps } from './QueryHeader';\nimport { RawEditor } from './query-editor-raw/RawEditor';\nimport { VisualEditor } from './visual-query-builder/VisualEditor';\n\nexport interface SqlQueryEditorProps extends QueryEditorProps<SqlDatasource, SQLQuery, SQLOptions> {\n  queryHeaderProps?: Pick<QueryHeaderProps, 'dialect'>;\n}\n\nexport default function SqlQueryEditor({\n  datasource,\n  query,\n  onChange,\n  onRunQuery,\n  range,\n  queryHeaderProps,\n}: SqlQueryEditorProps) {\n  const [isQueryRunnable, setIsQueryRunnable] = useState(true);\n  const db = datasource.getDB();\n\n  const { preconfiguredDatabase } = datasource;\n  const dialect = queryHeaderProps?.dialect ?? 'other';\n  const { loading, error } = useAsync(async () => {\n    return () => {\n      if (datasource.getDB(datasource.id).init !== undefined) {\n        datasource.getDB(datasource.id).init!();\n      }\n    };\n  }, [datasource]);\n\n  const queryWithDefaults = applyQueryDefaults(query);\n  const [queryRowFilter, setQueryRowFilter] = useState<QueryRowFilter>({\n    filter: !!queryWithDefaults.sql?.whereString,\n    group: !!queryWithDefaults.sql?.groupBy?.[0]?.property.name,\n    order: !!queryWithDefaults.sql?.orderBy?.property.name,\n    preview: true,\n  });\n  const [queryToValidate, setQueryToValidate] = useState(queryWithDefaults);\n\n  useEffect(() => {\n    return () => {\n      if (datasource.getDB(datasource.id).dispose !== undefined) {\n        datasource.getDB(datasource.id).dispose!();\n      }\n    };\n  }, [datasource]);\n\n  const processQuery = useCallback(\n    (q: SQLQuery) => {\n      if (isQueryValid(q) && onRunQuery) {\n        onRunQuery();\n      }\n    },\n    [onRunQuery]\n  );\n\n  const onQueryChange = (q: SQLQuery, process = true) => {\n    setQueryToValidate(q);\n    onChange(q);\n\n    if (haveColumns(q.sql?.columns) && q.sql?.columns.some((c) => c.name) && !queryRowFilter.group) {\n      setQueryRowFilter({ ...queryRowFilter, group: true });\n    }\n\n    if (process) {\n      processQuery(q);\n    }\n  };\n\n  const onQueryHeaderChange = (q: SQLQuery) => {\n    setQueryToValidate(q);\n    onChange(q);\n  };\n\n  if (loading || error) {\n    return null;\n  }\n\n  return (\n    <>\n      <QueryHeader\n        db={db}\n        preconfiguredDataset={preconfiguredDatabase}\n        onChange={onQueryHeaderChange}\n        onRunQuery={onRunQuery}\n        onQueryRowChange={setQueryRowFilter}\n        queryRowFilter={queryRowFilter}\n        query={queryWithDefaults}\n        isQueryRunnable={isQueryRunnable}\n        dialect={dialect}\n      />\n\n      <Space v={0.5} />\n\n      {queryWithDefaults.editorMode !== EditorMode.Code && (\n        <VisualEditor\n          db={db}\n          query={queryWithDefaults}\n          onChange={(q: SQLQuery) => onQueryChange(q, false)}\n          queryRowFilter={queryRowFilter}\n          onValidate={setIsQueryRunnable}\n          range={range}\n        />\n      )}\n\n      {queryWithDefaults.editorMode === EditorMode.Code && (\n        <RawEditor\n          db={db}\n          query={queryWithDefaults}\n          queryToValidate={queryToValidate}\n          onChange={onQueryChange}\n          onRunQuery={onRunQuery}\n          onValidate={setIsQueryRunnable}\n          range={range}\n        />\n      )}\n    </>\n  );\n}\n\nconst isQueryValid = (q: SQLQuery) => {\n  return Boolean(q.rawSql);\n};\n"],"names":["resolveSelectors","versionedSelectors","grafanaVersion","resolveSelectorGroup","replace","group","result","key","value","Object","entries","isVersionedSelectorGroup","assertIsSemverValid","resolveSelector","target","first","keys","valid","versionedSelector","versionToUse","versions","sort","compare","length","version","gte","selectorName","every","Error","MIN_GRAFANA_VERSION","versionedComponents","RadioButton","container","Breadcrumbs","breadcrumb","title","TimePicker","openButton","overlayContent","fromField","toField","applyTimeRange","copyTimeRange","pasteTimeRange","calendar","label","closeButton","absoluteTimeRangeTitle","DataSourcePermissions","form","roleType","rolePicker","permissionLevel","DateTimePicker","input","DataSource","TestData","QueryTab","scenarioSelectContainer","scenarioSelect","max","min","noise","seriesCount","spread","startValue","drop","DataSourceHttpSettings","urlInput","Jaeger","traceIDInput","Prometheus","configPage","connectionSettings","manageAlerts","scrapeInterval","queryTimeout","defaultEditor","disableMetricLookup","prometheusType","prometheusVersion","cacheLevel","incrementalQuerying","queryOverlapWindow","disableRecordingRules","customQueryParameters","httpMethod","exemplarsAddButton","internalLinkSwitch","codeModeMetricNamesSuggestionLimit","queryEditor","explain","editorToggle","options","legend","format","step","type","exemplars","builder","metricSelect","hints","metricsExplorer","queryAdvisor","code","queryField","metricsCountInfo","metricsBrowser","selectMetric","seriesLimit","metricList","labelNamesFilter","labelValuesFilter","useQuery","useAsRateQuery","validateSelector","clear","exemplarMarker","variableQueryEditor","queryType","labelnames","metricRegex","labelValues","labelSelect","metricNames","varQueryResult","seriesQuery","classicQuery","annotations","minStep","tags","text","seriesValueAsTimestamp","Menu","MenuComponent","MenuGroup","MenuItem","SubMenu","icon","Panels","Panel","content","headerItems","item","menuItems","menu","containerByTitle","headerCornerInfo","mode","status","_","loadingBar","HoverWidget","dragIcon","PanelDataErrorMessage","Visualization","Graph","VisualizationTab","legendSection","Legend","legendItemAlias","name","showLegendSwitch","xAxis","labels","BarGauge","valueV2","PieChart","svgSlice","Text","Table","header","footer","body","VizLegend","seriesName","Drawer","General","expand","contract","close","rcContentWrapper","subtitle","DashboardSaveDrawer","saveButton","saveAsButton","saveAsTitleInput","PanelEditor","OptionsPane","select","fieldLabel","fieldInput","DataPane","applyButton","toggleVizPicker","toggleVizOptions","toggleTableView","showZoomField","showAttributionField","showScaleField","showMeasureField","showDebugField","measureButton","PanelInspector","Data","Stats","Json","Query","refreshButton","jsonObjectKeys","Tab","active","RefreshPicker","runButtonV2","intervalButtonV2","queryInspectorButton","queryHistoryButton","addQuery","addQueryFromLibrary","queryGroupTopSection","addExpression","QueryHistory","queryText","QueryEditorRows","rows","QueryEditorRow","actionButton","refId","AlertTab","AlertRules","groupToggle","toggle","expandedContent","previewButton","ruleNameField","newFolderButton","newFolderNameField","newFolderNameCreateButton","newEvaluationGroupButton","newEvaluationGroupName","newEvaluationGroupInterval","newEvaluationGroupCreate","stepNo","stepAdvancedModeSwitch","Alert","alertV2","severity","TransformTab","newTransform","transformationEditor","transformationEditorDebugger","Transforms","card","disableTransformationButton","Reduce","modeLabel","calculationsLabel","SpatialOperations","actionLabel","locationLabel","location","autoOption","coords","option","latitudeFieldLabel","longitudeFieldLabel","geohash","geohashFieldLabel","lookup","lookupFieldLabel","gazetteerFieldLabel","searchInput","noTransformationsMessage","addTransformationButton","removeAllTransformationsButton","NavBar","Configuration","button","Toggle","Reporting","NavMenu","NavToolbar","commandPaletteTrigger","shareDashboard","markAsFavorite","editDashboard","editButton","exitButton","settingsButton","addRowButton","addLibraryPanelButton","addVisualizationButton","pastePanelButton","discardChangesButton","discardLibraryPanelButton","unlinkLibraryPanelButton","saveLibraryPanelButton","backToDashboardButton","PageToolbar","tooltip","itemButton","QueryEditorToolbarItem","BackButton","backArrow","OptionsGroup","PluginVisualization","current","Select","toggleAllOptions","singleValue","FieldConfigEditor","OverridesConfigEditor","FolderPicker","containerV2","ReadonlyFolderPicker","DataSourcePicker","inputV2","dataSourceList","advancedModal","builtInDataSourceList","TimeZonePicker","changeTimeSettingsButton","WeekStartPicker","placeholder","TraceViewer","spanBar","QueryField","QueryBuilder","queryPatterns","inputSelect","valueSelect","matchOperatorSelect","ValuePicker","Search","sectionV2","itemsV2","cards","collapseFolder","sectionId","expandFolder","dashboardItem","dashboardCard","folderHeader","folderName","folderContent","dashboardItems","DashboardLinks","dropDown","link","LoadingIndicator","CallToActionCard","buttonV2","DataLinksContextMenu","singleLink","CodeEditor","ReactMonacoEditor","editorLazy","DashboardImportPage","textarea","submit","ImportDashboardForm","PanelAlertTabContent","VisualizationPreview","ColorSwatch","DashboardRow","UserProfile","profileSaveButton","preferencesSaveButton","orgsTable","sessionsTable","extensionPointTabs","extensionPointTab","tabId","FileUpload","inputField","fileNameSpan","DebugOverlay","wrapper","OrgRolePicker","AnalyticsToolbarButton","Variables","variableOption","variableLinkWrapper","Annotations","annotationsTypeInput","annotationsChoosePanelInput","editor","testButton","resultContainer","Tooltip","ReturnToPrevious","buttonGroup","backButton","dismissButton","SQLQueryEditor","selectColumn","selectColumnInput","selectFunctionParameter","selectAggregation","selectAggregationInput","selectAlias","selectAliasInput","selectInputParameter","filterConjunction","filterField","filterOperator","headerTableSelector","headerFilterSwitch","headerGroupSwitch","headerOrderSwitch","headerPreviewSwitch","EntityNotFound","Portal","selectors","pages","Alerting","AddAlertRule","url","EditAlertRule","alertRuleUid","Login","username","password","skip","PasswordlessLogin","email","Home","delete","readOnly","saveAndTest","alert","DataSources","dataSources","dataSourceName","EditDataSource","dataSourceUid","settings","AddDataSource","dataSourcePluginsV2","pluginName","ConfirmModal","AddDashboard","addNewPanel","itemButtonAddViz","addNewRow","addNewPanelLibrary","Settings","List","Edit","annotationIndex","editIndex","Dashboard","uid","DashNav","nav","navV2","publicDashboardTag","shareButton","scrollContainer","newShareButton","shareLink","arrowMenu","shareInternally","shareExternally","shareSnapshot","NewExportButton","exportAsJson","playlistControls","prev","stop","next","Controls","submenu","submenuItem","submenuItemLabels","submenuItemValueDropDownValueLinkTexts","submenuItemValueDropDownDropDown","submenuItemValueDropDownOptionTexts","annotationsWrapper","annotationLabel","annotationToggle","Actions","deleteDashBoard","sectionItems","saveDashBoard","saveAsDashBoard","urlParams","dashboardUid","addAnnotationCTAV2","NewAnnotation","panelFilterSelect","showInLabel","previewInDashboard","apply","enable","hide","addVariableCTAV2","newButton","table","tableRowNameFields","variableName","tableRowDefinitionFields","tableRowArrowUpButtons","tableRowArrowDownButtons","tableRowDuplicateButtons","tableRowRemoveButtons","headerLink","modeLabelNew","modeLabelEdit","generalNameInput","generalNameInputV2","generalTypeSelect","generalTypeSelectV2","generalLabelInput","generalLabelInputV2","generalHideSelect","generalHideSelectV2","selectionOptionsAllowCustomValueSwitch","selectionOptionsMultiSwitch","selectionOptionsIncludeAllSwitch","selectionOptionsCustomAllInput","previewOfValuesOption","submitButton","QueryVariable","queryOptionsDataSourceSelect","queryOptionsRefreshSelect","queryOptionsRefreshSelectV2","queryOptionsRegExInput","queryOptionsRegExInputV2","queryOptionsSortSelect","queryOptionsSortSelectV2","queryOptionsQueryInput","valueGroupsTagsEnabledSwitch","valueGroupsTagsTagsQueryInput","valueGroupsTagsTagsValuesQueryInput","ConstantVariable","constantOptionsQueryInput","constantOptionsQueryInputV2","DatasourceVariable","datasourceSelect","TextBoxVariable","textBoxOptionsQueryInput","textBoxOptionsQueryInputV2","CustomVariable","customValueInput","IntervalVariable","intervalsValueInput","autoEnabledCheckbox","stepCountIntervalSelect","minIntervalInput","GroupByVariable","dataSourceSelect","infoText","modeToggle","AdHocFiltersVariable","marker","Rows","Repeated","ConfigSection","warningMessage","Dashboards","dashboards","toggleView","SaveDashboardAsModal","newName","save","SaveDashboardModal","saveVariables","saveTimerange","saveRefresh","SharePanelModal","linkToRenderedImage","ShareDashboardModal","PublicDashboard","WillBePublicCheckbox","LimitedDSCheckbox","CostIncreaseCheckbox","PauseSwitch","EnableAnnotationsSwitch","CreateButton","DeleteButton","CopyUrlInput","CopyUrlButton","SettingsDropdown","TemplateVariablesWarningAlert","UnsupportedDataSourcesWarningAlert","NoUpsertPermissionsWarningAlert","EnableTimeRangeSwitch","EmailSharingConfiguration","Container","ShareType","EmailSharingInput","EmailSharingInviteButton","EmailSharingList","DeleteEmail","ReshareLink","SnapshotScene","PublishSnapshot","ShareDashboardDrawer","ShareInternally","lockTimeRangeSwitch","shortenUrlSwitch","copyUrlButton","SharePanel","preview","widthInput","heightInput","scaleFactorInput","generateImageButton","downloadImageButton","ShareExternally","publicAlert","emailSharingAlert","shareTypeSelect","Creation","PublicShare","createButton","cancelButton","EmailShare","willBePublicCheckbox","enableTimeRangeSwitch","enableAnnotationsSwitch","revokeAccessButton","toggleAccessButton","ShareSnapshot","publishSnapshot","ExportDashboardDrawer","ExportAsJson","codeEditor","exportExternallyToggle","saveToFileButton","copyToClipboardButton","page","NotAvailable","pausedDescription","PublicDashboardScene","loadingPage","controls","RequestViewAccess","recipientInput","PublicDashboardConfirmAccess","Explore","graph","scrollView","addFromQueryLibrary","SoloPanel","PluginsList","list","listItem","signatureErrorNotice","PluginPage","signatureInfo","disabledInfo","PlaylistForm","interval","itemDelete","BrowseDashboards","row","checkbox","NewFolderForm","nameInput","SearchDashboards","FolderView","PublicDashboards","ListItem","linkButton","configButton","trashcanButton","pauseSwitch","UserListPage","tabs","allUsers","orgUsers","anonUserDevices","publicDashboardsUsers","users","org","admin","publicDashboards","UserListAdminPage","UsersListPage","UserAnonListPage","UsersListPublicDashboardsPage","DashboardsListModal","ProfilePage","Plugin","pluginId","MigrateToCloud","components","isOpen","onCancel","onDiscard","onCopy","buttonRef","useRef","styles","useStyles2","getStyles","useEffect","focus","Modal","div","className","modalHeaderTitle","Icon","size","span","titleText","onDismiss","p","ButtonRow","Button","variant","onClick","fill","ref","theme","css","paddingLeft","spacing","fontSize","typography","lg","float","paddingTop","margin","DatasetSelector","dataset","db","dialect","onChange","inputId","preconfiguredDataset","hasPreconfigCondition","state","useAsync","isSqlDatasourceDatabaseSelectionFeatureFlagEnabled","toOption","datasets","map","undefined","find","v","aria-label","disabled","loading","isLoading","menuShouldPortal","TableSelector","tables","data-testid","editorModes","EditorMode","Builder","Code","QueryHeader","isQueryRunnable","onQueryRowChange","onRunQuery","query","queryRowFilter","editorMode","copyToClipboard","useCopyToClipboard","showConfirm","setShowConfirm","useState","toRawSql","htmlId","useId","onEditorModeChange","useCallback","newEditorMode","reportInteraction","datasource","selectedEditorMode","EditorHeader","InlineSelect","e","QueryFormat","selectedFormat","QUERY_FORMAT_OPTIONS","InlineSwitch","id","transparent","showLabel","filter","ev","HTMLInputElement","displayed","checked","order","FlexItem","grow","br","placement","RadioButtonGroup","rawSql","Space","EditorRow","EditorField","width","sql","QueryEditorRaw","children","height","editorLanguageDefinition","queryRef","onRawQueryChange","processQuery","newQuery","rawQuery","SQLEditor","language","QueryValidator","onValidate","range","validationResult","setValidationResult","useTheme2","valueFormatter","useMemo","getValueFormat","error","color","colors","bodySmall","fontFamily","fontFamilyMonospace","success","info","secondary","validateQuery","useAsyncFn","q","trim","useDebounce","isError","isValid","splat","split","slice","join","processErrorMessage","Spinner","inline","statistics","strong","formattedValueToString","TotalBytesProcessed","QueryToolbox","showTools","onFormatCode","onExpand","isExpanded","validatorProps","border","medium","borderTop","padding","display","flexGrow","justifyContent","hint","whiteSpace","cursor","style","visibility","HorizontalGroup","IconButton","expanded","RawEditor","queryToValidate","setIsExpanded","toolboxRef","toolboxMeasure","useMeasure","editorRef","editorMeasure","getEditorLanguageDefinition","renderQueryEditor","formatQuery","renderEditor","standalone","AutoSizer","background","primary","alignItems","closeOnBackdropClick","closeOnEscape","modal","contentClassName","modalContent","Preview","datasourceType","labelElement","labelWrapper","copyPreview","Field","formatSQL","monacoOptions","scrollbar","vertical","scrollBeyondLastLine","showMiniMap","fontWeight","fontWeightMedium","paddingBottom","useSqlChange","onQueryChange","onSqlChange","GroupByRow","columns","onGroupByChange","cleaned","setGroupByField","property","newSql","groupBy","EditorList","items","renderItem","makeRenderColumn","onChangeItem","onDeleteItem","InputGroup","AccessoryButton","SQLGroupByRow","fields","sortOrderOptions","description","OrderByRow","showOffset","onSortOrderChange","orderByDirection","onLimitChange","event","limit","Number","parseInt","currentTarget","onOffsetChange","offset","onOrderByChange","orderBy","setPropertyField","isClearable","h","optional","Input","uniqueId","SQLOrderByRow","columnsWithIndices","c","i","parameters","emptyInitTree","Utils","uuid","TIME_FILTER","macros","widgets","BasicConfig","factory","props","setValue","number","datetime","operator","val","dateValue","dateTime","utc","valueFormat","date","sqlFormatValue","field","widget","operatorDefinition","rightFieldDef","includes","func","call","ctx","canRegroup","maxNesting","canReorder","showNot","addRuleLabel","deleteLabel","renderConjs","conjProps","conjunctionOptions","selectedConjunction","setConjunction","renderField","fieldProps","config","f","mainWidgetProps","customProps","selectedKey","setField","renderButton","buttonProps","renderOperator","operatorProps","op","customOperators","supportedOperators","operators","sqlFormatInOp","sqlFormatOp","bind","noop","formatInOp","formatOp","sqlFormatNotInOp","formatNotInOp","valueSrc","splitIfString","valueType","opDef","operatorOptions","fieldDef","_operator","getCustomOperators","textWidget","types","opers","customTextWidget","customTypes","raqbConfig","isString","WhereRow","tree","setTree","configWithDefaults","initTree","checkTree","loadTree","whereJsonTree","onTreeChange","changedTree","getTree","whereString","sqlFormat","renderBuilder","flex","direction","SQLWhereRow","col","raqbFieldType","valueSources","mapFieldsToTypes","templateVars","some","tv","multi","multiVariableInWhereString","replaceAll","removeQuotesForMultiVariables","getTemplateSrv","getVariables","JSON","stringify","injectGlobal","SelectColumn","onParameterChange","selectInputId","allowCustomValue","s","SelectCustomFunctionParameters","currentColumnIndex","macroOrFunction","addParameter","index","QueryEditorExpressionType","FunctionParameter","removeParameter","columnIndex","InlineLabel","getColumnValue","param","Stack","gap","addonAfter","SelectFunctionParameters","functions","fieldsFromFunction","setFieldsFromFunction","getFieldsFromFunction","push","keepIndex","funcParam","required","SelectRow","timeSeriesAliasOpts","Timeseries","onAggregationChange","aggregation","newItem","onAliasChange","alias","removeColumn","clone","splice","addColumn","createFunctionField","aggregateOptions","startsWith","wrap","addButton","alignSelf","VisualEditor","EditorRows","SqlQueryEditor","queryHeaderProps","queryWithDefaults","setIsQueryRunnable","getDB","preconfiguredDatabase","init","applyQueryDefaults","setQueryRowFilter","setQueryToValidate","dispose","isQueryValid","process","haveColumns","Boolean"],"sourceRoot":""}